Available online at www.sciencedirect.com

ScienceDirect
This Procedia
space isComputer
reserved
for 108C
the Procedia
header,
Science
(2017) 1232–1241
This space is reserved for the Procedia header,
This space is reserved for the Procedia header,
This space is reserved for the Procedia header,

do
do
do
do

not
not
not
not

use
use
use
use

it
it
it
it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

MiW: A domain specific modeling environment for complex
MiW:
modeling
environment
MiW: A
A domain
domain specific
specific
modeling
environment for
for complex
complex
molecular
systems
MiW: A domain specific
modeling
environment
for
complex
molecular
systems
molecular
systems
1
1
Tengyu
Ma and systems
Janos Sallai
molecular
Tengyu Ma1 and Janos Sallai1
1

1

TengyuUniversity,
Ma1 andNashville,
Janos Sallai
Vanderbilt
TN, USA.
1
Tengyu
Ma andNashville,
Janos Sallai
tengyu.ma@vanderbilt.edu
Vanderbilt
University,
TN, USA.
Vanderbilt
University, Nashville, TN, USA.
tengyu.ma@vanderbilt.edu
Vanderbilt
University, Nashville, TN, USA.
tengyu.ma@vanderbilt.edu
tengyu.ma@vanderbilt.edu

Abstract
Abstract
Interest in simulation based screening of soft materials for desired chemical and physical
Abstract
Interesthas
in simulation
basedyears,
screening
soft materials
for desired
properties
grown in recent
whichof promises
a reduced
time tochemical
discoveryand
andphysical
signifiAbstract
Interest
incosts
simulation
basedyears,
screening
of promises
softprogrammatically
materials
for desired
and
properties
has
grown
recent
which
a reduced
time
tochemical
discovery
andphysical
significantly
lower
thaninexperimentation.
While
generating
simulator
inputs
Interesthas
in simulation
basedyears,
screening
of promises
soft materials
for desiredtochemical
and
physical
properties
grown
recent
which
a reduced
discovery
andcomplex
significantly
costs
thaninexperimentation.
While
programmatically
generating
simulator
inputs
is fairlylower
straightforward
for crystals
or
small
molecules,
this is time
still
challenging
for
properties
has
grown
recent years, which
promises
a reduced time
to discovery
and significantly
costs
thaninsystems
experimentation.
While
programmatically
generating
inputs
is
fairlylower
straightforward
for crystals
or small
molecules,
thisinisparticular.
still
challenging
forthis
complex
(connected)
molecular
in general,
and soft
materials
To simulator
tackle
chalcantly
lower
costs than experimentation.
Whilemolecules,
programmatically
generating
simulator
inputs
is
fairly
straightforward
for
crystals
or
small
this
is
still
challenging
for
complex
(connected)
molecular
systems
in general,
soft materials
in particular.
tackle athis
challenge, this work
presents
a domain
specificand
modeling
environment
that (1)To
features
domain
is
fairly straightforward
for crystals
or small
molecules,
thisinisparticular.
still challenging
forthis
complex
(connected)
molecular
systems
in general,
and
soft
materials
tackle
challenge,
work
presents
a domain
specific
modeling
environment
(1)To
features
a domain
specificthis
modeling
language
(DSML),
capable
of
describing
classes that
of molecular
systems
in a
(connected)
molecular
systems
in general,
and
soft materials
in particular.
To
tackle athis
challenge,
this
work
presents
a
domain
specific
modeling
environment
that
(1)
features
domain
specific
modeling
language
(DSML),
of describing
classes of
molecular
a
hierarchical,
component
based
model, capable
with a rich
set of composition
operators,
andsystems
supportinfor
lenge,
this
work presents
a domain
specific
modeling
environment
(1) features
a domain
specific
modeling
language
(DSML),
capable
of describing
classes that
of
molecular
infor
a
hierarchical,
component
based
model,
with amodeling;
rich
set of(2)
composition
operators,
andsystems
support
parameterizable
systems
though
generative
a browser-based,
intuitive
graphical
specific
modeling
language
(DSML),
capable
of describing
classes of
molecular
systems
infor
a
hierarchical,
component
based
model,
with
a
rich
set
of
composition
operators,
and
support
parameterizable
generative
modeling;
(2) aofbrowser-based,
intuitivefor
graphical
user interface; (3)systems
supportthough
for online
collaboration,
sharing
components, support
version
hierarchical,
component
based
model,
with
a
rich
set
of
composition
operators,
and
support
for
parameterizable
though
generative
modeling;
(2) to
aofbrowser-based,
intuitive
graphical
user
interface;
(3)systems
support
for online
collaboration,
sharing
components,
support
for
version
control
with history
and branching;
and
(4) an
interpreter
visualize
components
and
molecuparameterizable
systems
though
generative
modeling;
(2) aofbrowser-based,
intuitivefor
graphical
user
interface;
(3)
support
for
online
collaboration,
sharing
components,
support
version
control
with and
history
and branching;
(4) an interpreter
visualizedynamics
components
andsimulator
molecular systems,
to generate
output and
understood
by major to
molecular
(MD)
user
interface;
(3) support
for onlineand
collaboration,
sharingtoofvisualize
components,
supportand
formolecuversion
control
with
history
and
branching;
(4)
an
interpreter
components
lar
systems,
and toincludes
generatea output
understood
by majorthe
molecular
dynamics
(MD)
simulator
tools.
The paper
case study
demonstrating
use of the
modeling
environment
control
with
history
and
branching;
and
(4)
an
interpreter
to
visualize
components
and
molecular
systems,
and toincludes
generate
output
understood
bynanostructure,
majorthe
molecular
dynamics
simulator
tools.
The
paper
case
study
demonstrating
use of
modeling
to build
a generative
modelaof
a parameterizable
to the
feed
input (MD)
to environment
a simulation
lar
systems,
and toincludes
generatea output
understood
by majorthe
molecular
dynamics
(MD)
simulator
tools.
The
paper
case
study
demonstrating
use
of
the
modeling
environment
to
build
a generative
model
of a parameterizable
nanostructure, to feed input to a simulation
based
screening
workflow
of nanolubrication
materials.
tools.
The
paper
includes
a
case
study
demonstrating
the
use
of
the
modeling
environment
to
build
a generative
model
of a parameterizable
nanostructure, to feed input to a simulation
based
screening
workflow
of nanolubrication
materials.
Keywords:
domain
specific
languages,
component
modeling,
generativeto
modeling,
molecular
dynamics
to
build
generative
model
of
a parameterizable
nanostructure,
feed input
to a simulation
©
2017
Thea Authors.
Published
bynanolubrication
Elsevier
B.V.
based
screening
workflow
of
materials.
Keywords:
domain
specific languages,
component
modeling,
generative
modeling,
molecular dynamics
Peer-review
under
responsibility
of the
scientific
committee
of the International
Conference
on Computational
Science
based screening
workflow
of
nanolubrication
materials.
Keywords: domain specific languages, component modeling, generative modeling, molecular dynamics
Keywords: domain specific languages, component modeling, generative modeling, molecular dynamics

1 Introduction
1 Introduction
1
Introduction
Molecular
dynamics (MD) simulation can be considered a significant contributor to chemical
1
Introduction
Molecular
dynamics
(MD) design,
simulation
cancan
be reduce
considered
a significant
contributor
to chemical
engineering
and materials
which
the costs
of repeated
experiments
in the

Molecular
(MD)
simulation
cancan
be
considered
a issignificant
contributor
chemical
engineering
and materials
design,
which
reduce
the costs
repeated
experiments
inoften
the
real world.dynamics
However,
setting
up and
using
MD
simulators
a of
tedious,
error
prone,toand
Molecular
dynamics
(MD) design,
simulation
cancan
be reduce
considered
a significant
contributor
to chemical
engineering
and
materials
which
the
costs
of
repeated
experiments
inoften
the
real
world.task,
However,
setting up
using
MD
simulators
tedious,
error chemical
prone, and
repetitive
which requires
endand
users
to be
skilled
not onlyisina the
particular
domain,
engineering
and materials
design,
which
can
reduce
the costs
of
repeated
experiments
inoften
the
real
world.
However,
setting
up
and
using
MD
simulators
is
a
tedious,
error
prone,
and
repetitive
which requires
end users
only
the particular
chemical
domain,
but also intask,
programming
in general.
Oneto
ofbe
theskilled
initialnot
tasks
of in
setting
up a simulation
is creating
real
world.
However,
setting
up
and
using
MD
simulators
is
a
tedious,
error
prone,
and
often
repetitive
task,
which
requires
end users
to
not
only
the particular
chemical
domain,
but
also insystem.
programming
in general.
One
ofbe
theskilled
initial
tasks
of in
setting
upaa lot
simulation
is creating
an input
Programmatically
generating
the
inputs
requires
of
custom,
handrepetitive
task,
which requires
end users
to
be
skilled
not
only
in
the particular
chemical
domain,
but
also
in
programming
in
general.
One
of
the
initial
tasks
of
setting
up
a
simulation
is
creating
an
inputcode.
system.
generating
the inputsin requires
a lot
custom,a cloudhandwritten,
WithProgrammatically
the purpose to alleviate
this problem,
this paper,
we of
describe
but
also insystem.
programming in general. One
of the initial
of setting
upaa lot
simulation
is creating
an
input
generating
thetasks
inputs
custom,
handwritten,
code. WithProgrammatically
the purpose to
alleviate
problem,
in requires
this paper,
we of
describe
a cloudbased
collaborative
environment
that
allows this
for building
complex
molecular
topologies
from
an
inputcode.
system.
Programmatically
generating
the inputsin requires
a lot
of
custom,a cloudhandwritten,
With
the
purpose
to
alleviate
this
problem,
this
paper,
we
describe
based
collaborative
environment
that allows
forhaving
building
complex in
molecular
topologies
from
reusable,
parameterizable
components,
without
to program
an imperative
language.
written,
code. With environment
the purpose to
alleviate
this
problem,complex
in this paper,
we describe
a cloudbased
collaborative
that
allows
forhaving
building
molecular
topologies
from
reusable,
parameterizable components,
without
to program in
an imperative
language.
based
collaborative
environment
that allows
forhaving
building
complex in
molecular
topologies
from
reusable,
parameterizable
components,
without
to program
an imperative
language.
1
reusable, parameterizable components, without having to program in an imperative language.
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
1
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
1
10.1016/j.procs.2017.05.114

	

Tengyu Ma et
/ Procedia
Computersystems
Science 108C (2017)Tengyu
1232–1241
A domain specific modeling environment
foral.complex
molecular
Ma and Janos Sallai

This novel modeling tool, MBuild in WebGME (MiW), leverages two existing technologies,
mBuild[9, 16], which is a hierarchical molecule builder, and WebGME, which is a web- and
cloud- based tool for Domain Specific Modeling Languages (DSML)[12].
MBuild is a Python class library that allows for building parameterizable molecular structures out of reusable building blocks in a hierarchical, component based manner. Its development was originally motivated by the need for a tool that allows for parameter sweep experiments Instead of handcrafting a complex molecular system, or writing ad-hoc, write-onceuse-once source code to do that for every different parameter combination, mBuild creates a
parameterizable model that represents a class of materials. Then, for each run of the parameter
sweep experiment, the mBuild model is instantiated for a particular design point, and the concrete model is serialized in a file format suitable for the particular molecular dynamics (MD) or
Monte Carlo (MC) simulator tool, such as GROMACS [15], LAMMPS [4], or HooMD Blue [8].
While mBuild dramatically reduces the time and effort required to generate such outputs, it
does not free its users from having to program in Python, and to learn to use the mBuild class
library itself. To open up and to make available mBuild to users who are domain experts but
not Python programming experts, we propose to decouple mBuild’s component model from the
Python programming language, and to create a visual, declarative, domain specific language
that captures mBuilds abstractions.
Declarative languages exhibit a number of advantages versus a corresponding imperative
implementation:
• They allow the user to describe what the program should accomplish, rather than describe
how to accomplish it as a sequence of the programming language statements.
• Correct-by-construction semantics can prevent users from creating code or models that
would obviously fail, because they restrict the language to constructs that can only be
used to build provably correct models.
• Declarative languages tend to be easier to comprehend, as the syntax is specific to the
particular domain, and is not cluttered with irrelevant details.
• Declarative languages are more succinct and require less boilerplate code.
• Since they are not bound to any one particular programming language, they promote
portability and reuse across different platforms and general purpose host languages.
• They offer better error handling. For instance, errors can be caught at the time of parsing,
rather than at runtime.
MiW is an online collaborative modeling tool to design large-scale molecular configurations
for MD and MC simulations. The molecular models are specified as a hierarchical composition
of components, that is, a more complex component is composed of multiple simpler ones,
with atomistic models being the leaves of the composition hierarchy. MiW provides a domain
specific modeling language (DSML) to describe the components. The language provides a
rich set of composition operators (equivalence, polymerization, tiling, pattern-based component
replication, etc.) that let the end users create components in a declarative manner.
MiW is built on top of WebGME, a web-based generic modeling environment [13]. which
leverages several important collaboration features that WebGME offers, enabling users to:
• Collaborate simultaneously. Multiple users are allowed to work on a model at the same
time.
2

1233

1234	

Tengyu Ma et
/ Procedia
Computersystems
Science 108C (2017)Tengyu
1232–1241
A domain specific modeling environment
foral.complex
molecular
Ma and Janos Sallai

• Collaborate in diverse domains. MiW allows organizing components into libraries. This
way, components that belong to different chemical domains can be kept separately and
evolve concurrently.
• Collaborate across research groups. Exporting and importing components is supported
through an XML serialization mechanism.
The rest of the paper is structured as follows: First, we summarize related work and then we
are going to give more information about our approach along with the description of the MiW
workflow. Next, we present a concrete case-study to demonstrate how to build up a complex
molecular system that is built from components that are supplied by the experts from different
chemical domains. Finally, a brief conclusion and the future development directions of our
platform are presented.

2

Approach

Our approach follows the model integrated computing (MIC) paradigm [17] which has already
applied broadly [14, 6, 5, 11, 18], and employs it to a design problem in the chemical simulation
domain: building complex molecular topologies that will serve as input files to the MC and MD
simulators. MIC focuses on the formal representation, composition, analysis, and manipulation
of models during the design process.
First, we define a domain specific modeling language to capture the high-level concepts of
the target domain. These concepts include the basic building blocks of a molecular system,
such as an atom, a bond, a molecule fragment (component), as well as the relationships and
operators that enable composing these blocks, such as containment, connection, equivalence,
and more specialized operations (polymerization, tiling, etc.).
Second, we implemented the mapping between the MiW models and the target domain,
where the target domain in our case is a representation of the complex molecular topologies
as common chemical file formats understood by the particular simulator tools. In MiW, this
mapping is implemented by a model interpreter that traverses the hierarchical model (a top-level
component recursively built from simpler components), automatically generates Python code
that leverages the mBuild Python library, and executes the generated code that will create the
output files. The same code generation mechanism, together with a 3-D molecular visualization
tool is used to feed back the visual representation of the components to the WebGME models.

2.1

Metamodel

The WebGME metamodel specifies the MiW DSML, as Figure 1 shows. The graphical syntax
of the metamodeling language is similar to UML class diagrams: boxes represent concepts in
the chemical domain (e.g. Atom, Compound, Bond), red connections with triangles represent
(prototypical) inheritance (e.g. an Atom is a Library element), lines with black diamonds
represent containment (e.g. a Compound can contain Operators and Library elements), blue
arrows pointing outwards from a language element indicate that it is a binary relation (e.g. a
Bond), and the arguments of the relation are the language elements towards which the arrows
point (e.g. compounds).
At the root of the hierarchy, there is a node labeled Compound, which is an abstract type
(denoted with light gray color). All the red lines are the prototypical inheritance lines. The
concept of inheritance here is slightly different from object-oriented programming: in WebGME,
3

	

A domain specific modeling environment
foral.complex
molecular
Ma and Janos Sallai
Tengyu Ma et
/ Procedia
Computersystems
Science 108C (2017)Tengyu
1232–1241

prototypical inheritance will create a deep copy of the base model adding a dependency relationship, which means that although the new meta node is a deep copy of the base, any change
in the base will immediately propagate down the hierarchical tree. Thus, the inheritance lines
(red lines) represent a ”live” relationship between two meta nodes that ensures the consistency
through the whole structure [12]. The inheritance and containment (black lines with diamonds)
are modeling concepts that are close to the real chemical synthesis because no matter what type
a particular material is, it can be a derivative of a certain substance and be contained by other
material.

Figure 1: Metamodel in chemical domain
In the MiW metamodel, three important abstract meta types inherit from the Compound
type: Operator, Lib (library element), and Connection, where each of them represents a fundamental concept in component-based modeling of chemical structures. Operator defines the
composition rules for all the compounds, i.e., how to hierarchically organize basic molecular
building blocks, what the internal relationships between compounds are, and in which precise
position the system should construct a chemical block. More specifically and importantly, as
for Connection, it is in charge of creating various relationships between two compounds. We
distinguish the following connection types:
• Equivalence, a powerful concept introduced by mBuild [9] to specify that the locations of
model elements that are connected with an Equivalence connection are identical. That
is, an Equivalence relation requires that one of the components should be translated and
rotated by the mBuild runtime such that they overlap in space.
• Bond, a connection between two atoms indicating that the two atoms are bonded to each
other.
4

1235

1236	

A domain specific modeling environment
foral.complex
molecular
Ma and Janos Sallai
Tengyu Ma et
/ Procedia
Computersystems
Science 108C (2017)Tengyu
1232–1241

• Port2Port, a connection between two Ports. Ports are special Compounds that contain
”ghost” particles in a special 3-dimensional arrangements, and are used targets of equivalence relations. mBuild uses Ports to specify the geometric locations of binding sites
between molecular components. Please refer to [9] for a detailed description of the Port
concept.
• Anchor, a connection between an Atom and a Port. Connecting two ports with an Equivalence relation implies that a bond should be created between the two corresponding
Anchor atoms.
• Hoist, a special connection to expose a Port of a containment at a lower level of the
hierarchy to be visible in the actual compound. A textual language analogy of a Hoist
would be creating a named reference to an object that is otherwise not visible in the
current namespace. A common usecase of a Hoist is to expose the Port at the end of the
monomer (contained component) inside a Polymer compound (the container), making it
a Port of the Polymer.

2.2

Code generation

To map MiW models to chemical file formats that can be read by MC and MD simulator
tools, MiW provides a code generation function which is considered as the most significant
feature in our platform. Through the ”MoleculeCodeGeneration (MCG)” WebGME plugin, the
molecular structure specified using the MiW DSML is converted into Python code automatically.
Technically speaking, the MCG plugin, which is developed in JavaScript, will first traverse all
the nodes in the simulation system to collect all the useful information about each node including
name, meta type, position, etc., and construct a hierarchical JSON structure. Next, based on
the returned JSON structure, the interpreter will create a Python source file for each Compound
node using the corresponding EJS template (we maintain a set of EJS templates for each meta
type to allow for template-based code generation). In this stage, the MCG is doing a variant
of breadth-first search with the intention of pruning more numbers of branches. Specifically,
the nodes holding the same meta type can share the exactly same Python code so that once
the first node has been translated into Python, the interpreter does not need to visit the same
type nodes again. Finally, we execute the generated Python code, which saves the molecular
structure in the chemical file format requested by the user.

Figure 2: Code Generation Flow

2.3

Visualization

The visualization of MiW components is supported by the imolecule [7] JavaScript library, a
webGL [3] molecule viewer, which we integrated into the WebGME-based user interface. To
visualize the topologies automatically, the code generator will emit several lines of extra Python
code that can invoke imolecule, and return the result as HTML, with embedded Javascript and
a JSON based representation of the molecular structure. This Python code is executed on the
server, and the generated content will be returned to the client and visualized in the browser.
5

	

Tengyu Ma et al. / Procedia Computer Science 108C (2017) 1232–1241
A domain specific modeling environment for complex molecular systems
Tengyu Ma and Janos Sallai

Figure 3: Pyramid Structure for Alkylsilane Monolayer

3

Case study

In this section, we demonstrate the use of the MiW environment to design an alkylsilane monolayer, a complex molecular structure which is composed of various meta types including Surface,
Pattern, Arbitrary, and so on. Figure 3 represents the hierarchical containment structure of
the alkylsilane monolayer model. All the meta types appearing at the top of the hierarchy are
composed of multiple, simpler compounds in the lower layers. In our code generator implementation, instead of building up the whole molecular topology from the bottom of the pyramid,
the constructing strategy we adopted is to go through the entire hierarchy from top to bottom.
Starting the iteration at the most top point will give benefits for saving time, which can be
explained by following:
• The layer which nears to the top can have a smaller number of building blocks.
• MiW supports an arbitrary number of layers in the component library. Once the searching
algorithm realizes that the library already contains the current iteration piece, it can skip
the search for other instances of the same meta type further down in the containment
hierarchy.
• MiW will save the generated Python file for each compound the first time it is encountered. For the same reason as above, the branching factor in the traversed tree can be
dramatically shrunk when the duplicate nodes are closer to the root node.
Figure 3 demonstrates multiple advantages of our MD simulation platform. Noticed that
layer three only consists of two types of compounds, Alkane and Silane, that serve as the
basic blocks for Alkyl Silane. You may ask where the compounds that ought to constitute the
Beta Cristobaliteare are? The answer is that Beta Cristobalite already exists in our library,
specifically, surface library, so that no subsequent generation rooted at Beta Cristobalite will
have to be repeated any more. However, since Alkyl Silane is not part of the library, and
it occurs in our model for the first time, it needs to be expanded one layer down to gather
more information about its components. Next, there is still no stored Python file for Alkane,
so the simulation platform will iteratively figure out what types of building blocks it asks for.
The Alkane compound of Layer 3 is further expanded in Layer 4 and below, as follows. First,
6

1237

1238	

Tengyu Ma et al. / Procedia Computer Science 108C (2017) 1232–1241
A domain specific modeling environment for complex molecular systems
Tengyu Ma and Janos Sallai

Figure 4: The completed hierarchy of Alkylsilane Monolayer
although we draw out CH3 and CH2 two times, the number doesn’t mean the real length of the
Alkane, even the actual existence of CH3. The Alkane can be generated in arbitrary length,
specified by a user-defined length attribute, and the CH3 is only the cap of the Alkane, which
means it is an optional choice that can be replaced by a Port. Second, no matter how many
CH2 or CH3 in the Alkane, the Python code will only need to be generated once, after that all
of the other same compounds can share the same Python code. The Layer 5 which we filled the
background with blue is in fact never used because supposing we implement all the fundamental
elements one by one, the number of these little atoms would be enormous to form a 100 × 100
Beta Cristobalite surface.

Figure 5: The Composition of Alkylsilane Monoalyer
As Figure 5 shows, the Alkylsilane Monolayer consists of four totally different types of compounds. H is the hydrogen; Beta Cristobalite is a complex molecular structure that already
exists in our surface library; Alkyl Silane is an arbitrary meta type which means there is no
7

	

A domain specific modeling environment
foral.complex
molecular
Ma and Janos Sallai
Tengyu Ma et
/ Procedia
Computersystems
Science 108C (2017)Tengyu
1232–1241

specific constructed rule for it. Most importantly, the Pattern defines a particular arrangement of Alkyl Silane compounds on top of the Beta Cristobalite structure. The Pattern type
has six attributes. The ”pattern” and ”pattern n” attributes define the attaching rule for a
surface and the multiplicity of chains. In this particular case, the ”pattern” is selected as ”Random2DPattern” and the value of ”pattern n” is 20, meaning that the surface needs to reserve
20 randomly selected ports as binding sites for 20 Alkyl Silane chains. The binding sites that
are not populated by Alkyl Silanes will be capped with H atoms. After the code generator is
run for the first time for the Alkylsilane Monolayer compound, the generated Python code for
all the referenced components of the containment hierarchy will be stored in the MiW library.
If the end user intends to alter the model, e.g. with longer chain lengths or with a wider surface,
the code generator will need to visit the affected components only, and will complete relatively
quickly, by only changing a few attributes of a small number of components.

3.1

Design workflow with WebGME

Since MiW is built on top of WebGME, it benefits from WebGME’s collaborative modeling
features. Similar to how Google Docs work, MiW will immediately and safely propagate any
valid change between users that are connected to the same server [10]. As long as the changes
made by different users affect disjoint sets of model elements, changes will be visible to all users.
In the case of conflicting changes, however, WebGME will automatically create two disjoint
branches, allowing the users’ models to freely diverge, and delegating the task of merging their
branches manually, if needed. Apart from enabling multiple users to concurrently work on
the same modeling project, collaboration can also be achieved by sharing a library of existing
compounds with others. In Section 2, we explained that the first time Python code is generated
for a model element, it will be stored in the compound library for future use, but the purpose
of saving intermediate code generation results is not limited to this. Along with the MiW
components, the corresponding Python codes, i.e. mBuild components, can also be shared as
part of the library. In the future, we plan to implement a standard public library to share
and exchange components through our platform. This will promote reuse of components across
projects as well as across different research groups.

Figure 6: Import and Export a Compound

Figure 7: Version Control

Version control is also a compelling feature in our system. Every change related to a node
operation will be committed automatically in the history, and if users accomplish a milestone
of their work, they can combine all the auto-commits together as one commit with the message
8

1239

1240	

A domain specific modeling environment
foral.complex
molecular
Ma and Janos Sallai
Tengyu Ma et
/ Procedia
Computersystems
Science 108C (2017)Tengyu
1232–1241

they want to mark. This is a feature provided by WebGME [12]. The user can revert to a
specific commit, create a branch and merge branches in a way similar to text-oriented version
control systems such as git [2] and Subversion [1].

4

Conclusion and future work

In this work, we described MiW, a web-based collaborative graphical modeling environment
for building complex molecular topologies in a hierarchical, component-oriented way. MiW is
built on top of WebGME, a web-based generic modeling environment, and relies on the mBuild
Python package to generate and to visualize the assembled molecular topologies.
The contribution of our work is threefold. First, we successfully integrated several existing tools and libraries into an easy-to-use, domains-specific environment, such as WebGME
for online, collaborative, version controlled modeling, mBuild for component based molecular
topology generation, and imolecule for molecular visualization. Second, we created a domain
specific modeling language (DSML) that makes it possible to create and componentize molecular fragments, compose existing components via a large number of composition operators to
build larger, composite components, and representing a target molecular topology as a hierarchical composition of its parts. The MiW DSML is a declarative modeling language, that
captures high level concepts in the chemical domain, but in the same time it hides the low-level
implementation details from the end user. Third, we implemented a code generation toolchain
that maps MiW models to downloadable files in chemical file formats suitable for molecular
dynamics simulators. The code generators also allow for converting graphical MiW models to
mBuild components, and provide a component visualization facility within the web browser.
In the future, we are going to expand the capability of MiW in three directions. First,
we plan to establish a public repository for sharing common molecular building blocks that
can be reused across projects, and shared between research groups. Second, we will extend
the toolchain to attach the Python sources of the generated mBuild components each of the
model elements in the graphical environment, which will allow advanced users to integrate
MiW components in their existing Python projects. Finally, we plan to develop a user account
management mechanism for MiW which will let users set fine-grained access restrictions on
model elements, similar to the access control features of commonly used online collaboration
tools.

Acknowledgements
This work is supported by the National Science Foundation under grant numbers ACI-1535150
and ACI-1047828.

References
[1] Apache subversion. [online], 2017. Retrieved February 10, 2017, from https://subversion.
apache.org/.
[2] Git. [online], 2017. Retrieved February 10, 2017, from https://git-scm.com/.
[3] Webgl: Opengl es 2.0 for the web. [online], 2017. Retrieved February 10, 2017, from https:
//www.khronos.org/webgl/.

9

	

Tengyu Mafor
et al.
/ Procedia
Computer
Science 108C (2017)
1232–1241
A domain specific modeling environment
complex
molecular
systems
Tengyu
Ma and Janos Sallai

[4] Joshua A. Anderson, Chris D. Lorenz, and A. Travesset. General purpose molecular dynamics
simulations fully implemented on graphics processing units. Journal of Computational Physics,
227(10):5342 – 5359, 2008.
[5] Hamid Bagheri and Kevin Sullivan. Monarch: Model-Based Development of Software Architectures,
pages 376–390. Springer Berlin Heidelberg, Berlin, Heidelberg, 2010.
[6] Krzysztof Czarnecki, Thomas Bednasch, Peter Unger, and Ulrich Eisenecker. Generative Programming for Embedded Software: An Industrial Experience Report, pages 156–172. Springer Berlin
Heidelberg, Berlin, Heidelberg, 2002.
[7] Patrick Fuller. imolecule: An embeddable webgl molecule viewer and file format converter. [online],
2017. Retrieved February 10, 2017, from http://patrickfuller.github.io/imolecule/.
[8] Jens Glaser, Trung Dac Nguyen, Joshua A. Anderson, Pak Lui, Filippo Spiga, Jaime A. Millan,
David C. Morse, and Sharon C. Glotzer. Strong scaling of general-purpose molecular dynamics
simulations on {GPUs}. Computer Physics Communications, 192:97 – 107, 2015.
[9] Christoph Klein, Jnos Sallai, Trevor J. Jones, Christopher R. Iacovella, Clare McCabe, and Peter T. Cummings. A hierarchical, component based approach to screening properties of soft matter.
2016.
[10] Zsolt Lattmann, Tamas Kecskes, Patrik Meijer, Gabor Karsai, Peter Volgyesi, and Akos Ledeczi.
Abstractions for modeling complex systems. In ISoLA 2016: 7th International Symposium on
Leveraging Applications of Formal Methods, Verification and Validation, Corfu, Greece, 2016.
[11] Zsolt Lattmann, Adam Nagel, Jason Scott, Kevin Smyth, Johanna Ceisel, Chris vanBuskirk,
Joseph Porter, Sandeep Neema, Ted Bapty, Dimitri Mavris, and Janos Sztipanovits. Towards automated evaluation of vehicle dynamics in system-level designs. In Proc. ASME International Design
Engineering Technical Conf. & Computers and Information in Engineering Conf. (IDETC/CIE
2012), Chicago, IL, USA, 08/2012 2012.
[12] Miklos Maroti, Tamas Kecskes, Robert Kereskenyi, Brian Broll, Peter Volgyesi, Laszlo Juracz,
Tihamer Levendovszky, and Akos Ledeczi. Next generation (meta)modeling: Web- and cloudbased collaborative tool infrastructure. In 8th Multi-Paradigm Modeling Workshop, Valencia,
Spain, 09/2014 2014.
[13] Miklos Maroti, Robert Kereskenyi, Tamas Kecskes, Peter Volgyesi, and Akos Ledeczi. Online
collaborative environment for designing complex computational systems. In The International
Conference on Computational Science (ICCS 2014), Cairns, Australia, 06/2014 2014. Elsevier
Procedia, Elsevier Procedia.
[14] J. L. Mathe, J. B. Martin, P. Miller, . Ldeczi, L. M. Weavind, A. Nadas, A. Miller, D. J. Maron,
and J. Sztipanovits. A model-integrated, guideline-driven, clinical decision-support system. IEEE
Software, 26(4):54–61, July 2009.
[15] Sander Pronk, Szilrd Pll, Roland Schulz, Per Larsson, Pr Bjelkmar, Rossen Apostolov, Michael R.
Shirts, Jeremy C. Smith, Peter M. Kasson, David van der Spoel, Berk Hess, and Erik Lindahl.
Gromacs 4.5: a high-throughput and highly parallel open source molecular simulation toolkit.
Bioinformatics, 29(7):845, 2013.
[16] Janos Sallai, Gergely Varga, Sara Toth, Christopher R. Iacovella, Christoph Klein, Clare McCabe,
Akos Ledeczi, and Peter T. Cummings. Web- and cloud-based software infrastructure for materials
design. In The 14th International Conference on Computational Science (ICCS 2014), Cairns,
Australia, 06/2014 2014. Procedia Computer Science, Procedia Computer Science.
[17] Janos Sztipanovits and Gabor Karsai. Model-integrated computing. Computer, 30(4):110–111,
April 1997.
[18] K. Thramboulidis, D. Perdikis, and S. Kantas. Model driven development of distributed control
applications. The International Journal of Advanced Manufacturing Technology, 33(3):233–242,
2007.

10

1241

