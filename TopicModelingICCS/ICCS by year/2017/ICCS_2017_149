Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header,
This Procedia
space is reserved
for 108C
the Procedia
header,
Science
(2017) 2368–2372
This space isComputer
reserved
for the Procedia
header,
This space is reserved for the Procedia header,

do
do
do
do

not
not
not
not

use
use
use
use

it
it
it
it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Imperative
Imperative
Imperative
Imperative

BSPlib-style Communications
BSPlib-style
BSPlib-style Communications
Communications
FrédéricCommunications
Loulergue
BSPlib-style
Frédéric Loulergue
Frédéric Loulergue

in
in
in
in

BSML
BSML
BSML
BSML

School of Informatics Computing and Cyber Systems
Frédéric
Loulergue
School
of Informatics
CyberUSA
Systems
Northern
ArizonaComputing
University, and
Flagstaff,
School
of Informatics
Computing
and
Cyber Systems
Northern
Arizona University, Flagstaff, USA
frederic.loulergue@nau.edu
Northern
ArizonaComputing
University, and
Flagstaff,
School
of Informatics
CyberUSA
Systems
frederic.loulergue@nau.edu
frederic.loulergue@nau.edu
Northern
Arizona University, Flagstaff, USA
frederic.loulergue@nau.edu

Abstract
Abstract
Bulk
synchronous parallelism (BSP) offers a simple model of parallelism yet allows to take
Abstract
Bulk
synchronous
parallelism
(BSP) offers costs
a simple
modelalgorithms.
of parallelism
yet and
allows
to take
realistically
into account
the communication
of parallel
BSPlib
its variants
Bulk
synchronous
parallelism
(BSP) offers a simple
model of parallelism
yet allows
to take
Abstract
realistically
into
account
the
communication
costs
of
parallel
algorithms.
BSPlib
and
its
variants
are
libraries
the
C language
that
support
the
BSP style.
Bulk
Synchronous
realistically
into account
thefor
communication
of parallel
BSPlib
and
its variants
Bulkprogramming
synchronous
parallelism
(BSP)
offers costs
a simple
modelalgorithms.
of parallelism
yet
allows
to take
are
programming
libraries
for thefor
C language
that support
the
style. Bulk
Synchronous
Parallel
MLinto
(BSML)
is athe
library
BSP programming
with
theBSP
functional
language
OCaml.
are
programming
libraries
for
the C language
that
support
the
BSP
style.
Bulk
Synchronous
realistically
account
communication
costs
of parallel
algorithms.
BSPlib
and
its variants
Parallel
ML (BSML)
is aseen
library
for BSP programming
with on
theafunctional
language
OCaml.
BSML
programs
can
be
sequential
programs
working
parallel
structure
(seq
Parallel
ML (BSML)
is a library
for
BSP programming
withthe
theBSP
functional
language
OCaml.
are programming
libraries
forasthe
C language
that support
style. data
Bulk
Synchronous
BSML
programs
can
be
seen
as
sequential
programs
working
on
a
parallel
data
structure
(seq
of
par)
while
a
BSPlib
program
is
written
in
the
SPMD
style
and
understood
as
a
parallel
BSML
can be
as sequential
programs working
parallel data
structure
(seq
Parallelprograms
ML (BSML)
is aseen
library
for BSP programming
with on
theafunctional
language
OCaml.
of
par)
while
a
BSPlib
program
is
written
in
the
SPMD
style
and
understood
as
a
parallel
composition
programs
(par
of style
seq).
communication
of
of
par) programs
whileofacommunicating
BSPlib
is written
in the SPMD
understood
as a styles
parallel
BSML
can be program
seen assequential
sequential
programs
working
on and
aThe
parallel
data structure
(seq
composition
of communicating
sequential
programs
(par
of seq).
The communication
styles of
BSML
and
BSPlib
are
also
quite
different.
This
paper
shows
that
BSPlib-style
communications
composition
sequential
programs
(par of style
seq). and
The understood
communication
of
of par) whileofacommunicating
BSPlib program
is written
in the SPMD
as a styles
parallel
BSML
BSPlib are
different.
Thisthe
paper
shows
that BSPlib-style
communications
can
be and
implemented
onalso
topquite
of BSML,
without
need
to
BSML
parallel
primitives.
BSML
and
BSPlib
are
also
quite
different.
This paper
shows
that BSPlib-style
communications
composition
of communicating
sequential
programs
(par
of extend
seq).
The
communication
styles of
can be implemented on top of BSML, without the need to extend BSML parallel primitives.
can
beThe
implemented
onalso
topby
ofElsevier
BSML,
without
need
to extend
BSML parallel
primitives.
BSML
and
BSPlibPublished
are
quite
different.
Thisthe
paper
shows
that BSPlib-style
communications
Keywords:
©
2017
Authors.
B.V.
Keywords:
can
be
implemented
on
top
of
BSML,
without
the
need
to
extend
BSML
parallel
primitives.
Peer-review
under
responsibility
of
the
scientific
committee
of
the
International
Conference
on
Computational
Science
Keywords:
Bulk synchronous parallelism (BSP) is a model of parallelism introduced by Valiant [6] and
Bulk BSP
synchronous
(BSP) is
model
parallelism
introducedItbyhas
Valiant
[6] and
Keywords:
McColl.
has beenparallelism
used successfully
fora
broadof
of applications.
also inspired
Bulk synchronous
parallelism
(BSP) is
a amodel
ofvariety
parallelism
introduced by Valiant
[6] and
McColl.
BSP
has
been
used
successfully
for
a
broad
variety
of
applications.
It
has
also
inspired
more
recent
frameworks
such
as
Pregel,
and
open
source
frameworks
such
as
Giraph.
McColl.
BSP
has
been
used
successfully
for
a
broad
variety
of
applications.
It
has
also
inspired
Bulk synchronous parallelism (BSP) is a model of parallelism introduced by Valiant [6] and
more
recent
frameworks
such
asgeneral
Pregel, and open
sourcearchitectures
frameworks even
such if
as Giraph.
The
BSP
model
targets
all
parallel
more
recent
such
as Pregel,purpose
and
source
frameworks
such asItthe
Giraph.
McColl.
BSPframeworks
has been
used
successfully
for aopen
broad
variety
of applications.
hasBSP
alsoarchitecinspired
The
BSP
model
targets
all
general
purpose
parallel
architectures
even
if
the
BSPa architecture
is
a
distributed
memory
machine:
p
processor-memory
pairs
connected
though
network
The
BSP
model
targets
all
general
purpose
parallel
architectures
even
if
the
BSP
more recent frameworks such as Pregel, and open source frameworks such as Giraph. architecture
is a distributed
memory
machine: p processor-memory
pairs connected
though
network
allowing
point-to-point
communications,
and a parallel
global synchronization
unit.
A BSP
BSPaa architecprogram
ture
is aBSP
distributed
memory
p processor-memory
pairs connected
though
network
The
model targets
allmachine:
general purpose
architectures
even
if the
allowing
point-to-point
communications,
and
a
global
synchronization
unit.
A
BSP
program
is
a
sequence
of
super-steps.
A
super-step
is
composed
of
three
phases:
A
computation
phase
allowing
point-to-point
communications,
and
a
global
synchronization
unit.
A
BSP
program
ture is a distributed memory machine: p processor-memory pairs connected though a network
is
a sequence
of super-steps.
A super-step
is composed
of three
phases:
A computation
phase
where
each
processor
computes
using
only
the
data
it
holds
in
its
local
memory;
a
communicais
a
sequence
of
super-steps.
A
super-step
is
composed
of
three
phases:
A
computation
phase
allowing point-to-point communications, and a global synchronization unit. A BSP program
where
each
processor
computes
using
only
the
data
it
holds
in
its
local
memory;
a
communication
phase
where
processors
request
data
from
other
processors;
and
finally
a
synchronization
where
each
processor
computes
using
only
the
data
it
holds
in
its
local
memory;
a
communicais a sequence of super-steps. A super-step is composed of three phases: A computation phase
tion
phase
where
request
otherare
processors;
and
a synchronization
phase
which
ends processors
the computes
super-step.
Thedata
datafrom
requests
guaranteed
tofinally
have
been
when
tion
processors
request
data
from
otherit processors;
finally
a synchronization
wherephase
each where
processor
using
only
the
data
holds
in its and
local
memory;
afulfilled
communicaphase
which
ends
the
super-step.
The
data
requests
are
guaranteed
to
have
been
fulfilled when
the
synchronization
phase
ends.
phase
which
ends
the
super-step.
The
data
requests
are
guaranteed
to
have
been
fulfilled
when
tion phase where processors request data from other processors; and finally a synchronization
the Soon
synchronization
phase
ends.
after
the
BSP
model
was
introduced,
two
main
libraries
to
support
BSP
programming
the
synchronization
phase
ends.
phase which ends the super-step. The data requests are guaranteed to have been fulfilled when
Soon
after thethe
BSP
model
waslibrary
introduced,
twothe
main
libraries
support
were
developed:
Green
BSP
[2], and
Oxford
BSPto
set. BSP
The programming
developers of
after the BSP
model
was introduced,
two main
libraries
totool
support
BSP
programming
the Soon
synchronization
phase
ends.
were
developed:
the
Green
BSP
library
[2],
and
the
Oxford
BSP
tool
set.
Thelibraries
developers
of
these
libraries
produced
a standard
proposal:
The
BSPlib
library
All
these
are on
were
developed:
the
Green
BSP
[2], and
Oxford
BSPto[3].
tool
set.
The programming
developers
of
Soon
after the
BSP
model
waslibrary
introduced,
twothe
main
libraries
support
BSP
these
libraries
produced
a
standard
proposal:
The
BSPlib
library
[3].
All
these
libraries
are
on
top
the C imperative
programming
language,
and
follow
anBSP
imperative
programming
style.
these
libraries
produced
a standard
proposal:
The
BSPlib
library
[3].
these
are
on
wereofdeveloped:
the Green
BSP library
[2], and
the
Oxford
toolAll
set.
Thelibraries
developers
of
top Bulk
of theSynchronous
C imperative
programming
language,
follow
an imperative
programming
style.
Parallel
ML orproposal:
BSML
[4]The
isand
also
a programming
that
supports
the
top
the C imperative
programming
language,
and
follow
an imperative
programming
style.
theseoflibraries
produced
a standard
BSPlib
library
[3]. library
All these
libraries
are
on
Bulk
Synchronous
Parallel
ML or
BSML [4] is also
a programming
library
that
supports
the
BSP
for the
functional
programming
language
OCaml.
The
style
of this
library
is
Parallel
ML or
BSML
[4] isand
also
a programming
library
that
supports
the
top Bulk
ofmodel,
theSynchronous
C but
imperative
programming
language,
follow
an imperative
programming
style.
BSP
model,
but
for
the
functional
programming
language
OCaml.
The
style
of
this
library
is
purely
functional
andthe
there
even
a formal
as an extension
ofthat
the
λ-calculus.
BSP
model,
but for
functional
programming
language
OCaml.
The
style
of this
librarythe
is
Bulk
Synchronous
Parallel
MLexists
or
BSML
[4] issemantics
also
a programming
library
supports
purely
functional
and
there
even
exists
a
formal
semantics
as
an
extension
of
the
λ-calculus.
was
often
that
BSML
is universal
BSP programming,
any BSP
purely
functional
andthe
there
even
exists
a formal for
semantics
as an extension
of the
λ-calculus.
BSPIt model,
butclaimed
for
functional
programming
language
OCaml.
Themeaning
style
of that
this
library
is
It was often
claimed
that BSML
is BSML.
universal
for BSPmost
programming,
meaning
thatalgorithms
any BSP
algorithm
can be
implemented
using
However
published
BSP
It was
often
claimed
thateven
BSML
is universal
for
BSP programming,
meaning
that
any BSP
purely
functional
and
there
exists
a formal
semantics
asofanthe
extension
of the
λ-calculus.
algorithm can be implemented using BSML. However most of the published BSP algorithms
algorithm
can be
implemented
usingis BSML.
However
of the published
BSP
It was often
claimed
that BSML
universal
for BSPmost
programming,
meaning
thatalgorithms
any BSP
1
algorithm can be implemented using BSML. However most of the published BSP algorithms
1
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
1
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.267

	

Imperative BSPlib-style Communications
in BSML
Frédéric Loulergue
et al. / Procedia Computer Science 108C (2017) 2368–2372

Loulergue

void shift ( int ∗ value)

let shift (value: int ref) =
begin
bsp push reg(value, sizeof(int));
bsp push reg value (ref int);
bsp sync();
bsp sync();
int dst = (bsp pid()+1)%bsp nprocs();
let dst = (bsp pid()+1) mod bsp nprocs()
bsp put(dst,value,value,0,sizeof(int ));
in bsp put dst !value value int;
bsp pop reg(value);
bsp pop reg value (ref int);
bsp sync();
bsp sync();
}
end

{

(a) BSPlib for C

(b) BSPlib for BSML

Figure 1: BSP Program Example
are written in an imperative style and with imperative data structures. Even if OCaml supports the imperative, functional and object-oriented programming styles, communications and
synchronizations styles are very different between BSPlib and BSML. It is thus interesting to
explore that claim and check whether imperative BSP algorithms could be implemented using
BSPlib-style programming in BSML. The contribution of this paper demonstrates that indeed
any imperative BSP algorithm can be implemented with BSML using only the BSML pure
functional primitives and some imperative features of its host language OCaml.
The paper is organized as follows. In Section 1, we present BSP programming using BSPlib
and using BSML and we emphasize the differences between these two styles of programming.
Section 2 is devoted to a BSPlib-like programming API for BSML, from the point of view of
the user of the API. A example is implemented with this API and compared with its BSPlib
counterpart. We conclude and give future research directions in Section 3.

1

Bulk Synchronous Parallel Programming

Programming with BSPlib. BSPlib is a standard proposal for C libraries supporting the
BSP model. There are several implementations of BSPlib, some of which provide extensions to
the standard. We focus here on the standard, and more precisely to the Direct Remote Memory
Access (DRMA) communication primitives. We omit here the initialization and finalization
phases of a BSPlib program. A BSPlib program follows the Single Program Multiple Data
(SPMD) paradigm.
To access the processor identifier and the total number of processors, BSPlib provides respectively the following two functions: int bsp pid() and int bsp nprocs().
Before being able to read/write from the memory of another processor, processors should
indicate that some memory locations will be able to be accessed by distant processors:
void bsp push reg(const void ∗ident, int size);
void bsp pop reg (const void ∗ident);

When a processor calls one of these two functions, all the processors should perform a call to
the same function. The registration and un-registration are active only after the super-step
where the call is done. It is invalid to try to un-register an unregistered address.
There are two main functions to read from/write to remote memory, we omit bsp get:
void bsp put(int pid, const void ∗src, void ∗dst, int offset , int nbytes);

2

2369

2370	

Imperative BSPlib-style Communications
in BSML
Frédéric Loulergue
et al. / Procedia Computer Science 108C (2017) 2368–2372

Loulergue

bsp put(pid, src, dst, offset , nbytes) requests the writing of nbytes bytes of data from memory
address src, of the process executing the function, to memory address dst (plus offset bytes
displacement from dst) of processor pid. The destination address should be registered.
The current super-step ends when all the processors call void bsp sync(). The data is guaranteed to have been exchanged at the end of the super-step, i.e. after calling bsp sync.

Figure 1(a) presents an example of function written using BSPlib. This is a collective
communication function: all the processors are supposed to call the same function with coherent
parameters. It shifts “to the right” the content of an int variable on each processor.
Programming with BSML. The remaining of the paper assumes some familiarity with a
statically typed functional programming language. A concise introduction to OCaml is [5].
Bulk Synchronous Parallel ML or BSML is an explicit parallel functional language. Currently there exists an implementation as a library for the OCaml language, implemented on top
of MPI. In essence the BSML programming style is purely functional. It is nevertheless possible
to use the imperative features of OCaml in combination to BSML. However in this case, some
care is required: some unsafe programs could be written.
BSML offers four constants to access the parameters of the underlying BSP architecture:
bsp p returns the number of processors in the parallel machine. The other parameters are
omitted in this paper as they are related to the BSP cost model.
BSML parallelism is based on a parallel data structure named parallel vector. In a parallel
vector, each processor contains one value of the vector. Using this data structure, BSML offers
a global view of parallel programs, i.e. a program looks like a sequential program but operates
on parallel data structures. All code outside parallel vectors is replicated among the processors
and assured (if the program is purely functional) to be consistent everywhere. This view of
replication is however the view of the BSML implementer: for the developer of BSML programs,
code outside parallel vectors is just usual sequential code.
Parallel vectors have a polymorphic type: ’a par, meaning a parallel vector where each
processor contains a value of type ’a. OCaml is a higher-order functional language: ’a could
be replaced by any type, including a type of function. There is one restriction: Nesting is
forbidden. It is important to note that there is no index notation for parallel vectors. In other
words, there is no direct access to individual values in parallel vectors. Vectors are only handled
globally through four BSML primitive functions.
The function mkpar: (int→ ’a) → ’a par builds a parallel vector from a function f. At processor
i the vector will have value (f i). For example with 8 processors1 :
# let r = mkpar (fun i->2*i);;
val r : int par = <0, 2, 4, 6, 8, 10, 12, 14>

where # is the prompt of the interactive loop, and the answer has the form name : type =
value and, in the interactive loop, parallel vectors are written  a0 , . . . , ap−1 . %% is a modulo
operator that always returns a non-negative number.
OCaml is a higher-order language, functions are first class citizens. One can therefore build
a parallel vector of functions. However a parallel vector of functions is not a function: It cannot
be applied to another parallel vector. A BSML primitive is needed to apply point-wisely a
parallel vector of functions to a parallel vector of values. For example:
# let vf = mkpar (fun i -> fun x -> x + i) in apply vf r;;
- : int Bsml.par = <0, 3, 6, 9, 12, 15, 18, 21>
1 We

show here the evaluation of BSML expressions inside the BSML interactive loop.

3

	

Imperative BSPlib-style Communications
in BSML
Frédéric Loulergue
et al. / Procedia Computer Science 108C (2017) 2368–2372

Loulergue

In this example, vf is a parallel vector where each processor i contains the function fun x → x + i.
mkpar and apply only operate in the computation phase of a BSP super-step. Communications and implicit global synchronizations are performed using proj (omitted) and put. put
allows any local value to be transferred to any other processor. It ends the current super-step
by a synchronization barrier. Its signature is (int→ ’a)par→ (int→ ’a)par.
Canonical use of put is put (mkpar (fun src dst → e)) where expression e computes (or usually,
selects) the data that should be sent (depending on the processor identifier src) to processor
dst. The result of the evaluation of a call to put is another vector of functions. At a processor j
the function, when applied to i, yields the value received from processor i by processor j. For
example, shifting the values of a parallel vector to the right could be written:
let shift vv =
let msg src v dst = if dst=(src+1) mod bsp_p then [v] else [] in
let msgs = apply (mkpar msg) vv in let srcs = mkpar (fun i->(i-1)%%bsp_p) in
parfun List.hd (apply (put msgs) srcs)

where: let parfun f v = apply (mkpar(fun i→ f)) v. In this example, the empty list [] is used as a way
to mean “no message”. The empty list is not sent to other processors. Even if put looks like a
total exchange, it is not due to these special values.

2

An API for Imperative BSP Programming in BSML

In this section we present how to program with the proposed BSPlib API for OCaml implemented on top of BSML. The example of BSPlib for C presented in Figure 1(a) is translated
to this new API for OCaml in Figure 1(b). The imperative BSP programming styles for both
C and OCaml are very close. With BSML it is therefore possible to use both styles: the
BSPlib-like imperative style and the original BSML pure functional style.
One main difference between OCaml and C is that OCaml is strongly typed. Therefore it
is not possible to directly translate in OCaml the BSPlib for C primitives where all data is
considered as arrays of bytes. Moreover, by default all variables are immutable in OCaml, but
references or arrays (and some others omitted here).
Furthermore programming in BSML does not follow the SPMD paradigm but the global
view paradigm. However the proposed API does follow the SPMD paradigm. Finally, the
implementation of a BSPlib-like API in OCaml requires to store references in a table. This is
not easy as a reference to an int has a different type than a reference to a float and that data
structures in OCaml are usually parametric polymorphic, meaning a structure should contain
values of the same type.
The solution to this problem is to use generalized abstract data types (GADT) [1] to have
values representing types so that a value v and a value vτ representing the type τ of the value
v can be packed together into a value vpacked whose type does not depend on the type τ .
The impact on the API is that instead of having the size of an address we want to register,
we have an expression that represents the type of the value we want to register (or un-register):
bsp push reg: ’a → ’a Type.ty → unit
bsp pop reg: ’a → ’a Type.ty → unit

These two functions are polymorphic, but if they are called on values that are not mutable, an
error occurs (unit is the type of the value () returned by functions that only produce side effects).
For example, let x = ref 0 in bsp push reg x int will register the reference x (to an int) for DRMA
communications. ref in OCaml is applied to a value v and creates a reference to a value of
4

2371

2372	

Imperative BSPlib-style Communications
in BSML
Frédéric Loulergue
et al. / Procedia Computer Science 108C (2017) 2368–2372

Loulergue

the type of v, with initial value v. In the example, the content referenced by x is therefore
mutable. It is mandatory to specify the type also for bsp pop reg while the C version only needs
the address of the memory location to un-register.
As in BSPlib for C, a call to bsp sync() ends the super-step by a synchronization barrier. A
call to bsp pid() returns the processor identifier, and a call to bsp nprocs() return the number of
processors of the BSP machine.
The type of function bsp put is: int → ’a → ’a ref → ’a Type.ty → unit. bsp put pid v r ty writes the
value v to (registered) reference r of processor pid. The type of value v should be represented
by ty. With bsp put, values can only be written as a whole, even if they are arrays. This
is therefore less flexible than the corresponding BSPlib for C function where arrays can be
considered partly using the offset and nbytes arguments. To provide such a flexibility, and due
to typing constraints, we propose two variants of bsp put. bsp put sa is used to put a scalar value
into a remote array: bsp put sa pid v a k ty writes value v whose type is represented by value ty
at index k of the remote array a at processor pid. The type of a should be represented by the
value array ty. bsp put aa is used to deal with arrays both at the source and at the destination.
bsp put aa pid a1 a2 offset size ty writes size values of array a1 whose elements’ type is represented
by value ty at offset offset of the remote array a2 at processor pid.

3

Conclusion

In this paper we show that it is possible to implement a BSPlib-like imperative API using
only Bulk Synchronous Parallel ML purely functional primitives together with the sequential
imperative features of its host language OCaml. Bulk Synchronous Parallel ML is therefore
universal for BSP programming.
The API and its implementation presented here are only proof-of-concepts (available at
http://traclifo.univ-orleans.fr/BSML). For full usability, they should support also BSPlib
message passing primitives. The type representation module used in this API should also be
extended in two ways: firstly it should support all the OCaml basic types, secondly it should be
extensible in particular able to handle user-defined record types and sum types. We preferred
conciseness and simplicity to performance in the current implementation. There is room for
improvement even if preliminary experiments show reasonable performances.

References
[1] Jacques Garrigue and Didier Rémy. Ambivalent types for principal type inference with GADTs. In
Programming Languages and Systems, volume 8301 of LNCS, pages 257–272. Springer, 2013.
[2] Mark Goudreau, Kevin Lang, Satish Rao, Torsten Suel, and Thanasis Tsantilas. Towards Efficiency
and Portability: Programming with the BSP Model. In Eighth Annual ACM Symposium on Parallel
Algorithms and Architectures (SPAA), pages 1–12, New York, NY, USA, 1996. ACM.
[3] Jonathan M. D. Hill, Bill McColl, Dan C. Stefanescu, Mark W. Goudreau, Kevin Lang, Satish B.
Rao, Torsten Suel, Thanasis Tsantilas, and Rob Bisseling. BSPlib: The BSP Programming Library.
Parallel Computing, 24:1947–1980, 1998.
[4] Frédéric Loulergue, Frédéric Gava, and David Billiet. Bulk Synchronous Parallel ML: Modular Implementation and Performance Prediction. In International Conference on Computational Science
(ICCS), volume 3515 of LNCS, pages 1046–1054. Springer, 2005.
[5] Yaron Minsky. OCaml for the masses. Commun. ACM, 54(11):53–58, 2011.
[6] Leslie G. Valiant. A bridging model for parallel computation. Commun. ACM, 33(8):103, 1990.

5

