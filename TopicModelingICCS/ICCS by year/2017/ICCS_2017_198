Available online at www.sciencedirect.com

ScienceDirect
This
This
This

space
isComputer
reservedScience
for the
header, do not use it
Procedia
108CProcedia
(2017) 808–817
space is reserved for the Procedia header, do not use it
space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Optimally refined isogeometric analysis
Optimally1 refined isogeometric
analysis
1
Daniel
Garcia
,
Michael
Bartoň
,
and
David
Pardo2,1,3
Optimally1 refined isogeometric
analysis
1
2,1,3
Daniel 1Garcia , Michael Bartoň , and David Pardo
BCAM–
Mathematics,
1 Basque Center for Applied
1
2,1,3
Daniel
Garcia
, Michael
Bartoň
, and
David
Pardo
1
Alameda
de Mazarredo
14, 48009
Bilbao,
Basque
Country,
Spain

2
2
2

BCAM– Basque Center for Applied Mathematics,
mbarton@bcamath.org
1 dgarcia@bcamath.org,
Alameda
de Mazarredo
48009for
Bilbao,
Basque
Country, Spain
BCAM–
Basque14,
Center
Applied
Mathematics,
Department of
Applied
Mathematics,
Statistics, and Operational Research
Alameda dgarcia@bcamath.org,
de Mazarredo 14, 48009 mbarton@bcamath.org
Bilbao, Basque Country, Spain
University
of the Mathematics,
Basque Country
UPV/EHU,
Leioa, SpainResearch
Department
of
Applied
Statistics,
and Operational
dgarcia@bcamath.org,
mbarton@bcamath.org
3
Ikerbasqueof(Basque
Foundation
for
Sciences), Leioa,
Bilbao,Spain
Spain
University
the
Basque
Country
UPV/EHU,
Department
of Applied Mathematics, Statistics, and Operational
Research
3
dzubiaur@gmail.com
Ikerbasqueof(Basque
Foundation
Sciences), Leioa,
Bilbao,Spain
Spain
University
the Basque
Countryfor
UPV/EHU,
3
dzubiaur@gmail.com
Ikerbasque (Basque
Foundation for Sciences), Bilbao, Spain
dzubiaur@gmail.com

Abstract
Performance
Abstract of direct solvers strongly depends upon the employed discretization method. In
particular,
is direct
possible
to improve
thedepends
performance
of solving
Isogeometric
Analysis
(IGA)
Performance
solvers
strongly
upon the
employed
discretization
method.
In
Abstract it of
0
discretizations
by
introducing
multiple
C
-continuity
hyperplanes
that
act
as
separators
during
particular,
it
is
possible
to
improve
the
performance
of
solving
Isogeometric
Analysis
(IGA)
Performance of direct solvers strongly depends upon the employed discretization method. In
0
LU
factorization
[8].
In here,
we
further
explore
this venue
introducing
separators
of arbitrary
discretizations
introducing
multiple
C
-continuity
hyperplanes
that act
as separators
during
particular,
it isbypossible
to improve
the
performance
of by
solving
Isogeometric
Analysis
(IGA)
continuity.
Moreover,
we
develop
an
efficient
method
to
obtain
optimal
discretizations
in the
0
LU
factorization
[8].
In
here,
we
further
explore
this
venue
by
introducing
separators
of
arbitrary
discretizations by introducing multiple C -continuity hyperplanes that act as separators during
sense
that
they
minimize
the
time
employed
by
the
direct
solver
of
linear
equations.
The
search
continuity.
Moreover,
we
develop
an
efficient
method
to
obtain
optimal
discretizations
in the
LU factorization [8]. In here, we further explore this venue by introducing separators of arbitrary
space
consists
of
all
possible
discretizations
obtained
by
enriching
a
given
IGA
mesh.
Thus,
sense
that
they
minimize
the
time
employed
by
the
direct
solver
of
linear
equations.
The
search
continuity. Moreover, we develop an efficient method to obtain optimal discretizations in
the
the
best
approximation
error
is
always
reduced
with
respect
to
its
IGA
counterpart,
while
the
space
consists
of
all
possible
discretizations
obtained
by
enriching
a
given
IGA
mesh.
Thus,
sense that they minimize the time employed by the direct solver of linear equations. The search
solution
time
is
decreased
by
up
to
a
factor
of
60.
the
best
approximation
error
is
always
reduced
with
respect
to
its
IGA
counterpart,
while
the
space consists of all possible discretizations obtained by enriching a given IGA mesh. Thus,
solution
time
is
decreased
by
up
to
a
factor
of
60.
the
best
error
is always
respectdissection,
to its IGA
counterpart,
while the
Keywords:
solver-based
discretization,
continuity-aware
direct
solvers, multi-frontal
©
2017
Theapproximation
Authors.
Published
by Elsevier
B.V.reduced withoptimal
Peer-review
under
responsibility
of
the
scientific
committee
of
the
International
Conference
on
Computational
Science
solution
time
is
decreased
by
up
to
a
factor
of
60.
solvers,
refined
IsoGeometric
Analysis
(rIGA)
Keywords: solver-based discretization, continuity-aware optimal dissection, direct solvers, multi-frontal
solvers, refined
IsoGeometric
Analysis (rIGA)
Keywords:
solver-based
discretization,
continuity-aware optimal dissection, direct solvers, multi-frontal
solvers, refined IsoGeometric Analysis (rIGA)

1 Introduction
1 Introduction
When modeling physical
1
Introduction
[9, 5, 3, 11, 7]. Consider,

and/or engineering processes, computational issues are crucial
example,
simulations
of turbulent
flows around
wind
When modeling physical for
and/or
engineering
processes,
computational
issues
areturbines
crucial
[13]
or
simulations
of
tectonic
activities
on
a
large
scale
of
tens
of
kilometres
with
required
[9,
5,
3,
11,
7].
Consider,
for
example,
simulations
of
turbulent
flows
around
wind
turbines
When modeling physical and/or engineering processes, computational issues are crucial
accuracy
within
centimetres.
To simulate
these
processes
with sufficient
accu[13]
of tectonic
activities
on a large
scale
of tens
of kilometres
with required
[9, 5,or3,simulations
11,
7]. several
Consider,
for example,
simulations
of complex
turbulent
flows
around
wind
turbines
racy,
typically
by
using
Finite
Elements
(FE)
or
IsoGeometric
Analysis
(IGA),
requires
a
large
accuracy
within
several
centimetres.
To
simulate
these
complex
processes
with
sufficient
accu[13] or simulations of tectonic activities on a large scale of tens of kilometres with required
number
of
unknowns.
racy,
typically
by
using
Finite
Elements
(FE)
or
IsoGeometric
Analysis
(IGA),
requires
a
large
accuracy within several centimetres. To simulate these complex processes with sufficient accuDirect
solvers
are
a
popular
option
to
solve
linear
systems
arising
from
FE
or
IGA
disnumber
of
unknowns.
racy, typically by using Finite Elements (FE) or IsoGeometric Analysis (IGA), requires a large
cretizations.
While
FE
systems
employ
a
large
number
of
unknowns
compared
to
IGA,
the
Direct
solvers
are
a
popular
option
to
solve
linear
systems
arising
from
FE
or
IGA
disnumber of unknowns.
latter
method
exhibits
a
suboptimal
behavior
in
terms
of
computational
time
per
solved
uncretizations.
While
FE
systems
employ
a
large
number
of
unknowns
compared
to
IGA,
the
Direct solvers are a popular option to solve linear systems arising from FE or IGA disknown
(see
[4]).
latter
method
exhibits
a
suboptimal
behavior
in
terms
of
computational
time
per
solved
uncretizations. While FE systems employ a large number of unknowns compared to IGA, the
known
(see [4]).exhibits a suboptimal behavior in terms of computational time per solved unlatter method
1
known (see [4]).
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
1
10.1016/j.procs.2017.05.283

	

Optimally refined isogeometric Daniel
analysis
Bartoň and Pardo
Garcia et al. / Procedia Computer Science 108C (2017)Garcia,
808–817

It was recently shown in [8] that an IGA discretization enriched with properly designed C 0
continuity hyperplanes (that act as separators in terms of the direct solver) offers a superior
alternative than both FEM and IGA in terms of computational time required by the direct
solver for a given fixed mesh topology. This strategy was denoted as refined Isogeometric
Analysis (rIGA).
While rIGA is based on the enrichment of a highly continuous C p−1 discretization (with p
being the polynomial degree) via C 0 hyperplanes, in here we further expand this search to the
more general case of C q hyperplanes (with 0 ≤ q ≤ p−1). We denote the resulting discretization
as Optimally refined Isogeometric Analysis (OrIGA).
The rest of the paper is organized as follows. Section 2 formulates the problem to be solved.
Section 3 introduces the concept of rIGA in 2D with the focus on separators of arbitrary
continuities. Section 4 discusses connections between rIGA and OrIGA and proposes a fast
algorithm to compute OrIGA discretizations. The numerical results are shown in Section 5.
Finally, the paper is concluded in Section 6.

2

Model Problem and Notation

In this work, for simplicity we assume a discretization of a square 2D mesh M consisting of
m2 = 2s × 2s elements, s being the number of subdivision levels. We define a bivariate tensor
product spline space over M and denote by px and py the degrees of the univariate splines in
x and y directions, respectively. C q hyperplanes preserve the tensor product structure (that is,
we do not consider, e.g., T -junctions).
We aim to minimize an estimate of the LU factorization cost. We assume the mesh is
repeatedly bisected using separators across the y and then the x direction, see Fig. 1. While
conceptually it would be possible to seek also for the optimal positions of the separators, in
this work we focus only on finding the optimal continuities. These separators dictate the order
of LU factorization (by following an LU elimination ordering inverse to that of the introduced
separators).

k2y
dimx1
k1y

1 + k1y

k2y

k2x

k1x

k2x

Figure 1: Left: two subdivision levels of a 2D mesh. We seek those continuities (k1x , k2x , k1y , k2y )
of the separators that minimize the total cost of LU factorization. Right: the number of basis
functions of one horizontal separator in the first subdivision level (green) is dimx1 (1 + k1y ).
Decreasing the continuity k1y of the green separator increases the dimension of the orthogonal
spline space (red) by py − (1 + k1y ).
For simplicity, we assume that the continuities of all separators at the same subdivision level
2

809

810	

Optimally refined isogeometric Daniel
analysis
Garcia et al. / Procedia Computer Science 108C (2017)Garcia,
808–817Bartoň and Pardo

are equal. That is, let {k1x , . . . , ksx } and {k1y , . . . , ksy } be the unknown continuities up to the s-th
subdivision level in x and y directions, respectively. We write
k = (kx , ky ) = (k1x , . . . , ksx , k1y , . . . , ksy ),

(1)

see Fig. 1. In contrast to [8], in here we consider separators of any possible continuity.

3

Minimization Problem

OrIGA discretization is defined as the one that minimizes the number of floating point operations (FLOPs) used by the LU factorization for a fixed mesh topology and order of approximation p. More precisely, it is given as the solution argument of the following minimization
problem
arg min F (k),
(2)
k∈S

where F (k) is the cost functional, and S is the search space. In subsection 3.1 we define F (k),
while subsection 3.2 is devoted to describe S.

3.1

Minimization functional

Following [8, 4], we realize that the cost of the LU factorization is dominated by the cost of
eliminating the top dense matrices at each level. Thus, neglecting the remaining contributions,
the cost of the factorization grows in a cubic fashion with the number of degrees of freedom
(multivariate spline basis functions) of each separator. Approximating the number of FLOPs
of all the factorizations during the mesh dissection, the minimization functional reads as
F (k) =

s


#cutsyi (dimyi (1 + kix ))3 + #cutsxi (dimxi (1 + kiy ))3

(3)

i=1

where #cutsyi is the number of cuts in the y-direction inserted in the i-th subdivision level, we
sum over all the separators in both directions, and the summands are cubes of dimensions of
the tensor product spline spaces associated to the separators. That is, dimxi and dimyi are the
dimensions of the univariate spline spaces in the direction of the separator.
Note that for s subdivision levels, we have 2s −1 separators in every direction. This generates
2s
2 sub-meshes, and the number of boundary spline spaces that separate them grows also
exponentially. Assuming the first separator is vertical (associated with an unknown continuity
k1x ), the number of boundary cuts in the i-th subdivision level is
#cutsyi

=

4i−1 ,

#cutsxi

=

2 · 4i−1 .

(4)

The dimensions of univariate spline spaces associated to the cuts in the i-th level are
dimyi

=

dimxi

=

m
+ py
2i−1
m
+ px
i
2
  
(i)

+
+

s−i+1


j=1
s−i

j=1



y
2j−1 (py − (ki+j−1
+ 1)),
x
2j−1 (px − (ki+j
+ 1)),


(ii)

(5)


3

	

Optimally refined isogeometric Daniel
analysis
Garcia,
Bartoň and Pardo
Garcia et al. / Procedia Computer Science 108C (2017)
808–817

where the first term (i) corresponds to the dimension of the spline space if there were no
separators, and (ii) is the number of degrees of freedom that were added to the space by all the
complementary (orthogonal) separators that intersect the space under consideration, see Fig.1
b).
For example for s = 2, i = 1, the dimension of the spline space associated to the first vertical
cut (red in Fig. 1) becomes
dimy1 = m + 4py − k1x − 2k2x − 3,
since all horizontal separators intersect it.
For general s, by substituting (4) and (5) into (3), we obtain

3
s−i+1
s

 i−1
y
 m + py 2s−i+1 −
F (k) =
4
2j−1 (ki+j−1
+ 1) (1 + kix )3
i−1
2
i=1
j=1

3
s−i

m
x
+ 2 · 4i−1  i + px 2s−i −
2j−1 (ki+j
+ 1) (1 + kiy )3 .
2
j=1

(6)

(7)

We see that F contains (sixtic) terms of the form (kix · kjy )3 with both positive and negative
factors. Therefore, the minimizer of F is non-trivial and cannot be in general computed analytically. The objective function (7) is a generalization of (1) in [8], where now the continuities
of the separators may be different from zero.
The cost functional F is completed by adding the cost that comes from static condensation
[12], namely:
m
3
 m
+ px − 1
+ py − 1
,
(8)
FSC = 22s
s
s
2
2
and it does not depend on k. The complete functional cost is expressed as
FT (k) = FSC + F (k)

3.2

(9)

Search space and its reduction

Our search space S is defined as a discrete set of possible continuities of separators in all
subdivision levels, that is,
S = {k, kiz = 0, . . . , pz − 1, z = x, y, i = 1, . . . , s}.

(10)

This space is a generalization of the space of admissible continuities in rIGA, see Fig. 2.
We seek a minimizer that lies in N2s . Thus, our search space is finite. Unfortunately, the
number of combinations grows exponentially with the number of subdivision levels s. Namely,
we have
#combinations = (px py )s .
(11)
Therefore an exhaustive search is not possible even for a moderate value of s. It is necessary
to restrict the search space. First, we notice that k1x = 0 since it appears in (7) only once and
with positive sign. Additionally, the sequence of optimal continuities in both directions has to
be non-decreasing, which is formalized in the following lemma.
Lemma 1. The vector of continuities k of Eq. (1) that minimizes Eq. (7) satisfies
z
kiz ≤ ki+1

4

for all

z = x, y

and

i = 1, . . . , s − 1.

(12)

811

812	

Optimally refined isogeometric Daniel
analysis
Garcia,
Bartoň and Pardo
Garcia et al. / Procedia Computer Science 108C (2017)
808–817

 rIGA

kx = (0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6)

OrIGA

kx = (0, 0, 0, 0, 1, 1, 2, 4, 5, 6, 6)

separator
continuity

subdivision level

k6x



(a)

(b)

Figure 2: Continuity histograms of the separators for (a) rIGA and (b) OrIGA for s = 11
subdivision levels for a septic (p = 7) spline space. While rIGA considers separators of only
minimum (0) and maximum (p − 1) continuities, OrIGA explores all admissible continuities
{0, 1, . . . , p − 1} in every subdivision level.
x
for some i. We show that there exists k̃ such that
Proof. By contradiction. Let e.g. kix > ki+1
F (k) > F (k̃). Define
x
x
x
k̃ = (k1x , . . . , ki−1
, kix , ki+2
, . . . , ksx , k1y , . . . , ksy )
, ki+1

(13)

x
. The
There are two kinds of summands in (7) that are affected by the switch of kix and ki+1
first type of summand is of the form
x
),
c1 (c2 − c3 kix − 2c3 ki+1

c1 , c2 , c3 ∈ N.

(14)

Note that these numbers depend on i, s, px and py . However, all these summands decrease
x
, that is,
when flipping kix with ki+1
x
x
+ 2kix
< ki+1
kix + 2ki+1

(15)

x
.
which is equivalent to kix > ki+1
x
The other types of summands are the two containing terms (kix + 1)3 and (ki+1
+ 1)3 ,
respectively. The sum of these two summands reads as
x
+ 1)3 L3
4i−1 (kix + 1)3 (2L − c1 )3 + 4i (ki+1

c1 , L ∈ N.

(16)

x
x
under the assumption that kix > ki+1
.
which again decreases with the change of kix and ki+1
Therefore F (k) > F (k̃) which contradicts that k is the minimizer.

Lemma 1 introduces a significant reduction of the continuity search space. Observe that
while there are ps possible continuity vectors in one variable, the number of non-decreasing
continuity vectors
 equal to the number of non-decreasing paths in a rectangular p × s grid,
 is
which is only p+s
s , see Fig. 3. For example, for p = 5 and s = 10, the cardinality of the
reduced 1D space is only 3 003 while in the case of the whole search space is 9 765 625. For the
2D case, the reduced space size is 3 0032 .

4

Optimally refined Isogeometric Analysis (OrIGA)

Our search for the continuity-aware optimal IGA starts with the rIGA solution. We employ
an heuristic approach that uses the following observation from our numerical experiments:
5

	

Daniel Garcia et al. / Procedia Computer Science 108C (2017) 808–817
Optimally refined isogeometric analysis
Garcia, Bartoň and Pardo
kx that cannot minimize (7)

admissible kx

s
(a)

(b)

Figure 3: Search space reduction. (a) While the space of all possible continuity vectors grows
exponentially in the number of subdivision levels s, see (11), Lemma 1 reduces the search space
to only non-decreasing continuity vectors (b).
rIGA and OrIGA solutions are strongly related. Thus, we use rIGA discretization (represented
by the continuity vector krIGA ) to initialize OrIGA and explore exhaustively only a certain
neighborhood of krIGA . Let i be the number of subdivision levels where rIGA is enriched
by C 0 -continuous separators (the “jump” of the rIGA continuity vector). We define the rneighborhood of krIGA as the number of subdivision levels that occurred r subdivisions prior i,
(and r subdivisions after i + 1), see Fig. 4. In the r-neighborhood, we consider all continuities
that satisfy Lemma 1. Among them, we quickly the find minimizer of (7). If not stated
differently, we set r = 2 in all our experiments.
Remark 1. The computation of the rIGA discretization (continuity vector) comes at a negligible cost. Observe that rIGA considers only C 0 and C p−1 -continuous separators that are
identical in x and y directions, and therefore the computation requires only s evaluations of
(7). We denote by krIGA the rIGA solution.


p−1

0

rIGA
ki+1



r



rIGA
ki+r

rIGA
ki−r+1





r



kirIGA

Figure 4: The r-neighborhood of the rIGA solution (red) is shown for r = 3. The 2r affected
continuities of the separators at levels i − r + 1, . . . , i + r are being optimized to minimize (7).
The optimal solution must be non-decreasing according to Lemma 1.
Example 1. An example of rIGA and OrIGA solutions for a septic spline space p = 7 over
a mesh consisting of M = 10242 elements is shown in Fig. 5. We searched exhaustively the

2
space S of all feasible continuity vectors, which requires 7+10
= 194482 evaluations of (7).
10
While the exhaustive search of S required 507s on a laptop equipped with a 2.20GHz processor,
the computation of rIGA discretization took few milliseconds (2.6−4 s) and the search of its
2-neighborhood only 0.75 seconds.
Observe that the OrIGA solution (continuity vector) differs from rIGA only by a few coordinates. This phenomenon applies to various degrees and mesh sizes (see Table 1), where all
6

813

814	

Daniel Garcia et al. / Procedia Computer Science 108C (2017) 808–817
Optimally refined isogeometric analysis
Garcia, Bartoň and Pardo
kx = (0, 0, 0, 0, 0, 0, 0, 6, 6, 6)

ky = (0, 0, 0, 0, 0, 1, 2, 6, 6, 6)

k6y
(a)

(b)

Figure 5: OrIGA: a result of the global exhaustive search in the space separator continuities
for a septic spline space (p = 7) over a 2D mesh consisting of 10242 elements (s = 10). The
global minimizer k = (kx , ky ) of (7) is shown. (a) The continuity vector in the x-direction, kx ,
is identical to the rIGA solution, while (b) ky differs from rIGA by only two coordinates.
{ OrIGA }

Algorithm 1
1:

OBJECTIVE: find k = (kx , ky ) that minimizes (7), i.e., arg min F (k),

2:

INPUT: number of elements in x and y directions m = 2s ;
polynomial degrees px and py ;
search neighborhood r;

3:
4:
5:

Initialize k by rIGA solution krIGA ;
Fmin := F (krIGA
 ); 
) do
for i = 1 to ( p+2r

p
) do
for j = 1 to ( p+2r
p
build non-decreasing kxi and kyj ;
if Fmin > F (kxi , kyj ) then
k := (kxi , kyj );
Fmin := F (kxi , kyj );
end if
end for
end for
OUTPUT: OrIGA continuity vector k.

6:
7:
8:
9:
10:
11:
12:
13:
14:

k∈S

OrIGA and rIGA continuity vectors differ at most at two coordinates. Moreover, this difference
appears in the neighborhood of the continuity “jump” of the rIGA continuity vector. Therefore,
we use the solution obtained by rIGA to initialize the refined exhaustive search.
Our search for the optimal continuity-aware discretization is summarized in Algorithm 1.
Regarding the approximation quality, highly continuous IGA discrete spaces are strictly contained in both the rIGA and OrIGA spaces, so the best approximation error of OrIGA is smaller
or equal than that of IGA.

5

Numerical Results

We use Laplace equation as a model problem, see Fig. 6, in our examples. We consider three
mesh sizes (Ne = 5122 , 10242 and 20482 ) and three polynomial degrees (p = 5, 7, and 9).
The implementation of our method is based on library PetIGA, a high-performance software
7

	

Garcia et al. / Procedia Computer Science 108C (2017)Garcia,
808–817
Optimally refined isogeometric Daniel
analysis
Bartoň and Pardo

u=1

∂Ω1

∂Ω0
u=0


Find u such that:





∇ · (∇u) = 0


u=1



u
=0




∇u · n = 0

in Ω
on ∂Ω1

(17)

on ∂Ω0
on ∂Ωw .

Figure 6:
Left: Illustration of the 2D model problem. Right: Laplace formulation over
parametric domain Ω = [0, 1]2 , and ∂Ωw ∪∂Ω0 ∪∂Ω1 = ∂Ω, ∂Ωw ∩∂Ω0 = ∅ and ∂Ωw ∩∂Ω1 = ∅.
platform for IGA [6]. We use the multifrontal solver MUMPS [1, 2], and METIS 5 [10] as
ordering technique.
The rIGA and OrGA continuity vectors are shown in Table 1. These vectors show that
the optimal size of highly continuous macro-elements is almost independent of the mesh size.
Namely, it is either 82 or 162 , and then, low-continuity separators should be considered. Table 2
shows FLOPs estimates of FE, IGA, rIGA, and OrIGA for various mesh sizes. We see that
both rIGA and OrIGA significantly outperform FE and IGA, OrIGA having expected superior
results.
Ne
5122
10242
20482

p
5
7
9
5
7
9
5
7
9

rIGA Continuity
[0.0.0.0.0.0.4.4.4.]
[0.0.0.0.0.0.6.6.6.]
[0.0.0.0.0.0.8.8.8.]
[0.0.0.0.0.0.0.4.4.4.]
[0.0.0.0.0.0.0.6.6.6.]
[0.0.0.0.0.0.8.8.8.8.]
[0.0.0.0.0.0.0.4.4.4.4.]
[0.0.0.0.0.0.0.0.6.6.6.]
[0.0.0.0.0.0.0.8.8.8.8.]

OrIGA Continuity
[0.0.0.0.0.0.4.4.4.]|x
[0.0.0.0.0.2.4.4.4.]|y
[0.0.0.0.0.0.6.6.6.]|x
[0.0.0.0.0.2.6.6.6.]|y
[0.0.0.0.0.0.8.8.8.]|x
[0.0.0.0.0.1.8.8.8.]|y
[0.0.0.0.0.0.0.4.4.4.]|x
[0.0.0.0.0.1.3.4.4.4.]|y
[0.0.0.0.0.0.0.6.6.6.]|x
[0.0.0.0.0.1.2.6.6.6.]|y
[0.0.0.0.0.0.0.8.8.8.]|x
[0.0.0.0.0.1.2.8.8.8.]|y
[0.0.0.0.0.0.0.1.4.4.4.]|x
[0.0.0.0.0.0.2.4.4.4.4.]|y
[0.0.0.0.0.0.0.1.6.6.6.]|x
[0.0.0.0.0.0.1.4.6.6.6.]|y
[0.0.0.0.0.0.0.0.8.8.8.]|x
[0.0.0.0.0.0.1.3.8.8.8.]|y

Table 1: Continuity vectors of rIGA and OrIGA in 2D for various degrees and mesh sizes.
OrIGA continuity vectors vary from their corresponding rIGA counterparts, at most, by two
values (coordinates) and this variance appears nearby the discontinuity jump of rIGA.
Table 3 shows the actual FLOP counts and computational times using MUMPS. All computational tests were solved sequentially on TACC Lonestar5 system with 2.3 GHz cores and
512TB of memory (URL: http://www.tacc.utexas.edu). Observe that in all cases, except for
p = 5, Ne = 20482 , OrIGA offers the best discretization.

6

Conclusion and Future Work

We introduce a new discretization method, called OrIGA, that leads to systems of linear equations that can be more efficiently solved via direct solvers. We extend the recently introduced
refined isogeometric analysis (rIGA) by considering separators of arbitrary continuities. Our
numerical results show that OrIGA, when compared to rIGA, reduces the total computational
cost needed by the direct solver by up to 25%, while the computation of the optimal discretization takes only a few seconds. When compared to IGA and FE, we obtain a time boost by
factor of up to 60. As a future research direction, we aim to further apply this methodology to
non-tensor product meshes.
8

815

816	

Garcia et al. / Procedia Computer Science 108C (2017)Garcia,
808–817Bartoň and Pardo
Optimally refined isogeometric Daniel
analysis

Ne = 5122
p=5

p=7

p=9

Ne = 10242

Ne = 20482

FEA

3.46E+11

2.73E+12

2.16E+13

IGA

3.75E+11

2.87E+12

2.23E+13

rIGA

1.33E+10

8.97E+10

6.27E+11

OrIGA

1.26E+10

7.88E+10

5.05E+11

FEA

1.00E+12

7.69E+12

6.02E+13

IGA

1.09E+12

8.13E+12

6.23E+13

rIGA

3.07E+10

1.81E+11

1.18E+12

OrIGA

2.99E+10

1.67E+11

9.98E+11

FEA

2.36E+12

1.73E+13

1.32E+14
1.33E+14

IGA

2.32E+12

1.74E+13

rIGA

7.03E+10

3.47E+11

1.68E+12

OrIGA

4.91E+10

2.69E+11

1.61E+12

Table 2: Estimates of the number of FLOPs required by LU factorization. Values obtained
with (7), when applied to the tested discretizations with various degrees and mesh sizes.

Ne = 5122

p=5

p=7

Ne = 20482

FLOPS

time

FLOPS

time

FEA

3.479E11

36.2

2.937E12

232.9

IGA

3.012E11

22.5

2.499E12

162.5

2.214E13

1310.9

rIGA

1.384E10

2.8

1.012E11

13.7

5.311E11

56.5

OrIGA

1.362E10

2.4

8.287E10

12.5

5.586E11

59.7

FEA

9.713E11

86.2

IGA

8.309E11

53.9

∗∗∗

6.945E12

∗∗∗

405.9

∗∗∗

5.812E13

∗∗∗

3204.3

rIGA

2.960E10

5.9

1.914E11

24.9

1.323E12

129.7

OrIGA

2.883E10

5.1

1.713E11

21.7

1.060E12

104.7

∗∗∗

∗∗∗

∗∗∗

∗∗∗

∗∗∗

FEA
p=9

Ne = 10242

FLOPS
∗∗∗

time
∗∗∗

∗∗∗

IGA

1.652E12

102.1

1.409E13

820.1

1.195E14

6657.8

rIGA

8.163E10

10.1

3.806E11

44.0

OrIGA

6.990E10

8.6

3.244E11

36.7

∗∗∗

∗∗∗

∗∗∗

∗∗∗

Table 3: The actual number of FLOPs and computational times required by MUMPS to factorize the 2D problem. The asterisks reflect that the computation was not accomplished due
to the lack of memory.

Acknowledgments David Pardo has received funding from the European Union’s Horizon
2020 research and innovation programme under the Marie Sklodowska-Curie grant agreement
No 644602, the Projects of the Spanish Ministry of Economy and Competitiveness with reference MTM2016-76329-R (AEI/FEDER, EU), and MTM2016-81697-ERC, the BCAM “Severo
Ochoa” accreditation of excellence SEV-2013-0323, and the Basque Government through the
BERC 2014-2017 program, and the Consolidated Research Group Grant IT649-13 on ”Mathematical Modeling, Simulation, and Industrial Applications (M2SI).
9

	

Garcia et al. / Procedia Computer Science 108C (2017)
808–817
Optimally refined isogeometric Daniel
analysis
Garcia,
Bartoň and Pardo

References
[1] P. R. Amestoy, I. S. Duff, J.-Y. LÉxcellent, and J. Koster. A Fully Asynchronous Multifrontal Solver Using Distributed Dynamic Scheduling. SIAM Journal on Matrix Analysis
and Applications, 23(1):15–41, 2001.
[2] P. R. Amestoy, A. Guermouche, J.-Y. LÉxcellent, and S. Pralet. Hybrid scheduling for the
parallel solution of linear systems. Parallel Computing, 32(2):136 – 156, 2006.
[3] F. Auricchio, L. Beiro da Veiga, A. Buffa, C. Lovadina, A. Reali, and G. Sangalli. A fully
locking-free isogeometric approach for plane linear elasticity problems: A stream function
formulation. Computer Methods in Applied Mechanics and Engineering, 197(1-4):160 –
172, 2007.
[4] N. Collier, D. Pardo, L. Dalcin, M. Paszynski, and V.M. Calo. The cost of continuity: A
study of the performance of isogeometric finite elements using direct solvers. Computer
Methods in Applied Mechanics and Engineering, 213-216(0):353 – 361, 2012.
[5] J. A. Cottrell, T. J. R. Hughes, and A. Reali. Studies of refinement and continuity in isogeometric structural analysis. Computer Methods in Applied Mechanics and Engineering,
196(4144):4160 – 4183, 2007.
[6] L. Dalcin, N. Collier, P. Vignal, A. Côrtes, and V.M. Calo. Petiga: A framework for
high-performance isogeometric analysis. Computer Methods in Applied Mechanics and
Engineering, 308:151–181, 2016.
[7] R. Dimitri, L. De Lorenzis, M.A. Scott, P. Wriggers, R.L. Taylor, and G. Zavarise. Isogeometric large deformation frictionless contact using t-splines. Computer methods in applied
mechanics and engineering, 269:394–414, 2014.
[8] D. Garcia, D. Pardo, L. Dalcin, M. Paszynski, N Collier, and V.M. Calo. The value of
continuity: Refined isogeometric analysis and fast direct solvers. Computer Methods in
Applied Mechanics and Engineering, 2016. In press.
[9] H. Gómez, V.M. Calo, Y. Bazilevs, and T.J.R. Hughes. Isogeometric analysis of the CahnHilliard phase-field model. Computer Methods in Applied Mechanics and Engineering,
197(4950):4333 – 4352, 2008.
[10] Karypis Laboratory. METIS, http://glaros.dtc.umn.edu/gkhome/metis/metis/overview,
2016.
[11] D. Schillinger, J.A. Evans, F. Frischmann, R. Hiemstra, M.-C. Hsu, and T.J.R. Hughes.
A collocated c0 finite element method: Reduced quadrature perspective, cost comparison
with standard finite elements, and explicit structural dynamics. International Journal for
Numerical Methods in Engineering, 102(3-4):576–631, 2015.
[12] E. L. Wilson. The static condensation algorithm. International Journal for Numerical
Methods in Engineering, 8(1):198 – 203, 1974.
[13] J. Yan, A. Korobenko, X. Deng, and Y. Bazilevs. Computational free-surface fluid–
structure interaction with application to floating offshore wind turbines. Computers &
Fluids, 141:155–174, 2016.

10

817

