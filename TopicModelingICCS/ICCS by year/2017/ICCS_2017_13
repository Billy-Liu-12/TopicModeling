Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
Computer Science 108C (2017) 1404–1413
This Procedia
space is
reserved for the Procedia header, do not use it
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

A Hybrid Heuristic in GPU-CPU Based on Scatter Search
A Hybridfor
Heuristic
in GPU-CPU
Based on
Scatter Search
the Generalized
Assignment
Problem
A Hybrid Heuristic
in GPU-CPU
Based on
Scatter Search
for the Generalized
Assignment
Problem
Danilo
Souza1 Haroldo G.
Santos1 Igor M.
Coelho2
for
theS.Generalized
Assignment
Problem
1
Danilo S. Souza
Haroldo
G. Santos1 Igor M. Coelho2
1
Federal
University of Ouro 1Preto
1
2
Danilo S. Souza
Haroldo
Santos
Ouro
Preto,G.
MG,
Brazil Igor M. Coelho
1

Federal University of Ouro Preto
danilo.gdc@gmail.com,haroldo@iceb.ufop.br
1
Ouro Preto, MG, Brazil
2 Federal University of Ouro Preto
State University of Rio de Janeiro
danilo.gdc@gmail.com,haroldo@iceb.ufop.br
Ouro Preto, MG, Brazil
RioUniversity
de Janeiro,ofRJ,
2
State
RioBrazil
de Janeiro
danilo.gdc@gmail.com,haroldo@iceb.ufop.br
igor.machado@gmail.com
2
Rio
de
Janeiro,
RJ,
Brazil
State University of Rio de Janeiro
igor.machado@gmail.com
Rio
de Janeiro, RJ, Brazil
igor.machado@gmail.com

Abstract
In the Generalized Assignment Problem (GAP), tasks must be allocated to machines with
Abstract
limited
resources,
in order
to minimize
processing
has several
industrial
Abstract
In the
Generalized
Assignment
Problem
(GAP),costs.
tasks This
must problem
be allocated
to machines
with
applications
and
often
appears
as
a
substructure
in
other
combinatorial
optimization
problems.
limited
resources,
in order
to minimize
processing
has several
industrial
In the
Generalized
Assignment
Problem
(GAP),costs.
tasks This
must problem
be allocated
to machines
with
We
propose
aand
hybrid
by processing
Scatter Search
metaheuristic,
that
efficiently
generates
applications
often
appears
as a substructure
in other
combinatorial
optimization
limited
resources,
in method
order
toinspired
minimize
costs.
This problem
has
several problems.
industrial
a
pool
of solutions
using
a Tabu
an metaheuristic,
Ejection
Chainthat
mechanism.
Common
We
propose
aand
hybrid
method
inspired
bycriteria
Scatterand
Search
efficiently problems.
generates
applications
often
appears
as a list
substructure
in other
combinatorial
optimization
characteristics
are
extracted
from
the
pool
and
solutions
are
combined
by
exploring
a
restricted
a
of solutions
a Tabu
listbycriteria
an metaheuristic,
Ejection Chainthat
mechanism.
Common
Wepool
propose
a hybridusing
method
inspired
Scatterand
Search
efficiently generates
search
as
Binary
(BP)
model.
This
method
was
implemented
as a
characteristics
areaextracted
from
and solutions
are
combined
exploring
a restricted
a pool space,
of solutions
using aProgramming
Tabuthe
listpool
criteria
and
an Ejection
Chainby
mechanism.
Common
parallel
approach
to
run
in
a
Graphics
Processing
Unit
(GPU).
Experimental
results
show
that
search
space, as
Binary Programming
model. are
This
methodby
was
implemented
as
a
characteristics
areaextracted
from the pool (BP)
and solutions
combined
exploring
a restricted
the
proposed
method
is
very
competitive
to
the
algorithms
found
in
the
literature.
On
average,
parallel
approach
run in aProgramming
Graphics Processing
Unit (GPU).
Experimental
results show as
that
search space,
as atoBinary
(BP) model.
This method
was implemented
a
a
gap
ofapproach
0.09%
is obtained
a set ofProcessing
45
compared
lowerresults
bounds.
Due
to
the
proposed
method
is very
toinstances,
the algorithms
found
in thetoliterature.
Onshow
average,
parallel
to run
in over
a competitive
Graphics
Unitwhen
(GPU).
Experimental
that
the
integration
of
the method
with
anof
exact
BP algorithms
solver,when
it was
capable
of
proving
theOn
optimality
a
gap
of 0.09%
is obtained
a set
45
compared
toliterature.
lower bounds.
Due to
the
proposed
method
is veryover
competitive
toinstances,
the
found
in the
average,
of
small
size
instances,
also
finding
new
best
known
solutions
for
21
instances.
In
terms
of
the
integration
the method
with
anof
exact
BP solver,when
it was
capable of
the optimality
a gap
of 0.09% of
is obtained
over
a set
45 instances,
compared
to proving
lower bounds.
Due to
computational
times,
the
proposed
method
performs
on
average
8
times
faster
than
literature,
of
size instances,
also finding
best
for 21ofinstances.
terms of
thesmall
integration
of the method
with annew
exact
BPknown
solver, solutions
it was capable
proving theInoptimality
also
indicating
that the
approach
is
scalable
and
robustfor
computational
times,
theproposed
proposed
method
performs
average
8 for
times
faster applications.
thanInliterature,
of small
size instances,
also
finding
new best
knownon
solutions
21practical
instances.
terms of
also
indicating
that
the
proposed
approach
is
scalable
and
robust
for
practical
applications.
computational
times,
the
proposed
method
performs
on
average
8
times
faster
than
literature,
Keywords:
Scatter
Search,
Tabu
Search,
Ejection
Chain,
Binary
Programming,
Generalized
Assignment
© 2017 The Authors. Published by Elsevier B.V.
also
indicating
that
the proposed
approach
isChain,
scalable
and Programming,
robust
for practical
applications.
Peer-review
responsibility
of theSearch,
scientific
committee
of theBinary
International
Conference
on Computational
Science
Problem
Keywords: under
Scatter
Search, Tabu
Ejection
Generalized
Assignment
Problem
Keywords: Scatter Search, Tabu Search, Ejection Chain, Binary Programming, Generalized Assignment
Problem

1 Introduction
1 Introduction
The
Generalized
Assignment Problem (GAP), originally proposed by Ross and Soland [24], is
1
Introduction
defined as finding an assignment of minimal cost given an amount jobs and agents, such that

The Generalized Assignment Problem (GAP), originally proposed by Ross and Soland [24], is
one
can
be allocated
to aProblem
unique
agent cost
satisfying
the
capacity
constraints.
GAP
isthat
an
defined
as
finding
an assignment
of minimal
given an
amount
jobs
andand
agents,
such
The job
Generalized
Assignment
(GAP),
originally
proposed
by
Ross
Soland
[24],
is
NP-hard
problem
[25],
with
applications
in
various
industrial
problems.
one
job as
can
be allocated
to a unique
agent cost
satisfying
theamount
capacityjobs
constraints.
an
defined
finding
an assignment
of minimal
given an
and agents,GAP
suchisthat
NP-hard
problem
[25], with
in various
industrial
problems.
one job can
be allocated
toapplications
a unique agent
satisfying
the capacity
constraints. GAP is an
1
NP-hard problem [25], with applications in various industrial problems.
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
1
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.188

	

A Hybrid Heuristic in GPU-CPU
Based
on et
SSal.for
the GAP.
Danilo
Souza,
Santos and Igor Coelho
Danilo
S. Souza
/ Procedia
Computer
Science
108CHaroldo
(2017) 1404–1413

Formally, the GAP can be defined as: given n the number of jobs and m the number
of agents, let us consider the set of jobs J = {1, ..., n} and the set of agents I = {1, ..., m},
aiming to determine a minimum cost allocation in order to assign each job to exactly one agent,
satisfying the resource constraints of each agent. By allocating job j to agent i, it is assigned
a cost dji and a consumption of resource rji , such that the total amount of resources available
to agent i is denoted by bi . The binary decision variable xji receives 1 if the job j is allocated
to the agent i, and 0 otherwise. Then, a mathematical model of the GAP can be formulated
as follows:

dji xji
(1)
M inimize
j∈J i∈I

Subject to


j∈J

rji xji ≤ bi ∀i ∈ I


i∈I

xji = 1 ∀j ∈ J

xji ∈ {0, 1} ∀i ∈ I, j ∈ J

(2)
(3)
(4)

Several approaches have been proposed to tackle this problem, including exact and heuristic
methods. Works proposed in the literature using heuristic algorithms include Genetic Algorithms [3, 28, 7], Simulated Annealing [20] and Tabu Search [15, 20, 6, 13]. Also, some
exact algorithms have been proposed: the branch-and-price algorithm by Savelsbergh [26],
the Cutting Plane algorithm by Avella et al. [1], and Branch-and-Cut by Nauss [18], where
optimal solutions were found for many instances with up to 200 jobs and 20 agents. In the
paper proposed by Posta, Ferland and Michelon [22] an exact algorithm to solve the generalized allocation problem is implemented. The problem treated as optimization is reformulated
in a sequence of decision problems, and variable-fixing rules are us. These rules are based on
Lagrangian reduced costs which are calculated using a dynamic programming algorithm. The
results show that the proposed method is able to find optimal solutions for large instances. For
more details on solution methods for GAP, Cattrysse and Van Wassenhove [2] and Öncan [19]
presented extensive reviews of applications and the existing exact and heuristic algorithms.
The use of optimization techniques to obtain close to optimal solutions to NP-Hard problems
often demands high processing times, especially when dealing with large problems. However,
high-performance computational techniques can be applied to reduce computational time and
improve algorithm performance in solving the problem. Recently, the use of Graphics Processing
Unit (GPU) emerged in order to accelerate the calculations in many application areas with low
cost computational equipment. Successful implementations in GPU can obtain a speed up of
100 times better than a sequential implementation in CPU [14]. However, due to specific
details of the GPU, such as the Single Instruction Multiple Threads (SIMT) paradigm, classic
algorithms usually need to be entirely rewritten in order to explore the massive amount of
processing cores and abundant device memory bandwidth.
This paper describes a hybrid metaheuristic inspired by Scatter Search metaheuristic implemented to run on a heterogeneous CPU-GPU platform to produce high quality solutions
the GAP. The proposed hybrid method includes a parallel implementation of the Tabu Search
(TS) metaheuristic combined with a Binary Programming Pool Search (BPPS). The use of
the TS combined with scatter search is proposed due to its promising background for solving
other hard optimization problems and its very simple structure, which makes is very suitable
for GPU based implementation. Our method includes a fast GPU based implementation of
2

1405

1406	

A Hybrid Heuristic in GPU-CPU
Based
on et
SSal.for
the GAP.
Danilo
Souza,
Santos and Igor Coelho
Danilo
S. Souza
/ Procedia
Computer
Science
108CHaroldo
(2017) 1404–1413

Ejection Chains, so that a large neighborhood is explored in parallel in the GPU at each TS
iteration. The execution of the TS heuristic in GPU allows the generation of several solutions
in reduced computational time, thus facilitating the composition of a pool of elite solutions used
as reference set for BPPS method. The BPPS enables a rapid search process by using rules to
fix decision variables using most common characteristics of the solution pool and rapidly reduce
the search space of the problem.
The reminder of the paper is organized as follows. Section 2 discusses the design and implementation of proposed hybrid method. Section 3 details computational experiments designed
for evaluating and analyzes experiment results. Section 4 reports the findings and future work
to improve the method.

2

Proposed Method

This section presents the proposed approach to the Generalized Assignment Problem . The
proposed method is a hybrid approach composed of an adaptation of the scatter search using
tabu search techniques and a binary programming pool search.
The Scatter search (SS) is an evolutionary metaheuristic that was first introduced in Glover
[8] with objective to explore a solution space from the evolution of a set of good solutions called
the Reference Set [23]. For a general introduction to SS, we refer the reader to [8, 17, 16]. The
Algorithm 1 shows the main structure of our method.
Algorithm 1 Proposed Method
1: Construct an initial population P with size of |P | using the Greedy randomized method.
2: Build the reference set using TS in GPU to improve the solutions in step 1
3: Select the solution with more characteristics similar to the other solutions (denominated in
this work degree of similarity).
4: Uses the BPPS from the solutions selected in step 3 to perform Solution Improvement,
Reference Set Update, Subset Generation and Solution Combination.
In the first phase of the approach a Greedy Randomized algorithm is used to generate a set
of distinct initial solutions.To improve solutions, the tabu search approach is implemented using
the parallelism in GPU, where the method is executed several times in parallel (the current
generation GPUs typically have thousands of processing cores) generating several solutions,
where the best solutions are stored in a pool(Reference Set).
Using the pool it is possible to calculate the degree of similarity from each solution to each
other, and the solution with the highest degree is used as input to the next phase. For each
decision variable each input solution in the pool, a value hji computes the number of times that
the variable xji appears with value 1 in solutions of the pool of solutions.
The Binary Program Pool Search proposes the fixation of the variables with greater values
of hji , in order to reduce the search space for the BPPS and to propagate the most common
features for new solutions, and this process is repeated by gradually increasing the search space
whenever it is not possible to obtain an improvement in the solution.
The methods used are presented in details in the following subsections.

2.1

Greedy Randomized Method

A greedy randomized method is used to generate the initial solutions. The proposed method
considers a weight to prioritize the allocations that will allow the reduction of the final cost.
3

	

A Hybrid Heuristic in GPU-CPU
Based
on et
SSal.for
the GAP.
Danilo
Souza,
Santos and Igor Coelho
Danilo
S. Souza
/ Procedia
Computer
Science
108CHaroldo
(2017) 1404–1413

This weight is calculated in relation to the cost cji and consumption of resources rji : Wji =
w1 cji + w2 rji . The allocation is performed by the job, that is, given a job j it will be allocated
to the agent i with the lower weight Wji which satisfies the capacity constraint. Task are chosen
sequentially.
A pseudocode of the method is presented in the Algorithm 2.
Algorithm 2 Greedy Method
Input: w1 , w2
 Weight assigned to the cost and the resource.
 Cost and resources of allocating job j to agent i
cji , rji
bi
 Available capacity of agent i
 Solution Initial
Output: x
1: Wji ← w1 cji + w2 rji ∀j ∈ N, i ∈ M
2: for k := 1 to n do
 n = |N |
3:
for z := 1 to m do
 m = |M |
4:
a ← Argmin {Wki }
 (i)∈M

5:
if
xki = 0 and rka +
xja rja ≤ ba then
i∈I

j∈J

xka ← 1
else
Wka ← ∞
end if
end for
end for
12: Return x
6:
7:
8:
9:
10:
11:

It is worth mentioning that depending on the values assigned to the weights w1 and w2 as
well as the resources rji and costs cji , the proposed method can generate infeasible solutions.
In case of infeasibility, the method is reinitialized using values other than w1 and w2 , until a
feasible solution is found. The weight w1 was determined by a random real value contained in
the interval [0.5, 1.5], thus generating different solutions at each iteration. For the weight w2
the value was assigned by the instance group, in groups C and D, w2 will be the value of w1 + 1,
for the instances of group E, the value of w2 is w1 + 19

2.2

Tabu Search

Tabu Search (TS) is a metaheuristic based on local search or neighborhood search that admits
worsening solutions, proposed by Glover [9, 10] to solve complex problems of combinatorial
optimization. The tabu search is an iterative procedure that aims to explore the solution space

of the problem in order to make successive moves from one solution x to another solution x in
its neighborhood N (X). However, only this search engine is not enough to escape from local
optimum, since there may be a return to a previously generated solution. To avoid this, the
algorithm uses the concept of tabu list.
The tabu list (adaptive memory) may be short-term memory or long-term memory. The
short-term memory restricts the search by prohibiting certain movements allowing you to overcome great locations, prevent cycling and direct the search to unexplored regions. The use of
the long-term memory provides the return of the search for regions considered promising. For
this is used a measure of the frequency of attributes of the best solutions found during the
search called elite solutions [11].
4

1407

1408	

A Hybrid Heuristic in GPU-CPU
Based
on et
SSal.for
the GAP.
Danilo
Souza,
Santos and Igor Coelho
Danilo
S. Souza
/ Procedia
Computer
Science
108CHaroldo
(2017) 1404–1413

Each iteration of the Tabu Search algorithm consists of main tasks: neighborhood generation, neighborhood evaluation, choosing the best solution within a neighborhood and updating
the tabu list, and finally moving to the new solution [4]. In paper, we propose the parallel
implementation with the use of GPU for the phases generation neighborhood and evaluation
neighborhood, provided that the permutations forming the neighborhood are all stored in memory. The other phases will run on CPU on a single thread. It requires data transfer between
GPU and CPU in every iteration.
The use of the GPU is performed by means of implementations of kernels that are executed
in a defined set of threads. Theoretically, all threads run the same code simultaneously and
have a unique identifier. In practice, threads that belong to a same warp of 32 threads will
execute the same code (this value can vary in some GPU microarchitectures). The threads are
divided into groups called blocks, which will be executed by different Stream Multiprocessors
(SMs). The maximum dimension for the number of threads and blocks is limited by the GPU,
but it can be configured by the user in order to optimize the execution time of each kernel [27].
In other words, the same method can be executed by several threads and these in turn grouped
in several blocks. It is noteworthy that between threads of the same block it is possible to share
data through the ”shared memory”.
The neighborhood is generated from the ejection chain method presented in the subsection
2.2.1, where each thread generates a certain value of ejection chains and the best chain will be
stored in the shared memory and thus propagated to the next phase. Each block of the GPU
architecture consists of several threads, a single thread from each block will be responsible for
evaluating the best generated chains stored in shared memory, updating the solution with the
best chain for that block. Each block will execute a local search procedure, and in the end it
will generate a reference set (Solution Poll) with the best solutions generated by each block.
But long-term memory is shared by all blocks. The short-term memory is used in the Ejection
Chain method, on the other hand, the long-term memory is applied as a tie-break criterion in
the evaluation of the solutions.
2.2.1

Ejection Chain

Ejection chain methods are variable depth methods that generate sequences of simple moves, in
order to achieve more complex compound moves. In other words, an ejection chain of L levels
consists of successive operations performed on a set of elements, where the lth operation changes
the state of one or more solution elements (that are said to be ejected in operation l + 1). The
states change as well as the ejection chain advances, and these depend on the cumulative effect
of the previous steps [12].
The moves are based on the size k, such that: for k = 1, a randomly selected job j will
be allocated to a new agent w, this new allocation must respect the capacity of the agent w,
thus corresponding a shift movement; for k = 2, two jobs j1 and j2 are randomly chosen, where
i1 and i2 are the agents allocated to perform the jobs j1 and j2 respectively. The movement
corresponds to a swap movement, where the job j1 will be allocated to agent i2 if possible, and
the job j2 to agent i1 ; for k ≥ 3, the ejection chain corresponds to a sequence of exchanges
for different agents and jobs, where jobs are randomly selected j1 , j2 , ..., jk and their respective
agents called i1 , i2 , ..., ik . The move must always obey the capacity constraints of the problem,
so each job jk , with the exception of the last, will be allocated to agent ik+1 , that is, job j1
will be allocated to agent i2 , job j2 will be allocated to agent i3 , successively until the job
j(k−1) be assigned to agent ik , and finally job jk will be allocated to the agent i1 . The process
is assembled iteratively in order to verify chains of size 2 to k, returning the chain that will
have the best improvement for the solution (which will contribute to a decrease in the objective
5

	

A Hybrid Heuristic in GPU-CPU
Based
on et
SSal.for
the GAP.
Danilo
Souza,
Santos and Igor Coelho
Danilo
S. Souza
/ Procedia
Computer
Science
108CHaroldo
(2017) 1404–1413

function). Therefore, the returned chain can have size contained between 2 and k.

2.3

Reference Set (Solution Pool)

As previously stated, the reference set is generated from the execution of the Tabu Search in
GPU. The Reference Set is used in later phases to calculate the degree of similarity between the
solutions as well as to determine which features will be propagated to for the next solutions.
The number of solutions stored in Solution Pool was determined by the maximum number of
blocks allowed by the GPU architecture.

2.4

Binary Programming Pool Search

The proposed Binary Programming Pool Search (BPPS) is based on Relaxation Induced Neighborhood Search (RINS) [5] and Ellipsoidal Cuts [21], using characteristics contained in the
solution pool.
Initially, a solution of the solution pool is chosen as input to the BP formulation, and
the solution with the greater value of objective function is chosen. To determine common
characteristics in the solution pool a residency Matrix hji is calculated, where for each variable
xji the value hji contains the number of times that xji = 1 in the solutions contained in the
pool of solutions, that is, given xji is equal to 1 in w solutions of the pool, the value of hji will
be set to w.
With the initial solution and the residency matrix hji of decision variables,the BPPS uses
these parameters to perform the ellipsoidal cuts (thus reducing the solution space). At each
iteration the constraint 5 is added to the model, where the value of αji is calculated from the
normalization of the data contained in the matrix hji . The β is the amount of slack to define
the ellipsoidal neighborhood and it is defined as parameter and incremented every iteration in
case there is no improvement in the solution.


j∈N,i∈M |xji=1

αji .(1 − xji ) ≤ β

(5)

The constraint presented in the equation ref eq: cac limits the value of the objective function
by the value of the incumbent solution, and is updated at each iteration.


j∈N,i∈M



xji .cji ≤ Fo

(6)

Each execution of the solver is limited to 2 situations, if there is improvement in the incumbent solution the number of 500 node exploited without improvement is used as criterion,
otherwise a time limit is used. A pseudocode for the formulation is presented in the Algorithm 3.

3

Computational Results

In this section, we evaluate the performance of the proposed hybrid GPU heuristic based on
Scatter Search, named GSS. Our main experimental platform is composed of a CPU Intel i7
3.40GHz, with 24GB of memory, and a GPU GeForce GTX 780, with 2304 cores and 2GB of
global memory. It is worth to mention that twelve core of CPU was used for phase of the BPPS.
The TS metaheuristic was implemented in C with CUDA SDK 7.5. The BPPS was coded in
C++ and AMPL language, solved by the Gurobi Solver version 7.0.1. The method was tested
6

1409

1410	

A Hybrid Heuristic in GPU-CPU
Based
on et
SSal.for
the GAP.
Danilo
Souza,
Santos and Igor Coelho
Danilo
S. Souza
/ Procedia
Computer
Science
108CHaroldo
(2017) 1404–1413

Algorithm 3 BP Pool Search
Input: x
 Solution, xji = 1 if job j is allocated to agent i
hji
 Residency Matrix
N, M
 Sets with n jobs and m agents
Parameters: β
 Slack to define the ellipsoidal neighborhood
timeLimit
 Time limit for BPPS

 Best solution found
Output: x
1: t ← β
2: while time ≤ timeLimit ∧ k ≤ |N | do
3:
m1 = MAX(hji ) ∀i ∈ N, j ∈ M | xji = 1; m2 = MIN(hji ) ∀i ∈ N, j ∈ M | xji = 1;

4:
αji ← (hji − m2 )/(m2 − m1 ) ∀i ∈ N, j ∈ M ; Fo ← f (x);


5:
x ← RunSolver(x, αji , Fo , β, timeLimit − time);

6:
if f (x ) < f (x) then
7:
hji ← hji + 1, ∀xji = 1; β ← t;
8:
else
9:
β ← β + 1;
10:
end if

11:
x←x
12: end while

13: Return x

using a set of 45 instances taken from literature [29], this set has combinations of 100, 200, 400,
900, 1600 jobs with 5, 10, 15, 20, 30, 40, 60 and 80 agents, divided into groups called C, D and
E.
As a parameter of GSS metaheuristic, size of tabu list was defined from an offline calibration,
where some list sizes were tested (5, 10, 15, 20, (0.5, 0.75, 1, 1.25, 1.4, 1.5, 1.6)∗(|N |/(max(k)+1))
) , but the one that presented the best result was 1.25∗(|N |/(max(k)+1)), and the stop condition
was set for the maximum time of 10 seconds without improvement. The number of ejection
chains generated per thread was defined by performing tests with the values of 1, 5, 10, 15 and
20, thus obtaining a better performance in relation to cost-time with the value 5. Size k of
the ejection chain was calibrated with values 1, 5, 10, 15 and 20 obtaining better performance
for chain of size 1 and 10, so k is chosen randomly between 0 or 10 at each iteration. The β
parameter of the BPPS was set to 2 given tests performed with values 1, 2, 3, 4, 5, 6, and 10.
Table 1 presents a comparison between the state-of-the-art algorithm in literature for the
GAP, named TS [29], and the proposed GSS and GTS algorithms. The methods were executed
10 times and the best solutions values are presented and compared to a Lower Bound of each
problem instance.The GTS consists in the first phase of the GSS, where a Tabu Search is
performed inside the GPU, in order to populate a reference set including good quality solutions.
The second phase of GSS consists of the BPPS model running over an exact solver, which tries
to prove the optimality of the current best solution, including new solutions found in the process
back to the Scatter Search reference set.
On average, the time of both methods to achieve the best solution (BTime) is smaller than
the TS proposed in literature, indicating a faster convergence. However, the gaps of the GTS
are still bigger than literature, because the purpose of the GTS is just to form a pool of high
quality solutions for the GSS, using hundreds of threads in the GPU.
When the average gaps are compared, the GSS is able to achieve lower values for instance
groups C and E (0.03%, 0.23% and 0.02%) when compared to the TS (0.04%, 0.20% and 0.04%).
7

	

A Hybrid Heuristic in GPU-CPU
Based
on SS
for/ Procedia
the GAP.
Danilo
Souza,
Haroldo
Santos and Igor Coelho
Danilo
S. Souza
et al.
Computer
Science
108C
(2017) 1404–1413

The GSS is able to find 21 best known solutions and 14 ties (in bold values) from 45 instances,
also proving the optimality of 15 solutions (solutions marked with an asterisk).
Table 1: Computational experiments
Inst.

Lower
Bound
1930
1400
1242
3455
2804
2391
5596
4781
4244
11339
9982
9325
18802
17144
16284

GSS (GTS + BPPS)
GTS
Best
gap
Time
Best
gap
Time
C.100.5
1931*
0.05
26.3
1931
0.05
23.9
C.100.10
1402*
0.14
42.5
1404
0.29
32.8
C.100.20
1243*
0.08
48.7
1252
0.81
37.9
C.200.5
3456*
0.03
31.1
3475
0.58
21.3
C.200.10
2806*
0.07
68.7
2818
0.50
30.7
C.200.20
2391*
0.00
123.6
2408
0.71
54.4
C.400.10
5597*
0.02
83.7
5629
0.59
63.8
C.400.20
4782*
0.02
133.5
4827
0.96
49.0
C.400.40
4244*
0.00
316.9
4279
0.82
62.0
C.900.15
11341
0.02
744.2
11431
0.81
71.1
C.900.30
9983
0.01
332.7
10087
1.05
13.3
C.900.60
9327
0.02
917.6
9425
1.07
150.6
C.1600.20
18803
0.01
831.4
18948
0.78
138.1
C.1600.40
17146
0.01
873.6
17340
1.14
143.1
C.1600.80
16288
0.02
894.8
16456
1.06
203.2
C Average
0.03
364.61
0.75
73.0
D.100.5
6350
6353*
0.05
151.3
6449
1.56
33.2
D.100.10
6342
6355
0.20
510.0
6541
3.14
24.1
D.100.20
6177
6229
0.84
209.8
6345
2.72
76.3
D.200.5
12741
12745
0.03
691.3
12889
1.16
93.7
D.200.10
12426
12437
0.09
1203.3
12688
2.11
116.2
D.200.20
12230
12267
0.30
1155.2
12601
3.03
57.9
D.400.10
24959
24969
0.04
616.0
25457
2.00
220.3
D.400.20
24561
24621
0.24
500.6
25354
3.23
201.7
D.400.40
24350
24506
0.53
416.6
25081
3.00
114.9
D.900.15
55403
55430
0.05
1585.6
56888
2.68
218.2
D.900.30
54833
54970
0.25
873.5
56713
3.43
271.0
D.900.60
54551
54782
0.42
1438.9
56089
2.82
237.8
D.1600.20
97823
97887
0.07
2527.7
100067
2.29
419.9
D.1600.40
97105
97260
0.16
1938.7
99965
2.95
322.2
D.1600.80
97034
97316
0.29
587.1
99836
2.89
281.2
D Average
0.23
960.3
2.60
179.2
E.100.5
12673
12681*
0.06
67.6
12868
1.54
58.4
E.100.10
11568
11577*
0.08
132.4
11879
2.69
45.8
E.100.20
8431
8436
0.06
140.1
8938
6.01
59.1
E.200.5
24927
24930*
0.01
85.1
25228
1.21
78.4
E.200.10
23302
23307*
0.02
157.8
23518
0.93
95.9
E.200.20
22377
22379*
0.01
115.4
22814
1.95
24.0
E.400.10
45745
45746
0.00
72.9
46135
0.85
15.8
E.400.20
44876
44877
0.00
143.0
45436
1.25
20.9
E.400.40
44557
44570
0.03
202.9
45570
2.27
95.4
E.900.15
102420
102426
0.01
103.9
103643
1.19
18.0
E.900.30
100426
100431
0.00
501.9
101354
0.92
16.8
E.900.60
100144
100171
0.03
644.0
104007
3.86
42.6
E.1600.20
180642
180654
0.01
616.6
182784
1.19
16.0
E.1600.40
178293
178307
0.01
620.0
179571
0.72
16.5
E.1600.80
176816
176846
0.02
624.6
179740
1.65
19.5
E Average
0.02
281.9
1.88
41.5
Average
0.09
535.60
1.74
97.9
*Indicates that an optimal solution was found (and proven) by the BPPS module.

Best
1931
1402
1243
3456
2806
2392
5597
4782
4244
11341
9985
9328
18803
17147
16291
6357
6358
6221
12746
12446
12284
24974
24614
24463
55435
54910
54666
97870
97177
97109
12682
11577
8443
24930
23307
22391
45746
44882
44589
102423
100442
100185
180647
178311
176866

TS
gap
0.05
0.14
0.08
0.03
0.07
0.04
0.02
0.02
0.00
0.02
0.03
0.03
0.01
0.02
0.04
0.04
0.11
0.25
0.71
0.04
0.16
0.44
0.06
0.22
0.46
0.06
0.14
0.21
0.05
0.07
0.08
0.20
0.07
0.08
0.14
0.01
0.02
0.06
0.00
0.01
0.07
0.00
0.02
0.04
0.00
0.01
0.03
0.04
0.09

Time
0.6
3.0
21.6
3.7
100.5
137.4
105.8
130.4
157.6
759.6
720.0
704.7
691.6
2103.7
4317.2
663.8
62.9
107.2
111.0
95.5
129.2
120.7
16.1
81.3
165.2
112.9
234.4
833.8
143.0
1294.0
4795.4
553.5
39.9
31.6
90.4
20.0
34.1
209.3
260.7
212.9
217.7
157.4
758.9
483.7
1683.2
2214.7
2473.1
592.5
603.2

In fact, since the gaps are quite low when computed over a Lower Bound for the GAP, it is
much likely that most of the current best known solutions are already optimal (although not
8

1411

1412	

A Hybrid Heuristic in GPU-CPU
Based
on et
SSal.for
the GAP.
Danilo
Souza,
Haroldo
Santos and Igor Coelho
Danilo
S. Souza
/ Procedia
Computer
Science
108C
(2017) 1404–1413

proven yet). The instance group D is still quite challenging for the GSS, consuming a bigger
share of the computational times, while providing solutions with bigger gaps.
Finally, the GPU configuration consisted of 12 blocks (in order to maximize device occupancy), each one performing an independent Tabu Search and contributing to a single solution
in the pool (the reference set in Scatter Search consisted of 12 solutions). This configuration
achieved an acceleration of 3 to 8 times, when compared to a pure CPU implementation of the
GTS module.

4

Conclusions

This work presented a hybrid GPU heuristic inspired by Scatter Search metaheuristic in order
to deal with the Generalized Assignment Problem, or GAP. The proposed algorithm (named
GSS), consisted of two integrated phases, where in the first phase named GTS, 12 independent
Tabu Searches were performed in a GPU to form a pool of 12 high quality solutions. This pool
was later passed to the BPPS module, consisting of an exact solver for a Binary Programming
model considering a limited version of the original problem. The proposed technique managed
to find 21 best known solutions, when compared to the state-of-the-art algorithm for the GAP,
also proving the optimality of 15 solutions. The average gaps are smaller than literature, when
compared to a lower bound of the problem. Although the achieved gaps are quite low for most
instances, we propose the following future improvements for the GSS algorithm. Many low
level optimizations can be applied in GTS regarding the GPU performance, such as: reducing
number of registers, increasing shared memory usage, storage of read-only data in specific
constant memories, better kernel launching parameters that increase memory and compute
throughput, while reducing the general occupancy. Finally, new instances could be proposed
for this challenging and classical problem, incorporating characteristics of the hardest problems
in D group.

Acknowledgements
The authors would like to thank Brazilian funding agencies CAPES, CNPq, FAPEMIG and
FAPERJ for supporting the current work.

References
[1] Pasquale Avella, Maurizio Boccia, and Igor Vasilyev. A computational study of exact knapsack
separation for the generalized assignment problem. Computational Optimization and Applications,
45(3):543–555, 2010.
[2] Dirk G. Cattrysse and Luk N. Van Wassenhove. A survey of algorithms for the generalized
assignment problem. European Journal of Operational Research, 60(3):260–272, 1992.
[3] Paul C Chu and John E Beasley. A genetic algorithm for the generalised assignment problem.
Computers & Operations Research, 24(1):17–23, 1997.
[4] Michal Czapiński and Stuart Barnes. Tabu search with two approaches to parallel flowshop evaluation on cuda platform. Journal of Parallel and Distributed Computing, 71(6):802–811, 2011.
[5] Emilie Danna, Edward Rothberg, and Claude Le Pape. Exploring relaxation induced neighborhoods to improve mip solutions. Mathematical Programming, 102(1):71–90, 2005.
[6] Juan A Dıaz and Elena Fernández. A tabu search heuristic for the generalized assignment problem.
European Journal of Operational Research, 132(1):22–38, 2001.

9

	

Danilo S. Souza et al. / Procedia Computer Science 108C (2017) 1404–1413
A Hybrid Heuristic in GPU-CPU Based on SS for the GAP.

Danilo Souza, Haroldo Santos and Igor Coelho

[7] Harald Feltl and Günther R Raidl. An improved hybrid genetic algorithm for the generalized
assignment problem. In Proceedings of the 2004 ACM symposium on Applied computing, pages
990–995. ACM, 2004.
[8] Fred Glover. Heuristics for integer programming using surrogate constraints. Decision Sciences,
8(1):156–166, 1977.
[9] Fred Glover. Tabu search – part i. ORSA Journal on computing, 1(3):190–206, 1989.
[10] Fred Glover. Tabu search – part ii. ORSA Journal on computing, 2(1):4–32, 1990.
[11] Fred Glover and Manuel Laguna. Tabu Search. Springer, 2013.
[12] Fred Glover and César Rego. Ejection chain and filter-and-fan methods in combinatorial optimization. 4OR, 4(4):263–296, 2006.
[13] Andrew J Higgins. A dynamic tabu search for large-scale generalised assignment problems. Computers & operations research, 28(10):1039–1048, 2001.
[14] David B Kirk and W Hwu Wen-mei. Programming massively parallel processors: a hands-on
approach, volume 2. Elsevier, 2012.
[15] Manuel Laguna, James P Kelly, JoséLuis González-Velarde, and Fred Glover. Tabu search for the
multilevel generalized assignment problem. European Journal of Operational Research, 82(1):176–
189, 1995.
[16] Rafael Martı́, Abraham Duarte, and Manuel Laguna. Advanced scatter search for the max-cut
problem. INFORMS Journal on Computing, 21(1):26–38, 2009.
[17] Rafael Martı́, Manuel Laguna, and Fred Glover. Principles of scatter search. European Journal of
Operational Research, 169(2):359–372, 2006.
[18] Robert M Nauss. Solving the generalized assignment problem: An optimizing and heuristic approach. INFORMS Journal on Computing, 15(3):249–266, 2003.
[19] Temel Öncan. A Survey of the Generalized Assignment Problem and Its Applications. INFOR:
Information Systems and Operational Research, 45(3):123–141, 2008.
[20] Ibrahim H Osman. Heuristics for the generalised assignment problem: simulated annealing and
tabu search approaches. Operations-Research-Spektrum, 17(4):211–225, 1995.
[21] Alexandre Pigatti, Marcus Poggi De Aragao, and Eduardo Uchoa. Stabilized branch-and-cutand-price for the generalized assignment problem. Electronic Notes in Discrete Mathematics,
19:389–395, 2005.
[22] Marius Posta, Jacques A Ferland, and Philippe Michelon. An exact method with variable fixing
for solving the generalized assignment problem. Computational Optimization and Applications,
52(3):629–644, 2012.
[23] Mauricio GC Resende, Celso C Ribeiro, Fred Glover, and Rafael Martı́. Scatter search and pathrelinking: Fundamentals, advances, and applications. In Handbook of metaheuristics, pages 87–107.
Springer, 2010.
[24] G Terry Ross and Richard M Soland. A branch and bound algorithm for the generalized assignment
problem. Mathematical programming, 8(1):91–103, 1975.
[25] Sartaj Sahni and Teofilo Gonzalez. P-Complete Approximation Problems. Journal of the ACM,
23(3):555–565, 1976.
[26] Martin Savelsbergh. A branch-and-price algorithm for the generalized assignment problem. Operations research, 45(6):831–841, 1997.
[27] Damian Sulewski, Stefan Edelkamp, and Peter Kissmann. Exploiting the Computational Power
of the Graphics Card: Optimal State Space Planning on the GPU. Icaps, pages 242–249, 2011.
[28] JM Wilson. A genetic algorithm for the generalised assignment problem. Journal of the Operational
Research Society, 48(8):804–809, 1997.
[29] Mutsunori Yagiura, Toshihide Ibaraki, and Fred Glover. A path relinking approach with ejection chains for the generalized assignment problem. European journal of operational research,
169(2):548–569, 2006.

10

1413

