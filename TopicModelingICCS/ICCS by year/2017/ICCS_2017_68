Available online at www.sciencedirect.com

ScienceDirect
This Procedia
space isComputer
reserved
for 108C
the Procedia
header, do not use it
Science
(2017) 1195–1204
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Combining Grid Computing and Docker Containers for the
Study andGrid
Parametrization
of CT
ImageContainers
Reconstruction
Combining
Computing and
Docker
for the
Methods
Study and Parametrization
of CT Image Reconstruction
1
Mónica Chillarón1 , Vicente VidalMethods
, Damián Segrelles2 , Ignacio Blanquer2 , and
Gumersindo Verdú3
1
Mónica Chillarón
, Vicente Vidal1 , Damián Segrelles2 , Ignacio Blanquer2 , and
1
Departamento de Sistemas Informáticos y 3Computación (DSIC)
Gumersindo
VerdúValencia, Spain
Universitat Politècnica
de València,

mnichipr@inf.upv.es, vvidal@dsic.upv.es
Departamento
de Sistemas Informáticos
y Computación
(DSIC)
2
Instituto de Instrumentación
para Imagen
Molecular (I3M)
Universitat
Politècnica
de
València,
Valencia,
Spain
Universitat Politècnica de València, Valencia, Spain
mnichipr@inf.upv.es, vvidal@dsic.upv.es
dsegrelles@dsic.upv.es,
iblanque@dsic.upv.es
2
Instituto
de Instrumentación
para Imagen
Molecular (I3M)
Instituto de Seguridad
Industrial, Radiofı́sica
y Medioambiental
(ISIRYM)
Universitat
Universitat Politècnica
Politècnica de
de València,
València, Valencia,
Valencia, Spain
Spain
dsegrelles@dsic.upv.es,
iblanque@dsic.upv.es
gverdu@iqn.upv.es
Instituto de Seguridad Industrial, Radiofı́sica y Medioambiental (ISIRYM)
Universitat Politècnica de València, Valencia, Spain
gverdu@iqn.upv.es
1

3

3

Abstract
Computed tomography (CT) is one of the most widely used methods in Medical Imaging.
Despite of its relevance in the diagnosis of diseases with a high impact in our society (such as
Abstract
cancer), it is one of the most potentially harmful modalities. CT requires a high X-ray dose to
Computed tomography (CT) is one of the most widely used methods in Medical Imaging.
be induced to the patients. Solving the CT Image Reconstruction problem iteratively in order
Despite of its relevance in the diagnosis of diseases with a high impact in our society (such as
to approximate the solution allows working with only a subset of the input data required by
cancer), it is one of the most potentially harmful modalities. CT requires a high X-ray dose to
direct methods. This directly implies a reduction of the radiation received by the patient and
be induced to the patients. Solving the CT Image Reconstruction problem iteratively in order
a strong reduction on the potential morbidity. Therefore, we aim to study the feasibility of
to approximate the solution allows working with only a subset of the input data required by
such methods for their actual application, with the purpose of concluding if they are accurate
direct methods. This directly implies a reduction of the radiation received by the patient and
and can obtain good quality images with a lower dose of X rays. This paper discusses the
a strong reduction on the potential morbidity. Therefore, we aim to study the feasibility of
use of containers within a Grid Computing platform to perform a thorough study of all the
such methods for their actual application, with the purpose of concluding if they are accurate
possible configurations and parameters of various methods being developed to reconstruct CT
and can obtain good quality images with a lower dose of X rays. This paper discusses the
images iteratively, which could lead to find the optimal configuration of the parameters. The
use of containers within a Grid Computing platform to perform a thorough study of all the
work compares two approaches for managing the software dependencies of the code: store the
possible configurations and parameters of various methods being developed to reconstruct CT
software libraries on a Storage Element and using containers for executing the job.
images iteratively, which could lead to find the optimal configuration of the parameters. The
Keywords:
CT, Medical
Imaging,
Reconstruction,
Grid,
Containers
work
two
approaches
for managing
the
software
dependencies of the code: store the
©
2017compares
The Authors.
Published
by Elsevier
B.V.
Peer-review
under responsibility
of the Element
scientific committee
of the
International
Computational
Science
software libraries
on a Storage
and using
containers
forConference
executingonthe
job.
Keywords: CT, Medical Imaging, Reconstruction, Grid, Containers

1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.065

1

1196	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

1

Introduction and Background

Nowadays, the importance of computing science applied in medicine is clear. Physicians and
medical staff are daily assisted by computer systems for diagnosis and therapy, enabling a personalized care of patients. Computing has allowed the development of new medical diagnosis
methods based on the principle of capturing images (i.e Computerized Tomography - CT), from
a human body and apply on them a computational process to observe and diagnose abnormalities such as malignant tumours or bone lesions.
In this paper, we focus on the computational process of CT image reconstruction [1], which
reconstructs a three-dimensional image through a set of X-ray projections of a given body
part, captured from different angles. The method calculates the attenuation suffered by the
X-ray beams passing through the elements (i.e bone, tissue, cartilage, etc.) of the studied
body part [2] [3]. It is very useful in the diagnosis of many diseases with a high impact in
the society (i.e cancer), allowing a very precise representation of the inside of the studied body
parts, facilitating the identification of foreign bodies such as tumours or blood clots that before
its application could only be discovered through surgery. However, the high dose of radiation
induced to the patient from CT devices limits its use in the clinical practice, especially for the
more vulnerable patients (e.g children and pregnant women) or patients whose diseases would
require frequent CT scans, such as cancer patients, to assess the evolution of tumours. It has
been proved that X-rays in high doses are a source of cancer by themselves, which sometimes
could pose more risk than the disease. Every modern hospital is applying dose watching programs and dose monitoring to assess the amount of radiation their patients are exposed to. For
this, it is vital to apply new reconstruction methods to reduce the radiation dose.
Since the introduction of iterative methods in the field of image reconstruction, such as [4–6],
the possibility of working with fewer projections than the used by direct methods has arisen, due
to the redundancy of information produced in the data acquisition process. Thereby taking into
account this redundancy, the application of efficient methods based on less data input (X-ray
projections) is possible, which directly leads to less induced radiation. Therefore, the objective
of this work is to perform a multi-parametric study to explore the behaviour of every possible
configuration of the iterative method chosen to reconstruct CT images. The final intent of the
study is the identification of the optimal parameters that lead to a high-quality reconstruction,
valid to the clinical practice, using the lowest amount of projections possible reducing the dose
of radiation to potentially improve the health of patients requiring a CT diagnostic test.
However, if we want to analyse all configurations, we need to consume days or weeks of computing time. In this case, Grid Computing seems an appropriate approach because it provides
a big amount of computing and storage resources where the different configurations can be
executed in parallel as a batch jobs in a High-Throughput Model. However, we need to adapt
the iterative method to the Grid paradigm, with the added complexity of the management
of the software dependencies that the Grid jobs have. Similar works to perform a parameter
exploration of biological systems models on a Grid platform can be found at [7, 8]. Thus, we
compare in this paper a traditional embedding of software libraries in Storage Elements (SEs),
with the use of containers to encapsulate those Grid jobs making use of the tool udocker [9],
which provides a user-space execution of containers.

2

Materials and Methods

In this section we introduce the iterative reconstruction method and the relevant parameters to
analyse in the study. After that, we present the grid infrastructure and the code of the study.
Finally, we discuss the issues related to the set up of the experiment for its execution in the grid
2

	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

infrastructure, using two methods: using the traditional way for storing the software libraries
needed by the Grid jobs, and using containers to encapsulate them.

2.1

Reconstruction method and relevant parameters

The reconstruction method chosen for the study is the one proposed by [10], which combines
the LSQR [11] algorithm for the iterative resolution of the equation system representing the CT
Image Reconstruction problem, with a Soft Thresholding Filter to eliminate noise and artifacts
(STF, [12]), and an acceleration stage that helps the method to converge more rapidly (FISTA,
[13]). As a whole, this method seems to bring good results, especially for reconstructions
employing a limited number of projections or views, although it has not been studied in depth
in the referenced works. The reconstruction method contains certain parameters that will
directly influence both the quality of the reconstruction and the number of iterations required
to reach convergence. For each chosen phantom, we need to set:
1.
2.
3.
4.
5.

The resolution of the reconstructed image.
The number of projections taken.
The number of internal iterations of the LSQR algorithm.
Whether or not the filtering technique is applied.
In case of applying the filter, it must also be considered the alpha parameter of the STF
algorithm, that as explained in [12] influences the weight assigned to the diagonal gradient
in the filtering algorithm and can consequently change the quality of the obtained image.
6. Whether or not the acceleration phase is applied.
Therefore, the objective is to study all of these parameters in depth to determine the values
that achieve the optimal image quality. In this way, the technicians in charge of performing the
reconstruction can configure the method to fit their necessities, i.e they may need to obtain a
reconstruction that reaches a desired quality, and having previous knowledge of the behaviour
of the method they can decide accordingly the number of views to employ. With the ranges
of values chosen for the experiment we need a total of 16800 executions of the method for
a single phantom. The projections have been generated for a phantom corresponding to the
mathematical representation of the human head developed by the Forbild Phantom Group [14],
employing the medical imaging program CONRAD [15] to generate the phantom images for each
resolution, which will also be taken as a reference to measure the quality of the reconstruction.

2.2

Input data

The problem of CT image reconstruction is represented by the equations system defined in (1).
In order to solve it, we need two sets of input data. First, the system matrix A (4), which
is calculated once for each desired resolution of the reconstructed image. Also the projections
vector g (2), which will be different for each resolution and for each projected section of an
object. Both data sets must be generated for a CT scanner model with the same features.
The matrix A is of size MxN, where M is the number of rays traced, and N the pixel size of
the image to be reconstructed. It is obtained by discretizing the scanning space in pixels and
measuring the influence of each beam that is traced in each pixel, as defined by the equation
(4), where ai,j represents the contribution of pixel j to the ray i. To calculate the weights of
each beam we have applied the Forward Projection method proposed by Joseph in [16]. The
resulting matrix is rectangular, disperse and relatively large.
The projections vector is the calculation of the attenuation experienced by rays passing through
the object of study. The size of the vector for each projection angle is 1xn, being n the number
3

1197

1198	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

of detectors forming the scanner. By concatenating all of them we obtain a one-dimensional
vector representing the whole object.
The algorithm we use to solve the system is LSQR, which iteratively approximates u (the
reconstructed image, (3)), until it reaches a convergence criterion. In this case, we consider
the process complete when either the relative residual norm g-Au/g reaches the desired
tolerance of 1e-6 or the method iterates 10000 times without converging.
It should be noted that when we talk about reducing views or projections when using this
algorithm, it means that projections are selected to cover the 360o but with spaces greater than
1o between the chosen angles, using the corresponding submatrix of A to solve the problem.
Depending on the number of views to be used, the selected angles are calculated according to the
equation (5). In this case, we generated the data for different resolutions of the reconstructed
image (N).The resolutions chosen are 32x32, 64x64, 128x128, 256x256 and 512x512 pixels. The
matrix A obtained for every case is large, from 200MB for the 32x32 case up to 3.6GB for the
resolution 512x512.
(3)
u = [u1 , u2 , ..., uN ]T ∈ RN
A∗u=g
(1)

2.3

g = [g1 , g2 , ..., gM ]T ∈ RM
(2)

(360/views) ∗ (i − 1)

1.5 + (360/views) ∗ (i − 1)
Θi =

(360 − 1)

A = ai,j ∈ RM xN

if 1 <= i <= (views/2)
if (views/2) < i < (views)
if i = views

(4)
(5)

Grid infrastructure

The platform employed to carry out the study is the European Grid Infrastructure (EGI). The
infrastructure is publicly funded to give scientists access to over 650,000 logical CPUs and more
than 500 PB of disk storage to drive research and innovation in Europe.
For this work, we have employed ”Biomed” Virtual Organisation, which gives support to Medical Image Analysis. EGI includes Unified Middleware Distribution (UMD) [18] as a middleware
software which offers the end-users a set of services that allows them to access and orchestrate
all computing and storage resources of the EGI infrastructure.

2.4

Sequential Code of the iterative reconstruction method

When we are facing the adaptation of a program to a Grid platform such as EGI, one important
fact is that it comprises heterogeneous resources, which are managed by different organizations,
and therefore nothing guarantees that all the Computing Elements (CEs) will have the necessary software. In turn, it can not be forgotten that in this type of infrastructure the users do
not have the permissions that enable them to install software that requires privileges, which
makes difficult the task of designing the tests.
The original code developed in the test phase of the method was implemented in the programming language of the numerical computing program MATLAB. When adapting the code
available for its use in Grid, a problem arose when trying to use the MATLAB code, since with
it being proprietary software it is not available in the Computing Elements of the ”Biomed”
VO. Finally, we came up with the solution to run MATLAB code previously compiled using
MATLAB Compiler [17]. In this way, the code is fully portable, since the compilation process
generates a binary executable that makes use of the MATLAB license that has been used for
the compilation. However, to run the program, we previously have to install the MATLAB
Runtime in each Computing Element to be used, but it does not need privileges. The Runtime
installer file is 1.23 GB in size. The installation of the Runtime is non-interactive, and when
4

	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

it finishes it only requires to modify the environment variable LD_LIBRARY_PATH adding the
installation folder to indicate where to look for the MATLAB libraries. Since this installation
process is necessary for all jobs, we came up with two different ways of doing it:
• Making the Runtime installer available in an SE of the grid so that all the jobs can
download it and proceed to perform the installation in the CE.
• Creating a Docker image [18] from an Ubuntu base image with the installation of MATLAB Runtime previously made, which is published in Docker Hub. In this way, the grid
jobs will simply have to pull the image and create a container that runs an instance of
it. Then the method program can be run inside the aforesaid container. However, since
Docker is not available in every CE of Biomed, we made use of the tool ”udocker” [9],
an application developed by the Portuguese Laboratório de Instrumentaçao e Fı́sica Experimental de Particulas (LIP) that allows the use of Docker without having to install it,
which would require root privileges.
2.4.1

Set up of Storage Elements

The sequential code of the iterative method requires the preTable 1: SE usage statistics
viously generated input data explained in Section 2.2 (SysAverage
No of
Failed
download
tem Matrix and Projections Vector for each image resolureplicas
Jobs
time (sec.)
tion), the generated executable and the MATLAB Runtime
1
28
1934
installer, as well as the reference images, to compare the
2
12
1219
quality obtained. Consequently, it is necessary to make them
4
8
902
available in the Grid so that the different CEs that are going
6
6
470
to execute jobs can download them. As already explained,
the necessary files are heavy, so it will be necessary to make use of the SEs for this type of
assumptions, because it is not possible for these files to travel with the job through the Input
Sandbox. In order to test the performance of the SEs and their efficiency, we carried out a
small experiment. A total of 100 jobs were launched, measuring the time required to download the matrix corresponding to resolution 512x512, which is the heaviest, verifying in this
way if the downloads were to cause bottlenecks that could delay the execution of the works
excessively. The experiment was run first with only one replica, and then with two, four and
six total replicas distributed between different SEs provided by EGI, to study the performance
variation. The results of the 400 jobs executed are presented in Table 1.
As we can see, the number of failed jobs is reduced considerably when we replicate the file. Also,
the average time to download it diminishes too, up until we have four replicas. When going
from four to six replicas, the improvement is not so noticeable, especially regarding the number
of failed jobs. However, by looking at the time statistics, we have observed that a larger number
of replicas achieve lower downloading times, concentrating the best 50% of those corresponding
to 6 replicas in times lower than 200 seconds, while the best 50% of those corresponding to 4
replicas are concentrated in times lower than 500 seconds. Therefore, not only for the slight
improvement of the times, but also for preventing failed jobs, we chose to make 6 replicas in
order to re-launch the minimum jobs possible.

2.5

Grid Jobs Structure

The main script, that we will call Starter, will be the main executable for all jobs. In Figure
1a we show the process that is performed. It can be observed that the process that the script
performs is different depending on whether the local installation of the Runtime is made, or
5

1199

1200	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

the Docker image with the included installation is used. It should be noted that for efficiency
reasons, since the download of the data can take a considerable time, the executions of the
method have been grouped into groups of four. Namely, for a combination of the parameters,
the method is studied applying only the LSQR phase, then combining it with filter, combining
it with acceleration, and finally combining it with both. In this way, the 16,800 executions
required will be carried out by 4200 grid jobs.

(a) Starter Script Workflow

(b) Grid Study Workflow

Figure 1: Implemented Workflows

2.6

Grid Study Workflow

Once we have the code of the main process for each job implemented, it is necessary to automate
the creation of the JDL files corresponding to each job, the launching and monitoring of each
one of them, and finally the collection of results. Due to the high number of jobs required it is
essential to develop the tools that perform all this process automatically since it is not feasible
to do it manually. This whole process has been developed using Bash scripts. Figure 1b shows
the flowchart of the jobs life cycle management, the steps of which consist in the creation of
the JDL files that will result from the combination of all the values of the input parameters,
then the uploading and replication of the required files to an SE, followed by the launching of
all the resulting jobs, the monitoring of their status, and finally the retrieval of all the results
when the jobs are completed.

3
3.1

Results and Discussion
Grid platform performance

Once the study has been performed, we have assessed the performance provided by the Grid
platform. Figure 2 shows the number of jobs per hour that have been submitted, dividing
the launch into five threads, one per resolution, for a single phantom. In this way, the 4200
necessary jobs have been submitted in a time a little more than three hours. As can be

6

	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

observed in Figure 2, there is a small decrease in the number of jobs submitted every hour,
which may be due to the saturation of the Workload Management Systems (WMS), since
they are managing an increasingly large number of jobs. However, this slight deterioration
is not too important, since there are still more than 1250 jobs being submitted every hour.
Figure 3a shows the average execution times of the jobs
divided by resolution when downloading the Runtime from
an SE and installing it locally. It can be observed that for
small resolutions (32x32 and 64x64), the time that the jobs
remain in the Scheduled state, and the time required to perform the data download is greater than the time required
for the execution of the method. However, when increasing the size of the problem, the application of the method
requires more time, reaching the maximum for resolution
512x512. Regarding the data download time, we notice
that the average time remains very similar for all resoluFigure 2: Jobs Submission Time tions, regardless of the size of the matrices to be downloaded. This seems to indicate that the influence of the number of jobs that download the same
file is greater than the size of the file. Finally, it is observed that the time that the jobs take
to start running rises as we increase the size of the problem, which may be due to the WMS
giving a higher priority to the jobs that have a lower estimated execution time.
In relation to the jobs executed with Docker containers, Figure 3b shows the average life times
of the jobs. As we observe, the waiting time remains similar to the previous case, since it does
not depend on the work to be carried out. In turn, it is appreciable how the download time decreases, since in this case it is not necessary to download the MATLAB Runtime installer from
an SE. The pull time of the Docker image from Docker Hub and the creation of the required
container is relatively small, getting the container ready for its use in a slightly shorter time
than was required to perform the local installation. However, the increase of the execution time
is notable, except in the case of resolution 512x512. This may be due to the fact that running
the method inside a Docker container is slower than doing so directly over the CE because the
containers do not make use of the 100% machine resources.
In spite of what is shown in Figures 3a and 3b, in which the average times are shown, it should
be noted that the method being studied is of iterative type, and therefore does not end until
it reaches the convergence criterion. It is, therefore, impossible to make a previous estimate of
the execution time in each possible case, which may mean that sometimes when the method
converges with few iterations, the waiting time and download time is greater than the execution
time. However, observing the time statistics we can conclude that the execution times corre-

(a) Regular Jobs

(b) Docker Jobs

Figure 3: Average Jobs Life Time
7

1201

1202	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

sponding to the method application are generally much longer than the download time. For
this reason, it can be determined that despite the generation of a delay due to the necessary
data download, it is not exceedingly large, so it is still profitable to carry out the study in the
grid platform instead of being carried out on a local machine.

3.2

Reconstruction method parameters

With the in-depth exploration of all the desired parameters, we can perform an analysis of the
results of the reconstructions. To determine the best reconstruction, we have considered the optimal combination between required iterations and quality obtained. The quality of the images
has been measured using the metric PSNR [10], and the best results are shown in Figure 4.
For small resolutions, i.e 32x32 and 64x64, we get good
results for any number of views chosen (from 30 to 180),
provided we do not apply the filtering and acceleration
phase. Applying the filter in these cases causes the
method to diverge and therefore there is a significant
increase in the number of required iterations, reaching
the maximum iterations and stopping despite not having converged.
From resolution 128x128 to 512x512, the filter and acceleration are necessary, since their combination with
Figure 4: Evolution of optimal PSNR
the algorithm LSQR significantly reduces the number
of iterations and increases the image quality. If they are not applied, the method generally does
not converge before 10000 iterations. In addition, it is observed that as the number of views is
reduced, the number of required iterations increases, since the solution has to be approximated
from less information. Introducing these techniques causes that we also have to study how many
internal iterations of LSQR to apply before applying them. In all cases we have observed that
reducing the number of views causes the number of internal iterations of LSQR to be reduced,
so the filter and acceleration phase is more frequently applied. The same thing happens when
increasing the resolution.
All of the above can be justified by studying the characteristics of the singular values of the
matrices that are formed for each case. We can observe that by increasing the resolution of
the image to be reconstructed and reducing the number of projections, the singular values of
the image are concentrated in a smaller interval. For instance, in Figures 5a and 5b we can
see the first 30 singular values in every case. As observed, the singular values of the matrix
corresponding to the resolution of 32x32 are concentrated in a much broader interval than the
512x512 cases. For example, for 30 views and resolution 32x32, the first 30 singular values
vary in 70 units, while the ones corresponding to resolution 512x512 and 30 views vary in only

(a) Res. 32x32

(b) Res. 512x512

Figure 5: First 30 singular values
8

	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

(a) Res. 32x32
Total Iter: 381

(b) Res. 64x64
Total Iter: 957

(c) Res. 128x128
Total Iter: 2639
LSQR iter: 13

(d) Res. 256x256
Total Iter: 3325
LSQR iter: 6

(e) Res. 512x512
Total Iter: 3576
LSQR iter: 4

Figure 6: Best reconstructions with 30 views
4 units. This makes the method converge more slowly since LSQR is an algorithm based on
Krylov subspaces. For this reason, when the singular values are more concentrated, it is necessary to help the method with the filter and the acceleration to improve the process. For every
resolution we have found configurations that obtain very satisfactory results, as can be observed
in Figure 4, which allows us to perform high-quality reconstructions from a very small number
of views, in this case 30, as can be seen in Figure 6. In addition, it is achieved in a relatively
low number of iterations, guaranteeing a good average time of reconstruction.

4

Conclusion

In this work, we have performed a multiparametric study of a new iterative method for the
reconstruction of CT images using a Grid platform. Although Grid computing is not fit for the
actual application of CT Image Reconstruction techniques since time is critical in this field, it
can be really useful to study the quality of new methods in the developing phase.
The code of the method has been adapted for its execution in the Grid, making use of MATLAB
Runtime, and the necessary tools have been developed for the launching and monitoring of the
required jobs. In turn, the method has been executed in two different ways, through a local
installation of MATLAB Runtime in the CE after downloading it from an SE, and by using
a Docker container that runs an instance of an image which includes a previous installation
of the Runtime. In this way, it has been possible to make a comparison of both techniques,
obtaining slightly better execution times in the first case. However, this is possibly due to the
large size of the problem to be solved, and it is likely that for smaller problems the use of
Docker containers on Grid platforms using tools such as ”udocker” can be very beneficial to
extend Grid utility, since it allows users to make use of software that is not available in the CE
without the need to have root permissions. In addition, now that the use of Docker on a Grid
platform has been proved to be feasible, for future works we can develop optimised C versions
of the methods using specific libraries to facilitate the use of matrices. In this way, we would
not have to perform a static compilation of the program to make it work in any CE, we could
just compile it inside the Docker container which is an easier approach.
The obtained results have allowed us to determine the optimal configurations that allow us to
apply the method reducing the X-ray dose emitted in the traditional CTs up to an 80%, since we
can use only 30 views instead of the 360 used in the conventional methods, conserving the image
quality. Besides, with all the data we have gathered, we can conclude that the quality of the
resulting image and the convergence speed of the process relies heavily on the characteristics of
the matrix A, being the filter and acceleration technique a necessary step for high resolutions.
With all the above, we have achieved in-depth knowledge of the behaviour of our method,
which will certainly help to apply it correctly, always ensuring convergence and minimum image

9

1203

1204	

Combining Grid Computing Mónica
and Docker
Containers
...
Chillarón,
Segrelles,
Blanquer and Verdú
Chillarón
et al. / Procedia
Computer
ScienceVidal,
108C (2017)
1195–1204

quality.

4.1

Acknowledgments

This work has been supported by Universitat Politècnica de València and partially funded
by TIN2015-66972-C5-4-R, ENE2014-59442-P-AR and TIN2013-44390-R of the ”Ministerio de
Economı́a y Competitividad” of Spain, as well as the Spanish ”Generalitat Valenciana” PROMETEOII/2014/008 project.

References
[1] J. Radon. On the determination of functions from their integral values along certain manifolds.
IEEE Transactions on Medical Imaging, 5(4):170–176, 1986.
[2] G.N. Hounsfield. Computerized transverse axial scanning (tomography):Part I. description of
system. British Journal of Radiology, 46:1016–1022, 1973.
[3] R.A Brooks and G. Di Chiro. Principles of computer assisted tomography (CAT) in radiographic
and radioisotopic imaging. Physics in Medicine and Biology, 21(5):689–732, 1976.
[4] A. H. Andersen. Algebraic reconstruction in ct from limited views. IEEE Transactions on Medical
Imaging, 8(1):50–55, 1989.
[5] A. H. Andersen and A. C. Kak. Simultaneous algebraic reconstruction technique (SART): a
superior implementation of the ART algorithm. Ultrasonic Imaging, 6(1):81–94, 1984.
[6] W. Yu and L. Zeng. A novel weighted total difference based image reconstruction algorithm for
few-view computed tomography. PLoS ONE, 9(10), 2014.
[7] E. Mosca et al. Stochastic simulations on a grid framework for parameter sweep applications
in biological models. Proc. of the Intl. Workshop on High Performance Computational Systems
Biology, pages 33–42, 2009.
[8] I. Merelli et al. Grid computing for sensitivity analysis of stochastic biological models. Parallel
Computing Technologies: 11th International Conferences, pages 62–73, 2011.
[9] Indigo DataCloud. Udocker. https://github.com/indigo-dc/udocker, last viewed November
2016.
[10] L. FLores, V. Vidal, and G. Verdú. Iterative reconstruction from few-view projections. Procedia
Computer Science, 51:703–712, 2015.
[11] C. C. Paige and M. A. Saunders. LSQR: An algorithm for sparse linear equations and sparse least
squares. ACM Transactions on Mathematical Software, 8(1):43–71, 1982.
[12] H. Yu and Ge. Wang. A soft-threshold filtering approach for reconstruction from a limited number
of projections. Physics in Medicine and Biology, 55:3905, 2010.
[13] A. Beck and M. Teboulle. A fast iterative shrinkage-thresholding algorithm for linear inverse
problems. SIAM Journal on Imaging Sciences, 2(1):183–202, 2009.
[14] FORBILD Phantom Group. http://www.imp.uni-erlangen.de/forbild/english/results/
index.htm, last viewed September 2016.
[15] A. Maier et al. CONRAD — A software framework for cone-beam imaging in radiology. Medical
Physics, 40(10), 2013.
[16] P. Joseph. An improved algorithm for reprojecting rays through pixel images. IEEE Transactions
on Medical Imaging, 1(3):192–196, 1982.
[17] The MathWorks, Inc. MATLAB Compiler. https://es.mathworks.com/products/compiler/,
last viewed November 2016.
[18] D. Merkel. Docker: lightweight linux containers for consistent development and deployment. Linux
Journal, 2014(239):2.

10

