Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
This space
reserved
for the
header, do not use it
ProcediaisComputer
Science
108CProcedia
(2017) 1115–1124
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Orthology Correction for Gene Tree Reconstruction:
Orthology Correction for Gene Tree Reconstruction:
Theoretical
andforExperimental
Results
Orthology
Correction
Gene Tree Reconstruction:
Theoretical
and Experimental
Results
1
2
Riccardo
Dondi
,
Giancarlo
Mauri
,
and
Italo
Zoppis2
Theoretical1 and Experimental
Results
2
2
Riccardo Dondi , Giancarlo Mauri , and Italo Zoppis
1
Università1 degli Studi di Bergamo,
Bergamo, Italy
Riccardo
Dondi riccardo.dondi@unibg.it
,degli
Giancarlo
Mauri2 ,Bergamo,
and Italo
Zoppis2
1
Università
Studi di Bergamo,
Italy
2
2
2

Università
degli
Studi di Milano-Bicocca, Milano, Italy
riccardo.dondi@unibg.it
1
Università degli Studi di Bergamo, Bergamo, Italy
Università
degli Studi di Milano-Bicocca,
Milano, Italy
mauri@disco.unimib.it,
zoppis@disco.unimib.it
riccardo.dondi@unibg.it
mauri@disco.unimib.it, zoppis@disco.unimib.it
Università degli Studi di Milano-Bicocca, Milano, Italy
mauri@disco.unimib.it, zoppis@disco.unimib.it

Abstract
Abstract
We consider how the orthology/paralogy information can be corrected in order to represent a
We
how thethat
orthology/paralogy
information
be corrected Interestingly,
in order to represent
a
geneconsider
tree, a problem
has recently gained
interest incan
phylogenomics.
the probAbstract
gene
tree,
a problem
that has recently
gained
interest
in phylogenomics.
Interestingly,
the problem
is
related
to
the
Minimum
CoGraph
Editing
problem
on
the
relation
graph
that
represents
We consider how the orthology/paralogy information can be corrected in order to represent a
lem
is related to the Minimum CoGraph
Editing
problem
on the
graph
represents
orthology/paralogy
wheregained
we
want
to
minimize
the relation
number
of editthat
operations
on
gene tree, a probleminformation,
that has recently
interest
in phylogenomics.
Interestingly,
the proborthology/paralogy
information,
where
we awant
to minimize
the number
of edit
operations
on
the
given
relation
graph
in
order
to
obtain
cograph.
In
this
paper
we
provide
both
theoretical
lem is related to the Minimum CoGraph Editing problem on the relation graph that represents
the
given
relation graph
inonorder
to obtain aCoGraph
cograph.Editing
In this paper
we provide
both
theoretical
and
experimental
results
the
Minimum
problem.
On
the
theoretical
side,
orthology/paralogy information, where we want to minimize the number of edit operations on
and
experimental
results on the Minimum
CoGraph
Editing
problem. Onfor
the theoretical
side,
we
approximation
for bounded
degree
relation
general
probthe provide
given relation
graph in algorithms
order to obtain
a cograph.
In this
papergraphs,
we providethe
both
theoretical
we
provide
approximation
algorithms
for
bounded
degreeOn
relation
graphs, for the
general
problem
and
for
the
problem
restricted
to
deletion
of
edges.
the
experimental
side,
we
present
and experimental results on the Minimum CoGraph Editing problem. On the theoretical side,
lem
and for
the problem
restrictedCoGraph
to deletion
of edges.
Onprovide
the experimental
side, we
present
a
algorithm
for Minimum
Editing
and we
an experimental
evaluation
wegenetic
provide
approximation
algorithms for bounded
degree
relation graphs,
for the general
proba
genetic
algorithm
for Minimum
CoGraph
Editing and we provide an experimental evaluation
of
the
genetic
algorithm
on
synthetic
data.
lem and for the problem restricted to deletion of edges. On the experimental side, we present
of the genetic algorithm on synthetic data.
a
for Genes,
Minimum
CoGraph
Editing and we
provideEditing,
an experimental
evaluation
Keywords:
Orthologous
Gene
Tree
CoGraph
Approximation
Algo© genetic
2017 Thealgorithm
Authors.
Published
by Elsevier
B.V. Reconstruction,
Peer-review
under
responsibility
of
the
scientific
committee
of
the
International
Conference
on
Computational
of
the
genetic
algorithm
on
synthetic
data.
Keywords:
Orthologous
Genes, Gene Tree Reconstruction, CoGraph Editing, Approximation Science
Algorithms, Genetic
Algorithms
rithms, Genetic Algorithms
Keywords: Orthologous Genes, Gene Tree Reconstruction, CoGraph Editing, Approximation Algorithms, Genetic Algorithms

1 Introduction
1 Introduction
Understanding the relations among homologous genes is fundamental in different contexts, for
1
Introduction
Understanding
the gene
relations
among homologous
genesgene
is fundamental
in different
for
example to predict
functionality.
When studying
functionalities,
a family contexts,
of homologs
example
predict genewhere
functionality.
When
studying
gene functionalities,
a family
of the
homologs
is
usuallytoconsidered,
two genes
are called
homologs
if they originated
from
same
Understanding
the relations among
homologous
genes
is fundamental
in different
contexts,
for
is usually gene.
considered,
where
two genes
are called
homologs
if they
originated
from
the same
ancestral
However,
different
evolutionary
events
may
have
given
rise
to
two
homologous
example to predict gene functionality. When studying gene functionalities, a family of homologs
ancestral
gene.
However, different
evolutionary
events
may haveparticular,
given rise iftothe
two
homologous
genes:
losses,
duplications,
speciations,
gene
transfers.
ancestral
gene
is usually
considered,
where
two geneslateral
are called
homologs In
if they originated
from
the same
genes:
losses,
duplications,
speciations,
lateral
gene transfers.
In particular,
if the
ancestral
gene
of
two
homologous
genes
is
a
duplication
(speciation,
respectively),
the
two
genes
are
called
ancestral gene. However, different evolutionary events may have given rise to two homologous
of
two homologous
genesrespectively).
is a duplication
(speciation,
respectively),
the two
genes
are called
paralogous
(orthologous,
The
evolution
of
a
set
of
homologous
genes
is
represented
genes: losses, duplications, speciations, lateral gene transfers. In particular, if the ancestral gene
paralogous
(orthologous, respectively).
Thewhose
evolution
a set
of homologous
genes
is represented
with
a phylogenetic
gene tree,
leavesofare
labeled
by the
of genes
of two
homologous tree,
genescalled
is a duplication
(speciation,
respectively),
theset
two
genes and
are whose
called
with
a phylogenetic
tree, the
called
gene tree, whose
leaves
are labeled
by the set of
genes
and whose
internal
nodes
represent
evolutionary
events
(speciations,
duplications).
The
comparison
of
paralogous (orthologous, respectively). The evolution of a set of homologous genes is represented
internal
nodes
represent
the tree
evolutionary
events (speciations,
duplications).
The comparison
of
a
gene
tree
and
of
a
species
(the
phylogenetic
tree
that
represents
the
evolutionary
history
with a phylogenetic tree, called gene tree, whose leaves are labeled by the set of genes and whose
a gene tree and of a species tree (the phylogenetic tree that represents the evolutionary history
internal nodes represent the evolutionary events (speciations, duplications). The comparison of
1
a gene tree and of a species tree (the phylogenetic tree that represents the evolutionary history
1
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.047

1

1116	

Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis
Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124

of the species considered), allows to infer the evolutionary events responsible for the evolution
of the set of genes studied.
A popular conjecture, called orthologs conjecture [20], states that orthologous genes, are
usually more similar both in the sequence and in functionality than paralogous genes. This
motivates the research of reliable methods to infer the kind of relations among homologous
genes.
Two approaches have been considered for the inference of the relations among homologous
genes: (1) reconciliation-based methods, and (2) clustering methods. The first approach, see
[8, 3], is based on the comparison between a gene tree for the considered family and a species tree.
Clustering methods are instead based on sequence similarity (see for example [22, 15, 2, 14]).
However, both methods are known to be error-prone (see [9, 11, 4, 18]), thus a major problem
in phylogenomics is the integration of the two approaches, in order to infer reliable sets of gene
relations. Some methods have investigated the integration of these two approaches [9, 10, 13, 12],
giving interesting results based on graph-theory. Giving a graph RG (called relation graph)
representing a set R of relations among genes obtained via clustering methods, a first problem
defined in this direction asks whether a set of relations among genes is representable with a
(gene) tree. A set of relations that admits a representation with a gene tree is called satisfiable.
Interestingly, in [9, 13] it is proved that a set R of relations is satisfiable if and only if the
graph GR that represents R is a cograph, that is a graph that does not contain simple paths of
length four.
Since the clustering methods to detect gene relations are error-prone, we consider the problem of correcting a set of orthologous/paralogous relations. The corresponding combinatorial
problem is the Minimum CoGraphEditing problem, that, giving a graph, asks for the minimum
number of edge insertion and edge deletion so that the resulting graph is a cograph. Minimum
CoGraphEditing is NP-hard [16], and it is approximable within factor 4∆, where ∆ is the
degree of the input graph [19], and in factor n [5], where n is the number of vertices of the
graph. In [16], the parameterized complexity of the problem has been considered, showing that
Minimum CoGraphEditing is fixed-parameter tractable when parameterized by the number of
edit operations. Moreover, an integer linear programming has been considered in [10]. Notice
that recently some results on the approximation of the problem have been given for its weighted
variant [5].
Here, we give both theoretical and practical results for Minimum CoGraphEditing. On the
theoretical side, we present in Section 3.2 an approximation algorithm of factor 3∆, where ∆
is the degree of the input graph, for the problem and an approximation algorithm of factor 2∆
for the deletion variant of the problem (that is the variant where edges can be only removed
and no edge insertion is allowed). Notice that the deletion variant of the problem is NPhard [6]. The two algorithms are based on the isolation of vertices of the graph and have a
factor depending on ∆, thus their application in practice is limited. Hence, we consider in
Section 4 genetic algorithms as an approach to compute efficiently optimal or near optimal
solution for the Minimum CoGraphEditing problem. We give in Section 4 a natural genetic
algorithm, and we present some experimental results on simulated data. The results show that
usually the genetic algorithm is efficient, but the quality of returned solutions is influenced by
the skewness in the degree distribution of the input graph. We conclude the paper with some
open problems. We start by introducing some notations and by formally defining the problem
in Section 2.
2

	

Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis
Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124

2

Definitions

In the section we introduce the main concepts related to orthology, and we define formally the
problem we are interested in. We consider trees that are rooted and that, except for the root,
have no nodes of degree 2. The leafset of a tree T is denoted by L(T ). Given a set of elements
L, a tree labeled by L is a tree T such that there exists a bijection between L(T ) and L. Given
a set Γ of homologous genes on a set Σ of species, a gene tree TG represents the evolution of
genes in Γ and is a tree labeled by Γ. A species tree TS represents the evolution of the species
in Σ and is a tree labeled by Σ. The lca-mapping [7] allows to define the evolutionary events
(here we consider only speciations and duplications) associated with the internal nodes of TG ,
by mapping nodes of TG in nodes of TS . Given a set of genes Γ and a gene tree TG labeled by
Γ, two genes x, y ∈ Γ are orthologous if the lca of x and y in TG is a speciation; two genes x
and y are paralogous if the lca of x and y in TG is a duplication.
Given a set of genes Γ, we represent their relations (orthologous/paralogous) with a graph,
called relation graph and denoted as RG (Γ) or simply RG when it is clear from the context.
RG = (VG , EG ) where
VG = {vx : x is in Γ }

EG = {{vx , vy } : vx , vy ∈ VG , x and y are orthologous }
Following the notation of [13], the ortholog relations is represented by an edge, while a paralog
relation is represented by a missing edge.
Given a gene tree, it is always possible to reconstruct the corresponding relation graph. On
the other side, given a relation graph, a corresponding gene tree may not exist. A relation
graph for which there exists a corresponding gene tree is called satisfiable. In [9], it is shown
that a relation graph RG is satisfiable if and only if it is a cograph, that is there is no set of
exactly four vertices of RG that induces a simple path of length 4. A simple path of length 4
in a graph is called a P4 . Given four vertices vi,1 , vi,2 , vi,3 , vi,4 of RG = (VG , EG ) that induce a
P4 , we denote by �vi,1 , vi,2 , vi,3 , vi,4 � the path connecting vi,1 to vi,2 , vi,2 to vi,3 and vi,3 to vi,4 ,
that is {vi,1 , vi,2 }, {vi,2 , vi,3 }, {vi,3 , vi,4 } ∈ EG , while {vi,1 , vi,3 }, {vi,1 , vi,4 }, {vi,2 , vi,4 } ∈
/ EG .
Given a graph GR = (VG , EG ), an edge insertion consists of adding an edge {vi , vj }, with
vi , vj ∈ VG , where {vi , vj } ∈
/ EG ; an edge deletion consists of removing an edge {vi , vj } ∈ EG .
A relation correction of RG is either an edge insertion or an edge deletion.
Now, we are able to introduce the problem we are interested in. The problem asks for the
minimum number of relation corrections such that the resulting graph is a CoGraph.
Minimum CoGraph Editing:(MinCoED)
Input: A gene family Γ and relation graph RG = (VG , EG ) for Γ;
′
′
′
′
Output: A cograph RG
= (VG′ , EG
) such that VG = VG′ and |EG \ EG
+ EG
\ EG | is minimum.
In the following, we consider also a variant of MinCoED, called Minimum CoGraph by
Deletion (MinCoDEL), in which only edge deletions are allowed.
3

1117

1118	

Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis
Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124

3

Approximation Algorithms for MinCoED and MinCoDEL

In this section, we present approximation algorithms for MinCoED and MinCoDEL. The approximation algorithms are inspired by that in [19] that achieves an approximation factor 4∆
for MinCoED and MinCoDEL. The approximation algorithm in [19] is designed for a general
variant of MinCoED, where the input graph has to be edited so that it does not contain a
forbidden subgraph of size t, for some constant t ≥ 1. The approximation algorithm in [19]
greedily finds one occurrence of such a forbidden subgraph of size t and it deletes all the edges
incident in its vertices. In the case of MinCoED and MinCoDEL, the algorithm picks a P4 ,
and it deletes all the edges incident in the vertices of the P4 . This leads to an approximation
of factor 4∆. Here we show that for MinCoED and MinCoDEL, we can reduce the number of
vertices we select for editing or deletion.

3.1

A 3∆-Approximation Algorithm for MinCoED

In this section, we describe a 3∆-approximation algorithm for MinCoED, where ∆ is the degree
of the input graph G. The approximation algorithm, called APPR-ALG-ED, considers the
graph RG and modifies it until it is a cograph, that is there is no P4 . Consider a P4 in RG ,
denoted by pi , with pi =�vi,1 , vi,2 , vi,3 , vi,4 �; the set {vi,1 , vi,2 , vi,3 } is called the pivot triplet of
pi and is denoted by t(pi ).
While RG is not a cograph, the algorithm greedily picks a P4 pi in RG , and deletes all
the edges incident in the vertices of t(pi ). The iteration is repeated until the resulting graph
does not contain any P4 . The time complexity of the algorithm is clearly polynomial, as it is
dominated by the time required to compute if there exists a P4 in RG , which requires at most
time O(n4 ).
Now, we show that APPR-ALG-ED provides an approximation algorithm of factor 3∆.
First, we prove a lower bound on the number of relation corrections required to obtain a
cograph starting from G.
Lemma 1. Given a set P of P4 s in RG , such that, for each pi , pj ∈ P, pi and pj share at most
′
one vertex. Then, a cograph RG
is obtained from RG with at least |P| relation corrections.
Proof. Consider pi , pj in P. Notice that, since pi and pj share at most one vertex, a relation
modification in pi affects two vertices {vi,x , vi,y } of pi , and at most one of vi,x , vi,y belongs to
pj . Hence, the modification of {vi,x , vi,y } does not affect any relations in pj .
Now, we focus on the set T of P4 s selected by APPR-ALG-ED. We prove the following
property.
Lemma 2. Let T be the set of P4 s selected by APPR-ALG-ED. Then for each pi , pj ∈ T , pi
and pj share at most one vertex.
Proof. Consider two P4 s pi , pj in T . Assume without loss of generality that pi was selected
before pj . Let pi =�vi,1 , vi,2 , vi,3 , vi,4 �. Since APPR-ALG-ED deletes all the edges incident in
the triplet pivot t(pi ), it follows that when pj is selected by the algorithm, the vertices in t(pi )
are isolated. Hence, pj can contain at most vertex vi,4 .
Now, we prove a lemma that shows that by deleting all the edges incident in a set of vertices
of RG , we do not induce any P4 that was not in the original graph.
4

	

Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis
Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124
′
Lemma 3. Let W be a set of vertices in RG and let RG
the graph obtained from RG by deleting
′
all the edges incident in W . Then every P4 of RG is also a P4 in RG .
′
that is not a P4 in RG . Notice that, since by
Proof. Let pi =�vi,1 , vi,2 , vi,3 , vi,4 � a P4 in RG
′
construction the set of edges of RG is a subset of the set of edges of RG and since pi is not a
P4 in RG , there exists an edge connecting two vertices, w.l.o.g. vi,1 , vi,3 , in RG that is not an
′
edge of RG
. It follows that one of vi,1 , vi,3 belongs to W , w.l.o.g. vi,1 . Thus by construction
′
vi,1 is an isolated vertices of RG
and cannot belong to a P4 .

Now, we denote by OP T the value of an optimal solution of MinCoED over instance RG ,
and we show that APPR-ALG-ED returns a solution having approximation factor 3∆.
Theorem 1. APPR-ALG-ED returns a solution of MinCoED that modifies at most 3∆ · OP T
relations.
Proof. By Lemma 2 and Lemma 3, the set T of P4 s selected by APPR-ALG-ED consists of P4 s
contained in RG such that, for each pi , pj ∈ T , they share at most one vertex. By Lemma 1
OP T ≥ |T | and, since APPR-ALG-ED deletes at most 3∆ edges for each pi ∈ T , the theorem
holds.

3.2

A 2∆-Approximation Algorithm for MinCoDEL

Now, we consider the MinCoDEL problem and we show that the approximation factor can be
further reduced to 2∆.
First, we describe the approximation algorithm, denoted by APPR-ALG-DEL, which is very
similar to that of the previous section. Similarly, APPR-ALG-DEL considers the graph RG and
modifies it until it is a cograph, that is there is no P4 in the resulting graph. First consider pi ,
a P4 in RG , with pi =�vi,1 , vi,2 , vi,3 , vi,4 �; the set of vertices vi,2 , vi,3 is called the pivot pair of
pi and is denoted by pp(pi ).
APPR-ALG-DEL greedily picks a P4 pi in RG and deletes all the edges incident in vertices
of pp(pi ). The iteration is repeated until the resulting graph does not contain any P4 . As in
the previous algorithm, the time complexity of the algorithm is clearly polynomial.
Now, we show that APPR-ALG-DEL provides an approximated solution of factor 2∆. First,
we prove a lower bound on the number of edit operations required to obtain a cograph starting
from G.
′
Lemma 4. Given a set P of edge disjoint P4 s in RG , then a cograph RG
is obtained from RG
with at least |P| edge deletions.

Proof. Consider pi , pj ∈ P. Since pi and pj are edge disjoint, it follows that the deletion of an
edge of pi does not delete any edge of pj . As a consequence, pj , after the deletion of some edge
of pi , is still a P4 . It follows that at least |P| edge deletions are needed so that each pi ∈ P is
removed from RG .
Now, we prove that the set W of P4 s selected by the APPR-ALG-DEL are edge disjoint.
Lemma 5. Let W be the set of P4 s in RG selected by APPR-ALG-DEL. Then W is a set of
edge disjoint P4 s.
5

1119

1120	

Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis
Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124

Proof. Consider pi , pj in W, and assume without loss of generality that pi was picked by APPRALG-DEL before pj . Since APPR-ALG-DEL deletes all the edges incident in the pair pivots of
pi , it follows that when pj is picked every edge of pi has been deleted. Thus pi and pj cannot
share an edge.
Now, denote by OP T the value an optimal solution of MinCoDEL over instance RG .
Theorem 2. APPR-ALG-DEL returns a solution of MinCoDEL that deletes at most 2∆·OP T
relations.
Proof. By Lemma 5 and Lemma 3, the set W consists of edge disjoint P4 s contained in RG . By
Lemma 4 OP T ≥ |W| and, since APPR-ALG-DEL deletes at most 2∆ edges for each pi ∈ W,
the theorem holds.
Notice that the analysis of the approximation factor of APPR-ALG-DEL cannot be directly
extended to MinCoED, as Lemma 4 does not hold in this case. Indeed, in some cases it is
possible to edit a set edge disjoint P4 s with a single edge insertion.

4

A Genetic Algorithm for MinCoED

The algorithms presented in Section 3 are mainly of theoretical interests. Indeed, although they
represent simple and (probably) fast heuristics, they tend to isolate vertices of the graph, which
is not a desirable property of a solution of MinCoED. On the other side, their approximation
factors depends on ∆, and for large graphs this may lead to solution far from the optimum. To
this concern, we consider here a different approach based on genetic algorithms (GA) [17].
Generally, genetic algorithms use chromosomes in order to represent instances and compute
solutions of the problem at hand. In our case, we coded in the chromosome population the
instances of the MinCoED problem. The algorithm was coded in R using the Genetic Algorithm
package (GA package) [21] 1 . More specifically the following issues were considered in our
simulations.
• Chromosome representation
In order to benefit most from the potentialities offered by the GA package, we adopted a
very simple representation for chromosomes. In our script, chromosomes represent graphs
through binary vectors which are obtained by combining rows of the graph adjacency
matrices.
• Fitness
A fitness function f was defined to promote new chromosome generations with both
the minimum number of edit operations to the input graphs (i.e. chromosome representation), and the minimum number of P4 s generated within the graphs represented through new chromosomal offspring. With this aim, we defined f (N oP4 , y) =
exp −(k1 ∗ N oP4 + k2 ∗ y), where N oP4 represents the number of P4 s in the graph associated with the chromosome, k1 and k2 are constants used to balance the contributes of the
′
following two main components: N oP4 and the difference d = XOR(RG , RG
)/2 between
′
the input graph RG and the graph RG obtained through the final best solution from the
offspring representation.
1 GA

6

package is downloadable at https://cran.r-project.org/web/packages/GA/index.html

	

Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis
Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124

• Mutation
Mutation process was generated with the following two objectives.
– To introduce the minimum number of changes in the initial graph. This was simply
provided by shifting bits from one to zero (respectively, from zero to one) over the
coded chromosomes.
– To apply the methodology discussed in Section 3.1 for the approximation of MinCoED (with low probability). In this case, we greedily sampled P 4s from represented
graphs (i.e. using random walks over the graphs) and, for each sample, we deleted
the edges incident to the pivot triplet of each selected P4 .
• Crossover
The crossover operator simply moves a relation between two vertices from a graph to
another. In other terms, given two adjacency matrices M1 and M2 (respectively associated
with the graphs represented through chromosome 1 and 2) and s = M1 [x, y], we have (after
the crossover application) M2 [x, y] = s; the same applies to M2 , i.e if s = M1 [x, y] then
we have M2 [x, y] = s.
• Selection
To guarantee that the solution quality does not decrease from one generation to another
[1], we allowed best fitness individuals to survive at each generation (i.e. elitism).

4.1

Experimental Results

Genetic algorithms were applied to simulated data (graphs) using the ape package 2 and the
igraph package 3 . We generated input graphs, first by randomly sampling gene trees, then
transforming the gene trees into the corresponding relation graphs (which do not contain P4 s
as proved in [9]). Finally, we added P4 s by perturbing the obtained graphs with a random
mechanisms able to create (or delete) edges between vertices. Please notice that in this phase the
number of added P4 s are strictly dependent to the graph structures. Targets of our simulations
were the following:
• To asses whether the genetic algorithm results in a decrease in the added number of P4 s.
• To asses whether the genetic algorithm task is influenced in some way by structural
properties of the input graphs.
In the first case, we applied GA to graphs with a number of vertices ranging in S =
{15, 25, 35}, and for each s ∈ S we repeated 10 tests with different input to get a better
evaluation of the algorithms behavior. Results are reported in Table 1.
We can observe the following facts.
• Performances definitely benefit when the number of vertices of the input graph is lower
than 35.
• The greater the number of paths introduced, the greater the difficulty of removing them
2 https://cran.r-project.org/web/packages/ape
3 http://igraph.org/r

7

1121

1122	

Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124
Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis

N. of Vertices
15
25
35

N. of P4 - Start
54.20
904.60
3261.40

N. of P4 - Final
0.80
12.50
2528.40

Distance
7.9
46.60
147.80

User time
86.74
195.99
200.02

System time
0.31
0.82
0.99

Table 1: Summary of performances (average values); Distance: distance between the starting
and the final graph in terms of edge insertion/removal. User time: seconds spent for calculations. System time: seconds spent by the OS to respond program’s requests
.

• Both the distance and the computation time do not seem to be too heavy and do not
change substantially with the vertex number.
It is reasonable to assume that GA difficulty in decreasing the number of paths is due to
some structural property of the input graphs. Thus, in order to answer the second issue, we
considered the degree distributions of the input. Indeed, we defined two new variables. The
first for the skewness in the degree distribution: a variable called “skewnees class”, taking
value 1 for positive skewed distribution (0, otherwise). The second variable represents a GA
negative behavior: a variable called “Risk Class”, equal to 1 for negative performance. In these
experiments we considered as negative, results for which GA was not able to reduce the number
of P4 at least of 50% compared to the initial number (respectively, positive results was coded
by 0, if this was not the case). Please notice that, a negative skewed distribution of the vertex
degree express higher connectivity in the input graphs (i.e. many nodes with a high degree of
connectivity).
Experiments were conducted using 45 and 55 vertices for the input graphs. In this case we
repeated 20 tests for 45 vertices and 10 tests for 55 vertices.
Figure 1 reports a 2 × 2 contingency table where data consist of two binary variables, one
for the outcome (Risk Class) and one for the skewness (being used as predictor variable). The
figure shows that while for negative skewed distribution the number of times in which GA has
a negative behavior is predominant, many tests do not fall into the risk class 1 (i.e. good
performances) for positive skewness (i.e. many nodes with low degree of connectivity). To give
a significance evidence for these data we conducted a chi-square test (Pearson chi-square). The
results are reported in Figure 2: a significant difference between the risk of falling into the level
1 for the Risk class variable and negative skewed distribution exists in patterns collected from
the experiments. The p-value equals to 0.021, and this is smaller than the significance (α) level
0.05. In Figure 3 we report summary statistics (average values) concerning the distance of the
final solution from the input graphs, as well as the computational time. Also in this case the
average values do not seem to be too burdensome.

5

Conclusion

We have considered two combinatorial variants (MinCoED and MinCoDEL) of the problem
of editing a relation graph representing orthologous/paralogous relations among genes. We
have provided both theoretical results (approximation algorithms for bounded degree graphs)
and experimental results (a genetic algorithm). There are interesting open problems in both
perspective. From a theoretical point of view, it would be interesting to consider if the approximation factor of MinCoED and MinCoDEL can be improved. On the experimental side, it
would be interesting to test our genetic algorithm on real data and to design efficient heuristics
8

	

Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124
Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis

Figure 1: 2 × 2 contingency table, where the values in the entries represent the number of tests
corresponding to the outcome (Risk Class) and the skewness values.

Figure 2: The chi-square test (Pearson chi-square) give a p-value equals to 0.021 (column Asy.
mp. sig. (2-sided)).
for the MinCoED problem.

References
[1] S. Baluja and R. Caruana. Removing the genetics from the standard genetic algorithm. In
A. Prieditis and S. J. Russell, editors, Machine Learning, Proceedings of the Twelfth International

Figure 3: Average values for distance, time and skewnees for both risk class 0 and 1; (Time 1
(User time): seconds spent for calculations. Time 2 (System time): seconds spent by the OS to
respond program’s requests. Time 3 (elapsed time): sum of User and System time, plus other
program and/or the OS tasks.
9

1123

1124	

Orthology Correction for Gene
Tree Reconstruction
Mauri and Zoppis
Riccardo
Dondi et al. / Procedia Computer Science 108C (2017) Dondi,
1115–1124

[2]
[3]
[4]
[5]
[6]
[7]
[8]

[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]

[19]
[20]
[21]
[22]

10

Conference on Machine Learning, Tahoe City, California, USA, July 9-12, 1995, pages 38–46.
Morgan Kaufmann, 1995.
A.C. Berglund, E. Sjolund, G. Ostlund, and E.L. Sonnhammer. InParanoid 6: eukaryotic ortholog
clusters with inparalogs. Nucl. Acids Res., 36, 2008.
G. Blin, P. Bonizzoni, R. Dondi, R. Rizzi, and F. Sikora. Complexity insights of the minimum
duplication problem. Theor. Comput. Sci., 530:66–79, 2014.
R. Dondi, N. El-Mabrouk, and K. M. Swenson. Gene tree correction for reconciliation and species
tree inference: Complexity and algorithms. J. Discrete Algorithms, 25:51–65, 2014.
R. Dondi, M. Lafond, and N. El-Mabrouk. Approximating the correction of weighted and unweighted orthology and paralogy relations. Algorithms for Molecular Biology, 12(1):4, 2017.
E. S. El-Mallah and C. J. Colbourn. The complexity of some edge deletion problems. Circuits and
Systems, IEEE Transactions on, 35(3):354–362, 1988.
W. M. Fitch. Homology. a personal view on some of the problems. TIG, 16(5):227- 231, 2000.
M. Goodman, J. Czelusniak, G.W. Moore, A.E. Romero-Herrera, and G. Matsuda. Fitting the
gene lineage into its species lineage, a parsimony strategy illustrated by cladograms constructed
from globin sequences. Syst. Zoology, 28:132–163, 1979.
M. Hellmuth, M. Hernandez-Rosales, K. Huber, V. Moulton, P. Stadler, and N. Wieseke. Orthology
relations, symbolic ultrametrics, and cographs. J. Math. Biol., 66(1–2):399–420, 2013.
M. Hellmuth, N. Wieseke, M. Lechner, H. Lenhof, M. Middendorf, and P. F Stadler. Phylogenomics
with paralogs. PNAS, 2014.
M. Lafond, C. Chauve, R. Dondi, and N. El-Mabrouk. Polytomy refinement for the correction of
dubious duplications in gene trees. Bioinformatics, 30(17):519–526, 2014.
M. Lafond, R. Dondi, and N. El-Mabrouk. The link between orthology relations and gene trees:
a correction perspective. Algorithms for Molecular Biology, 11:4, 2016.
M. Lafond and N. El-Mabrouk. Orthology and paralogy constraints: satisfiability and consistency.
BMC Genomics, 15(Suppl 6):S12, 2014.
M. Lechner, S. Findeiß, L. Steiner, M. Marz, P.F. Stadler, and S.J. Prohaska. Proteinortho:
detection of (co-)orthologs in large-scale analysis. BMC Bioinformatics, 12:124, 2011.
L. Li, C.J. Jr. Stoeckert, and D.S. Roos. OrthoMCL: identification of ortholog groups for eukaryotic
genomes. Genome Research, 13:2178- 2189, 2003.
Y. Liu, J. Wang, J. Guo, and J. Chen. Complexity and parameterized algorithms for cograph
editing. Theor. Comput. Sci., 461:45–54, 2012.
M. Mitchell. An introduction to genetic algorithms. Complex adaptive systems. MIT press, Cambridge (Mass.), 1996.
A. Mykowiecka and P. Górecki. Bootstrapping algorithms for gene duplication and speciation
events. In M. Botón-Fernández, C. Martı́n-Vide, S. Santander-Jiménez, and M. A. Vega-Rodrı́guez,
editors, Algorithms for Computational Biology - Third International Conference, AlCoB 2016,
Trujillo, Spain, June 21-22, 2016, Proceedings, volume 9702 of Lecture Notes in Computer Science,
pages 106–118. Springer, 2016.
A. Natanzon, R. Shamir, and R. Sharan. Complexity classification of some edge modification
problems. Discrete Applied Mathematics, 113(1):109–128, 2001.
S. Ohno. Evolution by gene duplication. Springer, Berlin, 1970.
L. Scrucca. GA: A package for genetic algorithms in R. Journal of Statistical Software, 53(4):1–37,
2013.
R.L. Tatusov, M.Y. Galperin, D.A. Natale, and E.V. Koonin. The COG database: a tool for
genome-scale analysis of protein functions and evolution. Nucl. Acids Res., 28:33- 36, 2000.

