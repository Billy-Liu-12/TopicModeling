Available online at www.sciencedirect.com

ScienceDirect
Procedia Computer Science 108C (2017) 2119–2120

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

The Art of Teaching Computational Science
The ArtAlfredo
of Teaching
Computational Science
Tirado-Ramos1and Angela B. Shiflet2
1

University of Texas Health at San Antonio, San Antonio, TX, U.S.A.
1
2
Alfredo
Tirado-Ramos
and Angela
B. Shiflet2
Wofford
College, Spartanburg,
SC, U.S.A.
1
University
of Texas Health at San Antonio,
San Antonio, TX, U.S.A.
tiradoramos@uthscsa.edu,
ShifletAB@wofford.edu
2
Wofford College, Spartanburg, SC, U.S.A.
tiradoramos@uthscsa.edu, ShifletAB@wofford.edu

Abstract
The Workshop on Teaching Computational Science (WTCS) presented innovative research work
Abstract
describing innovations in teaching computational science in its various aspects, e.g. modeling and
The
Workshop
on Teaching Computational
(WTCS)
presented
innovative research
work
simulation,
high-performance
and large-data Science
environments,
during
the International
Conference
in
Computational
Science 2017.
This editorial
providesscience
an introduction
to theaspects,
work presented
during and
the
describing
innovations
in teaching
computational
in its various
e.g. modeling
sessions. high-performance and large-data environments, during the International Conference in
simulation,
Computational Science 2017. This editorial provides an introduction to the work presented during the
© 2017 The Authors. Published by Elsevier B.V.
Keywords:
computational, informatics, parallel computing; e-Learning; collaborative environments
sessions. teaching,
Peer-review
under responsibility of the scientific committee of the International Conference on Computational Science
Keywords: teaching, computational, informatics, parallel computing; e-Learning; collaborative environments

1 Introduction
relatively recently, it has become possible for institutions of higher learning to integrate
1 Only
Introduction

educational programs, courses and modules in computational science and scientific computing into
theirOnly
academic
curricula.
While
computational
science
used toofbehigher
complicated
andtoexpensive,
relatively
recently,
it teaching
has become
possible for
institutions
learning
integrate
nowadays,
integration
of computational
has becomescience
more effective,
allowing
teachers into
and
educationalthe
programs,
courses
and modulesmethods
in computational
and scientific
computing
their academic
teaching
computational
sciencesettings.
used to be
complicated
anduniversities
expensive,
students
to posecurricula.
original While
questions
in lower
cost experimental
Thus,
schools and
nowadays,
thetheir
integration
of computational
methods
hastobecome
more effective,
allowing
teachers and
alike
enhance
students’
scientific computing
skills
solve scientific
problems
with mathematical
studentsand
to pose
original analysis
questionstechniques
in lower cost
experimental
settings.
Thus,
and universities
models
quantitative
developed
with the
help of
highschools
performance
and high
alike enhance their
students’
scientific
to solve scientific
problems
with mathematical
computational
power.
Promoting
the computing
importanceskills
of computational
science
instruction
in science
models and has
quantitative
with thethehelp
of high
and high
classrooms
become aanalysis
priority,techniques
and sciencedeveloped
teachers around
world
have performance
shared experiences
on
computational
power. Promoting
the importance
instruction
in blended
science
the
use of high performance
computing
facilities, be of
it incomputational
the context ofscience
self-directed
learning,
classrooms
become alearning
priority, environments.
and science teachers
the world
shared instructors
experiencesand
on
learning
or has
traditional
In thearound
past few
years,have
teachers,
the use of high
computing
facilities,
it in the context
of self-directed
blended
professors
haveperformance
gradually learnt
to leverage
thebepotential
of computational
toolslearning,
in introductory
learning or traditional
environments.
In the
past fewservice
years, teachers,
and
programming
classes, learning
industry-related
intensive
trainings,
courses, instructors
and specialist
undergraduate
postgraduate
topics,
creating the
virtual
laboratories
for in-silico tools
experimentation
and
professors haveor gradually
learnt
to leverage
potential
of computational
in introductory
learning,
by integrating
methods from e-Learning,
computer service
science, courses,
mathematical
programming
classes, industry-related
intensive trainings,
and modeling,
specialist
undergraduate
postgraduate
topics, creating
for in-silico
and
simulation,
andorscientific
visualization,
amongvirtual
others.laboratories
In this workshop,
we experimentation
discuss submissions
learning, by on
integrating
methodsas from
computer science,
concentrating
issues of current,
well ase-Learning,
local and international
interest. mathematical modeling,
simulation, and scientific visualization, among others. In this workshop, we discuss submissions
concentrating on issues of current, as well as local and international interest.
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.278

Alfredo Tirado-Ramos et al. / Procedia Computer Science 108C (2017) 2119–2120

2120	

2 The Workshop
This year the workshop accepted ten papers, reflecting a varied sample of research work in the field.
Hirst presents an overview of learning tools and provides several examples of modeling and
simulation projects that have been used in mathematics courses at the secondary and college
level. Shiflet et al describe the gaps in educational tools for teaching modeling and simulation in
computational science courses. They present their wide ranging online toolbox and new textbook,
which is the only of its kind designed specifically for an introductory course in the computational
science and engineering curriculum, including applications for invasive species, rumor spreading,
juvenile delinquency, fur patterns, condor populations, rice viruses, toxin producing micro-organisms,
coral bleaching, brown bears, neuron signals, and succession. Gryazin’s contribution examines
teaching high performance computing at an American regional university and tackles challenges and
opportunities for curriculum development, focusing on the discussion of methods of optimization of
serial codes and APIs, such as OpenMP, MPI and CUDA. Eichholz explores specs based grading and
unit testing in an introductory scientific parallel computing course, presenting a unit-testing scheme
that allows instructors and students alike to assess the efficiency and basic design of student codes,
without the instructors’ obligation to personally read and test the students’ codes. Lamprecht et al
introduce a new approach to use scientific workflows in computational science education, describing
how a process modeling and execution framework for scientific workflow projects can be used in the
scope of a computer science course for Master students with a background in natural sciences. Reuter
et al summarize the particular pedagogical strategies for computational science education at Stony
Brook University, presenting training domain experts who are skilled at using high-performance
computational resources to generate, analyze, and interpret data to solve research problems. Cahill et
al share their experiences and insights earned during the Blue Waters Program, which was designed to
teach online graduate credit courses. Chozas et al describe their work with IBM Watson, a cognitive
system built by IBM for the education of novice parallel programmers, and explain how their use of
the IBM Watson’s dialogue service enabled them to develop a solution that assists programming
beginners in avoiding common OpenMP mistakes. Humphreys et al introduce their new curriculum,
which brings mathematical analysis, algorithm design, optimization, data science and mathematical
modeling into the forefront of interdisciplinary study in the pure and applied sciences. They elaborate
on the context of big data and high performance computing and new published textbook, while both
their lab manuals and supporting materials will be openly accessible online. Finally, Kostur analyzes
the web based mathematical experimentation environment of SageMath notebook (sagenb), which
provides faculty and students with a central installation and helps to prepare teaching materials for
most of courses; then discusses the introduction of the new Jupyter notebook version, which offers
SageMath kernel and pure scientific Python ecosystem for scientific computing.

3 Conclusions
The presentations discussed at WTCS 2017 illustrate the wide variety and scope of computational
science education around the world. The continually growing interest in this workshop attests to the
developing necessity of research in this important interdisciplinary area. For 2018 the organizers plan
to further increase the latitude of the workshop, by including instances on bridging the growing high
performance computing and data science talent gap.
Acknowledgments. We would like to acknowledge P.M.A. Sloot and V. Krzhizhanovskaya for their
continuous support and commitment to the success of this workshop.

