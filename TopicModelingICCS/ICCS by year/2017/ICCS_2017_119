Available online at www.sciencedirect.com

ScienceDirect

This space is reserved for the Procedia header, do not use it
This space
reserved
for the
header, do not use it
ProcediaisComputer
Science
108CProcedia
(2017) 596–605
This space is reserved for the Procedia header, do not use it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Fast Genome-Wide Third-order SNP Interaction Tests with
Fast Genome-Wide Third-order SNP Interaction Tests with
Information
Gain Third-order
on a Low-cost
Heterogeneous
Parallel
Fast
Genome-Wide
SNP
Interaction Tests
with
Information
Gain on a Low-cost
Heterogeneous
Parallel
FPGA-GPU
Architecture Parallel
Information
Gain on aComputing
Low-cost Heterogeneous
FPGA-GPU
Computing
Architecture
∗
∗
Lars Wienbrandt
, Jan Christian
Kässens, Matthias
Hübenthal, and
FPGA-GPU
Computing
Architecture
Lars Wienbrandt∗, Jan Christian Kässens∗, Matthias Hübenthal, and
David Ellinghaus
David Ellinghaus
Lars Wienbrandt∗, Jan Christian
Kässens∗, Matthias Hübenthal, and
Institute of Clinical Molecular Biology, University Medical Center Schleswig-Holstein, Campus Kiel,
David
Ellinghaus
Institute of Clinical Molecular Biology,
University
Medical
Center Schleswig-Holstein, Campus Kiel,
Kiel
University,
Germany
Kiel University, Germany
{l.wienbrandt,j.kaessens,m.huebenthal,d.ellinghaus}@ikmb.uni-kiel.de
Institute of{l.wienbrandt,j.kaessens,m.huebenthal,d.ellinghaus}@ikmb.uni-kiel.de
Clinical Molecular Biology, University Medical Center Schleswig-Holstein, Campus Kiel,
Kiel University, Germany
{l.wienbrandt,j.kaessens,m.huebenthal,d.ellinghaus}@ikmb.uni-kiel.de

Abstract
Abstract
Complex diseases may result from many genetic variants interacting with each other. For this
Complex
diseases mayinteraction
result fromstudies
many genetic
interacting
with each
other. pairwise
For this
reason,
genome-wide
(GWIS)variants
are currently
performed
to detect
Abstract
reason,
genome-wide
interaction
studies
(GWIS)
are
currently
performed
to
detect
pairwise
SNP
interactions.
While
the from
computations
required
here interacting
can be completed
within
reasonable
Complex
diseases may
result
many genetic
variants
with each
other.
For this
SNP
interactions.
While the computations
required here
can
be completed
within reasonable
time,
it
has
been
inconvenient
yet
to
detect
third-order
SNP
interactions
for
large-scale
reason, genome-wide interaction studies (GWIS) are currently performed to detect datasets
pairwise
time,
itthe
hascubic
been inconvenient
yet
detect third-order SNP interactions for large-scale datasets
due
complexity
thetoproblem.
SNPtointeractions.
While theofcomputations
required here can be completed within reasonable
dueIn
tothis
the paper
cubic complexity
of
the
problem.
we introduceyet
a feasible
method
for third-order
GWIS for
analysis
of genotyping
time, it has been inconvenient
to detect
third-order
SNP interactions
large-scale
datasets
Inon
this
paper
weheterogeneous
introduce a feasible
method
for third-order
GWIS
analysis of
genotyping
data
a
low-cost
computing
system
that
combines
a
Virtex-7
FPGA
and a
due to the cubic complexity of the problem.
data
on aGTX
low-cost
heterogeneous
computingbetween
system70
that
combines
a Virtex-7
FPGA
and a
GeForce
780
Ti
GPU,
with
speedups
and
90
against
a
CPU-only
approach
In this paper we introduce a feasible method for third-order GWIS analysis of genotyping
GeForce
GTX
780
Ti
GPU,
with
speedups
between
70
and
90
against
a
CPU-only
approach
and
speedup
of approx.
5 againstcomputing
a GPU-only
approach.
To estimate
effect sizes
of and
third-a
data aon
a low-cost
heterogeneous
system
that combines
a Virtex-7
FPGA
and
a interactions
speedup of approx.
5 against
a GPU-only
approach.
To estimate
effect
sizes
of thirdorder
we
employed
information
gain
(IG),
a
measure
that
has
been
applied
on a
GeForce GTX 780 Ti GPU, with speedups between 70 and 90 against a CPU-only approach
order
interactions
we
employed
information
gainin(IG),
a measureyet.
that has been applied on a
genome-wide
scale
only
for
pairwise
interactions
the
literature
and a speedup of approx. 5 against a GPU-only approach. To estimate effect sizes of thirdgenome-wide scale only for pairwise interactions in the literature yet.
order
we employed
information
gain (IG),information
a measure gain,
that mutual
has been
applied onena
Keywords:
GWIS, Published
epistasis,
SNP interactions,
information,
©
2017 interactions
The Authors.
bythree-way
Elsevier
B.V.
Keywords:
GWIS,
epistasis,
SNP
interactions,
information
gain,
mutual
information,
enPeer-review
under
responsibility
ofthree-way
the scientific
committee
ofinthethe
International
Conference
on Computational
Science
genome-wide
scale
only for
pairwise
interactions
literature
yet.
tropy,
information
theory,
hybrid
computing,
heterogeneous
architectures,
FPGA,
GPU
tropy, information theory, hybrid computing, heterogeneous architectures, FPGA, GPU
Keywords: GWIS, epistasis, three-way SNP interactions, information gain, mutual information, entropy, information theory, hybrid computing, heterogeneous architectures, FPGA, GPU

1 Introduction
1 Introduction
In the last ten years genetic research became dominated by genome-wide association stud1
Introduction
In
last ten
yearswere
genetic
research
by SNP-phenotype
genome-wide association
studies the
(GWAS).
GWAS
successful
in became
revealingdominated
hundreds of
associations
for
ies
(GWAS).
GWAS
in revealing
hundreds
of SNP-phenotype
associations
for
complex
disease
traitswere
[18].successful
High-throughput
genotyping
methods
allow reliable
genotyping
of
In the last
ten years
genetic
research became
dominated
by genome-wide
association
studcomplex
disease
traits
[18].
High-throughput
genotyping
methods
allow
reliable
genotyping
of
millions
of
single-nucleotide
polymorphisms
(SNPs)
for
statistical
association
testing
with
ies (GWAS). GWAS were successful in revealing hundreds of SNP-phenotype associations fora
millions
of
single-nucleotide
polymorphisms
(SNPs)
for
statistical
association
testing
with
a
disease
thousands
individuals.
In 2007, agenotyping
first flagship
GWASallow
has been
published
by the
complexindisease
traitsof[18].
High-throughput
methods
reliable
genotyping
of
disease
in
thousands
of
individuals.
In
2007,
a
first
flagship
GWAS
has
been
published
by
the
Wellcome
Case Control polymorphisms
Consortium comprising
3,000 healthy
controls
and with
14,000a
millions ofTrust
single-nucleotide
(SNPs) approx.
for statistical
association
testing
Wellcome
Trust
Case Control
Consortium
comprising
approx.
3,000 500,000
healthy SNP
controls
and 14,000
cases
evenly
distributed
over
seven
diseases
genotyped
for
approx.
markers
[22].
disease in thousands of individuals. In 2007, a first flagship GWAS has been published by
the
cases
evenly distributed over seven diseases genotyped for approx. 500,000 SNP markers [22].
∗
Wellcome
Trust authors,
Case Control
corresponding
shared Consortium
first authorshipcomprising approx. 3,000 healthy controls and 14,000
∗ corresponding authors, shared first authorship
cases
evenly distributed over seven diseases genotyped for approx. 500,000 SNP markers [22].
∗ corresponding

authors, shared first authorship

1877-0509 © 2017 The Authors. Published by Elsevier B.V.
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.210

1
1
1

	

LarsInteraction
Wienbrandt Tests
et al. /Using
Procedia
Computer Science
596–605 Kässens et al.
Genome-Wide Third-order SNP
Information
Gain 108C (2017)
Wienbrandt,

Recent findings reveal that besides simple SNP-phenotype associations, the interaction of
genetic markers may also play a significant role in the etiology of complex diseases [6], introducing the research field of genome-wide interaction studies (GWIS). However, an exhaustive
computation of interactions on genome-wide datasets is computationally demanding, as for
their detection a test statistic has to be calculated for each possible SNP combination. Still,
several methods that exhaustively search for pairwise interactions exist, including BOOST [24]
and MB-MDR [2, 23]. Since the absolute runtime is at the edge of reasonableness many tools
harness accelerator architectures such as GPUs (e.g. GBOOST [26] or GWIS [8]) or perform a
heuristic search by eliminating unlikely SNPs in advance (e.g. by clustering approaches [17] or
machine learning techniques [25]).
Currently, genetic research is breaking new grounds by exploring the domain of thirdorder interactions. Due to cubic problem complexity the runtime dramatically increases for
genome-wide third-order interaction tests, making standard analyses impractical. Nevertheless, third-order interactions have been proven to play a significant role in the development of
complex diseases, e.g. for tuberculosis [3], and hundreds of further available GWAS datasets
await exploration of higher-order interactions. Besides heuristic approaches [9, 17], exhaustive
methods testing all possible SNP triples have been proposed (e.g. CPM [19], RPM [4] and
MB-MDR [2, 23]) but are inconvenient for larger datasets. Accelerator architectures combined
with basic information theoretic measurements such as mutual information on GPUs [7] or
FPGAs [14] introduce reasonable runtimes with the disadvantage of a less powerful statistic.
In this paper, we introduce a novel approach for accelerating and improving exhaustive
third-order interaction detection on a genome-wide scale, firstly, by utilizing a heterogeneous
architecture composed of a GPU and an FPGA accelerator included in a desktop PC, and
secondly, by implementing the more powerful information gain measurement. Heterogeneous
platforms using GPU and FPGA technology have recently been positively evaluated in cryptanalysis [15], astrophysics [16], and image processing [21]. We have also presented a similar
platform in [13], but for pairwise interaction detection and with different problem partitioning
especially regarding result filtering. Here, we demonstrate that our FPGA-GPU hybrid system
for third-order interaction detection outperforms the GPU-only approach GPU3SNP [7] by a
speedup factor of 5, and a CPU-only approach by a factor of 90. Furthermore, by using only
low-cost off-the-shelf components, we achieve a superior performance-to-cost ratio.

2
2.1

Third-order SNP Interaction Measurement
Contingency Tables

In order to perform an entropy-based statistical test on a 3-tuple of genetic markers, the main
task is the creation of so-called contingency tables. We focus on typical GWAS datasets that
consist of two groups of samples, namely cases (affected by the disease of interest) and controls (unaffected by the disease of interest). Both groups are genotyped at a set of marker
positions that usually carry known SNPs or other genetic variants. Here we consider biallelic
markers, which is a common use case, i.e. a genotype may appear as homozygous wild (w),
heterozygous (h) or homozygous variant (v) type.
For each 3-tuple of genotyped genetic markers in the collected dataset (further simply referred to as SNP triple) a contingency table is created for each disease group, i.e. one for cases
(l = 1) and one for controls (l = 0). Each table contains the number of samples that share
a common property of genotypes at the marker positions. Thus, a contingency table contains
3 × 3 × 3 = 27 counters, one for each possible combination of genotypes (see Fig. 1).
2

597

LarsInteraction
Wienbrandt Tests
et al. /Using
Procedia
Computer Science
596–605 Kässens et al.
Genome-Wide Third-order SNP
Information
Gain 108C (2017)
Wienbrandt,

w

n0001

n0101

n0201

h
v
w

n0011
n0021
n1001

n0111
n0121
n1101

n0211
n0221
n1201

h

n1011

n1111

n1211

v
w
h

n1021
n2001
n2011

n1121
n2101
n2111

n1221
n2201
n2211

v

n2021

n2121

n2221

controls
(l = 0)
w

SNP C

v

h

SNP C

SNP A
h

v

SNP C

v

w

SNP B

SNP C

h

SNP C

w

SNP C

cases
(l = 1)

SNP B

598	

w

SNP A
h

v

w

n0000

n0100

n0200

h
v
w

n0010
n0020
n1000

n0110
n0120
n1100

n0210
n0220
n1200

h

n1010

n1110

n1210

v
w
h

n1020
n2000
n2010

n1120
n2100
n2110

n1220
n2200
n2210

v

n2020

n2120

n2220

Figure 1: Contingency tables for cases and controls. nijkl reflect the number of occurrences for
the corresponding genotype combination in a given 3-tuple of SNPs. The shaded fields represent
the numbers which are not counted in the FPGA implementation but are later reconstructed
on the GPU.
Since we are addressing an exhaustive analysis of all 3-combinations of SNPs, the algorithm
complexity
is cubic in the number of SNPs. For a dataset consisting of m SNPs a total of
 m
m(m−1)(m−2)
=
contingency tables have to be created and analyzed. Furthermore, each
6
3
sample must be taken into account for determining the counters in the table, which makes the
algorithm linear in the number of samples. See Sect. 3 for details on the implementation.

2.2

Information Gain

Entropy based measurements for SNP interactions have been broadly accepted in the literature [5]. However, due to the computational challenge, statistical tests defined for combinations
of more than two SNPs are rare. A simple test, which has already been applied in a GPU-only
solution for third-order SNP interaction analysis [7], employs the mutual information (MI). For
a set of three SNPs this measure can the computed as
I(X1 , X2 , X3 ; Y ) = H(X1 , X2 , X3 ) + H(Y ) − H(X1 , X2 , X3 , Y )

(1)

with marginal entropies H(X1 , X2 , X3 ) and H(Y ) of the genotype and disease state distributions, respectively, as well as their joint entropy H(X1 , X2 , X3 , Y ).
Thereby, the following defines the entropy of a discrete random variable Y with possible
values {yi }, which can also be written in terms of observed frequencies ni of events in a number
of n tests.


H(Y ) = −

i

p(yi ) log p(yi ) = −

i

ni
ni
log
n
n

(2)

The advantage of the MI test is clearly its simple computability. However, a major disadvantage of the MI measurement is that it does not distinguish between the desired third-order effect
on the disease state caused by the SNP triple alone and effects of lower order. By combining
all effect groups, results get affected by all SNPs and SNP pairs with strong main effects.
A measure compensating this disadvantage is referred to as information gain. It was defined for higher-order interactions by Jakulin et al. [11, 12] and has been implemented in a
variety of derivations by several authors (e.g. [10]) mainly for second-order interactions, but to
our knowledge never been applied to large scale GWAS for third-order interactions. The IG
measure removes second-order and main effects from the SNP triple and reveals only the effect
the combination of the three SNPs has on the disease state. Our implementation calculates
3

	

Lars Wienbrandt et al. / Procedia Computer Science 108C (2017) 596–605
Genome-Wide Third-order SNP Interaction Tests Using Information Gain
Wienbrandt, Kässens et al.

information gain (IG) according to Jakulin et al. as:
IG(X1 ; X2 ; X3 ; Y ) = I(X1 , X2 , X3 ; Y ) − I(X1 , X2 ; Y ) − I(X1 , X3 ; Y ) − I(X2 , X3 ; Y )
+ I(X1 ; Y ) + I(X2 ; Y ) + I(X3 ; Y )

(3)

With the mutual information expressed in entropy terms, this definition evaluates to:
IG(X1 ; X2 ; X3 ; Y ) = −H(X1 , X2 , X3 , Y )

+ H(X1 , X2 , X3 ) + H(X1 , X2 , Y ) + H(X1 , X3 , Y ) + H(X2 , X3 , Y )

− H(X1 , X2 ) − H(X1 , X3 ) − H(X2 , X3 )
− H(X1 , Y ) − H(X2 , Y ) − H(X3 , Y )
+ H(X1 ) + H(X2 ) + H(X3 ) + H(Y )

2.3

(4)

Result Filtering with Min-Max Heap

We implemented a fixed-sized min-max fine heap [1] to collect a user-definable number k of best
results, i.e. the k largest results with respect to the IG value. The min-max heap data structure
represents a compact binary tree with direct constant access (i.e. O(1)) to the minimum and
maximum value within the data. Thus, during an application run, the decision if an element
has to be inserted into the list of best results can be made in constant time, and in that case,
due to the binary tree structure, insertion and deletion can be done in logarithmic runtime.

3
3.1

Implementation
Hybrid FPGA-GPU Computing Architecture

Our implementation targets a hybrid FPGA-GPU computing architecture consisting of lowcost off-the-shelf components. The system is composed of a standard desktop computer as host
system enhanced with an FPGA and a GPU accelerator, with a to-date total system cost of
less than e3,000. In detail, the host is equipped with 32 GB DDR3-RAM and an Intel Core
i7-4790K quad-core processor at 4 GHz. The CPU features 16 PCI Express lanes at Gen 3 for
a high-speed communication between FPGA and GPU modules. The system runs a Linux OS
with Kernel version 4.4.
The connected FPGA module is an Alpha Data ADM-PCIE-7V3 board featuring a Xilinx Virtex-7 690T FPGA with two attached 8 GB SODIMM memory modules. The board is
connected via a Gen 2 PCI Express host interface with 8 lanes. Alpha Data provides a core
interface for an easy development of DMA streaming channels for fast transmissions. In our
application we measured a peak net bandwidth of 3.4 GB/s between FPGA and host.
The GPU module is a standard Nvidia GeForce 780 Ti graphics card. It is based on the
Kepler architecture and features 2880 CUDA cores in total operating at 875 MHz. The 3 GB
of GDDR5 graphics memory allow a maximum bandwidth of 336 GB/s.

3.2

Task Distribution

Our SNP interaction test application consists of mainly three subtasks which are distributed
over the host computer as well as FPGA and GPU modules. Firstly, the task of creating thirdorder contingency tables from the input data is performed by the FPGA module. Secondly, the
calculation of the information gain for each pair of tables is done on the GPU. Then, the host
processes and filters the results created by the GPU.
4

599

600	

Lars Wienbrandt et al. / Procedia Computer Science 108C (2017) 596–605
Genome-Wide Third-order SNP Interaction Tests Using Information Gain
Wienbrandt, Kässens et al.

Genotype Stream

SNP B
Buﬀer

SNP A
Buﬀer

SNP B
Buﬀer

Contingency Table
Counter File

Contingency Table
Counter File

Contingency Table
Counter File

Table Transport

Table Transport

Table Transport

PE0

PE1

PEn

ID Counter

SNP A
Buﬀer

Control Table Buﬀer

SNP B
Buﬀer

transfer
to GPU

Genotype Stream
Case Table Buﬀer

SNP Reader

SNP A
Buﬀer

Genotype Stream

to next chain

Figure 2: Pipeline for contingency table creation on the FPGA including table transport bus,
transmission buffers and ID counting unit.
Data transmission between the modules is done via DMA transfers over PCI Express. Unfortunately, no direct connection between the FPGA and the GPU module is available. For this
reason, the transmission of the contingency tables is redirected via the host memory. Thus, the
host also manages all data transfers within the system.
As a matter of course, the host also performs file management, including reading raw genotype data (which can be a PLINK [20] .tped and .tfam file pair) and providing it to the
FPGA as well as writing the resulting k best SNP triples including their IG value to a file.
Alternatively, results can be filtered by threshold.
3.2.1

Packed contingency table creation on the FPGA

In [14] we have already described the creation of third-order contingency tables including the
mutual information (MI) measurement on an FPGA-only architecture. However, since we are
addressing a hybrid FPGA-GPU system now for calculating the information gain (IG) of SNP
triples, challenges arose that had to be handled by several modifications to our previously
proposed pipeline. Basically, we kept the pipeline and process element (PE) structure of our
previous design. The PEs are organized in several chains such that each PE is able to receive a
stream of genotype data from a previous PE and to send it to the next PE. Each PE includes
two memory buffers to store the genotypes of two SNP positions and a counter file for the
contingency table entries (see Fig. 2). The buffers are subsequently filled with the first incoming
SNP data. Afterwards, the stored data is used together with the streamed data to form a SNP
triple of which the genotype information is counted in the contingency table. According to the
filling status of its buffers, each PE decides whether to forward the SNP data to the next PE
in the chain or not. The schedule of how all possible SNP triples are evaluated is illustrated for
an example with a pipeline depth of four PEs and a dataset comprising eight SNPs in Fig. 3.
By streaming eight genotypes at once for each SNP of the triple, i.e. the corresponding
counters of eight genotype combinations are incremented at the same time, we could achieve a
high throughput of SNP data resulting in a quick processing in each PE. Streaming is organized
by sending the genotypes of the case samples at the current SNP position first, followed by the
genotypes of the control samples. Thus, the contingency tables for cases and controls are
alternately generated using the same logic resources in the PE. We adapted our PEs to support
a maximum of 65,536 samples, implying 16 bit counters for the entries of the contingency table
and block RAM (BRAM) resources for the two memory buffers of size 128 kbit each.
A significant change to our previously presented pipeline regards the organization of the
bus system that fetches the contingency tables from the PEs in the chain in order to provide
5

Genome-Wide Third-order SNP
Information
Gain 108C (2017)
Wienbrandt,
LarsInteraction
Wienbrandt Tests
et al. /Using
Procedia
Computer Science
596–605 Kässens et al.

PE1

PE2

PE3

0 0 0 0 0 0
1 1 1 1 1 1
2 3 4 5 6 7

0 0 0 0 0
2 2 2 2 2
3 4 5 6 7

0 0 0 0
3 3 3 3
4 5 6 7

0 0 0
4 4 4
5 6 7

0 0
5 5
6 7

A
B
C

1 1 1 1 1
2 2 2 2 2
3 4 5 6 7

1 1 1 1
3 3 3 3
4 5 6 7

1 1 1
4 4 4
5 6 7

1 1
5 5
6 7

1
6
7

A
B
C

2 2 2 2
3 3 3 3
4 5 6 7

2 2 2
4 4 4
5 6 7

2 2
5 5
6 7

2
6
7

A
B
C

3 3 3
4 4 4
5 6 7

3 3
5 5
6 7

3
6
7

SNPs

A
B
C

SNPs

PE0

0 1 2 3 4 5 6 7 2 3 4 5 6 7 3 4 5 6 7 4 5 6 7 5 6 7 6 7 4 5 6 7 6 7

SNPs

Reader

SNPs

	

0
6
7

4 4
5 5
6 7
5
6
7

4
6
7

SNP stream
time

processed
SNP triples

Figure 3: Schedule for processing SNP triples on an example for a pipeline of 4 PEs and a
dataset consisting of 8 SNPs. The dotted line denotes the time when the second SNP buffer is
reset, and the dashed line denotes the time when both buffers are reset.
them to the PCIe core for transmission to the GPU. The bus connects all PEs in a chain and
transfers a datum from one PE to the next in one clock cycle. We decided to send a complete
table as datum per clock cycle on the bus since the PCIe core is able to accept 256 bit of data
per cycle.
In order to reduce the data rate, we omitted seven selected counters out of the total of
27 per table since they can easily be reconstructed by the GPU only with the knowledge of
the total sums of each type of genotype for each SNP in the corresponding triple (details on
the reconstruction process are described in the following subsection 3.2.2). Thus, the size of a
table is 20 × 16 bit = 320 bit. Two FIFOs at the end of the bus collect the tables for cases and
controls respectively, such that they can be transferred together as a pair for each SNP triple.
We spend another 64 bit for an ID for each triple, composed of three SNP IDs of 21 bit each
and one padding bit. Due to the known fixed schedule, the ID counting is done directly before
the table transmission. The resulting stream of 704 bit data words (table pair plus ID) is then
decomposed into 256 bit data words for the PCIe core by a data width changer IP provided by
Xilinx.
The BRAM resources on our Virtex-7 FPGA as limiting factor allowed us to implement 150
PEs distributed over two chains.
3.2.2

Counter reconstruction and information gain measurement on the GPU

The table buffers reveived by the GPU are written into GPU memory. Since we were not
expecting any warp divergence, we used a simple form of scheduling the threads. We set the
block size to the maximum supported block size by the device (which is 1,024 in our case) and
the grid size to the number of tables per buffer divided by the block size, since each thread
computes the test value for a single contingency table pair. This way, only one kernel call per
buffer is required. The table buffer is composed of 704 bit blocks (see above), and the default
communication buffer size is 256 MB.
One transferred table contains only 20 of the total 27 counters of the original table, i.e. the
seven counters n000l , n100l , n110l , n111l , n211l , n221l , and n222l are omitted (see Fig. 1 again).
In contrast to the method presented in [14], the counter reconstruction has moved to the GPU.
Each thread has access to an array of precomputed occurrences of the three available genotypes
6

601

602	

Genome-Wide Third-order SNP
Information
Gain 108C (2017)
Wienbrandt,
LarsInteraction
Wienbrandt Tests
et al. /Using
Procedia
Computer Science
596–605 Kässens et al.

for each SNP position. These values are directly determined while reading the SNP database at
first hand. Clearly, the following condition holds (n0··l representing the number of homozygous
wild genotypes in SNP A of the triple, others respectively):
n0··l =



n0jkl

(5)

jk

Correspondingly, the omitted values are reconstructed on the GPU for each contingency table
according to following equations (only the first two are shown as an example):
n000l = n0··l − (n001l + n002l + n010l + n011l + n012l + n020l + n021l + n022l )

n100l = n·0·l − (n000l + n001l + n002l + n101l + n102l + n200l + n201l + n202l )

(6)
(7)

Subsequently, we used the table entries to calculate a value IG∗ which is linear to the
information gain IG defined in Eq. 4. With the observation that H(Y ) is constant throughout
all SNP triples, IG∗ is particularly defined as:
IG∗ (X1 ; X2 ; X3 ; Y ) = n (IG(X1 ; X2 ; X3 ; Y ) − H(Y ))

(8)

= −H ∗ (X1 , X2 , X3 , Y )

+ H ∗ (X1 , X2 , X3 ) + H ∗ (X1 , X2 , Y ) + H ∗ (X1 , X3 , Y ) + H ∗ (X2 , X3 , Y )

− H ∗ (X1 , X2 ) − H ∗ (X1 , X3 ) − H ∗ (X2 , X3 )

− H ∗ (X1 , Y ) − H ∗ (X2 , Y ) − H ∗ (X3 , Y )
+ H ∗ (X1 ) + H ∗ (X2 ) + H ∗ (X3 )

∗

(9)

Here, H (X) for any random variable X is defined as:
∗

H (X) = −


i




ni
ni log
ni log ni + n log n
=−
n
i

(10)

Note that the term (n log n) is cancelled out in all summands in Eq. 9. The computation is
done in single precision and the IG∗ values are collected including the ID in result buffers which
are sent back to the host.
3.2.3

Transmission buffer management and result collection on the host

On the one hand, the host is responsible for the data transmission between FPGA and GPU
modules. We have implemented two DMA channels from the FPGA to the host. In order to
ensure a fast transmission without delay, the host provides a number of page-locked memory
buffers each of size 256 MB for the transmission. Two threads (one for each FPGA DMA
channel) keep track of the buffers provided to the FPGA. When the FPGA has filled them
completely, the buffer descriptors are handed over to a concurrent multiple-producer singleconsumer (MPSC) queue. A third thread pushes the descriptors of available buffers from the
queue to the GPU that reads and processes the data afterwards. Empty buffers are then handed
back to a list of buffer descriptors for available buffers.
On the other hand, the results produced by the GPU are transferred via DMA again into a
page-locked memory buffer. The host keeps an adaptive number of threads running for filtering
the results by using the min-max heap data structure as described in Sect. 2.3. To avoid lock
contention on central data structures, each thread keeps its own min-max heap during the
application run where it stores its k best SNP triples according to the GPU-calculated IG∗
value. At the end of the process, all heaps are merged. The IG values are calculated from the
final IG∗ values by inverting Eq. 8, and are then written in a human-readable format (i.e. SNP
names according to the .tped input file instead of IDs) to a result file.
7

	

Genome-Wide Third-order SNP
Information
Gain 108C (2017)
Wienbrandt,
LarsInteraction
Wienbrandt Tests
et al. /Using
Procedia
Computer Science
596–605 Kässens et al.

4

Peformance Evaluation

For performance evaluation we used the system described in Sect. 3.1 (Intel Core i7-4790K
quad-core @ 4 GHz, 32 GB RAM, Nvidia GeForce GTX 780 Ti GPU, Alpha Data ADM-PCIE7V3 with Xilinx Virtex-7 690T FPGA, and Linux OS with Kernel 4.4). For the host and GPU
part, we used the CUDA compiler 7.5 and GCC 4.9. The FPGA design was developed with
Xilinx Vivado 2016.3 using the VHDL language.
We compared the performance of our hybrid FPGA-GPU implementation to a multi-threaded
CPU-only implementation using eight pthreads and to GPU3SNP [7] on the same system. We
analyzed two groups of real-world datasets, the first one with 5,009 samples (2,005 Morbus
Crohn cases and 3,004 controls) and 2,000, 5,000 and 10,000 SNPs, respectively. The second
group consists of four datasets with 40,122 samples (6,464 cases with an inflammatory autoimmune disease and 33,658 controls). The quality controlled SNPs were filtered by linkage
disequilibrium (LD). The first dataset consists of 5,732 SNPs from chromosomes 5 and 6, and
the second consists of 6,501 SNPs from chromosomes 1 and 6, both filtered with an LD value
of 0.2. The last two datasets comprise 24,657 SNPs and 37,343 SNPs throughout the whole
genome resulting from filtering with an LD value of 0.05 and 0.2, respectively.
In the hybrid and CPU-only version we recorded the 10,000 best results for each dataset.
Unfortunately, this was not possible for GPU3SNP, for which we stored only the 50 best results
using the “-no 50” switch. Furthermore, we used the “-ig” switch for the information gain
calculation. No other parameters were changed from their defaults.
Table 1 shows the runtimes (wall-clock times measured with the GNU time command) of
our hybrid solution, GPU3SNP and the host-only implementation with 8 threads including
speedup. For the CPU-only implementation with 8 threads, the “-v” switch on the GNU time
command revealed an around 798% to 799% CPU usage by the application run, meaning the
CPU time was optimally scheduled for the task and not interrupted by IO or other processes.
The performance measures demonstrate that our hybrid solution reaches a solid speedup of
approx. 5 when compared to the GPU-only implementation of GPU3SNP. However, GPU3SNP
implements an alternative definition of Information Gain and therefore generates incomparable
results. Additionally, the different metric included SNPs with strong main effects that might
shadow effects from true 3-combinations, esp. when using such a low number of stored results.
Due to program limitations, GPU3SNP is furthermore not able to process the second group of
datasets because of the higher number of samples involved.
When compared to the multi-threaded CPU implementation, we reached a superior speedup
of more than 70 for the first group of datasets and even around 90 for the second group. We
assume that this significant change in speedup is due to the change of datarate between FPGA
and GPU. The number of contingency tables generated per second is linear to the number of
samples. Thus, for the first dataset we reached the bandwidth limit of the PCIe core, but not
for the second one, and the bottleneck in the communication channel has been released.

5

Conclusion

In this paper we demonstrated that it is possible to perform an exhaustive analysis of statistical
third-order SNP interactions using information gain (IG) on genome-wide datasets in reasonable
time. We showed that the combination of two different accelerators greatly benefits from the
appropriate distribution of the main task into subtasks adapted for the specific architectures.
Our FPGA-GPU hybrid solution reveals a speedup of approx. 5 when compared to a GPUonly solution and a speedup of approx. 90 when compared to the multi-threaded CPU-only
8

603

604	

Genome-Wide Third-order SNP
Information
Gain 108C (2017)
Wienbrandt,
LarsInteraction
Wienbrandt Tests
et al. /Using
Procedia
Computer Science
596–605 Kässens et al.

Table 1: Wall-clock runtimes of the hybrid FPGA-GPU third-order SNP interaction detection
using information gain measurement compared to GPU3SNP [7] and the CPU-only implementation using 8 threads. Results marked with an asterisk (*) are extrapolated.
Dataset
Runtime
Speedup hybrid vs.
hybrid
GPU3SNP
host-only
GPU3SNP host-only
#SNPs #samples
2,000
5,009
53 s
4 m 21 s
1 h 02 m 28 s
4.92
70.72
13 m 36 s 1 h 07m 28 s
16 h 14 m 23 s
4.96
71.65
5,000
5,009
1 h 48 m 31 s 8 h 52 m 54 s
5 d 09 h 55 m
4.91
71.83
10,000
5,009
5,732
40,122
1 h 50 m 35 s
n/a
6 d 22 h 51 m
n/a
90.53
2 h 43 m 59 s
n/a
10 d 03 h 36 m
n/a
89.13
6,501
40,122
6 d 04 h 09 m
n/a
*1 y 188 d 19 h
n/a
89.71
24,657
40,122
n/a
*5 y 98 d 18 h
n/a
89.71
37,343
40,122 *21 d 10 h 39 m

approach, introducing feasibility for datasets of recent large-scale GWAS. We conclude that
a single low-cost system can solve tasks where otherwise a complete HPC cluster would be
required for.
In [14] we already showed the advantages of an FPGA-only solution, but only for simple
measures such as mutual information (MI). Nevertheless, more complex measures, such as
information gain, are hard to implement on an FPGA due to the extensive resource requirements
for the larger computational pipeline. We successfully demonstrated that outsourcing of the
complex computational problem to a GPU is advantageous given the conventional high-speed
communication infrastructure over PCIe.
Our implementation has been verified for arithmetical correctness and is currently evaluated for its practical applicability. First result analyses indicate a strong improvement of the
information gain method over mutual information (MI) as expected. With MI, we observed one
or two SNPs in all datasets filling the complete best-results list due to their strong main effect.
With IG, this issue was not observed anymore.
Future work includes switching to a new system composed of next-generation accelerator
architectures, such as Xilinx UltraScale series FPGAs and Nvidia’s Tesla P100 GPUs.

References
[1] M. D. Atkinson, J.-R. Sack, N. Santori, and T.Strothotte. Min-max heaps and generalized priority
queues. Communications of the ACM, 29(10):996–1000, October 1986.
[2] Tom Cattaert, Malu L. Calle, Scott M. Dudek, et al. Model-Based Multifactor Dimensionality
Reduction for detecting epistasis in case-control data in the presence of noise. Ann. Hum. Genet.,
75(1):78–89, 2011.
[3] Ryan Collins, Ting Hu, Christian Wejse, et al. Multifactor dimensionality reduction reveals a
three-locus epistatic interaction associated with susceptibility to pulmonary tuberculosis. BioData
Mining, 6(1):4, 2013.
[4] R. Culverhouse. The use of the restricted partition method with case-control data. Hum. Hered.,
63(2):93–100, 2007.
[5] Paola G. Ferrario and Inke R. König. Transferring entropy to the realm of GxG interactions.
Briefings in Bioinformatics, pages 1–12, October 2016.
[6] Genetic Analysis of Psoriasis Consortium and the Wellcome Trust Case Control Consortium 2.
A genome-wide association study identifies new psoriasis susceptibility loci and an interaction
between HLA-C and ERAP1. Nature Genetics, 42:985–990, October 2010.

9

	

Genome-Wide Third-order SNP
Interaction
Information
Gain 108C (2017)
Wienbrandt,
Lars
WienbrandtTests
et al. /Using
Procedia
Computer Science
596–605 Kässens et al.

[7] Jorge González-Domı́nguez and Bertil Schmidt. GPU-accelerated exhaustive search for third-order
epistatic interactions in case-control studies. Journal of Computational Science, 8:93–100, 2015.
[8] Benjamin Goudey, David Rawlinson, Qiao Wang, et al. GWIS: Model-free, Fast and Exhaustive
Search for Epistatic Interactions in Case-Control GWAS. Lorne Genome 2013, February 2013.
[9] Xuan Guo, Yu Meng, Ning Yu, et al. Cloud computing for detecting high-order genome-wide
epistatic interaction via dynamic clustering. BMC Bioinf., 15(1):102, 2014.
[10] Ting Hu, Yuanzhu Chen, Jeff W. Kiralis, et al. An information-gain approach to detecting threeway epistatic interactions in genetic association studies. J Am Med Inform Assoc, 20(4):630–636,
February 2013.
[11] Aleks Jakulin and Ivan Bratko. Analyzing attribute dependencies. Knowledge Discovery in
Databases: PKDD 2003, pages 229–240, 2003.
[12] Aleks Jakulin and Ivan Bratko. Quantifying and Visualizing Attribute Interactions: An Approach
Based on Entropy, 2004.
[13] Jan Christian Kässens, Lars Wienbrandt, et al. Combining GPU and FPGA technology for
efficient exhaustive interaction analysis in GWAS. In 2016 IEEE 27th International Conference
on Application-specific Systems, Architectures and Processors (ASAP), pages 170–175, July 2016.
[14] Jan Christian Kässens, Lars Wienbrandt, Jorge González-Domı́nguez, Bertil Schmidt, and Manfred Schimmler. High-Speed Exhaustive 3-locus Interaction Epistasis Analysis on FPGAs. Journal
of Computational Science, 9:131–136, 2015.
[15] Wolfgang Kastl and Thomas Loimayr. A Parallel Computing System with Specialized Coprocessors
for Cryptanalytic Algorithms. In Sicherheit 2010, pages 73–84, 2010.
[16] J. Kocz, L. J. Greenhill, B. R. Barsdell, G. Bernardi, A. Jameson, M. A. Clark, J. Craig, D. Price,
G. B. Taylor, F. Schinzel, and D. Werthimer. A scalable hybrid FPGA/GPU FX correlator.
Journal of Astronomical Instrumentation, 3(1):1450002, 2014.
[17] Sangseob Leem, Hyun-hwan Jeong, Jungseob Lee, Kyubum Wee, and Kyung-Ah Sohn. Fast
detection of high-order epistatic interactions in genome-wide association studies using information
theoretic measure. Computational Biology and Chemistry, 50:19–28, 2014.
[18] Jacqueline MacArthur, Emily Bowler, Maria Cerezo, et al. The new NHGRI-EBI Catalog of
published genome-wide association studies (GWAS Catalog). Nucleic Acids Research, 45:D896–
D901, January 2017.
[19] M. R. Nelson, S. L. Kardia, R. E. Ferrell, et al. A combinatorial partitioning method to identify
multilocus genotypic partitions that predict quantitative trait variation. Genome Res., 11(3):458–
470, Mar 2001.
[20] Shaun Purcell, Benjamin Neale, Kathe Todd-Brown, et al. PLINK: A Tool Set for Whole-Genome
Association and Population-Based Linkage Analyses. American Journal of Human Genetics,
81:559–575, September 2007.
[21] B. Silva, A. Braeken, E. D’Hollander, A. Touhafi, J.G. Cornelis, and J. Lemeire. Comparing and
combining GPU and FPGA accelerators in an image processing context. In FPL, pages 1–4, 2013.
[22] The Wellcome Trust Case Control Consortium. Genome-wide association study of 14,000 cases of
seven common diseases and 3,000 shared controls. Nature, 447(7145):661–78, June 2007.
[23] François van Lishout, John Jestinah M. Mahachie, Elena S. Gusareva, et al. An efficient algorithm
to perform multiple testing in epistasis screening. BMC Bioinf., 14(1):138, 2013.
[24] Xiang Wan, Can Yang, Qiang Yang, et al. BOOST: A Fast Approach to Detecting Gene-Gene
Interactions in Genome-wide Case-Control Studies. Am. J. Hum. Genet., 87(3):325–340, 2010.
[25] Xiang Wan, Can Yang, Qiang Yang, et al. Predictive rule inference for epistatic interaction
detection in genome-wide association studies. Bioinformatics, 26(1):30–37, 2010.
[26] Ling Sing Yung, Can Yang, Xiang Wan, et al. GBOOST: a GPU-based tool for detecting gene-gene
interactions in genome-wide case control studies. Bioinformatics, 27(9):1309–1310, 2011.

10

605

