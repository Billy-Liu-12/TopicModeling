Available online at www.sciencedirect.com

ScienceDirect
This
This
This
This

space
reserved
for the
header,
ProcediaisComputer
Science
108CProcedia
(2017) 1103–1112
space is reserved for the Procedia header,
space is reserved for the Procedia header,
space is reserved for the Procedia header,

do
do
do
do

not
not
not
not

use
use
use
use

it
it
it
it

International Conference on Computational Science, ICCS 2017, 12-14 June 2017,
Zurich, Switzerland

Towards Protected MPSoC Communication for
Towards Protected MPSoC Communication for
Information
Protection
against
a Malicious NoC
Towards Protected
MPSoC
Communication
for
Information
Protection
against
a Malicious NoC
Towards
Protected
MPSoC
Communication
for
Information 1Protection against
a Malicious
NoC
2
3
Johanna
Sepúlveda Protection
, Andreas Zankl
, Daniel a
Flórez
, and Georg
Sigl12
Information
against
Malicious
NoC
Johanna Sepúlveda1 , Andreas Zankl2 , Daniel Flórez3 , and Georg Sigl12

1
1
1
1

1
3
Johanna
, AndreasTechnology,
Zankl2 , Daniel
Flórez
, and
Georg Germany
Sigl12
Institute forSepúlveda
Security in Information
Technical
University
of Munich,
1
2
3
Institute forSepúlveda
Security injohanna.sepulveda@tum.de,
Information
Technical
University
of Munich,
Johanna
, AndreasTechnology,
Zankl , Daniel
Flórez
, and
Georg Germany
Sigl12
sigl@tum.de
2
sigl@tum.de
Institute
for Security
injohanna.sepulveda@tum.de,
Information
Technology,
Technical
University
of Munich,
Germany
Fraunhofer
Institute
for Applied
and Integrated
Security,
Garching,
Germany
2
sigl@tum.de
Fraunhofer
Institute
for Applied
and Integrated
Security,
Garching,
Germany
andreas.zankl@aisec.fraunhofer.de
Institute
for Security
injohanna.sepulveda@tum.de,
Information
Technology,
Technical
University
of Munich,
Germany
3
2
andreas.zankl@aisec.fraunhofer.de
University
LosIntegrated
Andes, sigl@tum.de
Colombia
Fraunhofer Institute
for
Appliedof
and
Security, Garching, Germany
johanna.sepulveda@tum.de,
3
2
University
LosIntegrated
Andes, Colombia
dm.sepulveda2246@uniandes.edu.co
andreas.zankl@aisec.fraunhofer.de
Fraunhofer Institute
for
Appliedof
and
Security, Garching, Germany
3
dm.sepulveda2246@uniandes.edu.co
University of Los Andes, Colombia
andreas.zankl@aisec.fraunhofer.de
3
dm.sepulveda2246@uniandes.edu.co
University of Los Andes, Colombia
dm.sepulveda2246@uniandes.edu.co

Abstract
Abstract
Multiprocessor System-on-Chip (MPSoC) design is based on the integration of several thirdAbstract
Multiprocessor
System-on-Chip
(MPSoC)
design
is based
on the
integration
several
thirdparty
Intellectual
Property (IP) cores.
Some
of those
IPs may
include
Trojans,ofextra
hardware
Multiprocessor
System-on-Chip
(MPSoC)
design
is based
on the
integration
ofextra
several
thirdparty
Intellectual
Property
(IP)
cores.
Some
of
IPs
may
include
Trojans,
hardware
Abstract
that
can
be triggered
during
operation
time
in those
order
to perform
an
attack.
Network-on-Chip
party
Intellectual
Property
(IP)
Some
of
those
IPs
may
include
Trojans,
hardware
that
can
becommunication
triggered
during
operation
time
in include
order
toTrojans
perform
an
attack.
Network-on-Chip
Multiprocessor
System-on-Chip
(MPSoC)
design
is based
on the
integration
ofextra
several
third(NoC),
the
IP
ofcores.
MPSoCs,
can
that
spy,
modify
and
constrain
thatsensitive
can
becommunication
triggered
during
operation
time
inAlthough
order IPs
toTrojans
perform
an
attack.
Network-on-Chip
(NoC),
the
IP
ofcores.
MPSoCs,
can
include
that
spy,
modify
and
constrain
party
Intellectual
Property
(IP)
of
those
may include
Trojans,
extra
hardware
the
communication
inside
theSome
chip.
previous
works
address
the malicious
(NoC),
the
IPinside
ofefficient
MPSoCs,
can
include
that
spy,
modify
and
constrain
the
communication
the time
chip.
previous
works
address
thewemalicious
thatsensitive
can
becommunication
triggered
during
operation
inAlthough
order
toTrojans
an
attack.
Network-on-Chip
NoC
threat,
finding
secure
and
solutions
is still
aperform
challenge.
In this
work,
propose
thenovel
sensitive
communication
inside
the
chip.
Although
previous
works
address
the
NoC
threat,
finding
secure and
solutions
is stillTrojans
aa challenge.
In this
work,
wemalicious
propose
(NoC),
the
IP
ofefficient
MPSoCs,
can
include
that
spy,
modify
and
constrain
a
andcommunication
secure
network
interface
which
implements
tunnel-based
protocol
that
enables
NoC
threat,
finding
secure
and
efficient
solutions
still previous
aa challenge.
In this
work,
wemalicious
propose
a
novel
andexchange
secure
network
interface
which
implements
tunnel-based
protocol
that
enables
sensitive
communication
inside
the
chip.
Although
works
address
the
the
secure
of sensitive
data
even
in
theispresence
of a malicious
NoC.
We
test
our
a novel
and
secure
network
interface
implements
tunnel-based
protocol
that
enables
the
secure
exchange
of sensitive
even
theispresence
of a malicious
NoC.
We
test
our
NoC
threat,
finding
secure
and
efficient
solutions
still
challenge.
In this
work,
we
propose
technique
with
synthetic
traffic
asdata
wellwhich
as
inin
several
real aaapplication
scenarios,
and
show
that
thenovel
exchange
of sensitive
even
the presence
of a malicious
NoC.
Weshow
test
our
technique
with
synthetic
traffic
asdata
wellwhich
as inin
several
real aapplication
scenarios,
and
that
a
and
secure
network
interface
implements
tunnel-based
protocol
that
enables
it
is secure
a secure
and
efficient
solution.
technique
with
synthetic
traffic
asdata
welleven
as ininseveral
real application
scenarios,
and
it
is secure
a secure
and
efficient
solution.
the
exchange
of sensitive
the presence
of a malicious
NoC.
Weshow
test that
our
Keywords:
MPSoCs,
Network-on-Chip,
Security,
Malicious
NoC,
Tunnel protocol.
©
The Authors.
Published
by Elsevier
B.V.
it 2017
is a secure
and
efficient
solution.
technique
with
synthetic
traffic
as
well
as
in
several
real
application
scenarios,
and
show
that
Keywords: under
MPSoCs,
Network-on-Chip,
Security,
Malicious
NoC, Tunnel
protocol.
Peer-review
responsibility
of the scientific
committee
of the International
Conference
on Computational Science
it
is a secure
and
efficient
solution.
Keywords:
MPSoCs,
Network-on-Chip,
Security, Malicious NoC, Tunnel protocol.
Keywords: MPSoCs, Network-on-Chip, Security, Malicious NoC, Tunnel protocol.

1 Introduction
1 Introduction
1
Introduction
The Internet-of-Things
(IoT) becomes the keystone for the information and communication
The
Internet-of-Things
(IoT)the
becomes
the keystone
for the
information
communication
1
Introduction
technology
market. It allows
interconnection
of several
smart
embeddedand
devices
and enables

The
(IoT)
becomes
for process
the
information
and
communication
technology
market.
It allows
the
interconnection
several
smart
embedded
devices
anddata
enables
themInternet-of-Things
to work
on a common
goal.
Many ofthe
thekeystone
IoTofdevices
sensitive and
private
and
technology
market.
It allows
the
interconnection
several
smart
embedded
devices
and
enables
them
to work
on tasks.
a common
goal.
Many ofthe
the
IoTofdevices
sensitive
private
and
The
Internet-of-Things
(IoT)
becomes
keystone
information
and
communication
perform
critical
This
environment
promises
to for
be process
athe
source
of greatand
benefits
to data
people’s
them
to
on tasks.
aintroduces
common
Many of the
IoT
process
sensitive
and
private
and
perform
critical
Thisgoal.
environment
promises
to be be
asmart
source
of great
benefits
to data
people’s
technology
It allows
the interconnection
ofdevices
several
embedded
devices
and
enables
lives,
butwork
itmarket.
also
new
requirements
that
must
considered.
Among
them,
security
perform
critical
Thisgoal.
environment
promises
to be be
a source
ofdesign.
great
benefits
to data
people’s
lives,
butwork
it also
new
requirements
that
must
considered.
Among
them,
security
them
to
on atasks.
aintroduces
common
Many
of the
IoT
devices
process
sensitive
and
private
and
has
emerged
as
new and
critical
dimension
of embedded
system
Therefore,
finding
lives,emerged
butcritical
it also
introduces
new
requirements
that
must
considered.
Among
them,
security
has
as
atasks.
new IoT
and
critical
dimension
of embedded
systemofdesign.
Therefore,
finding
perform
Thissystems
environment
promises
toThe
be be
aEuropean
source
great
benefits
to people’s
solutions
for
securing
is mandatory.
Network
and
Information
has
emerged
as
aintroduces
new IoT
and identifies
critical
dimension
of embedded
system
Therefore,
finding
solutions
for
securing
systems
isanmandatory.
The be
European
Network
and
Information
lives,
butAgency
it also
new requirements
that
considered.
Among
them,
security
Security
(ENISA)
increase
ofmust
attacks
on IoT design.
devices
by
hostile
agents.
solutions
for as
securing
systems
isanmandatory.
The
European
Network
and
Information
Security
Agency
increase
of attacks
ona IoT
devices Therefore,
by
hostile
agents.
has
emerged
new IoT
andofidentifies
critical
dimension
of embedded
system
design.
finding
Yet,
ensuring
thea(ENISA)
security
IoT hardware
platforms
remains
challenge.
Security
Agency
identifies
increase
of attacks
ona IoT
devices
by
hostile
agents.
Yet,
ensuring
the (ENISA)
security
IoT hardware
platforms
remains
challenge.
solutions
for securing
IoTof
systems
isanmandatory.
The
European
Network
and
Information
IoT
embraces
different
heterogeneous
technologies.
Flexibility
and
high computation
power
Yet,IoT
ensuring
the (ENISA)
security of
IoT
hardware
platforms
remains
a IoT
challenge.
embraces
different
heterogeneous
technologies.
Flexibility
and
high
computation
power
Security
Agency
identifies
an increase
of attacks
by technology
hostile agents.
have
turned
Multiprocessor
System-on-Chip
(MPSoC)
intoonthe
keydevices
enabling
for
embraces
different
heterogeneous
technologies.
Flexibility
and
computation
power
have
turned
Multiprocessor
System-on-Chip
(MPSoC)
intowhich
the
key
enabling
technology
for
Yet,IoT
ensuring
the
security
of
IoT
hardware
platforms
remains
a challenge.
IoT.
MPSoCs
support
multiple
and
different
applications
can high
be downloaded
via
the
haveIoT
turned
System-on-Chip
(MPSoC)
intowhich
the
key
enabling
technology
for
IoT.
MPSoCs
support
multiple
andMPSoCs
different
applications
can high
bebut
downloaded
via
embraces
different
heterogeneous
technologies.
Flexibility
and
computation
power
Internet.
In Multiprocessor
such
an environment,
are
not isolated
anymore,
they
belong
tothe
a
IoT. MPSoCs
support
multiple
andMPSoCs
different
applications
which
can enabling
bebut
downloaded
viatothe
Internet.
In Multiprocessor
such
an environment,
are
not
isolated
anymore,
they
belong
a
have
turned
System-on-Chip
(MPSoC)
into
the
key
technology
for
huge
distributed
computation
system.
Therefore,
many
critical
applications
are
executed
in
Internet.
In
such
an environment,
are
not
isolated
anymore,
they
tothe
huge
distributed
computation
system.
Therefore,
many
critical
applications
are belong
executed
in
IoT.
MPSoCs
support
multiple
andMPSoCs
different
applications
which
canare
bebut
downloaded
untrusted
environments
and require
secure
communication.
MPSoCs
composed
of avia
set
ofa
huge distributed
computation
system.
Therefore,
many
critical
applications
are (NoC).
executed
in
untrusted
environments
and require
secure
communication.
MPSoCs
arebut
composed
of a set
ofa
Internet.
In
such
an environment,
MPSoCs
are data
not
isolated
they
belong
to
computing
and
storage
elements
that
exchange
though
aanymore,
Network-on-Chip
The
untrusted
environments
and require
secure
communication.
MPSoCs
are composed
of a set
of
computing
and storage
elements
that
exchange
data
though
a Network-on-Chip
The
huge distributed
computation
system.
Therefore,
many
critical
applications
are (NoC).
executed
in
computingenvironments
and storage elements
that
exchange
data thoughMPSoCs
a Network-on-Chip
The
untrusted
and require
secure
communication.
are composed(NoC).
of a set
of
computing and storage elements that exchange data though a Network-on-Chip (NoC). The11
1877-0509 © 2017 The Authors. Published by Elsevier B.V.
1
Peer-review under responsibility of the scientific committee of the International Conference on Computational Science
10.1016/j.procs.2017.05.139
1

1104	

MPSoC Tunnel-Based Communication
...
Sepúlveda,
Zankl, Flórez and Sigl
Johanna Sepúlveda
et al. / Procedia Computer Science 108C
(2017) 1103–1112

design of an MPSoC is based on the integration of third-party Intellectual Property (IP) cores.
Such pre-verified and pre-tested components are acquired from different providers, some of
which may be malicious and include hidden pieces of code or hardware that can snoop and
corrupt sensitive information or prevent the execution of a sensitive application on the MPSoC.
The Network-on-Chip can also be compromised in this way. Fig. 1 shows an MPSoC that
exchanges data through such a malicious NoC. The main role it plays in the MPSoC operation
turns the NoC into a major threat. The challenge is to perform a secure on-chip communication
even in the presence of a compromised NoC. As a usecase, the MPSoC of Fig. 1 integrates 9
single IP cores (IP1 to IP9 ) and three clusters (composed of 5 IP cores and a bus). Sensitive
communication flows between the components: (Cluster1 − IP8 ), (Cluster2 − IP2 ) and (IP4 −
IP5 ). The sensitive paths are composed of (R7 , R8 ), (R2 , R1 ) and (R3 ) routers, respectively.
Some of those routers are malicious and perform illegal operations: i) copy R7 ; ii) corrupt R2 ;
iii) deviate R3 ; and iv) deny any communication via R9 .
Previous works on NoC-based MPSoC protection include security services embedded in the
NoC, thus assuming the NoC to be trusted. Only the works of [2] and [4] consider the NoC
as malicious. As a countermeasure, they propose the integration of security primitives and
special sensing packets for detecting and preventing attacks performed by a compromised NoC.
It includes data snooping [2] and data corruption [2]. Despite the good results, those previous
works present three drawbacks: i) weak security primitives, based on XORing the plaintext with
a static key during all the MPSoC lifetime; ii) leakage of sensitive information by the unprotected
header of the packet; and iii) low performance. In this work, we overcome these difficulties and
propose a tunnel-based communication protocol that isolates the sensitive communication inside
the infected NoC. By enhancing the Network Interfaces (NIs), our technique avoids copying,
corruption and deviation of packets, while presenting a low overhead. The contributions of the
paper are:
• Realization of a malicious NoC, MalNoC, that is able to perform strong attacks;
• First implementation of a countermeasure using Tunnel-based communication to isolate
sensitive information in the MPSoC context;
• Evaluation of the security, area, power, and performance of our protection mechanism;
• Comparison of our protection approach with previous works. Results show that our work
is an advance to state of the art protection against malicious NoCs.

IP9

Cluster
1

IP8

R7

R8

IP7
R9

1

IP

4

IP

IP
BUS

IP1

IP2

R4

R5

R1

R2

R6

2

R3

3

NoC

IP3

Cluster
3

Cluster
2

IP

IP

IP5

IP4

Figure 1: MPSoC with a malicious NoC.
2

IP

	

MPSoC Tunnel-Based Communication
...
Sepúlveda,
Zankl, Flórez and Sigl
Johanna Sepúlveda
et al. / Procedia Computer Science 108C
(2017) 1103–1112

This paper is divided into seven sections. Section II presents the previous works on NoCbased security while Section III provides are short introduction to MPSoCs. Section IV and
V describe a possible malicious NoC and our tunnel-based countermeasure, respectively. After
presenting our experimental work and results in Section VI, a conclusion is given in Section
VII.

2

Related Works

The visibility of all the system transactions has turned the NoC into a critical component in
the MPSoC operation. Previous works isolate sensitive communication inside the MPSoC by
enhancing the NoC routers or network interfaces. According to the NoC nature (trusted or
malicious), such approaches can be divided into two categories.
The first group includes the works that consider the NoC as a trusted component [7], [6], [10],
[13], [11]. Firewall-based protection is one of the most employed techniques for guaranteeing the
access control security service. It can be integrated into the network interfaces [7], [6], or into
the router [10]. An alternative branch uses security zones, which wrap sensitive communication
by means of cryptography [13] and routing algorithm manipulation [11]. Despite the good
results, these techniques are not appropriate when the MPSoC operates in the context of a
malicious NoC.
The second group of works propose security mechanism for MPSoCs operating in the context of malicious NoCs [2], [4]. The work of [2] presents three protection techniques: i) data
scrambling, to make using data embodied into the packets to activate a hidden NoC Trojan
more difficult; ii) packet certification, to mark each packet with a 16-bit tag, unique for each IP;
and iii) node obfuscation, to include traffic noise by means of task migration among processors.
The work of [4] proposes two protection techniques: i) packet certification, to mark each packet
with an Algebraic Manipulation Detection (AMD) or Cyclic Redundancy Check (CRC); and
ii) PSeC, a sensitization packet that acts as a bodyguard of sensitive information. By following
the same sensitive path, it detects points of contention and thus, possible illegal manipulation
performed by the NoC. Both works prioritize the communication of sensitive packets. Those
works present three drawbacks: i) weak security primitives, based on XORing the plaintext
with a static and unchangeable key; ii) low performance, due to the node obfuscation and
AMD techniques; and iii) leakage of sensitive information by the unprotected header of the
packet and the prioritization of sensitive information. As demonstrated in [8], this technique
may reveal the secret key employed to encrypt the sensitive data.
Our work overcomes such drawbacks by means of a tunnel-based communication. We create
tunnels inside the NoC by using dynamic secret keys and strong lightweight security primitives
integrated into the network interfaces. It is called Tunnel-based Network Interfaces (TNIs).
They prevent copying, corruption, or deviation of packets. Considering the NoC to be trusted
leads to simpler packet structure, as the NoC can use the information embodied in the packet to
implement the security services. However, when a malicious NoC is considered, the information
must be hidden. Thus, more complex and bigger packets are used.

3

MPSoC Description

MPSoCs are able to support several applications, which may change during runtime. They
are composed of heterogeneous processing units, storage, peripherals and hardware accelerator
IP cores communicating through a NoC. In order to increase the performance of the system,
applications are split into tasks and spread over the MPSoC resources [5]. As a result, peer
interaction among IP cores is forced. When the MPSoC executes a critical application, sensitive
information must be exchanged through the NoC. The NoC route that communicates sensitive
information between two IP cores is known as a sensitive path. Information exchange between
two IPs is carried out as packets, which are composed of three parts: i) header H, that contains
the address of the target IP (h1 ) and source IP (h2 ) required to perform the routing; ii) payload
P, which corresponds to the information; and iii) tag T, which implements data correction or
3

1105

1106	

MPSoC Tunnel-Based Communication
...
Sepúlveda,
Zankl, Flórez and Sigl
Johanna Sepúlveda
et al. / Procedia Computer Science 108C
(2017) 1103–1112

other communication services. Routers are used to transport the data from an input to an
output. Neighboring routers communicate through bidirectional links. Routers integrate four
main components: i) input buffers, which store the data that arrives to the router through one
of its input ports; ii) routing algorithm, which selects the router output port to be employed
for redirecting the incoming data; iii) crossbar switch, which links input to output ports of the
router; and iv) arbitration logic, which grants the utilization of the crossbar switch to one of
the input buffers. In order to transport data, routers have full access to the packets (H, P,
T). Such capabilities allow a compromised/malicious NoC the direct access to sensitive packet
information. Malicious routers which contain a Trojan may access the data embodied into the
packet.

4

Threat Model

We assume that the attacker is able to tamper with the NoC IP before its integration into
the MPSoC. However, the network interfaces are considered secure. That is, the attacker can
not modify their behavior. This assumption is valid, since the integration role of the network
interfaces requires that they are built in-house [2]. For our use case we assume the existence of
hardware Trojans integrated into the compromised NoC. That is, additional hardware components integrated in the NoC routers that can copy, corrupt or deviate sensitive information.

4.1

Trojan in NoCs

An attack caused by a compromised NoC is composed of three stages: i) Trojan design and
integration; ii) Malicious behaviour activation; and iii) Execution of the attack.
Trojan design and integration In this stage the attacker defines the goal and the strategy
of the attack. The attack goals include one or a combination of the following alternatives:
i) copying, i.e., storing the content of the packet in order to replay or to monitor the traffic.
As a result sensitive information is extracted [8]; ii) corruption, i.e., modifying a field of the
packet to impersonate a communication (source corruption), obtaining access or leaking sensitive information (payload corruption), or denial of the system operation (tag corruption); and
iii) packet deviation, i.e., rerouting the packet to a malicious destination. The strategy of the
attack defines the Trojan architecture, that is, the type and number of the extra components
that must be integrated into the NoC to meet the attacker goals. To avoid the Trojan detection,
the resource overhead required for the attack must be low.
Malicious behaviour activation In order to avoid the detection by power consumption,
radiation or performance overheads, the Trojan may remain partially or fully deactivated during
part of the MPSoC operation time [2]. In order to fully activate the Trojan, pre-programmed
awake timing or activation codes may be used. The codes can be generated by malicious packets
injected by a partially deactivated compromised router or infected IP.
Execution of the attack In this stage, the goals of the attacker are met. The malicious
actions (copying, corruption, or deviation) are performed. As a result, secret and private
information is revealed, or the MPSoC is malfunctioning or completely shut down.

4.2

Malicious NoC: MalNoC

In this work, we propose MalNoC, a malicious NoC which integrates a set of compromised
routers in partially deactivated mode (boss router ) and fully deactivated mode (listener routers).
The goals of MalNoC are: i) spoofing, by copying and replaying packets, which may induce
the malfunction or eviction of sensitive data (copy goal); ii) illegal monitoring, by tracking the
number of packets between a source/destination IP core pair (copy goal); and iii) modification;
4

	

MPSoC Tunnel-Based Communication
...
Sepúlveda,
Zankl, Flórez and Sigl
Johanna Sepúlveda
et al. / Procedia Computer Science 108C
(2017) 1103–1112
Trojan
Incoming
Data

C6
Output
Data

Modified
Data
SEL

Activation code

C1

C4
CTRL

Activation
Logic
Enable

C2

Malicious
Actions

Malicious
data

C3

C5

Figure 2: MalNoC Trojan architecture.

by changing the payload and route of the packets (corruption or deviation goals). The Trojan
architecture of MalNoC is presented in Fig. 2. It is composed of three main components:

Activation of logic. C1 activates the malicious behaviour of the routers. Timing trigger
and activation codes are used to fully activate the boss router and listener routers, respectively.
Activation logic of the boss router is composed of a counter and a comparator. Otherwise, only
a comparator is used.

Malicious actions. C2 includes the logic required to perform the three attack goals. MalNoC
routers are specialized for each one of the three attack goals (spoofing router Rs , observer router
Ro and modification router Rm ). Rs uses a register to copy the incoming packet. The source
of the copied packet is modified and then replayed into the NoC. Ro reads the destination of
the packet and updates the statistics about the communication (time and source). Rm replaces
a portion of the incoming packet (destination, payload) with the information stored at the
malicious data register.

CTRL. C3 controls the Trojan operation. It enables the malicious actions and selects the
type of data that the router will deliver (uncorrupted or modified data).
Additional registers for storing the activation code (C4 to trigger the malicious behaviour)
and the malicious data (C5 used to corrupt the packets) are required. When the MPSoC starts
its operation, the counter of the boss router is increased until it reaches the values stored in the
activation code. The activation logic notifies the CTRL, which enables the generation of the
activation packet that embodies the activation code of the listener routers. When the activation
packets reach the listener routers, it changes their operation mode from deactivated to fully
activated. Then, the attack can take place.
In order to demonstrate the realization feasibility of MalNoC, we modified a five-port router
of the SHOC [9] framework, and integrated the Trojan (Fig. 2). Three different types of routers
were developed (spoofing router Rs , observer router Ro , and modification router Rm ). The area
and power overhead, when compared to the baseline router, are summarized in Table 1. Results
are obtained with the Cadence Encounter RTL Compiler RC12.24 tool. The synthesis targets
the 65nm process technology at 500 MHz operating frequency and 25◦ C. When compared to
the reference router, adding the malicious behaviour yields an overhead of at most 2.2%, 0.2%
and 0.3% in area, power, and performance, respectively. These results show that a malicious
behaviour can be integrated with a low overhead, leading to a router Trojan which is hard to
detect.
5

1107

1108	

MPSoC Tunnel-Based Communication . . .
Sepúlveda, Zankl, Flórez and Sigl
Johanna Sepúlveda et al. / Procedia Computer Science 108C (2017) 1103–1112

Conf.
MalNoC

5

Table 1: MalNoC overhead
Component
Rs
Ro
Rm

Area
0.9%
2.2%
1.3%

Power
0.2%
0.2%
0.1%

Perf.
0.1%
0.2%
0.3%

Tunnel-based Network Interface (TNI)

MalNoC covers a broad MPSoC attack surface. In order to protect the system against NoCs
that perform similar attacks as MalNoC, we propose the integration of secure network interfaces
that implement tunnel-based communication (TNI). We assume that the network interfaces are
trusted, i.e., the attacker cannot modify their behavior. TNIs create tunnels by encapsulating
the data in such a way that it is isolated from the compromised NoC. Tunneled packets are
composed of a destination field h1 , source field h2 , payload (P) and tag (T) fields. Only the h1
field is exchanged as plaintext, other fields are encrypted (h2 , P) and the overall content of the
packet is hashed and stored in T. Tunnels must provide the minimal information for performing
the packet routing. In our approach only the destination is available to the router.

5.1

TNI architecture

Fig. 3 shows the architecture of our proposed TNI. It comprises three main components:
Packet maker/unmaker to assemble/disassemble packets.
header H (h1 , h2 ), payload P and tag T.

Packets are composed of a

Encryption to encipher h2 and P of the packet. We employ the counter-mode of the Advanced Encryption Standard (AES-CTR) in order to dynamically generate a new secret key
KIV for each encryption/decryption. The new key stream is derived by encrypting a random
initialization vector (IV) and a counter with the initial key K. IV is generated by linear feedback
shift registers (LFSRs). IV and counter are concatenated as recommended by the National Institute of Standards and Technology (NIST) [1]. All TNIs share the same seed for the LFSRs
and thus are able to reproduce the dynamic key. Encrypted packets C are obtained by XORing
the plain packet M with KIV . In contrast with the previous static-key XORing approaches
presented in [2] and [4], our approach avoids the secret key disclosure since each packet has
a unique derived key. Packet decryption is performed by XORing the encrypted packet with
the proper dynamic key. AES-CTR is highly parallelizable, achieving high throughput to the
penalty of higher area and power overheads.
SipHash a fast and lightweight Message Authentication Code (MAC) generator to authenticate and guarantee the integrity of the packet. SipHash was proposed in [3]. It uses iteratively
additions, rotations and XOR operations. One iteration is called SipRound, the number of iteration rounds executed during compression and finalization steps determines the security and
the performance of SipHash. In this work, we use the SipHash-2-4 shown in Fig. 3. SipHash
was developed for producing a secure and fast MAC function for short inputs, which makes it
attractive for usage in MAC packet generators. At the TNI source, the 64-bit MAC is generated
by the SipHash function and the result is embodied in the tag (T) of the packet. At the TNI
destination, the MAC is recomputed. The authenticity of the message is successfully verified
when the computed MAC matches the received MAC.
Such interfaces present three advantages: i) flexibility, TNIs can be parametrized (number
of AES-CTR blocks, SipHash rounds) according to security and performance requirements of
the MPSoC; ii) independence, the integration of TNIs is independent of the NoC architecture
and IP characteristics; iii) low cost and high performance, due to the integration of security
primitives designed for high throughput applications.
6

	

MPSoC Tunnel-Based Communication . . .
Sepúlveda, Zankl, Flórez and Sigl
Johanna Sepúlveda et al. / Procedia Computer Science 108C (2017) 1103–1112
TNI

IV & Counter
Source

K

Destination
Data

Source
Data

Packet
Maker

Plain packet

h1 h2 Payload

<

H

Packet
Unmaker

IP

AES-CTR

KIV

M
C

SipHash
Destination

h1 h2

MAC

Encrypted Encrypted
Source
Payload

NoC

Destination

Figure 3: Architecture of our proposed TNIs.

5.2

TNI security analysis

TNI provides three security services:
• confidentiality: the header h2 and payload P encryption with dynamic keys avoids data
disclosure. As the seeds of the VI are only known by the TNIs, only authorized IP cores
have access to the packet content;
• integrity: any modification in the packet content performed by the MalNoC will cause a
mismatch between the MAC computed by the receiver TNI and the MAC embodied in
the tag (T) of the received packet;
• authentication: the inclusion of h2 (source field) in the hash guarantees that the source
of the packet was not modified and corresponds to the data embodied into the h2 field of
the received packet.
Denial-of-service attacks can still be performed in the system. This threat is out of the
scope of this paper and will be object of future works.

6

Experiments and Results

This section is divided into three parts. The first subsection describes the experimental setup
employed to perform the security and performance evaluation. The second subsection presents
the security results. Finally, performance and cost evaluation are presented.

6.1

Experimental setup

In order to perform the evaluation of our tunnel-based protection mechanism (TNIs), we have
described three components in cycle-accurate SystemC-TLM and VHDL-RTL: i) MalNoC, the
malicious NoC that includes spoofing router Rs , observer router Ro and modification router Rm ;
ii) TNIs, the interfaces that implement our tunnel-based approach; and iii) previous security
approaches of [2] (data scrambling, packet certification and node obfuscation) and [4] (packet
certification and PSeC), for comparison purposes. These models are integrated into the SHOC
[9] framework. SHOC is a modular cycle-accurate simulation environment which supports
a wide variety of Instruction Set Architectures (ISAs), memories, traffic generators and all
the components required for MPSoC simulation. All components are highly parametrizable,
allowing a fast and flexible exploration of several NoC configurations. This environment includes
libraries of MPSoC synthetic benchmarks and real applications (SPLASH [12]), as well as tools
for power and area estimation. As a proof of concept, we modelled a 64-core MPSoC which is
interconnected though a 8x8 MalNoC. The number and mapping of the three types of malicious
routers (Rs , Ro , and Rm ) were randomly selected. Five runs per experiments were performed
and the average values are presented in the next subsections.
7

1109

1110	

Johanna Sepúlveda et al. / Procedia Computer Science 108C (2017) 1103–1112
MPSoC Tunnel-Based Communication . . .
Sepúlveda, Zankl, Flórez and Sigl

Figure 4: Security results.

6.2

Security evaluation

The protected MPSoC was evaluated under three kinds of attacks (spoofing, extraction, and
modification) performed by the activation of the Rs , Ro and Rm of the MalNoC, respectively.
These attacks were described in Section IV. Afterwards, the protection mechanisms were integrated into the system and the effect on the success rate of the attacks was quantified. The
protection mechanisms includes TNI (our approach), [2] mechanisms (data scrambling, packet
certification, and node obfuscation) and [4] mechanisms (packet certification and PSeC). Fig. 4
shows the results of the security evaluation. Higher values of attack avoidance represent a better level of protection. Results show that TNI achieves the highest values for all three kinds
of attacks. For the remaining protection techniques, even when combined, it is not possible to
achieve the highest protection level. Packet certification of [4] was better than the approach of
[2]. The smaller and static tag of [2] is not sensible to packet modifications.

6.3

Performance evaluation

The protection mechanisms have been evaluated under three scenarios in order to evaluate the
scalability, performance under synthetic traffic, and performance in real application scenarios.
The scalability results are presented in Fig. 5. It shows the normalized MPSoC performance
for systems that integrate different protection scopes, from 1 (a single IP core is protected) to
64 (all the IP cores are protected). The results show that data scrambling, packet certification
[2], and our approach are scalable solutions. In contrast, the node obfuscation technique has
evidenced high dependence of the execution time on the number of protected IP cores. This
penalty is caused by the task migration. It requires to save and communicate the task code,
task data and context through the MalNoC. We assume that the node obfuscation is performed
during 50% of the execution time. However, in order to achieve higher security, the frequency
of node obfuscation should be higher, and thus, an even higher penalty is introduced into the
system. These results render node obfuscation infeasible for tight performance constrained
MPSoCs. Fig. 6 shows the performance results of the uniform synthetic traffic when 32 cores
are protected. The best performance is obtained by the data scrambling and our TNI approach,
despite TNI employing a set of cryptographic primitives (AES-CTR and SipHash), since these
mechanisms were designed for achieving high throughput and low latency. As expected, the
node obfuscation exhibits the worst performance. This behaviour is also evidenced in the
real application scenario. The results of the SPLASH benchmark execution are presented in
Fig. 7. It shows the normalized execution time of seven applications of SPLASH (FFT, Barnes,
Cholesky, FMM, LU, RADIX and OCEAN). Data scrambling and our approach achieve the
best results.

6.4

Cost Evaluation

The area, power and performance overhead of the security mechanisms are summarized in
Table 2 as a percentage of the penalty of each configuration when compared to the MPSoC
8

Johanna Sepúlveda et al. / Procedia Computer Science 108C (2017) 1103–1112
MPSoC Tunnel-Based Communication . . .
Sepúlveda, Zankl, Flórez and Sigl

1

Normalized latency

0,8
Data scrambling [2]

0,6

Packet certification [2]
Packet certification [4]

0,4

Node obfuscation [2]
PSeC [4]

0,2

Our approach

0
1

2

4

8

16

32

64

Number of IPs of the security zone

Figure 5: Scalability evaluation results.
700

NoC latency (cycles)

600
500

Data scrambling [2]

400

Packet certification [2]

300

Packet certification [4]
Node obfuscation [2]

200

PSeC [4]

100

Our approach

0
0%

10%

20%

30%

40%

50%

60%

70%

80%

90%

Injection rate (%)

Figure 6: Performance results of uniform synthetic traffic.
1

Normalized execution time

	

0,8

0,6
0,4
0,2
0

Data sacrambling

Packet certification [2] Packet certification [3]
FFT

Barnes

Cholesky

FMM

Node obfuscation
LU

RADIX

PSeC

Our approach

OCEAN

Figure 7: Performance results of SPLASH.
without protection. Despite the low overhead of data scrambling and packet certification, we
have proven that the offered security level of such approaches is low. Results show that our
mechanism presents the best trade off between security, performance, and cost. The selection
of one of those mechanisms will depend on the application security requirements, threat model,
and the constraints of the system. In order to achieve higher throughput, our approach could
parallelize the AES-CTR encryption. However, the area and power overhead would increase
accordingly.

7

Conclusion

In this work we showed that malicious NoCs are a real threat. We presented three main
contributions. First, we proved the feasibility of malicious NoCs by developing MalNoC, which
enables strong attacks while still having only a very low overhead regarding area, power, and
performance. Second, we proposed tunnel-based communication implemented in secure network
interfaces (TNIs) as a countermeasure. It encapsulates the information in encrypted/hashed
packets which avoids the data disclosure to malicious NoCs. Third, we showed that the TNI
approach achieves a high security with acceptable area and performance overhead. Comparing
TNIs with previous approaches showed an advance to the state of the art. As future work,
we aim to implement new protection mechanisms at the network interfaces in order to avoid
9

1111

1112	

MPSoC Tunnel-Based Communication . . .
Sepúlveda, Zankl, Flórez and Sigl
Johanna Sepúlveda et al. / Procedia Computer Science 108C (2017) 1103–1112

Table 2: Overhead of protection techniques
Protec.
Fort-NoC[2]
PSeC-NoC [4]
TNIs

Component
Data Scrambl.
Packet cert.
Obfuscation
AMD
PSeC
maker/unmaker
Encryption
SipHash

Area
2.0%
2.1%
3.1%
4.3%
0.8%
3.4%
1.1%

Power
2.3%
1.2%
6.2%
3.3%
2.5%
2.6%
1.2%

Perf.
1.6%
2.2%
8.3%
5.9%
4.6%
2.1%
1.8%

malicious NoC denial-of-service attacks.

References
[1] National institute of standards and technology. http://www.nist.gov/. Accessed: 2016-07-26.
[2] Dean Michael Ancajas, Koushik Chakraborty, and Sanghamitra Roy. Fort-nocs: Mitigating the
threat of a compromised noc. In Proceedings of the 51st Annual Design Automation Conference,
DAC ’14, pages 158:1–158:6, New York, NY, USA, 2014. ACM.
[3] Jean-Philippe Aumasson and Daniel J. Bernstein. SipHash: A Fast Short-Input PRF, pages 489–
508. Springer Berlin Heidelberg, Berlin, Heidelberg, 2012.
[4] T. Boraten and A. K. Kodi. Packet security with path sensitization for nocs. In 2016 Design,
Automation Test in Europe Conference Exhibition (DATE), pages 1136–1139, March 2016.
[5] E. A. Carara, N. L. V. Calazans, and F. G. Moraes. Differentiated communication services for
noc-based mpsocs. IEEE Transactions on Computers, 63(3):595–608, March 2014.
[6] Pascal Cotret, Guy Gogniat, and Martha Johanna Sepúlveda Flórez. Protection of heterogeneous
architectures on fpgas: An approach based on hardware firewalls. Microprocessors and Microsystems, 42:127–141, 2016.
[7] Leandro Fiorin, Gianluca Palermo, Slobodan Lukovic, and Cristina Silvano. A data protection
unit for noc-based architectures. In Proceedings of the 5th IEEE/ACM International Conference
on Hardware/Software Codesign and System Synthesis, CODES+ISSS ’07, pages 167–172, New
York, NY, USA, 2007. ACM.
[8] Cezar Reinbrecht, Altamiro Susin, Lilian Bossuet, and Johanna Sepulveda. Gossip noc - avoiding timing side-channel attacks through traffic management. In IEEE Computer Society Annual
Symposium on VLSI (ISVLSI ’16), July 2016.
[9] Johanna Sepulveda, Guy Gogniat, Ricardo Pires, Wang J Chau, and Marius J Strum. Dynamic
noc-based architecture for mpsoc security implementation. In Proceedings of the 24th symposium
on Integrated circuits and systems design, pages 197–202. ACM, 2011.
[10] MJ Sepúlveda, M Strum, and WJ Chau. An hybrid switching approach for noc-based systems to
avoid denial-of-service soc attacks. 16th Iberchip Wksp (IWS 2010), pages 23–25, 2010.
[11] Radu Stefan and Kees Goossens. Enhancing the security of time-division-multiplexing networkson-chip through the use of multipath routing. In Proceedings of the 4th International Workshop
on Network on Chip Architectures, pages 57–62. ACM, 2011.
[12] Steven Cameron Woo, Moriyoshi Ohara, Evan Torrie, Jaswinder Pal Singh, and Anoop Gupta.
The splash-2 programs: Characterization and methodological considerations. SIGARCH Comput.
Archit. News, 23(2):24–36, May 1995.
[13] Chung-Ping Young, Chung-Chu Chia, Liang-Bi Chen, and Ing-Jer Huang. On-chip-network cryptosystem: A high throughput and high security architecture. In APCCAS 2008 - 2008 IEEE Asia
Pacific Conference on Circuits and Systems, pages 1276–1279, Nov 2008.

10

