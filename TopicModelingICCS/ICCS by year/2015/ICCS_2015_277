Procedia Computer Science
Volume 51, 2015, Pages 845–854
ICCS 2015 International Conference On Computational Science

Multi-Level Job Flow Cyclic Scheduling in Grid Virtual
Organizations
Victor V. Toporkov1 , Anna Toporkova2 , Alexey Tselishchev3 , Dmitry
Yemelyanov1 , and Petr Potekhin1

2

1
National Research University ”MPEI”,
ul. Krasnokazarmennaya, 14, Moscow, 111250, Russia
{ToporkovVV, YemelyanovDM, PotekhinPA}@mpei.ru
National Research University Higher School of Economics,
ul. Myasnitskaya, 20, Moscow, 101000, Russia
atoporkova@hse.ru
3
European Organization for Nuclear Research (CERN),
Geneva, 23, 1211, Switzerland
Alexey.Tselishchev@cern.ch

Abstract
Distributed environments with the decoupling of users from resource providers are generally
termed as utility Grids. The paper focuses on the problems of eﬃcient job ﬂow distribution and
scheduling in virtual organizations (VOs) of utility Grids while ensuring the VO stakeholders
preferences and providing dependable strategies for resources utilization. An approach based
on the combination of the cyclic scheduling scheme, backﬁlling and several heuristic procedures
is proposed and studied. Comparative simulation results are introduced for diﬀerent algorithms
and heuristics depending on the resource domain composition and heterogeneity. Considered
scheduling approaches provide diﬀerent beneﬁts depending on the VO scheduling objectives.
The results justify the use of the proposed approaches in a broad range of the considered
resource environment parameters.
Keywords: scheduling, distributed computing, job, ﬂow, batch, optimization, resource, utilization,
backﬁlling

1

Introduction

The complexity of resource scheduling in distributed computing environment like Grid is determined by geographical distribution, resource dynamism and inhomogeneity of jobs and execution requirements deﬁned by users of virtual organizations (VO). A matter of the utmost
importance for the VO is to eﬃciently manage available computational resources while fulﬁlling
requirements of all stakeholders: users, resource owners and VO administrators. The fact that
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.211

845

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

resources are non-dedicated, makes the eﬃcient scheduling problem even more complex. In
distributed computing with a lot of diﬀerent participants and contradicting requirements the
most eﬃcient approaches are based on economic principles [4, 8, 9, 14]. Diﬀerent approaches
to job scheduling can be classiﬁed based on job-dispatching methods. When job-dispatching
process is decentralized, schedulers usually reside and work on the client side and fulﬁl enduser requirements (AppLeS [2]). Centralized job-dispatching implies that a meta-scheduler
ensures the eﬃcient usage of all the resources. While managing the scheduling process the
meta-scheduler works with meta-jobs that are accompanied by a resource query, that contains
resource characteristics required for the job execution. Generally job-ﬂow scheduling problem
is solved using standard methods or algorithms [1, 16], which include First-Come-First-Served,
backﬁlling, user ranking mechanisms and resource separation.
The regulations of VO in Grid usually imply a job ﬂow scheduling. A metascheduler or a
metabroker is considered as intermediate link between the users and the local resource management and job batch processing systems [9, 12]. VOs naturally restrict the scalability of resource
management systems. However, uniform rules of resource sharing and consumption established
in VO make it possible to improve the job-ﬂow scheduling eﬃciency.
Job ﬂow scheduling process could be considered on diﬀerent levels: job ﬂows distribution
between several resource domains, job ﬂow scheduling in a single resource domain and a single
application scheduling and execution on a set of allocated resources. The VO policies should
be applied on each level, otherwise a disbalance on one level may cause an ineﬀectivness of the
whole job ﬂow scheduling.
A main contribution of this paper is as follows. First of all, a heuristic job and resource domain ”compatibility” parameter is proposed for the job-ﬂow distribution optimization. Second,
we address a problem of early resources releases and rescheduling ”on the ﬂy” combining Cycle
Scheduling Scheme (CSS) [14] and backﬁlling [1]. Finally, we introduce a heuristic of schedule
shifting (Shifted CSS) in order to prevent the resource fragmentation.
The rest of the paper is organized as follows. Section 2 presents brief analysis of related
works. The heuristic indicator of a job and a particular resource domain ”compatibility” is
presented in Section 3. In Section 4, there is a concept of a CSS combining backﬁlling and
shifting is detailed. Section 5 contains simulation results of diverse scheduling approaches
comparison. Finally, section 6 summarizes the paper and describes further research topics.

2

Related Works

Many resource selection and scheduling algorithms, and heuristic-based solutions have been
proposed for parallel jobs and tasks with dependencies in distributed environments [3, 4, 5, 6,
7, 8, 9, 11, 12, 15]. In some well-known models of distributed computing with non-dedicated
resources, only the ﬁrst ﬁt set of resources is chosen depending on the environment state [5, 7],
while job scheduling optimization mechanisms are usually not supported. In other models
[4, 8, 9] the aspects related to the speciﬁcs of environments with non-dedicated resources,
particularly dynamic resource loading, the competition between independent users, user global
and owner local job ﬂows, are not considered. In [8], heuristic algorithms for slot selection
based on user-deﬁned utility functions perform slot window allocation under the maximum
total execution cost constraint, but the optimization occurs only on the stage of the best-found
oﬀer selection. Advance reservation-based co-allocation algorithms are proposed in [6, 7].
First ﬁt resource selection algorithms [5, 7] assign any job to the ﬁrst set of slots matching
the resource request conditions without any optimization. Preference-based matchmaking [5]
is not focused on the scheduling process. The job is scheduled on the ﬁrst available resource
846

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

according with user preferences. In [12], an approach to resource matchmaking among VOs
combining hierarchical and peer-to-peer models of meta-schedulers is proposed.
In [3], the mixed-integer programming model is proposed. It performs the best scheduling in
environments composed of multiple clusters that act collaboratively. The scheduling approaches
in [3, 6, 11] are eﬃcient under given criteria: the processing cost, the overall makespan, resources
utilization, load balancing for related tasks [11], etc.
Within these approaches it is important to maintain the queue order and user priorities
when executing these jobs. More ”honest” queue forming is based on economic principles [10]
and takes into account single job features and their impact on the queue.
CSS [14] allows fulﬁlling VO requirements to a greater extent. CSS implements job-ﬂow
scheduling in cycles by separate job batches on the basis of dynamically updated local schedules
of computational nodes. This allows optimizing overall job batch execution parameters instead
of single applications scheduling. For example, in similar approach [17] it is described how a
problem of minimizing the total energy consumption is solved during the job batch execution.
However, at the same time the queue order and VO users expectations can be aﬀected.
We propose the following scheduling scenario to fulﬁl the VO stakeholders expectations at
each job ﬂow scheduling step. At the job ﬂow distribution step the jobs should be sequentially
assigned to a considered resource domain based on a job - domain ”compatibility” indicator
Dq (Distribution Quality) that will be presented in details in Section 3. Successful job ﬂow
distribution will provide balanced resource domains utilization level and increase the whole
system throughput which will beneﬁt all VO stakeholders. At this step the job ﬂow queue
order will remain as jobs are distributed sequentially. For job ﬂow scheduling in a single resource
domain we propose a combination of CSS and backﬁlling. During every scheduling cycle the
job ﬂow is grouped into a two separate sub-queues. Cyclic scheduling method combined with
backﬁlling (Batch-slice-Filling - BSF [15]) unites the main advantages of CSS and backﬁlling
(BF) and considers VO administrators global policies (CSS sub-queue), VO users preferences
based on custom criteria (CSS sub-queue) or a simple queue order (backﬁlling sub-queue) and
provides eﬀective VO resource utilization (backﬁlling sub-queue). Application-level scheduling
details are described in [14] and not discussed in this paper.
The paper relates to comparative investigation of scheduling eﬃciency indicators on diﬀerent
scheduling levels depending on the job ﬂow and resource domains heterogeneity.

3

Job Flow Distribution Quality

For the hierarchical structure of job ﬂow distribution key problems include conﬁguring and composing of computational environment and also deliberate user jobs allocation between available
resource domains. In order to perform a successful job ﬂow distribution each job should have
some indicator showing how the job ”ﬁts” for executing in some resource domain during considered scheduling interval. The indicator may be calculated based on meta-information from
a user resource request, which represents user quality of service expectations as well as a user
part of the service contract. High level of heterogeneity and diversity of distributed and parallel
computing systems results in existence of a variety of resource request representation forms.
The CSS model has the following basic resource request requirements to computational nodes:
minimal performance p, required for job execution, maximum total job execution cost (budget)
S, number n of computing nodes needed for the job and resource reservation time t (estimated
for a resource with performance p).
As a compatibility measure of an individual job and a resource domain an empirical coeﬃcient Dq is proposed. Dq coeﬃcient describes chances for a job to be scheduled and executed
847

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

successfully during the present resource domain scheduling interval. Dq can have positive (high
chance to be executed) or negative (low chance to be executed) values.
Proposed Dq coeﬃcient consists of several summands, corresponding to the various characteristics of a resource domain and a user job. For each of the summands adjusting parameters
are introduced: Kr - a weight coeﬃcient determining the importance of the summand; Cr - a
threshold value, approximately determining the value at which at least one alternative for the
job execution is likely to be found. The values of the adjusting parameters can be formed based
on statistics of the previous scheduling cycles or expert estimates. Thus, each summand can be
presented in the following form:
Dqr =

Kr
r
∗ (Cr − ),
Cr
r0

(1)

where r - a job characteristic, r0 - a corresponding resource domain parameter. Additionally,
r0 may be modiﬁed to account for jobs already pending in the considered resource domain job
queue.
A series of job ﬂow scheduling experiments were carried out to determine the most signiﬁcant
job allocation and resource domain characteristics with a simulator [14]. Overall more than
5000 scheduling cycles with 40 randomly generated jobs on each were simulated using CSS. As
a result, the following environment characteristics and resource request parameters that most
inﬂuence the probability of a successful scheduling outcome were discovered.
1. A “price/quality” ratio of the domain computational nodes (Q0 ) and user jobs (Q). For
an individual computing node Q0 is calculated as the ratio of the speciﬁed utilization cost
(per time unit) to its performance factor pc . Thus, the higher the performance and the
lower the utilization cost of the node, the lower the value of the coeﬃcient is. For resource
domain average value of Q0 by all nodes is taken into account.
2. A number of the available resources (nodes) n0 in the resource domain and a number of
the computing nodes n required for the job execution respectively.
3. Total domain available processor time Vs (cumulative length of available slots) and processor time required for the job execution t ∗ p ∗ n.
Thus, for example, in accordance with (1) a term:
Dqv =

Kv
t∗p∗n
∗ (Cv −
)
Cv
Vs

(2)

characterizes the ratio of slot utilization time required to execute the job and a total processor
time available during the considered scheduling cycle. In (2), Kv is a weight coeﬃcient and Cv
is a threshold value.
Summarize the above, Dq is a heuristic measure which helps to perform a fast preliminary
job ﬂow distribution based on basic statistical data. Using Dq coeﬃcient it’s possible to assign
jobs to resource domains in diﬀerent ways. We assume, one of the best distribution policy
is to assign jobs to domains providing the minimal positive value of Dq indicator, i.e. the
most ”problem” domain out of those able to execute the job successfully. This policy allows
balancing of job ﬂow execution during many cycles and providing the most eﬃcient resource
utilization. Otherwise, high performance resource domains could be overloaded with relatively
small jobs, while resource demanding jobs will stuck in the queue and some domains will remain
underutilized.
848

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

4

Cyclic Scheduling Combined with Backﬁlling

We outline two main job-ﬂow scheduling optimization directions on a single resource domain
level. In the ﬁrst of them, the optimal or suboptimal scheduling under a given criterion or
criteria speciﬁed in VO is performed on the basis of a priori information about local schedules
of computational nodes. CSS [14] belongs to this type of systems. Another approach represents scheduling ”on the ﬂy” depending on a dynamically updated reliable information about
resources utilization. In this case, schedulers are focused on overall resources load maximization
and jobs start time minimizing. Backﬁlling [1, 16] may be related to this type of scheduling.
The BSF procedure has two main steps [15]. Firstly, the initial sub-batch of high priority
jobs is scheduled by CSS. Secondly, the scheduling of the subsequent sub-batch of lower priority
jobs is performed by backﬁlling.
The preferences of the VO administrators are taken into account during the ﬁrst BSF step.
First of all, a set of execution alternatives is allocated for each batch job on the scheduling
interval. Second, the dynamic programming methods [13] are used to choose an optimal alternatives combination with respect to the given VO criterion. This combination forms the ﬁnal
CSS schedule.
In order to satisfy the user preferences in CSS a preferred optimization criterion may be
included in the job request, e.g. using Job Submission Description Language (JSDL). This criterion is used when allocating execution alternatives and hence aﬀects the ﬁnal CSS schedule.
In terms of economic scheduling two main optimization directions could be outlined: job execution time and cost (though other criteria may be speciﬁed, for example, power consumption
characteristics).Thus, the considered user criteria include job’s total execution runtime, ﬁnish
time, processor time, cost, etc. [13].
As a next step of CSS generalization, a heuristic procedure of shifting the jobs execution
alternatives (selected by CSS for advanced reservation) is proposed. After CSS scheduling the
procedure shifts the chosen alternatives in time towards the beginning of the scheduling interval
keeping resource instances in which they are allocated. The shifting procedure is performed
iteratively for each job of the batch being scheduled. The order of job selection is determined
according to the start time of the chosen alternatives.
Backﬁlling [1] responds to early resources releases and performs ”on the ﬂy” rescheduling
which is very important when a user job runtime estimation diﬀers signiﬁcantly from the actual job execution time [16]. When used at the BSF second step, backﬁlling allows to load
underutilized computing nodes with relatively low priority jobs. The ratio between CSS and
BF scheduling may be set during the BSF sub-batches allocation.
The following Section 5 presents simulation results of scheduling eﬃciency on diﬀerent
scheduling levels and depending on the job ﬂow and resource domains heterogeneity.

5
5.1

Simulation Studies
Job Distribution Quality

The goal of the study is to estimate the properties of Dq indicator and it’s particular qualities
for a job ﬂow distribution. It should be noted that one of Dq core beneﬁts is that it does
not require a preliminary job scheduling [8] for selecting a suitable resource domain which
implies a relatively high job ﬂow distribution processing speed necessary for a large and complex
distributed systems. The following is the input data for the experiment: the computational
environment consists of 8 resource domains with diﬀerent randomly generated characteristics
849

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

Strategy
Random
Medium
Best

Successful, %
33,1
57,9
70

Alternatives
2,44
2,39
2,86

Time
40,14
39,13
36,89

Cost
1070,48
1101,15
943,65

Table 1: Job distribution results.
(the resource domains’ computational nodes number varies from 10 to 25 units; the scheduling
interval length is deﬁned as 600 time units of Grid simulator [14]; the job queues for each
domain already contain 19 randomly generated high priority user jobs); the next single user job
is taken (generated) from the global job ﬂow for the assignment to one of the available domains.
Kr and Cr coeﬃcients were selected on the basis of previous experiments: we assume, that Dq
parameters should be dynamically updated to comply with job ﬂow actual characteristics. The
goal of the experiment is to select the best assignment based on the job’s resource request
parameters as well as on known resource domains characteristics.
Three diﬀerent distribution strategies are considered in the experiment:
• Random - the job is assigned to a random resource domain;
• Best - the job is assigned to a resource domain providing the maximum Dq value;
• Medium - the job is assigned to a resource domain providing the minimum positive Dq
value.
The Best strategy assigns the job to a resource domain with the highest chances of successful
execution according to Dq value. The Medium strategy was brieﬂy discussed in Section 3 and
is intended to maximize resource domains utilization level, though it requires a ﬁne tuning of
the Dq threshold and weight coeﬃcients. The simulation results, namely distribution strategy,
percentage of jobs executed successfully, number of alternatives found, average job execution
time and cost, are presented in Table 1.
The results show that the Best strategy provided the best values for all considered job distribution and scheduling eﬃciency parameters: the maximum successful job execution percentage,
the minimum job execution time and cost. According to Dq value the most suitable, sometimes
even too advanced domains were selected for the job and hence the strategy provided the best
assignment for the particular job. From another hand, the Medium strategy showed a decent
successful job execution percentage result especially compared to Random. Other considered
parameters (the strategy provided the maximum job execution cost and time) demonstrate that
the Medium distribution allowed to execute jobs in the domains roughly satisfying the jobs resource requests thereby keeping domains with higher performance capacity in reserve. The
Random strategy showed inferior results both in terms of a single job distribution optimization
(compared to Best) and in terms of resource domains utilization level maximization (compared
to Medium).
Thus, Dq indicator can be used for job ﬂow distribution process depending on the certain
distribution strategy and optimizing execution of some particular jobs or the whole computational environment utilization and throughput.

5.2

Domain Level Resources Utilization Eﬃciency

The experiment concludes scheduling eﬃciency studies in a single resource domain using the
considered approaches CSS, BSF, Shifted CSS, and backﬁlling. The goal is to compare schedul850

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

Figure 1: Average job batch start time.

Figure 2: Average batch jobs processor time usage.
ing eﬃciency depending on the resource domain composition and speciﬁcally on the number of
available computational nodes. A series of studies were carried out with the simulation environment [14]. Each experiment includes the generation of an input batch of 15 user jobs as well as
the composition of a resource domain structure with local schedules deﬁned on the scheduling
interval. To compare the approaches’ behaviour under diﬀerent conditions the simulation was
conducted individually for diﬀerent numbers of available computational nodes {6, 10, 20, 30,
50, 75, 100, 150}. The investigation is performed in terms of comparing the scheduling results
obtained with the same input data by means of diﬀerent algorithms.
Scheduling eﬃciency is considered from the viewpoint of a job batch total slot utilization
time Tproc minimization, job batch start tstart and ﬁnish tf inish times minimization, and minimization of a combined criterion F = tstart + Tproc .
Figure 1 shows the average scheduled start times of the jobs obtained independently with all
considered scheduling approaches depending on the computational environment nodes number.
As one can see from Fig. 1, with an increasing amount of available computational nodes
backﬁlling reduces the average job batch start time down to zero (i.e. all batch jobs can start
at the very beginning of the scheduling interval). At the same time the average jobs’ start time
obtained with CSS is almost independent from the number of the nodes available. BSF, as
expected, provides the average job batch start time close to the one provided with backﬁlling
by ﬁlling unused by CSS time slots near beginning of the scheduling interval with relatively low
priority jobs. With a relatively large resource level an average job batch start time obtained
with Shifted CSS tends to a non-zero value since the most proﬁtable in terms of the optimization
criterion resources are generally allocated for more than one job. Thus, in case of heterogeneous
resource environment it is virtually impossible to start all the batch jobs at the beginning of
the scheduling interval using CSS (even shifted variation).
Figure 2 shows CSS, Shifted CSS, and BSF advantage over backﬁlling on the VO target
optimization criterion Tproc . It should be noted that with increasing of available resources
number the advantage of CSS and BSF over backﬁlling also increases.
851

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

Figure 3: Average batch jobs F value.
Figure 3 shows the value of the combined resource usage eﬃciency index F = tstart +Tproc . It
is important to note that the intersection between the Shifted CSS, BSF and backﬁlling graphs
implies that in case of a relatively low level of available resources backﬁlling or BSF (they
provide almost the same criterion F value) are more proﬁtable in comparison to Shifted CSS.
With the increasing computational environment size Shifted CSS becomes more advantageous
in terms of resource usage eﬃciency. The same conclusion can be drawn if we evaluate the
resource usage eﬃciency by the average batch jobs ﬁnish time.
Thus, the use of BSF is justiﬁed in virtually any conditions: this combined approach provides
competitive to backﬁlling values of the considered resource usage eﬃciency indexes, and at the
same time optimizes high-priority jobs execution performance. High priority jobs optimization
details are covered in the following subsection.

5.3

User Preferences and Resource Sharing in BSF

BSF performs scheduling on two independent job sub-batches with diﬀerent priority and service
policies. While the scheduling approaches for this two sub-batches are radically diﬀerent, combined they provide scheduling results comparable to backﬁlling in terms of resource utilization
level. However the real beneﬁt of BSF approach can be seen when scheduling results of the two
sub-batches are compared.
Another experiment was conducted with 12 available computational nodes as it provides
adequate overall resources utilization level during the scheduling interval (Figures 1 - 3). During
the single experiment the same initial set of 15 user jobs (as was described in subsection 5.1)
were divided into two sub-queues: the ﬁrst seven jobs were grouped into the ﬁrst-piority subbatch, the remaining eight user jobs were grouped into the second-priority sub-batch.
The scheduling of the ﬁrst-priority jobs was performed by CSS: the task of a total processor
time usage minimization was implemented as VO policy. Additionally a user criterion was
speciﬁed for each job of the ﬁrst sub-batch as a random variable with a uniform distribution
with two possible options: job execution time or cost minimization. Scheduling of the secondpriority jobs was performed by backﬁlling based on a dynamic data of resources utilization and
the ﬁrst sub-batch resource reservations.
Totally 4000 single experiments were conducted, the results are presented in Tables 2 and
3.
Table 2 comprises the results of the two BSF sub-batches scheduling outcomes in reference
to VO policy. As can be seen from the table, the ﬁrst-priority jobs schedule ensures better
average execution results by both job processing time and cost. This result was predictable
as the ﬁrst sub-batch scheduling method provides both time optimization and cost limitation.
At the same time scheduling of the second sub-batch was carried out using the remaining, less
852

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

Sub-batch
First Priority (CSS)
Second Priority (BF)

Start Time
175,1
121,8

Finish Time
222,3
207,9

Processor Time
139,3
207,2

F
314,4
329,7

Cost
1059,6
1130,5

Runtime
39,9
55,3

Cost
1121,8
1001,1

Table 2: BSF sub-batches scheduling results comparison.
User Criterion
Time
Cost

Start Time
145,3
202,8

Finish Time
185,2
258

Processor Time
126,5
154,2

Table 3: User jobs execution results comparison.
“beneﬁcial” resources without special optimization techniques. However, backﬁlling provides
better start and ﬁnish times for the second-priority jobs, thus ensuring total BSF job processing
time results are comparable to conventional backﬁlling.
The results of a single job execution depending on the user optimization criterion are presented in Table 3. It can be seen, that 12% gain in job execution cost for jobs with cost
optimization results in signiﬁcant loss in time execution parameters. The advantage for jobs
with time optimization at average reaches 30% on start time, ﬁnish time and runtime. It should
be noted, that jobs time optimization still provides better scheduling results compared to the
jobs from the second sub-batch.
Thus, the experiment results show, that while BSF guarantees almost the same job batch
scheduling results as backﬁlling, it provides means for more ﬂexible resource share policies
for virtual organizations and it’s users. This feature arises from the possibility of resource
redistribution according to diﬀerent factors constituting VO service policy.

6

Conclusions and Future Work

In this work, we study the problem of a job ﬂow distribution between several resource domains as well as compare the job ﬂow scheduling results in terms of VO policies deﬁned in a
resource domain. In order to increase distributed environment’s overall scheduling eﬃciency
we propose the general heuristic compatibility parameter Dq for a job and a single resource
domain. Simulation results show the beneﬁts of the proposed basic heuristic indicator over
random distribution. Based on a combination of the cyclic scheduling scheme and backﬁlling
the BSF hybrid approach is proposed. The simulation results show that depending on the
scheduling eﬃciency indicator each of the considered approaches may provide the best results.
In order to ensure the balanced scheduling results it is justiﬁed to use BSF: scheduling of high
priority jobs with CSS and further ﬁlling the remaining underutilized resources with backﬁlling.
Further research direction will be focused on CSS rescheduling based on the information about
computational nodes current state and performance.
Acknowledgments.
This work was partially supported by the Council on Grants of the President of the Russian
Federation for State Support of Young Scientists and Leading Scientiﬁc Schools (grants SS362.2014.9, YPhD-4148.2015), the Russian Foundation for Basic Research (grants 15-07-02259,
15-07-03401), and by the Ministry on Education and Science of the Russian Federation, task
no. 2014/123 (project no. 2268).
853

Multi-Level Job Flow Cyclic Scheduling Toporkov, Toporkova, Tselishchev, Yemelyanov and Potekhin

References
[1] The Moab adaptive computing suite.
http://www.adaptivecomputing.com/products/
moab-adaptive-computing-suite.php.
[2] F. Berman, R. Wolski, and H. Casanova. Adaptive computing on the Grid using AppLeS. Trans.
On Parallel and Distributed Systems, 14(4):369–382, 2003.
[3] H. Blanco, F. Guirado, J.L. Lrida, and V.M. Albornoz. MIP model scheduling for multi-clusters.
In Euro-Par 2012, pages 196–206, Heidelberg, 2012. Springer.
[4] R. Buyya, D. Abramson, and J. Giddy. Economic models for resource management and scheduling
in Grid computing. J. Concurrency and Computation, 14(5):1507–1542, 2002.
[5] M. Cafaro, M. Mirto, and G. Aloisio. Preference-based matchmaking of Grid resources with
CP-Nets. J. Grid Computing, 11(2):211–237, 2013.
[6] C. Castillo, G.N. Rouskas, and K. Harfoush. Resource co-allocation for large-scale distributed
environments. In 18th ACM International Symposium on High Performance Distributed Compuing,
pages 137–150, New York, USA, 2009. ACM.
[7] E. Elmroth and J. Tordsson. A standards-based Grid resource brokering service supporting advance
reservations, coallocation and cross-grid interoperability. J. of Concurrency and Computation,
25(18):2298–2335, 2009.
[8] C. Ernemann, V. Hamscher, and R. Yahyapour. Economic scheduling in Grid computing. In
D. Feitelson, L. Rudolph, and U. Schwiegelshohn, editors, JSSPP, volume 18, pages 128–152.
Springer, Heidelberg, 2002.
[9] K. Kurowski, J. Nabrzyski, A. Oleksiak, and J. Weglarz. Multicriteria aspects of Grid resource
management. In J. Nabrzyski, Schopf J.M., and J. Weglarz, editors, Grid resource management.
State of the Art and Future Trends, pages 271–293. Kluwer Acad. Publ., 2003.
[10] A. Mutz, R. Wolski, and J. Brevik. Eliciting honest value information in a batch-queue environment. In 8th IEEE/ACM International Conference on Grid Computing, pages 291–297, New York,
USA, 2007. ACM.
[11] A. Olteanu, F. Pop, C. Dobre, and V. Cristea. A dynamic rescheduling algorithm for resource
management in large scale dependable distributed systems. Computers and Mathematics with
Applications, 63(9):1409–1423, 2012.
[12] I. Rodero, D. Villegas, N. Bobroﬀ, Y. Liu, L. Fong, and S.M. Sadjadi. Enabling interoperability
among Grid meta-schedulers. J. Grid Computing, 11(2):311–336, 2013.
[13] V. Toporkov, A. Toporkova, A. Tselishchev, and D. Yemelyanov. Slot selection algorithms in
distributed computing. Journal of Supercomputing, 69(1):53–60, 2014.
[14] V. Toporkov, A. Tselishchev, D. Yemelyanov, and A. Bobchenkov. Composite scheduling strategies
in distributed computing with non-dedicated resources. Procedia Computer Science, 9:176–185,
2012.
[15] V. Toporkov, A. Tselishchev, D. Yemelyanov, and P. Potekhin. Metascheduling strategies in
distributed computing with non-dedicated resources. In W. Zamojski and J. Sugier, editors,
Dependability Problems of Complex Information Systems, Advances in Intelligent Systems and
Computing (AISC), volume 307, pages 129–148. Springer International Publishing Switzerland,
2015.
[16] D. Tsafrir, Y. Etsion, and D. Feitelson. Backﬁlling using system-generated predictions rather
than user runtime estimates. In Transactions on Parallel and Distributed Systems, pages 789–803.
IEEE, 2007.
[17] Z. Zhou, Z. Lan, W. Tang, and N. Desai. Reducing energy costs for IBM Blue Gene/P via
power-aware job scheduling. In Seventeenth Workshop on Job Scheduling Strategies for Parallel
Processing, pages 96–115, Massachusetts, USA, 2013.

854

