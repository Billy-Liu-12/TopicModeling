Procedia Computer Science
Volume 51, 2015, Pages 745–754
ICCS 2015 International Conference On Computational Science

Parallel Tools for Simulating the Depolarization Block
on a Neural Model
Salvatore Cuomo1 , Pasquale De Michele2 , Ardelio Galletti3 , and Giovanni Ponti2
1

University of Naples Federico II, Naples, Italy
salvatore.cuomo@unina.it
2
ENEA Research Center, Portici, Naples, Italy
{pasquale.demichele, giovanni.ponti}@enea.it
3
University of Naples Parthenope, Naples, Italy
ardelio.galletti@uniparthenope.it

Abstract
The prototyping and the development of computational codes for biological models, in terms
of reliability, eﬃcient and portable building blocks allow to simulate real cerebral behaviours
and to validate theories and experiments. A critical issue is the tuning of a model by means
of several numerical simulations with the aim to reproduce real scenarios. This requires a
huge amount of computational resources to assess the impact of parameters that inﬂuence the
neuronal response. In this paper, we describe how parallel tools are adopted to simulate the socalled depolarization block of a CA1 pyramidal cell of hippocampus. Here, the high performance
computing techniques are adopted in order to achieve a more eﬃcient model simulation. Finally,
we analyse the performance of this neural model, investigating the scalability and beneﬁts on
multi-core and on parallel and distributed architectures.
Keywords: Parallel Computing, Computational Neuroscience, Multi-core Computing

1

Introduction

In the computational neuroscience context, many research papers use parallel and scientiﬁc computing tools in order to perform simulations of complex neural models [2, 3, 10, 17]. There exist
many software that allow to simulate the neuronal dynamics. Simulations are typically based
on the approach of compartmental modelling: each cell consists of many iso-potential compartments and each compartment is modelled with equations that describes electrical currents [15].
The widely diﬀused nerve simulation environments are NEURON [7] and GENESIS [9]. These
frameworks have large communities where the users collect and maintain databases of published
computational models. Here, we choose NEURON.
Generally, the building of a neural model, reproducing a real scenario, requires long and deep
steps to tune several biological parameters through numerical simulations. These tasks are
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.194

745

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

needed to validate the model and they represent the critical issue in terms of computational
resources, both in the time and in the memory allocation. In this paper, we focus on the model
described in [3], where a single experiment has an average execution time of T ≈ 11h, on a
“Intel Xeon E5410” CPU at 2.33GHz. The tuning phase of this model requires several thousands of simulations, in order to determine the correct setting of overall biological parameters
that characterize neuron. It is clear that it is very important to ﬁnd alternative strategies for
reducing the impact of simulation time in a single experiment. Generally, neuroscience papers
highlight the biological results, without to deal with the computational aspects related to the
parameter settings and/or to the simulation strategies; they do not report detailed analysis of
the (eventually) parallel and distributed implementations of the model [4]. Here, we analyse
these aspects for the model presented in [3], based on [1, 5, 18], where the biological phenomenon of the depolarization block for the CA1 pyramidal neuron of the hippocampus region
is investigated. In this work, we have formalized the computational framework underlying the
model, and we have presented parallel tools exploited for eﬃcient simulations. Finally, we have
reported the performance of the proposed parallel implementation, analysing its scalability and
beneﬁts on multi-core and on parallel and distributed architectures. The paper is structured as
follows: Section 2 reports the computational model; in Section 3, we describe the morphological
model of the CA1 cell; Section 4 is devoted to the parallel implementation; Section 5 shows the
main performance results and, ﬁnally, in Section 6 we draw the conclusions.

2

Computational neural models

There exist many software that allow to simulate the neuronal dynamics; the simulations of
single neuron and neural network models are typically based on the approach of compartmental
modelling. In this strategy, each cell consists of many iso-potential compartments and each
compartment is modelled with equations that describe electrical currents [14]. Under this
assumption, there are no restrictions on the neuronal membrane property description and it
does not mean that scheme are “inﬁnitely detailed”, but that the choice of details to include
in the model and/or to omit depends on the mathematical model that describes the neural
dynamic [6]. One of the widely diﬀused nerve simulation environments is NEURON [7], which
can solve problems at several levels of detail. This software is very ﬂexible and provides many
advantages: ﬁrstly, users handle directly with neuroscience concepts; secondly, NEURON oﬀers
functions that speciﬁcally tailored to control the simulation and to plot the results; thirdly, its
computational engine is very eﬃcient because of the special integrators speciﬁcally developed to
deal with nerve diﬀerential equations [6]. NEURON acts as a problem solving environment able
to create and to use empirically-based models of both single cell and networks of neurons [1] in
an easy way.
To building up the computational model based on the approach of compartmental modelling,
it is necessary to write several NEURON codes that implement diﬀerent biological aspects. In
Figure 1, we brieﬂy reports the scheme of our compartmental model that consists of four main
packages. The ﬁrst set of codes concerns the morphology of the neuron. In fact, in this nerve
simulation environment, the geometry of a neuron is described in terms of cylindrical sections.
Each section has basic properties, which are automatically inserted by software environment,
and other mechanisms (i.e., channels) with their own properties, which can be explicitly plug
into a section. The second group of codes is needed to introduce 3D spatial information into
the model. These codes are very useful to reuse, also in other models, the deﬁnition of the
neuron in a very simple way. The third set of codes concerns the deﬁnition of new mechanisms
reproducing the dynamics of the channels characterizing a speciﬁc neuron. Finally, the fourth
746

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

class of codes is adopted to deﬁne the scheme reproducing the neuron’s dynamic, in order
to reproduce the behaviour of the the real neuron. In Section 3, we will discuss about the
computational framework of the model in [3].

Figure 1: Model of cell in NEURON.

3

A morphological model of a CA1 pyramidal neuron

In [3] a morphological model of a CA1 pyramidal neuron is presented. This approach uses a CA1
pyramidal neuron implemented by merging the model a CA1 pyramidal neuron implemented by
merging the model in [13] (ModelDB accession number 20212), including a large set of currents
experimentally observed in the CA1 neurons, and the model in [16] (ModelDB accession number
112546), that has updated kinetics and distributions of dendritic channels (reviewed in [11, 12]).
The authors focus on a particular behaviour of pyramidal CA1 neurons, which regularly ﬁre,
with some frequency adaptation, in response to constant increment steps of the input current.
Although, from the experimental point of view, the behaviour of these neurons, in relation to
values of input current much beyond the range of the linear increases, has not been suﬃciently
tested, it is well known that these neurons could stop ﬁring, reaching a depolarization block in
which the membrane potential, during the current injection, remains constant. Since very little
is known regarding the way in which the models are able to reproduce the depolarization block,
in [3] the authors explored the properties of the model of CA1 pyramidal neuron, highlighting
the conditions under which the neuron is able to enter a depolarization block. The simulations
in terms of biological results are shown in Figure 2. From a computational point of view,
the CA1 pyramidal neuron is a complex framework requiring a lot of classes that model the
neuronal morphology and numerical dynamics.
The tuning phase of the biological parameters characterizing this complex model has required several thousand of simulations in order to reproduce, in the correct way, the depolarization behaviour. As just stated, a serial simulation gives execution times that are incompatible
with the ability to replicate the biological phenomenon within a reasonable time-scale. In Section 4 we will show how parallel techniques could be implemented in order to reduce the overall
simulation time.
747

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

Figure 2: Comparison between the output of the biological experiments (top) and the CA1
model dynamics (bottom).

4

Parallel tools for CA1 model

We start from the neuron’s dynamics package shown in Figure 1, which reproduces the experiments on the CA1 cell. Figure 3 shows the model computational tree implemented in this
package. More in detail, ﬁrstly we create the synaptic connections stimulating the neuron
with the procedures create syn NMDA() and create syn GLU(). Then, the procedure init()
is devoted to the instrumentation, recording the potential values at each time step and the
times at which cell ﬁres, with the procedures potential record(), hh record Michele() and
spikerecord(). Finally, the procedure kernel() (in the red box), is called several times
in order to reproduce the laboratory experiments and represents the most expensive part of
the package. More in detail, kernel() calls the sub-procedures for the placement of the
synapses (place syn NMDA() and place syn GLU()), the application of the electrical stimuli to the synapses instantiating NEURON’s NetCon objects (stimul syn()) and the ﬁring
output information (potential hh syn print2() and spikeout()). kernel() also calls the
standard procedure run() (in the orange box), which integrates the model calling in turn
stdinit() (to initialize the model by invoking the native NEURON method finitialize()
) and continuerun() (to perform the simulations by calling the native NEURON method
fadvance()).

Figure 3: Function calls for the simulations of the CA1 model.
run(), called by kernel(), impacts on the ∼ 99% of the overall execution time, hence a crucial
748

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

Figure 4: Parallel framework for the CA1 model.

step is to speed up the overall simulations. Here, using a parallel methodology available on the
Problem Solving Environment (PSE) NEURON, we re-implemented all the neuron’s dynamics
package with new parallel codes. This PSE provides a complete suite of parallel tools, which
allow to implement parallel strategies on a cluster of workstations or any parallel computer for
free. As shown in Figure 4, we introduce a parallel layer where the underline communication
tool is the Message Passing Interface (MPI), drawn in the blue box. The yellow boxes represent
the sequential part of the code, related to the sections of the cell (in the orange box) split
among the available N processors (in the white boxes). NEURON’s classes that allow the
communication among the sections, resorting to MPI, are shown in the green boxes. More
in details, the NEURON’s multisplit technique [8] splits the cell into the minimum number
of pieces required for load balance. This approach leads several advantages: ﬁrstly, it is not
necessary to change the code deﬁning the cell type (i.e., the implementation of the morphology,
3D spatial information and mechanisms of the neuron); moreover, it allows you to exploit, in
the best possible way, the available computing resources.
In the Algorithm 1 the parallel version of kernel(), called P kernel(), is listed. Observe
that run() is replaced by statrun(), which calling the native NEURON method psolve()
integrates the model in a parallel context. P kernel(), in order to properly invoke the procedure
statrun(), which calls the method psolve() on any processor holding a set of cell sections,
needs to interface with the classes ParallelNetManager and ParallelContext that manage the
set-up and the running of a parallel simulation. In particular, the class ParallelNetManager
contains a collection of methods that can be used to manage the split cell. We have adapted
the basic functions of multisplit introducing necessary changes to its features. Obviously, the
introduction of the parallelization implies the need to address several administrative problems.
For example, processors can manage only the sections assigned to them. The NEURON’s
method section exists()is used in order to check the access to various cell sections; it returns
1 if the section exists and can be used, 0 otherwise.
Remarks on the performance of the parallel application are discussed in Section 5.
749

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

Algorithm 1 A light view of the P kernel() procedure
1: proc P kernel() {
2:
...
3:
for i th sim = 1, number of simulations {
4:
dbl precision(32)
5:
pc.multisplit()
6:
pc.set maxstep(100)
7:
...
8:
/*** Synapse placement phase ***/
9:
P place syn GLU NMDA(number of glu synapses)
10:
P place syn NMDA(number of NMDA synapses set1, number of glu synapses)
11:
...
12:
/*** Synapse stimulation phase ***/
13:
P stimul syn(number of glu synapses, number of nmda synapses set2,
synapse weights)
14:
...
15:
/*** Integration phase ***/
16:
statrun(tstop)
17:
...
18:
/*** Output information phase ***/
19:
if (section exists(‘‘soma’’, 0))
20:
P potential hh syn print2(number of glu synapses, section name,
i th sim+1)
21:
...
22:
if (section exists(‘‘soma’’, 0)) P spikeout()
23:
...
24:
pc.done()}}

5

Results

We have performed the simulations with NEURON (version 7.1), by using the model ﬁles available on ModelDB (http://senselab.med.yale.edu/ModelDB/), with identiﬁcation number
143719. All simulations were run with MPI using up to 32 cores (processors) on two diﬀerent
parallel systems: the S.Co.P.E. Grid infrastructure at University of Naples Federico II, Naples,
Italy, and the CRESCO3 infrastructure of the ENEA Research Center, Portici, Naples, Italy.
The S.Co.P.E. infrastructure consists of 304 blade servers each of which equipped with 2 “Intel
Xeon E5410” 4−cores CPU (8−cores for each node) at 2.33GHz (2432 cores in total), connected
with 10Gbps Inﬁniband links, with 8 or 16GB/RAM per node. The CRESCO3 infrastructure
consists of 84 blade servers each of which equipped with 2 “AMD Opteron 6234TM” 12−cores
sockets (24−cores for each node) at 2.4GHz (2016 cores in total), connected with 40Gbps Inﬁniband links, with 64GB/RAM per node. Despite to the large number of cores available for
the simulations, the choice of using up to 32 cores is related to the fact that, in general, the
multisplit method scales well on the test models on shared memory machines up to 8 processors
and gives worthwhile reduction in runtime on 16 processors [8].
In order to evaluate how the model scales on the multi-core architectures mentioned above,
related to the number of involved cores and blade servers, in the following we report performance
test results. In these tests, we ﬁxed the maximum piece size factor to 0.3: then, we split the cell
750

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

in a certain number of pieces, also depending on the number of available cores, which size is at
most 30% of the initial size. The multisplit technique requires several phases for the resolution
of the neural model. In detail, the overall execution time (i.e., run time) is given by the sum
of the amount of time required for setting the split of the cell (i.e., set-up time), the time
spent by the hosts waiting for the other hosts (i.e., wait time), the amount of time required
for each host to complete its part of calculation (i.e., step time), and the amount of time spent
by the hosts to communicate with each other (i.e., the split-cell communication time). In
Table 1 we show the details of the execution of the model, for the master core related on several
multisplit simulations up to 4 blade servers of the S.Co.P.E. infrastructure (32 cores), and in
Table 2 we report results related to multisplit simulations up to 2 blade servers of the CRESCO3
infrastructure (32 cores). We remark that the execution times reported in Tables 1 and 2 are
related to a light execution of the model: all the procedures described in Section 4 are executed
just 1 time. Moreover, values for runtime (Run), set-up time (Set-up), wait time (Wait), step
time (Step) and split-cell communication time (SCCT) are expressed in seconds (s). Finally,
the speed-up (S-UP) and the relative eﬃciency (EFF) are reported.
From Table 1 we observe that the model well scales on a single server (node) of the S.Co.P.E.
infrastructure, moving from 1 up to 8 cores, with the speed up is 5.11 w.r.t. the single core test
and the eﬃciency is equal to 64%. Moving from 1 up to 4 nodes, for a maximum number of 32
cores, we observe an high worsening of the performance. In particular, the step time remains
substantially the same with 8, 16 and 32, while observing slight worsening of the order of some
tens of seconds, but is the split-cell communication time that aﬀects the performance. This is
due to two facts: ﬁrstly, moving from 8 to 16 and 32 cores the memory is not shared, then the
communications have a tremendous impact on the performance; secondly, as we can observe in
Figure 5, the load imbalance becomes too high, then further increases the number of cores, so
we can only observe performance degradation. More in detail, the load imbalance is computed
by NEURON using the following rule
100 × cmax ×

nhosts
− 100
c

where cmax is the maximum complexity (equal to ∼ 6640) for a speciﬁc processor, nhosts is the
number of processors used in the simulation and c is the total complexity of the model (equal
to ∼ 17500).
Servers×Cores
1×1
1×8
2×8
4×8

Run
2396
469
969
2101

Set-up
0
0.83
0.97
1.99

Wait
0
0.001
0.004
0.014

Step
2396
451
466
471

SCCT
0%
17
502
1628

S-UP
1
5.11
2.47
1.13

EFF
1
0.64
0.15
0.04

Table 1: Performance in function of the number of involved cores for a multisplit simulation up
to 4 blade servers of the S.Co.P.E. infrastructure.
Also from Table 2 we observe that the model scales on a single server (node) of the CRESCO
infrastructure, moving from 1 up to 16 cores. In detail, with 8 cores the speed up is 4.28 w.r.t.
the single core test and the eﬃciency is equal to 54%. Moreover, with 16 cores the runtime is
4.34s and the eﬃciency is 15%. This fact conﬁrms what has been said before: shared memory
among the cores positively impacts on the performance, but increasing the number of cores gives
a load imbalance too high (see Figure 5) and this fact negatively impacts on the performance.
In particular, the step time remains the same, and the split-cell communication time decreases
751

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

Figure 5: Percentage of load imbalance related to the complexity of the model in function of
the number of processor used.
in the order of about ten seconds. Moving from 1 up to 2 nodes, for a maximum number of
32 cores, we observe a worsening of the performance, due to the load imbalance and to the
communications among the cores.
Servers×Cores
1×1
1×8
1×16
1×24+1×8

Run
1
412
406
425

Set-up
0
0.68
0.75
0.98

Wait
0
0
0
0.001

Step
1764
373
376
362

SCCT
0
38
29
62

S-UP
1
4.28
4.34
4.15

EFF
1
0.54
0.27
0.13

Table 2: Performance in function of the number of involved cores for a multisplit simulation up
to 2 blade servers of the CRESCO3 infrastructure.
Finally, we also performed other tests in order to evaluate the impacts of a variation of the
maximum piece size factor. In some cases, we observed slight improvements of the performance,
but not such as to considerably impact the speed ups.

6

Conclusions

The simulation of biological neurons is a challenging application from a computational point of
view. The calibration and the set-up of a neuronal cell require mathematical models in order
to simulate the biological behaviour, dependent of the cell type, and sophisticated programming environments for developing simulation codes. In the practice, building up a model that
752

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti

mimics the real behaviour of a biological cell, requires algorithms and communication strategies
computationally expensive. In this work we proposed a parallel implementation of an existing
CA1 cell model, adopted to simulate the depolarization block eﬀect, with the aims to formalize
the computational model, and to analyse the performance of the proposed parallel code on a
multi-core architecture. We observed that the main problem that has to be overcome is the
communication between compartments of a cell in a parallel simulation environment. We remarked that the cell model does not well scale on a cluster computing environment, when the
spike communications are not carried out on a dedicated bus. Hence, we strongly suggest to
use general-purpose simulation environments that support parallel multi-core programming. In
our present research, we are working on the optimization on a massively parallel GPU architecture and we are investigating the compatibility of NEURON with GPU computing. Finally,
we remark that such a model can be suitable adopted to analyze some applicative scenarios.
In particular, we have been encouraged in investigating the context of neural biological models
to support tasks and activities related to the Italian PON01 01864 project “LAMRECOR –
Logistica avanzata per la mobilit`
a di persone e merci: modelli matematici e sperimentazioni
per nuovi protocolli di recapito della corrispondenza”. The project aims at investigating, developing and activating an integrated technological system on a prototypical level which serves the
purpose of starting up new advanced logistics activities to delivery goods and sorting mail by
means of transport as two-wheeled means, electric cycles and vans and by devices and systems
that contribute to the improvement of safety, monitoring and tracking sorting equipment. For
this reason, we are studying a strategy to adapt the model to the project in order to ease its
work package tasks.

7

Acknowledgements

This work has been partially supported by the Italian PON project “SIRIO: Servizi per
l’Infrastruttura di Rete wIreless Oltre il 3G”, and by the Italian PON01 01864 project “LAMRECOR – Logistica avanzata per la mobilit`
a di persone e merci: modelli matematici e sperimentazioni per nuovi protocolli di recapito della corrispondenza”. We also thank ENEA – Portici
Research Center to provide the CRESCO HPC computational cluster for our experiments.

References
[1] P. Andersen, R. Morris, D. Amaral, T. Bliss, and J. O’Keede. The Hippocampus Book. Oxford:
University Press, 2007.
[2] D. Bianchi, P. De Michele, C. Marchetti, B. Tirozzi, S. Cuomo, H. Marie, and M. Migliore. Eﬀects
of increasing creb-dependent transcription on the storage and recall processes in a hippocampal
ca1 microcircuit. Hippocampus, 24(2):165–177, 2014.
[3] D. Bianchi, A. Marasco, A. Limongiello, C. Marchetti, H. Marie, B. Tirozzi, and M. Migliore.
On the mechanisms underlying the depolarization block in the spiking dynamics of ca1 pyramidal
neurons. J. Comput. Neurosc., 33(2):207–225, 2012.
[4] Salvatore Cuomo, Pasquale De Michele, and Francesco Piccialli. A performance evaluation of
a parallel biological network microcircuit in neuron. International Journal of Distributed and
Parallel System, 2013.
[5] H. Eichenbaum, P. Dunchenko, E. Wood, M. Shapiro, and H. Tanila. The hippocampus, memory
and place cells: Is it spatial memory or a memory of space? NEURON, 23:209–226, 1999.
[6] M.L. Hines and N.T. Carnevale. The neuron simulation environment. Neural Computation, 9:1179–
1209, 1997.

753

Parallel Tools for Simulating the Depolarization Block
S. Cuomo, P. De Michele, A. Galletti and G. Ponti
[7] M.L. Hines and N.T. Carnevale. The Handbook of Brain Theory and Neural Networks, 2nd ed.,
chapter The NEURON simulation environment, pages 769–773. MIT Press. Cambridge, 2003.
[8] M.L. Hines, H. Markram, and F. Schurmann. Fully implicit parallel simulation of single neurons.
J Comput Neurosci, 25(3):439–448, 2008.
[9] James M. Bower, David Beeman, et al. The Book of GENESIS. Internet Edition, 2003.
[10] Haojie Mao, Benjamin S Elkin, Vinay V Genthikatti, Barclay Morrison III, and King H Yang.
Why is ca3 more vulnerable than ca1 in experimental models of controlled cortical impact-induced
brain injury? Journal of neurotrauma, 30(17):1521–1530, 2013.
[11] M. Migliore and G.M. Shepherd. Emerging rules for the distributions of active dendritic conductances. Nat Rev Neurosci, 3(5):362–370, 2002.
[12] M. Migliore and G.M. Shepherd. Functional signiﬁcance of axonal kv7 channels in hippocampal
pyramidal neurons. Nat Rev Neurosci, 6(10):810–818, 2005.
[13] P. Poirazi et al. Pyramidal Neuron as Two-Layer Neural Network. Neuron, 37:989–999, 2003.
[14] W. Rall. Branching dendritic trees and motoneuron membrane resistivity. Exp. Neurol., 1:491–527,
1959.
[15] W. Rall. Theory and physiological properties of dendrites. Ann. N.Y. Acad. Sci., 96:1071–1092,
1962.
[16] M.M. Shah, M. Migliore, I. Valencia, E.C. Cooper, and D.A. Brown. Functional signiﬁcance of
axonal kv7 channels in hippocampal pyramidal neurons. P Natl Acad Sci USA, 105:7869–7874,
2008.
[17] E.N. Warman, D.M. Durand, and G.L. Yuen. Reconstruction of hippocampal ca1 pyramidal cell
electrophysiology by computer simulation. Journal of Neurophysiology, 71(6):2033–2045, 1994.
[18] E. Wood, P. Dunchenko, and H. Eichenbaum. The global record of memory in hippocampal
neuronal activity. NATURE, 397:613–616, 1999.

754

