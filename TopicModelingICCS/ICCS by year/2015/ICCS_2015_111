Procedia Computer Science
Volume 51, 2015, Pages 9–18
ICCS 2015 International Conference On Computational Science

Diarchy: An Optimized Management Approach
for MapReduce Masters
Bunjamin Memishi1 , Mar´ıa S. P´erez1 , and Gabriel Antoniu2
1

2

OEG, Universidad Polit´ecnica de Madrid, Madrid, Spain
{bmemishi,mperez}@fi.upm.es
Inria, Rennes Bretagne Atlantique Research Centre, Rennes, France
gabriel.antoniu@inria.fr

Abstract
The MapReduce community is progressively replacing the classic Hadoop with Yarn, the secondgeneration Hadoop (MapReduce 2.0). This transition is being made due to many reasons, but
primarily because of some scalability drawbacks of the classic Hadoop. The new framework has
appropriately addressed this issue and is being praised for its multi-functionality. In this paper
we carry out a probabilistic analysis that emphasizes some reliability concerns of Yarn at the
job master level. This is a critical point, since the failures of a job master involves the failure of
all the workers managed by such a master. In this paper, we propose Diarchy, a novel system
for the management of job masters. Its aim is to increase the reliability of Yarn, based on the
sharing and backup of responsibilities between two masters working as peers. The evaluation
results show that Diarchy outperforms the reliability performance of Yarn in diﬀerent setups,
regardless of cluster size, type of job, or average failure rate and suggest a positive impact of
this approach compared to the traditional, single-master Hadoop architecture.
Keywords: MapReduce, Hadoop, Yarn, fault tolerance

1

Introduction

Hadoop has been widely used during the last years as the state-of-the-art open source implementation of the MapReduce programming model proposed by Google [7]. Over these years,
the traditional version of Hadoop has faced several shortcomings on large-scale systems, concerning scalability, reliability and availability. The Yarn (Yet Another Resource Negotiator )
project has recently been developed with the aim of addressing these problems [11].
In the classic version of Hadoop, a central entity (the JobTracker) handles both resource
management and job scheduling. The key idea behind Yarn is to separate concerns, by splitting
up the major functionalities of the JobTracker, resource management and job scheduling/monitoring, into separate entities. In the new architecture, there is a global ResourceManager (RM)
and per-application ApplicationMaster (AM). The ResourceManager and a per-node slave, the
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2015.05.179

9

Diarchy: An optimized management approach . . .

Memishi, P´erez and Antoniu

NodeManager (NM) compose the data-computation framework. The per-application ApplicationMaster is in charge of negotiating resources from the ResourceManager and working with
the NodeManager(s) to execute and monitor the progress of the tasks. The Resource Manager
includes two components: a Scheduler and Application Manager. Whereas the Scheduler is in
charge of resource allocation, the Application Manager accepts job submissions, and initiates
the ﬁrst job container for the job master (Application Master). This architectural change has
as main goals to provide scalability and remove the single point of failure presented by the JobTracker. However, the resource scheduler, the application manager and the application master
now become single points of failure in the Yarn architecture.
This paper proposes a new architecture, called Diarchy, which aims to increase the reliability
of Yarn, without decreasing its performance and scalability. Diarchy is based on the sharing and
backup of responsibilities between two master peers. For the sake of simplicity, the paper only
illustrates our solution for the application master. However, this methodology can be directly
applied to the other two central entities: the resource scheduler and the application manager.
As a summary, this paper has the following main contributions:
1. Deﬁnition of the reliability problem of Yarn from a probabilistic point of view.
2. Design of a new model, called Diarchy, based on responsibilities delegation between peers.
3. Evaluation of Diarchy and comparison with the behavior of Yarn.
The remainder of this work is organized as follows. We deﬁne the problem in Section 2. We
introduce the Diarchy architecture in Section 3. We evaluate the Diarchy approach in Section
4. Section 5 discusses the related work. We conclude the paper in Section 6.

2

Problem deﬁnition

We analyze, from a probabilistic point of view, the impact of failure of MapReduce masters in a
large-scale environment scenario. A sketch of this analysis is illustrated in Figure 1. According
to [9], MapReduce jobs in Industry clusters incur 5 failures on average. Our analysis builds on
this assumption. Many approaches have been dealt with the failures of generic tasks, but as far
as we know, none of them is focused on the failures of masters in Yarn. As we can see in Figure
1, the Case 1 shows a normal working state in Yarn. In this case, we have MX MapReduce
masters and n + m + · · · + s workers, and all of them work perfectly. Case 2 shows a scenario
in which one worker fails. This does not aﬀect to other workers. Our work focuses on the Case
3, in which the failure in a master implies a failure in its workers.
Let us consider a cluster S that runs 1 million jobs (J = 1,000,000) per day. Let us suppose
each job needs around 350 slave tasks (NT = 350) to complete. One of these tasks is the master
task TM , which controls the other workers tasks TW . As previously mentioned, a cluster has
an average failure rate of 5 tasks per job (NF = 5). Since the master is executed as any other
tasks, its failure probability, P (FM ), has the same failure probability of other tasks, that is, the
workers failure probability, P (FW ). Both are equivalent to the task failure probability, P (FT ):
P (FM ) = P (FW ) = P (FT )

(1)

According to Laplace rule, the failure probability for each task is:
P (FT ) =

1
× NF
NT

Therefore, in our scenario, we get: P (FT ) =
10

1
350

×5=

(2)
1
70

Diarchy: An optimized management approach . . .

ƉƉůŝĐĂƚŝŽŶ
DĂŶĂŐĞƌ

ϭ

Ϯ

Dϭ
DϮ

Memishi, P´erez and Antoniu

ƉƉůŝĐĂƚŝŽŶ
DĂŶĂŐĞƌ

Dϭ

Dy

͘͘͘

DϮ

tϭ

͘͘͘

Dy

tϭ
tƐ
tŶ

tϮ

͘͘͘

tƐ
tŶ

͘͘͘
tϭ

tϮ

͘͘͘

tŵ

tϭ

tϮ

tϮ

tŵ

Dϭ

Dy

͘͘͘

͘͘͘

DϮ

tϭ

tϭ

tϮ

ƉƉůŝĐĂƚŝŽŶ
DĂŶĂŐĞƌ

ϯď

Dϭ

DϮ

tϭ
tϮ

ƉƉůŝĐĂƚŝŽŶ
DĂŶĂŐĞƌ

ϯĂ

͘͘͘

͘͘͘

͘͘͘

Dy

tϭ

tƐ
tϮ

͘͘͘

tƐ

͘͘͘

tŶ
tϭ
tϮ

͘͘͘

tŵ

tϭ

tϮ

͘͘͘

tŶ

tϮ

͘͘͘

tϭ

tϮ

͘͘͘

tŵ

tϭ

tϮ

Figure 1: Yarn architecture in diﬀerent scenarios. Case 1. Normal working state. Case 2.
Failures among workers. Case 3a and 3b. Failure among masters. Yarn does not have a
solution for Case 3a. The consequence of this is Case 3b (3a 3b).
By approximating the binary distribution β as a normal distribution N where Q = 1 −
P (FT ), we can calculate the total number of failed tasks, FT 1 :
FT = β (NT ; P (FT )) ≈ NT

NT P (FT );

NT P (FT )Q

(3)

In our case, according to the above formula we have:
69
1
;
FT ≈ N 350,000,000
70
70 × 70 × 350,000,000 ≈ N (5,000,000; 2220)
Consequently, the number of failed masters, FM is:

FM ≈ N 1,000,000 ×

1
70 ;

2

1
70

×

69
70

× 1,000,000 ≈ N (14,286; 119)

This is a very large number , taking into account that a potential failure of these masters
will cause re-execution of the same number of jobs. Each of these failed masters, managing a
considerable amount of tasks, will consequently involve the loss of the progress of these tasks,
FW M = FM × NT = 14,286 × 350 = 5,000,100, being FW M the number of failed workers by the
failure of a master. This means that, in the worst-case assumption, the number of failed tasks
would be this number times 2, because of the addition of the probability of failure of worker
tasks. This number would go up to 10 million per day. In other words, 2.86% of the tasks needs
to be re-executed for a million job cluster. The resource utilization numbers we get are even
higher. If each re-executed job uses 10 min on average to complete, this will represent a huge
delay, making it impossible a close to optimal resource utilization as expected in Yarn [11].

3

Diarchy algorithm

As the name suggests, our approach (Diarchy) is inspired by an old form of government which
is still used in some countries. This government system has two individuals, called diarchs, in
1 More

2 The

information: http://www.encyclopediaofmath.org/index.php/Probability_distribution
ﬁrst value is the master failure probability rate, and the second value its standard deviation.

11

Diarchy: An optimized management approach . . .

Memishi, P´erez and Antoniu

ƉƉůŝĐĂƚŝŽŶ
DĂŶĂŐĞƌ
Dϭ;ϮͿ

DϮ;ϭͿ

tϭ

tŶнǆ

͘͘͘
tϮ

tϯ

͘͘͘

tŶ

tŶнϯ

tŶнϭ

tŶнϮ

Figure 2: Diarchy architecture.

charge of governing the country. Diarchs share the responsibilities and report the progress state
of their work to each other. In this way, Diarch 1 is informed of the duties of Diarch 2 and
viceversa. In a wider context, diarchy is nowadays used for deﬁning a dual rule system for both
organizations or governments.
Our approach, called the Diarchy algorithm, is based on the diarchy ruling as follows: in the
applications master queue, there are two jobs, J1 and J2 , waiting to be run. The application
manager will assign one master to each job, TM1 ∈ J1 and TM2 ∈ J2 , while informing both of
them of their peers. If something happens to TM1 , the other peer TM2 will be in charge by
the virtue of delegation. In the same way, if something happens to TM2 , the respective peer
TM1 will take the responsibility for it. Along the time, both masters will behave as peers, and
apart from the progress score of their workers, they will also receive the progress score of their
peer workers. In order to achieve this, the application manager waits for two consecutive jobs
to arrive in the queue and then submits them both for execution. This is feasible, since the
load of a master node is signiﬁcantly lower than the worker nodes one. Therefore, an additional
progress score from its peer workers would not represent potential danger or misbehavior for
any of the masters. Figure 2 shows the Diarchy algorithm in a graphical way.

3.1

Diarchy performance

One of the major issues of failure detection mechanisms in MapReduce frameworks is the proper
usage and conﬁguration of an important parameter, the heartbeat. By default, missing a certain
number of heartbeats is used for detecting the entities failures in MapReduce. Besides from
serving as acknowledge message to the master, indicating that a worker is alive, heartbeats are
also a channel for other kind of messages. As a part of the heartbeat, a worker will indicate
whether it is ready to run a new task, and if it is, the master will allocate a task, which is used
to communicate to the worker using the heartbeat return value [13]. In the case of the Diarchy
algorithm, as each worker reports in parallel to both masters, this will cause higher bandwidth
utilization. In order to avoid this, the heartbeat will only report to a master, alternating the
master in every iteration. Namely, if in the current Yarn version, this report value is sent every
t seconds, the Diarchy algorithm will require each master to be informed every 2 × t seconds,
with the aim of optimizing the network utilization.
Now, the probability value of the failure rate by using the Diarchy algorithm is:
P (TM ) =
12

NF
NF
×
NT
NT

(4)

Diarchy: An optimized management approach . . .

Memishi, P´erez and Antoniu

since both masters have to fail in the case of a master failure.
1
1
1
Therefore, in our study case we have: P (TM ) = 70
× 70
= 4900
1
And thus, the number of failed masters is X = β 1,000,000; 4900
≈ N (204; 14)
This formula provides the average failure rate for Diarchy, taking into account that when
both of the master peers fail, they are considered as one failure, as previously mentioned.
Consequently, the real number of failed masters would be FM = N (NM ; P (FM )) × 2
NT
more reliable than the default Yarn. This
As we can notice, the Diarchy algorithm is N
F
means that Diarchy puts a lower boundary in the worst case assumption, with the number of
failed tasks not surpassing 5 millions per day. In other words, the new percentage margin is
1.43% of possible re-executions, instead of 2.86% as it was with the default Yarn framework.

3.2

Going general: a possible m-peers approach

Theoretically, the Diarchy algorithm could work with more peers (let us say m peers) than those
assigned in the default proposal, that is, 2. In this way, the fault tolerance provided by this
hypothetical framework would be higher. However, in practice, this is not advisable, because
of three reasons: (i) network overhead ; (ii) failure detection eﬃciency and (iii) abstraction
complexity. Below we explain in depth all these issues.
By using more than 2 peers in a Diarchy scheme, all the workers have to report their
progress to the additional masters. This would increase the number of messages exchanged in
the framework, since there has to be a message interaction between m masters and n workers.
The default heartbeat value in Yarn ranges from 1 to 3 seconds, depending on diﬀerent attributes
such as cluster size, type of jobs, etc. If this interval stays unchanged, the network load is
increased proportionally to the number of masters. This is unfeasible, thus it would be necessary
to increase the default heartbeat value.
By default, the MapReduce failure detection service only addresses crash and crash-recovery
failures. If the heartbeat message of a task has not been sent after a given threshold (600
seconds, by default), the master will mark the task as failed and will perform a set of steps.
Namely, it requests an additional container for the task and reschedules its execution, trying
to avoid rescheduling the task on the same node where it has previously failed. An earlier
speculative execution of failed tasks is highly prioritized to detect if a tasks fails repeatedly due
to a bug. If this is the case, then a master could invoke stopping the job earlier.
In failure detection, there are two metrics that provide the goodness of the mechanism [4]:
(i) Completeness, which requires that a heartbeat-based detector eventually suspects every task
that actually crashes; and (ii) Accuracy, which restricts the mistakes that a heartbeat-based
detector can make. By using an m-peer scheme, the failure detection mechanism can decrease
the completeness property and therefore, to decrease the failure detection eﬃciency. This
is due to the fact that as the heartbeat would be higher, some failures could not be detected.
Finally, an important feature of Diarchy is its simplicity. Keeping two peers maintains the
abstraction simplicity. However, if the number of master peers is increased, the abstraction
complexity will be increased, since it would be necessary to design a more complex protocol
to be used in case of failure of one of the masters.

4

Evaluation

This section provides an evaluation of the Diarchy algorithm. The evaluation is based on the
following parameters: job size, cluster size, and failure rate, because they aﬀect directly in the
behaviour of the Application Master. First, the impact of each parameter is analyzed separately.
13

Diarchy: An optimized management approach . . .

600

160

Yarn
Diarchy

140

400

300

200

100

120

Yarn
Diarchy

100
80
60
40

Master failure rate

500

Master failure rate

Master failure rate

600

Memishi, P´erez and Antoniu

500

400

Yarn
Diarchy

300

200

100
20

0
100

200

300

400

500

600

700

800

900

1000

0
100

300

400

500

600

700

800

Number of tasks per job

Number of tasks per job

(a) Keeping constant NF = 5

200

900

1000

0
100

200

300

400

500

600

700

800

900

1000

Number of tasks per job

(b) NF = 5 per every 350 tasks on(c) NF = 5 per every 100 tasks on
average
average

Figure 3: Experimental failure rate, according to the number of tasks per job.

Subsequently, we have evaluated how these parameters are related by means of the following
scenarios: job size vs. failure rate, job size vs. cluster size, and cluster size vs. failure rate.
The Diarchy algorithm has been evaluated on a round-based simulator. This simulator
enables the evaluation of all the important parameters of Hadoop, including the default functioning of Yarn. On top of Yarn, we have implemented the Diarchy algorithm.
Along the experiments, if not stated otherwise, the default conﬁguration of the simulating
environment is J = 10,000 jobs in cluster S, each of the jobs composed by NT = 350 tasks
(one for master, the rest for worker nodes), and with NF = 5 task failure rate. For the sake of
simplicity and eﬃciency, a single value was analyzed, the master failure rate.

4.1

Single parameter tests

Job size. In this ﬁrst set of experiments, we compare Diarchy and the default Yarn in a cluster
with diﬀerent job workloads. In practice, users submit jobs which consist on diﬀerent workloads,
depending on the user application. Consequently, the MapReduce framework allocates an
estimated number of tasks for every workload.
In the three plots of Figure 3, we have run experiments with job workloads whose number of
tasks ranges from 100 up to 1000. In Figure 3a we assume that when a job increases its number
of tasks, the master failure probability gets lower. This is explained by our assumption that,
independently of the number of tasks, we keep a constant number of failures per job. At ﬁrst,
we notice that Yarn has a poor behavior when the number of tasks is 100. While the master
failure reaches the value of 500 in Yarn, the Diarchy execution value remains by far lower,
not exceeding 50. As expected, the failure rate in bigger workloads demonstrates relatively
smaller values for both executions. However, Diarchy again outperforms Yarn, by showing low
boundary values that are near to zero.
Figure 3b shows the results of the experiments introducing a diﬀerent setup, where we
assume that the failure rate is proportional to the number of tasks by a factor 5 : 350. On
average, Hadoop jobs on state-of-the-art platforms have small workloads [9]. This means that
the smallest workload in the experiment, which consists of only 100 tasks, has an approximate
failure rate of 1.43, the workload with 200 tasks would have a failure rate of 2.86 and so on,
until the largest workload, which consists of 1000 tasks, having an average failure rate of 14.29.
We observe that while Yarn failure rate ranges from 110 to 160 master failures rates for 10,000
jobs, the highest value in Diarchy reaches 4.8, which is considerably lower compared to Yarn.
In Figure 3c we can see the results of the experiments by using a diﬀerent ratio between
14

Diarchy: An optimized management approach . . .

Memishi, P´erez and Antoniu

300

Yarn
Diarchy

Master failure rate

Master failure rate

15000

10000

5000

0
0

2

4

6

8

Number of jobs per cluster

(a) Number of jobs.

10
5

x 10

Yarn
Diarchy

250

200

150

100

50

0
1

2

3

4

5

6

7

8

9

10

Number of failures per job

(b) Number of failures.

Figure 4: Experimental failure rate, according to the number of (a) jobs per cluster and (b)
failures per job.

failure rate and task number, that is, 5 : 100. In this case, we are considering an environment
with a higher number of failures on average. For this reason, the number of master failures is
higher, with an average value of 500. Diarchy also increases this value, however, it is clearly
lower than its counterpart, with an average value of 50. These results suggest that a MapReduce
framework enriched with Diarchy may provide around 10x more reliable masters.
Cluster size. This part of the evaluation investigates how Diarchy behaves when we vary the
number of jobs in a cluster, evaluating clusters with only 10 daily jobs up to clusters with one
million daily jobs. We have made all the experiments keeping the number of tasks constant for
a job (we assume that a job consists of 350 tasks, which is a reasonably realistic assumption).
In this scenario, the number of master failures grows linearly. As shown in Figure 4a, both
Yarn and Diarchy follow closely this trend. However, while the gradient of the growth line of
Yarn is around 1.43%, the gradient of the growth line of Diarchy is much lower, around 0.06%.
This means that, for instance, in the case of 10,000 jobs per cluster, Yarn has 142 master
failures on average, while Diarchy has an average value of 6 master failures. In addition, it is
also important to notice that it is diﬃcult that two peer masters fail at the same time.
Failure rate. This last part of the evaluation describes how Diarchy behaves when we vary
the number of failures. At some point, a high failure rate can provoke the degradation of the
system, jeopardizing the overall functioning of the framework. In other words, if the number
of failures is very high, the probability that failures aﬀect the same worker is also high. In
Hadoop, if a failure is repeated more than 4 times, it will imply the job re-execution. As in the
previous scenario, we have performed the experiments keeping the number of tasks constant for
a job (350 tasks). We have also kept constant the number of jobs to 10000. As we can see in
Figure 4b, the number of master failures grows also linearly. Here, the proportion between the
gradient of the growth line in Diarchy and the gradient of the growth line in Yarn is only 5%.
This means that, for instance, if we have an average number of failures of 5 per job, the total
number of master failures in the case of 10,000 jobs is around 145 for Yarn, while Diarchy has
an average value of around 4 master failures.

4.2

Double parameter tests

This subsection describes how the three parameters (job size, cluster size and failure rate)
analyzed previously, are related between them.
Job size vs. failure rate. In large scale data environments, even though there are often short
jobs instead of large ones, and NF = 5 seems to be a good average value, it is reasonable to
15

Diarchy: An optimized management approach . . .

4

4

10
8

Yarn
Diarchy

6
4
2

x 10
3

Yarn
Diarchy

2
1

0
5

500
10 1000

Nr of failures

Nr of tasks

(a) Static cluster.

4

x 10
6

Yarn
Diarchy

4
2

0
10

0
10

0
0

Master failure rate

Master failure rate

Master failure rate

x 10

Memishi, P´erez and Antoniu

0
5

5

0 10
Nr of failures

(b) Static jobs.

1000
5

5

x 10
Nr of jobs

x 10

5

Nr. of jobs

500
0 0

Nr of tasks

(c) Static failures.

Figure 5: Yarn vs. Diarchy failure rate, compared in diﬀerent scenarios.

assume that not all the environments have the same behavior and that Diarchy can be used in
diﬀerent scenarios. For instance, Diarchy could be used for a supercomputing scenario [8] or in
systems that require high reliability [5]. For this reason, it is important to know how Diarchy
behaves when diﬀerent pairs (job size, failure rate) are used, compared to Yarn.
As shown in Figure 5a, the best scenario for Diarchy is achieved when jobs are small, and
the failure rate per job is high. Diarchy is able to keep a moderate master failure rate. The
highest diﬀerence between Yarn and Diarchy is achieved when the average failure rate is close
to the maximum number of failures per job (10), and the number of tasks per jobs is close to the
minimum conﬁgured size limit of 100 tasks. In this case, Diarchy outperforms Yarn, providing
5x better reliability performance. Moreover, Diarchy behaves better than Yarn for any pairs
(job size, failure rate).
Cluster size vs. failure rate. This test evaluates the behavior of Diarchy and Yarn when
we have diﬀerent clusters that are specialized to run similar jobs, but with diﬀerent failure
rate between them. Figure 5b shows this comparison, concluding again that Diarchy provides
better reliability results that its counterpart for any combinations (cluster size, failure rate).
1 The best scenario for Diarchy is achieved when the cluster has the maximum number of
jobs (1,000,000) and the highest failure rate (10). In this case, the reliability performance
improvement of Diarchy goes up to 17x.
Cluster size vs. job size. This experiment evaluates as Diarchy and Yarn behave in a
scenario in which we can have diﬀerent clusters and diﬀerent jobs, keeping constant the failure
rate (NF = 5). Figure 5c shows the results of this evaluation, with the same conclusions than
in previous tests, that is, Diarchy outperforms Yarn for any conﬁgurations (cluster/job size).
The maximum diﬀerence between Diarchy and Yarn is given when the cluster size is close
to the maximum number of jobs (1,000,000) and the job size is close to the minimum number
of tasks (100). In this case, Diarchy gets a reliability performance improvement of 9x.

5

Related work

The contribution presented in this paper improves the reliability of the MapReduce framework,
implemented by Yarn. To the best of our knowledge, it is the ﬁrst paper that proposes an
optimized management of MapReduce masters using a P2P scheme.
In [6], authors assume that the JobTracker (which is the only master in Hadoop, encompassing all-in-one the application master, application manager, and resource manager) is always
correct. This assumption has been taken for granted in many other works related to Hadoop.
16

Diarchy: An optimized management approach . . .

Memishi, P´erez and Antoniu

Although the research community has tried to give solutions to this issue, their implementations are still not widely adopted—fully integrated in Hadoop, because these solutions were
proved to work only in speciﬁc scenarios, being not appropriate for generic use.
In the early versions of Hadoop, a crash failure of the JobTracker signiﬁed that all active
work was lost entirely when restarting the JobTracker. The next Hadoop version 0.21 gave
a partial solution to this problem, making periodic checkpoints into the ﬁle system [2], so as
to provide partial recovery. In case of master failure, a standby master takes the role of the
JobTracker, and resumes the work until the last checkpoint. This strategy is still valid in both
classic and new frameworks of Hadoop. However, a checkpoint-based approach implies more
costs in terms of storage space and recovery time than our approach.
An important contribution to the high availability of the MapReduce master is the work
described in [12]. This paper proposes a metadata replication based solution to enable Hadoop
high availability by removing the single point of failure in Hadoop, regardless of whether it is
NameNode (i.e. a metadata server in the Hadoop terminology) or a JobTracker. Their solution
involves three major phases: (i) Initialization phase: each standby/slave node is registered
to active/primary node and its initial metadata are caught up with those of active/primary
node; (ii) Replication phase: the runtime metadata for failover in future are replicated; and
(iii) Failover phase: standby/new elected primary node takes over all communications. An
implementation of this contribution has been done by Facebook, by creating the active and
standby AvatarNode. This node was simply wrapped to the NameNode, and the standby
AvatarNode takes the role of the active AvatarNode in less than a minute. This approach uses
more resources than Diarchy, since it uses two replicate masters for a subset of jobs, whereas
Diarchy uses two peer masters for two subsets of jobs. In addition, by modifying the heartbeat
value, the overhead of Diarchy it has been lowered.
The work [10] proposes an automatic failover solution for the JobTracker to address the
single point of failure. It is based on the Leader Election Framework [3], by using Apache
Zookeper [1]. This means that multiple JobTrackers (at least three) are started together, but
only one of them is the leader at a particular time. The leader does not serve any client,
but receives periodical checkpoints from the remaining JobTrackers. If one of the NameNodes
fails, the leader recovers its availability from the most recent checkpointed data. However, this
solution within Yarn has not been explored for job masters [11] and only addresses other single
points of failure, such as the resource manager daemon. This proposal diﬀers from our approach,
because (i) it needs at least three masters to function in practice, and (ii) the leader does not
have any jobs/tasks assigned. It works only for checkpointing the data of other masters.

6

Conclusions and future work

Yarn has tried to solve some of the drawbacks of its predecessor, classic Hadoop. Speciﬁcally,
Yarn has improved the scalability, by splitting up the multiple facets of the master role into
diﬀerent daemons. However, the reliability of the application master has not been solved yet.
This paper introduces Diarchy, a novel approach that makes a step further by enhancing the
reliability of Yarn, by sharing responsibilities between two master peers.
As far as we know, this is the ﬁrst study to measure the impact of the master problem in
Yarn, and the ﬁrst solution to this problem by means of the deﬁnition of MapReduce masters as
collaborative peers. Diarchy can also have a wider application to the rest of the Yarn daemons,
and other master/slave frameworks in general. Our future work will include research on the
behavior of Diarchy in diﬀerent environments, including multiple cloud infrastructures, with
a particular emphasis on how Diarchy performs when heterogeneous environments, such as
17

Diarchy: An optimized management approach . . .

Memishi, P´erez and Antoniu

federated clouds, are introduced as partial resources of the MapReduce framework. A natural
step further will be the implementation of the Diarchy approach within Yarn and its evaluation
in real, distributed environments, with standard MapReduce workloads.

6.1

Acknowledgments

The research leading to these results has received funding from the H2020 project reference
number 642963 in the call H2020-MSCA-ITN-2014.

References
[1] Apache Zookeeper. http://zookeeper.apache.org/, 2015.
[2] The Apache Hadoop Project. http://hadoop.apache.org/, 2015.
[3] Christian Cachin, Rachid Guerraoui, and Lu´ıs Rodrigues. Introduction to Reliable and Secure
Distributed Programming (2. ed.). Springer, 2011.
[4] Tushar Deepak Chandra and Sam Toueg. Unreliable failure detectors for reliable distributed
systems. J. ACM, 43:225–267, March 1996.
[5] M. Correia, P. Costa, M. Pasin, A. Bessani, F. Ramos, and P. Verissimo. On the feasibility of
byzantine fault-tolerant mapreduce in clouds-of-clouds. In Reliable Distributed Systems (SRDS),
2012 IEEE 31st Symposium on, pages 448–453, Oct 2012.
[6] Pedro Costa, Marcelo Pasin, Alysson Bessani, and Miguel Correia. Byzantine Fault-Tolerant
MapReduce: Faults are Not Just Crashes. In Proceedings of the 3rd IEEE Second International
Conference on Cloud Computing Technology and Science, CLOUDCOM ’11, pages 17–24, Washington, DC, USA, 2010. IEEE Computer Society.
[7] Jeﬀrey Dean, Sanjay Ghemawat, and Google Inc. MapReduce: simpliﬁed data processing on
large clusters. In Proceedings of the 6th conference on Symposium on Operating Systems Design
& Implementation, OSDI’04. USENIX Association, 2004.
[8] Ewa Deelman, Gurmeet Singh, Miron Livny, Bruce Berriman, and John Good. The cost of doing
science on the cloud: the Montage example. In Supercomputing’08, SC ’08, pages 50:1–50:12,
Piscataway, NJ, USA, 2008. IEEE Press.
[9] Steven Y. Ko, Imranul Hoque, Brian Cho, and Indranil Gupta. Making cloud intermediate data
fault-tolerant. In Proceedings of the 1st ACM symposium on Cloud computing, SoCC ’10, pages
181–192, New York, NY, USA, 2010. ACM.
[10] Ekpe Okorafor and Mensah Kwabena Patrick.
Availability of Jobtracker machine in
Hadoop/MapReduce Zookeeper coordinated clusters. Advanced Computing: An International
Journal, 3(3):19–30, May 2012.
[11] Vinod Kumar Vavilapalli, Arun C. Murthy, Chris Douglas, Sharad Agarwal, Mahadev Konar,
Robert Evans, Thomas Graves, Jason Lowe, Hitesh Shah, Siddharth Seth, Bikas Saha, Carlo
Curino, Owen O’Malley, Sanjay Radia, Benjamin Reed, and Eric Baldeschwieler. Apache Hadoop
YARN: Yet Another Resource Negotiator. In Proceedings of the 4th Annual Symposium on Cloud
Computing, SoCC ’13, pages 5:1–5:16, New York, NY, USA, 2013. ACM.
[12] Feng Wang, Jie Qiu, Jie Yang, Bo Dong, Xinhui Li, and Ying Li. Hadoop high availability
through metadata replication. In Proceedings of the ﬁrst international workshop on Cloud data
management, CloudDB ’09, pages 37–44, New York, NY, USA, 2009. ACM.
[13] Tom White. Hadoop - The Deﬁnitive Guide: Storage and Analysis at Internet Scale (3. ed., revised
and updated). O’Reilly, 2012.

18

