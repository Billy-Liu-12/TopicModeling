Procedia Computer Science
Volume 51, 2015, Pages 326–335
ICCS 2015 International Conference On Computational Science

PSO-based Distributed Algorithm for Dynamic Task
Allocation in a Robotic Swarm
Nadia Nedjah1 , Rafael Mathias de Mendon¸ca1 , and Luiza de Macedo Mourelle2
1

Department of Electronics Engineering and Telecommunication,
Engineering Faculty, State University of Rio de Janeiro, Brazil
(nadia, rafael)@eng.uerj.br
2
Department of System Engineering and Computation,
Engineering Faculty, State University of Rio de Janeiro, Brazil
ldmm@eng.uerj.br

Abstract
Dynamic task allocation in a robotic swarm is a necessary process for proper management
of the swarm. It allows the distribution of the identiﬁed tasks to be performed, among the
swarm of robots, in such a way that a pre-deﬁned proportion of execution of those tasks is
achieved. In this context, there is no central unit to take care of the task allocation. So any
algorithm proposal must be distributed, allowing every, and each robot in the swarm to identify
the task it must perform. This paper proposes a distributed control algorithm to implement
dynamic task allocation in a swarm robotics environment. The algorithm is inspired by the
particle swarm optimization. In this context, each robot that integrates the swarm must run the
algorithm periodically in order to control the underlying actions and decisions. The algorithm
was implemented on ELISA III real swarm robots and extensively tested. The algorithm is
eﬀective and the corresponding performance is promising.
Keywords: Dynamic task allocation, Swarm robotics, Swarm intelligence

1

Introduction

The execution of high complexity tasks in a robotic system is a key problem for the academic
community since long time ago. This issue is addressed in many research areas, promoting
diﬀerent approaches [9]. Optimization evolutionary algorithms probably represent the most
recent area that deals with this kind of problem [1]. This research area deals with optimization
processes in search for solutions in a high dimension search space.
In order to solve a high complexity task, the idea of decomposing it in a series of simple
resolution tasks is proposed. The coordinated execution of these simple tasks allows for the
execution of the complex task, regarding a predeﬁned execution rate.
326

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.250

Distributed Algorithm for Dynamic Task Allocation

Nedjah, Mendon¸ca, Mourelle

Task allocation is a dynamic process, since it needs to be continually adjusted in response to
changes in the environment and/or in the swarm performance. An immediate solution to solve
this problem is based on the centralized approach. However, a distributed allocation represents
a better approach to the behavior of social species swarms, where there is no centralized control
mechanism. Therefore, task scheduling in robots swarms must occur as a result of a distributed
process. This decentralization increases the problem complexity, since the robot does not have
a complete view of the environment.
Several automation applications that use robots swarm, require the use of Dynamic Task
Allocation (DTA). For example, in situations that represent risk or are impracticable for human
presence, robots swarm would be capable of self-organizing, forming groups where each one
would execute a task in order to complete a signiﬁcant action together.
Recently, several solutions have been proposed in the literature for DTA problems. Based
on the taxonomy available in [14], the classiﬁcation of the algorithms is implemented according
to its behavioral approach, based on market laws and bio-inspired. In the behavioral approach,
tasks to be executed are diﬀerentiated in groups, called behavioral groups. Groups have a set
of tasks to be executed, which have a relation between them. Among behavioral algorithms, we
can detach Alliance [8], BLE [12] and ASyMTRe [11]. Algorithms based on market laws aim
at maximizing the income (information, speed), while minimizing costs (convergence, communication time), maximizing the advantages of each implementation. Among the actual featured
algorithms, we can cite First Price Auction [15], Murdoch [4] and DEMiR-CF [10]. The use of
bio-inspired algorithms to solve DTA problems shows a considerable growth in terms of research
and publications [6]. Derivative from social insects behavior, the swarm intelligence approach
presents some praiseworthy characteristics, such as self-organizing capacity and ﬂexible behavior to environmental changes. In [13], cooperation in groups of robots was implemented using
ant colony optimization (ACO). In [3], the authors propose a parallel PSO algorithm that deals
with a distributed population model.
In this paper, a distributed algorithm for dynamic task allocation in a swarm of robots is
proposed. The algorithm uses the Particle Swarm Optimization method (PSO) [7] [2] in the
decision process. PSO is a stochastic algorithm based on swarm intelligence that can be applied
to search iteratively for the solution of optimization problems in a search space. The local and
global iterations of the solution presented by the particles update the position and velocity of
each particle moving in the search space.
The proposed algorithm allows the eﬃcient execution in robots with limited storing and
processing resources. It was tested in a robots swarm of type ELISA III to demonstrate its
eﬀectiveness and eﬃciency. Experimental results are reported.
The remaining of this paper is organized in six sections. Initially, in Section 2, the problem
of task allocation is presented. Next, in Section 3, the proposed DTA algorithm is detailed. In
Section 4, the implementation of the proposed algorithm in real robots is described. In Section
5, results are discussed. Finally, in Section 6, conclusions and future work are introduced.

2

Dynamic Tasks Allocation

In order to provide a formal deﬁnition of the DTA problem, let T = {t1 , t2 , . . . , tτ } be the
set of task identiﬁers to be allocated to the robots of the swarm, composed of τ valid tasks.
Considering the swarm composed of ρ robots, the DTA process allows for the allocation of τ
tasks to the robots of the swarm, regarding the desired rate P. This rate P = {p1 , p2 , . . . , pτ }
327

Distributed Algorithm for Dynamic Task Allocation

Nedjah, Mendon¸ca, Mourelle

is deﬁned by a set of positive integers pj ∈ N∗ , such that (Equation 1):
τ

pj = 1,

(1)

j=1

where cj = pj × ρ robots must be allocated to task tj .
The number of robots allocated to each task is represented by a set of counters C =
{c1 , c2 , . . . , cτ }, such that (Equation 2):
τ

cj = ρ.

(2)

j=1

Set C deﬁnes the quantity of robots allocated to each task, such that the number of allocated
robots to task tj ∈ T corresponds to the counter cj ∈ C.
In the swarm, each robot has a unique identiﬁcation, represented by id, which identiﬁes it from the others. The set of robots’ identiﬁers of the swarm is represented by
I = {id1 , id2 , . . . , idρ }.
The swarm allocation is represented by A = [a1 , a2 , . . . , aρ ], where aj identiﬁes the task
allocated to robot idj . From an allocation A of the swarm, it is possible to infer the elements
of the set CA of counters, according to Equation 3, such that:
ρ

cj = CA [tj ] =

φ(ar , tj ),

(3)

r=1

where function φ is deﬁned according to Equation 4:
⎧
⎨ 1 if a = t;
φ(a, t) =
⎩
0
else,

(4)

such that, at the end of the counting, the set CA will represent the distribution of the allocated
robots in each task, deﬁned by allocation A.
The solution of the dynamic task allocation problem consists in ﬁnding an allocation A∗ =
∗ ∗
{a1 , a2 , . . . , a∗ρ }, such that (Equation 5):
∀ tj ∈ T e ∀ pj ∈ P, CA∗ [tj ] = pj × ρ.

(5)

The complexity of the task allocation process is deﬁned by a decision problem in which
we want to ﬁnd an allocation A∗ that solves the DTA problem belonging to a set of feasible
allocations Q. The number of feasible allocations #Q depends on ρ and τ , according to the
characteristics of the swarm.
For the swarm of heterogeneous characteristics, #Q is deﬁned by Equation 6:
n

#Q =
i=1

τiρi = τ1ρ1 × τ2ρ2 × · · · × τnρn ,

(6)

where the swarm consists of ρ robots, diﬀerentiated in n groups, where each group i is composed of ρi robots capable of implementing the distinct set Ti of tasks. Hence, for the swarm
of homogeneous characteristics, consisting of an unique group (n = 1), #Q is deﬁned as in
Equation 7:
#Q = τ ρ .
(7)
328

Distributed Algorithm for Dynamic Task Allocation

Nedjah, Mendon¸ca, Mourelle

The ﬁtness evaluation of an allocation A is implemented by an objective function f (A),
deﬁned by Equation 8:
f (A) =

τ
i=1

|C[i] − CA [i]|
,
τ

(8)

where C represents the desired quantity of robots allocated to each task, according to a desired
rate P, and CA represents the quantity of robots allocated to each task, according to A.

3

Proposed Algorithm

The proposed Dynamic Task Allocation algorithm with Global approach (GDTA) deﬁnes, in a
dynamic way, the adjustment of task allocation Ai from robot idi point of view. The algorithm
is based on the optimization process of the GBPSO algorithm [7] as a means to minimize the
objective function f (A) designed for the DTA problem. The DTA problem presents a high
computational complexity, being classiﬁed as NP complete [5].
The GDTA implementation in robot i is structured in three main stages: initialization,
adjustment and execution, as shown in Algorithm 1. Each robot idi represents a particle i and
has one allocation solution Ai for the swarm. The number of dimensions of this problem is
represented by the number of robots ρ, where the discrete search space of each dimension is
delimited by the number of tasks τ . Thus, a particle is represented by a task allocation of ρ
dimensions.
Algorithm 1 GDTA in robot i
Require: τ , ρ and P;
1: Initialization(τ, ρ);
2: while true do
3:
if Pi = P then
4:
Adjustment(Ai , AP besti , AGbest );
5:
else
6:
Execution(ti );
7:
end if
8: end while
After initialization of the problem parameters, the desired proportion P is compared, at each
iteration, to the proportion Pi , obtained from the allocation Ai . If the desired proportion is
not reached, the adjustment of allocation Ai is performed. If the desired proportion is reached,
task ti is executed for a predeﬁned period of time.

3.1

Initialization State

The initialization stage is performed according to Algorithm 2. A random initial conﬁguration is
considered with uniform distribution of the robot’s allocation Ai , considering the set of counters
CAi updated. Next, the proportion Pi , the best actual allocation AP besti and the best global
allocation AGbest are updated. After the present task ti is updated, the initialization stage is
completed.
329

Distributed Algorithm for Dynamic Task Allocation

Nedjah, Mendon¸ca, Mourelle

Algorithm 2 Initialization in robot i
Require: τ and ρ;
Ensure: Ai , AP besti , AGbest , Pi and ti ;
1: for r := 1 → ρ do
2:
Ai [r] := RandGenerator(1, . . . , τ );
3:
CAi [Ai [r]] := CAi [Ai [r]] + 1;
4: end for
5: for t := 1 → τ do
6:
Pi [t] := CAi [t]/ρ;
7: end for
8: AP besti := Ai ; AGbest := Ai ; ti := AGbest [idi ];

3.2

Adjustment Stage

The adjustment stage is structured in 5 sub-stages, as shown in Algorithm 3. This stage
describes the proposed method to implement the adjustment of the present robots’ allocation of
the swarm, such that a new allocation is obtained for the robots to reach the desired proportion
P.
Algorithm 3 Allocation adjustment in robot i
Require: Ai , AP besti and AGbest ;
Ensure: ti ;
1: UpdateAllocPbest(Ai , AP besti ); IdentifyAllocGbest(P bests, AP besti );
2: if idGbest = idi then
3:
InformAllocGbest(Ai );
4: else
5:
UpdateAllocGbest(idGbest );
6: end if
7: if f (AGbest ) = 0 then
8:
UpdateAllocActual(Ai , AP besti , AGbest );
9: end if
10: ti := AGbest [idi ];
The update of the best allocation AP besti is performed through U pdateAllocP best. After
that, the robot identiﬁes the best allocation AGbest among all robots of the swarm and the
identiﬁer idGbest of the robot that has this best allocation through Identif yAllocGbest.
Robot idGbest executes a distinct procedure from that performed by the other robots of
the swarm, through Inf ormAllocGbest, informing allocation AGbest to the other robots. These
robots update AGbest with the allocation received from robot idGbest through U pdateAllocGbest.
Next, the need for update the present allocation Ai is evaluated, checking the ﬁtness value
f (AGbest ). A null ﬁtness value identiﬁes the situation where at least one of the robots has an
allocation that represents the desired proportion P. If the ﬁtness value of AGbest is not null,
then the update of the present allocation Ai is performed through U pdateAllocActual. At the
end, the present task ti of robot idi is updated from AGbest .
Algorithm 4 describes the update process of the best allocation AP besti obtained by robot i
at the moment.
The comparison between the ﬁtness values Ai and AP besti is performed. If f (Ai ) presents a
330

Distributed Algorithm for Dynamic Task Allocation

Nedjah, Mendon¸ca, Mourelle

Algorithm 4 UpdateAllocPbest in robot i
Require: ρ, Ai and AP besti ;
Ensure: P bests and AP besti ;
1: if f (Ai ) ≤ f (AP besti ) then
2:
AP besti := Ai ;
3: end if
4: msg ← idi , f (AP besti ) ;
5: repeat
6:
Send msg to the other ρ − 1 robots; Receive msg from the other ρ − 1 robots;
7: until receiving from all robots
8: for r := 1 → ρ − 1 do
9:
if I[r] = idi then
10:
P bests[r] := f (AP bestr );
11:
end if
12: end for
value less or equal to f (AP besti ), then the present best allocation AP besti will be updated with
Ai .
Next, message exchange among robots is performed in order to inform the others about the
ﬁtness value of the best allocation f (AP besti ) and to receive the same information from the
others. The robot updates vector P bests with the ﬁtness values received from the messages of
the other robots, so that at the end of this process the robots of the swarm have full knowledge
of the best allocation in the swarm.
The identiﬁcation of robot idGbest , which has the global best allocation AGbest , is described
in Algorithm 5. Robot idGbest is identiﬁed by the smaller ﬁtness value of AP best found among
the values in P bests and the ﬁtness value of AP besti . This identiﬁcation is performed by all
robots, such that all reach the same result in the end of ρ − 1 comparisons.
Algorithm 5 IdentifyAllocGbest in robot i
Require: ρ, AP besti and P bests;
Ensure: idGbest ;
1: id := idi ; P bestmin := f (AP besti );
2: for r := 1 → ρ − 1 do
3:
if P bestmin > P bests[r] then
4:
P bestmin := P bests[r]; id := I[r], where I[r] = idi ;
5:
end if
6: end for
7: idGbest := id ;
Robot idGbest informs the other robots about the allocation AGbest through message exchange . In this process, robot idGbest sends messages, designated msg1, to the other robots
and receives messages from the others, designated msg2. Message msg1 consists of idGbest and
AGbest , in order to inform the allocation AGbest to the other ρ − 1 robots of the swarm.
Concurrently to this message exchange process, the other robots update the allocation AGbest
received from robot idGbest . When receiving msg1, each one of the other robots sends one
conﬁrmation message msg2 consisting of its idi .
The update of the present allocation Ai is then performed based on the contributions of
331

Distributed Algorithm for Dynamic Task Allocation

Nedjah, Mendon¸ca, Mourelle

the cognitive and social allocations, similar to the cognitive and social components of the PSO
method. The contributions update the velocity of the robot in ρ dimensions of the position
deﬁned by the allocation.
For each dimension r, the update of the velocity[r] value is performed by the computation of
the contributions of the cognitive and social allocation of the dimension. In order to adapt the
position’s result to the discrete search space, a rounding of the velocity[r] value is performed,
such that velocity[r] ∈ Z. The rounding process of a number x | x ∈ Q takes the fractional part
{x} to deﬁne if the number will have its value rounded.
Then, the update of Ai [r] is performed with its previous values added to velocity[r]. The
value of Ai [r] is delimited inside the search space deﬁned by the values of the task identiﬁers
set T = {t1 , t2 , . . . , tτ }, such that the values will always be between the lower t1 and upper tτ
limits. During the update process of Ai , the accounting of the number of robots allocated to
each task is performed in τ contadores CAi , based on the updated allocation Ai . After this, the
proportion Pi is updated through the computation of the proportions equivalent to each task
in relation to the number of robots ρ.

4

Implementation Aspects

The proposed algorithm was implemented in a swarm of robots of type ELISA III1 . Robots are
equipped with one central RBG LED capable of representing any color through the combination
of colors red, green and blue. The obtained color is intensiﬁed by a diﬀuser located at the top of
the robot. In this implementation, each task is represented by one distinct color with the aim of
observing the progress of task adjustments performed by the robots. Hence, colors blue, yellow,
pink, purple and green were used to represent the ﬁve used tasks. Each robot is equipped with
a transceiver module suitable to wireless communication applications, with ultra low energy
consumption in the Radio Frequency (RF) band. The module is designated to operate in the
ISM (Industrial, Scientiﬁc and Medical) radio band of 2.4 GHz. The base station is connected
to a computer via USB and transfers data to and from robots in wireless mode. The transceiver
module, embedded in the robot, communicates with the robot’s micro-controller via SPI (Serial
Peripheral Interface) communication and transfers data to and from the base station.
Each robot is identiﬁed with a distinct address RF ID in the swarm. This address is stored
in an speciﬁc address of the EEPROM memory of the robot. Each message from the base
station has a destination address that coincides with the address of one of the robots of the
swarm. When receiving the message, the robot compares the destination address of the received
message with its own address, checking if the message is addressed to it. If it is so, the message
is stored and interpreted by the robot.
The communication between robots and the base station is controlled by the computer that
checks the presence of messages in the base station at each millisecond, which is the maximum
communication speed. In order to avoid this limitation, an optimized communication protocol
is proposed, where the package sent by the computer to the base station has commands to four
robots simultaneously. The base station is responsible for splitting the received package into
four individual messages of 16 bytes each, before sending them to the indicated destination
addresses. The same procedure is performed during reception in the robots. In this case, the
base station is responsible for receiving the messages from 4 robots, merging them into only
one package of 64 bytes to be sent to the computer. This procedure allows the increase of the
communication speed in 4x for message exchange between robots.
1 Available

332

at http://www.gctronic.com

Distributed Algorithm for Dynamic Task Allocation

(a) Robot to base

Nedjah, Mendon¸ca, Mourelle

(b) Base to Robot

Figure 1: Message structure sent by robot id to the base station
The structure of the messages sent by the robots to the base station and from the base
station to the robots is shown in Figures 1(a) and 1(b), respectively. The validity byte (BV)
validates the authenticity of the message sent by the base station, when it is received by the
robot. The type byte deﬁnes the message type. When there are two or more types of messages,
the two bytes, associated to robot ID, hold the destination address of the message. The 12 bytes
corresponding to payload have the data to be available. Note that the messages generated by
the robots do not have a destination address, due to the fact that the communication is default.
In order to represent the two distinct moments of communication, performed by the robots
during the GDTA execution, three diﬀerent types of messages were implemented. The payload
of the ﬁrst type of message, used during the ﬁrst communication, is composed of the P best
ﬁtness. The second and third types of message are used during the second communication.
The robot with the best allocation sends its allocation AGbest (type 2) to the remaining robots
and these send an acknowledgment message (type 3).

5

Performance Results

The analysis of the results allows us to evaluate the eﬀectiveness of GDTA, as well as its
eﬃciency in reaching the main objective of allocating tasks to robots of the swarm, such that a
new allocation is acquired that respects the desired proportion. After reaching a new adequate
allocation, the swarm must keep in it for an indeﬁnite time until a new objective proportion is
informed.
The swarm conﬁguration was changed in terms of the number of robots and the number
of diﬀerent tasks to be allocated. The number of robots in the swarm varied between 4 and
25, and the number of diﬀerent tasks varied between 2 and 5, where 40 diﬀerent cases were
experimented. For each conﬁguration of the swarm, a distribution of speciﬁc proportion was
used, according to Table 1.
Table 1: Distribution of the proportion among tasks
Proportion
# Tasks
T0
T1
T2
T3
T4
2
60% 40%
–
–
–
3
20% 30% 50%
–
–
4
10% 15% 30% 45%
–
5
5% 10% 20% 30% 35%
Each case was performed 10 times, in a total of 400 diﬀerent experiments. These were
conducted by initializing all robots of the swarm with random initial allocations and with the
333

Distributed Algorithm for Dynamic Task Allocation

Nedjah, Mendon¸ca, Mourelle

same initial task. The average of the results was obtained for each case. In Figure 2(a), the
average of the results obtained for the convergence time are shown and, in Figure 2(b), the
average of the results obtained for the number of iterations are presented.

(a) Execution times

(b) Iteration numbers

Figure 2: Convergence time (ms) and iteration numbers
We can observe that the convergence time has a tendency to increase, due to the increase
in the number of robots in the swarm and the number of tasks. As to the number of iterations,
the same tendency is seen, due to the increase in the number of tasks. However, the number of
iterations tends to decrease, due to the increase in the number of robots in the swarm in most
of the cases.
In order to evaluate the communication, the number of exchanged messages between robots
was analyzed, until the swarm reached the convergence. For message identiﬁcation, those
messages coming from the base station to the robots are deﬁned as Sent messages and those
messages coming from the robots to the base station are deﬁned as Received messages. The
average of the results obtained for the number of sent and received messages are presented in
Figures 3(a) and 3(b), respectively. We can observe that the results show a similar distribution
when compared to the graphics of the number of received and sent messages of each group
of experiments. Note that it is possible that the generated messages are not received by the
addressee and are lost during the communication process.

(a) Sent messages

(b) Received messages

Figure 3: Number of sent and received messages
We can observe that the number of exchanged messages between robots increases, due to
the increase in the number of robots in most cases. Also, we could see that the number of tasks
has a direct inﬂuence in the complexity of the decision and task allocation processes, resulting
in an increase in the number of sent and received messages, and in the convergence time and
the number of iterations. A video of the GDTA experiment with real robots is available at
http://youtu.be/jCBpIdkgXQE.
334

Distributed Algorithm for Dynamic Task Allocation

6

Nedjah, Mendon¸ca, Mourelle

Conclusions

In this paper, a distributed algorithm was proposed to control the task allocation process in a
swarm of robots, with the objective of converging to a predeﬁned proportion. The proposed
algorithm is an eﬃcient solution to perform task allocation among robots of the swarm. The
decision process is implemented in an independent way for each robot, based on the minimization of the ﬁtness value that each robot has, of task allocation for the swarm. The proposed
algorithm is inspired by the PSO method. Experimental results prove the eﬀectiveness of the
algorithm in converging to a task allocation that respects the predeﬁned proportion and keeps
this allocation until the proportion is changed.

References
[1] Carlos A Coello Coello, David A Van Veldhuizen, and Gary B Lamont. Evolutionary algorithms
for solving multi-objective problems. Springer, New York, 2006.
[2] Russ C Eberhart and James Kennedy. A new optimizer using particle swarm theory. In Proceedings
of the sixth international symposium on micro machine and human science, volume 1, pages 39–43,
New York, 1995. IEEE.
[3] Fister Jr., Iztok and Yang, Xie-She and Fister, Dusan and Brest, Janez and Fister, Itzok. Towards
the novel reasoning among particles in PSO by the use of RDF and SPARQL. The Scientiﬁc
World Journal, volume 2014, Number 121782, 10 pages, 2014. Hindawi Press.
[4] Brian P Gerkey and Maja J Matari´c. Murdoch: Publish/subscribe task allocation for heterogeneous agents. In Proceedings of the fourth international conference on autonomous agents, pages
203–204, Barcelona, Spain, 2000. ACM.
[5] Brian P Gerkey and Maja J Matari´c. A formal analysis and taxonomy of task allocation in
multi-robot systems. The International Journal of Robotics Research, 23(9):939–954, 2004.
[6] Harry Goldingay and Jort Van Mourik. The eﬀect of load on agent-based algorithms for distributed
task allocation. Information Sciences, 222:66–80, 2013.
[7] J Kennedy and R Eberhart. Particle swarm optimization! In Proc of international conference on
neural network., pages 1942–1948, Washington, DC, 1995. IEEE.
[8] Lynne E Parker. Alliance: An architecture for fault tolerant multirobot cooperation. IEEE
Transactions on Robotics and Automation, 14(2):220–240, 1998.
[9] Lynne E Parker. Current research in multirobot systems. Artiﬁcial Life and Robotics, 7(1-2):1–5,
2003.
[10] Sanem Sariel and Tucker Balch. A distributed multi-robot cooperation framework for real time
task achievement. In Distributed Autonomous Robotic Systems 7, pages 187–196. Springer, 2006.
[11] Fang Tang and Lynne E Parker. Asymtre: Automated synthesis of multi-robot task solutions
through software reconﬁguration. In Proceedings of the International Conference on Robotics and
Automation. ICRA 2005., pages 1501–1508, Barcelona, Spain, 2005. IEEE.
[12] Barry Brian Werger and Maja J Mataric. Broadcast of local eligibility: behavior-based control
for strongly cooperative robot teams. In Proceedings of the fourth international conference on
autonomous agents, pages 21–22, Barcelona, Spain, 2000. ACM.
[13] Dong Yang and Zheng-ou Wang. Improved ant algorithm for assignment problem. Journal of
Tianjin University, 4:020, 2004.
[14] Yu Zhang and Shu-Hua Liu. Survey of multi-robot task allocation. CAAI Transactions on Intelligent Systems, 3(2):115–120, 2008.
[15] Robert Zlot, Anthony Stentz, M Bernardine Dias, and Scott Thayer. Multi-robot exploration
controlled by a market economy. In Proceedings of International Conference on Robotics and
Automation. ICRA02., volume 3, pages 3016–3023, Washington D.C, 2002. IEEE.

335

