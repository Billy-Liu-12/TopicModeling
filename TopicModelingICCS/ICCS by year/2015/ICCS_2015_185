Procedia Computer Science
Volume 51, 2015, Pages 423–432
ICCS 2015 International Conference On Computational Science

Adaptive Autonomous Navigation using Reactive
Multi-agent System for Control Law Merging
Baudouin Dafﬂon1 , Jose Vilca3 , Franck Gechter2 , and Lounis Adouane3
1

Universit´e Lyon2 Lumi`ere, DISP-LAB, 160 avenue de l’universit´e, Bron, France,
name.surname@univ-lyon2.fr
2 UTBM, IRTES-SET, 4 rue Mieg, Belfort, France.
name.surname@utbm.fr
3 Institut Pascal, Blaise Pascal University, Clermont-Ferrand, France.
name.surname@univ-bpclermont.fr

Abstract
This paper deals with intelligent autonomous navigation of a vehicle in cluttered environment. We
present a control architecture for safe and smooth navigation of a Unmanned Ground Vehicles (UGV).
This control architecture is designed to allow the use of a single control law for different vehicle contexts
(attraction to the target, obstacle avoidance, etc.) [4]. The reactive obstacle avoidance strategy is based
on the limit-cycle approach [2]. To manage the interaction between the controllers according to the
context, the multi-agent system is proposed. Multi-agent systems are an efﬁcient approach for problem
solving and decision making. They can be applied to a wide range of applications thanks to their intrinsic
properties such as self-organization/emergent phenomena. Merging approach between control laws is
based on their properties to adapt the control to the environment. Different simulations on cluttered
environments show the performance and the efﬁciency of our proposal, to obtain fully reactive and safe
control strategy, for the navigation of a UGV.
Keywords: Multi-agent systems, Autonomous vehicles, Hybrid architecture, Obstacle avoidance

1

Introduction

One of the main motivation to use Unmanned Ground Vehicles (UGVs) is the decrease of the trafﬁc
congestion of vehicles in urban areas, with correlated pollution, noise and time waste. So as to obtain
such a transportation system, an efﬁcient and reliable automatic navigation capability is required with
the some criteria which must guarantee the safety and comfort of passengers [11].
This paper deals with the navigation of urban vehicle in cluttered environment. The navigation
task consists in reaching a deﬁned target while avoiding detected obstacles detected from real-time
sensor measurements. To ensure the vehicles ability to accomplish a reactive navigation, it is proposed
to explore behavioral control architectures originally proposed by Brooks [7]. This kind of control
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.262

423

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

architecture breaks the complexity of the overall task by dividing it into several basic tasks [1]. Each
basic task is accomplished with its corresponding controller.
An important issue for successful autonomous navigation is the obstacle avoidance ability. This
function permits to prevent robot collision, thus ensuring vehicle safety. Many reactive approaches
can be found in literature, such as obstacle avoidance using vortex ﬁelds [12] and orbital trajectories
[2]. This last approach is built on circular limit-cycle differential equations in [18, 16, 2]. Circular
limit cycles are more stable than vortex ﬁelds and always converge to periodic orbits. This work uses
elliptical trajectories that were presented in [3]. Therefore, more generic and efﬁcient obstacle avoidance
is performed, even with different obstacle shapes, for instance, long walls.
Most of the algorithms found in literature deal with only one ﬁxed obstacle. However, they brings
interesting properties such as reliability and continuity in control law. Dealing with several obstacles
and with their potential moves is a much harder issue which requires an important embedded computational power so as to recompute at each time-step the correct trajectory under continuity constraint or
a decrease in term of performances and precision. The goal of this paper is to propose a method using
a reactive multi-agent system to merge command laws of the control architecture (attraction to target
controller and the obstacle avoidance controllers).
Multi-agent systems are an efﬁcient approach for problem solving and decision making. They can be
applied to a wide range of applications thanks to their intrinsic properties and features such as simplicity,
ﬂexibility, reliability, self-organization/emergent phenomena, low cost agent design and adaptation capacity. It has been shown that reactive multi-agent system are efﬁcient to tackle complex problems [14],
cooperation of situated agents/robots [15], data fusion and problem/game-solving [13]. In this context,
our proposal consists in decision making by evaluating emergent properties of agent’s organization.
The paper is structured as follow: in the next section, the control architecture for the navigation of a
UGV is introduced. The model of the UGV and its controllers are also detailed. The multi-agent system
and its proprieties applied to autonomous navigation are described in Section 3. Simulations showing
the efﬁciency of our proposal are detailed in Section 4. Finally, conclusion and future works are given
in Section 5.

2

Control architecture

The control architecture for a safe and smooth autonomous navigation of UGV is shown in Fig. 1. It
is designed for a UGV modelled as a tricycle robot. This architecture aims to manage the interactions
among elementary controllers while guaranteeing the stability of the overall control [6, 5]. The global
navigation framework is operated by the Hierarchical action selection block that selects the elementary
controller (Target reaching or Obstacle avoidance) according to the context of the environment. Each
elementary controller (cf. Fig. 1) provides as output (OAT or OOA ) a Control Input ISP to the Control
law block.
In this work, a single control law for the UGV (tricycle robot) is used [20]. It considers the vehicle
postures and velocities. This control law allows the UGV to reach a static or dynamic target with a
desired orientation and velocity (cf. subsection 2.2.3). The inputs of the control law (posture errors
between the vehicle and its assigned target) are provided by the elementary controllers (cf. subsection
2.2). The control law is synthesized according to Lyapunov theorem (more details are given in [20]).
The main blocks of the architecture are detailed below.
The Sensor Information block incorporates the propriocetive and exteroceptive sensors such as range
sensor, cameras, odometers and RTK-GPS. Its goal is to capture information related to the robot environment, mainly potential obstacles [8, 10]. In the sequel, we assume that the UGV has a RTK-GPS and
a LIDAR range sensor.
424

Sensor Information

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

PI

Attraction to the
target

OAT

PI

Obstacle
avoidance

OOA

Hierarchical
action
selection

ISP

Control
law

C

Vehicle

Figure 1: Control architecture embedded in the UGV for autonomous navigation [20].
The control architecture uses a Hierarchical action selection mechanism to manage the switches between the two elementary controllers (Behavior-based approach), Target reaching and Obstacle avoidance blocks, according to the formation parameters and environment perception. The hierarchical action
selection mechanism activates the Obstacle avoidance block as soon as it detects at least one obstacle
which can hinder the future vehicle movement toward its dynamic virtual target (more details are given
in [3]). It allows to anticipate the activation of obstacle avoidance controller and to decrease the time
to reach the assigned target (static or dynamic). In order to provide the enough overall details of the
presented control architecture, the following subsections present the UGV model and the elementary
controllers.

2.1

Vehicle modeling

We assume that the UGV evolves in asphalt road and in cluttered urban environment with relatively low
speed (less than vmax = 2 m/s). Hence, the use of kinematic model (which relies on pure rolling without
slipping) of the UGV is sufﬁcient. The kinematic model of the UGV is based on the well-known tricycle
model [19]. The two front wheels are replaced by a single virtual wheel located at the center between
the front wheels. The equations of UGV model can be written as (cf. Fig. 2):
⎧
⎨ x˙ = v cos(θ)
y˙ =
v sin(θ)
⎩ ˙
θ = v tan(γ)/lb

(1)

where (x, y, θ) is the UGV posture in the global reference frame XGYG . v and γ are respectively the
linear velocity and the orientation of the vehicle front wheel. lb is the wheelbase of the vehicle.
X

m

ex

vT

Ym

YG

y

γ

Icc

γ

dl

rc
wb

Target

eRT

lb

yT

Om

v
θ

eθ
θT

θRT

ey

d
OG

x

xT

XG

Figure 2: UGV and target conﬁguration variables in Cartesian reference frames (local and global).

425

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

2.2

Elementary controllers

Each elementary controller generates the control inputs ISP (posture errors (ex , ey , eθ ) and velocities vT )
of the Control law block (cf. Fig. 1).
2.2.1 Target reaching controller
The target set-point modeling is deﬁned as a point with non-holonomic constraints (cf. Fig. 2). For
static target reaching (point stabilization, i.e., to reach a speciﬁc point with a given orientation), vT is
not necessarily equal to zero; vT is then considered as a desired velocity value for the vehicle when it
reaches the desired target posture (xT , yT , θT ).
Before to remind the used control law [20], let us describe the following notations (cf. Fig. 2):
• Icc is the instantaneous center of curvature of the vehicle trajectory, rc = lb / tan(γ) is the radius of
curvature and cc = 1/rc is the curvature.
• (ex , ey , eθ ) are the errors w.r.t local frame (XmYm ) between the vehicle and the target postures.
• θRT and d are respectively the angle and distance between the target and vehicle positions.
• eRT is the error related to the vehicle position (x, y) w.r.t the target orientation.
This controller guides the vehicle towards the static target. It is based on the posture control of the
UGV w.r.t. the target (represented by errors variables (ex , ey , eθ ) in Fig. 2). These errors are computed
w.r.t. the local reference frame XmYm and they are given by:
⎧
cos(θ)(xT − x) + sin(θ)(yT − y)
⎨ ex =
ey = − sin(θ)(xT − x) + cos(θ)(yT − y)
(2)
⎩
θT − θ
eθ =
The error function eRT is added to the canonical error system (2) (cf. Fig. 2). Let us now write d
and θRT as (cf. Fig. 2):
d=

(xT − x)2 + (yT − y)2

θRT = arctan ((yT − y)/(xT − x))
θRT = θT

(3)
if d > ξ
if d ≤ ξ

(4)

where ξ is a small positive value (ξ ≈ 0). The error eRT is deﬁned as (cf. Fig. 2):
eRT = θT − θRT

(5)

Furthermore, the velocity set-point vT of the static target is deﬁned by the designer according to the
task. Finally the posture errors and velocities (ex , ey , eθ , vT ) are the input of the Control law block (cf.
subsection 2.2.3).
2.2.2

Obstacle avoidance controller

Different methods can be found in the literature for obstacle avoidance [17, 21]. One of them is the
limit-cycle method, the UGV avoids reactively the obstacle if it tracks accurately limit-cycle trajectories
as detailed in [3]. The main ideas behind this controller are brieﬂy detailed below:
426

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

The differential equations of the elliptic limit-cycles are:
x˙s =

m(Bys + 0.5Cxs ) + xs (1 − Axs2 − By2s −Cxs ys )

(6)

y˙s =

−m(Axs + 0.5Cys ) + ys (1 − Axs2 − By2s −Cxs ys )

(7)

with m = ±1 according to the avoidance direction (clockwise or counter-clockwise). (xs , ys ) corresponds to the position of the UGV according to the center of the ellipse. The variables A, B and C are
given by:
A =(sin(Ω)/blc )2 + (cos(Ω)/alc )2

(8)

B =(cos(Ω)/blc ) + (sin(Ω)/alc )

(9)

2

C

2

=(1/a2lc − 1/b2lc ) sin(2Ω)

(10)

where alc and blc characterize respectively the major and minor elliptic semi-axes and Ω gives the ellipse
orientation.
In our case, the controller can be written as an orientation control. We consider thus ex = 0 and ey = 0
in (2) (cf. Fig. 2), i.e, the vehicle position is at each sample time in the desired position. The limitcycle propriety allows to avoid the obstacles. The desired vehicle orientation is given by the differential
equation of the limit-cycle (6) and (7):
θd = arctan (y˙s /x˙s )

(11)

Furthermore, the linear velocity of the UGV is decreased for safe avoidance when the obstacle
avoidance controller is activated, e.g, vT = vmax /2.
2.2.3

Control law

The used control law is designed according to Lyapunov stability analysis [20]. The desired vehicle
linear velocity v and its front wheel orientation γ that make the errors (ex , ey , eθ ) converge always to
zero can be chosen as:
v = vT cos(eθ ) + vb
γ=

(12)

arctan(lb rc−1
cos−1 (eθ ) + cc
T

)

(13)

where cc is given by:
vb =Kx (Kd ex + Kl d sin(eRT ) sin(eθ ) + Ko sin(eθ )cc )
cc =

KRT sin (eRT )
rcT Ko sin(eθ ) cos(eθ )
sin(eθ ) cos(eθ )
Kd ey − Kl d sin(eRT ) cos(eθ )
+
+ Kθ tan(eθ )
Ko cos(eθ )

d 2 Kl sin(eRT ) cos(eRT )

+

(14)

2

(15)

K = (Kd , Kl , Ko , Kx , KRT , Kθ ) is a vector of positive constants which must be deﬁned by the designer
according to the desired convergence toward the assigned target (more details are given in [20]).
427

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

Figure 3: Global architecture

3

Hierchical action selection using a reactive multi-agent system

3.1

Global overview

Different solutions can be chosen to combine the elementary controllers. The easiest one is to use a
hard switch which selects the application of the one controller according to the distance to the nearest obstacle. This solution provides good results in term of reliability and command law continuity.
Nevertheless, it does not ensure adaptive behaviour and a good level of comfort for passengers.
The aim of this section is to introduce an adaptive system to combine target reaching and obstacles
avoidance behaviours depending on the distribution of the obstacles perceived by the vehicle. The proposed switching system between controllers is based on a multi-agent system where the interpretation of
agency on the organizational level provides a merged command. The proposed approach is an extension
of the model presented in [9]. It is based on a situated virtual environment where data, provided by
sensors, agents and target position are interacting together. The interactions between system entities are
based on Newtonian laws.
The merging process is made as follow (Figure 3):
• The agents virtual environment is built using the perception of obstacles that have to be avoided
and integrates the position of the target relatively to current vehicle position. The dynamics of
this environment is linked to the changes that may occur in vehicle perception.
• Agents, considered as elementary particles, interact with vehicle target position and obstacles
representatives.
• Agents organisation is then measured by an external observer taking into account geometrical and
dynamical aspects. This measure is then translated into a merge command law that takes into
account both navigation goal and obstacle distribution.
This system is detailed in the following subsections.

3.2

Model description

3.2.1

Agents Environment

The agents environment is the key component in such approaches. Its role is to link vehicles world (real
or simulated) with the agent world. It integrates both the data provided by the two controllers presented
above and the information furnished by the sensors. Basically, the data provided by the controllers are
428

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

combined so as to produce an attractive spot for agents. The combination is made taking into account
the distance of the nearest obstacle using the following equation:
T (x, y) = f (d)OA + (1 − f (d))F

(16)

where T : target position in vehicle referential, OA : obstacles avoidance command, F: path following command
The function f is deﬁne as follow: f (x) = (1 + 0.5.x2 )−1 with x the distance to the nearest obstacle.
The value of f (x) is high when the obstacle is close to the vehicle, consequently more importance is
paid on obstacle avoidance.
As opposed to the treatment applied to the command laws, the positions of perceived obstacles are
directly integrated into the virtual environment as aggregates of repulsive spots.
3.2.2

Agents and Interactions

Agents are considered as small mass particles evolving in a force ﬁeld. The force ﬁeld is obtained
combining repulsion forces induced by obstacles representatives and by agents themselves and attraction
forces induced by the target to reach. Agents environment perception is realized through a circular
frustum. A projection of the target position is made so as to be able keep it on frustum borders when out
of range This projection allows agents to always know the target direction in the environment.
As explained before, interactions as composed of two categories: attractions and repulsions.
• Interaction between agents and target (Attraction): The attraction force generated by the target is
computed as a linear force deﬁned by:
F = βg mAi T

(17)

• Interaction between agents (Repulsion): The repulsion between agents is generally introduced
to ensure a homogeneous exploration of the environment avoiding false agents grouping. This
repulsion is made by classical Newtonian force in r−2 . If Ai and A j are two agents located in Pi
and Pj , the repulsion force is given by:
Fri j = αmi m j

Pi .Pj
Pi .Pj

(18)

3

• Interaction between agents and obstacles (Repulsion): This interaction shares the same formulation as agents repulsion. This force could be generalized in a 2-dimensional space by:
⎧
(xi −xo )
⎨ FoX = ∑o Δo · m · mo
i
((yi −yo )2 +(xi −xo )2 )3/2
(19)
(yi −yo )
⎩ FoY = ∑o Δo · m · mo
i
((y −y )2 +(x −x )2 )3/2
i

3.2.3

o

i

o

Agent population evaluation

The decision process is based on the evaluation of the distribution of agents. The system evaluates the
repartition of agents population and deﬁnes a center of mass. The result of this observation is noted
−−−−−→
Pdir (x, y) and corresponds to a vector from vehicle and center of mass of agent’s population Pmean (x, y)
−−−−−→
−−−−−→
Pdir (x, y) is a new command to control the vehicle. The angle between Pdir (x, y) and local X axis
−−−−−→
is a steering angle adopted by the vehicle. The length of Pdir (x, y) corresponds to the speed command
reference.
429

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

4

Validation

In many cases, when a simulation is done, one have to make a conclusion from what have happened.
In this context, metrics have been deﬁned to record some parameters during simulation time. They are
useful to exploit post-simulation results.
• Steering angle metrics: This metrics records the steering angle command of the vehicle.
• Speed metric : This metric records the speed command of the vehicle.
• Physical integrity metric : Physical integrity is the closest distance to the obstacles. Time to
collision is also evaluated using the current velocity vector.
As previously said, this paper presents a hybrid control architecture and multi-agent system. To
illustrate our approach, simulations were made in Matlab and in Janus1 for the multi-agent part. The
scenario is divided into two parts. In ﬁrst, hard switch between obstacle avoidance and target reaching
controllers is used. In second, multi-agent system adapt command taking account data environment.
Scene is composed by four obstacles placed on vehicle path and simulation is stopped at the ﬁrst collision.

4.1

Simulation results

Simulation were made with one single obstacle. The result obtained were similar whether the hard
switch or the multi-agent were used. Consequently, we decided to focus on the results obtained with
several obstacles where the results obtained are more interesting in term of command continuity. This
simulation allows to increase the complexity of the environment. The vehicle navigates while avoiding
the obstacles (clockwise and counter-clockwise sense).
• Hard switch.
Figure 4 shows the trajectory of the vehicle using a hard switch between the controllers. The
switches occur when the hinder obstacles are detected (e.g., obstacles 3 and 4). Figure 5 (top
left) shows the evolution of the velocity and steering angle commands using the hard switch
between the controllers. We can observe the discontinuity in the commands which can damage
the actuators and can be uncomfortable for the passengers.
Figure 5 (top right) shows the distance to the four obstacles using the hard switch between the
controllers. We can observe that the vehicle navigation is safe.
• Multi-agents switch.
Figure 4 (bottom left) shows the trajectory of the vehicle using a multi-agents switch. The gradual
coverage of obstacle avoidance law allows a smoother path
Figure 5 (Bottom right) shows the evolution of velocity and steering angle during the simulation.
We can see that the maximum speed is more important and that the steering angles are smoother
when multi-agents merge is used.
We can summarize these simulations: the soft switch allows to move nearer obstacles has a greater
speed while ensuring better security.

1 http://www.janus-project.org/

430

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

Figure 4: Trajectory of the vehicle: Hard switch (Left) and Multi-agent switch (right)

Figure 5: Top left: Commands of vehicle (Hard switch), Top right: Distance to the obstacle (Hard
switch), Bottom left: Commands of vehicle (Multi-agents), Bottom right: Distance to the obstacle
(multi-agents)

5

Conclusions

In this paper, an approach of global control architecture was presented. Originally based on a hard
switch, we propose a merging controls laws to adapt vehicle behaviour to its environment. To cope
with the navigation of UGV in cluttered environment, a single control law is embedded in the UGV
allowing the simpliﬁcation of the used control architecture for autonomous navigation. The obstacle
avoidance based on the limit-cycle guarantees the safe navigation in cluttered environment. Merging
system proposes an adaptive hierarchical action selection using reactive multi-agent system for control
laws merging. Merge system is based on reactive multi-agent system. Environment data are provided by
vehicle sensors and used to anticipate obstacles. Multi-agent system could be see as a security system
when an obstacle avoidance controller failure. This method was successfully tested in simulation and
results obtained encourage us to test it using actual laboratory vehicles.
Those works are done with the support of the French ANR (National Research Agency) through the
ANR-VTT SafePlatoon 6 project (ANR-10-VPTT-011).
431

Adaptive Autonomous Navigation using Reactive Multi-agent... Daﬄon, Vilca, Gechter and Adouane

References
[1] L. Adouane. Hybrid and safe control architecture for mobile robot navigation. In 9th Conference on Autonomous Robot Systems and Competitions, Portugal, May 2009.
[2] L. Adouane. Orbital obstacle avoidance algorithm for reliable and on-line mobile robot navigation. In 9th
Conference on Autonomous Robot Systems and Competitions, Portugal, May 2009.
[3] L. Adouane, A. Benzerrouk, and P. Martinet. Mobile robot navigation in cluttered environment using reactive
elliptic trajectories. In 18th IFAC World Congress, August 2011.
[4] Lounis Adouane. An adaptive multi-controller architecture for mobile robot navigation. In 10th IAS, Intelligent Autonomous Systems, pages 342–347, Baden-Baden, Germany, July 23-25 2008.
[5] A. Benzerrouk, L. Adouane, and P. Martinet. Altruistic distributed target allocation for stable navigation in
formation of multi-robot system. In 10th International IFAC Symposium on Robot Control (SYROCO’12),
Dubrovnik - Croatia, 5-7, September 2012.
[6] Ahmed Benzerrouk, Lounis Adouane, and Philippe Martinet. Lyapunov global stability for a reactive mobile
robot navigation in presence of obstacles. In ICRA’10 International Workshop on Robotics and Intelligent
Transportation System, RITS10, Anchorage-Alaska, May 7th 2010.
[7] R. A. Brooks. A robust layered control system for a mobile robot. IEEE Journal of Robotics and Automation,
RA-2:pp.14–23, March 1986.
[8] J. Clark and R. Fierro. Mobile robotic sensors for perimeter detection and tracking. {ISA} Transactions,
46(1):3 – 13, 2007.
[9] B. Dafﬂon, F. Gechter, P. Gruer, and A. Koukam. Vehicle platoon and obstacle avoidance: a reactive agent
approach. IET Intelligent Transport Systems, (3):257–264, 2013.
[10] A. Das, R. Fierro, V. Kumar, J. Ostrowski, J. Spletzer, and C. Taylor. A vision-based formation control
framework. IEEE Transaction on Robotics and Automation, 18(5):813–825, 2002.
[11] P. Daviet and M. Parent. Platooning for small public urban vehicles. In Oussama Khatib and J.Kenneth Salisbury, editors, Experimental Robotics IV, volume 223 of Lecture Notes in Control and Information Sciences,
pages 343–354. Springer Berlin, 1997.
[12] A. De Luca and G. Oriolo. Local incremental planning for nonholonomic mobile robots. In IEEE International
Conference on Robotics and Automation, volume 1, May 1994.
[13] G. DiMarzo-Serugendo, A. Karageorgos, O.F. Rana, and F. Zambonelli. Engineering self-organising systems:
Nature-inspired approaches to software engineering. Lecture notes in Atiﬁcial intelligence, 2977:299, 2004.
[14] M. El-Zaher, F. Gechter, P. Gruer, and M. Hajjar. A new linear platoon model based on reactive multi-agent
systems. 23rd IEEE International Conference on Tools with Artiﬁcial Intelligence ICTAI, 2011.
[15] Jean-Pierre Georg´e, Marie-Pierre Gleizes, FranciscoJ. Garijo, Victor No¨el, and Jean-Paul Arcangeli. Selfadaptive coordination for robot teams accomplishing critical activities. In Advances in Practical Applications
of Agents and Multiagent Systems, volume 70, pages 145–150. Springer, 2010.
[16] M.S. Jie, J.H. Baek, Y.S. Hong, and K.H Lee. Real time obstacle avoidance for mobile robot using limit-cycle
and vector ﬁeld method. Knowledge-Based Intelligent Information and Engineering Systems, October 2006.
[17] O. Khatib. Real-time obstacle avoidance for manipulators and mobile robots. The International Journal of
Robotics Research, 5:pp.90–99, Spring 1986.
[18] D.H. Kim and J.H. Kim. A real-time limit-cycle navigation method for fast mobile robots and its application
to robot soccer. Robotics and Autonomous Systems, 42(1):17–30, 2003.
[19] A. De Luca, G. Oriolo, and C. Samson. Feedback control of a nonholonomic car-like robot. In J.-P. Laumond,
editor, Robot Motion Planning and Control, pages 171–253. Springer-Verlag, 1998.
[20] J. Vilca, L. Adouane, Y Mezouar, and P. L´ebraly. An overall control strategy based on target reaching for
the navigation of an urban electric vehicle. In IEEE/RSJ International Conference on Intelligent Robots and
Systems (IROS’13), Tokyo - Japan, November 2013.
[21] R. Zapata, A. Cacitti, and P. Lepinay. Dvz-based collision avoidance control of non-holonomic mobile manipulators. JESA, European Journal of Automated Systems, 38(5):559–588, 2004.

432

