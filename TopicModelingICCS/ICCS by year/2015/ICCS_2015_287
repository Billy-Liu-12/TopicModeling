Procedia Computer Science
Volume 51, 2015, Pages 2928–2932
ICCS 2015 International Conference On Computational Science

Efficient Visualization of Urban Simulation Data
Using Modern GPUs
Aleksandr Zagarskikh, Andrey Karsakov and Alexey Bezgodov
ITMO University, Saint-Petersburg, Russia
demiurghg@gmail.com, kapc3d@gmail.com, alazar.az@gmail.com

Abstract
Visualization of simulation results in major urban areas is a difficult task. Multi-scale processes and
connectivity of the urban environment may require interactive visualization of dynamic scenes with
lots of objects at different scales. To visualize these scenes it is not always possible to use standard
GIS systems. Wide distribution of high-performance gaming graphics cards has led to the emergence
of specialized frameworks, which are able to cope with such kinds of visualization. This paper
presents a framework and special algorithms that take full advantage of the GPU to render the urban
simulation data over a virtual globe. The experiments on a scalability of the framework have showed
that the framework is successfully deals with the visualization of up to two million moving agents and
up to eight million of fixed points of interest on top of the virtual globe without detriment to
smoothness of the image.
Keywords: GIS, Visualization, City science, Virtual globe, GPU

1 Introduction and Related Works
The urban environment is a complex system and its state could be defined in detail only through a
computer simulation. It allows us to generalize fragmentary observation data coming from various
sources. Modeling and visualization systems in the City Science domain should combine mechanisms
for collecting, storing and processing large amounts of data, high performance computing tools
(including distributed environments) as well as geo-visualization technology to represent the results of
data analysis and simulations. In the domain of City Science not only visualization of agents over the
map, but also a visualization of multilinked data describing the interaction between these agents may
be required. To visualize simulation results, geographic information systems (GIS) are generally used.
Most of the GIS available today are focused on the visualization of geo data on the multiple scales;
they are not able to visualize multilinked data. Such kind of GIS is often used to visualize the results
of the agent-based models’ computations and processes taking place in the urban environment. There
are both commercial systems - ArcGIS [1], and non-commercial open source projects - GRASS GIS
[2], QGIS [3].

2928

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.481

Eﬃcient visualization of urban simulation data using modern GPUs

A. Zagarskikh et al.

Existing GISs are used in a significant number of research projects, but in some cases, researchers
prefer to develop their own solutions [4]. This is caused by the fact that their projects require specific
features and their integration into existing systems could be a highly time-consuming task.
However, these typical GIS have one important disadvantage: they all are designed primarily to
render static scenes and this purpose restricts their capability to visualize dynamic scenes on various
levels of scale. Therefore in such situations it would be relevant to use special frameworks, such as
GAMA framework [5] or even game engines [6], which offer the full power of the modern GPU.

2 Multi-scale Urban Visualization Upon Virtual Globe
Architecture of the framework which provides the base for presented algorithms, as a prototype
has already been described in detail in [7], so in this paper we would like to sketch it out briefly and
focus on the main subject of the study.
The amount of data at different scales that need to visualize can be quite large, which leads to the
need for full use of the modern GPUs’ possibilities. The virtual globe is one of the best ways to
represent all this data at different scales. Framework provides tools for visualization of virtual globe
and geo data on top of it. Figure 1 shows the example of multi-scale virtual globe visualization at
different scales.
However, in the domain of the virtual globe rendering a vertices jittering problem might occur, due
to the fact that most of the currently existing graphics cards support only 32-bit floating-point
numbers. But with the advent of DirectX11 (DX11) partial support of double-precision numbers
appeared in the Shader Model 5. This feature is used to visualize geo data over the globe with the help
of the special eye-relative rendering technique [8]. In our case all of the information regarding the
objects positions should be stored in a double-precision numbers, which increases the size of the data
transmitted from RAM to the GPUs memory. To reduce the amount of data, coordinates are specified
in a form of latitude and longitude. For visualization they have to be transformed into Cartesian space
and this transformation takes place in the vertex shader (a program which is executed on the GPU).
This problem and its solution impose its own imprints on geo data visualization algorithms on top
of a virtual globe. The algorithms used to visualize agents, polygonal lines and multilinked data are
described below.

Figure 1. Visualization of virtual globe at different scales with the Pulkovo airport on top of it.

2929

Eﬃcient visualization of urban simulation data using modern GPUs

A. Zagarskikh et al.

2.1 Agents
The most common way to visualize agents and points of interest consists in CPU calculation of
four points, which define the polygon sides, then determination of indexes of the vertices to form two
triangles that make up the polygon. That is why in the case of updating the position of the agent
should recalculate these four positions and update the vertex buffer. This approach is not suitable for
visualization of a large number of agents.
Here we introduce an algorithm to visualize agents on the surface of a virtual globe based on the
algorithm of billboards’ visualization [8]. The main difference lies in the fact that the normal to the
virtual globe is defined in the vertex shader, and the tangent to the parallel at this point is determined
by longitude. These vectors are sufficient to determine the exact rotation of the polygon at that point.
Geometry shader receives the vertex position in camera space and calculated vectors. Basis is
calculated using the cross product of the normal and tangent. Then, the positions of the four vertices of
the polygon are determined based on the basis and width specified in the constant buffer.
The main feature of the work with doubles on the GPU with DX11 is that it is impossible to pass it
on the input and output of the shader. In structures that describe the vertex, the coordinates are passed
to the input of the vertex shader in the form of a double. But on the side of the vertex shader they are
already perceived as two unsigned integers. To get the value in the double format a special function is
used “asdouble”. Support of double-precision numbers in shaders is extremely limited, all intrinsic
functions and the division operation is not supported. Their absence is compensated by using a Taylor
series.

2.2 Polygonal Lines
In some cases a one-pixel width lines may be insufficient to represent some geo data, for example,
railways. In this case, the vector data are visualized using polygonal lines. For more information
content polygonal lines can be textured. Geometry shader is also used for visualization of polygonal
lines in the proposed algorithm. “Line strip with adjacency data” is used as a primitive, this primitive
allows you to get two major vertices in the geometric shader, which form a segment, and two vertices
which lie on either side of this segment. Because of that we should add copy of the first vertex in the
beginning of buffer and a copy last vertex in the end of the buffer. Thus, geometry shader receives
four vertices. Each vertex has a normal calculated in the vertex shader. Knowing the position of the
vertex on the left of the segment and the position of the vertex on the right, we can calculate the new
coordinates of the vertices of the polygon in such a way that there are no gaps between the line
segments. First, we need to calculate the vector in the direction where it is necessary to move the
vertex. To do this, for the next two segments a cross product of the direction of the line onto the
normal in the adjacent point is calculated. The normalized sum of these vectors will give the right
direction. Four or more vertices, elongated along these vectors to a predetermined width, are fed to the
output of the geometry shader. Since the virtual globe is not flat, long lines can fall into it; to solve this
problem, additional segments can be added, the vertices of which must be pulled along the normal. In
the case of rendering lines on top of the terrain, the elevation information is taken from the height map
in the vertex shader. Also the texture coordinates are calculated from the length of the line.
The main advantage of this algorithm is that the size of the polygonal line can be changed "on the
fly", for example, the line width may depend on how far away the camera.

2.3 Graph
Besides the visualization of geo data and virtual globe, framework provides the ability to visualize
three-dimensional graphs, using dynamic layout based on force models. The purpose of these models
is the positioning of nodes of the graph in 2D or 3D space using binding forces with the nodes and
edges of the graph based on their relative positions and then using force to simulate the movement of

2930

Eﬃcient visualization of urban simulation data using modern GPUs

A. Zagarskikh et al.

vertices and edges or minimize the system energy. Thus, all edges of the graph are of approximately
equal length and the intersection between them is minimal.
Nodes represent charged particles. The forces of attraction and repulsion are acting between them.
In the presented algorithm, forces similar to the Coulomb force are used as repulsive forces, and force
is similar to Hooke's law as a force of attraction. The compute shader is used to update the positions of
the nodes of the graph. Compute Shaders in DX11 provides opportunities of General-purpose
computing on graphics processing units. The main feature of the proposed algorithm is that the
addition of new nodes in the graph may occur on every frame. The system first checks whether there
are new nodes to be added and if they are, then there is a recording of new data in buffers. Then
calculation of the forces of repulsion occurs in the compute shader. Since each node is repelled by
each node to speed up the shader information about nodes position is copied from the slow global
memory to a fast local memory. The next step is to calculate the force of attraction. At this stage, data
is also copied into local memory, but at this time this information is about the relationships between
nodes. At the end of this step all forces acting on the node are summed. With a total force we calculate
acceleration and speed of the node, and then we move this node according to this speed. The
instancing technique is used to render the nodes. The point is that only four vertices transferred to the
input assembly and copies of that vertices will be visualized in a specified number of times.
The algorithm allows to visualize up to 40,000 nodes of the graph without losing the smoothness
of the image (tested on NVidia GeForce GTX770).

3 Experimental Results of the Scalability
Tests were performed on the PC - Intel Core i7-3930K with 32 GB RAM and NVIDIA GeForce
GTX 770 video card, 24 FPS is considered a good indicator, and an excellent result is 60 FPS.
Saint Petersburg was chosen as the target city for the tests. Location of agents within the city is not
important, thus the position of each agent was set randomly, and the main condition for the quality of
rendering is getting all the agents in the visible region.
Two different scenarios were tested during experimental researches. In the first scenario, we
determined the maximum number of points of interest, in the second scenario, the maximum number
of agents. The main difference is that the vertex buffer, that contains agents, will be updated on every
frame, while the buffer which contains the points of interest, need to be initialized only at the
beginning. The measurement values for the points of interest are shown in Table 1. The measurement
values for the agents shown in Table 2.
Characteristic
FPS
Initialization time, ms

3
60.03
570

Amount of points of interest N, millions
4
5
6
7
8
51.93
41.61
34.98
30.09
26.33
714
860
954
1104
1309

9
23.45
1464

10
21.19
1624

Table 1: The scalability of the visualization according to the number of points of interest

Characteristic
FPS
Writing to VB, ms
Writing to RAM, ms

0.7
60.0
4.6
5.8

0.75
59.4
5.4
6.8

0.8
57.0
5.7
6.8

Amount of agents, millions
0.9
1.0
1.5
2.0
52.6 46.7 34.8 26.2
6.1
7.2 10.3 14.3
7.6
8.5 14.3 18.4

3.0
18.8
20.6
27.3

4.0
14.3
27.7
36.6

5.0
11.1
38.5
46.3

Table 2: The scalability of the visualization according to the number of agents

As can be seen from Table 1, a system can visualize not more than eight million points of interest
without loss of the smoothness of the image. As can be seen from the Table 2 the need to update the

2931

Eﬃcient visualization of urban simulation data using modern GPUs

A. Zagarskikh et al.

array of vertices and its subsequent entry in the vertex buffer significantly affect the number of FPS, to
solve this problem a better hardware or special data packaging techniques could be used.

4 Conclusions and Discussions
The three algorithms for performance were presented as a part of the framework for visualization
of simulation results in the field of City Science. The framework provides tools for visualization of
large amount of geo data on the top of the multi scale virtual globe, tools for creating user interface
and visualizes statistical data. This framework has no strict binding to the particular models and can
visualize results of the many different simulations from different models. In addition framework
allows users to visualize three dimensional graphs with the big amount of nodes (around 40000).
The experimental results show that system can visualize about two million agents and eight
millions of them without loss of smoothness of the image. However, the effectiveness of the presented
algorithms largely depends on the type of GPU that is installed on the personal computer.
Decision support system was created using framework [7]. This DSS is used to calculate the threat
of the spread of epidemics. The specificity of this DSS is the need for multi-scale modeling of the
epidemic: from the size of the city as a whole to individual buildings of the mass use (theatres,
stadiums, railway stations, airports etc.). All presented algorithms have been used to enhance the
performance.
This paper is supported by Russian Scientific Foundation, grant #14-21-00137 "Supercomputer
simulation of critical phenomena in complex social systems". The research is done in Advanced
Computing Lab (ITMO University), which is opened in frame of 220 Decree of Russian Government,
contract #11.G34.31.0019.

References
[1]
[2]

[3]

[4]

[5]

[6]

[7]
[8]

M. Katsianis, S. Tsipidis, K. Kotsakis and A. Kousoulakou, "A 3D digital workflow for archaeological
intra-site research using GIS," Journal of Archaeological Science, vol. 35, no. 3, pp. 655-667, 2008.
F. N. a. Mannelli and S. Marangon, "Analysis of the 1999-2000 highly pathogenic avian influenza
(H7N1) epidemic in the main poultry-production area in northern Italy," Preventive Veterinary Medicine,
vol. 73, no. 4, pp. 273-285, 2006.
A. C. Teodoro and L. Duarte, "Forest fire risk maps: a GIS open source application – a case study in
Norwest of Portugal," International Journal of Geographical Information Science, vol. 27, no. 4, pp. 699720, 2013.
S. Zhang, Z. Xia and T. Wang, "A real-time interactive simulation framework for watershed decision
making using numerical models and virtual environment," Journal of Hydrology, vol. 493, pp. 95-104,
2013.
A. Grignard, P. Taillandier, B. Gaudou, D.-A. Vo, N.-Q. Huynh and A. Drogoul, "GAMA 1.6:
Advancing the Art of Complex Agent-Based Modeling and Simulation," PRIMA 2013: Principles and
Practice of Multi-Agent Systems, vol. 8291, pp. 242-258, 2013.
R. C. Mat, A. R. M. Shariff, A. N. Zulkifli, M. S. M. Rahim and M. H. Mahayudin, "Using game engine
for 3D terrain visualisation of GIS data: A review," IOP Conf. Series: Earth and Environmental Science,
vol. 20, pp. 1-12, 2014.
A. Zagarskikh, A. Karsakov and T. Tchurov, "The Framework for Problem Solving Environments in
Urban Science," Procedia Computer Science, vol. 29, pp. 2483-2495, 2014.
P. Cozzi and K. Ring, 3D Engine design for virtual globes, CRC Press, 2011.

2932

