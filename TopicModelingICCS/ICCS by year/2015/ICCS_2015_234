Procedia Computer Science
Volume 51, 2015, Pages 2764‚Äì2768
ICCS 2015 International Conference On Computational Science

A Structuring Concept for Securing Modern Day
Computing Systems
Orhio Mark Creado1 , Phu Dung Le1 , Jan Newmarch3 , and JeÔ¨Ä Tan4
1

2

Monash University, CaulÔ¨Åeld East, Victoria, Australia
mark.creado@monash.edu
phu.dung.le@monash.edu
Charles Sturt University, Bathurst, New South Wales, Australia
j.newmarch@boxhill.edu.au
3
IBM Research - Australia, Melbourne, Victoria, Australia
jeffetan@au1.ibm.com

Abstract
Security within computing systems is ambiguous, proliferated through obscurity, a knowledgeable user, or plain luck. Presented is a novel concept for structuring computing systems to
achieve a higher degree of overall system security through the compartmentalization and isolation of executed instructions for each component. Envisioned is a scalable model which focuses
on lower level operations to alleviate the view of security as a binary outcome to that of a
deterministic metric based on a set of independent characteristics.
Keywords: Security Framework, Computing System Security, Computing System Architecture, Structuring Monitors

1

Introduction

Computing System(s) (CS) have evolved rapidly in a short time, but have been forced to enforce
security through obscurity rather than design [6], resulting in many security vulnerabilities
stemming from the Ô¨Çaws in the underlying architectural design. The Von-Neumann architecture
has greatly inÔ¨Çuenced the design of commodity CS, however, the architecture design never
incorporated security as a core requirement, rendering it unable to support modern day CS [3].
This paper proposes a framework to enforce security through design by applying a comprehensive deÔ¨Ånition of security to each component within a functional CS enforced by a set of
structuring monitors to compartmentalize and isolate component operations.
The rest of this paper is organized as follows. Section 2 brieÔ¨Çy outlines relevant literature,
Section 3 outlines the proposed framework, Section 4 provides a concise conceptual evaluation,
and Section 5 provides a conclusion and directions for future research.
2764

Selection and peer-review under responsibility of the ScientiÔ¨Åc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.427

Structuring Concept for Securing Modern Day Computing Systems Creado, Le, Newmarch, and Tan

2

Background

From the reviewed literature, a deterministic model for a secure CS based on enforceable
characteristics has never been proposed. Existing approaches can be categorized as follows:
System Based: One of the oldest approaches with a strong niche in government and military organizations, but suÔ¨Äered from unclear distinction between conÔ¨Ådentiality and integrity
[8]. For e.g. MULTICS [13], KSOS [11], PSOS [12], EROS [14], etc.
Software Based: Include the use of micro kernels [15], and virtualization [7], but suÔ¨Äered
from high operational overheads, and challenges arising from incorrect administration [16].
Hardware Based: Aim to enforce security through hardware but cannot prevent software
attacks and are susceptible to compromised hardware. For e.g. Microsoft‚Äôs NGSCB [1] which
implemented the Trusted Platform Module [10].
Many of the proposed approaches suÔ¨Äer from an over dependence on the Operating System
(OS). Structuring the OS to enforce security was proposed by Hoare [5], and implemented
as part of a hierarchical design, similar to protection rings, by Lister and Sayer [9]. However,
protecting ring 0 from itself has always been an open challenge [2].

3

The Proposed Framework

The proposed framework segments the CS to consist of Hardware, OS, Services, Applications,
and Users. Considering any CS, as functionality is rendered through operating code, the most
fundamental unit of operation is deÔ¨Åned to be a Block of Code (BoC) which is a singular block of
operating code consisting of a set of sequential instructions to be executed, at the processor level,
in order to provide some desired functionality. With this analogy, each identiÔ¨Åed component
can be represented as a set of BoC which interact together to provide some desirable end result.
To facilitate the deterministic quantiÔ¨Åcation of a BoC, we adopt the deÔ¨Ånition of security
given by Creado et. al. [4], as a combination of independent characteristics - Is Invulnerable (Inv), Has Integrity (Int), Is VeriÔ¨Åed (V er), Is Trustworthy (T wy), and Is Secure (Sec);
formally generalized for overall system security for any CS Œ® running n BoC as:
n

Sec (Œ®) =

{Inv (Vi ) ‚à™ Int (Vi ) ‚à™ V er (Vi ) ‚à™ T wy (Vi ) ‚à™ Sec (Vi )} |i ‚àà N

(1)

i=0

The proposed framework advocates the deÔ¨Ånition of a set of independent monitors to enforce
each security characteristic for each BoC as depicted in Fig. 1a. A linear progression between
characteristics facilitates the highest probability for secure component operation. As the entire
system can be vulnerable to the least secure code executed, therefore by ensuring that each
BoC executed adheres to each of the deÔ¨Åned security characteristics can assure a higher degree
of overall system security.
Fig. 1b illustrates the assignment of structuring monitors, which operate independently, to
the system as well as to each component in order to compartmentalize and isolate operations,
with each monitor deÔ¨Åned with the following aspects to govern their operations.
Operational Aspects - govern operations to enforce the monitored security characteristic,
and includes - Monitor Class (C) - deÔ¨Ånes the level of information sharing within the CS
as System-Only (CO ), System-Wide (CW ), or Local (CL ). Monitor Scope (S) - deÔ¨Ånes
visibility as Global Scope (SG ), or Local Scope (SL ). Monitor Mode (O) - deÔ¨Ånes the
operating mode as Analysis Mode (OA ), Tracking Mode (OT ), Hybrid Mode (OH ), or User
Mode (OU ).
2765

Structuring Concept for Securing Modern Day Computing Systems Creado, Le, Newmarch, and Tan







	


	





 



	




	
	


 	







	


	


	
	



 



	




	
	


 	





 



	




	
	


 	





 



	




	
	


 	





 



	




	
	


 	








	


	












	


	







				





 



	




	
	


 	






	


	







	


	






	
'
	
(
*	
	
'
	
'
	
)
 	

+		,
'
	
'
	






	


	




 



	




	
	


 	

	
	













	


	





	


!"#$%&

(a) Monitor Component Allocation


				




				











	


	






				  				




				




				



(b) Monitor Hierarchy

Figure 1: Structuring using Monitors
Functional Aspects - govern functions and behaviour whilst monitoring, and includes Hierarchy (H) - deÔ¨Ånes priority in the decision making process, as System-Only Global (HOG ),
System-Wide Global (HW G ), System-Wide Local (HW L ), and Local Local (HLL ). Functional
Metrics - governs monitor functions and behaviour, and includes - Rules (R) - deÔ¨Ånes the
set of conditions to be enforced for each security characteristic. Permissions (P ) - deÔ¨Ånes the
permissions for all inter-monitor and intra-monitor communications. Functions (F ) - deÔ¨Ånes
the actions which can be performed based on monitor mode and the deÔ¨Åned rules. Access Level
(A) - deÔ¨Ånes the resources accessible in order to enforce each security characteristic. Trust
(U ) - deÔ¨Ånes the trust level associated with a monitor to facilitate trusted operations.

4

Theoretical Evaluation

As system compromise is a direct result of the presence of an exploitable vulnerability, a probability space Œ© ‚Üí [0, 1] for all f ‚àà F where f is an event with a probability outcome of some
a|0 ‚â§ a ‚â§ 1 is assumed, wherein a BoC enforces the deÔ¨Åned security characteristics through
the inclusion of speciÔ¨Åc operating code to enforce it.
Two hypothetical systems are considered. First, a partially secure commodity system which
executes a BoC while enforcing some security characteristics either through included instructions or as code executed at the user‚Äôs discretion, wherein the code to enforce each security
characteristic isn‚Äôt necessarily isolated. Second, is the proposed system which explicitly mandates the requirement for additional isolated code to enforce each security characteristic, in
addition to the deÔ¨Ånition and operation of monitors to ensure enforcement.
Considering each of the deÔ¨Åned security characteristics and their associated instructions as
elements within a set, we can apply set theory and probability theory to Eq. 1 to ascertain the
degree of security achieved and the impact on performance for a CS Œ® as depicted in Table 1.
Security Evaluation - For simplicity, considering the associated probabilities for each
characteristic to be equal, the most ideal representation of the probability of security for both
systems considered is shown in Fig. 2a. We note a strong indicative diÔ¨Äerence between the
p(Sec) for the considered systems. Furthermore, as practical implementations for a partially
secure commodity systems do not necessarily enforce each of the deÔ¨Åned security characteristics,
the resulting probability for partially secure commodity systems may be far lower than the ideal.
2766

Structuring Concept for Securing Modern Day Computing Systems Creado, Le, Newmarch, and Tan

Commodity System

Proposed Framework

Probability of security p (Sec (Œ®)) can be ascertained from the probabilities of each
enforced security characteristic:
‚éû
‚éû
‚éõ
‚é°‚éõ
p (Inv (Vi )) ‚àó p (Int (Vi )) ‚àó
‚éù p (V er (Vi )) ‚àó p (T wy (Vi )) ‚àó ‚é†
p (Sec (Vi ))
i=0
m

p (Sec (Œ®)) =

‚é§
p (Inv (Vi )) + p (Int (Vi )) +
‚é£‚éù p (V er (Vi )) + p (T wy (Vi )) + ‚é† /5‚é¶ /m
p (Sec (Vi ))
i=0
m

Performance impact can be ascertained as the number of instructions (O) executed to
provide functionality, enforce each security characteristic,‚éßand for monitor operations:
‚é´
‚éß
‚é´
‚é® O (def aulti ) + O (Invi ) + ‚é¨
O (Inti ) + O (V eri ) +
|i ‚àà N
‚é©
‚é≠
O (T wyi ) + O (Seci )
i=0
m

O (Œ®) =

O (def aulti ) + O (Invi ) + ‚é™
‚é™
‚é¨
‚é®
O (Inti ) + O (V eri ) +
|i ‚àà N
O (T wyi ) + O (Seci ) +
‚é™
‚é™
‚é≠
‚é©
i=0
O (M oni )
m

Table 1: Security Evaluation
Performance Evaluation - Fig. 2b depicts the ideal impact on performance resulting
from an increase in the number of instructions executed in order to enforce each of the security
characteristics. We note a strong potential for operational overhead with the proposed framework, however, at this stage in the conceptual development, these results are only indicative as
implementation level empirical data doesn‚Äôt exist. However, the relationship between security
and performance have been directly correlated to the default number of instructions within the
underlying BoC being executed.


	








	


	


(a) Security Evaluation









(b) Performance Evaluation

Figure 2: Evaluation Comparative Analysis

5

Conclusion

This paper has proposed a conceptual framework to address some of the foundational Ô¨Çaws
within existing CS operations. By emphasizing low level operations, speciÔ¨Åcally pertaining to
the deÔ¨Åned fundamental unit of operation - a BoC, the framework allows for evaluating existing
CS operations and allows for an adaptable model towards proactively ensuring system security
based on executed instructions. Future research aims at deÔ¨Åning an underlying architecture
with logically sound properties for each of the deÔ¨Åned security characteristics. For now, the
use of conventional CS is unavoidable. The nature of computation has allowed for deÔ¨Åning
2767

Structuring Concept for Securing Modern Day Computing Systems Creado, Le, Newmarch, and Tan

intelligence artiÔ¨Åcially, but the strive for perfection is still underpinned by dated mechanisms
which have been reinforced with band-aid solutions to counter existing vulnerabilities. Performance oriented computing needs to give some room for enforcing security to achieve some level
of balance in this inverse correlation.

References
[1] Martin Abadi and Ted Wobber. A logical account of NGSCB. In David Frutos-Escrig and Manuel
Nunez, editors, Lecture Notes in Computer Science, volume 3235, pages 1‚Äì12‚Äì. Springer Berlin
Heidelberg, 2004. http://dx.doi.org/10.1007/978-3-540-30232-2_1, last viewed December
2012.
[2] Sergey Bratus, Peter C. Johnson, Ashwin Ramaswamy, Sean W. Smith, and Michael E. Locasto.
The cake is a lie: privilege rings as a policy resource. In Proceedings of the 1st ACM workshop on
Virtual machine security, pages 33‚Äì38, Chicago, Illinois, USA, 2009. ACM.
[3] Aleksander Budzynowski and Gernot Heiser. The von neumann architecture is due for retirement.
In Proceedings of the 14th USENIX Conference on Hot Topics in Operating Systems, HotOS‚Äô13,
pages 25‚Äì25, Berkeley, CA, USA, 2013. USENIX Association. http://dl.acm.org/citation.cfm?
id=2490483.2490508, last viewed December 2014.
[4] O. M. Creado, B. Srinivasan, P. D. Le, and J. Tan. The ideal computing system framework - a novel
security paradigm. The SIJ Transactions on Computer Science Engineering & its Applications
(CSEA), 2(3):35‚Äì44, May 2014.
[5] C. A. R. Hoare. Monitors: an operating system structuring concept. Commun. ACM, 17(10):549‚Äì
557, 1974.
[6] Jaap-Henk Hoepman and Bart Jacobs. Increased security through open source. Commun. ACM,
50(1):79‚Äì83, January 2007. http://doi.acm.org/10.1145/1188913.1188921, last viewed December 2014.
[7] Samuel T. King. Virtualization and security: Back to the future. IEEE Security & Privacy,
6(5):15‚Äì15, September 2008. http://doi.ieeecomputersociety.org/10.1109/MSP.2008.136,
last viewed February 2013.
[8] Carl E. Landwehr. Formal models for computer security. ACM Comput. Surv., 13(3):247‚Äì278,
1981.
[9] A. M. Lister and P. J. Sayer. Hierarchical monitors. Softw: Pract. Exper., 7(5):613‚Äì623, 1977.
http://dx.doi.org/10.1002/spe.4380070506, last viewed December 2013.
[10] Andrew Martin. The ten page introduction to trusted computing. Technical Report RR-08-11,
OUCL, December 2008.
[11] E. J. McCauley and P. J. Drongowski. KSOS - the design of a secure operating system. National
Computer Conference, pages 345‚Äì353, 1979.
[12] Peter G. Neumann and Richard J. Feiertag. PSOS revisited. In Proceedings of the 19th Annual
Computer Security Applications Conference, page 208. IEEE Computer Society, 2003.
[13] John. Rushby. The bell and la padula security model, 1986. http://www.sdl.sri.com/~rushby/
papers/blp86.pdf, last viewed November 2012.
[14] J.S. Shapiro and N. Hardy. EROS: a principle-driven operating system from the ground up.
Software, IEEE, 19(1):26‚Äì33, 2002.
[15] A.S. Tanenbaum, J.N. Herder, and H. Bos. Can we make operating systems reliable and secure?
Computer DOI - 10.1109/MC.2006.156, 39(5):44‚Äì51, 2006.
[16] S.J. Vaughan-Nichols. Virtualization sparks security concerns. Computer, 41(8):13‚Äì15, 2008.

2768

