Procedia Computer Science
Volume 51, 2015, Pages 1655–1664
ICCS 2015 International Conference On Computational Science

Dynamic Execution of a Business Process via Web
Service Selection and Orchestration
Muhammad Fahad, Néjib Moalla and Yacine Ourzout
DISP Lab (http://www.disp-lab.fr), Université Lumière Lyon2
160 Boulevard de l’Université, Bron, FRANCE
firstname.lastname@univ-lyon2.fr

Abstract
Dynamic execution of a business process requires the selection and composition of multiple existing services
regardless of their locations, platforms, execution speeds, etc. Thus web service selection appears as a challenging
and elusive task especially when the service task has to be executed based on user requirements at the runtime.
This paper presents our Semantic-Based Business Process Execution Engine (SBPEE) for the dynamic execution
of business processes by the orchestration of various exposed web services. SBPEE is based on our designed
Project Domain Ontology (PrjOnt) that captures user specifications and SWRL rules which classify the user
specification into a specific category according to the business logic and requirements of an enterprise. Based on
this classification of the user project and requirements, our semantic engine selects web services from the service
repository for the dynamic execution of a business process. SBPEE matches functional requirements of a web
service and required QoS attributes to identify the list of pertinent candidate services to fulfil the complex
business process transactions. Finally, we present our case study on Create Order business process that aims at
creating an order for the customer by following various web services for its task completion.
Keywords: Web service selection and composition; Workflow Execution; Collaborative BP Platform

1 Introduction
Service Oriented Architecture (SOA) is a foundation building block for the Enterprise IT
infrastructures and the most used paradigm for realizing the business processes for managing the needs
and requirements of different enterprises. According to the Zap survey about 50% of enterprises build
their solution on SOA, while more than 25% planned to use it within the near future [1]. The
fundamental concept of the SOA is a Web Service, which is a self-contained and self-describing
loosely coupled reusable software component. Various services are combined to formulate business
processes, which address complex business functions and build flexible and agile workflows of an
enterprise. According to Papazoglou, “A workflow system automates a business process, in whole or in
part, during which documents, information, or tasks are passed from one participant to another for
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.299

1655

Dynamic Execution of a Business Process

Muhammad Fahad et al.

action, according to a set of procedural rules” [2]. A workflow system also referred to a dynamic
execution of business process which needs automatic selection, integration and invocation of web
services under certain conditions to fulfil the desired functionalities of an enterprise [3]. The most
challenging task at runtime is the selection of a web service that fulfills the specified requirements and
constraints without human intervention. For the optimal selection, the web service selection algorithm
first performs the functional matching and then has to select the service with high QoS values from the
repository to reach an optimal enterprise solution. In case when one service does not fulfil the desired
constraints, many existing services from the service repository regardless of their locations, platforms,
execution speeds, etc., can be integrated into a composite service that carries out parts of a complex
transaction or workflow to implement the desired functionality of a business process.
Recent years have witnessed many different business process modeling notations and languages.
Some of them are Business Process Modeling Notation (BPMN) [4], Workflow [3], Petri Net [6],
Unified Modeling Language (UML) [7] and Business Process Modeling Language (BPML) [8]. Each
language provides different notions, syntax, and complexity for modeling business processes. Web
service composition provides an open, standards-based approach for connecting web services together
to create higher-level business processes. There are two ways to combine such services, i.e.,
Orchestration and Choreography. Orchestration deals with the mechanism in which the involved web
services are under control of a single endpoint central process (another web service), and invoked web
services neither know that they are involved in a composition process [9]. In choreography, each web
service involved knows when to become active, exchange messages, and with whom to interoperate
for the completion of a business process [10]. Due to the reason of flexibility, orchestration is an
efficient and more practical mechanism to compose web service for building executable business
processes. In recent years, many proposals for the composition and execution of web services are
developed, such as WSCL [10], XLANG [11], BPMN [4], DAML-S (and OWL-S) [5], WSCI [11],
BPML [8] and BPEL4WS [12]. Different research and industry enterprises use these paradigms to
build complex business processes and transections for their business project management solutions.
In this paper, we are presenting our Semantic-Based Business Process Execution Engine (SBPEE)
for the dynamic execution of business processes which require combining multiple existing enterprise
services at runtime. We designed Project domain ontology (PrjOnt) in OWL [31] that captures user
specifications, and our semantic-based rules in SWRL [32] which classify the user
project/specification into a specific category according to business requirements of an enterprise.
Based on this classification of the user project, our semantic engine SBPEE has to select and
orchestrate various web services from the service repository for the dynamic execution of a business
process. The web services cannot be chosen at design time, they can only be selected at runtime
depending upon the customer requirements. SBPEE matches the functional details of a web service
and required QoS attributes to identify the list of pertinent candidate services to fulfil the complex
business process transactions. Once the given criteria are matched and optimal solution is planned, it
executes web services for the accomplishment of a desired task. We present our case study on Create
Order business process for an enterprise that aims at creating an order for the customer by following
many web services for its intermediate task completion. Various web services with many variants are
deployed at the WSO2 application server to formulate business processes that address complex
business functions of an enterprise. SBPEE makes different instances of web services interact with
each other, fulfilling individual requests that carry out parts of complex workflows to achieve the
desired goal.
The rest of the paper is structured as follows. Section 2 discusses basic concepts and terminology.
The same section presents related works on the domain of web service selection and composition.
Section 3 has two main sections that discuss our approach for the dynamic execution of business
process. The first section presents our semantic based business process execution engine. The second

1656

Dynamic Execution of a Business Process

Muhammad Fahad et al.

section discusses an example scenario from our case study. Section 4 concludes and shows our
perspectives on this work.

2 Related Work
2.1 Basic Concepts and Terminology
Here we discuss some basic concepts and terminology to help reader understand this work.
SOAP: Simple Object Access Protocol is a platform independent XML based communication
protocol used by the client to access web services via HTTP transport protocol [13].
UDDI: Universal Description, Discovery and Integration contains the description of web services
and a mechanism to find and access them [14]. It depicts three types of information about the web
service. First, about the name, address, known identifiers, etc. Second, the web service belongs to
which business category, its type, etc. Third, about the technical information of services. UDDI serves
only functional properties and does not store the non-functional attributes of web services.
WSDL: Web Service Definition Language specifies the operations available through a web service
and the structure of data sent and received to access a web service over the network [15]. Web
Services are registered in the Web Services Repository using Web Services Description Language
(WSDL) files. One has to search a UDDI registry to determine if a Web Service is published in the
registry. The problem with the WSDL is that it only describes the structure of data sent and received,
but unable to describe the semantics or meaning of the data. Lack of semantics put hurdles for the
automatic search and composition to fulfil a desired task.
OWL-S: Web Ontology Language for Services, based on the W3C standard OWL ontology, is an
upper ontology used for the description of web service properties and its semantics [16]. It comprises
of three parts also called three main upper ontologies. The Service Profile contains the general
information and for what the service is designed. The Process Model represents how the service
fulfills the desired task or its functionality. The Grounding part illustrates how to access the web
service and links with industry standards.
WSML and WSMO: Web Service Modeling Ontology (WSMO) provides a conceptual model and a
formal modeling language WSML (Web Service Modeling Language) to specify the semantics of web
services by the formal specification of terms and elements [17]. It is used for the semantic markup
with a reference implementation of the Web Service Execution Environment (WSMX).
BPMN: Business Process Modeling Notation (BPMN) proposed by Business Process Management
Initiative (BPMI) is used to model business process within a workflow [4]. It comprises of various
graphical components to model the specification of a business process. There is a mapping between
each of the BPMN notation and the implementation and execution languages.
BPEL4WS: A collaborative initiative by IBM, Microsoft and BEA results a new web service
workflow specification named Business Process Execution Language for Web Services (BPEL4WS)
also short termed as BPEL [12]. For the purpose of orchestration of web services, BPEL4WS provides
a XML-based grammar to build the control logic and key algorithm that invokes and combines various
web services to execute business processes.
QoS: Quality of Service (QoS) is a set of non-functional requirements of a service such as
availability, response time, reputation, throughput, reliability, etc. When more than one services match
with the functional requirements then it is crucial to match QoS to select the most appropriate one.
Causal Links: When the web service composition consists of a partial order and web services are
semantically linked then it is termed as a composition of Causal Links [18]. Mostly the Causal Link
Matrix (CLM) is used to find the best composition of existing web services.

1657

Dynamic Execution of a Business Process

Muhammad Fahad et al.

2.2 Existing Approaches: Service Selection and Composition
In the research literature, the web service composition algorithms and systems are flavored with
QoS and Non-QoS based approaches. QoS based web service composition approaches consider QoS
properties during the selection and composition of web services. Lecue et al. developed a Causal Link
Matrix (CLM) from the set of services that possess functional properties and CLM+ based on the nonfunctional properties [18]. Based on CLM and CLM+ matrices most appropriate services are chosen
and composition is performed. Jiang et al. developed a tool for the QoS-Aware automatic service
composition based on the pruning method [19]. Their pruning mechanism removes the services which
have no inputs as they cannot be composed and those which are QoS non-optimal to find quickly
required composition. Bartalos and Bielikova also proposed a semantic web service composition
approach based on the pruning mechanism, but, also took into account pre-conditions and postconditions to reach an optimal solution [20]. Alrifai et al. developed a scalable approach for the web
service selection based on QoS attributes [21]. In their approach, they took the abstract service as an
input and proposed mechanism to select concrete services for each service class used considering the
optimal QoS attributes. Ardagna et al. used the Service Level Agreement (SLA) to express the QoS
constraints which is used during the execution of annotated business processes developed in BPEL
[26].
Non-QoS based web service composition approaches do not consider QoS parameters during the
selection or composition of web services. Lecue et al. presented a Description Logic (DL) Reasoning
and AI planning based approach for the web service composition [22]. They used DL reasoning over
inputs and outputs for the better interpretation of web services for their composition. Their Golog
interpreter devises the automated branching by means of causal links and provides a conditional web
service composition. Rao et al. contributed a mixed initiative approach for the semantic web discovery
and composition [23]. Their approach gets user intervention for many key decisions over suggesting
and identifying many inconsistencies. They proposed a GraphPlan to predict the reachability analysis
to evaluate whether a given state can be reached from the another state. Sohrabi et al. used first order
language to represent user preferences and web services to find the optimal composition of web
services [24]. They customized Golog (i.e., the agent/logic programming language) programs with the
user preferences for the web service composition. Aydm et al. presented automated web services
composition with the event calculus (i.e., logic programming treatlent of time and change) [25]. Their
abduction theorem generates a series of events and a set of temporal ordering predicates which are
helpful for the web service composition.
The closest works to our approach are web service composition based on workflow techniques that
aim at generating static or dynamic workflows. Casati et al. proposed an adaptive and dynamic service
composition in EFlow platform for the static workflow generation [27]. They formulated a graph for
the composite services that includes services, decisions and events and also captured the order of
execution inside the graph. They further extended their work with the Composite Service Definition
Language (CSDL) that separates service invocation and its operations [28]. Schuster et al. designed
enterprise processes by modeling and composing services in their Polymorphic Process Model (PPM)
[29]. The interesting feature in PPM is that they model service as a state machine which encapsulates
various possible states of a service and their order of execution. For the service composition, they
perform reasoning on the state machine based on its transitions.
There is a lot of work done for the service selection and composition, but the dynamic execution of
a business process, which requires selection of web services at runtime based on the user
requirements, needs more attention from the research community.

1658

Dynamic Execution of a Business Process

Muhammad Fahad et al.

3 Our Approach for Dynamic Execution of a Business Process
To achieve interoperability between web services and business process that invokes these services
to fulfill desired tasks, we are using open source WSO2 application server to host our designed web
services. For each web service, the mediator generates a unique endpoint so that an end-user algorithm
or application can invoke and consume it. We design our business processes in an open source tool
named Activiti [30] that provides graphical notation and corresponding XML (i.e., .bpmn20.xml file)
of BPMN. Generally, there are two ways to build interoperability between Business Process and
Mediator. First through a ‘Web Service Task’ and second via a ‘JAVA Service Task’. Both the tasks
(Web Service task and JAVA service task) are visualized by the same way in activit tool, but have
different implementation mechanisms. Both the methods for the invocation of web services have their
own pros and cons.
Firstly, to call a web service for the web service task directly by the WSDL call inside the business
process needs to deploy a corresponding web service at the Mediator and design a web service task
inside the business process. Then, we have to generate input/output specification code of the web
service. Finally, we have to write manually the interface bridge code for the execution variables of the
business process and the web service parameters. The interface bridge code maps the data input and
output variables of the business process to the input and output parameters of the web service. Due to
the hardcode of web service invocation inside a business process, this method does not allow web
service selection at runtime, and does not appropriate in our case and for the dynamic semantic web
scenarios as well.
The second method is by an intermediate JAVA class between a business process and web service.
The intermediate JAVA class has a web service selection algorithm that dynamically binds the service
task with the web service which suites well by the match making of functional properties and QoS
attributes among the web services present in the service repository. For the design of our system, we
are following this approach for the dynamic execution of a business process and it requires these steps.
Firstly, it requires a linkage between a business process and a JAVA class by assigning appropriate
values to the service task implementation code inside the business process. For this, it is necessary to
assign the name of JAVA class as a activiti class attribute (i.e., activiti:class =
"wso.services.AuthenticateUser"). Secondly, it requires intermediate JAVA class implemented as a
JAVA Delegate Class, i.e., class AuthenticateUser implements JAVADelegate. In addition, the JAVA
class should implement the method named Execute that gets an instance of an execution dynamically,
i.e., execute (DelegateExecution execution). Within this Execute method, the semantic match making
algorithm should be deployed to choose the best available web service from the repository and make a
call to the selected web service by using the stub classes that bridge the JAVA class and the web
service. Below, we discuss prominent features of our system that implements this approach.

3.1 Semantic-Based Business Process Execution Engine (SBPEE)
Semantic-Based Business Process Execution Engine (SBPEE) implements an ontology-based match
making algorithm for the invocation of desired web service. Figure 1 illustrates the architecture of our
SBPEE. We discuss various components of SBPEE one by one.
BPMN Parser. BPMN Parser is subject to get the business process XML file as an input. It parses
the input process and deploys it for the execution. As we have designed our business processes in
activiti, therefore, the input is .bpmn20.xml file that contains the business process in the execution
language.
Task Planner and Executer. After the deployment of a business process, the role of Task Planner
and Executer component starts which launches the execution of the business process. When there is an

1659

Dynamic Execution of a Business Process

Muhammad Fahad et al.

input task, script task, then it executes them normally. In case of a service task, it invokes Service
Monitor and Reasoner component to control the execution of the service task. It is the main heart of
our system as it is responsible to choose the most optimal web service from the repository of web
services and completes the execution of a service task.
Service Monitor and Reasoner. Service Monitor and Reasoner (SMR) consists three main
components. First, Service Task Annotator is responsible to analyze and annotate the service task
inside the business process with the semantic information. It verifies inputs and outputs of the service
to be invoked by the service task, and annotates the synonyms of keywords along with the contexts.
We designed our business process with real keywords to boost the annotation mechanism with
synonyms which help to find precise web service from the list of web services in the repository. It uses
WordNet lexical database for the annotation of all synonyms to enrich the specification, and calls Web
Service Selector component to proceed the execution. Web Service Selector (WSS) component gets the
specification of the web service along with the annotations. WSS does an ontology-based reasoning
between the annotated specification of the web service and the service descriptions in the repository to
choose the best one for the execution. Web Service Selector has to select a set of Candidate Services
CSj, j ‫[ א‬1..n] that execute a set of Service Tasks STi, i ‫[ א‬1..k]. Once the context and the functional
properties of the web services match, it performs the matching of non-functional QoS attributes to
choose the most optimal web service from the repository. Finally, it calls the Service Task Executer
that executes the service to complete the service task of the business process. Once the service task
finishes, it hands over the execution control back to the Task Planner and Executer.

Figure 1: Semantic-Based Business Process Execution Engine

Web Services at WSO2 Application Server. Various web services encapsulating business logic to
accomplish parts of complex workflow are deployed at WSO2 application server. For each of the web
services, WSO2 generates a unique end-point for its invocation to support interoperable machine-tomachine interaction over a network. SBPEE exploits and orchestrates these web services to build the
enterprise workflow solution.
Semantic Repository (Ontologies and SWRL). The semantic repository contains our designed OWL
ontologies with semantic rules designed in the Semantic Web Rule Language (SWRL). For example
Figure 2 illustrates our Project Domain Ontology (PrjOnt). These ontologies embedded with semantic
rules fulfill many purposes. They help for the semantic classification of user projects. Project Domain

1660

Dynamic Execution of a Business Process

Muhammad Fahad et al.

Ontology captures all the domain concepts of our enterprise application. When the user uploads his
demand project, SBPEE stores it as an instance of a Project Ontology and semantic rules classify the
project instance into one of the pre-designed categories.

Figure 2: Project Ontology (PrjOnt)

The user demand project is classified according to its size, delivery date and type with the help of
SWRL rules. There are many other types of classification done for the customer based on its profile
(i.e., regular, ordinary, vip) and based on its reputation (i.e., new, trustworthy, faulty). Table 1
illustrates the SWRL rules that automate the classification mechanism of a customer project.
Following are the some classifications examples done by SBPEE for the project classification.
Example

Semantic Repository based on SWRL Rules

Small Project

Project(?x) ‫ ר‬hasOrderQuantity(?x, ?y) ‫ ר‬LessThan(?y, 8) → Small_Project(?x)

Big Project

Project(?x) ‫ ר‬hasOrderQuantity(?x, ?y) ‫ ר‬greaterThan(?y, 20) → Big_Project(?x)

Immediate Delivery

Project(?x) ‫ ר‬DeliveryDate(?x, ?yMonth) ‫ר‬ሺǫǡǫሻ‫ר‬
subtract(?zMonth, ?yMonth,?wMonth) ‫ ר‬LessThan(?wMonth, 2) →
Immediate_Delivery_Project(?x)
ሺǫሻ‫ר‬ሺǫǡǫሻ‫ר‬ሺǫǡǫሻ‫ר‬
ሺǫǡǫǡǫሻ‫ר‬ሺǫǡ͸ሻ՜
̴̴ሺǫሻ
Project(?x) ‫ ר‬OrderedBy_Customer(?x, ?y) ‫ ר‬CustomerType(?y, VIP) →
Special_Project(?x)
Customer(?x) ‫ ר‬CreditDue(?x, ?y) ‫ ר‬GuaranteeAmount(?x, z) ‫ ר‬LessThan(?z, 5000Euro)
→ Faculty_Customer(?x)
Customer(?x) ‫ר‬ሺǫǡǫሻ‫ר‬greaterThan(?o, 2) → Regular_Customer(?x)

Regular Delivery
Special Type Project
Faulty Customer
Regular Customer

Table 1: Examples of SWRL rules for the classification of Customer Order Project

1661

Dynamic Execution of a Business Process

1.
2.
3.

Muhammad Fahad et al.

Project_Size (extra_large, big, medium, small) according to the number and type of products
demanded by the customer.
Project_Delivery (regular, immediate, extra-speedy) according to the delivery date demanded
by the customer.
Project_Type (regular, vip, special) according to the profile and type of customer (regular,
ordinary, vip) of the enterprise.

3.2 An example scenario from case study: Create Order BP
In this section, we discuss in detail a business process application scenario from our case study that
aims at creation of a customer order. For the Create Order within an enterprise, different persons are
responsible to fulfil this workflow in a closed-world environment. But as we have fully automated this
workflow, SBPEE deploys the BP and executes it by considering the functional and non-functional
specification of the customer at the runtime. Figure 3a illustrates the Create Order BP which needs to
execute a serious of web services depending on the requirements of the customer order specification
and enterprise business logic modelled within workflow.

Figure 3a: Create Order Business Process

Figure 3b: User Task Interface

For a successful order creation, the order of execution of the service task inside the business
process is as follows: {Register Demand, Validate Customer Profile, Update Customer Profile,
Validate Order, Check Quotation Exists, Order Approved, Generate Receipt}. For each of the service
tasks, SBPEE has to selects the best available services based on the project specification by the
customer. At the design time, we never know which service can be executed for the individual service
task due to the fact that they become known at runtime according to the customer request. Each of the
web services carry out parts of this complex workflow that aimed at the creation of a user order. When
the BP is executed, customer fills his requirements for the creation of an order as shown in Figure 3b.
This user specification is used to identify the list of services which are matched with the given criteria.
Once the user has submitted his request, appropriate register demand service is executed to record the
user request. SBPEE stores the user request as an instance of the Project Ontology, classified into one
of the categories according to the SWRL rules. For example, from the customer specification it
considers the number and type of products demanded from the enterprise. Based on the number and

1662

Dynamic Execution of a Business Process

Muhammad Fahad et al.

types of customer demand, SBPEE classifies order into four categories, i.e., extra-large, big, medium,
small. Based on this classification, the user request is registered by selecting the most optimal web
service from the web service repository. Then system triggers the validate customer profile web
service to check the customer previous record. When the customer fulfils the criteria (by the analysis
of an advance payment, security deposits, etc.) to create an order, his profile is updated according to
the order demand. Then the user demand order is validated according to its manufacturing
specification (i.e., availability of raw materials, delivery date/time is enough for its creation, etc.).
Finally the order is approved and receipts are generated automatically for the enterprise and customer.
For each of the web services, our selection algorithm matches inputs, outputs and annotations of
service task with the existing web services to reach the most optimal selection.

4 Conclusion and Future Directions
Web service selection is a hard task when there is a list of pertaining services with similar
functionalities that fulfill user requirements. It becomes more challenging when we know our
requirements at runtime and choose optimal web services accordingly or compose different services
fulfilling individual requirements and QoS attributes that carry out parts of complex business process
or workflow. In this paper, we presented our Semantic-based Business Process Execution Engine
(SBPEE) which executes business process based on the web service selection and orchestration at
runtime. It makes use of our designed ontologies for the matchmaking of user requirements and
specification of web services to select the best available web services from the service repository.
Finally, we presented our case study on Create Order business process which depends on Project
Domain Ontology (PrjOnt) and semantic rules designed in SWRL. For the successful creation of an
order, SBPEE makes various instances of web services interact with each other to complete the desired
tasks. These web services cannot be chosen at design time, as they can only be known and selected at
runtime depending upon the customer requirements for an order. We showed that an ontology-based
approach serves its purpose by match making of functional and non-functional attributes in order to
select the most optimal service from all the candidate services.

References
1. J. Saat and S. Discher. Economic Justication of SOA, Joint SAP, University of St. Gallen Research Study
2. M. Papazoglou. Web Services : Principles and Technology. S.1. Prentice Hall 2008
3. Workflow Management Coalition Terminology & Glossary. 1999.
4. Business Process Model and Notation (BPMN) Version 2.0, Object Management Group, 2011.
5. D. Martin et al. DAML-S (and OWL-S). http://www.daml.org/services/daml-s/0.9/, may 2003
6. H. J. Genrich and K. Lautenbach, “System modelling with high-level Petri nets,” Theoretical computer science, vol. 13,
no. 1, pp. 109–135, 1981.
7. O. M. G. Specification, “OMG Unified Modeling Language (OMG UML), Superstructure, V2.1.2,” Object Management
Group, 2007.
8. Business Process Modeling Language, http://en.wikipedia.org/wiki/Business_Process_ Modeling_Language
9. C. Peltz. Web Services Orchestration. S.1. : Hewlett-Packard Company, 2003
10. Web Service Conversation Language (WSCL) 1.0.2002. http://www.w3.org/TR/wscl10/
11. XLANG/s Language. MSDN http://msdn.microsoft.com/enus/library/aa577463.aspx
12. OASIS. Web Services Business Process Execution Language (WSBPEL) 2007

1663

Dynamic Execution of a Business Process

Muhammad Fahad et al.

http://www.oasisopen.org/committees/tc_home.php? wg_abbrev-wsbpel
13. Simple Object Access Protocol (SOAP) 1.1, http://www.w3.org/TR/soap/
14. Universal Description Discovery and Integration, http://en.wikipedia.org/wiki/Universal_Description_Discovery
_and_Integration
15. R. Chinnici et al. Web Services Description Language W3C Recommendation, http://www.w3.org/TR/wsdl20/
16. D. Martin et al. OWL-S: Semantic Markup for Web Services, http://www.w3.org/Submission/OWL-S/
17. J. de Bruijn, H. Lausen, A. Polleres, D. Fensel: WSML - a Language Framework for Semantic Web Service. W3C
Workshop on Rule Languages for Interoperability,USA, 27–28 April 2005.
18. Freddy Lécué, Eduardo Silva, Luís Ferreira Pires, A Framework for Dynamic Web Services Composition, Emerging
Web Services Technology, Volume II, Whitestein Series in Software Agent Technologies and Autonomic Computing
2008, pp 59-75
19. Wei Jinag, Charles Zhang, Zhenqiu Huang, Mingwen Chen, Songlin Hu, Zhiyong Liu, QSynth: A Tool for QoS-aware
Automatic Service Composition, IEEE International Conference on Web Services (ICWS), 2010, 42 - 49
20. Peter Bartalos , Mária Bieliková, Qos aware semantic web service composition approach considering pre/postconditions,
Int. Conf. on Web Services Florida, USA 2010, pp 345—352
21. Mohammad Alrifai, Thomas Risse, Peter Dolog, Wolfgang Nejdl, A Scalable Approach for QoS-Based Web Service
Selection, Service-Oriented Computing – ICSOC 2008 Workshops, Lecture Notes in Computer Science Volume
5472, 2009, pp 190-199
22. Lecue, F., Leger, A. ; Delteil, A., DL Reasoning and AI Planning for Web Service Composition, IEEE/WIC/ACM
International Conference on Web Intelligence and Intelligent Agent Technology, 2008. WI-IAT '08. pp. 445 – 453
23. Rao, J., Dimitrov, D. ; Hofmann, P. ; Sadeh, N. A Mixed Initiative Approach to Semantic Web Service Discovery and
Composition: SAP's Guided Procedures Framework, International Conference on Web Services, 2006. ICWS '06. pp.
401 – 410
24. Shirin Sohrabi, Nataliya Prokoshyna, Sheila A. McIlraith, Web Service Composition via the Customization of Golog
Programs with User Preferences, Conceptual Modeling: Foundations and Applications, LNCS Volume 5600, 2009, pp
319-334, Springer
25. Onur Aydın, Nihan Kesim Cicekli, Ilyas Cicekli, Automated Web Services Composition with the Event Calculus,
Engineering Societies in the Agents World VIII, LNCS Volume 4995, pp 142-157, 2008
26. Ardagna, D., Comuzzi, M. ; Mussi, E. ; Pernici, B., PAWS: A Framework for Executing Adaptive Web-Service
Processes. IEEE Software, Volume:24 , Issue: 6, pp. 39 – 46
27. Fabio Casati, Ski Ilnicki, LiJie Jin, Vasudev Krishnamoorthy, Ming-Chien Shan, Adaptive and Dynamic Service
Composition in eFlow Advanced Information Systems Engineering, Lecture Notes in Computer Science Volume 1789,
2000, pp 13-31, 20 Dec 2001
28. Fabio Casati, Mehmet Sayal, Ming-Chien Shan, Developing E-Services for Composing E-Services, Advanced
Information Systems Engineering, Lecture Notes in Computer Science Volume 2068, 2001, pp 171-186
29. Hans Schuster, Dimitrios Georgakopoulos, Andrzej Cichocki, Donald Baker, Modeling and Composing Service-Based
and Reference Process-Based Multi-enterprise Processes, Advanced Information Systems Engineering, LNCS Volume
1789, 2000, pp 247-263
30. Activiti Business Process Modeling Tool, http://activiti.org/
31. D.L. McGuinnes and F.V. Harmelen. OWL Ontology Web Language Overview, http://www.w3.org/TR/owl-features/
32. I. Horrocks et al., SWRL: A Semantic Web Rule Language Combining OWL and RuleML.
http://www.w3.org/Submission/SWRL/

1664

