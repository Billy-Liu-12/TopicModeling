Procedia Computer Science
Volume 51, 2015, Pages 1333–1342
ICCS 2015 International Conference On Computational Science

Adaptive Integration for 3-loop Feynman Diagrams
with Massless Propagators
Elise de Doncker1 , Fukuko Yuasa2 , and Fola Olagbemi1
1

2

Western Michigan University, Kalamazoo MI 49008, U.S.A.
elise.dedoncker@wmich.edu
omofolakunmiel.olagbemi@wmich.edu
High Energy Accelerator Research Organization (KEK), Tsukuba, Ibaraki, 305-0801, Japan
fukuko.yuasa@kek.jp

Abstract
We apply multivariate adaptive integration to problems arising from self-energy Feynman loop diagrams
with massless internal lines. Results are obtained with the PAR I NT software package, which is layered
over MPI (Message Passing Interface) and incorporates advanced parallel computation techniques such
as load balancing among processes that may be distributed over a network of nodes. To solve the
problems numerically we introduce a parameter in a factor of the integrand function. Some problem
categories allow setting = 0; other cases require an extrapolation as → 0. Furthermore we apply
extrapolation with respect to the dimensional regularization parameter by setting the dimension n =
4 − 2ε and extrapolating as ε → 0. Timing results with ParInt show near optimal parallel speedups for
the problems at hand.
Keywords: Automatic numerical integration, massless Feynman diagrams, parallel computation

1

Introduction

In recent years we set out to demonstrate the capabilities of automatic, adaptive integration software
for the numerical evaluation of Feynman integrals with multiple loops. This has included iterated or
repeated quadrature in successive coordinate directions with 1D programs from the Q UAD PACK pack¨
age [PdDUK83],
which proved successful for various types of singular behavior such as infrared (IR)
and ultraviolet (UV) singularities [dDYK12, dDYK+ 14], as well as multivariate adaptive integration
(cubature) with the PAR I NT package for massive 3-loop diagrams. The method is based on assigning
a sequence of ﬁnite values to an inﬁnitesimal parameter representing a regulator in the loop integral,
and extrapolating numerically as the parameter tends to zero. This paper shows an extension of the
domain of applicability to a set of 3-loop integrals with massless internal lines discussed by Baikov and
Chetyrkin [BC10], in particular, the scalar 3-loop ﬁnite self-energy integrals L0 , N0 , N1 and N2 .
We use the adaptive code from the PAR I NT package [ZdDKC], which is automatic in the sense that
the user speciﬁes the required accuracy via absolute and relative error tolerances ta and tr , respectively,
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.318

1333

3-loop Feynman Diagrams with Massless Propagators

de Doncker, Yuasa and Olagbemi

and the algorithm attempts to achieve the accuracy within the given maximum number of function
evaluations, or terminates with an error ﬂag. PAR I NT is written in C and layered over MPI (Message
Passing Interface [OM]) for execution by parallel distributed processes, and can be invoked from the
command line or called from a program.
Section 2 gives a general expression for Feynman loop integrals and introduces the problem at hand.
The automatic integration (cubature) package PAR I NT is described in Section 3, with emphasis on the
parallel adaptive techniques including load balancing. Section 4 gives some background on nonlinear
extrapolation with the -algorithm and its implementation. The numerical results presented in Section 5
are obtained either by setting the parameter = 0, or by a nonlinear extrapolation as → 0, or by
an extrapolation with respect to the dimensional regularization parameter ε, introduced by setting the
dimension n = 4 − 2ε.

2

Background

An L-loop integral with N internal lines can be represented in Feynman parameter space by
I=

1 N

Γ N − nL
2
(−1)N
(4π)nL/2

0 r=1

dxr δ(1 −

xr )

C N −n(L+1)/2
,
(D − i C)N −nL/2

(1)

where C and D are polynomials determined by the topology of the corresponding diagram and physical
parameters. The integration in Eq (1) is taken over the N -dimensional unit cube. However, as a result
of the δ-function one of the xr can be expressed in terms of the other ones, which reduces the integral
dimension to N − 1 and the domain to the d = (N − 1)-dimensional unit simplex of the form
d

Sd = { (x1 , x2 , . . . , xd ) ∈ Rd |

xj ≤ 1 and xj ≥ 0 }.

(2)

j=1

In the absence of IR and UV singularities we have n = 4. For dimensional regularization in case of
IR singularities we set n = 4 + 2ε, and for UV singularities n = 4 − 2ε. We applied the regularization
by a numerical extrapolation as ε → 0 in [dDYK12] and [dDYK+ 14], respectively.
The term i C prevents the denominator from vanishing in the integration domain and can be used
for regularization. A regularization to keep the integral from diverging was achieved by extrapolation
as → 0 in [dDSFY04, dDSF+ 04, YdDF+ 07, YIF+ 08, dDFK+ 10, YdDH+ 12, dDFH+ 11].
As in [YdDH+ 12] (where L = 2) we set C = 1 in the denominator of Eq (1) for a regularization
as → 0. Multiplying the numerator and denominator by (D + i )N −nL/2 = (D + i )N −6 (using
nL/2
then leads to the integral
L = 3, n = 4) and omitting the factor Γ N − nL
2 /(4π)
N −1

1
0

xk

0

j=1

= (−1)N

j−1
k=1

1−

IN = (−1)N

dxj

C N −8 (D + i )N −6
(D2 + 2 )N −6

1−x1

dx1

1−x1 −...−xN −2

dx2 . . .

0

dxN −1

0

C N −8 (D + i )N −6
(D2 + 2 )N −6

(3)

over the (N − 1)-dimensional simplex SN −1 of Eq (2). For the diagrams of Figure 1(a) and (b) the
number of internal lines is N = 7 and Eq (3) becomes
I7 =
1334

1
0

1−x1

dx1

0

1−x1 −...x5

dx2 . . .

0

dx6

(D + i )
.
C(D2 + 2 )

(4)

3-loop Feynman Diagrams with Massless Propagators

de Doncker, Yuasa and Olagbemi

(a)

(b)

(c)

(d)

Figure 1: 3-loop self-energy diagrams (a) N2 (N = 7); (b) N1 (N = 7); (c) L0 (N = 8); (d) N0
(N = 8)

The integral for the diagrams of Figure 1(c) and (d) is of the form
I8 =

1
0

1−x1

dx1

0

1−x1 −...x6

dx2 . . .

0

dx7

(D + i )2
.
(D2 + 2 )2

(5)

For the numerical integration we apply cubature rules over the d = (N − 1)-dimensional unit cube
Cd = { (x1 , x2 , . . . , xd ) ∈ Rd | 0 ≤ xj ≤ 1 }

(6)

using the transformation (from the d-dimensional simplex to the cube),
(x1 , . . . , xd ) → (x(1), (1 − x1 )x(2), . . . , (1 − x1 − . . . − xd−1 )x(d))

(7)

with Jacobian (1 − x1 )(1 − x1 − x2 ) . . . (1 − x1 − . . . − xd−1 ). The variables x(i), 1 ≤ i ≤ d, on the
right of Eq (7) vary between 0 and 1 for integration over the cube CN −1 given in Eq (6).

3

ParInt Adaptive Cubature

Written in C and layered over MPI [OM], the PAR I NT methods (parallel adaptive, quasi-Monte Carlo
and Monte Carlo) are implemented as tools for automatic integration, where the user deﬁnes the integrand function and the domain, and speciﬁes a relative and absolute error tolerance for the computation
(tr and ta , respectively). The integrand is generally deﬁned as a vector function over the domain D.
Denoting the (exact) integral by
If =

D

f (x) dx,

it is then the objective to return an approximation Qf and absolute error estimate Ea f such that
|| Qf − I f || ≤ || Ea f || ≤ max{ ta , tr || I f || },

(8)

or indicate with an error ﬂag that the requested accuracy cannot be reached. In order to satisfy the error
criterion of Eq (8) the program tests throughout whether || Ea f || ≤ max{ ta , tr || Qf || } is achieved
1335

3-loop Feynman Diagrams with Massless Propagators

de Doncker, Yuasa and Olagbemi

(in inﬁnity norm). Since in this paper the integrand is a scalar-valued function f : D → R, we denote
the absolute error estimate (in absolute value) by Ea and the corresponding relative error estimate by
Er = Ea /|Q|, assuming Q = 0. When a relative or an absolute accuracy (only) needs to be satisﬁed
we set ta = 0 or tr = 0, respectively. If both ta = 0 and tr = 0, the weaker of the two error tolerances
is imposed; if ta = tr = 0 then the program will reach an abnormal termination.
The available cubature rules in PAR I NT (to compute the integral approximation over the domain
or its subregions) include a set of rules for the d-dimensional cube [GM80, GM83, BEG91a], the 1D
(Gauss-Kronrod) rules used in Q UAD PACK and a set of rules for the d-dimensional simplex [Gen90,
GM78, dD79]. The results in Section 5 below are computed over the d-dimensional unit cube, with a
rule of polynomial degree 9. A formula is said to be of a particular polynomial degree k if it renders the
exact value of the integral for integrands that are polynomials of degree ≤ k, and there are polynomials
of degree k + 1 for which the formula is not exact. The rule of degree 9 gives better results for the
problems tested than the degree-7 rule that is also available in PAR I NT for integration over the cube. The
number of function evaluations per (sub)region is constant and the total number of subregions generated,
or the number of function evaluations in the course of the integration, is considered a measure of the
computational effort.
Optionally the PAR I NT installation can be conﬁgured to use long doubles instead of doubles.

3.1

PAR I NT Adaptive Methods

In the adaptive approach, the integration domain is
divided initially among the workers. Each on its own
Evaluate initial region and update results
part of the domain, the workers engage in an adaptive
Initialize priority queue with initial region
partitioning strategy similar to that of D QAGE from
while (evaluation limit not reached and
¨
estimated error too large)
Q UAD PACK [PdDUK83]
and of D CUHRE [BEG91b]
Retrieve region from priority queue
by successive bisections. The workers then each genSplit region
erate a local priority queue of subregions as a task
Evaluate new subregions and update results
pool. The priority queue is implemented as a maxInsert new subregions into priority queue
heap keyed with the estimated integration errors over
the subregions, so that the subregion with the largest
estimated error is stored in the root of the heap. If
Figure 2: Adaptive integration meta-algorithm
the user speciﬁes a maximum size for the heap structure on the worker, the task pool is stored as a deap or double-ended heap, which allows deleting the
maximum as well as the minimum element efﬁciently, in order to maintain a constant size of the data
structure once it reaches its maximum.
A task consists of the selection of the associated subregion and its subdivision (generating two children regions), integration over the children, deletion of the parent region (root of the heap) and insertion
of the children into the heap (see Figure 3.1). The bisection of a region is performed perpendicularly
to the coordinate direction in which the integrand is found to vary the most, according to fourth-order
differences computed in each direction [BEG91b].

3.2

Load Balancing

For a regular integrand behavior and p MPI processes distributed evenly over homogeneous processors,
the computational load decreases ideally by a factor of about p. Otherwise the parallel time (and space)
requirements may be improved by load balancing, to attempt keeping the loads on the worker task pools
balanced.
The receiver-initiated, scheduler-based load balancing strategy in PAR I NT is an important mechanism of the distributed integration algorithm [dDGE96, dDKCZ01, AKdD03, AdDKVV04]. The mes1336

3-loop Feynman Diagrams with Massless Propagators

de Doncker, Yuasa and Olagbemi

sage passing is performed in a non-blocking and asynchronous manner, and permits overlapping of
computations and communications, which beneﬁts PAR I NT’s efﬁciency on a hybrid platform (multicore
and distributed, possibly different types of processors) where multiple processes are assigned to each
node. We note that some of the tests in Section 5 were also run with load balancing turned off, which
gave inferior results.

4

Numerical Extrapolation

Even though the integrals in Section 2 are ﬁnite, we perform extrapolation or convergence acceleration to
obtain a desired accuracy. We apply nonlinear extrapolation with the -algorithm [Sha55, Wyn56, Sid96,
= 1/2 ,
Sid11]. A sequence of integral values I( ) is generated using a geometric progression,
which tends to zero rapidly with increasing .
The extrapolation results given here are achieved with a version of the -algorithm code from
¨
In between calls, the implementation retains the last two lower diagonals
Q UADPACK [PdDUK83].
of the triangular extrapolation table. When a new element I(ε ) of the input sequence is supplied,
the algorithm calculates a new lower diagonal, together with an estimate or measure of the distance
of each newly computed element from preceding neighboring elements. With the location of the
e0
e3 e1 new
“new” element in the table relative to e0 , e1 , e2 , e3 , pictured as:
we have that
e2
new = e1 + 1/(1/(e1 − e3 ) + 1/(e2 − e1 ) − 1/(e1 − e0 )), and the distance measure for the new element
is set to |e2 − e1 | + |e1 − e0 | + |e2 − new|. The new lower diagonal element with the smallest value of
the distance measure is then returned as the result for this call to the extrapolation code. Note that the
accuracy of the extrapolated result is generally limited by the accuracy of the input sequence.

5

Numerical Results and Parallel Performance

Results are given below for the diagrams in Fig 1(a) and (b), represented by the (real part) integral of
Eq (4), and for the diagrams of Fig 1(c) and (d), adhering to Eq (5):
e I7 =

1
0

and
e I8 =

1−x1

dx1

0

1
0

1−x1 −...x5

dx2 . . .

0

1−x1

dx1

0

dx6
1−x1 −...x6

dx2 . . .

0

dx7

D
+

C(D2

2)

D2 − 2
.
(D2 + 2 )2

(9)

(10)

The integrals are further transformed to the unit cube according to Eq (7). For the integration over
each subregion the rule of degree 9 is applied, which evaluates the 6D integrand at 453 points and
the 7D integrand at 717 points. The exact integral for the four diagrams is 20ζ5 ≈ 20.738555102867
(see [BC10]). For the numerical approximations and timings we use the thor cluster of the High Performance Computing and Big Data Center at WMU. The tests are run on 16-core cluster nodes with Intel
Xeon E5-2670, 2.6GHz processors and 128GB of memory each, and using the Inﬁniband interconnect
for message passing via MPI.

5.1

Setting

=0

Results can be obtained with PAR I NT for the N1 , N2 and L0 integrals directly by setting = 0 in
Eqs (9) and (10). Table 1 lists the results with 48 processes: integral approximation, relative error
1337

3-loop Feynman Diagrams with Massless Propagators

Diagram

# F CN .
E VALS .

Exact:

DOUBLE PRECISION
R EL . ERR .
E ST. Er

I NTEGRAL
R ESULT

de Doncker, Yuasa and Olagbemi

T IME
T( S )

20.73855510

LONG DOUBLE PRECISION
R EL . ERR . T IME
E ST. Er
T( S )

I NTEGRAL
R ESULT

20.73855510

N2

5B
10B
25B
50B
75B
100B

20.73933800
20.73872210
20.73857098
20.73855716
20.73855576
20.73855540

3.69e-05
6.64e-06
8.32e-07
1.96e-07
9.28e-08
5.68e-08

9.7
19.4
48.6
98.2
146.4
196.7

20.73933292
20.73872078
20.73857018
20.73855718
20.73855575
20.73855540

3.63e-05
6.61e-06
8.12e-07
1.95e-07
9.12e-08
5.43e-08

17.5
35.1
87.9
175.9
264.4
352.6

N1

5B
10B
25B
50B
75B
100B

20.73871652
20.73856839
20.73855535
20.73855508
20.73855507
20.73855508

2.21e-05
3.50e-06
3.79e-07
9.07e-08
4.26e-08
2.59e-08

9.0
17.9
44.9
90.3
135.6
180.8

20.73871522
20.73856878
20.73855539
20.73855508
20.73855507
20.73855508

2.14e-05
3.42e-06
3.71e-07
8.94e-08
4.23e-08
2.56e-08

16.0
32.1
80.5
161.1
242.1
323.2

L0

5B
10B
25B
50B
75B
100B

20.74194961
20.73886434
20.73827908
20.73841802
20.73848662
20.73851402

1.19e-03
3.64e-04
5.04e-05
1.09e-05
3.66e-06
1.96e-06

10.3
20.7
51.7
103.4
146.4
207.5

20.74196270
20.73880437
20.73827607
20.73842495
20.73848624
20.73851338

1.19e-03
3.51e-04
5.04e-05
9.79e-06
3.70e-06
1.98e-06

19.6
39.2
98.2
196.7
295.0
393.9

Table 1: Accuracy and times with 48 procs. for N2 , N1 and L0 loop integrals with
numbers of function evaluations. Also given is the relative error estimate Er .

= 0, using various

estimate Er , and time in seconds for various total numbers of function evaluations using double and
quad (long double) precision. The observed accuracy in double precision arithmetic is similar to that
obtained with long doubles. The procedure by setting = 0 does not yield adequate results for the N0
diagram. We show an extrapolation for the latter in Section 5.3.
For = 0 the integrand of Eq (9) has a zero denominator when C = 0 or D = 0, and Eq (10)
has a zero denominator when D = 0. We ﬁnd that the N2 integral has D = 0, e.g., when x3 = 0 and
x1 + x2 + x4 + x5 + x6 = 1, or when x2 = 1, x1 = x3 = x4 = x5 = x6 = 0. Furthermore, C = 0,
for example at x2 = 1, x1 = x3 = x4 = x5 = x6 = 0, and at x2 = x3 = x6 = 0, x1 + x4 + x5 = 1
(on the boundaries of the unit simplex). For a discussion of vanishing C and D on the boundaries of the
integration domain see also [BW10]. The N0 integral has D = 0 at x2 = 1, x1 = x3 = x4 = x5 =
x6 = x7 = 0. Thus our integrand codes test for zero denominators before performing the divisions.
However some of the computations overﬂow by integrand evaluations in the vicinity of the singularities,
which is found to occur for the N0 integral in double precision around 1B = 109 evaluations and higher.

5.2

Parallel Performance

Fig 3 shows times and speedups as a function of the number of processes p, for a computation of the
N1 , N2 and L0 integrals using 10B integrand evaluations in double precision, with = 0 in Eqs (9)
and (10). PAR I NT is invoked by a call to the pi integrate() function, and the times are returned as part
of the output printed by the PAR I NT pi print results() function. Denoting the time in seconds for p
processes by Tp (s), the corresponding speedup given by Sp = T1 (s)/Tp (s) is nearly optimal, which
would coincide with the diagonal in the graph, or slightly superlinear (> p) over the given range of p.
1338

3-loop Feynman Diagrams with Massless Propagators

de Doncker, Yuasa and Olagbemi

’Times-N1-10B’
’Times-N2-10B’
’Times-L0-10B’

1000

800

600

400

200

0
20

40

60

80

100

(a)

’Speedup-N1-10B’
’Speedup-N2-10B’
’Speedup-L0-10B’
100

80

60

40

20

20

40

60

80

100

(b)

Figure 3: Parallel performance for computation of the N1 , N2 and L0 integrals of Eqs (9) and (10) using
10B evaluations: (a) Computation times (in seconds), (b) Speedup

5.3

Extrapolation Results as

→0

The N0 integral cannot be obtained for large numbers of integrand evaluations by setting = 0, as
the computation overﬂows by evaluating the function in the vicinity of the singularity. Extrapolation
alleviates the need to set = 0. Table 2 shows an extrapolation as → 0 using the -algorithm
sequence is computed with base 2,
of Wynn [Sha55, Wyn56, Sid96, Sid11] (see Section 4). The
= 2− and the integration is performed in long double precision using 150B evaluation points. The
Selected column lists the element along the new lower diagonal that is presumed the best, based on
its distance from the neighboring elements as computed by the -algorithm function from Q UAD PACK.
1339

3-loop Feynman Diagrams with Massless Propagators
I NTEGRAL v DIAGRAM
I NTEGRAL
Er
20
21
22
23
24
25
26
27
28
29
30
31
32

19.69036128576084
19.91633676759658
20.09256513888053
20.23033834092921
20.33827222472266
20.42297783943613
20.48955227010659
20.54194208640818
20.58321345028519
20.61575568045697
20.64143527978811
20.66171281606668
20.67774379215522

1.44e-07
1.64e-07
1.84e-07
1.94e-07
2.16e-07
2.36e-07
2.53e-07
2.74e-07
2.95e-07
3.14e-07
3.34e-07
3.51e-07
4.16e-07

T( S )
474.5
474.6
474.7
474.7
474.7
474.7
474.7
474.7
474.7
474.8
474.6
474.7
474.6
Exact:

de Doncker, Yuasa and Olagbemi
E XTRAPOLATION
L AST
Selected

20.71685142
20.72393791
20.73801873
20.73801873
20.73815511
20.73825979
20.73811441
20.74104946
20.73854289
20.73861767
20.73855567
20.73855510

20.71685142
20.72393792
20.73801873
20.73801873
20.73815511
20.73825979
20.73811441
20.73840576
20.73833347
20.73855952
20.73847582
20.73855510

Table 2: Integration with PAR I NT using 64 procs., max. # evals = 150B,
with -algorithm for N0 integral
I NTEGRAL r DIAGRAM
I NTEGRAL
Er
8
9
10
11
12
13
14
15

21.21987706233486
20.97727482739239
20.85743468356065
20.79787566374119
20.76818590083646
20.75336343266232
20.74595780282081
20.74225639032920

8.84e-08
8.69e-08
8.61e-08
8.56e-08
8.53e-08
8.39e-08
8.29e-08
8.21e-08

T( S )
648.5
648.0
649.0
647.7
648.1
648.3
647.6
647.6
Exact:

= 2− , and extrapolation

E XTRAPOLATION
L AST
Selected

20.74044694
20.73903010
20.73855734
20.73855626
20.73855580
20.73855592
20.73855510

20.74044693
20.73903010
20.73855734
20.73855626
20.73855580
20.73855592
20.73855510

Table 3: Integration with PAR I NT using 64 procs., max. # evals = 100B, ε = 2− , and extrapolation
with -algorithm for N2 integral
The Last column lists the ﬁnal (utmost right) element computed in the lower diagonal. Overall the algorithm function from Q UAD PACK appears successful at selecting a competitive element as its result.

5.4

Extrapolation with respect to the Dimensional Regularization Parameter

The dimensional regularization parameter ε is introduced in Eq (1) by assigning n = 4 − 2ε. Baikov
and Chetyrkin [BC10] produce asymptotic expansions in integer powers of ε for 3- and 4-loop integrals
arising from diagrams with massless propagators. We illustrate extrapolation with respect to ε in Table 3
for the integral of the N2 -diagram, using 100B evaluations for the integrations in long double precision.
The integrals are computed with = 0; thus the integrand retains a singular behavior at C = 0 or
D = 0. The extrapolation converges faster than that with respect to in Table 2. The times are larger
compared to those of Table 2, likely by calling the C-language pow function for the exponentiations in
each integrand evaluation, whereas the integrand of Eq (10) for the extrapolation can be calculated
using only multiplications, divisions, additions and subtractions.
1340

3-loop Feynman Diagrams with Massless Propagators

6

de Doncker, Yuasa and Olagbemi

Concluding Remarks

This paper reports on the calculation of Feynman integrals of 3-loop self-energy diagrams with massless
propagators. We introduce a parameter in the factor D of the integrand, as well as a dimensional
regularization parameter ε in the exponents of the functions C and D. The integrals are ﬁnite and the
computation succeeds for some problems by setting = 0 (and ε = 0). In case this procedure does
not yield the desired accuracy, we perform a nonlinear extrapolation with the -algorithm on a sequence
of integral approximations. Test results are given for extrapolations with respect to the parameter, as
well as the dimensional regularization parameter ε. All computations are numerical and the integrals are
evaluated with the parallel/distributed multivariate cubature package PAR I NT. Parallel speedup results
indicate near optimal speedups.
Apart from the reductions in [BC10], other approaches include the Mellin-Barnes representation and
sector decomposition. However, our numerical computations (with or without extrapolation) have been
achieved without resorting to signiﬁcant manipulation of the integrals, and thus hold promise for future
applications to other complicated Feynman loop integrals.

Acknowledgments
We thank Dr. J. Fujimoto and Dr. T. Ueda for helpful comments. We further acknowledge the support from the National Science Foundation under Award Number 1126438, and from Grant-in-Aid for
Scientiﬁc Research (24540292) of JSPS, and the Large Scale Simulation Program No.13/14-13 of KEK.

References
˜
[AdDKVV04] C. Achalla, E. de Doncker, K. Kaugars, and J. VanVoorst.
α-load balancing for parallel adaptive
task partitioning. In Parallel and Distributed Computing and Systems, 2004.
[AKdD03]
C. Achalla, K. Kaugars, and E. de Doncker. Load balancing in distributed adaptive task partitioning.
In Parallel and Distributed Computing and Systems, pages 280–283, 2003.
[BC10]
B. A. Baikov and K. G. Chetyrkin. Four loop massless propagators: An algebraic evaluation of all
master integrals. Nuclear Physics B, 837:186–220, 2010.
[BEG91a]
J. Berntsen, T. O. Espelid, and A. Genz. An adaptive algorithm for the approximate calculation of
multiple integrals. ACM Trans. Math. Softw., 17:437–451, 1991.
[BEG91b]
J. Berntsen, T. O. Espelid, and A. Genz. Algorithm 698: DCUHRE-an adaptive multidimensional
integration routine for a vector of integrals. ACM Trans. Math. Softw., 17:452–456, 1991. http:
//www.sci.wsu.edu/math/faculty/genz/homepage.
[BW10]
C. Bogner and S. Weinzierl. Feynman graph polynomials. Int. J. Mod. Phys. A, 25:2585–2618,
2010.
[dD79]
E. de Doncker. New Euler-Maclaurin expansions and their applications to quadrature over the
s-dimensional simplex. Math. Comp., 33:1003–1018, 1979.
[dDFH+ 11] E. de Doncker, J. Fujimoto, N. Hamaguchi, T. Ishikawa, Y. Kurihara, Y. Shimizu, and F. Yuasa.
Quadpack computation of Feynman loop integrals. Journal of Computational Science (JoCS),
3(3):102–112, 2011. doi:10.1016/j.jocs.2011.06.003.
[dDFK+ 10] E. de Doncker, J. Fujimoto, Y. Kurihara, N. Hamaguchi, T. Ishikawa, Y. Shimizu, and F. Yuasa.
Recursive box and vertex integrations for the one-loop hexagon reduction in the physical region. In
XIII Adv. Comp. and Anal. Tech. in Phys. Res., 2010. PoS (ACAT10) 073.
[dDGE96]
E. de Doncker, A. Gupta, and P. Ealy. Two methods for load balanced distributed integration.
Lecture Notes in Computer Science, Springer-Verlag, 1067:562–570, 1996.

1341

3-loop Feynman Diagrams with Massless Propagators
[dDKCZ01]

[dDSF+ 04]

[dDSFY04]
[dDYK12]
[dDYK+ 14]

[Gen90]

[GM78]
[GM80]
[GM83]
[OM]
¨
[PdDUK83]

[Sha55]
[Sid96]
[Sid11]
[Wyn56]
[YdDF+ 07]

[YdDH+ 12]

[YIF+ 08]

[ZdDKC]

1342

de Doncker, Yuasa and Olagbemi

E. de Doncker, K. Kaugars, L. Cucos, and R. Zanny. Current status of the ParInt package for parallel
multivariate integration. In Proc. of Computational Particle Physics Symposium (CPP 2001), pages
110–119, 2001.
E. de Doncker, Y. Shimizu, J. Fujimoto, F. Yuasa, L. Cucos, and J. Van Voorst. Loop integration
results using numerical extrapolation for a non-scalar integral. Nuclear Instruments and Methods
in Physics Research A, 539:269–273, 2004. hep-ph/0405098.
E. de Doncker, Y. Shimizu, J. Fujimoto, and F. Yuasa. Computation of loop integrals using extrapolation. Computer Physics Communications, 159:145–156, 2004.
E. de Doncker, F. Yuasa, and Y. Kurihara. Regularization of IR-divergent loop integrals. Journal of
Physics: Conf. Ser., 368(012060), 2012.
E. de Doncker, F. Yuasa, K. Kato, T. Ishikawa, and O. Olagbemi. Automatic numerical integration
methods for Feynman integrals through 3-loop. XVI Adv. Comp. and Anal. Tech. in Phys. Res.,
Journal of Physics: Conference Series (ACAT 2014), 2014. Accepted.
A. Genz. An adaptive numerical integration algorithm for simplices. In N. A. Sherwani, E. de Doncker, and J. A. Kapenga, editors, Lecture Notes in Computer Science, volume 507, pages 279–285,
1990.
A. Grundmann and H.M. M¨oller. Invariant integration formulas for the n-simplex by combinatorial
methods. SIAM J. Numer. Anal., 15:282–290, 1978.
A.C. Genz and A.A. Malik. An adaptive algorithm for numerical integration over an n-dimensional
rectangular region. Journal of Computational and Applied Mathematics, 6:295–302, 1980.
A.C. Genz and A.A. Malik. An imbedded family of multidimensional integration rules. SIAM J.
Numer. Anal., 20:580–588, 1983.
Open-MPI. http://www.open-mpi.org.
¨
R. Piessens, E. de Doncker, C. W. Uberhuber,
and D. K. Kahaner. QUADPACK, A Subroutine
Package for Automatic Integration, volume 1 of Springer Series in Computational Mathematics.
Springer-Verlag, 1983.
D. Shanks. Non-linear transformations of divergent and slowly convergent sequences. J. Math. and
Phys., 34:1–42, 1955.
A. Sidi. Extension and completion of wynn’s theory on convergence of columns of the epsilon
table. Journal of Approximation Theory, 86:21–40, 1996.
A. Sidi. Acceleration of convergence of general linear sequences by the Shanks transformation.
Numer. Math., 119:725–764, 2011.
P. Wynn. On a device for computing the em (sn ) transformation. Mathematical Tables and Aids to
Computing, 10:91–96, 1956.
F. Yuasa, E. de Doncker, J. Fujimoto, N. Hamaguchi, T. Ishikawa, and Y. Shimizu. Precise numerical results of IR-vertex and box integration with extrapolation. In XI Adv. Comp. and Anal. Tech. in
Phys. Res., 2007. PoS (ACAT07) 087, arXiv:0709.0777v2 [hep-ph].
F. Yuasa, E. de Doncker, N. Hamaguchi, T. Ishikawa, K. Kato, Y. Kurihara, and Y. Shimizu. Numerical computation of two-loop box diagrams with masses. Journal Computer Physics Communications, 183:2136–2144, 2012.
F. Yuasa, T. Ishikawa, J. Fujimoto, N. Hamaguchi, E. de Doncker, and Y. Shimizu. Numerical
evaluation of Feynman integrals by a direct computation method. In XII Adv. Comp. and Anal.
Tech. in Phys. Res., 2008. PoS (ACAT08) 122; arXiv:0904.2823.
R. Zanny, E. de Doncker, K. Kaugars, and L. Cucos.
PAR I NT 1.2 User’s Manual.
http://www.cs.wmich.edu/parint.

