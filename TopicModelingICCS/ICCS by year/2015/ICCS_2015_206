Procedia Computer Science
Volume 51, 2015, Pages 2287–2296
ICCS 2015 International Conference On Computational Science

An Improved Cellular Automata for Wildﬁre Spread
Tiziano Ghisu1 , Bachisio Arca2 , Grazia Pellizzaro2 , and Pierpaolo Duce2
1

Department of Mechanical, Chemical and Materials Engineering, University of Cagliari, Italy
t.ghisu@unica.it
2
Insitute of Biometeorology, National Research Council, Italy

Abstract
Despite being computationally more eﬃcient than vector-based approaches, the use of rasterbased techniques for simulating wildﬁre spread has been limited by the distortions that aﬀect
the ﬁre shapes. This work presents a Cellular Automata approach that is able to mitigate
this problem with a redeﬁnition of the spread velocity, where the equations generally used in
vector-based approaches are modiﬁed by means of a number of correction factors. A numerical
optimization approach is used to ﬁnd the optimal values for the correction factors. The results
are compared to the ones given by two well-known Cellular Automata simulators. According to
this work, the proposed approach provides better results, at a comparable computational cost.
Keywords: Cellular Automata, Wildﬁre Spread, Tabu Search

1

Introduction

Methods for simulating wildland ﬁres range from purely physical to purely empirical models [29].
Empirical (and quasi-empirical) simulators are based on the combination of two elements: a ﬁrebehavior model and a ﬁre-spread method. Fire-behavior models estimate spread characteristics
that are important for ﬁre suppression planning (such as rate of spread and ﬁreline intensity) as
a function of a number of independent variables (wind speed, terrain slope, fuel moisture, fuel
load, fuel density, etc.). One of the most renowned is the model of Rothermel [26, 27], which
was developed based on a large number of laboratory experiments on surface ﬁres of varying
characteristics and forms the foundation of many simulators [6, 23, 24].
Existing ﬁre-spread techniques can be split into two cathegories: vector implementations
and raster implementations. The former treat the ﬁre perimeter as a closed curve, discretized
through a number of points, each one expanding based on given spread model and local conditions (fuel, weather and topography). The outer shape formed by all individual ﬁres constitutes
the new perimeter, which is further discretized and expanded. The latter treat the problem by
means of a group of contigous cells that can be either inactive (burnt or not burning) or active.
A set of rules deﬁnes the spread mechanism from a cell to its neighbors.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.388

2287

An Improved Cellular Automata for Wildﬁre Spread

Ghisu, Arca, Pellizzaro and Duce

Under homogeneous conditions, wildland ﬁres have been observed to produce regular shapes:
the elliptic ﬁre-spread template of Anderson et al. [2] is used in Farsite [6] and many other ﬁrespread simulators. In real conditions, wildland ﬁres produce shapes diﬀerent from the regular
shapes mentioned above and require some form of spatial and temporal discretization to account
for landscape and weather non-homogeneity.
The main weakness of vector-based approaches is the need for a computationally expensive
algorithm for generating the convex hull ﬁre-spread perimeter at each time step, especially in
the presence of ﬁre crossovers and unburned islands [16]. Approaches based on raster implementations tend to be computationally more eﬃcient [10], but can suﬀer from signiﬁcant distortion
of the produced ﬁre shape: under constant wind and homogeneus landscape conditions, the
heading portion of the ﬁre perimeter tends to be angular rather than rounded [22] due to the
constraints of the grid cell restriction to eight directions of movement [3]. These inaccuracies
lead to modiﬁed predictions even in real landscape situations [24].
A number of authors make use of larger neighborhoods, thus increasing the number of ﬁre
spread directions allowed [9] and mitigating the distortion of the theoretically elliptic shape.
Alternative discretizations have been also used: Frandsen and Andrews et al [8] and Hern´
andezEncinas et al. [18] employed hexagonal cells suﬀering from the same distortion problems found
in the square model, Johnston et al. [21] employed an irregular grid to avoid directional biasing
in ﬁre-front propagation, with limited success. Trunﬁo et al. [30] suggested an improved algorithm for simulating wildﬁre spread through Cellular Automata (CA), which, not restricting
the ignition points’ locations to the cell centers, does not limit the ﬁre spread to the eight directions (or more if larger neighborhoods are used), producing shapes more closely resembling
the theoretically elliptic shape. This is obtained by means of a local ellipse that is expanded for
each cell deﬁned by the Cellular Automata to the neighboring cells, making eﬀectly the method
a hybrid between the raster- and vector-based formulations. The results, especially when using
a 24-cell neighborhood, are promising, and the additional computational cost is aﬀordable.
Recently, Di Gregorio et al. [4] and Sousa et al. [28] presented the porting of raster type
ﬁre propagation models to graphical processing unit (GPU) architectures, reporting speed-ups
of over 200x against serial CPU execution. The same would not have been possible with a
vector-based approach, as this method implies several branching options during the algorithms
execution, making it less suitable for parallel and massively parallel architectures. The application can solve ﬁre-spread problems in the presence of uncertain parameters (several hundreds
or thousands of deterministic simulations) faster than real-time, fundamental in ﬁre ﬁghting
applications. Di Gregorio et al. make use of the hybrid algorithm developed in [30], while the
ﬁre shapes produced by Sousa et al. present the distortions typical of raster methods.
This work presents a Cellular Automata approach to ﬁre propagation that allows the simulated ﬁre perimeters to approximate the expected elliptic ﬁre shapes more closely than other
similar techinques. This is obtained without the need for complex hybrid algorithms such as in
[30] and for larger neighborhoods such as in [5, 24, 30], but through a simple modiﬁcation of the
equations deﬁning the rate of spread by means of ﬁve corrections factors, whose value is deﬁned
oﬀ-line solving an optimization problem. The results are compared to the ones obtained by
other cell-based simulators based on a CA paradigm [24] [30] and show a signiﬁcantly improved
accuracy, in the presence of a much reduced computational cost.
The rest of this paper is organized as follows. Section 2 summarizes the semi-empirical
equations of Rothermel [26] and Richards [25], and the basic CA algorithm. Section 3 presents
the modiﬁcations made to the basic CA and the optimization approach used to set the optimal
values for the correction factors. Section 4 analyzes the predicted ﬁre perimeters, both for
homogeneous and realistic spread conditions. Section 5 draws some conclusions.
2288

An Improved Cellular Automata for Wildﬁre Spread

2

Ghisu, Arca, Pellizzaro and Duce

Fire-spread Model

The ﬁre-spread model is based on Rothermel’s surface ﬁre-spread model [26]. This choice was
dictated by its application to many fuels around the world, and by its use in diﬀerent software
for ﬁre behavior prediction such as Firemap [3], Farsite [6], FireStation [23], FlamMap [7], and
Hﬁre [24]. A full derivation and description of the parameters in use is given in [26].
R0 represents the rate of spread on a ﬂat terrain with no wind and is calculated based on a
number of parameters describing the fuel. In the presence of wind and slope, R0 is multiplied by
(1 + φw + φs ), where φw and φs are two ﬁre-intensiﬁcation factors which depend on local wind
and terrain slope. The direction of maximum spread is obtained through a vectorial summation
of the dimensionless coeﬃcients for wind speed and slope [6]. The two-dimensional ﬁre-spread
rule used is the one described in [1]. The ellipse length-to-width ratio can be calculated as:
LW = 0.936e50.5Ueq + 0.461e−30.5Ueq − 0.397

(1)

−1

where the equivalent wind speed Ueq (in ms ) is the wind speed that alone would produce the
combined eﬀect of actual wind and terrain slope. Assuming the ﬁre origin to be located at the
rear focus of the ellipse, the ﬁre-spread rate can be calculated based on the angle θ, measured
from the direction of maximum spread (E is the ellipse eccentricity, deﬁned as 1 − 1/LW 2).
R(θ) = R0

2.1

1−E
1 − Ecos(θ)

(2)

Fire Expansion by means of a Cellular Automata

The ﬁre-spread algorithm has been developed based on the work of [24]. Given a method for
computing the rate of ﬁre spread (Section 2) in any direction and for determining an appropriate
time step (Section 2.1) from the fastest spreading component of the ﬁre, a state machine is used
to track the movement of the ﬁre through the cells in the simulation domain. At any instant
in the simulation, all cells in the simulation domain are assigned one of four possible states:
• Cell is unburnable [U].
• Cell is ﬂammable, but not currently ignited [N].
• Cell is ﬂammable and is ignited, but fuel is not yet consumed [I].
• All fuel in cell has been consumed by the ﬁre [C].
At the start of the simulation, all cells are in the unburnable [U] or not-currently-ignited [N]
states. During the simulation, a cell can transition from the [N] state to the [I] state either
through an independent ignition (new ﬁre) or through the spread of a ﬁre from an adjacent cell.
This is achieved as follows: two arrays are associated to every cell that is in the [I] state, one
used to accumulate the distance that the ﬁre has traveled in each of the possible directions (8 in
the presence of a Cartesian grid), the second used to store the distance between adjacent cells
in each direction. When the accumulated distance in a direction exceeds the terrain distance
in that direction, then the adjacent cell in that direction is transitioned from the [N] state to
the [I] state. Cells located in the interior portion of a ﬁre are transitioned to the [C] state.
The time step of the simulation is determined to ensure that the fastest expanding ﬁre does
not travel more than the distance between two adjacent cells within each time step:
max

RΔt
Δx

≤1

(3)
2289

An Improved Cellular Automata for Wildﬁre Spread

Ghisu, Arca, Pellizzaro and Duce

The equations introduced in Section 2 provide the rate of spread relative to the ground
surface. Therefore, in the presence of sloping terrain, the value needs to be corrected to represent
the rate of spread in the horizontal coordinate system.
Rxh = Rx cos(δx )

Ryh = Ry cos(δy )

(4)

where Rx and Ry are the rate of spread components in a coordinate system parallel to the
ground, Rxh and Ryh are the rate of spread components in a horizontal coordinate system and
δx and δy the slope components.

3

Model

Figure 1 presents a comparison of the expected ﬁre shapes (calculated with the elliptic model
of [1]) with the ones calculated with the CA formulation described in Section 2.1, under homogeneous conditions (no slope and constant wind of the intensity required to obtain the desired
ellipse eccentricity). The burning time has been ﬁxed in each simulation so to have the same
distance (1800 m) covered by the ﬁre-head. A Cartesian grid with a constant grid spacing of
20 meters has been used. Equation 2 was used to calculate the spread-rate as a function of the
angle between the direction of maximum spread and the spread direction, as in other rasterbased solvers [24][30]. As the ellipse eccentricity increases, the predicted shape becomes more
distorted, with both a reduction in the length-to-width ratio, and the formation of an angular
front in the head-of-ﬁre region (not postulated by Alexander’s formulation). This behavior is
due to the constraints imposed from the numerical grid on the spread directions. Peterson et
al. [24] tried to mitigate the ﬁrst problem (reduced length-to-width ratio) by applying a correction factor to the length-to-width ratio calculated by [1]. He used a parametric approach to
study the inﬂuence of this parameter on the calculated ellipse eccentricity. Johnston et al. [21]
use two correction factors within an irregular grid raster formulation: the ﬁrst one serves as
a correction for the reduced head-ﬁre rate of spread due to the grid non-linearity, the second
one to correct the rate-of-spread variation in the head-ﬁre region. Trunﬁo et al. [30] mitigate
this problem by developing a hybrid approach where local ellipses expand from each burning
cell to the neighboring cells. The distortion of ﬁre shapes is reduced, especially with 24-cell
neighborhoods, but at the price of an increased complexity.

Numerical shape
Expected shape
Fire origin

(a) E = 0

(b) E = 0.5

(c) E = 0.7

(d) E = 0.9

(e) E = 0.95

Figure 1: Comparison of expected and numerical two-dimensional ﬁre-spread shapes under
homogeneous conditions, for diﬀerent eccentricities

3.1

Modiﬁcation of the Fire-spread Equations

This work proposes a modiﬁcation of the relationship between advection velocity and spread
angle – equation 2 – that aims to reduce the distortion observed in cell-based ﬁre-spread propagation approaches. The proposed correction approach makes use of ﬁve correction factors: (1)
2290

An Improved Cellular Automata for Wildﬁre Spread

Ghisu, Arca, Pellizzaro and Duce

a factor to increase the maximum rate-of-spread, (2) a factor to modify the ellipse eccentricity,
(3) a factor to modify the dependency of the ﬁre-spread rate on the angle from the eﬀective
wind direction in the head-ﬁre region, (4) a factor to modify the dependency of the ﬁre-spread
rate on the angle from the eﬀective wind direction in the back-ﬁre region, (5) a factor to adjust
the rear propagation speed.
Table 1 presents a list of the physical quantities corrected by this method and of the modiﬁed
relations (θ is the angle from the wind direction in radians, ranging from −π to π).
Table 1: Modiﬁcations to the Advection Velocity Formulation
Correction Factor
1

3.2

Quantity Modified
maximum rate of spread

Symbol
R0

2

ellipse eccentricity

E

3
4

effective spread angle (|θ| < π/2)
effective spread angle (|θ| > π/2)

θ
θ

5

spread rate

R(θ)

Modified Equation
R0 = R0 k1
E =
1 − 1/LW k2

tan(θ ) = tan(θ)/LW k3
tan(θ ) = tan(θ)/LW k4
1−E
R (θ ) = R0
− R0
1−E cos(θ )

1−E
1+E

−

1−E
1+E

|

θ |
pi

k5

Setting the Correction Factors’ Values

The optimal values for the correction coeﬃcients proposed in Section 3.1 are dependent on the
eccentrity of the ellipse and on the maximum spread angle relative to the grid’s main axis.
The problem of ﬁnding appropriate values for the above correction factors is not trivial and
can be seen as a numerical optimization problem, where the aim is to ﬁnd the combination of
values which minimize (or maximize) an objective function (or several objective functions), e.g.
one of the metrics that will be introduced in Section 3.3.
The numerical optimizer used in this work is based on a modiﬁcation of the Tabu Search
(TS) approach presented by [20]. TS is a meta-heuristic method designed to help a search
negotiate diﬃcult regions of the search space (e.g. escape from local minima) by imposing
restrictions [17]. In Jaeggi et al.’s implementation the local search phase is conducted with the
Hooke and Jeeves (H&J) algorithm [19]: a suitable increment is chosen for each variable and
the value of the objective function is calculated in turn for xi = xi + Δi and xi = xi − Δi
while keeping the other variables at their base values. The best allowed move is made. The
Short Term Memory (STM) records the last nstm visited points, which are tabu and cannot
be revisited. This approach has been used successfully for the solution of several optimization
problems [11, 13, 14, 15].
The concept of dominated solution has been modiﬁed, relative to Jaeggi et al.’s implemetation, adding the concept of inﬂuence region: a solution is superior to another only if they
fall within a certain distance, otherwise the two solutions are considered equivalent (i.e. both
optimal if non-dominated). The distance metric used is a weighted 1-norm distance.
Table 2 summarizes the values chosen for the optimizer’s main input parameters. The choice
of appropriate values for the optimizer settings was dictated by the authors’ experience [12].

3.3

Model Evaluation

To evaluate the performance of the proposed algorithm, the following metrics were adopted:
λu =

|R − S|
|R|

λo =

|S − R|
|S|

λs =

|R ∪ S| − |R ∩ S|
|R ∪ S|

(5)

where R represents the set of cells deﬁning the expected ﬁre shape, S the set of cells deﬁning
the simulated ﬁre shape and the operator |.| gives the size of a set. Consequently, λu and
2291

An Improved Cellular Automata for Wildﬁre Spread

Ghisu, Arca, Pellizzaro and Duce

Table 2: Optimizer’s main settings
Parameter

Description

Value

nstm
nregions
intensif y
diversif y
restart
SS
SSRF

Size of STM
Divide search space into nvar ∗ nregions regions
Perform intensiﬁcation when ilocal = intensif y
Perform diversiﬁcation when ilocal = diversif y
Reduce step sizes and restart when ilocal = restart
Initial step-sizes (as % of variable range)
Step-sizes are multiplied by this factors at restart

20
2
10
25
10%
(0.5, 0.5, 0.5, 0.5, 0.5, 1)

λo represent the underpredicted and overpredicted ﬁre area ratios, respectively, while λs is a
measure of the level of disagreement between the two predictions.

4

Results

The success of the proposed approach depends on the values assigned to the correction factors
introduced in Section 3.1, which need to be functions of the eﬀective wind speed and of the
wind direction. In consideration of its likely less pronounced impact on the optimal parameters’
combination, the wind direction has been treated as a variable in the optimization process,
using the concept of inﬂuence region to capture its inﬂuence on the optimal values for the ki
parameters. A number of optimization runs were performed, for diﬀerent values of the eﬀective
wind speed (corresponding to eccentrities of 0.50, 0.70, 0.90 and 0.95). The distance covered by
the ﬁre-head has been kept ﬁxed to 1800 m, the ﬁnal time has been adjusted accordingly and the
time step has been ﬁxed to half the maximum allowed by the CFL condition. A computational
grid with a constant grid spacing of 20 meters was used in all simulations.
Two solutions have been considered to belong to diﬀerent inﬂuence regions if d = 12
π |v6 −
w6 | ≥ 1 in order to obtain four solution points for diﬀerent values of αw . The vector
(1, 1, 0, 0, 1, 0) has been used as the initial solution point. The shape factor λs has been considered as the objective. The optimization problem is summarized in Table 3.
Table 3: Optimization Problem Deﬁnition
Minimize

λs

subject to

1 ≤ k1 ≤ 2, 1 ≤ k2 ≤ 2, 0 ≤ k3 ≤ 1,
0 ≤ k4 ≤ 1, 1 ≤ k5 ≤ 2, 0 ≤ αw ≤ π4

Figure 2 presents two of the four optimization histories (objective function values as a
function of the number of iterations), corresponding to the higher eﬀective wind cases. Each
line represents a speciﬁc wind direction. The improvements are signiﬁcant and become more
consistent for larger ellipse eccentricities, as the distortion becomes more pronounced (see Figure 1). Table 4 compares the results obtained with the proposed approach (OCA) with the
ones obtained through the application of the Cellular Automata approach without correction
(BCA) and with two well-known Cellular Automata – the ones proposed by [24] (named RCA)
and the one proposed by [30] (ECA) – using both a 8-cell and a 24-cell neighborhood. The
above comparison refers to the solutions obtained for αw = 0. There is a signiﬁcant reduction
in shape factor’s value (-86.8% relative to the 24-cell neighborhood RCA and -37.5% relative
to the 24-cell neighborhood ECA, for the 0.95 eccentricity simulation). Table 5 presents the
dependence of these error factors on the wind angle αw : the proposed approach allows also a
2292

An Improved Cellular Automata for Wildﬁre Spread

Ghisu, Arca, Pellizzaro and Duce

minimization of the deterioration in predictive accuracy at intermediate wind angles, typical
of cell-based discretizations. The ﬁre shapes obtained for a large value of ellipse eccentricity
(0.95) are shown in Figure 3, for diﬀerent wind angles.
Furthermore, these results have been obtained with the use of a 8-cell neighborhood: relatively to the 8-cell neighborhood versions of the reference solvers, the improvements are even
more signiﬁcant. The use of a 8-cell neighboorhood presents several advantages, such as the
reduced complexity of the algorithm (shorter computational times), reduced memory requirements and better accuracy in the presence of rapidly changing landscapes.

0.5

0.5

0.4

0.4
λs

0.6

λs

0.6

0.3

0.3

0.2

0.2

0.1

0.1

0
0

50

100
ITERATIONS

150

200

0
0

50

(a) E = 0.90

100
ITERATIONS

150

200

αw
αw
αw
αw

=0
= π/12
= π/6
= π/4

(b) E = 0.95

Figure 2: Optimization history

Table 4: Shape Factor λs for Diﬀerent Values of Ellipse Eccentricity
E

RCA-8

RCA-24

ECA-8

ECA-24

BCA

OCA

0.50
0.70
0.90
0.95

0.208
0.248
0.431
0.558

0.083
0.101
0.217
0.342

0.036
0.062
0.108
0.158

0.014
0.027
0.050
0.072

0.186
0.406
0.685
0.773

0.010
0.022
0.030
0.045

Table 5: Dependence of Error Factors λs , λu and λo on the Wind Angle αw
E
αw
λs
λu
λo

0
0.010
0.003
0.006

0.50
π/12
pi/6
0.014 0.019
0.008 0.010
0.006 0.009

π/4
0.020
0.010
0.010

0
0.022
0.003
0.019

0.70
π/12
pi/6
0.018 0.020
0.005 0.006
0.013 0.015

π/4
0.019
0.005
0.013

E
αw
λs
λu
λo

0
0.030
0.009
0.022

0.90
π/12
pi/6
0.025 0.022
0.006 0.007
0.019 0.015

π/4
0.022
0.009
0.013

0
0.045
0.011
0.035

0.95
π/12
pi/6
0.036 0.034
0.013 0.014
0.023 0.020

π/4
0.028
0.010
0.028

2293

An Improved Cellular Automata for Wildﬁre Spread

Ghisu, Arca, Pellizzaro and Duce

Numerical shape
Expected shape
Fire origin

(a) αw = 0

(b) αw = π/12

(c) αw = π/6

(d) αw = π/4

Figure 3: Comparison of expected and numerical two-dimensional ﬁre-spread shapes under
homogeneous conditions, for diﬀerent wind angles (E = 0.95)

4.1

Comparison with Farsite on Real Topographies

To verify its performance on a realistic spread problem, the proposed algorithm was compared
to Farsite [6] on a real-surface topography. Only surface ﬁres have been considered, and spotting
and acceleration modules were disabled in Farsite. The numerical grid used by the CA solver
is constituted by 1.44 million square cells with 10 meter sides. Farsite does not use a ﬁxed
numerical grid, but discretizes the ﬁre perimeter directly. The maximum distance between
adjacent computational points and their maximum displacement has been set to values similar
to the ones used by the CA solver. A uniform fuel bed corresponding to the standard fuel
model 2 (grass) [2] was used. Gridded wind vectors were obtained through a mass-consistent
approach for a 10 mph domain-averaged wind.
According to Farsite, the surface ﬁre burned a total of 12.07 km2 in 4 hours. Figure 4 show
a comparison of the ﬁre shapes predicted by Farsite and the CA solver, both without (left) and
with the proposed correction, for diﬀerent elapsed times. The agreement is evident.
These results have been obtained with 8-cell neighborhoods, while several other raster-based
solvers make use of 24-cell neighborhoods to mitigate the distortion of ﬁre perimeters, increasing
algorithm complexity and memory requirements, and reducing the accuracy in the presence of
rapidly changing landscapes. Relative to Farsite, the reduction in wall clock time was of the
order of 75%. This value is calculated in the case of serial implementations: cell-based methods
oﬀer a better scalability in parallel computational environments, where computational savings
are likely to be signiﬁcantly larger.

5

Conclusions

This work presents a Cellular Automata approach for wildland ﬁre prediction that makes use
of a modiﬁed advection speed in the equation describing the ﬁre-front behaviour to achieve
ﬁre perimeters resembling the expected ﬁre shapes more closely. The values for the correction
factors used in this method are optimized with a numerical optimization approach, which makes
use of a well-known algorithm for single- and multi-objective optimization problems.
The proposed approach obtains ﬁre perimeters closely matching the results of vector-based
simulators, with all the advantages of raster-based techniques (simpler implementation, better
portability to parallel computing environments), while making use of 8-cell neighborhoods, with
better accuracy in the presence of rapidly changing landscapes (fuel, topography, wind).
Future work includes testing in real-world scenarios (including comparison to available experimental data), parallelization to both CPU and GPU architectures and implementation
within CFD solvers able to simulate the two-way interaction between ﬁre and wind.
2294

Ghisu, Arca, Pellizzaro and Duce

400

350

350

300

300

250
200
150

ELEVATION (m)

400

250
200
150

100

100

50

50

0

0

ELEVATION (m)

An Improved Cellular Automata for Wildﬁre Spread

400

350

350

300

300

250
200
150

ELEVATION (m)

400

250
200
150

100

100

50

50

0

0

ELEVATION (m)

(a) 2 hours elapsed time

(b) 4 hours elapsed time
Farsite
CA
Fire origin

Figure 4: Comparison of ﬁre perimeters predicted by Farsite and the CA solver (10 mph average
wind conditions), without (left) and with the proposed correction (right)

References
[1] M. E. Alexander. Estimating the length-to-breadth ratio of elliptical forest ﬁre patterns. In
Proceedings of the 8th Conference on Fire and Forest Meteorology, pages 287–304, 1985.
[2] D. H. Anderson, E. Catchpole, N. J. De Mestre, and T. Parkes. Modeling the spread of grass ﬁres.
The J. of the Australian Mathematical Society Series B Applied Mathematics, 23(04):451–466,
1982.
[3] G. L. Ball and D. P. Guertin. Improved ﬁre growth modeling. International J. of Wildland Fire,
2(2):47–54, 1992.
[4] S. Di Gregorio, G. Filippone, W. Spataro, and G. A. Trunﬁo. Accelerating wildﬁre susceptibility
mapping through GPGPU. J. Parallel Distrib. Comput., 73(8):1183–1194, 2013.
[5] M. A. Finney. Fire growth using minimum travel time methods. Sciences-New York, pages 1420–
1424, 2002.
[6] M. A. Finney. FARSITE: Fire area simulator-model development and evaluation. Technical Report
RMRS-RP-4, USDA, Ogden, UT, 2004.
[7] M. A. Finney. An overview of FlamMap ﬁre modeleng capabilities. In Fuels Management - How
to Measure Success, number RMRS-P-41. USDA Forest Service, 2006.
[8] W. H. Frandsen and P. L. Andrews. Fire behavior in non-uniform fuels. Technical report, USDA,
Ogden, UT, 1979.

2295

An Improved Cellular Automata for Wildﬁre Spread

Ghisu, Arca, Pellizzaro and Duce

[9] I. A. French, D.H. Anderson, and E. A. Catchpole. Graphical simulation of bushﬁre spread.
Mathematics and Computer Modelling, 13(12):67–71, 1990.
[10] T. Ghisu, B. Arca, G. Pellizzaro, and P. Duce. A level-set algorithm for simulating wildﬁre spread.
CMES Computer Modeling in Engineering & Sciences, 102(1):83–102, 2014.
[11] T. Ghisu, J. P. Jarrett, and G. T. Parks. Robust design optimization of airfoils with respect to
ice accretion. AIAA J. of Aircraft, 48(1):287–304, 2011.
[12] T. Ghisu, G. T. Parks, D. M. Jaeggi, J. P. Jarrett, and P. J. Clarkson. The beneﬁts of adaptive parametrization in multi-objective tabu search optimization. Engineering Optimization,
42(10):959–981, 2010.
[13] T. Ghisu, G. T. Parks, J. P. Jarrett, and P. J. Clarkson. An integrated system for the aerodynamic
design of compression systems – part i: Development. ASME J. of Turbomachinery, 133(1), 2011.
[14] T. Ghisu, G. T. Parks, J. P. Jarrett, and P. J. Clarkson. An integrated system for the aerodynamic
design of compression systems – part ii: Application. ASME J. of Turbomachinery, 133(1), 2011.
[15] T. Ghisu, G. T. Parks, J. P. Jarrett, and P. J. Clarkson. Robust design optimization of gas turbine
compression systems. AIAA J. of Propulsion and Power, 27(2):282–295, 2011.
[16] J. Glasa and L. Halada. On elliptical model for forest ﬁre spread modeling and simulation.
Mathematics and Computers in Simulation, 78(1):76–88, 2008.
[17] F. Glover and M. Laguna. Tabu Search. Kluwer Academic Publishers, USA, 1997.
[18] L. Hern´
andez Encinas, S. Hoya White, A. Mart´ın del Rey, and G. Rodr´ıguez S´
anchez. Modelling
forest ﬁre spread using hexagonal cellular automata. Applied Mathematical Modelling, 31(6):1213–
1227, 2007.
[19] R. Hooke and T. A. Jeeves. ’Direct search’ solution of numerical and statistical problems. J. of
the Association for Computing Machinery, 2(8):212–229, 1961.
[20] D. M. Jaeggi, G. T. Parks, T. Kipouros, and P. J. Clarkson. The development of a multi-objective
Tabu Search algorithm for continuous optimisation problems. European J. of Operational Research,
185:1192–1212, 2008.
[21] P. Johnston, J. Kelso, and G. J. Milne. Eﬃcient simulation of wildﬁre spread on an irregular grid.
International J. of Wildland Fire, 17(5):614–627, 2008.
[22] I. Karafyllidis and A. Thanailakis. A model for predicting forest ﬁre spreading using cellular
automata. Ecological Modelling, 99(1):87–97, 1997.
[23] A. M. G. Lopes, M. G. Cruz, and D. X. Viegas. Firestation – an integrated software system for the
numerical simulation of ﬁre spread on complex topography. Environmental Modelling Software,
17(3):269–285, 2002.
[24] S. H. Peterson, M. E. Morais, J. M. Calson, P. E. Dennison, D. A. Roberts, M. A. Moritz, and D. R.
Weise. Using HFIRE for spatial modeling of ﬁre in shrublands. Technical Report PSW-RP-259,
USDA, Albany, CA, 2009.
[25] G. D. Richards. A general mathematical framework for modeling two-dimensional wildland ﬁre
spread. International J. of Wildland Fire, 5(2):63–72, 1995.
[26] R. C. Rothermel. A mathematical model for predicting ﬁre spread in wildland fuels. Technical
Report INT-115, USDA, Ogden, UT, 1972.
[27] R. C. Rothermel. How to predict the spread and intensity of forest and range ﬁres. Technical
Report INT-143, USDA, Ogden, UT, 1983.
[28] S. A. Sousa, R. J. N. dos Reis, and J.C.F. Pereira. Simulation of surface ﬁre fronts using ﬁreLib
and GPUs. Environmental Modelling & Software, 38:167 – 177, 2012.
[29] A. L. Sullivan. Wildland surface ﬁre spread modelling, 1990 - 2007. 1: Physical and quasi-physical
models. International J. of Wildland Fire, 18(4):349–368, 2009.
[30] G. A. Trunﬁo, D. D’Ambrosio, R. Rongo, W. Spataro, and S. Di Gregorio. A new algorithm
for simulating wildﬁre spread through cellular automata. ACM Transactions on Modeling and
Computer Simulation, 22(1):1–26, 2011.

2296

