Procedia Computer Science
Volume 51, 2015, Pages 2967–2971
ICCS 2015 International Conference On Computational Science

Minimum-overlap clusterings and the sparsity of
overcomplete decompositions of binary matrices.
Victor Mireles1,2 , Tim O.F. Conrad1
1

2

Mathematics and Computer Science Department - Freie Universit¨
at Berlin
International Max Planck Research School for Computational Biology and Scientiﬁc Computing

Abstract
Given a set of n binary data points, a widely used technique is to group its features into k
clusters (e.g.[7]). In the case where n < k, the question of how overlapping are the clusters
becomes of interest. In this paper we approach the question through matrix decomposition,
and relate the degree of overlap with the sparsity of one of the resulting matrices. We present
analytical results regarding bounds on this sparsity, and a heuristic to estimate the minimum
amount of overlap that an exact grouping of features into k clusters must have. As shown
below, adding new data will not alter this minimum amount of overlap.
Keywords: Binary matrix factorization, Overcomplete decompositions, Feature clustering

1

Introduction.

Let C ∈ {0, 1}m×n denote a full-rank binary matrix whose columns represent n data points,
with n < m. Each of the m rows of C we call a feature. A common approach in data analysis
is grouping of features into sets, such that for each set there is a (preferably large) group of
data points that behaves similarly in those features. This approach is often referred to as
feature-clustering, and, in the case of binary data, has proven useful in ﬁelds such as document
classiﬁcation[10] or role engineering[2].
Feature clustering can be formulated as
C = σ(BS)

(1)

for B ∈ {0, 1}m×k and S ∈ {0, 1}k×n , where σ is the entry-wise signum function. Matrix
B represents the membership of features into k diﬀerent feature-clusters (B[x, j] = 1 means
feature x belongs to cluster j), while S encodes a representation of the given data points
as combinations of the characteristic vectors of each feature-cluster. The function σ is used
because while all data points are binary, they can also be expressed as a combination of the
indicator vectors of two or more feature-clusters, each containing a given feature. We call the
two matrices B and S a solution of Eq. 1, or a decomposition of C.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.500

2967

Sparsity of overcomplete decompositions

Mireles, Conrad

In this paper we focus on the problem of ﬁnding an upper bound on the sparsity of the
matrices B that satisfy Eq. 1. That is, given C ∈ {0, 1}m×n we want to know what is the
smallest 0-norm that a matrix B ∈ {0, 1}m×k can have while satisfying Eq. 1.
We are interested in sparse B’s for two reasons. First, they oﬀer a more parsimonious
description of the columns of C; they give an explanation for the observed data in terms of k
processes (actors, forces), each of which determines the presence/absence of a small number of
features. Second, by having the smallest possible feature clustering, we can be more certain that
the relationships we detect among features are not spurious. Additionaly, in the compressed
sensing context, where ﬁnding matrix B of Eq. 1 is called dictionary learning[4], our approach
can be interpreted as ﬁnding bounds on the sparstiy of a dictionary.
Similar matrix factorization problems have been studied before, leading to the development
of several methods, for example, Binary Matrix Factorization[10, 8], a particular case of Non
Negative Matrix Factorization[1, 9, 3]. These and other methods rely on optimization procedures (e.g. [5]) focused on minimizing ||C − BS||, which in our case is, as proven below, always 0.
Some also maximize sparsity (e.g. [6]), usually by penalizing the 0-norm. Our approach diﬀers
from others in that we consider only overcomplete factorizations (i.e. we assume k > n), and
explicitly maximize sparsity.

2

Mathematical Setting and Notation.

We denote by A[x, :] a row of a matrix A and by A[:, i] a column. To simplify the discussion we
require that all columns and rows of C have at least one non-zero entry. We call r the number
of diﬀerent rows of C and assume that n < r ≤ m.
Deﬁnition. For a given full-rank C ∈ {0, 1}m×n and an integer k such that n ≤ k ≤ m, we
call B ∈ {0, 1}m×k an Overcomplete Feature Clustering (OFC) of C (into k-clusters)
if there exists S ∈ {0, 1}k×n such that Eq. 1 is satisﬁed. Recall that each column of B is the
indicator vector of a cluster.
Deﬁnition. Let B be an OFC of C into k clusters. We say that B is a maximally sparse
OFC if any other OFC B of C into k clusters is such that ||B||0 ≤ ||B ||0 .
Let us note that lower overlapping, higher sparsity and lower 0-norm of an OFC are equivalent, and we will use the three terms interchangeably.
Since C is a full-rank matrix, any attempt to express its columns as convex combinations of
k vectors (as is the case if B is an OFC of C) requires that k > n, otherwise the decomposition
would be inexact. Furthermore, let us note that if k > m, any matrix that contains all columns
of the m × m identity matrix is a maximally sparse OFC. Therefore, we deal with the case in
which n ≤ k ≤ m.
Given a matrix Bk−1 ∈ {0, 1}m×(k−1) and the indices j1 , j2 ≤ k − 1 of two intersecting
clusters, we deﬁne as Pj1 ,j2 (Bk−1 ) the OFC of C into k blocks obtained by merging the overlap
of clusters j1 and j2 of Bk−1 into a new, k’th cluster, in the following manner:
⎧
Bk−1 [j, x]
⎪
⎪
⎪
⎪
⎨ Bk−1 [j, x]
0
Pj1 ,j2 (Bk−1 )[j, x] =
⎪
⎪
0
⎪
⎪
⎩
1
2968

:j
:j
:j
:j
:j

< k and j = j1 , j2
∈ {j1 , j2 } and Bk−1 [j1 , x] = Bk−1 [j2 , x]
∈ {j1 , j2 } and Bk−1 [j1 , x] = Bk−1 [j2 , x]
= k and Bk−1 [j1 , x] = Bk−1 [j2 , x]
= k and Bk−1 [j1 , x] = Bk−1 [j2 , x]

Sparsity of overcomplete decompositions

3

Mireles, Conrad

Some Analytical Results on Sparsity.

Theorem 1 (Existence of an OFC with zero overlap). Given a full-rank C ∈ {0, 1}m×n with r
diﬀerent rows and k < r, there is no B ∈ {0, 1}m×k which is an OFC of C such that ||B||0 = m.
Proof. Let B be an OFC of C into k clusters, with ||B||0 = m and K2 = {j | ||B[:, j]||0 > 1}.
Since |K2 | ≤ k < r then, by pigeonhole principle ∃j ∈ K2 and x, y ∈ {1, 2, . . . , m} such that
B[x, k] = 1 = B[y, j] and C[x, :] = C[y, :]. That is, ∃i such that C[x, i] = C[y, i], and we can
assume w.l.g. that C[x, i] = 1. Since ||B||0 = m then the x’th row of B has only one non-zero
entry (the j’th), and the only way that (BS)[x, i] = 1 = C[x, i] is satisﬁed is if S[j, i] = 1. This
would imply that (BS)[y, i] = B[y, :]S[:, i] = 1 = 0 = C[y, i], which contradicts the assumption
that B is an OFC of C. Therefore no such OFC exists for k < r.
Theorem 2 (Existence of an OFC). Given a full-rank C ∈ {0, 1}m×n with r diﬀerent rows
{c1 , . . . cr } and an integer k such that n ≤ k ≤ m, there exists Bk ∈ {0, 1}m×k that is an OFC
of C. Which implies that ||C − σ(Bk S)|| = 0 for some S.
Proof.
• For k = n we can make Bk = C, and S = In .
• For k such that n < k < r, we proceed by induction. Consider Bk−1 ∈ {0, 1}m×(k−1) that
is an OFC of C, with some corresponding matrix S . Since ||Bk−1 || > m (Theorem 1)
then, by the pigeonhole principle, there exists at least one row x such that Bk−1 [x, j1 ] =
1 = Bk−1 [x, j2 ]. We can then make Bk = Pj1 ,j2 (Bk−1 ). The corresponding S can be
generated by adding a row to S that is all 0’s except in the columns in which either
S [j1 , :] = 1 or S [j2 , :] = 1 leading to C = σ(Bk S). Furthermore, ||Bk−1 ||0 > ||Bk ||0 .
• For k = r, let Bk ∈ {0, 1}m×k be such that Bk [x, j] = 1 = Bk [y, j] iﬀ C[x, :] = C[y, :] = cj ,
and S be such that S[j, :] = cj . Note that ||Bk ||0 = m while C = σ(Bk S).
• If k > r, we proceed by induction. Suppose that Bk−1 is an OFC of C into (k − 1)
clusters with ||Bk−1 ||0 = m, and let Sk−1 be a matrix such that C = σ(Bk−1 Sk−1 ).
Since (k − 1) < m then there is at least one column of Bk−1 which has two 1’s, say
B[x, j] = 1 = B[y, j]. To generate Bk , add a new column to Bk−1 that has 0’s in all rows
except for the x’th, and make Bk [x, j] = 0. Note ||Bk ||0 = ||Bk−1 ||0 . To generate Sk ,
duplicate the j’th row of Sk−1 .
˜k a
Corolary 1 (Maximal sparsity increases with k). For a given C ∈ {0, 1}m×n , if we call B
˜n+1 ||0 , . . . , ||B˜r ||0 is
˜n ||0 , ||B
maximally sparse OFC of C into k clusters, then the sequence ||B
strictly decreasing.
Lemma 1 (Sparsity can only decrease with new data). Let B , B ∈ {0, 1}m×k be two OFC’s,
the ﬁrst of them of C ∈ {0, 1}m×(n+1) and the second of C ∈ {0, 1}m×n all of whose rows are
also rows of C . If B is maximally sparse then ||B ||0 ≥ ||B||0
Proof. Let us call S and S the matrices that satisfy C = σ(BS) and C = σ(B S ). Let us
assume that it is the i’th column of C the one that is missing in C. To make B an OFC for
C, we remove the i’th column of S . Thus if B is maximally sparse, then ||B ||0 ≥ ||B||0 .
2969

Sparsity of overcomplete decompositions

4

Mireles, Conrad

Heuristic for Finding Maximally Sparse OFC’s

When one starts with a OFC and derives successive, sparser ones using function Pj1 ,j2 (B),
deﬁned in section 2, there are many choices of j1 and j2 which, clearly, will lead to diﬀerent
results in the long term. With this in mind, we propose the following algorithm (Heuristic
Algorithm below) that attempts to ﬁnd, for every k ∈ {n, n + 1, n + 2, . . . , r}, the 0-norm of the
sparsest OFC of C into k-clusters. It does so by starting with a given OFC with n clusters and
successively adding new clusters to create sparser OFC’s. For every OFC of size k it produces
q diﬀerent OFC’s using diﬀerent choices of j1 and j2 , and then attempts to greedily (with the
optimal choice of j1 and j2 ) improve each of these until they are of size k + l.

Heuristic algorithm to ﬁnd very sparse OFC’s.
We developed a set of matrices C that are small enough to compute for them a maximally
sparse OFC via exhaustive enumeration. This allows us to evaluate how close to this maximal
sparsity are the results of our heuristic method.
As seen in table 1, ﬁnding the maximally sparse OFC is easier for large k’s. This is because
the set Ak is the result of an iterative application of Pj1 ,j2 (B) with a greedy choice of j1 , j2
starting from several smaller OFC’s, and the number of such smaller OFC’s is larger for large
k. See Figure 1 for an example.

Figure 1: An example C ∈ {0, 1}9×4 with OFC’s found using our algorithm for k = 5, 6, 7

2970

Sparsity of overcomplete decompositions

k
5
6
7

Diﬀerence
0
1
83.89% 9.44%
91.04% 8.46%
100.0% 0.00%

Mireles, Conrad

in 0-norm to exact solution
2
3
4
5
3.06% 1.11% 2.22% 0.28%
0.50% 0.00% 0.00% 0.00%
0.00% 0.00% 0.00% 0.00%

Table 1: Performance of the heuristic. For every value of k we generated 200 matrices C with
m = r = 9 and n = 4. For each we found a maximally sparse OFC via both an exhaustive
enumeration and the proposed heuristic. The error is measured by the 0-norm of the diﬀerence
of the two. Shown are the percentages of these errors. A diﬀerence of 0 means that the heuristic
achieved the best result possible.

5

Conclusions.

We have presented analytical results and a method that aid in the estimation of upper bounds
to the sparsity of an overcomplete feature clustering. We believe the analysis presented here
can guide us in providing more parsimonious interpretations of data. In particular, the measure
of this maximum sparsity can be used as an indicator of how tangled is the data in a binary
matrix. Work is needed to assure tighter bounds in an analytical way, and to devise algorithms
that can approximate this bounds for larger matrices.

References
[1] Lee D. and Seung H. Learning the parts of objects by non-negative matrix factorization. Nature,
401(October 1999):788–791, 1999.
[2] Lu H., Vaidya J., and Atluri V. Optimal boolean matrix decomposition: Application to role
engineering. Data Engineering, 2008. ICDE 2008. . . . , 00:297–306, 2008.
[3] Devarajan K. Nonnegative matrix factorization: an analytical and interpretive tool in computational biology. PLoS computational biology, 4(7):e1000029, January 2008.
[4] Aharon M., Elad M., and Bruckstein A. K-SVD: An Algorithm for Designing Overcomplete
Dictionaries for Sparse Representation. IEEE Transactions on Signal Processing, 54(11):4311–
4322, November 2006.
[5] Berry M., Browne M., and Langville A. Algorithms and applications for approximate nonnegative
matrix factorization. Statistics & data analysis, (June 2006), 2007.
[6] Hoyer P. Non-negative matrix factorization with sparseness constraints. The Journal of Machine
Learning Research, 5:1457–1469, 2004.
[7] Miettinen P. The boolean column and column-row matrix decompositions. Data Mining and
Knowledge Discovery, 17(1):39–56, 2008.
[8] Miettinen P. Sparse Boolean Matrix Factorizations. 2010 IEEE International Conference on Data
Mining, pages 935–940, December 2010.
[9] Li T. and Ding C. The relationships among various nonnegative matrix factorization methods for
clustering. Data Mining, 2006. ICDM’06. Sixth International . . . , pages 362–371, 2006.
[10] Zhang Z., Ding C., Li T., and Zhang X. Binary matrix factorization with applications. Data
Mining, 2007. ICDM . . . , 2007.

2971

