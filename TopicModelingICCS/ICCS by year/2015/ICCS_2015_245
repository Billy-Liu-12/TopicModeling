Procedia Computer Science
Volume 51, 2015, Pages 2638–2647
ICCS 2015 International Conference On Computational Science

Efficient Execution of Replicated Transportation
Simulations with Uncertain Vehicle Trajectories
Philip Pecher1, Michael Hunter2, and Richard Fujimoto3
Georgia Institute of Technology, Atlanta, USA
1
Industrial and Systems Engineering
2
Civil and Environmental Engineering
3
Computational Science and Engineering
philip161@gmail.com, michael.hunter@ce.gatech.edu,
fujimoto@cc.gatech.edu

Abstract
Many Dynamic Data-Driven Application Systems (DDDAS) use replicated simulations to project
possible future system states. In many cases there are substantial similarities among these different
replications. In other cases output statistics are independent of certain simulation computations. This
paper explores computational methods to exploit these properties to speed up the simulation execution
time. We discuss a new algorithm to speed up the execution of replicated vehicle traffic simulations,
where the output statistics of interest focus on one or more attributes such as the trajectory of a certain
“target” vehicle. By focusing on correctly reproducing the behavior of the target vehicle and its
interaction with other modeled entities across the different replications and modifying the event
handling mechanism the execution time can be reduced. A speculative execution method using a
tagging mechanism allows this speedup to occur without loss of accuracy in the output statistics.
Keywords: DDDAS, replicated simulation, parallel simulation, transportation systems

1 Introduction
There are many applications that utilize microscopic traffic simulation models driven by online
data to analyze and optimize operational transportation systems (e.g., (Suh, Hunter, and Fujimoto
2014)). For example, for this paper we posit a motivating DDDAS application concerned with
tracking the location of a vehicle where continuous surveillance is either not possible or not desirable.
Such a DDDAS deployment may repeatedly execute a cycle that includes (1) detecting the current
location of the vehicle, (2) predicting the likelihood of possible locations some time into the future,
and (3) focusing surveillance efforts on the most likely future locations, e.g., by re-positioning sensors
or concentrating data analysis efforts in certain areas (Fujimoto, et al. 2014). Realizing this DDDAS
application may require the completion of many replicated simulation runs. For instance, the second

2638

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.371

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

step involves executing a set of replicated simulation runs where each run models the target vehicle
following a different potential route to reach some (potentially unknown) destination. In addition, to
further optimize sensor repositioning other unknowns may need to be captured such as changing
traffic conditions and travel time variability within a traffic condition. In this paper we propose to
exploit the similarities among these runs to optimize execution time or minimize needed
computational resources.
For example, in runs that only differ according to the route taken by the target vehicle the
trajectory of vehicles not impacted by the target vehicle will remain the same across the different runs.
Further, the output statistics of interest may not require portions of the simulation to be completed at
all as simulation computations concerning vehicles far away from the target as the target approaches
its destination will not affect statistics related to the target vehicle. The focus of this paper is to
develop and evaluate techniques to reduce the amount of computation required given these
similarities, thereby reducing the time required to gain future estimates and/or reduce the
computational resources that are required for the DDDAS application.
Here we present an algorithm to accelerate the generation of results from N similar, replicated
simulation runs without loss of accuracy. In other words the statistical results that are produced should
be identical to those produced by a brute-force approach of completing N independent simulation runs.
The problem is stated as follows. Let ET denote the target vehicle, i.e., the vehicle being tracked. Let
us assume its position is known at time t0 and that a prediction model has determined a set of possible
future paths and their likelihoods. The simulation now aims to determine the time at which ET reaches
certain user-specified points along each of these paths. After extracting real-time information such as
current traffic conditions throughout the region, the traditional approach would perform N replications
each simulating ET using a different route. Our goal is to minimize the amount of computation that
must be performed while still computing the same results as the traditional replicated approach. An
extension of this work is to consider multiple replications using a single route, e.g., to consider the
impact of stochastic or other variations, however, we will not explore this direction here.

2 Related Work
An application such as this requires one to predict a set of likely destinations for the target vehicle.
There have been numerous efforts that have developed methods to predict this destination set. For
example, in (Pecher, Hunter, and Fujimoto 2014) the routes the vehicle might take and aspects such as
traffic congestion that will impact its travel time are considered. A prediction model that assigns
destinations a higher likelihood if they are consistent with the path taken thus far can be found in
(Krumm, 2006). Neural networks have also been investigated for use in destination prediction
(Mikluščák et al., 2012). If limited data are available, the SubSyn algorithm from (Xue et al., 2013)
can be used to synthesize new trajectories from previously collected ones. A summary of relevant
models can be found in (Pournajaf, Xiong and Sunderam, 2014). Given these and other efforts the
purpose of this paper is not to modify a previous prediction method. Rather, the aim is to illustrate
how one can quickly execute a traffic simulation that projects the most probable positions of the
vehicle at some point in time into the future.
Sharing computation among replicated simulation runs in the context of cloning running
simulations is described in (Hybinette and Fujimoto, 2002), which served as motivation and the
starting point for this work. The approach described here differs in three ways. First, the approach
described here focuses on transportation simulations though many of the ideas can be generalized to
other applications. Second, we introduce speculative execution as a means to improve performance.
This involves considering the output statistics produced by the simulation in order to determine those
simulation computations that must be completed. Third, like the approach described in (Hybinette and
Fujimoto, 2002) portions of the simulation are replicated as needed during the computation as the

2639

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

different replications diverge using a technique called incremental cloning. Here, incremental cloning
is applied to selected state variables as needed rather than an entire simulation process, yielding a
more efficient implementation.
Another related approach is called updateable simulations (Ferenci et al., 2002). This is a
technique that first executes a baseline simulation run, creates a log of the entire execution, and then
computes the results for other replications by determining the computations that are different and
updating the log, thereby reusing results from the baseline run. The updateable simulation approach
analyzes the events of the baseline simulation for potential speedups in the management of the Future
Event List (FEL) for subsequent runs. The approach described here does not require completion of a
baseline run and the creation of an event history log, nor the management of an FEL. Further, for each
different scenario, the updatable simulation algorithm must explicitly execute another run (albeit with
reduced computation), which is avoided with the algorithm presented here. Lastly, the reuse discussed
here does not stem from unchanged events, but rather from the invariance in certain state variables
across the different scenarios.
The approach described here uses the concept of minimum propagation delays, i.e., the minimum
amount of simulation time that must elapse before one object in the simulation can affect another. This
is a familiar one in the parallel discrete event simulation literature. Stemming from its origins captured
in a term called lookahead (Chandy and Misra, 1979), this concept is generalized as the distance
between objects and used to synchronize parallel simulations, e.g., see the work described in (Ayani,
1988), among others. Here, distance between objects is exploited to help determine those
computations that may affect the statistics produced by the simulation in order to improve the
efficiency of the proposed algorithm, especially the tagging mechanism described later. For example,
if statistics are needed for the target vehicle ET at simulation time T, one can use the distance between
objects concept to determine those vehicles that might affect the statistics concerning ET at time T.

3 Simulation Algorithm
For this study we use the (Nagel & Schreckenberg, 1992) model for traffic based on cellular
automata. Although the concepts presented here generalize to other temporal and spatial resolutions, it
is straightforward to illustrate the concepts used in the simulation algorithm with the NagelSchreckenberg model. In this model, a road is mapped to an array of neighboring cells. Each cell
either contains a vehicle or is empty. A vehicle, at any given time, includes a speed attribute that is
represented as an integer. A global maximum speed is also defined. At each time step, the following
actions are applied to every cell-occupying vehicle:
1.
2.
3.
4.

The speed of the vehicle is incremented if the vehicle is not at the maximum speed.
The current vehicle speed is compared to the number of empty cells in front of the vehicle. If
the number of empty cells is smaller, the speed is reduced to the empty cell count (in order to
avoid a potential collision).
If the vehicle's speed is positive, it is decremented with probability p (this is a predefined
parameter).
The vehicle advances forward by the number of cells equal to the corresponding speed.

Since 1992, multi-lane models have been proposed where it is possible for vehicles to overtake each
other. This aspect is not modeled here, however, the algorithm proposed below easily generalizes to
multi-lane models.
The approach used here is summarized as follows. The source of variation among the replications
stems from different routes taken by the target vehicle ET. To simplify the discussion we assume the
statistics of interest are concerned with properties of E T, e.g., its temporal-spatial trajectory through
the road network over time. We superimpose N computational sequences, each modeling one

2640

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

trajectory of ET onto a single run where ET is absent. Each such trajectory is produced by what is
referred to as a virtual instance of ET, i.e., a virtual vehicle (VV). The other non-target vehicles in the
simulation are called model vehicles (MV's). Whereas the traditional approach simulates one instance
of ET and all of the MVs for each of the N replications, here the single superimposed replication
simulates N VVs, and initially one set of MVs. Each VV is therefore logically associated with one
replication in the traditional, brute force approach.
If an MV interacts with a VV and as a result behaves differently compared to the case where E T is
absent, the simulated trajectory of MV is erroneous; for example, MV may need to reduce its speed to
account for the VV. In this case the MV is referred to as a hazardous MV. A hazardous MV is at risk
of causing errors in the output statistics, however, a hazardous MV may not actually affect these
statistics. For example, if the correct behavior is the MV should slow down, its corrected behavior
may not have any impact on the trajectory of VV, which is the focus of the simulation. Additional
MVs that interact with a hazardous MV may also become hazardous. In order to determine if the
output statistics have been compromised, a tagging mechanism is used to flag “hazardous” MV's and
their actions. Once a hazard is confirmed to have impacted the output statistics, a new execution path
is created (a physical "clone," using the terminology from (Hybinette and Fujimoto, 2001)) that
explicitly computes the events for the specific VV that originally caused its first tag to appear. During
certain timesteps, the simulation may clear tags that are guaranteed not to cause any errors in the
output statistics. It should also be noted that in most cases, one superimposed replication may not
capture sufficient variation in the environment. In order to capture not only variation among the
attributes of ET, but also the simulation environment, the modeler may use a batching scheme for a set
of superimposed replications. Section 4 shows how many VV's should be realized within a single
superimposed replication for a particular case study.

3.1 Superimposed Execution Before Hazards Arise
In the following illustration, we adapt the original Nagel-Schreckenberg model for our purposes.
We assume that the parameter p is only global for MV's. Each ET instance realizes its own pi
parameter from a predefined density before it spawns. Further, each cell may contain any number of
vehicles in the proposed approach, but there may at most be one MV contained within one cell (the
reason for this will be explained shortly). Each vehicle samples a routing sequence from a probability
table before it spawns and owns this sequence throughout its lifetime. All vehicles (MV's and VV's)
will execute all four steps outlined in the previous section during each time step. In the examples
below, we assume that the output statistics of interest are limited to measurements of the target entity
ET, namely the time taken to reach the final point of the routing sequence.
The left part of Figure 1 illustrates the traditional replicated approach executing the model. Each
array of cells is a subsection of the road in a given replication at timestep 44. The speed reduction
probability attribute pi of each ET instance is depicted; the routing sequence attribute, which governs
the vehicle's behavior at intersections, is not displayed. One instance of the target vehicle, ET (the cells
with light orange shading), is shown for each replication. The model vehicle (light grey shading) in the
rightmost cell has not been influenced by ET in all three replications. It is important to note that the
behavior of the environment does not change across replications, unless the environment is influenced
by ET. Note that the model vehicle shown in the leftmost cell in replications 2 and 3 has reduced its
speed in Replication 1, prior to Timestep 44, due to the presence of a rather slow instance of E T. Thus,
the leftmost cell in replication 1 is empty while it is occupied in replications 2 and 3.

2641

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

Figure 1: The traditional execution approach (left) and the proposed approach (right)

The right part of Figure 1 shows a snapshot of the simulation where the three replications are
superimposed into one execution. Note that all three VVs appear in the superimposed execution.
During collision detection (Step 2 of the Nagel-Schreckenberg algorithm) all vehicles will react to
MV, but MVs will ignore virtual vehicles. This implies that it is possible for a cell to now contain both
zero or one MV along with any number of VV's. Virtual vehicles do not interact with other virtual
vehicles because they logically reside in different replications. VVs do interact with MVs, however.
Lastly, MVs react to other MVs as in the traditional approach. The fact that they ignore VV's can
create hazards. For example, the leftmost cell of the superimposed simulation is shown to contain a
vehicle, even though that cell is empty in replicated simulation 1 (shown on the left). This vehicle
represents a hazard for replication 1 in the superimposed simulation. In the following we refer to this
vehicle as model vehicle A.

3.2 Speculative Execution with Hazards
As noted above, in replication 1 shown in left part of Figure 1 MV A was missing from the
leftmost cell at Timestep 44, but is present in the superimposed simulation as well as the other two
replications; the superimposed simulation represents the location of A in the absence of the virtual
vehicle. This invalid state does not directly pose a problem because the desired output statistics are
concerned with the virtual vehicle, and the virtual vehicle’s behavior is not affected by A. However, it
is possible A does affect another model vehicle B, e.g., a fast moving vehicle that overtakes A and then
interacts with the VV. Unless precautions are taken the VV's output statistic may be incorrect if the
behavior of B is not taken into account in the superimposed simulation. To address this problem, A is
flagged as a hazard. When B interacts with A it too is also flagged as a hazard, and when B interacts
with the VV the error is detected, and a corrective action, termed a rollback, must be executed.
The approach used here is termed speculative execution because VV’s behavior is modeled
assuming VV is oblivious to the impact that VV has on the rest of the simulation. This will not impact
the results of the simulation so long as VV’s impact on the rest of the simulation do not affect VV
itself. If this assertion turns out to be incorrect, as exemplified by the above example, corrective
actions are required to ensure the output statistics produced by the simulation match the brute-force
replicated approach..

2642

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

Once a model vehicle alters its behavior because of a virtual vehicle in front of it, there are now
two states to consider:
x
x

State A. The model vehicle does not consider the virtual vehicle and checks if there is another
vehicle present in the road segment it tries to traverse in the current timestep. This is the valid
state for all virtual vehicles except the one that was ignored.
State B. The model vehicle considers the virtual vehicle during the collision detection step.
This is an invalid state for all virtual vehicles except the one that was considered.

Because there are more virtual vehicles beyond the one being considered, it is beneficial to
simulate using state A. In order to confirm whether this causes an error for the virtual vehicle that was
ignored by the model vehicle, two possible sources of error must be considered:
x

x

Error-Source 1. Had the model vehicle been blocked by the virtual vehicle, it could have
caused model vehicles behind it (upstream) to slow down. In response, those model vehicles
could alter their behavior (routing sequence, aggression etc.) and impact the virtual vehicle at
some point in the future.
Error-Source 2. The model vehicle behavior that ignores the virtual vehicle can also cause
errors. While the virtual vehicle can ignore the specific model vehicle that passed through it,
the model vehicle can now influence the behavior of other model vehicles in front of it that
can impact the passed virtual vehicle.

In either of these situations two error-causing events may occur:
x
x

Error I. The virtual vehicle encounters a model vehicle that it should not have encountered.
Error II. The virtual vehicle does not encounter a model vehicle that it should have
encountered.

If a model makes Error-Source 1 possible, one can simply clone the model vehicle and
consequently run the scenario of the virtual vehicle along with the superimposed scenario, rather than
to use the tagging rules (which are discussed shortly) for both the passing model vehicle and an
alternative (blocked) instance of the same model vehicle. Which mechanism is more efficient (explicit
cloning vs. two tagging sources) depends on the specific application. If the traffic intensity is high, it
is likely that explicitly cloning all vehicles could be computationally intensive. At the same time a
high traffic intensity is likely to trigger a rollback when the tagging mechanism is used.
If only Error-Source 2 is possible, a forward tagging mechanism may alternatively be used to
detect errors (explicit cloning could still be the better option for certain models). As soon as a model
vehicle overlaps or overtakes a virtual vehicle, a tag is added to the model vehicle. A tag contains the
id of the virtual vehicle, an occurrence count, and a flag that specifies whether this is the first model
vehicle affected (this would be set to true as this is the first time the particular occurrence count-id
combination has been observed). Whenever another model entity slows down - in the collision
detection step - as a result of a tagged model entity in front of it, the tag is copied (with the flag field
now being false). Additionally, when a tagged model entity reaches an intersection, the tag is added to
the intersection. As soon as the virtual vehicle encounters one of its prior tags (at an intersection or in
the collision detection step), the simulation explicitly executes the replication with the given virtual
vehicle as the sole instance of ET (as in the traditional approach) and the virtual vehicle along with all
its tags are removed from the superimposed model. If other statistics from the virtual vehicle were
collected, they must be rolled back. A virtual vehicle that encounters its tag on a model vehicle in front
of it implies an Error I, while an encounter with its tag on an intersection could imply an Error II. The
following listing shows the full algorithm, which replaces step 2 of the Nagel-Schreckenberg
algorithm:

2643

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

collision_detect(vehicle e){
if (e.type == virtual)
1. e doesn't collide with other virtual vehicles
2. e collides with model vehicle that are not tagged with e's id but...
3. ... e doesn't collide with model vehicles that have previously illegally overtaken e
or overlapped with e (check flag if the model vehicle is tagged with e's id) and...
4. ...if e collides with a tagged (of its own id) model vehicle, remove e from current
model (along with all its tags) and physically clone e on a separate replication.
if (e.type == model)
1. e collides with model vehicles but...
2. ... if e collides with a tagged model vehicle, e will copy the tag(s)
3. e doesn't collide with virtual vehicles, but if a collision with a particular virtual
vehicle occurs for the first time, e is tagged with the virtual vehicle's id and flag.
}
As model vehicles may own any number of tags, a list (of tags) is associated with them. For any
tag, if flag is true, it means that the model vehicle overtook or overlapped with a virtual vehicle at
some point. If it is false, it means that the model vehicle came into contact with another tagged model
vehicle at some point. If the model is more sophisticated and contains traffic signals for example, tags
must be copied every time there is a conditional link. For example, if a tagged model vehicle reaches
an intersection, and, because of its presence causes the light to switch from green to red for another
lane, the tag will have to be copied to every model vehicle in the stopped lane.

4 Experimental Evaluation
In order to evaluate the speedup of the superimposed approach, a synthetic simulation experiment
(with randomly generated input) was performed with varying numbers of virtual vehicles on a road
network. These experiments do not flush redundant tags using the minimum propagation delay
techniques. The implementation is sequential; a work-optimal parallel version could easily be created
by partitioning the cell regions and mapping them to logical processes (LP). Each LP would execute
the algorithm listed previously for the cell transitions of its vehicles. Once a vehicle exits the region of
a given LP, a message is sent to the LP that owns the neighboring region of cells.

4.1 Experimental Setup
The simulated transportation network has a Manhattan style topology consisting of nine northsouth and nine east-west two-way roads. The intersection-to-intersection distance measures 100 cells.
Each vehicle has a randomly selected intersection as its destination and will take a shortest path to it.
Model vehicles are generated at the end points of each two-way road. Two scenarios will be
considered. The "low traffic" scenario will generate a model vehicle with probability 0.1 for each
source cell during each timestep, while the "high traffic" scenario will use a probability of 0.5. Model
vehicles have a maximum speed of 3 cells per timestep and a p=0.5 deceleration parameter. The
simulation runs for 500 timesteps and uses the superimposed Nagel-Schreckenberg algorithm with the
tagging mechanism. The target vehicle ET, is released at Timestep 3 and varies its deceleration
parameter (0.2, 0.25, 0.3, 0.35, 0.6, 0.65, 0.7, and 0.75), its maximum speed (2, 3, 4, and 5 cells per
tick), and its destination (uniformly selected among all intersections).

2644

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

4.2 Speedup vs. Number of Replications and Traffic Intensity
Figure 2 shows the execution times for the naive approach of running one replication per
realization of ET (Brute Force Execution Mode) and the superimposed approach with the tagging
mechanism (Virtual Vehicle Execution Mode). The orange and grey lines cover data points from the
high and low traffic scenarios, respectively. As the number of replications increase, the VVEM
execution time grows more slowly than the BFEM execution times. The ET travel paths were verified
to yield identical results for both execution modes. At 64 replications, the speedup of VVEM (relative
to BFEM) is 5.8 for the low traffic scenario, while it is 1.65 for the high traffic scenario. This is
intuitive because in highly congested systems, many model vehicles will be able to overtake the
virtual vehicles. As a result, more model vehicles will be tagged, and their tag propagation rate is also
much higher. Subsequently, the probability of having to spawn physical clones increases. The results
show that one should opt for larger batch sizes when using VVEM - especially when modeling a
highly congested network. The test computer is an Intel Core i5-3550 with 16 GB DDR3 RAM
running Windows 7 64bit.
120

CPU Time (s)

100
80

0.1 VVEM

60

0.1 BFEM

40

0.5 VVEM

20

0.5 BFEM

0
1

2
4
8
16
32
Number of Replications

64

Figure 2: Execution time results by scenario

4.3 Speedup vs. Relative Speed Differences
Because the main VVEM run is, in most cases, only slightly more computationally intensive than a
traditional replication, the VVEM speedup is equal to approximately N/(1+C), where N is the number
of replications (all N replications are executed by BFEM) and C is the number of physical clones
triggered by VVEM. The number of triggered clones is primarily dependent on how many model
vehicles are able to overtake the virtual vehicles. This metric, in turn, is directly related to the traffic
intensity and the speed of the general traffic relative to the virtual vehicles. This is a result of model
vehicles being tagged as they overtake the slow virtual vehicles and propagating the tag further. This
increases the probability of a clone being triggered. Figure 3 shows the VVEM speedup for different
values of the global speed limit parameter V (used by MV's) as well as the traffic scenario (high vs.
low). Each scenario is run five times (in both VVEM and BFEM) for N=16 virtual vehicles for all
permutations of low & high VV deceleration probability set (<0.2, 0.25, 0.3, 0.35> vs. <0.6, 0.65, 0.7,
0.75>) and a low & high VV maximum speed (<2, 3> vs. <4, 5>). The average speedup is displayed
for each scenario. It is clear that a lower speed limit results in a higher speedup as the model vehicles
are less likely to overtake the virtual vehicles (independent of the traffic intensity) and, thus, less likely
to trigger physical clones. It is also noticeable that (comparatively) fast virtual vehicles result in a very

2645

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

high speedup (although it is more extreme in the low traffic scenario) as model vehicles are less likely
to have to slow down and be tagged.
18
16
14
12
10
8
6
4
2
0

High Decel, Low
Speed
Low Decel, Low Speed
High Decel, High
Speed
High
Traffic,
V=5

High
Traffic,
V=3

Low
Traffic,
V=5

Low
Traffic,
V=3

Low Decel, High
Speed

Figure 3: Speedup for different relative speed tendencies

4.4 Tag Memory Footprint vs. Traffic Intensity and Speed Limit

Spawn Probability
Per Tick Per Source

A VVEM replication uses more memory than a single BFEM replication because the tags from
VV-MV collisions need to be stored as they are spread throughout the simulation environment. Figure
4 shows the rate of growth in memory requirements as the traffic intensity increases; no tag flushing
procedure was used in those iterations. One could clear tags of VV's that have reached their
destination as well as tags of MV's that cannot reach the corresponding VV based on the minimum
propagation delay. The values were computed at Timestep 350 using 64 VV's.
.

0.5
0.3

5 cells/tick

0.1

3 cells/tick
0

0.5
1
Tag Memory Footprint (MB)

1.5

Figure 4: Memory requirements for storing the tags

5 Conclusion and Future Work
An algorithm to speed up replicated traffic simulations was presented. The concepts can also be
applied to other models, but the benefits are particularly well-suited for models with similar
characteristics. Three of these characteristics are the local movement of entities (triangle inequality),
low connectivity (vertices with low degree), and simple output collection (travel time of E T). The
experimental results show that the execution time grows slowly as the number of E T instances
increases.

2646

Eﬃcient Execution of Replicated Transportation Philip
Simulations
Pecher,with
Michael
Uncertain
Hunter
Vehicle
and Richard
Trajectories
Fujimoto

We plan to investigate what heuristics can be used to determine how and when tags should be
cleared. There is an overhead from performing a check, but there are also gains from fewer
comparisons and reduced storage requirements. One can also envision a hybrid between execution
with and without error detection where heuristics will compute the probability of a certain error
occurring (e.g., given a macroscopic analysis of the traffic intensity). It is also worthwhile to study
what models benefit from the superimposed approach and its performance using real-world network
configurations. Under what circumstances is it worthwhile to physically clone, rather than verify
whether an error occurs via the tagging rules? There is also a bias-variance tradeoff present. The
analyst may simplify the model and speed up the execution. This will cause a reduction in the halfwidth for fixed computation time. However, using a more sophisticated model may reduce the bias at
the expense of computational time (because certain optimizations cannot be used).
Acknowledgements : Funding for this project was provided by AFOSR Grant FA9550-13-1-0100.

References
Ayani, R. (1988). A Parallel Simulation Scheme Based on Distances Between Objects. Royal
Institute of Technology, Department of Telecommunication Systems-Computer Systems.
Chandy, K., & Misra, J. (1979). Distributed simulation: A case study in design and verification of
distributed programs. IEEE Transactions on Software Engineering .
Ferenci, S., Fujimoto, R., Ammar, M., Perumalla, K., & Riley, G. (2002). Updateable simulation
of communication networks. Proceedings of the sixteenth workshop on Parallel and distributed
simulation.
Fujimoto, R. M., Guin, A., Hunter, M., Park, H., Kannan, R., Kanitkar, G., et al. (2014). A
Dynamic Data Driven Application System for Vehicle Tracking. 2014 International Conference on
Computational Science.
Holmes, V. (1978). Parallel algorithms for multiple processor architectures. Ph.D. dissertation,
Comp. Science Dept.. Univ. Texas at Austin.
Hybinette, M., & Fujimoto, R. M. (2001). Cloning parallel simulations. ACM Transactions on
Modeling and Computer Simulation .
Krumm, J. (2006). Real Time Destination Prediction Based On Efficient Routes. SAE Technical
Paper .
Mikluščák, T., Gregor, M., & Janota, A. (2012). Using Neural Networks for Route and Destination
Prediction in Intelligent Transport Systems. Telematics in the Transport Environment .
Nagel, K., & Schreckenberg, M. (1992). A cellular automaton model for freeway traffic. Journal
de physique .
Peacock, J., Wang, J., & Manning, E. (1978). Distributed simulation using a network of
processors. Proceedings of the 3rd Berkeley Workshop on Distributed Data Management and
Computer Networks.
Pecher, P. K., Hunter, M., & Fujimoto, R. M. (2014). Past and Future Trees: Structures for
Predicting Vehicle Trajectories in Real-Time. 2014 Winter Simulation Conference.
Pournajaf, L., Xiong, L., & Sunderam, V. (2014). Dynamic Data Driven Crowd Sensing Task
Assignment. ICCS 2014. 14th International Conference on Computational Science.
Suh, W., Hunter, M., & Fujimoto, R. (2014). Ad Hoc Distributed Simulation for Transportation
System Monitoring and Near-Term Prediction. Simulation Modeling Practice and Theory .
Xue, A. Y., Zhang, R., Zheng, Y., Xie, X., Huang, J., & Xu, Z. (2013). Destination prediction by
sub-trajectory synthesis and privacy protection against such prediction. Data Engineering (ICDE),
2013 IEEE 29th International Conference.

2647

