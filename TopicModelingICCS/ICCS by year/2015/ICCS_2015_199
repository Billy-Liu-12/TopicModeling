Procedia Computer Science
Volume 51, 2015, Pages 1838–1847
ICCS 2015 International Conference On Computational Science

Multilevel Communication Optimal Least Squares
Pawan Kumar1
Competence Center for High Performance Computing,
Fraunhofer Institute of Industrial Mathematics,
Kaiserslautern 67663, Germany
misterpawan@gmail.com

Abstract
Using a recently proposed communication optimal variant of TSQR, weak scalability of the least
squares solver (LS) with multiple right hand sides is studied. The communication for TSQR
based LS solver for multiple right hand sides remains optimal in the sense that no additional
messages are necessary compared to TSQR. However, LS has additional communication volume
and ﬂops compared to that for TSQR. Additional ﬂops and words sent for LS is derived. A
PGAS model, namely, global address space programming framework (GPI) is used for internodal one sided communication. Within NUMA sockets, C++-11 threading model is used.
Scalability results of the proposed method up to a few thousand cores are shown.
Keywords: Least Squares, QR decomposition, parallel computing, PGAS model

1

Introduction

We are interested in the problem of solving the following least squares problem with multiple
right hand sides
AX = B,

A ∈ Rm×n , X ∈ Rn×k , B ∈ Rm×k , m >> n

(1)

on current multilevel large distributed memory architectures consisting of multi-socket nodes
with multi-level cache hierarchies. Here A and B are given, X is the unknown to be determined.
We assume that A has full column rank. Since m > n, it is an overdetermined system and we
seek a minimum 2-norm solution. However if B happens to be in the column space of A we
indeed obtain a true numerical solution by our approach. Here (1) is also known as least squares
problem or LS problem in short [7, p. 236]. The LS problem shows up as a time consuming
kernel in a variety of applications including data ﬁtting and optimization and has been studied
widely, see references in [2,7]. One of the best reliable tools to solve (1) when A has full column
rank is by using QR factorization [5, 7]. For m >> n, the matrix A is tall and skinny and the
corresponding QR factorization for A is called tall and skinny QR method. However, the name
TSQR refers also to a new variant of communication optimal QR algorithm recently developed
1838

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.410

Multilevel Communication Optimal Least Squares

Kumar

in [4]. The method is optimal in the sense that number of inter-node message transfers and
also the intranodal memory transfers achieve the lower bound (up to polylogarithmic factors
involving number of processors). The TSQR kernel is then used in the panel factorization of
typical almost square (m ≈ n) QR method [7, p. 236] during panel factorization, and also ﬁnds
use in the so-called s−step Krylov subspace methods [9]. Although, the use of TSQR for least
squares problem has been mentioned [4], to our knowledge, explicit derivation of number of
messages, communication volume and ﬂops and subsequent numerical experiments on modern
day multilevel architectures is missing. In this paper, we propose a multilevel LS solver to solve
(1) where the local QR factor is never constructed explicitly [13]. Our approach keeps the total
number of inter nodal messages same as that of TSQR with no additional latencies compared
to TSQR. However, compared to TSQR we have increased communication volume, because in
addition to transferring upper triangular factors, we also transfer the right hand side blocks.
Moreover, for LS solver, we have to perform additional ﬂoating point operations when we apply
local QT to the locally stacked right hand side. The method proposed in this paper is well
suited for modern day multilevel architectures; moreover, our shared memory implementation
of LS solver is cache-oblivious due to recursion, see also [6]. We study the scalability of the
proposed multilevel LS solver on a few thousands of core.

2

Notation

By m >> n we mean that m is reasonably larger compared to n, and by m ≈ n we mean m
T
is nearly equal
√ to n. For any matrix K, let K denote transpose of matrix K. For any vector
T
x, let x = x x be the standard 2-norm. Let I be the identity matrix. Let x denote the
largest integer less than or equal to x. Sometimes we use MATLAB’s semi-colon notation for block
row partitioned matrices.

3

Least Squares Using TSQR

When m = n in (1), the matrix A is square with full rank, typical direct solvers or iterative
methods may be used. However, when m is much larger than n, in this case, there are various possible ways of solving the overdetermined system including changing the system (1) to
normal form by multiplying on the left by AT on both sides so that the problem reduces to
the normal form as follows: AT AX = AT B. Since AT A above is symmetric and square, the
usual factorization routines such as QR or LU factorization may be used. However, such an
approach has a major disadvantage in that one has to form AT A, consequently, if A has high
condition number, then AT A has even higher condition number, and the subsequent linear
solve may be too ill-conditioned leading to numerical instabilities in LU and QR of AT A. Even
though the normal equations approach requires only about half the total number of ﬂops for
tall skinny matrices, and has less storage compared to those for a QR approach, with a QR
based approach, a much wider class of problem could be solved. We refer the reader to [7, p.
245], [14] for comparison of numerical stabilities between these methods. Another approach is
based on singular value decomposition (SVD), where SVD is more costly to compute than QR
on parallel architectures. In this paper we consider the QR approach. To use the QR method,
the problem (1) above is ﬁrst transformed into a minimization problem as follows
min

Y ∈Rn×k

AY − B .

(2)

Assuming that m >> n, and that A has full column rank, we consider a so called tall skinny
QR (TSQR) method [4] that factorizes the matrix A into a tall and skinny orthogonal matrix
1839

Multilevel Communication Optimal Least Squares

Kumar

Q ∈ Rm×n (same dimension as A) such that QT Q = I, and an upper triangular matrix
R ∈ Rn×n . With this factorization, the LS problem (2) is reduced as follows
min

Y ∈Rn×k

AY − B =

min

Y ∈Rn×k

(QR)Y − B =

min

Y ∈Rn×k

RY − QT B .

Thus instead of solving the original problem (1), we now solve the following linear system
RY = QT B,

(3)

where R being upper triangular, we perform backward sweeps to solve for Y and we set X := Y
to obtain a solution of (1) in minimum 2-norm sense.

4

Communication Optimal Multilevel Least Squares

The TSQR algorithm implemented in [4] is a communication optimal QR algorithm (modulo
polylogarithmic factors involving number of processors) for tall and skinny matrices for both
distributed memory and serial memory with a hierarchy of caches typical of modern day computer architectures. On distributed memory, the TSQR algorithm [4] yields the R factor which
is available on the node that does ﬁnal QR in the reduction tree, however, the Q factor of QR
is not assembled and it remains scattered among the processors. In a recent paper [1], authors
proposed ways of assembling and applying the QT eﬃciently. In this section we brieﬂy discuss
TSQR algorithm, and show how to adapt it to solve the LS problem (1). In particular, assembly
of the whole Q factor is not required for the LS problem; they are released as soon as they are
used to update right hand sides at each level of the reduction tree (such as shown in Figure 1).
We now describe the LS solver based on TSQR algorithm. Let the given matrix A be
partitioned into p block rows denoted by Ai and let each of these blocks be assigned to processor
Pi , i = 1, . . . , p. The steps of the TSQR and the least squares solver algorithm is well illustrated
by working out an example with eleven processors; it is an example of an unbalanced and
incomplete binary tree. The choice of best reduction tree depends on the architecture at hand;
the method of ﬁnding this is left as a future work. In case DRAM memory is limited, an
out-of-DRAM approach as suggested in [4] may be used, where only those block are processed
that may ﬁt in the memory while remaining blocks wait for their turn, see Figure 3 in [4] for
an example. In this paper we do not consider such implementations, but nevertheless they may
be adapted in our LS solver. In [4], an example on a binary tree with four processors is shown,
we follow a slightly diﬀerent notation; we ﬂip the subscripts, the ﬁrst index denotes the level
number, and the second index denotes the node number. In particular, the Q, R, and B blocks
at diﬀerent levels are denoted by subscripts ( , i). For example, the block Q ,i corresponds to
block i at level ; the blocks are numbered from left to right in ascending order as shown in
Figure 1. The TSQR algorithm starts with a QR factorization of the local blocks Ai of A as
follows
⎡
⎢
⎢
⎢
⎣

Q0,0 R0,0
Q0,1 R0,1
..
.
Q0,10 R0,10

⎤

⎡

⎥ ⎢
⎥ ⎢
⎥=⎢
⎦ ⎣

Q0,0

⎤⎡
⎥⎢
⎥⎢
⎥⎢
⎦⎣

Q0,1
..

.
Q0,10

R0,0
R0,1
..
.
R0,10

⎤

⎥
⎥
⎥.
⎦

Here Q0,i and R0,i are the Q and R factors of the QR of Ai . The right hand side block B is block
row distributed as A, and local blocks are immediately updated as follows: B0,i := QT0,i B0,i . For
level = 0, we send the recently computed upper triangular factor R0,i residing with processor
Pi if the following holds
i = 0 mod(2 ) and i/2

1840

mod(2) = 1.

(4)

Multilevel Communication Optimal Least Squares

Kumar

It is easy to see that for the ﬁrst pass = 0, (4) above is satisﬁed for i = 1, 3, 5, 7, and 9. For
these values of i, the blocks R0,i is sent to processor with id j if the following holds
j + 2 < nprocs and j mod(2

+1

) = 0.

(5)

Note that here nprocs = p + 1. Thus during ﬁrst pass, all processors Pj with j = 0, 2, 4, 6, 8
are receivers, and they receive from senders Pi , where i satisﬁes (4) above. Note that for this
example since the binary tree is not complete, the id j = 10 could not be paired; consequently it
does not receive or send anything and waits until the next pass. We remark that the conditions
(4) and (5) correctly identify nodes that do not take part in send or receive process for any given
incomplete binary tree. After send and receive operations are done, in the next pass, we stack
the received R0,i blocks over the existing receiver’s R0,j blocks followed by a QR decomposition
of the stacked blocks. This is followed by multiplying the corresponding QT of QR of stacked
blocks obtained in left of (6) to the stacked right hand side. These two steps are illustrated
below
⎡
⎡
⎢
⎢
⎢
⎢
⎢
⎢
⎣

Q1,0 R1,0
Q1,1 R1,1
Q1,2 R1,2
Q1,3 R1,3
Q1,4 R1,4
R1,5 := R0,10

R0,0
R0,1
R0,2
R0,3
R0,4
R0,5
R0,6
R0,7
R0,8
R0,9
R0,10

⎢
⎢
⎢
⎢
⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎥ := ⎢
⎥
⎢
⎥
⎢
⎢
⎦
⎢
⎢
⎢
⎢
⎣
⎤

⎤

⎡

R0,0
R0,1
R0,2
R0,3
R0,4
R0,5
R0,6
R0,7
R0,8
R0,9
R0,10

⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎥
⎥←⎢
⎢
⎥
⎥
⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎥
⎢
⎢
⎥
⎣
⎦

⎤
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎥,
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎦

⎡

⎡
⎢
⎢
⎢
⎢
⎢
⎢
⎣

B1,0
B1,1
B1,2
B1,3
B1,4
B1,5 := B0,10

T
⎢ Q1,0
⎢
⎢ T
⎤
⎢ Q1,1
⎢
⎥
⎢
⎥
⎢ T
⎥
⎢
⎥ := ⎢ Q1,2
⎥
⎢
⎥
⎢ T
⎢ Q1,3
⎦
⎢
⎢
⎢
⎢ QT
⎣ 1,4

B0,0
B0,1
B0,2
B0,3
B0,4
B0,5
B0,6
B0,7
B0,8
B0,9

⎤
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎥ . (6)
⎥
⎥
⎥
⎥
⎥
⎥
⎥
⎦

B0,10

Here R0,10 has been renamed to R1,5 on the left. For the least squares solve, the right hand
side blocks Bi,j with same indices as Ri,j are sent and received. They are sent together with R
blocks, thus, without increasing the number of messages. Here B0,10 has been renamed to B1,5
on the left. For level = 1, the processor that will send their R blocks obtained in (6) is again
determined by (4). The senders this time are processors Pi with id i = 2, 6, and 10 with blocks
R1,1 , R1,3 , and R1,5 respectively along with respective right hand sides B1,1 , B1,3 , and B1,5 . The
processors with id j = 0, 4, 8 are receivers as determined by (5). As before, after receiving the
R blocks, it is stacked over the receiver’s R block and QR factorization is performed followed
by stacking the right hand side blocks, and then applying the local QT as follows
⎡
⎢
⎤
⎢
Q2,0 R2,0
⎢
⎣ Q2,1 R2,1 ⎦ := ⎢
⎢
⎢
Q2,2 R2,2
⎣
⎡

R1,0
R1,1
R1,2
R1,3
R1,4
R1,5

⎤

⎡

⎥
⎢
⎥
⎢
⎥
⎢
⎥←⎢
⎥
⎢
⎥
⎢
⎦
⎣

R1,0
R1,1
R1,2
R1,3
R1,4
R1,5

⎤
⎥
⎥
⎥
⎥,
⎥
⎥
⎦

⎡

⎡

B2,0
⎣ B2,1
B2,2

T
⎢ Q2,0
⎤
⎢
⎢
⎦ := ⎢ QT2,1
⎢
⎢
⎣ T
Q2,2

⎤

B1,0
B1,1
B1,2
B1,3
B1,4
B1,5

⎥
⎥
⎥
⎥.
⎥
⎥
⎦

Here Q2,0 and R2,0 are with processors P0 , the blocks Q2,1 and R2,1 are with processors P4 and
Q2,2 and R2,2 are with processors P8 , see Figure 1. For level = 2, from (4) the senders are Pi
with i = 4, and from (5) the receivers are Pj with j = 0. Continuing as before, we perform the
QR factorization of stacked R blocks followed by multiplication of QT to the stacked B blocks
as follows
⎡
Q3,0 R3,0
R3,1 := R2,2

:= ⎣

R2,0
R2,1
R2,2

⎡

⎤
⎦,

B3,0
B3,1 := B2,2

QT
:= ⎣ 3,1

B2,0
B2,1

B2,2

⎤
⎦.

1841

Multilevel Communication Optimal Least Squares

Kumar

Finally for level = 3, R3,1 block is sent to id zero, and we obtain the ﬁnal R factor of the QR
of A followed by an update of right hand side B4,0 as follows
R3,0
R3,1

=:

Q4,0 R4,0

,

B4,0 :=

B3,0
B3,1

QT4,0

.

Putting everything together, the ﬁnal Q of the QR of A is given as follows
⎡
⎢
Q=⎣

⎤

Q0,0
..

.
Q0,10

⎡

⎢
⎥⎢
⎦⎢
⎣

⎤

⎡
⎥ Q2,0
⎥⎢
⎥⎣
⎦

Q1,0
..

.
Q1,5

⎤
..

⎥
⎦

.

Q3,0

Q2,2

I

I

Q4,0 .

For the least squares solver, we never construct Q. As soon as we apply the local QT to the
local right hand side B blocks, the local Q blocks are freed from memory. The least squares
solution X of (3) is obtained by doing backward sweep with the upper triangular factor as
follows R4,0 X = B4,0 . Here B4,0 is QT B and R4,0 is R of (3). A complete pseudocode for
TSQR is shown in Algorithm 1 and the pseudocode for the least squares solver based on TSQR
is shown in Algorithm 2. For shared memory concurrency of the LS method, we implement
Algorithm 1 TSQR: Tall Skinny QR
Require: A ∈ Rm×n , m >> n,
nlev = number of levels,
nprocs = number of processes,
nlev = log2 (nprocs) + 1
1: Compute multithreaded TSQR for local blocks at level 0: [Q0,i , R0,i ] = threaded tsqr(Ai )
2: for from 0 to nlev − 1 do
3:
if If my id i = 0 mod(2 ) and i/2 mod(2) = 1 then
4:
ﬂag i as sender
5:
end if
6:
if I am the sender with id i then
7:
receiver = i − 2
8:
Asynchronously send R ,local to receiver
9:
end if
10:
Wait for all the sends to complete
11:
if my id j + 2 < nprocs and j mod(2 +1 ) = 0, then
12:
Flag j as receiver
13:
end if
14:
if I am the receiver with id j then
15:
Stack my R ,local above the received R ,remote sent by i, and call it R,
R=

and perform the QR of R : [Q
end if
17: end for

R

,remote ; R ,local

+1,local , R +1,local ]

,

= sequential tsqr(R).

16:

a recursive LS algorithm ﬁrst introduced by Elmroth and Gustavson [6]. Here we assume a
complete binary tree, and we explicitly construct the Q factor. For an example on four cores,
we consider the block Ai , which is partitioned into four block rows Ai,j , j = 0, . . . , 3. Let Qi0,j
1842

Multilevel Communication Optimal Least Squares

Kumar

Algorithm 2 LS: Least Squares, minX ( AX − B )
Require: A ∈ Rm×n , B ∈ Rm×p , m >> n,
nlev = number of levels,
nprocs = number of processes,
nlev = log2 (nprocs) + 1,
1: Compute multithreaded TSQR for local blocks at level 0: [Q0,i , R0,i ] = threaded tsqr(Ai )
2: for from 0 to nlev − 1 do
3:
if my id i = 0 mod(2 ) and i/2 mod(2) = 1 then
4:
Flag i as sender
5:
end if
6:
if I am the sender with id i then
7:
receiver = i − 2
8:
Asynchronously send R ,local and B ,local to receiver
9:
end if
10:
Wait for all the sends to complete
11:
if my id is j, j + 2 < nprocs and j mod(2 +1 ) = 0, then
12:
Flag j as receiver
13:
end if
14:
if I am the receiver with id j then
15:
Stack my R ,local above the received R ,remote sent by i, and call it R
R=

16:

R

,remote ; R ,local

and perform the QR of R as follows: [Q +1,local , R
Stack my B ,local above B ,remote and call it B
B=

B

+1,local ]

= sequential tsqr(R).

,local ; B ,remote

Replace B +1,local in place by QT+1,local B
end if
end for
−1
Ensure: X := Rnlev,local
Bnlev,local , id 0 has the ﬁnal solution
17:
18:
19:

i
and R0,j
be the QR factors of the QR factorization of Ai as follows:

⎡

⎡ i
⎤
Q0,0
Ai,0
⎢ Ai,1 ⎥
⎢ Qi0,1
i
⎢
⎢
⎥
Ai = ⎣
, Q =⎣ i
Ai,2 ⎦
Q0,2
Ai,3
Qi0,3

⎤

⎡

⎤
i
R0,0
⎢ i ⎥
⎥
⎥ , Ri = ⎢ R0,1
⎥.
i
⎣ R0,2
⎦
⎦
i
R0,3

i
Let us assume that Ai,0 , Rj,0
, Qij,0 , j = 0, 1, 2, 3 ∈ Rs×n ; we also assume for this example
that Ai is of full column rank which means that Qi has n columns. Let B i which is also
i
partitioned like Ai denote the corresponding right hand side, then we ﬁrst overwrite Bj,0
as
i
i
T
follows: Bj,0 = (Qj,0 ) Bj,0 , j = 0, 1, 2, 3. As before we stack the R factors and perform local

1843

Multilevel Communication Optimal Least Squares

Kumar

QR; next we also stack the right hand side blocks, and apply the local Q factors as follows
⎤
⎡
i
R0,0
i
⎢
⎢ R0,1 ⎥
⎢ i ⎥ =: ⎢
⎣
⎣ R0,2 ⎦
i
R0,3
⎡

i
R0,0
i
R0,1
i
R0,2
i
R0,3

⎡

⎤
⎥
⎥ =:
⎦

i
Qi1,0 R1,0
i
i
Q1,1 R1,1

,

i
B1,0
i
B1,1

i
T
⎢ (Q1,0 )
⎢
:= ⎣
(Qi1,1 )T

i
B0,0
i
B0,1
i
B0,2
i
B0,3

⎤
⎥
⎥.
⎦

Then ﬁnal R factor for the block Ai is obtained followed by update of right hand side as follows:
i
R1,0
i
R1,1

i
],
:= [Qi2,0 R2,0

i
B2,0
:= (Qi2,0 )T

i
B1,0
i
B1,1

.

In Algorithm 3, we show the complete steps involved; it shows a coarse grained multi-threading
where spawn before an operation spawns a thread and assigns the task, and sync synchronizes/joins the spawned threads. Although we exploit nested parallelism (nested spawning and
syncing), there are no overlaps, i.e., the spawned child threads are synced with parent thread
at each levels. At step 15 of Algorithm 2 and at step 13 of Algorithm 3 we perform QR decomposition of a matrix with two upper triangular matrix stacked on top of other; in this case,
because of the triangular structure of R blocks, more specialized form of householder reﬂectors
may be constructed with less ﬂops [4]; we do not consider this in this paper.
Algorithm 3 [B, R] = threaded ls(K, )
Require: K ∈ Rq×n
Require: nlev = number of levels, q ≥ 2nlev n
Require: K full column rank
Ensure: Q, R
1: Kleft ← K(1 : q/2 , :)
2: Kright ← K( q/2 + 1 : q, :)
3: if = 1 then
4:
spawn → Qleft , Rleft = sequential tsqr(Kleft )
5:
[Qright , Rright ] = sequential tsqr(Kright )
6:
sync
7: else
8:
spawn → [Bleft , Rleft ] = threaded ls(Kleft , − 1)
9:
[Bright , Rright ] = threaded ls(Kright , − 1)
10:
sync
11: end if
Rleft ; Rright
12: Rstacked ←
13: Qstacked , Rstacked ← sequential tqsr Rstacked
Bleft ; Bright
14: Bstacked ←
15:
16:
17:

B := QTstacked Bstacked
R := Rstacked
sync

4.1

Computation and Communication Costs

In this section we derive the computation costs, i.e., the ﬂop count and the communication costs
which includes the number of messages and the communication volume in terms of number of
1844

Multilevel Communication Optimal Least Squares

Kumar

P0
4,0

P0

P8
3,1

3,0

P0

P8

P4
2,1

2,0
P0

P2

1,0

2,2
P6

P4
1,2

1,1

P10

P8

1,3

1,5

1,4

0,0

0,1

0,2

0,3

0,4

0,5

0,6

0,7

0,8

0,9

0,10

P0

P1

P2

P3

P4

P5

P6

P7

P8

P9

P10

Figure 1: Incomplete binary depicting task ﬂow for TSQR example. Nodes are identiﬁed as
(level, node) and they are numbered from left to right at each level. Load imbalance occurs
due to nodes (1,5) and (3,1) having nothing to do. Pi denotes ith processor.
ﬂoating point words moved. We denote ﬂop count by #FLOPS-LS, number of messages by
#MESSAGES-LS, and the number of words by #COMM VOL-LS for LS, similar notation is
used for TSQR. We use the so called “alpha-beta” model [4]: t = α + βn, where t is the time
for a message of n ﬂoating point words, α is the message latency (seconds per message), and β
is the inverse of bandwidth (seconds per ﬂoating point words communicated). We now derive
the ﬂop count along the critical path [8, p. 91] of a binary tree. For an example the binary tree
that also represents the task ﬂow for the TSQR example is shown in Figure 1. For this example
the critical path length is ﬁve. Since the computational work per node remains roughly equal,
all possible critical paths roughly represent the same computational work. First we recall the
ﬂop count for TSQR. Assuming that the matrix A has a 1D block row distribution with each
blocks of size m/P × n, the ﬂop count for local QR factorization obtained from [4] is
n3
+ O(mn/P ).
3
ﬂops. The critical path length of a binary tree is log2 P. For subsequent levels along the critical
path, we need to factor a 2n × n (two upper triangular matrices of size n × n stacked on top of
other in step 15 of Algorithm 2) with a ﬂop count of 23 n3 + O(n2 ). For LS, we also multiply the
QTi,j factor of size n × 2n (corresponding to block j at level i) with the corresponding stacked
right hand sides [Bi−1,2j ; Bi−1,2j+1 ] of size 2n × k. The total ﬂop count for multiplying local
QTi,j with the stacked right hand side becomes (2n2 k)log2 P, here k being the number of right
hand sides in (1). Finally, we perform a backward sweep with the ﬁnal n × n upper triangular
matrix R, to obtain a solution X; this costs n2 /2 ﬂops. Thus the total ﬂop count in solving the
least squares problem (1) is
#FLOPS-TSQR(m, n, P ) = 2mn2 /P −

#FLOPS-LS(m, n, k, P ) =

2mn2
2
n2
n3
−
+ 2n2 k + n3 +
P
3
3
2

log2 P + O

mn
.
P

Thus, compared to TSQR, we have (2n2 k + n2 /2)log2 P additional ﬂops. By combining the R
and B blocks in one message, the number of messages passed along the critical path is kept to
one, thus there are #MESSAGES-LS=log2 P messages in total which is same as that for TSQR.
The contribution to the message size from the R block is n(n + 1)/2 and that from B block is
nk. Thus the total message size or the communication volume per message for LS is
#COMM VOL-LS(n, k) = n(k + (n + 1)/2).

1845

Multilevel Communication Optimal Least Squares

5

Kumar

Implementation Aspects and Numerical Experiments

Setup of Numerical Experiments. The numerical experiments were performed on SuperMUC supercomputer located at Munich, Germany [3]. We use global address space programming interface or GPI in short which is a message passing library based on the RDMA model (a
PGAS model) [12]. The numerical experiments were performed in double precision arithmetic
with Intel’s icpc compiler version 14.0 [10] with O3 level of optimization. For GPI segment
we allocated 2GB of total 32 GB available shared memory per node. We used MKL library
version 11.1 [11], in particular dgemm for matrix matrix multiplication, dgemv for matrix vector
multiplication, and dtrsv or dtrsm for solving with the upper triangular R factor to obtain
the ﬁnal solution. The GPI library version 1.0.1 is used; it is available for download from [12].
For shared memory implementation of the algorithm as shown in Algorithm 3, we used C++11 threading model with lambda function as follows: threads.push back(std::thread([&]()
K left.pthread tsqr(Q left, R left, gpi); )); here threads being the threads container.
The task at step (9) is not spawned as the continuing thread executes it concurrently. The MKL
library has its own multi-threaded QR routine based on OpenMP, namely dgeqrf to perform
the QR factorization and dorgqr to generate the Q factor. We found our pthread implementation to be slightly better. For sequential QR required in step 15 of Algorithm 2, and required at
steps 4, 5, and 13 of Algorithm 3 we used MKL’s sequential dgeqrf and dorgqr routines. The
elapsed times were computed using std::chrono::system clock::now() routine in chrono.h
library. The 1D distributed matrix A and right hand side B are ﬁlled with random doubles
using rand() function with ﬁxed initial seed.

Scalability Results with GPI and pthreads We show the weak scalability results of LS
solver for multiple right hand sides using GPI for inter-nodal communication and pthreads for
shared memory concurrency. In the tables, the matrix dimension are shown per node. We
used 8 cores per node rather than available 16 to (possibly) avoid NUMA eﬀect. In Table 1,
we show weak scalability when multithreaded TSQR is used on the node, while in Table 2, we
show our multilevel approach for LS solver. Since no explicit QR factors are constructed in the
multilevel case, the multilevel LS solver is relatively faster. As derived in Section 4.1, for weak
scalability, as the number of processors are increased, although the computation costs (ﬂops)
remain constant corresponding to the leaves nodes at level zero, there are more computation
costs and (slightly) more inter nodal communications along the critical paths as critical path
becomes longer. Due to this we see an increase in the elapsed time. We also notice that there
is no signiﬁcant increase in the elapsed time for multiple right hand sides compared to that for
one right hand side; we believe this is due to eﬀective level 3 BLAS operations in dgemm.

6

Conclusion

We showed that the multilevel least squares solver method for multiple right hand sides is
optimal in the sense that the number of inter-nodal messages are same as that for TSQR.
However, there are more ﬂops and communication volume. We found that the multilevel least
squares solver scales weakly, and is on average between 12-20% faster than the approach where
QR factors are constructed explicitly on the node.
1846

Multilevel Communication Optimal Least Squares
matrix
128K x 64

128K x 100

128K x 200

cores
16x8
32x8
64x8
128x8
256x8
16x8
32x8
64x8
128x8
256x8
16x8
32x8
64x8
128x8
256x8

1 RHS
1.27
1.36
1.45
1.71
2.40
2.92
4.39
3.35
3.37
4.15
8.43
8.59
8.81
9.50
9.92

64 RHS
1.72
1.39
1.50
1.77
2.46
3.03
3.01
3.40
3.38
4.25
8.64
8.68
8.91
9.33
10.16

Table 1: Weak scalability. Time in seconds. RHS is right hand side

Kumar
matrix
128K x 64

128K x 100

128K x 200

cores
16x8
32x8
64x8
128x8
256x8
16x8
32x8
64x8
128x8
256x8
16x8
32x8
64x8
128x8
256x8

1 RHS
0.88
0.93
1.05
1.32
1.93
2.13
2.17
2.27
2.71
3.20
5.45
6.01
6.16
6.63
7.32

64 RHS
1.10
1.12
1.21
1.45
2.06
2.34
2.76
2.73
2.87
3.59
5.69
6.37
6.50
6.85
7.63

Table 2: Weak scalability. Time in seconds.
RHS is right hand side

Acknowledgement
Funded by European Union Seventh Framework (FP7/2007-2013) under grant n 246016.

References
[1] G. Ballard, J. Demmel, L. Grigori, M. Jacquelin, H. D. Nguyen, and E. Solomonik. Reconstructing
householder vectors from tall-skinny qr. Technical Report UCB/EECS-2013-175, EECS Department, University of California, Berkeley, Oct 2013.
[2] A. Bjorck. Numerical Methods for Least Squares Problems. SIAM Philadelphia, 1996.
[3] Leibniz Supercomputing Center.
http://www.lrz.de/services/compute/supermuc/
systemdescription/.
[4] J. Demmel, L. Grigori, M. F. Hoemmen, and J. Langou. Communication optimal parallel and
sequential qr and lu factorizations. Technical Report UCB/EECS-2008-89, LBNL, 2008.
[5] J. W. Demmel. Applied Numerical Linear Algebra. SIAM, 1997.
[6] E. Elmroth and F. Gustavson. A faster and simpler recursive algorithm for the lapack routine
dgels. BIT, 41(5):936–949, 2001.
[7] G.H. Golub and C.V. Loan. Matrix computations. John Hopkins University Press, 3 edition, 1989.
[8] A. Grama, A. Gupta, G. Karypis, and V. Kumar. Introduction to Parallel Computing. Pearson
Addison Wesley, 2003.
[9] M. Hoemmen. Communication avoiding Krylov subspace methods. PhD thesis, U. of California,
Berkeley, 2010.
[10] Intel. Intel icpc compiler. https://software.intel.com/en-us/c-compilers.
[11] Intel. Mkl 11.1. https://software.intel.com/en-us/intel-mkl.
[12] Fraunhofer ITWM. Gpi2. http://www.gpi-site.com/gpi2/.
[13] P. Kumar. Communication optimal least squares. 16th HPCC. Paris, 2014.
[14] C. L. Lawson and R. J. Hanson. Solving Least Squares Problems. SIAM, Philadelphia, 1995.

1847

