Procedia Computer Science
Volume 51, 2015, Pages 2913–2922
ICCS 2015 International Conference On Computational Science

CFD post-processing in Unity3D
Matthias Berger1,2 and Verina Cristie2
1

2

ETH Zürich, Zurich, Switzerland.
Future Cities Lab, SEC, Singapore.
{mberger, verina}@arch.ethz.ch

Abstract
In architecture and urban design, urban climate on is a strong design criterion for outdoor thermal
comfort and building’s energy performance. Evaluating the effect of buildings on the local climate and
vice versa is done by computational fluid dynamics (CFD) methods. The results from CFD are typically visualized through post-processing software closely related to pre-processing and simulation software. The built-in functions are made for engineers and thus, it lacks user-friendliness for real-time
exploration of results for architects. To bridge the gap between architect and engineer we propose visualizations based on game engine technology. This paper demonstrates the implementation of CFD to
Unity3D conversion and weather data visualization.
Keywords: CFD post-processing, Unity3D, urban climate, urban designs, visualization

1 Introduction
Urban planning is nowadays an interdisciplinary endeavor, as shown by ETH Zürich’s Future Cities Laboratory*, the Centre for Liveable Cities in Singapore†, or the British Future Cities Catapult‡.
Visualizations and models have been the channel of choice for communication in architecture. With
the interdisciplinary input from citizens, engineers, politicians and other experts, relying on a visually
oriented language as the common denominator is becoming crucial for the effectiveness of the interdisciplinary approach (Grêt-Regamey et al., 2013; Pettit et al., 2012).
One field of input to urban planning is coming from joint efforts in computational science, engineering and urban climate studies: The advancement of computational power in combination with reduced operating costs in the last two decades enabled computational fluid dynamics (CFD) methods to
enter urban climate studies on meso scale, with resolution of 500m – 25km, and micro scale, with resolution of 10cm – 10m (Ashie and Kono, 2011; Mochida et al., 1997). There is still an upper limit of
available resources for meso scale simulations, which often prefers isothermal Lattice Boltzmann

*
†
‡

www.futurecities.ethz.ch
www.clc.gov.sg
futurecities.catapult.org.uk

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.476

2913

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

methods with focus on wind flow over more complex turbulence models due to significant less computational time (Miao and Shen, 2014).
Several researchers have already pointed out the difference in requirements of engineering visualizations for engineers only compared to interdisciplinary (or non-expert) stakeholders (Stone et al.,
2014). Existing engineering visualization tools such as ParaView§, Tecplot 360**, or ANSYS Fluent††
are lacking of user-friendliness for those outside the domain. Suggested was a user-centric focus by
implementing game-like environments (Greenwood et al., 2009), or directly employing game engines
like Unity3D (Indraprastha and Shinozaki, 2008, 2009; Stojanovic et al., 2014). The object of visualization is multi-dimensional data, and as Donalek et al. highlight, it is not about raw (or big) data, “it is
about discovery and understanding of meaningful patterns hidden in the data” (2014). A different approach on interactive visualizations can be described as computer aided drafting (Pauwels, 2014),
where interoperability is the challenge. Tools for stakeholders can help stakeholders to understand
complex scientific aspects (Berger, 2012; Grêt-Regamey et al., 2013), and furthermore help researchers to study the stakeholder (Prendinger et al., 2013).
Our goal was to provide a visualization tool called CFDtoUnity3D based on CFD simulation results from professional engineering software. This tool is to be differentiated from visualization tools
for architects based on visual correlation of epiphenomena, like in the ‘Specialist Modelling Group’ of
Foster + Partners or the space syntax framework by Hillier (Hillier and Hanson, 1984). Unity3D has
several benefits over proprietary CFD post-processing software: 1) it does not require a license to execute, 2) it is platform independent, 3) can be used web-based or on tablets, 4) is optimized for visual
performance, and 5) does not require expert knowledge and skills to run. It is then open to all kinds of
stakeholders on a multitude of devices consequently. On the downside, the features for analyzing CFD
results in established post-processing software have to be adapted to Unity3D and coded from scratch.
The results in Unity3D are far less accurate than established post-processing software, but an architect,
urban designer or planner will get much more qualitative performance insight of a specific design. One
do not need to worry about minimizing uncertainty of parameters (wind speed, temperature, etc.) for
any given point in the simulation.
A true design cycle including CFD would be out of sync for a real-time visualization due to extensive computational needs of CFD. However, the CFDtoUnity3D tool shall enable a rapid analysis cycle as in (Birch et al., 2013). The post-processing commonly done in CFD can be as complex as the
actually numerical simulation, especially for visualizing the streamlines of wind flow (McLoughlin et
al., 2010). In their excellent review paper McLoughlin et al. emphasize the problems resulting from
computational time and irregular grids on the data side as well as visual clutter and occlusion when
visualizing in 3D.

2 Methodology
2.1 Visualization workflow
Our input consists of 3D building models and its CFD simulation. Buildings were modeled with
3dsMax or Rhino and imported to Unity3D using the .obj or .fbx format. CFD simulation results were
exported to text format (.txt or .csv) from ANSYS Fluent. Temperature, humidity, and pressure data
was preprocessed into 3D spatial data structures so that it will be easier to be used during interactive
exploration. Unity3D finally will do the rendering to be shown on display(s) and the user will be able

§

http://www.paraview.org
http://www.tecplot.com/products/tecplot-360/
††
http://www.ansys.com/Products/Simulation+Technology/Fluid+Dynamics/Fluid+Dynamics+Products/ANSYS+Fluent
**

2914

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

to interact and navigate through the environment by using a controller. Figure 1 provides a flowchart
showing the implementation of our tool.

2.2 Pre-processing and rendering
Pre-processing
ANSYS Fluent produces mesh and nodes in the simulation space with irregular distances from each
other. The number of nodes nearer the building geometry compared to the number of nodes in the
spaces where there is no geometry like sky or corners of the simulation space is higher. In our study
case we use existing CFD simulations (Papadopoulou et al., 2015; Vernay et al., 2015) and 3D-models
generated by Lidar and aerial photogrammetry (Gruen, 2013) of the CREATE Tower within University Town campus in Singapore (1°18'14.5"N 103°46'25.1"E). The simulation space from CFD extends
to 2.0×1.2×0.3 km with approximately 14 million nodes. It employs hexahedral mesh with minimum
cell size of 5cm. Steady RANS equation in combination with the Realizable k-epsilon model is used to
describe the turbulent flow. Four simulations are executed with specific wind directions occurring in
Singapore. A logarithmic wind speed profile is used at the inlet with a wind speed of 3.5 m/s at 16m
heights.

Figure 1: Flowchart of the CFD data visualization. On the input side in red there is the scenery and in green
the numerical results of the CFD simulation. Blue represents the processing around the Unity3D game engine and
orange is the communication between visualization and user.

Pre-processing is done to divide nodes into spatial data structures such that accessing information
of temperature, pressure, and humidity given a position in the space becomes easier. The most
straightforward method is to divide the space into a regular grid (in k×l×m). The grid resolution is decided such that the size of each cell is (space length/k × space width/l × space height/m). Given a specific position in which we want to know what the temperature, pressure, or humidity value is, we

2915

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

could just divide it by the grid resolution to find its index in each X, Y, and Z-axis. The grid resolution
therefore corresponds to the level of detail. If the grid resolution is too big, there will be lack of details
– each cell encompasses a too big space. Conversely, if the grid resolution is too small, we will have a
lot of details yet it will consume much computer memory and reduce the interactivity frame rate of the
program. As some of the cells will be empty during conversion from mesh to grid due to unequal distribution of the nodes in the space, we apply linear averaging from surrounding data points to fill up
empty cells. The grid is saved in the three-dimensional array structure of C#.
We decided to introduce a second data structure – octree (Meagher, 1980). Octree data structures
allow subdivision of space to into eight regular children spaces. This means that we are able to use
bigger octrees for space where there are not many nodes, and use smaller octrees (subdivided octree)
on the space near the buildings. This will allow more level of details near the building. If there is any
empty node, the values could be interpolated based on the other children octrees on the same space. In
our implementation, the .xml format is used to store the octree after pre-processing due to natural tree
structure the .xml format has, making the file easily readable. The user has to define the smallest octree
size, which is the opposite of the normal procedure. Each level we go up will increase the cell size by
factor two (or cell volume by factor eight). We are to find the maximum node size such that it can encompass the whole simulation space. If needed, empty space is added to the dimensions of the simulated space from CFD to return integer values of space. Once done, we can start to construct our octree using the given data. Each of the processed octree cells contains information of center, (octree-)
level, temperature, pressure, and humidity.
Rendering & Lightmapping
Like other game engines, Unity3D is also able to support lighting and rendering systems. Unity3D
provides graphics classes and renderer classes with its own line and mesh classes for visualization. We
use the GL-class that provides a low-level graphics library capable to issue commands similar to
OpenGL. Given the raw text data then we construct triangles and planes for visualization. Unity3D
provides the Update() function where each point will be updated after certain frame rate for animation.
Since the building is static, lighting are precomputed and saved into Unity’s Lightmap so that it will
not consume computer resource during runtime and a frame rate supporting interactivity is achievable.
We explicitly decided not to use surface textures of buildings and terrain unlike others (Piga et al.,
2013; Wang et al., 2010), to preserve a clear view on the simulation results.

2.3 GUI and interaction
Navigation
To enable interactive exploration, we allow the user to have two navigation modes: Walkthrough
(see Fig. 5 right) and Helicopter (see Fig. 5 left) mode. In Walkthrough mode, we have four degree of
freedom for exploration: right-left movement, forward-backward movement, turning left-right (yaw),
and tilting upward-downward (pitch). The Helicopter mode allows one more degree of freedom, upward-downward movement.
Map Functionality
We also provide map functionality in which the user can have an overview of the whole building
landscape (as in Fig. 2). User’s position is marked by a red arrow on the map. A small map is shown
on the top right of the screen to give user awareness of the immediate surroundings. The zooming level of surrounding map can be adjusted from the Settings panel. To have an overall view, users can
choose to maximize the map. Top down view of the whole area can be shown on the full screen (see
Fig. 2 right). On this screen, user is able to perform two operations: teleport (1) – such that user can
immediately access place that he/she wants to focus out of the entire landscape, and measurement (2)
– such that the user can correlate what they see with actual measurement (in meters). In addition, we
also provide cursor positions at the center of screen such that user is able to measure actual height of

2916

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

building in meters. This is done by using the ray casting from the center of camera to center of screen
to know where the ray hit the building, and hence the height could be calculated.

Figure 2: CFDtoUnity3D GUI (left). Map functionality in maximized zoom mode (right).

Settings
The user is also allowed to choose certain options or visualization modes that he/she wants to see
in the Settings panel (see Fig 2 left):
-

-

Scale Panel to give the actual data value corresponding to the color shown in visualization.
Positional Data Label to give information of wind speed, temperature, humidity, and pressure
value of the current position of user.
Visualization Option to choose what data visuals to be shown (wind streamlines/ temperature/
humidity/ pressure). Only one data type can be seen at one time. Wind animation can be played
concurrently with other visualization options. Density level of static streamlines visualization is
also adjustable.
Navigation and Control Panel to provide user with navigational keys and controls information.
Once users are familiar with the keys, they can disable this panel.
Data Culling Mask to show data visualization on the top-down view map panel.
Global Movement activates same movement for all available screens while using multiple screens.
Global Settings activates same settings for all available screens.

3 Results
Wind Streamlines Tube
Both wind streamlines tube and wind animation are based on wind streamlines data from CFD
(streamline ID, Position, Time, and Speed as in Fig. 1). The tube is static (see Fig. 3 left) and time information is not used. A procedural mesh generation method is being used to generate 3D tube like
mesh from each line. The radius of the tube should not be too small avoiding streamlines to look like
fine hair lines, neither it should be too big that lines will start overlapping and occlude each other. To
create tube, we create circle which center position is the streamline position and is perpendicular to the
streamline direction. Once the circles were generated at each point of streamlines, outer point of
neighboring circles are connected to form triangles and thus the tube surface is created.
Wind Streamline Animation
The wind position needs to be calculated dynamically on every time step in the animation based on
the given discrete data (see Fig. 3 right). Taking account of the curve nature of wind, we interpolated
points in between data points to get intermediate wind position. Catmull-Rom Splines are used to provide cubic spline with smooth tangent (Catmull and Rom, 1974). This resulted in streamline animation
that represents wind speed and direction at each point of time.

2917

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

Figure 3: Wind streamlines tunnel (left). Wind streamline animation (right).

Users are also allowed to set the number of waves to be visualized. Waves are produced at time interval, meaning that at each new wave, animation of streamline is run from the starting point. Setting a
higher number of waves allows better understanding of the wind movement in the overall simulation
area. The wind trail is generated using the LineRenderer class of Unity3D. Blue transparent texture is
passed to LineRenderer settings to give the effect of moving wind.
Wind Wavefront Animation
Wind wavefront animation (see Fig. 4) used the same points as generated by wind streamline animation. However, instead of drawing trails we are drawing a meshed plane. Initial points of the wind
streamlines are coming from a wind outlet at one end of the simulation area and will travel through the
area to the other opposite end. While the streamlines come from the same initial plane, the given wind
ID from ANSYS does not come in regular sequences. Thus, we need to triangulate the initial points.
Delaunay (Delaunay, 1934) triangulation is applied to find the initial arrangement of the ID that
makes up the triangles. The subsequence animation steps will then follow the same triangle sequence.
As the wind moves, however, points will move possibly too far from each other and triangle size becomes too big. We stopped drawing these artifact triangles, as the focus is the wave front of the wind.
This is a compromise between understandability and accurateness. In many other simulation cases the
tail of a turbulence or vortex would be of higher interest and hence our methodology not applied. The
color of the points will change according to the speed information extracted from ANSYS data. Using
this wave front animation, one can clearly see how the wind plane transformed when the wind first
touched the building surface and subsequently as it travels through the buildings.

Figure 4: Wind wavefront animation movement at different time steps.

Pressure & Humidity Plane
To overcome depth perception, visibility and occlusion issue, we allow dynamic exploration such
that temperature, pressure, or humidity data are presented in a plane that is always facing the user (see
Fig. 5). Given the user’s position in 3D space, the forward vector is calculated. Users are allowed to
scroll in and out to adjust the distance to the plane. We set the plane width to span across the building.
Once we have calculated the orthogonal line on the ground (base of the plane), we then sample points

2918

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

along the line to find temperature and other information of this point from our spatial data structure.
By expanding it to the Y-direction, we can then get the points needed to draw the plane.

Figure 5: Pressure plane viewed from Helicopter mode (left). Temperature plane viewed from Walkthrough
mode (right).

4 Discussion
Multiple Screens with Controller
We presented our early prototype to a group of architects and researchers and one of the valuable
feedbacks we received was to have different images to compare so that user will be able to infer meaningful insight from the data. This resulted in multiple screens implementation of CFDtoUnity3D. Possible combinations that can be done on multiple screens: (1) Same building with same data on all
screens, with different positioning/ different settings on each screens; (2) Same building with different
data (example: same building with different wind directions); (3) Different building with different data
(example: buildings that are different in their geometries – we can see the difference it will cause to
the wind direction). Additional functionality could be exploited by using multi-touch surface screens
(Chen and Schnabel, 2011).
In our initial testing with our 35 megapixel video wall (8k in 4x4 2k screens) driven by an Intel®
Xeon® CPU E5-2687w @3.10GHz dual processor, 32GB RAM, four Nvidia Quadro K5000, an interactive frame rate at >10fps is achievable when we created less than ten visualization windows. The
multiple screen mechanism is implemented using Client-Server architecture on the same computer so
that each client can run the data independently. A default dialogue is initialized on program start on
the server screen. When our program is launched, the default dialogue (see Fig. 6 left) will prompt the
user to enter the number of screens which will be the clients. The user has to set data sources for every
screen. Once all the screens are launched, the user can select any of the screens to be controlled. Global movement and global settings can then be activated.

Figure 6: Default dialogue (left). User exploration of multiple screens using the Wii U Pro Controller (right).

2919

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

Lastly, as we want to enable the exploration in the most user-friendly way, we implemented the
Nintendo Wii U Pro Controller (see Fig. 6 right) as the navigational control in the environment. The
Settings panel also can be activated from the controller. We used JoyToKey‡‡, a shareware, to override
button controls of the controller, which is connected to PC using a USB adapter.
Since architect’s and urban planner’s understanding, behavior and feedback while exploring our
CFDtoUnity3D visualization tool should strongly influence the implementation, we plan extensive
user studies throughout 2015. Visual effects, appearance and features are subject to change and further
development.

5 Conclusion
In agreement with Chen and Schnabel (2011) we see the future of urban planning to be most likely
successful by opening up towards democratic and participatory design (Kunze et al., 2012). This can
be achieved through breaking the monopoly on information and knowledge, in our case held by architects and engineers, by an alternative approach on simulation and visualization. As we demonstrated
with the CFDtoUnity3D visualization tool exploration, navigation, and understanding can be enhanced
by game-like environments. This setup is empowering the user (or stakeholder of a design/ planning
process, which usually excludes engineers) to make informed decisions based on accurate CFD simulations by means of a representative and qualitative visualization.
Special attention has been put on the interface or communication channel, to use Shannon’s (1948)
words. Game controllers and multi-touch screens have been implemented as well as displays beyond
4k resolution in single and multiple screen view mode. Optimization of the computational performance by minimizing needs (e.g. memory) is ongoing, but on the other hand depending on the visualization platform. By using Unity3D we permit a wide range of devices to visualize the simulation results, and no commercial software license is required to run the application.
As the research is ongoing, user studies are done consecutively and expected to refine the functionality and visual appearance.

References
[1] Ashie, Y., Kono, T., 2011. Urbanscale CFD analysis in support of a climatesensitive
design for the Tokyo Bay area. International Journal of Climatology 31, 174-188.
[2] Berger, M., 2012. Urban heat-balling - A review of measures on reducing heat in tropical
and subtropical cities, in: Sheng, T.K., Hing, P. (Eds.). Sustainable Future Energy 2012 &
10th Sustainable Energy and Environment, Brunei Darussalam pp. 445-451.
[3] Birch, D., Kelly, P.H., Field, A.J., Simondetti, A., 2013. Computationally unifying urban
masterplanning. Proceedings of the ACM International Conference on Computing Frontiers.
ACM, p. 32.
[4] Catmull, E., Rom, R., 1974. A class of local interpolating splines. Computer aided geometric
design 74, 317-326.
[5] Chen, I.R., Schnabel, M.A., 2011. Multi-Touch: The Future of Design Interaction.
CAADFutures 2011 : Designing Together, Liège, pp. 557-571.
‡‡

2920

http://joytokey.net/en/

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

[6] Delaunay, B., 1934. Sur la sphère vide. A la mémoire de Georges Voronoï. Bulletin de
l'Académie des Sciences de l'URSS, Classe des sciences mathématiques et naturelles, No. 6:
793–800.
[7] Donalek, C., Djorgovski, S., Davidoff, S., Cioc, A., Wang, A., Longo, G., Norris, J.S.,
Zhang, J., Lawler, E., Yeh, S., 2014. Immersive and Collaborative Data Visualization Using
Virtual Reality Platforms. arXiv preprint arXiv:1410.7670.
[8] Greenwood, P., Sago, J., Richmond, S., Chau, V., 2009. Using game engine technology to
create real-time interactive environments to assist in planning and visual assessment for
infrastructure. 18th World IMACS/MODSIM Congress, Cairns, pp. 2229-2235.
[9] Grêt-Regamey, A., Celio, E., Klein, T.M., Wissen Hayek, U., 2013. Understanding
ecosystem services trade-offs with interactive procedural modeling for sustainable urban
planning. Landscape and Urban Planning 109, 107-116.
[10] Gruen, A., 2013. Generating a 3D Campus Model. GEOInformatics 16, 30-36.
[11] Hillier, B., Hanson, J., 1984. The social logic of space. Cambridge University Press,
Cambridge.
[12] Indraprastha, A., Shinozaki, M., 2008. Constructing virtual urban environment using game
technology. 26th eCAADe Conference: Architecture in Computro Antwerpen pp. 359-366.
[13] Indraprastha, A., Shinozaki, M., 2009. The investigation on using Unity3D game engine in
urban design study. Journal of ICT Research and Applications 3, 1-18.
[14] Kunze, A., Burkhard, R., Gebhardt, S., Tuncer, B., 2012. Visualization and Decision Support
Tools in Urban Planning. Digital Urban Modeling and Simulation. Springer, pp. 279-298.
[15] McLoughlin, T., Laramee, R.S., Peikert, R., Post, F.H., Chen, M., 2010. Over Two Decades
of IntegrationBased, Geometric Flow Visualization. Computer Graphics Forum. Wiley
Online Library, pp. 1807-1829.
[16] Meagher, D., 1980. Octree Encoding: A New Technique for the Representation, Manipulation
and Display of Arbitrary 3-D Objects by Computer. Rensselaer Polytechnic Institute
(Technical Report IPL-TR-80-111)
[17] Miao, H., Shen, J., 2014. Developing Three-Dimensional CFD City Model Based on Public
Accessible Information for Street-Level Wind Risk Assessment. 19th Australasian Fluid
Mechanics Conference, Melbourne.
[18] Mochida, A., Murakami, S., Ojima, T., Kim, S., Ooka, R., Sugiyama, H., 1997. CFD analysis
of mesoscale climate in the Greater Tokyo area. Journal of Wind Engineering and Industrial
Aerodynamics 67, 459-477.
[19] Papadopoulou, M., Raphael, B., Smith, I.F.C., Sekhar, C., 2015. Optimal sensor placement
for time-dependent systems: application to wind studies around buildings. Journal of
Computing in Civil Engineering [under review].
[20] Pauwels, P., 2014. Supporting Decision-Making in the Building Life-Cycle Using Linked
Building Data. Buildings 4, 549-579.
[21] Pettit, C., Widjaja, I., Russo, P., Sinnott, R., Stimson, R., Tomko, M., 2012. Visualisation
support for exploring urban space and place. XXII ISPRS Congress, Melbourne.
[22] Piga, B.E., Cibien, L., Legnani, A., Mungo, S., Zappa, D., Signorelli, V., Morello, E., 2013. A
sense-archive of urban space. EAEA-11 conference 2013, Milano, pp. 251-258.

2921

CFD post-processing in Unity3D

Matthias Berger and Verina Cristie

[23] Prendinger, H., Gajananan, K., Zaky, A., Fares, A., Molenaar, R., Urbano, D., van Lint, H.,
Gomaa, W., 2013. Tokyo Virtual Living Lab: Designing Smart Cities Based on the 3D
Internet. IEEE Internet Computing 17, 30-38.
[24] Shannon, C. E., (1948). A Mathematical Theory of Communication. The Bell System
Technical Journal. p. 55.
[25] Stojanovic, V., Falconer, R., Blackwood, D., Paterson, G., Fleming, M., Bell, S., 2014.
Interactive visualisation of heat loss and gain for early-stage energy appraisal of the built
environment. Procs 30th Annual ARCOM Conference, Portsmouth, pp. 743-752.
[26] Stone, R., Guest, R., Pahl, S., Boomsma, C., 2014. Exploiting gaming technologies to
visualise dynamic thermal qualities of a domestic dwelling. BEHAVE2014 – Behavior and
Energy Efficiency Conference.
[27] Vernay, D.G., Raphael, B., Smith, I.F.C., 2015. A Model-based Data-interpretation
Framework for Improving Wind Predictions Around Buildings. Journal of Wind Engineering
& Industrial Aerodynamics [under review].
[28] Wang, S., Mao, Z., Zeng, C., Gong, H., Li, S., Chen, B., 2010. A new method of virtual
reality based on Unity3D, Geoinformatics. 18th International Conference on. IEEE, pp. 1-5.

2922

