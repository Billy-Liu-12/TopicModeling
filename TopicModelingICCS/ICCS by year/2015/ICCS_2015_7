Procedia Computer Science
Volume 51, 2015, Pages 2698–2702
ICCS 2015 International Conference On Computational Science

A Formal Method for Parallel Genetic Algorithms∗
Natalia López, Pablo Rabanal, Ismael Rodríguez, Fernando Rubio
Facultad Informática. Universidad Complutense de Madrid. 28040 Madrid, Spain
natalia@sip.ucm.es,prabanal@fdi.ucm.es,isrodrig@sip.ucm.es,fernando@sip.ucm.es

Abstract
We present a formal model that allows to analyze non trivial properties about the behavior of
parallel genetic algorithms implemented using multi-islands. The model is based on a probabilistic labeled transition system, that represents the evolution of the population in each island,
as well as the interaction among diﬀerent islands. By studying the traces these systems can
perform, the resulting model allows to formally compare the behavior of diﬀerent algorithms.
Keywords: Genetic Algorithms, Multi-islands, Formal Methods, Labeled Transition Systems

1

Formal Model

In this paper we deﬁne a probabilistic labeled transition system to allow the speciﬁcation and
systematic study of the parallelization of genetic algorithms (GA) [1]. We assume that the
GA is parallelized by splitting the total population of individuals (chromosomes) into diﬀerent
subsets and mapping each subset to a diﬀerent processor, where each subset will independently
evolve for some number of iterations. Each of these divisions is a parallel island. However, after
some iterations, chromosomes of diﬀerent islands inﬂuence each other, which allows islands to
converge to a common solution. The goal of our probabilistic formal method is modeling this
type of evolutive parallel algorithm.
Deﬁnition 1.1. A probabilistic labeled transition system (PLTS) is a tuple (S, Act, →
− ) where S
is a set of states; Act is a set of actions; and →
− ⊆ S × (Act × [0, 1]) × S is the set of transitions.
For convenience, we will use the notation s −−α→ p s , instead of (s, (α, p), s ), to express that,
with probability p, the state s evolves to state s after performing the action α. In a GA,
each state of a PTLS represents a population (a set of chromosomes), the actions represent the
diﬀerent ways that the GA can evolve, and the probability associated with the transition will
denote the probability that the GA takes this transition instead of any other of the available
transitions from the starting state of the transition. For the sake of simplicity, sometimes the
transitions with probability 1 will be denoted without the probability.
∗ This research has been supported in part by the CICYT project TIN2012-39391-C04-04 and the CAM
project S2013/ICE-2731.

2698

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.389

A Formal Method for Parallel GAs

L´
opez,Rabanal,Rodr´ıguez and Rubio

Deﬁnition 1.2. A chromosome (or individual) is deﬁned as (c1 , c2 , · · · , cm ) ∈ Zm a m-tuple
of integers that represents the individual genetic information. We denote by Q the set of all the
possible individuals (x1 , x2 · · · to range over Q).
A population is deﬁned as a multiset {| x1 , · · · , xn |} of individuals. We assume that Pop
denotes the set of all the possible populations.
Deﬁnition 1.3. A genetic algorithm state is deﬁned by a tuple of elements GA = (pop, nS, nG)
where pop = {| x1 , · · · , xn |} ∈ Pop is the actual population of the GA; nS is the number of
individuals of the population that will be selected in each selection stage; and nG is the number
of remaining generations (iterations) to ﬁnish the execution of the GA. We use S to denote the
set of states of a GA.
Once the states of a PLTS are deﬁned, we must deﬁne the actions. The set of actions
consists of:
• The initialization action, denoted by init, that produces an initial population.
• The evolution action, denoted by evol, that produces a new generation (a new population)
based on two consecutive actions:
– The selection function, denoted by f itSel, that applied to a population, returns a set
of pairs. Each pair consists of a sorted population of individuals and the probability
of selecting that sorted population. The order given will be used to choose the way
the individuals of the population are crossed in the reproduction.
– The reproduction function, denoted by reprod, that, applied to a pair of individuals,
returns a multiset of individuals where the initial pair is included (the parents), and
the other pairs are their oﬀspring.
• The stop action, denoted by stop. This action will be performed to ﬁnish the evolution
process, when no more actions can be performed. When it is executed, the state reached
will be a special state where the only relevant part is the multiset of individuals (that
will represent the population of solutions reached by the GA). The number of remaining
generations will be 0.
Therefore the set of actions of a GA will be Act = {init, evol, stop}.
Before deﬁning the rules of the evolution of a GA, we need to deﬁne a simpler PLTS to
deﬁne the behavior of the reproduction action. This action also needs two auxiliary functions
crossOver and mutation, deﬁned below.
Deﬁnition 1.4. Let P op2 ⊆ P op be the set of multisets of individuals with multiplicity 2 (that
is, each multiset contains either two diﬀerent individuals or two instances of the same individual)
and let act = {reprod} be a set with a single action. We deﬁne the PLTS of the reproduction
of pairs of individuals as the tuple (P op, act, −−→ ) where −−→⊆ P op2 × (act × (0, 1]) × P op is
described in Table 1.
The deﬁned PLTS will use a function crossOver : Q × Q −→ P(P op × [0, 1]) that will deﬁne
how the crossover will be done in the GA. Depending on how this function is deﬁned, the function
will return a diﬀerent number of children. Besides, a function mutation : Q −→ P(Q × [0, 1])
will deﬁne how to carry out mutation in the GA. This function will be applied to an individual
and it will return a set of pairs of the form Q × [0, 1] that will denote that the former individual
2699

A Formal Method for Parallel GAs

L´
opez,Rabanal,Rodr´ıguez and Rubio

(∅,p)∈crossOver(x1 ,x2 )
{| x1 ,x2 |}−
−−−−→p {| x1 ,x2 |}
reprod

(Reprod1)

({| y1 ,··· ,yr |},p)∈crossOver(x1 ,x2 ), (zi ,qi )∈mutation(yi ),1≤i≤r
{| x1 ,x2 |}−
−−−−→p·Π1≤i≤r qi {| x1 ,x2 ,z1 ,··· ,zr |}
reprod

(Reprod2)

Table 1: Rules for the reproduction of a pair of individuals

mutates into some individual with the associated probability. In particular, we will consider
that (y, p) ∈ mutation(x) if and only if x mutates into y with probability p.
The rules that appear in Table 1 describe the reproduction of two individuals, where the
crossover and the mutation are performed. Each pair of individuals has two options: either
crossing over or not. In the latter case, there is nothing else to do. However, if individuals
are crossed, the progeny can also either suﬀer a mutation or not. The ﬁrst rule of the table
represents the case where there is no crossing. In this case, the individuals remain the same.
The second rule represents the reproduction of two individuals, where the crossover is the former
action and, after that, some mutations can be suﬀered by the oﬀspring.
The evolution of the population represents the evolution of the whole set of individuals of
the population. The PLTS used to describe the behavior of a whole population is deﬁned as
follows.
Deﬁnition 1.5. The genetic algorithm evolution is denoted by a PLTS (S, Act, →
− ) where S
is the set of states of the genetic algorithm, Act is the set of actions {init, evol, stop}, and the
transition →
− ⊆ S × (Act × (0, 1]) × S is deﬁned by the rules in Table 2.
The value nM axGen, appearing in the ﬁrst rule, represents the maximum number of allowed
generations (it has to be previously ﬁxed).
In the last two rules, the predicate
termination(s, nS, nG) will return true if the state satisﬁes the optimality criterion in the
reached solutions or if the number of remaining generations is 0, and it will return false in the
other case. This predicate, nM axGen, and the functions mutation : Q −→ P(Q × (0, 1]) and
crossOver : Q × Q −→ P(P op × (0, 1]), previously presented, will be deﬁned depending on the
speciﬁc GA that will be modeled.
In Table 2, the ﬁrst rule represents the initialization of the GA. The function init : P(Pop ×
(0, 1]) will produce a set of pairs of population and probability {(pop1 , p1 ), · · · , (popn , pn )}
where popi ∈ Pop, pi ∈ (0, 1], and ni=1 pi = 1. Each pair (pop, p) of the set represents that
the population pop will be created with probability p. Therefore, this ﬁrst rule represents that,
from the initial state, the process can evolve into a initial population pop given by the function
init with probability p, considering that (pop, p) ∈ init. Besides, the number of remaining
generations is set to the maximum, that is, nM axGen. After each evolution step (last rule), this
number decreases by 1. The second rule represents the situation in which no more evolutions can
be performed because either the state satisﬁes the required criterion or because the remaining
generations are 0. In both cases, the only action able to be performed is stop.
The last rule represents the GA evolution. This evolution is possible only if the number of
remaining generations is greater than 0 and a state with the required optimality has not been
reached (it is checked by the termination function). In each evolution process, a selection of
the best individuals in terms of ﬁtness, a crossover between individuals, and the mutation of
some of them will be done. Assuming that lists(A) denotes the set of all possible sorted lists of
2700

A Formal Method for Parallel GAs

L´
opez,Rabanal,Rodr´ıguez and Rubio

termination(pop,nS,nG)

(pop,p)∈init

stop

(∅,nS,0)−
−→p (pop,nS,nM axGen)
init

(pop,nS,nG)−
−−−→ (pop,nS,0)

¬termination({| x1 , · · · , xn |}, nS, nG) ∧ ([z1 , · · · , znS ], p) ∈ ﬁtSel({| x1 , · · · , xn |}, nS) ∧
reprod

0 < i ≤ nS div 2, {| z2i−1 , z2i |} −−−−−→ pi {| yi1 , · · · , yini |}
({| x1 ,··· ,xn |},nS,nG)−
−−−→(Πpi )·p ({| y11 ,··· ,y1n1 ,··· ,yr1 ,··· ,yrnr |},nS,nG−1)
evol

Table 2: Evolution of the GA rules

s1 −
−−−→p s1 , s2 −
−−−→q s2
evol

evol

s1 s2 −
−−−→p·q s1 s2
evol

s1 −
−−−→p s1 , termination(s2 )

termination(s1 ), s2 −
−−−→q s2

evol

evol

evol

s1 s2 −
−−−→p s1 s2

evol

s1 s2 −
−−−→q s1 s2

termination(s1 ), termination(s2 ), ¬iteration(s1 ,s2 )

termination(s1 ), termination(s2 ), iteration(s1 ,s2 )

s1 s2 −
−−−→s1 s2

evol

stop

s1 s2 −
−−−→r s1 s2

where s1 = (pop1 , nS, nG1 ), s2 = (pop2 , nS, nG2 ), (pop1 , pop2 , r) ∈ exch(pop1 , pop2 )
s1 = (pop1 , nS, nM axGen), s2 = (pop2 , nS, nM axGen)

Table 3: GA parallel evolution rules

individuals of the set A (in which each individual can appear any number of times), the function
ﬁtSel : Pop × IN −→ P(lists(Pop) × (0, 1]) will assign a probability to each way of sorting the
individuals of a given population considering their ﬁtness values. In particular, the algorithm
will consider that the pairs of parents to be crossed will be pairs of consecutive individuals
of the list: the ﬁrst one with the second one, the third with the fourth, and so on. Some
individuals could appear more than once if they are chosen more than once to be parents. So,
m
we have ﬁtSel({| x1 , · · · , xn }| , nS) = {(listpop1 , p1 ), · · · , (listpopm , pm )} where i=1 pi = 1. All
lists will contain nS individuals. Therefore, the function will return a set of pairs of the list of
individuals and probability, where (listpop, p) ∈ ﬁtSel({| x1 , · · · , xn |}, nS) represents that with
probability p the list listpop will be chosen (which will contain nS instances of individuals).
Once the GA evolution is deﬁned, we formalize a similar evolution process for independent
populations that evolve in parallel. For the sake of simplicity, initially we present a case where
two independent islands exist. First of all, such islands evolve in parallel without any communication, until they reach local termination states. When this happens, both populations
interchange some individuals, and then the independent evolution of both islands restarts.
The result of the parallel composition of two systems deﬁned by the PLTSs A1 = (S1 , Act, →
− 1)
and A2 = (S2 , Act, →
− 2) is a new PLTS A1 A2 = (S1 × S2 , Act, →
− ). Instead of representing their
composed states with the form of a pair (s1 , s2 ) ∈ S1 × S2 , we use s1 s2 to represent them.
The transitions in →
− are inferred by the rules given in Table 3.
The ﬁrst rule in Table 3 deﬁnes the parallel evolution of two populations. The following two
rules represent the situation when one population can evolve independently while the other one
has just reached its local termination condition. In this case, the island that can evolve will do
it, meanwhile the other island waits until both of them ﬁnd their local termination condition.
The fourth rule represents the situation when both populations have ﬁnished their independent
evolutions. In such situation, both can continue their evolution once they exchange some of
2701

A Formal Method for Parallel GAs

L´
opez,Rabanal,Rodr´ıguez and Rubio

their individuals and they restart their evolution process independently again. The exchange
and the restarting can be performed only if the predicate iteration(s1 , s2 ) is fulﬁlled. This
predicate controls the ﬁnalization of the parallel evolution of the two islands.
The function exch is deﬁned as follows:
Deﬁnition 1.6. Let pop1 , pop2 ∈ Pop. The function exch : Pop×Pop −→ P(Pop×Pop×(0, 1])
m
m
is deﬁned as exch(pop1 , pop2 ) = {(pop11 , pop12 , p1 ), . . . , (popm
1 , pop2 , pm )} where
k=1 pk = 1
k
k
k
k
and, for all 1 ≤ k ≤ m, pop1 ∪ pop2 = pop1 ∪ pop2 and |pop1 | + |pop2 | = |pop1 | + |pop2 |.
Next we deﬁne the behavior of a GA, this time considering the eﬀect of several steps of
execution together. A sequence of execution steps will be called trace.
Deﬁnition 1.7. Let us consider the PLTS of a genetic algorithm evolution E = (S, Act, −→).
Let s ∈ S be a state and let ρ ∈ Act∗ be a sequence of actions. ρ = α1 · · · αr with α1 , · · · , αr ∈
Act.
ρ
We say that E produces the trace (∅, nS, 0) ==⇒ p s if there exist s1 , · · · , sr ∈ S and
α2
αr
α1
p1 , · · · , pr ∈ (0, 1] such that Πri=1 pi = p and (∅, nS, 0) −−→
−→
−→
p1 s1 −
p2 · · · sr−1 −
pr sr = s .
A trace is complete if αr = stop and s = (pop, nS, 0) with pop ∈ Pop.
By making the probability of a trace be the multiplication of the probabilities of each step of
the trace, our model allows to calculate the probability of a GA to obtain a population through
some given path. Moreover, by adding the probabilities of all the traces that reach the same
population, we can obtain the probability of a GA to ﬁnalize its execution producing a given
population. Using the same idea, we can add the probability of all the populations where the
best individual is a given one, and compute the probability of a GA to return, as a ﬁnal result,
a given individual.
Deﬁnition 1.8. Let us consider the PLTS of a genetic algorithm evolution E = (S, Act, −→).
We deﬁne the probability of E to perform an execution to reach a population pop ∈ P op as:
ρ
probpop = {| p | ∃ ρ : (∅, nS, 0) ==⇒ p (pop, nS, 0) |}.
Let best : Pop −→ Q be a function such that, for any pop ∈ P op, best(pop) is the individual
with the best ﬁtness value in pop. We deﬁne the set of ﬁnal populations where an individual q ∈ Q
ρ
is the best solution as: popsq = {pop|q = best(pop) ∧ ∃ ρ, p : (∅, nS, 0) ==⇒ p (pop, nS, 0)}.
We deﬁne the probability of the PLTS E to return at the end of its execution the solution q
as pop∈popsq probpop .
The aim of this formal model is to study how to prove that a particular set of conditions
(not shown due to lack of space) is enough to ensure that an evolutionary algorithm will
reach the same optimality when solving two diﬀerent NP-complete problems, which is a formal
continuation of our previous empirical studies about it [2]. These properties compare the
behavior of the algorithm for two given problems applying a polynomial reduction between
both, which necessarily exists, since both of them are NP-complete. Proving this property
helps us to know in advance whether some strategy will obtain good optimality results when
facing a new NP-complete problem, thus reducing the eﬀort needed to adjust GAs empirically.

References
[1] D.E. Goldberg. Genetic Algorithms in Search, Optimisation and Machine Learning. AddisonWesley, 1989.
[2] P. Rabanal and I. Rodríguez. Using polynomial reductions to test the suitability of metaheuristics
for solving np-complete problems. In SAC 2013, pages 194–199. ACM Press, 2013.

2702

