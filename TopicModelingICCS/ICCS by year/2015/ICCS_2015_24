Procedia Computer Science
Volume 51, 2015, Pages 2297–2306
ICCS 2015 International Conference On Computational Science

I-DCOP: Train Classification Based on an Iterative
Process Using Distributed Constraint Optimization
Denise M. V. Sato1, André P. Borges2, Peter Márton3 and Edson E. Scalabrin2
1
Federal Institute of Education, Science and Technology of Parana
Graduate Program in Informatics, Pontifical Catholic University of Parana, Curitiba, Brazil
3
Faculty of Management and Computer Science, University of Zilina, Zilina, Slovakia
denise.sato@ifpr.edu.br, {andre.borges, scalabrin}@ppgia.pucpr.br, peter.marton@fri.uniza.sk
2

Abstract
This paper presents an iterative process based on Distributed Constraint Optimization (I-DCOP), to
solve train classification problems. The input of the I-DCOP is the train classification problem modelled
as a DCOP, named Optimization Model for Train Classification (OMTC). OMTC generates a feasible
schedule for a train classification problem defined by the inbound trains, the total of outbound trains and
the cars assigned to them. The expected result, named feasible schedule, leads to the correct formation
of the outbound trains, based on the order criteria defined. The OMTC also minimizes the schedule
execution time and the total number of roll-ins (operation executed on cars, sometimes charged by the
yards). I-DCOP extends the OMTC including the constraints of limited amount of classification tracks
ant their capacity. However, these constraints are included iteratively by adding domain restrictions on
the OMTC. Both OMTC and I-DCOP have been measured using scenarios based on real yard data.
OMTC has generated optimal and feasible schedules to the scenarios, optimizing the total number of
roll-ins. I-DCOP solved more complex scenarios, providing sub-optimal solutions. The experiments
have shown that distributed constraint optimization problems can include additional constraints based
on interactively defined domain.
Keywords: Train Classification, Classification Schedules, I-DCOP, OMTC, DCOP.

1 Introduction
This paper briefly describes the train classification problem, a real-life problem originated from the
field of railways, and presents a process to generate classification schedules as a response for this
problem. Incoming trains received in the classification yard are split up into single cars [1] to form new
trains based on pre-defined criteria (i.e. destination) which defines the position of each car on the
outbound trains. A classification schedule describes the operations that all cars should perform to
complete the classification process.

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.391

2297

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

The classification process itself is essential to minimize the operational costs of the freight
transportation. Using this process, different trains (i.e. different final destinations) can share part of the
path. Then, eventually, the trains can be detached and follow their specific destination. A typical freight
car spends, an average, 62% of its lifetime in classification yards and only 6.6% in service [2]. Thus,
there is room for optimization on the classification process.
This optimization was pursued on [1], but searching for an optimal solution using an integer
programming approach. On this paper we chose to find a suboptimal solution for the same problem,
which is sometimes desired when facing real-life problems. Therefore the proposed solution uses an
iteratively process named I-DCOP, which executes the OMTC several times. Also, the OMTC is the
representation of the real problem as a DCOP, which is a framework to describe problems based on
constraints and distributed agents that provides solutions with a quality degree [3]. The solution is
obtained by the coordination of the agents defined for the problem. Each agent is associated to some
variables and should assign values for them and a cost function evaluates the possible solutions.
The constraints are defined by the train classification problem, such as time, travelling plans, sorting
requirements for the outbound trains, physical resources, etc. These constraints where considered on the
developed architecture. The validation of the proposed architecture was done using scenarios based on
real data provided by Swiss Federal Railways (SBB – from German Schweizerische Bundesbahnen).
The structure of this paper presents an overview of the train classification problem and related works,
a description of the developed architecture, the experiments and a discussion about the main results.

2 Related Work
Maue [1] provided a different vision about the train classification problem based on an algorithm
perspective. The next paragraphs show a consolidated version of the referenced works related to the
multistage sorting strategy, containing a brief description of each work. This paper considered only the
multistage sorting, which basically sorts the cars more than once in the classification yard and makes a
more efficient use of the physical resources. Daganzo et al. [4] analyzed three strategies for the multistage
sorting: sorting by block, sorting by train and triangular sorting with focus on service time. In other paper,
the same author described the methods sorting by train, sorting by block (simultaneous sorting), triangular
sorting and defined a convoy formation [5]. Dalhaus et al. [6] e [7] presented two papers about the topic.
He showed that the train marshalling problem is NP-complete considering the train sorting requirement is
based on cars with the same destination and the number of cars is former known. Dalhaus et al. [7] has
also analyzed the train classification problem in a hump yard based on the radix sort. The author described
how to define sorting requirements for the outbound trains using P-Q trees, aiming to minimize the number
of sorting steps (in general a NP-complete problem).
Stefano et al. [8] presented different train classification problems in a theoretical perspective. Gatto
et al. [9] defined an algorithm with linear execution time to solve real scenarios on hump yards using a
multistage sorting process and considering a limited number of classification tracks. Thus, Márton et al.
[10] combined integer programming with a simulation tool to validate the classification schedule
notation proposed. Finally, Maue [1] realized a survey about the main methods applied for the train
classification problem using an algorithm perspective. The schedule notation presented on these works
is used on the approach presented in this paper. Also, the experiments use the same real traffic data.
The related works mainly analyzed the common strategies and requirements for train classification
problem searching for possible optimizations. A common factor on the different approaches for
multistage sorting is the fact that most authors do not consider the order in which the cars arrive in the
classification yard, except for the approach proposed by Maue [1]. Using this practice, the arrival time
of the inbound trains does not influence the classification process, but there was a waste of the yard
resources. Thus, the works showed that the train classification problem is a NP-complete problem and
any algorithm perspective or solution should consider it. In this paper, we aimed to find a suboptimal

2298

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

solution for the train classification problem, which is desired when facing NP-complete problems,
considering the order the cars arrived on the yard. The main difference from the proposed approach in
comparison with the solution presented on [1] is the search for a suboptimal solution instead of an
optimal solution provided by the integer programming model.

3 Train Classification Problem
A train classification problem represents a set of inbound trains received into a classification yard
that should be rearranged into outbound trains according to an order criteria previously defined [1]. The
expected result of solving a train classification problem is called classification schedule, which describes
the classification process, i.e. the operations each car should perform in the yard.

3.1 Classification yard layout and operation
The typical layout of a classification yard (rail yard, marshalling yard) contains an area for the
classification process, named classification bowl (Figure 1). The classification process consists on
receiving the inbound trains into the receiving yard, where cars are uncoupled. After, cars of the inbound
train are pushed over the hump where each car is detached and sent to one of the classification tracks in
the classification bowl (accelerated by gravity) via a tree of switches. The action of the gravity
accelerates the cars because the yard feature a hump (a rise on the ground) by the end of the lead track.
The sorting strategy defines if the cars should be pushed over the hump more than once. Finally, after
the classification process is complete, the correct formed outbound trains are sent to the departure yard.
The classification process is essential to minimize operational costs of freight transportation and
maximize the use of the railway structure. It aims to rearrange inbound trains forming new trains, called
outbound trains, regarding to requirements such as travel plan, destination, etc. The classification bowl
could have different layouts, but the main structure, showed on Figure 2, is common in most of layouts.

Figure 1: Typical Classification Yard Layout

Figure 2: Common structure for
classification bowl

The classification process can use different strategies and sorting requirements. Gatto et al. [9]
presents a survey containing a selection of commonly used train classification methods based on an
algorithm perspective. In this paper, we used the multistage sorting, in which the cars are sent to the
classification bowl more than once. After the inbound trains are received from the reception yard, each
car is decoupled and pushed over the hump. Afterwards, the gravity force pushes each car to the tree of
switches, where each car is guided to a specific classification track, named roll-in operation. Then, an
engine collects all the cars waiting on a classification track, and sends it to lead track for a new roll-in
(pull-out operation). The classification process is called multistage sorting when is composed by an
initial roll-in followed by several sorting steps (pull-out followed by a roll-in).
The description of the operations each car should perform on the classification bowl is named
classification schedule, which is considered the expected result for a classification problem. The
operations are described as roll-ins and pull-outs. The roll-in operation defines the car to roll-in and the
classification track to send it. The pull-out operation is specified only by the classification track to be
pulled, because all cars on this track will be pulled-out.

2299

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

3.2 Classification Schedule Representation
The OMTC uses the notation proposed by [11] which describes a classification schedule based on
roll-ins and pull-outs represented by binary strings called bitstrings. The classification criteria defines
the order of each car in the outbound trains. For this paper, the sorting criteria uses an information named
type of a car. Each car has a numeric type, representing any common characteristic, for instance its final
destination. The cars should be ascendant ordered by its type in the outbound trains and it is assumed
that each type has at least one car. All inbound trains received into the yard composes the inbound
sequence of cars, which contains the cars with their types sorted by the arrival time. Hence, a feasible
schedule results on the formation of the outbound trains following these criteria.
The classification schedule describes the roll-in and pull-out operations that should be performed in
the yard. It contains a bitstring for each car, specifying the roll-in operations (with the destinationclassification track) and the pull-outs where the car is involved. Briefly, each bit indicates one
classification track and bit 1 represents the pull-out operation. For instance, in a given classification
ೣ
ೣ
schedule named ‫ܤ‬, ܾ ఛ will be referred to the bitstring assigned to the car ߬ ௫ . Let us considerܾ ఛ ൌ
ͳͲͳͲ, which indicates that the classification process will allocate four classification tracks using four
sorting steps. A classification process is composed by an initial roll-in (each car is decoupled and guided
to one classification track on the classification bowl) and plenty of sorting steps. The most right bit 0
represents the operation the car ߬ ௫ should execute on the 0th classification track on the first sorting step
(Figure 2), the most right bit 1 represents the operation the car ߬ ௫ should execute on the 1th classification
track on the second sorting step, etc. If the bit is equal to 1, then the car will be pull-out from the related
classification track. The car ߬ ௫ will be rolled-in to the 1th classification track (on the initial roll-in).
Then, it will be pulled-out on the second sorting step and guided to the 3th classification track (the next
bit 1). The car ߬ ௫ does not execute any operation on the first sorting step, because the first sorting step
will only affect the cars stayed on the 0th classification track. After that, the same car will be pulled-out
on the fourth sorting step. A more complete explanation about the notation is found in [11].
The bitstring notation for the classification schedule allows verifying and deriving feasible schedules
using bit operations and relations. Besides, it is possible to derive a classification schedule that
minimizes the total time of execution, by reducing the number of sorting steps, easily obtained by
operations using bitstrings [11]. The constraints involving bitstrings and these operations compose the
OMTC used to generate optimal and feasible classification schedules.

4 Architecture Overview
The Optimization Model for Train Classification (OMTC) is part of an iterative architecture
responsible for generating and simulating the classification schedules for a specific problem scenario.
OMTC is the representation of the classification problem as a DCOP, providing a formal definition
based on constraints. The DCOP framework was chosen because it distributes the problem among
different agents and their relations, an interesting option when facing complex problems with several
constraints. Furthermore, a DCOP provides a solution with a quality degree, which allows to generate
an optimized classification schedule that also minimizes the total number of roll-ins.
Different DCOP algorithms can solve a problem represented by this formalism. Formally, a DCOP
is composed by n variables ܸ ൌ ሼ‫ݒ‬ଵ ǡ ‫ݒ‬ଶ ǡ ǥ ǡ ‫ݒ‬௡ ሽ and each variable is related to an agent ‫ݔ‬௜ . A variable
has a domain both finite and discrete ‫ܦ‬ଵ ǡ ‫ܦ‬ଶ ǡ ǥ ǡ ‫ܦ‬௡ , respectively. Only agent ‫ݔ‬௜ is able to set a value to
‫ݒ‬௜ and also knows‫ܦ‬௜ . Each agent must choose a value ݀௜ to its own variable, so that ݀௜ ‫ܦ א‬௜ . The agent
of a DCOP has the same purpose of an agent on a Distributed Constraint Satisfaction Problem (DSCP),
first studied by Yokoo [12]. Each agent is responsible to define the value of his related variables,
considering the constraints of the problem and the variable domain. Also, the communication between
agents occurs by sending messages. The constraints of the problem are evaluated by a cost function, and

2300

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

also each possible value for a variable. The DCOP search mechanism finds optimal solutions based on
the defined cost function [3]. The DCOP approach was mainly chosen because the train classification
problem is a NP-complete real-life problem, as indicated on the related work review. On this cases,
finding an optimal solution with a quality degree is desired, because it is possible to define a suboptimal
solution consuming less computational effort.
An important consideration is that the OMTC defines the constraints between the cars using the
concepts described on [1], based on the concept of chains of cars. The chain decomposition, represented
by the chains derived from a train classification problem can be generated using the Greedy Chain
Decomposition (GCD) algorithm, also defined by Maue [1]. A chain basically represents a set of cars
that can remain on the same relative position which they arrived in the yard (cars already sorted).
OMTC defines the domain, agents, variables, cost functions (unitary and binary), which are needed
to solve the problem using traditional DCOP algorithms. The domain represents all possible bitstrings
for the cars from the inbound sequence, defined by the minimal number of sorting steps (݄௠௜௡ ) and
provided by the GCD algorithm. The domain is defined by the interval between ͳ and ʹ௛೘೔೙ . OMTC
defines one agent for each output train the problem should form. Each car from the inbound sequence
is represented by one variable, assigned to the bitstring representing the operations it should perform.
The OMTC uses a unitary and a binary cost function. The unitary cost function defines a cost value
for assigning one bitstring from the domain to a variable which represents a car. This function calculates
the total number of roll-ins the car will execute in the yard during the classification process. This was
chosen because it is a common practice to charge the total number of cars rolled over the hump. The
binary cost function represents the constraints to generate a feasible schedule for a classification
problem, based on the chain decomposition concept [11]. Cars of the same chain can be assigned to the
same bitstring. Cars of the first chain can be assigned with bitstring ͳ, cars of the next chain (on this
case, chain 2) should be assigned to a higher bitstring. The OMTC generates an optimal and feasible
schedule that minimizes the total number of roll-ins for a classification problem defined by: number of
inbound cars, inbound sequence of cars with type, number of output trains and their highest car type.
Two distinguished process use the OMTC model to generate feasible schedules also considering
further restrictions: simple process and iterative DCOP process.

4.1 Simple Process
The simple process applies the OMTC to a problem scenario, considering only the constraints to
provide a feasible schedule minimizing the total number of roll-ins. This process automates the use of
the OMTC, as described on Figure 3. The input is the train classification problem and the output is the
classification schedule. The automation of the complete process contributed for the research, because
different scenarios could be easily added. The simple process automates the use of the OMTC, shows a
visual simulation of the classification schedule execution and outputs the classification schedule.

Figure 3: Simple process for the OMTC

2301

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

The simple process receives the instance of the classification problem as an XML input file. Each
tag of the XML file is described below:
•
Problem: contains the complete description of the train classification problem;
•
Inbound_seq: indicates the inbound sequence of cars, containing the number of cars (݊) and
the number of cars on the biggest inbound train (݊௠௔௫ attribute);
•
Cars: contains the description of each car on the inbound sequence.
•
Outbound_trains: indicates the number of the outbound trains (݉) and contains the higher type
of each outbound train (݄݄݅݃݁‫ ܩݐݏ‬attribute)
Each car from the inbound sequence is described by a tag containing its name (used on the
simulation). The type is informed on the type attribute and the out_train attribute contains the assigned
outbound trains for the car. The cars in the inbound sequence should appear in the XML ordered by the
arrival time. The problem should also contains the number of outbound trains.

4.2 Iterative DCOP Process
OMTC generates a classification schedule that (i) is feasible (results on the correct formation of the
outbound trains), (ii) minimizes the total time of the schedule by minimizing the number of sorting steps,
and (iii) minimizes the total number of roll-ins. However, these are not the only possible restrictions on
the train classification process. Another two important restrictions describes the physical structure of
the yard (resource constraints): limited amount of classification tracks and their capacity.
Including these two restrictions directly on the OMTC resulted on adding constraints related to all
variables of the model. Therewith, the OMTC has lost a characteristic of a DCOP, the possibility to
distribute the process of the constraints. Because of this, the OMTC containing these two resource
constraints could not solve scenarios based on real yard data (due to performance issues).
The solution adopted for this situation was include the OMTC in a different process, named Iterative
DCOP (I-DCOP) to include the classification track capacity constraint iteratively. Using the iterations,
it was chosen to have optimal local solutions and a suboptimal final solution. The motivation to
introduce the iterations was to find a strategy to subdivide the problem for dealing with all the constraints
and limitations of the real scenario. This new constraint is handled by iterating the OMTC generation
instead of including new relations directly into it, due to the performance issues already mentioned.

Figure 4: I-DCOP Process

Figure 4 shows I-DCOP process defining the inputs and outputs. The difference between the simple
process is the iterations executed each time the schedule exceeds the capacity of a track. The I-DCOP
was evaluated by two different approaches: partial or complete. The partial I-DCOP includes only the
track capacity restriction and adds more classification tracks if needed. The complete I-DCOP receives
this name because includes the main constraints of a real classification problem: feasibility, track
capacity and number of tracks. The difference between the partial I-DCOP is the condition to iterate,
which limits the number of tracks. If the process does not find a solution that fulfils all constraints, it
increases the capacity of the classification tracks (relaxed constraint) instead of adding new tracks.

2302

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

5 Experiments
In order to validate the OMTC we use scenarios based on real traffic provided by SBB, representing
one week of traffic on the Lausanne Triage in 2005. The instances of the classification problems,
summarized on Table 1, were used for the experiments concerning the simple process and the I-DCOP,
the difference remains on the resource constraints. In order to use the SBB real data, a pre-processing
step should have been done first: (i) filtering the cars from incoming trains which were classified for the
multistage sorting process, (ii) assign each filtered car to its outbound train by crossing the arrival time
and desired destination with the yard plan of departures, and (iii) exclude cars assigned to the
maintenance tasks. For the experiments, the time of each outbound train must departure from the yard
was not relevant, because it was considered only the classification process itself. Thus, the preprocessing step results on a slightly different number of outbound trains comparing to [1]. The scenarios
provide the complexity of the real problem which is reasonable for validating the proposed architecture.
Instance
Monday
Tuesday
Wednesday
Thursday
Weekend

# cars (݊) # outbound trains (݉)
486
329
310
364
368

24
24
25
25
27

Length of the greedy chain
decomposition (݇)
4
4
4
3
3

Chains (݇௧௢௧௔௟ )
46
42
44
41
47

Table 1: Summary of instances used on the experiments

To validate the partial I-DCOP, which includes only the capacity of the classification track
constraint, we combine the five instances from Table 1 with different track capacities ሾͶͲǡͷͲሿ, resulting
on 55 synthetic scenarios. The capacities were chosen based on the real capacity of the Lausanne Triage
(40 cars). For real scenarios, the planning of a yard generally is done daily because unexpected issues
can occur on the railway infrastructure, for instance train planning delays, infrastructure problems, etc.
The main optimization issue considered is the total time of the classification process, however the time
of planning is also considered as a second optimization issue. It is desired that the processing time of
planning has a threshold of 24 hours because of the daily planning procedure.
All the experiments were realized on a machine with 20480 MB of RAM memory, 8 CPUs (2 virtual
socket containing 4 cores on each socket) and 2 HD virtual disks (200 GB and 250 GB).

5.1 OMTC and simple process
We compare the simple process with the pure GCD algorithm [1] considering the number of sorting
steps (݄), which defines the total time of the process and the total number of roll-ins (represented by the
column Cost). As mentioned it is a common practice to charge the total number of cars rolled over the
hump (Table 2).
Comparing the GCD and the OMTC result on the simple process, we validate that both GCD and
OMTC generate the same number of sorting steps. The main issue to reduce the execution time of a
classification schedule is the number of sorting steps [1]. This comparison illustrates that the OMTC
minimizes the number of the sorting steps and also minimizes the total number of roll-ins. It is important
to note that on the GCD approach, the total number of roll-ins is not an issue, the algorithm just want to
generate a feasible schedule using the minimal sorting steps. Table 2 also includes the execution times
for the OMTC model, a second issue of optimization. The FRODO framework [13] provided the DCOP
algorithm execution time. The total time is the sum of GCD algorithm execution time, the automatic
generation of the OMTC, the DCOP algorithm execution time and the schedule complete simulation.
By the end of the simulation, the user can visualize the train formation on the output lines.

2303

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

Instance
Monday
Tuesday
Wednesday
Thursday
Weekend

݄
3
3
3
2
2

GCD
Cost
539
363
327
401
395

݄
3
3
3
2
2

Cost
490
338
311
401
395

OMTC
DCOP time (ms)
872
523
530
536
290

Total time (ms)
37444
17757
23978
21866
19437

Table 2: Results from OMTC (simple process)

5.2 Iterative DCOP
The metrics collected for the partial and complete I-DCOP processes include the number of sorting
steps (݄), the number of iterations and the processing time. The Monday scenario is more critical,
because it contains the higher number of cars (486) and the higher number of chains obtained from GCD
algorithm (4). The partial I-DCOP uses, on this scenario, 17 classification tracks resulting on a domain
composed by ͳ  ʹଵ଻ െ ͳ values for each variable. A single DCOP algorithm execution takes
approximately 25 minutes, resulting on a total time of approximately 37 hours. The graphic on the Figure
5 presents the reduction on the processing time as the classification track capacity is increased.

Figure 5: Processing time for Monday

Figure 6: Sorting steps X processing time Monday

Plotting the processing time of the OMTC versus the number of sorting steps ݄ (Figure 6), we can
see the exponential increase of the domain values and its relation to the increasing processing time.
OMTC faces performance problems after including the 17 th track. Figure 8 shows the relation between
the number of classification tracks and the different classification track capacities.

Figure 7: Processing time for remaining scenarios

2304

Figure 8: Number of classification tracks and the
different track capacities

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

The Wednesday scenario could fulfil the constraint of the Lausanne triage (10 classification tracks)
increasing just one car on the track capacity. It was necessary to remove the cost function that minimizes
the total number of roll-ins to generate the schedules for the partial I-DCOP.
The aim of the complete I-DCOP process was to generate a schedule for the five real instances of
problems, as similar as possible (for the proposed approach) with the reality. The five scenarios use the
constraints: maximum classification track capacity of 40 cars and 10 tracks. Table 3 shows a summary
of the experiments, but no instance fulfils all the constraints of the real yard. The column ‫ ܥ‬represents
the maximum capacity used in the classification tracks during the execution of the schedule.
Instance
# cars (݊) # sorting steps (݄) C
Monday
486
10
67
Tuesday
329
10
45
Wednesday
310
10
41
Thursday
364
10
46
Weekend
368
10
49
Table 3: Summary of the complete I-DCOP experiments

Total of iterations
589
172
59
178
212

Approx. Total Time (min)
89
13
4
19
18

Because the complete I-DCOP process limits the number of sorting steps, the total processing time
does not show a variation as high as on the partial I-DCOP. On the more complex scenario, the process
found a solution on about 89 minutes. In comparison to the approach proposed by [1], based on an
integer-programming model, the complete I-DCOP process needs higher capacities on the classification
tracks, because this process does not generate an optimal solution for the problem.
Maue [1] analyzes in more details a schedule generated for the Wednesday scenario. The generated
schedule needed only 9 classification tracks (using 5 sorting steps) and regards about the classification
track capacity limitation. However, the integer-programming model taken approximately 5.75 hour to
output the schedule. Because the I-DCOP process does not search for an optimal solution, the generation
of the schedule needs less computational effort. This scenario took about 89 minutes, approximately
25.8%, comparing with the integer-programming model. This comparison cannot be pragmatic
evaluated, because Maue [1] considers also constraints about the departure time of the trains and two
humps on the yard layout. But it indicates that the proposed architecture could bring some advantage
when facing complex real problems. OMTC and the developed simulator use a simplified yard layout,
containing only one hump. Therefore, the number of sorting steps (݄) also means the number of
classification tracks used by the schedule. This is different of the Maue’s approach, where the number
of sorting steps represents a half of the total number of classification tracks.

6 Conclusions
This paper proposed an iterative architecture to generate feasible classification schedules based on
distributed constraints. The experiments based on real data indicated the distributed constraint model,
called OMTC, meets its initial proposal, because it provided feasible schedules for the problem
instances. Using OMTC in the simple process, the schedule is also optimal (minimal number of sorting
steps) and minimizes the total number of roll-ins. However, the extended model including other
constraints such as number of classification tracks and capacity of classification track resulted in an
exhaustive search for solutions, representing many iterations to finalize the process. This occurred
because these constraints are related to all variables of the model. Therewith, the OMTC has lost a
characteristic of a DCOP, the distribution of the process of the constraints. Regardless, the iterative
architecture presented, named I-DCOP, showed promising to include these constraints iteratively. This
approach allows to split up the problem in iterations, each one responsible to find an optimal solution
for a part of the whole problem, contributing with a different perspective of adding constraints in a
DCOP. Moreover, on the scenarios based on the real data the OMTC was applied without the roll-ins

2305

I-DCOP: Train Classiﬁcation Based on an Iterative Process Using Distributed Constraint
Optimization
Denise Maria Vecino Sato, Andr´e Pinz Borges, Peter M´
arton and Edson E. Scalabrin

optimization. For these scenarios, the DCOP could also being replaced by a DCSP (Distributed
Constraint Satisfaction Problem), because the main difference between a DCOP and a DSCP is that a
DCOP provide solutions with a quality degree [3]. Finally, the experiments for the partial I-DCOP
process showed the DPOP algorithm behavior with higher domains (up to ʹଵ଺ values).

Acknowledgment
This paper was supported by the research grant APVV-0760-11 “Designing of Fair Service Systems on
Transportation Networks”.

References
[1] J. H. Maue, “On the Problem of Sorting Railway Freight Cars: An Algorithmic Perspective,”
Cuvillier Verlag, 2011.
[2] S. Kumar, Improvement of Railroad Yard Operations, McGraw-Hill, 2004.
[3] P. J. Modi, W.-M. Shen, M. Tambe e M. Yokoo, “An asynchronous complete method for
distributed constraint optimization,” em Proceedings of the second international joint
conference on Autonomous agents and multiagent systems, New York, NY, USA, 2003.
[4] C. F. Daganzo, R. G. Dowling e R. W. Hall, “Railroad classification yard throughput: The case
of multistage triangular sorting,” Transportation Research Part A: General, vol. 17, nº 2, pp.
95-106, 1983.
[5] C. F. Daganzo, “Static Blocking at Railyards: Sorting Implications and Track Requirements,”
Transportation Science, vol. 20, nº 3, pp. 189-199, 1986.
[6] E. Dahlhaus, P. Horak, M. Miller e J. F. Ryan, “The train marshalling problem,” Discrete
Applied Mathematics, vol. 103, pp. 41-54, 2000.
[7] E. Dahlhaus, F. Manne, M. Miller e J. Ryan, “Algorithms for Combinatorial Problems Related
to Train Marshalling,” em IN PROCEEDINGS OF AWOCA 2000, IN HUNTER VALLEY, 2000.
[8] G. D. Stefano, J. Maue, M. Modelski, A. Navarra, M. Nunkesser e J. van den Broek, “Models
for Rearranging Train Cars,” 2007.
[9] M. Gatto, J. Maue, M. Mihalák e P. Widmayer, “Shunting for Dummies: An Introductory
Algorithmic Survey,” em Robust and Online Large-Scale Optimization, vol. 5868, R. K. Ahuja,
R. Möhring e C. D. Zaroliagis, Eds., Springer Berlin Heidelberg, 2009, pp. 310-337.
[10] P. Márton, J. Maue e M. Nunkesser, “An Improved Train Classification Procedure for the Hump
Yard Lausanne Triage,” em ATMOS 2009 - 9th Workshop on Algorithmic Approaches for
Transportation Modeling, Optimization, and Systems, Dagstuhl, Germany, 2009.
[11] R. Jacob, P. Marton, J. Maue e M. Nunkesser, “Multistage methods for freight train
classification,” Networks, vol. 57, nº 1, pp. 87-105, 2011.
[12] M. Yokoo, T. Ishida, E. Durfee e K. Kuwabara, “Distributed constraint satisfaction for
formalizing distributed problem solving,” em Distributed Computing Systems, 1992.,
Proceedings of the 12th International Conference on, 1992.
[13] T. Léauté, B. Ottens e R. Szymanek, “FRODO 2.0: An Open-Source Framework for Distributed
Constraint Optimization,” em Proceedings of the IJCAI'09 Distributed Constraint Reasoning
Workshop (DCR'09), Pasadena, California, USA, 2009.

2306

