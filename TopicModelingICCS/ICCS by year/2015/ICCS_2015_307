Procedia Computer Science
Volume 51, 2015, Pages 191–200
ICCS 2015 International Conference On Computational Science

Evaluating the Potential of Low Power Systems for
Headphone-based Spatial Audio Applications
Jose A. Belloch1∗, Alberto Gonzalez2 , Rafael Mayo1 , Antonio M. Vidal3 , and
Enrique S. Quintana-Ort´ı1
1

Depto. de Ingenier´ıa y Ciencia de Computadores, Universitat Jaume I, 12071–Castell´
on, Spain
jbelloch@uji.es, mayo@uji.es, quintana@uji.es
2
Depto. de Comunicaciones, Universitat Polit`ecnica de Val`encia, 46022–Valencia, Spain
agonzal@dcom.upv.es
3
Depto. de Sistemas Informaticos y Computaci´
on, Universitat Polit`ecnica de Val`encia,
46022–Valencia, Spain
avidal@dsic.upv.es

Abstract
Embedded architectures have been traditionally designed tailored to perform a dedicated (specialized) function, and in general feature a limited amount of processing resources as well as
exhibit very low power consumption. In this line, the recent introduction of systems-on-chip
(SoC) composed of low power multicore processors, combined with a small graphics accelerator
(or GPU), presents a notable increment of the computational capacity while partially retaining
the appealing low power consumption of embedded systems. This paper analyzes the potential
of these new hardware systems to accelerate applications that integrate spatial information
into an immersive audiovisual virtual environment or into video games. Concretely, our work
discusses the implementation and performance evaluation of a headphone-based spatial audio
application on the Jetson TK1 development kit, a board equipped with a SoC comprising a
quad-core ARM processor and an NVIDIA “Kepler” GPU. Our implementations exploit the
hardware parallelism of both types of architectures by carefully adapting the underlying numerical computations. The experimental results show that the accelerated application is able
to move up to 300 sound sources simultaneously in real time on this platform.
Keywords: Low Power Architectures, GPUs, Audio Processing, Spatial Audio, Fast Fourier Transform

1

Introduction

In the era of multimedia, smart phones and tablets, low power (embedded) processors play
an important role for a myriad of applications. This is the case of improving the listener’s
∗ Corresponding author. Thanks to projects TIN2011-23283, TEC2012-38142-C04-01, PROMETEO FASE II
2014/003, P1-1B2013-20 and EU FEDER

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.224

191

Spatial Audio Application on Low Power Systems

Belloch et al.

.

Figure 1: Headphone-based application that reproduces and moves multiple sound sources in
real time.

experience via the development of sophisticated multichannel audio software [18] in general and
headphone-based spatial audio applications in particular. Speciﬁcally, a spatial audio system
based on headphones allows a listener to perceive the virtual position of a sound source [10].
This eﬀect is obtained by processing sound samples through a collection of special ﬁlters that
shape the sound with spatial information. In the frequency domain, these ﬁlters are known as
Head-Related Transfer Functions (HRTFs), and the response of HRTFs describes how a sound
wave is aﬀected by properties of the individual’s body (e.g. pinna, head, shoulders, neck and
torso) before the sound reaches the listener’s eardrum [13].
The computational problem that underlies a headphone-based application rapidly grows in
cost with the number of sound sources that have to be handled (i.e., reproduced and moved)
in real time while avoiding acoustic artifacts; see Figure 1. In past work [11, 12], we dealt with
this computational complexity by leveraging a variety of high performance but power hungry
graphics processing units (GPUs) connected to either a laptop or a desktop server (NVIDIA
GTS360-M, GTX-580 and “Tesla” C2075 with 96, 448 and 512 CUDA cores, respectively).
Compared with our previous work, the main contribution of this paper is in the design of
eﬃcient implementations of a spatial audio application that exploit the specialized architecture
of the Tegra K1 (TK1) systems-on-chip (SoC), embedded in the Jetson development kit (DevKit) [6]. This particular system comprises a quad-core ARM Cortex A15 processor (or CPU),
an ARM Cortex A15 battery-saving shadow core, and an NVIDIA “Kepler” GPU with 192
CUDA cores. Therefore, the TK1 combines the luring low power consumption of embedded
systems with the ample hardware parallelism of graphics accelerators, and adopted in mobile
devices such as Google’s Nexus 9 tablet [4]. Thus, one of the main features of the Jetson
TK1 DevKit is it that allows a full-cycle integrated development of multimedia applications for
mobile devices, from the initial design to the launching of the complete application.
The next section shows how the Jetson TK1 DevKit manage real-time audio processing.
Section 3 describes the spatial sound application and analyzes the required operations that must
be computed. Detailed GPU-based and ARM-based implementations of the audio application
are presented in Section 4, where it is also shown a performance comparative. Finally, section
5 presents some concluding remarks.

2

Audio Processing on the Jetson TK1 DevKit

The Jetson TK1 DevKit (hereafter Jetson) is designed to accelerate the development of embedded software. For multimedia and audio applications, Jetson includes an ALC5639 Realtek HD
192

Spatial Audio Application on Low Power Systems

Belloch et al.

L samples per input buffer

4 input
channels
tbuff (L)

OUT

tbuff (L)

tbuff (L)

DASP

DASP

tproc(M,N,L)

tproc(M,N,L)

2 output channels
L samples per output buffer

time

Figure 2: Operation of a real-time audio application.

Audio codec with Mic in and Line out jacks (routed to DAP2). This means that it is possible
to reproduce two audio channels through the line out jacks and capture a signal through a microphone. The audio is managed in Jetson via the Advanced Linux Sound Architecture (ALSA)
[1] software framework, which is a part of the Linux kernel, and provides an application programming interface (API) for sound card device drivers.

2.1

Real-Time performance

ALSA manages the communication between the input/output and the CPU using buﬀers of
audio samples. Thus, for a sample frequency fs =44,100 Hz (CD sound quality) and buﬀer
sizes of L =1,024 samples, attaining real-time audio performance requires audio buﬀers of
tbuﬀ =23.22 ms (L/fs ) each. We note that this time is independent of the number of channels
that are employed by the application.
For a real-time application, we have to take into account that ALSA requires/captures
buﬀers of L samples per channel (input or output). Figure 2 shows how an audio application
works with audio samples in real time. It is important to highlight the role of tproc , which
represents the time dedicated to process the M input buﬀers in order to obtain the N output
buﬀers, where M and N are particularized in the ﬁgure to 4 and 2, respectively. As shown
in the illustration, tproc depends on M , N and L, while tbuﬀ depends only on L. Figure 2
ﬁts perfectly the target application, since there are only two output channels. The application
works in real-time as long as tproc < tbuﬀ . Thus, the challenge consists in assessing how many
sound sources can be spatially reproduced in real time by eﬃciently using all the computational
resources available in Jetson.

3

Spatial Sound

A spatial eﬀect can be achieved by convolving natural monophonic sounds that are recorded
in an anechoic environment with a pair of ﬁlters that add spatial information from speciﬁc
positions in the space to the audio wave. Figure 3 shows a sound source, in this case a piano,
193

Spatial Audio Application on Low Power Systems

Belloch et al.

that is located in the virtual position (θ, φ, r), where φ ∈ [−90◦ , +90◦ ] represents the elevation
coordinate, θ ∈ [0◦ , +360◦ ] represents the azimuth coordinate, and r ∈[0, ∞] is the distance
between the virtual position and the user.

.

Figure 3: The HRIR ﬁltering allows a person to perceive a piano sound as if it were located in
a virtual position in the space given by the coordinates (θ, φ, r).
Two ﬁlters, one per ear, specify each virtual position. These are referred as head-related
impulse response (HRIR) ﬁlters in the time domain and HRTF ﬁlters in the frequency domain.
The HRIRs corresponding to position (θ, φ, r) in the time domain are denoted as hr (θ, φ, r) and
hl (θ, φ, r) for the right and left ear, respectively.
Tailored HRTFs are usually obtained either through measurement and extrapolation [17]
or via numerical simulation [14]. There are multiple public samples of HRTFs or HRIRs [5, 2].
In our case, we leverage the HRIR measures from [5]. These ﬁlters model a tall male with
short hair, and can be found under measures IRC 1007 in the website [5]. This HRIR database
has azimuth and elevation resolutions, denoted by Δθ and Δφ respectively, representing the
minimum separation in degrees between two positions of the database in azimuth and elevation.
For our HRIR database, the resolution for both azimuth and elevation is 15◦ , and the distance
of the sound source to the center of the head is ﬁxed to r=1.95 m. Moreover all HRIR ﬁlters
are windowed to a length of L=512 coeﬃcients.
Let us employ xbuﬀ to denote an input-data buﬀer composed of L audio samples from a
sound source x. Moreover, given a system composed of M sources, the input-data buﬀer xbuﬀ i
represents the buﬀer of L samples from source i ∈ [0, M − 1]. The output-data buﬀers for the
left and right ears, ybuﬀ l and ybuﬀ r respectively, are then given in the time domain by
M −1

(hl (θi , φi , ri ) ∗ xbuﬀi )

ybuﬀl =
i=0

M −1

and

ybuﬀr =

(hr (θi , φi , ri ) ∗ xbuﬀi ),

(1)

i=0

where ∗ denotes the convolution operator.
The number of ﬁlters in the database limits the virtual positions to render. One complex
problem is thus the synthesis of sound in virtual positions which do not belong to the collection
of the ﬁlters. An additional diﬃculty occurs when the sound moves, which in practice requires
the application of a new ﬁlter (i.e., a diﬀerent HRIR). In particular, if the switch between
HRIRs is not properly implemented, this may yield multiple audio clipping eﬀects [15]. In
order to address these two problems, it is possible to apply the audio techniques described
next, to interpolate any position of the space and to switch properly between positions in the
space.
194

Spatial Audio Application on Low Power Systems

3.1

Belloch et al.

The interpolation technique

This technique involves four convolutions as follows. Let us consider a generic position to render
given by (θS , φS ). From the speciﬁc elevation plane φS , the azimuth position to render θS is
obtained by combining the rendered sound from the two nearby azimuth positions, θ1 and θ2 ,
weighted by
θS − θ 1
θ 2 − θS
and wB =
;
(2)
wA =
Δθ
Δθ
see Figure 4. Then,
(3)
y(θS ) = wB · y(θ1 ) + wA · y(θ2 ).

wA

θ1

r0

θS

Δθ

θ2

wB

Figure 4: The star represents the position to be synthesized in the elevation plane φS . This
position is synthesized by combining the two nearby azimuth positions using the weighted
factors wA and wB .
Analogously, focusing on the speciﬁc azimuth plane θS , the elevation position to render φS
is obtained by combining the rendered sound from the two nearby elevation positions, φ1 and
φ2 :
(4)
y(φS ) = wD · y(φ1 ) + wC · y(φ2 ),
where the weighted factors are given by
wC =

φ S − φ1
Δφ

and

wD =

φ 2 − φS
.
Δφ

(5)

Figure 4 also illustrates how to render a position with elevation φS , by simply substituting
θ for φ and the resolution Δθ for Δφ.
Combining (3) and (4), the rendered sound at virtual position (θS , φS ) is then given by
y(θS , φS ) = wD · (wB · y(θ1 , φ1 ) + wA · y(θ2 , φ1 )) + wC · (wB · y(θ1 , φ2 ) + wA · y(θ2 , φ2 )).

3.2

(6)

The switching technique

This is used mainly for the virtualization of source movement, which is carried out in this
application by smoothly varying the virtual positions of the source over time. For example,
assume the sound source xi moves from position A: (θSA , φSA ) to position B: (θSB , φSB ). In
practice, this requires to switch the reproduction between the two positions. However, this
195

Spatial Audio Application on Low Power Systems

Belloch et al.

switching could produce multiple audible clipping eﬀects if it is not properly executed. The
switching technique that we employ to reduce possible artifacts is described in [15]. That work
suggests the application of a fading, which is a gradual increase in the sound ﬁltered by position
B while the sound ﬁltered by position A decreases in the same proportion. To this end, the
current input-data buﬀer xbuﬀ i must be computed for both positions, and then the result of
the two computations must be multiplied element-wise by two fading vectors, say f and g.
Finally, the output-data buﬀer ybuﬀ i is obtained by summing the results from the two previous
multiplications element-wise:
ybuﬀi (θS , φS ) = ((ybuﬀ i (θSB , φSB ) ⊗ f ) ⊕ ((ybuﬀ i (θSA , φSA ) ⊗ g).

(7)

where ⊗ and ⊕ respectively represent the element-wise multiplication and addition operators.

4

Implementations and Experimental Evaluation

Once the positions of each sound source has been selected and the input-data buﬀers are received, the processing to carry out in the application is summarized as:
Algorithm 1 Headphone-based spatial audio application
Input: M , xbuﬀ , h(θ, φ)
Output: ybuﬀr ybuﬀl
1: for e = {l, r} do
For the Left and Right ear
2:
for m = 0, . . . , M − 1 do
For each sound source
3:
for p = {A, B} do
Two positions for each sound source
4:
for k = {(φ1 , θ1 ), (φ1 , θ2 ), (φ2 , θ1 ), (φ2 , θ2 )} do
The four interpolated positions
5:
ybuﬀ ep (θp , φp ) = ybuﬀ ep (θp , φp ) + he (θkp , φkp ) ∗ xbuﬀm .
6:
end for
7:
end for
8:
ybuﬀ e = ((ybuﬀ eB (θeB , φeB ) ⊗ f ) ⊕ ((ybuﬀ eA (θeA , φeA ) ⊗ g).
9:
end for
10: end for

The convolution operation is carried out in real time by using the overlap-save technique with
a 50% overlap in the frequency domain [16]. That means that convolution is converted in an
element-wise multiplication of two vectors of size 2L composed of complex values. Considering
the operations described in the previous section, we can conclude that for synthesizing ybuﬀl
and ybuﬀr , it is required to compute 16 convolutions per sound source. Table 1 enumerates the
operations that are executed by a headphone-based spatial audio application that reproduces
M sound sources
Note that only the input-data buﬀers xbuﬀi must be transformed to the frequency domain
since the ﬁlters HRTF are already in the frequency domain. The following subsections present
the implementation of a complete headphone audio application on the two computational kernels
of the Jetson: a GPU Nvidia Kepler with 192 cuda cores and a CPU ARM Cortex-A15 with
four cores.

4.1

GPU-based implementation

The GPU that is embedded in the TK1 processor adheres to the Kepler GPU architecture [7]
and is virtually identical (obviously, scaled down) to those present in high-end systems. The
196

Spatial Audio Application on Low Power Systems
Step
Number
1
2
3
4
5
6

Number of
computations
M
16M
4
4
2
2

Belloch et al.

Computation
description
FFT of size 2L
1 Element-wise Multiplications between two complex vectors of size 2L
4M Element-wise Sum between two complex vectors of size 2L, see (6)
IFFT of size 2L
2 Element-wise Multiplications between two real vectors of size L
2 Element-wise Sum between two real vectors of size L, see (7)

Table 1: Operations that are required by the spatial audio application.
Kepler GPU in the TK1 consists of a single streaming multiprocessor (SMX) composed of 192
CUDA cores. In CUDA, the GPU code is written as a kernel function, to be concurrently
executed by multiple threads grouped into thread blocks. An important aspect to consider is
that all threads inside the same block can access data in a coalesced way.
Regarding the steps 1) and 4) from Table 1, NVIDIA provides a specialized FFT library [8]
that we leveraged in our GPU routine to compute multiple 1-D FFTs. In addition, Steps 2)–3)
and 5)–6) are implemented respectively as the ad hoc Kernels 1 and 2 described next.
4.1.1

Kernel 1

This kernel computes Y(θSA , φSA ) and Y(θSB , φSB ) in the frequency domain, derived from the
time domain formulation in (6), as
Y(θS , φS ) = wD ·wB ·Y(θ1 , φ1 )+wD ·wA ·Y(θ2 , φ1 )+wC ·wB ·Y(θ1 , φ2 )+wA ·wC ·Y(θ2 , φ2 ). (8)
Although there exists ample concurrency in this computation, we note that Y(θ, φ) are vectors
of size 2L with complex entries. The CUDA capability of the TK1 (3.2) enforces a maximum
number of 16 resident blocks per multiprocessor. Therefore, with only one SMX in the TK1,
we execute a kernel composed of 16 thread blocks, where each block comprises 4L/16 threads,
an each thread is devoted to compute one complex sample of Y(θSA , φSA ) and Y(θSB , φSB );
see Figure 5. In more detail, each thread carries out 8M times the operations:
res.r = res.r + (h.r · sig.r − h.i · sig.i) · w1 · w2 ,
res.i = res.i + (h.r · sig.i − h.i · sig.r) · w1 · w2 ,

(9)

where res is a complex sample of Y(θS , φS ); h represents a coeﬃcient of a HRTF ﬁlter; sig
denotes a complex sample of the input signal; both w1 and w2 ∈ {wA , wB , wC , wD }; and the
suﬃxes .r and .i denote the real and imaginary parts of a complex value. This implementation
of the kernel requires the use of 36 registers per thread.
4.1.2

Kernel 2

This kernel computes y(θSA , φSA ) and y(θSB , φSB ) from (7). Following the same guidelines
exposed for Kernel 1, we execute a kernel with 16 thread blocks, each block composed of 2L/16
threads, and each thread devoted to compute one complex sample of the output; see Figure 6.
In this case, the overlapping samples are deleted according to the convolution theorem [16].
This kernel uses 8 registers per thread.
197

Spatial Audio Application on Low Power Systems
Thread
Block 0

Thread
Block 1

Thread
Block 2

Belloch et al.
Thread
Block 3

Thread
Block 15

.....

2L

2L
Y(θ ,φ )
Y(θ ,φ )
SA

SA

SB

SB

Left Ear

Right Ear

Figure 5: Each thread computes one complex sample of Y(θS A, φS A) and of Y(θS B, φS B) in
Kernel 1.
Thread
Block 0

Thread
Block 1

Thread
Block 2

Thread
Block 3

Thread
Block 15

.....

f

f

g

g

y(θ ,φ )
SA

SA

y(θ ,φ )
SB

SB

L

ybuffl

L

ybuffr

Figure 6: Each thread computes one complex sample of ybuﬀl and ybuﬀr in Kernel 2.

4.2

ARM-based implementation

The TK1 processor also contains a low power ARM Cortex-A15 with four cores. In order to
exploit this type of hardware concurrency, we used openMP [9] to parallelize the appropriate
computations. Steps 1) and 3) require the use of a FFT library and, to this end, we selected the
implementation in the Fast Fourier Transform West [3] which can be used on ARM processors
in combination with openMP.
Step 5) involves three nested loops, which iterate over the samples of the buﬀer (4L,
because of the left and the right ear), the sound sources (2M , because of the switching
technique), and the sound sources (4 because of the interpolation technique). Furthermore, the operation that must be computed at the loop body is given in (9). We implemented our algorithm using openMP, partitioning the iteration space of the outermost loop
among the four cores via the OpenMP directives omp_set_num_threads(4) and #pragma omp
parallel for schedule(static,1). The same methodology was followed for step 6), but in
this case there is only the loop that references the samples of the output buﬀers (2L). Finally,
the functions that implemented steps 5) and 6) were compiled using auto-vectorization ﬂags:
-mfpu=neon -ftree-vectorize.
198

Spatial Audio Application on Low Power Systems

4.3

Belloch et al.

Performance evaluation

The objective of the following experiment is to assess the highest number of sound sources M
that can be reproduced in real time using the new GPU and ARM implementations for the TK1
processor in Jetson. The computational experiment thus consisted of launching the application
and gradually increasing the number of sources. For each execution, the time tproc was measured
and compared with the threshold tbuﬀ . As explained in Section 2.1, the application attains real
time if tproc < tbuﬀ . Otherwise, the application can still be considered as an oﬀ-line technology.
Figure 7 exposes the evolution of tproc as a function of the number of sources for three diﬀerent
implementations: GPU code; sequential ARM code using a single Cortex A15 core/thread; and
multithreaded ARM using the four Cortex A15 cores. The time tbuﬀ that symbolizes the border
between real-time and oﬀ-line applications is also shown as a ﬂat line.
Processing Time
60
GPU
ARM Sequential
ARM Four Cores
Real Time

tproc (ms)

50

40

30

tbuff(ms)
20

10

0

0

50

100

150
200
250
300
Number of sound sources

350

400

450

Figure 7: Number of sound sources that can be handled in real time using the computational
resources of the Jetson TK1 DevKit.
The GPU-based implementation can interact with 325 sound sources in real time, which is
a huge number of sound sources. The ARM CPU also delivers a considerable performance, and
it can reproduce up to 55 using only one core and up to 100 sound sources with the four cores.
The lack of scalability for the latter is due to the internal implementation of the FFTW library,
which oﬀers a limited speed-up.

5

Conclusion

Tablets and smart phones are nowadays equipped with powerful yet low power processors.
This is the case of the NVIDIA Tegra K1 mobile processor that is present, among others, in the
google nexus 9 tablet. This new developments paves a captivating road for a vast amount of
applications that require high computational resources and which can then now be executed in
this type of architectures for mobile appliances. In this work, we have assessed the performance
199

Spatial Audio Application on Low Power Systems

Belloch et al.

of the Jetson TK1 board for an application that synthesizes spatial sound in real time. To
this end, we have implemented and optimized the application for two target architectures: the
192-core GPU and the quad-core ARM Cortex A15. Our experiments show that the GPU in
this system is able to reproduce up to three times more sound sources than the ARM CPU,
but also that both can handle a remarkably high number of sound sources in real time.

References
[1] Advanced linux sound architecture (alsa):.
http://www.alsa-project.org/. (accessed 2015 January 08).
[2] The CIPIC HRTF Database. online at: http://interface.cipic.ucdavis.edu/sound/hrtf.html.
[3] Fast Fourier Transform West.
http://www.fftw.org/. (accessed 2015 January 11).
[4] Google’s nexus 9.
http://blogs.nvidia.com/blog/2014/10/17/nvidia-tegra-k1-google-nexus-9/.
(accessed
2015 January 11).
[5] Listen HRTF database. online at: http://recherche.ircam.fr/equipes/salles/listen/index.html.
[6] Mobile GPU: Jetson.
http://developer.download.nvidia.com/embedded/jetson/TK1/docs/Jetson_platform_
brief_May2014.pdf. (accessed 2014 November 22).
[7] Nvidia CUDA Developer Zone.
https://developer.nvidia.com/cuda-zone. (accessed 2014 April 10).
[8] Nvidia FFT library.
https://developer.nvidia.com/cuFFT. (accessed 2015 January 09).
[9] openMP API Speciﬁcations.
http://www.openmp.org. (accessed 2013 June 05).
[10] V.R. Algazi and R.O. Duda. Headphone-based spatial sound. IEEE Signal Processing Magazine,
28(1):33–42, 2011.
[11] Jose A. Belloch, M. Ferrer, Alberto Gonz´
alez, F.J. Mart´ınez-Zald´ıvar, and A. M. Vidal.
Headphone-based spatial sound with a GPU accelerator. Procedia Computer Science, 9(0):116–125,
2012.
[12] Jose A. Belloch, M. Ferrer, Alberto Gonz´
alez, F.J. Mart´ınez-Zald´ıvar, and A. M. Vidal.
Headphone-based virtual spatialization of sound with a GPU accelerator. Journal of the Audio
Engineering Society, 61(7/8):546–561, 2013.
[13] Jens Blauert. Spatial Hearing - Revised Edition: The Psychophysics of Human Sound Localization.
The MIT Press, 1996.
[14] Yuvi Kahana and Philip A. Nelson. Numerical modelling of the spatial acoustic response of the
human pinna. Journal of Sound and Vibration, 292(1-2):148 – 178, 2006.
[15] Akihiro Kudo, Haruhide Hokari, and Shoji Shimada. A study on switching of the transfer functions
focusing on sound quality. Acoustical Science and Technology, 26(3):267–278, 2005.
[16] A. V. Oppenheim, A. S. Willsky, and S. Hamid. Signals and systems. Processing series. Prentice
Hall, 2nd edition, 1997.
[17] S. Spors and J. Ahrens. Eﬃcient range extrapolation of head-related impulse responses by Wave
Field Synthesis techniques. In IEEE International Conference on Acoustics, Speech and Signal
Processing, Prague, Czech Republic, May 2011.
[18] E. Torick. Highlights in the history of multichannel sound. J. Audio. Eng. Soc., 46(5):27–31, 1998.

200

