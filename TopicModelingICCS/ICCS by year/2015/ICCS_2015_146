Procedia Computer Science
Volume 51, 2015, Pages 374–383
ICCS 2015 International Conference On Computational Science

Using Genetic Algorithms for Maximizing Technical
Eﬃciency in Data Envelopment Analysis
Mart´ın Gonz´alez1 , Jose J. L´opez-Esp´ın1 , Juan Aparicio1 , Domingo Gim´enez2 ,
and Jes´
us T. Pastor1
1

Centro de Investigaci´
on Operativa, Miguel Hern´
andez University, Spain
martingonzes@gmail.com, jlopez@umh.es, j.aparicio@umh.es, jtpastor@umh.es
2
Departamento de Inform´
atica y Sistemas, University of Murcia, Spain
domingo@um.es

Abstract
Data Envelopment Analysis (DEA) is a non-parametric technique for estimating the technical
eﬃciency of a set of Decision Making Units (DMUs) from a database consisting of inputs and
outputs. This paper studies DEA models based on maximizing technical eﬃciency, which aim
to determine the least distance from the evaluated DMU to the production frontier. Usually,
these models have been solved through unsatisfactory methods used for combinatorial NP-hard
problems. Here, the problem is approached by metaheuristic techniques and the solutions are
compared with those of the methodology based on the determination of all the facets of the
frontier in DEA. The use of metaheuristics provides solutions close to the optimum with low
execution time.
Keywords: Data Envelopment Analysis, Closest targets, Mathematical Programming, Eﬃciency
Methodologies, Genetic Algorithms

1

Introduction

Over the past 50 years technologies have been estimated using many diﬀerent approaches [9].
The two principal methods are stochastic frontiers, which use econometric techniques, and Data
Envelopment Analysis (DEA), which is a non-parametric technique based on mathematical
programming for the evaluation of technical eﬃciency of a set of decision making units (DMUs)
that consume inputs to produce outputs [10]. Unlike other eﬃciency methodologies, DEA
simultaneously provides both an eﬃciency score and benchmarking information through eﬃcient
targets. In DEA, the eﬃciency score is obtained from the distance between the assessed DMU
and a point at the frontier of the technology, which serves as an eﬃcient target for the assessed
DMU.
An important stream of the recent literature in DEA is concerned with determining the
least distance to the frontier from an assessed ineﬃcient DMU or, equivalently, obtaining the
374

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.257

Genetic Algorithms for Technical Eﬃciency

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor

eﬃcient targets that maximize the ﬁnal level of technical eﬃciency (see [2, 3, 5] to name but
a few). This contrasts with the usual approaches followed from the origins of DEA, where
only the furthest eﬃcient targets are calculated for computational reasons. Indeed, maximizing
technical eﬃciency is computationally diﬃcult while minimizing technical eﬃciency is easier,
since this is usually associated with the resolution of a standard linear program.
Regarding papers that have studied the computational aspects of DEA models associated
with the determination of the least distance to the frontier and, therefore, related to the
maximization of the technical eﬃciency, we cite Aparicio et al. [4] and Jahanshahloo et al.
[11, 12, 13]. Some approaches are based on Mixed Integer Linear Programming or Bilevel Linear Programming, while others are derived from algorithms that allow the determination of all
the facets of a polyhedron. As we will argue in Section 2, all these approaches have their strong
and weak points and, consequently, there is currently no approach accepted as the best solution
to the problem.
The approach in [4], based on Mixed Integer Linear Programming, is used and we use
metaheuristics to try to solve the model these authors introduced. The complexity of the
model makes it diﬃcult to generate solutions satisfying all the restrictions. In [7, 14] heuristics
were used to generate valid solutions for a subset of restrictions of the problem of maximizing
technical eﬃciency in DEA. In this paper, all the constraints have been incorporated (in the
previous papers only 9 of 14 constraints were considered), the heuristics are improved, and new
ones are developed, so initial populations of solutions satisfying all the constraints are generated.
Additionally, the solutions generated by our approach for a battery of simulated databases are
compared with the solutions obtained through the determination of all the facets of the frontier
in DEA (see [1]). In this case, the optimizer CPLEX was used to measure technical eﬃciency.
The remainder of the paper is organized as follows. In Section 2, a brief introduction of
the main notions associated with Data Envelopment Analysis is presented, and the existing
approaches for maximizing eﬃciency are outlined. Then, heuristic methods to generate initial
populations with valid solutions are studied in Section 3. After that, a Genetic Algorithm to
improve the solutions is discussed in Section 4. In Section 5, the results of some experiments
are summarized. Section 6 concludes the paper and outlines some possible research directions.

2

Data Envelopment Analysis and the Problem to be
Solved

DEA involves the use of Mathematical Programming to construct a non-parametric piece-wise
surface over the data in the input-output space. Technical eﬃciency measures associated with
the performance of each DMU are then calculated relative to this surface, as a distance from
it.
Some notation is needed. Assume there are data on m inputs and s outputs for n DMUs
(ﬁrms, universities, farms, etc). For the j-th DMU these are represented by xij ≥ 0, i =
1, . . . , m, and yrj ≥ 0, r = 1, . . . , s, respectively.
The basic DEA models are the CCR [8] and the BCC [6]. Both models are based on radial
projections to the production frontier. However, many other approaches give freedom to the
projection so that the ﬁnal eﬃcient targets do not conserve the mix of inputs and outputs. The
“original” Enhanced Russell Graph measure [15] can be calculated for DMU k, k = 1, . . . , n as
follows:
375

Genetic Algorithms for Technical Eﬃciency

min
s.t.

βk −

1
m

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor

−
m tik
i=1 xik

t+
s
rk
r=1 yrk
n
−βk xik + j=1 αjk xij + t−
ik
n
−βk yrk + j=1 αjk yrj − t+
rk
+
βk , αjk , t−
ik , trk ≥ 0

βk +

1
s

=
=
=

1
0
0

(1)

∀i
∀r
∀j, i, r

The Enhanced Russell Graph measure, deﬁned as the optimal value of the above model, satisﬁes several interesting properties from a mathematical and economic point of view. However,
it presents a limitation, a weakness shared with other traditional measures in DEA. Speciﬁcally, the original Enhanced Russell Graph measure minimizes technical eﬃciency in equation
1. In order to maximize instead of minimize technical eﬃciency, it seems suﬃcient to change
“min” for “max” in equation 1. However, this is not true. In this case, we could show that the
solutions generated by the model would not be technically eﬃcient, but ineﬃcient (see [4]) and,
therefore, could not serve as valid benchmark for the assessed DMU.
This problem was behind the introduction of diﬀerent approaches to maximizing technical eﬃciency suitably in DEA. Some of these approaches propose using Mixed Integer Linear
Programs to overcome the problem [4]. In the case of DMU k, the model to be solved would
be:
max
s.t.

βk −

−

1
m

−
m tik
i=1 xik

−βk xik +
−βk yrk +
m
i=1 νik xij +

t+
s
rk
r=1 yrk
n
−
j=1 αjk xij + tik
n
+
j=1 αjk yrj − trk
s
r=1 μrk yrj + djk

βk +

αjk

1
s

νik ≥ 1
μrk ≥ 1
djk ≤ M bjk
≤ M (1 − bjk )
bjk = 0, 1
βk ≥ 0
t−
ik ≥ 0
t+
rk ≥ 0
djk ≥ 0
αjk ≥ 0

=
=
=
=

1
0
0
0

∀i
∀r
∀j
∀i
∀r
∀j
∀j
∀i
∀r
∀j
∀j

(c.1)
(c.2)
(c.3)
(c.4)
(c.5)
(c.6)
(c.7)
(c.8)
(c.9)
(c.10)
(c.11)
(c.12)
(c.13)
(c.14)

(2)

One weakness of the approach in equation 2 is that it uses a “big M ” to model the key
constraints (c.7) and (c.8). Speciﬁcally, it allows us to link djk to αjk by means of the binary
variable bjk . The value of M can be calculated if and only if all the facets that deﬁne the
technology are previously determined. Unfortunately, the identiﬁcation of all these facets is a
combinatorial NP-hard problem. Something similar happens with the other approaches devoted
to maximizing technical eﬃciency. All of them are related in some sense to a big M or the
direct calculation of all the eﬃcient facets (see Jahanshahloo et al. [11, 12, 13]).
In this paper, we apply a Genetic Algorithm to solve equation 2. In order to check the
goodness of our approach, the results are compared with those obtained from the determination
of all the facets of the frontier in DEA using a set of simulated numerical examples.
376

Genetic Algorithms for Technical Eﬃciency

3

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor

Heuristic Methods to Obtain Valid Solutions

+
+
Each solution of equation 2 is composed of βk , αjk , t−
ik , trk , νik , μrk , djk ∈ R and bjk ∈ {0, 1},
with i = 1, . . . , m, j = 1, . . . , n, r = 1, . . . , s. In [7] some heuristics were presented to generate
solutions of 13 of the 14 constraints in the equation. These heuristics are now improved so
that the number of solutions satisfying the 14 constraints greatly increases. Two methods to
generate the initial population of solutions are combined. If non valid solutions are obtained by
using method 1, method 2 is used. The second method has a higher computational cost, and
so it is used only when the ﬁrst method fails.

3.1

Method 1

1. For a given k, the process starts generating bjk ∀j based on c.9., with the restrictions: the
number of bjk equal to 0 should be greater than s and lower than s + m to calculate the
values of αjk and djk ∀j by means of a system of equations in the next steps. αjk , djk
and bjk are related through c.7. and c.8. The number of bjk equal to 0 is s, with which
the number of equations and of unknowns coincides. The positions of these zero values
are generated randomly.
2. t+
rk ∀r and βk are generated using algorithm 1 in order to satisfy c.1. In this algorithm,
the values of t+
rk are generated randomly between 0 and 1. Next, βk is obtained using c.1.
+
If βk is lower than 0, then t+
rk ∀r are decreased, and if βk is greater than 1, then trk ∀r
are increased. The process continues until 0 < βk < 1.
h×n

, DMU k
Require: Y ∈ R+
+
∈
R
,
0 < βk < 1
Ensure: ∀r, t+
rk
randomly
between 0 and 1
Generate ∀r, t+
rk
Obtain βk using c.1.
while βk ≤ 0 OR βk ≥ 1 do
if βk < 0 then
+
Generate r randomly, and t+
rk = trk /(2.0 + random(0, 1, 2))
else
+
Generate r randomly, and t+
rk = trk ∗ (2.0 + random(0, 1, 2))
end if
Obtain βk using c.1.
end while
Algorithm 1: Generate t+
rk and βk
3. Next, αjk ∀j are calculated using c.3. The number of αjk diﬀerent from 0 is equal to
s through step 1. The values of α are calculated using c.3. by solving the system of
equations.
4. t−
ik are calculated using c.2. by solving the system of equations.
5. Finally, νik ∀i, μrk ∀r and djk ∀j are calculated. The number of djk equal to 0 is the same
as the number of α diﬀerent from 0. Therefore, the values of νik are generated randomly
and those of μrk are obtained by solving system c.4.
377

Genetic Algorithms for Technical Eﬃciency

3.2

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor

Method 2

This method is used to recalculate the non valid solutions in method 1.
1. The ﬁrst step coincides with that of the previous method: bjk ∀j are randomly generated
based on c.9., with s values of bjk equal to 0.
2. The values α are generated randomly, with 0 < αjk ≤ 1, for the same reason mentioned
in step 3 of method 1.
3. Next, αjk ∀j are modiﬁed using algorithms 2 and 3 in order to satisfy c.1, c.2., c.3., c.11.,
and c.12. In algorithm 2, since βk is between 0 and 1, ∀i the maximum value of βk xik
n
in c.2. is equal to xik . Then, ∀i, j=1 αjk xij must be lower than xik in order to satisfy
c.11. Therefore, the α with least eﬀect in c.3. (αj0 k ) must be decreased. Otherwise, ∀r,
n
j=1 αjk yrj must be greater than yrk in order to satisfy c.12. In the same way, the α
with least eﬀect in c.2. is increased. Algorithm 3 has been developed considering c.1. and
c.3. In it the α with least eﬀect in c.2. and c.3. (αj0 k ) is calculated in order to satisfy c.1.
s×n

m×n

Require: Y ∈ R+
, X ∈ R+
, DMU k
+
+
Ensure: ∀r, trk ∈ R; ∀i, t−
ik ∈ R; ∀j, αjk ∈ R , 0 < βk < 1
for i = 1, . . . , m do
n
if xik < j=1 αjk xij then
m
s
m
1
1
1
1
Find j0 / m
i=1 xij0 − s
i=1 yij0 = maxj=1,...,n { m
i=1 xij − s
αj0 k = αj0 k ∗ 0.95
end if
end for
for r = 1, . . . , s do
n
if yrk > j=1 αjk yrj then
s
m
s
1
1
1
Find j0 / 1s i=1 yij0 − m
i=1 xij0 = maxj=1,...,n { s
i=1 yij − m
αj0 k = αj0 k ∗ 1.05
end if
end for
∀j adjust αjk with algorithm 3.
Adjust βk to satisfy c.11. and c.12. (step 4)
−
Obtain t+
rk ∀r and tik ∀i using c.2. and c.3. (step 4)
Algorithm 2: Adjust αjk to satisfy c.2. and c.3.
4. Adjust βk to satisfy c.2., c.3., c.11.
by a factor to satisfy c.2. and c.11.
by a factor to satisfy c.3. and c.12.
adjustment. In each iteration t+
rk ∀r

s
i=1

yij }

m
i=1

xij }

and c.12. If c.11. is violated, then βk is increased
Otherwise, if c.12. is violated, then βk is decreased
This factor is decreased in each iteration for a ﬁner
and t−
ik ∀i are obtained using c.2.and c.3.

5. Finally, νik ∀i, μrk ∀r and djk ∀j are calculated as in step 5 of method 1.

4

Genetic Algorithm

A Genetic Algorithm is proposed here to improve the solutions obtained with the previous
heuristic methods. A population of valid solutions of equation 2 is explored. As mentioned
378

Genetic Algorithms for Technical Eﬃciency
s×n

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor

m×n

, DMU k, αjk ∀j
Require: Y ∈ R+
, X ∈ R+
+
Ensure: ∀j, αjk ∈ R
s
∀j, 1 ≤ j ≤ n, pj = r=1 yrj /yrk
repeat
s
m
s
1
1
Find j0 / 1s i=1 yij0 + m
i=1 xij0 = minj=1,...,n { s
i=1 yij +
sum = j=1,...,n,j=j0 αjk pj
αj0 k = s−sum
pj0
if αj0 k ≤ 0 then
∀j, αjk = αjk ∗ 0.95
end if
until αj0 k > 0
Algorithm 3: Adjust αjk to satisfy c.1.

1
m

m
i=1

xij }

+
+
and
in the previous section, a solution is composed by βk , αjk , t−
ik , trk , νik , μrk , djk ∈ R
bjk ∈ {0, 1}, with i = 1, . . . , m, j = 1, . . . , n, r = 1, . . . , s. Valid solutions are those satisfying
the 14 constraints in equation 2, and the ﬁtness is given by the objective function in this
equation. The main characteristics of the algorithm are:

• Initialization. The initial population is generated with the above heuristics. Given the
diﬃculty of obtaining valid solutions for the 14 constraints [14], some non-valid solutions
can be included initially in the population. The individuals in the population are ordered
by the ﬁtness, with the non-valid solutions at the end of the population.
• End Condition. The Genetic Algorithm works by combining and mutating individuals
in the population until some end condition is reached. Normally, a maximum number of
iterations or a maximum number without improving the best solution is established. In
our case, some values have been tested, and after a number of iterations there were no
signiﬁcant diﬀerences in the goodness of the solution found. For the experiments we have
ﬁxed the number of iterations to 1000.
• Selection. Only valid solutions are selected for combination, and the non-valid solutions
(those not fulﬁlling all the restrictions) in the population will be substituted for new valid
solutions generated.
The best individuals in the population are selected to be combined, leaving at least
50% of the overall space to generate new solutions. That is, if the total capacity is 200
chromosomes, and there are 120 valid chromosomes, the ﬁrst 100 (50% of the total) are
selected for combination, and the remaining space is allocated for new solutions. In this
case, the 20 worst valid solutions are discarded. If the valid solutions represents less than
the 50% of the total size, all the valid solutions are selected to be crossed, and all the
non-valid elements are discarded for the next generation.
• Crossover
From those individuals selected for crossing, pairs of individuals are selected randomly and
combined to generate two descendants. The process continues until there are suﬃcient
new elements to substitute those not selected for combination. The new individuals are
included in the ordered population.
Crossover is fundamental to improve solutions, so three types of crossover have been
implemented and evaluated. Because each individual has components of six types (β, t+ ,
379

Genetic Algorithms for Technical Eﬃciency

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor

t− , ν, μ and d), each combination will work with only one of these types. One crossover
considers only one component and the others randomly select the type of component in
each combination:
– Crossover 1. Only one feature of the chromosomes is considered, β. It appears
in the objective function, and so its modiﬁcation directly aﬀects the ﬁtness. The
mean of β1 and β2 of the two ascendants is obtained and perturbed by adding and
2
+ γ and
subtracting a value randomly generated between 0 and 1, γ: β1‘ = β1 +β
2
β1 +β2
‘
β2 = 2 − γ. If some β is outside the range [0, 1], the descendants are generated
with a new γ. The chromosomes so generated can be non-valid, so the values of t−
ik
and t+
rk are recalculated so that constraints c.1, c.2 and c.3 are fulﬁlled. The other
values (νik , μrk and bjk ) are inherited from the ascendants. The new chromosomes
are evaluated to see if they are valid or not, and their ﬁtness is calculated.
– Crossover 2. The values of t+ , t− , ν, μ or d are crossed. In each combination
only parameters of one type are combined, and the type is randomly selected. Each
parameter has several elements, and a middle point crossover combination is used:
if the ascendants are a1 = (a11 , a12 ) and a2 = (a21 , a22 ) the two descendants are
d1 = (a11 , a22 ) and d2 = (a21 , a12 ). Moreover, as in crossover 1, the value of the
other parameters are recalculated, and the new chromosomes are evaluated and
inserted in the ordered population.
– Crossover 3. This is a combination of the previous crossovers. All the parameters
are candidates for crossing, and one is randomly selected. The crossover works as
explained, with recalculation of the generated elements and insertion in the population.
• Mutation. Each individual has a 10% probability of being selected for mutation. One
of the parameters in the individual is selected randomly, and new values are randomly
generated for this parameter. The values of the other parameters are not recalculated.
If the new element is valid, its ﬁtness is calculated and the individual is inserted in the
ordered population.

5

Experimental Results

The generation of valid solutions is a diﬃcult problem, and in previous works the problem of
building valid solutions for 9 [14] or 13 [7] of the 14 constraints in equation 2 was tackled with
heuristic methods. The simpliﬁed methods presented in Section 3 allow us to work with all
the constraints. The execution time and the percentage of valid solutions generated with the
previous heuristics and with those presented in this work are compared in Table 1, where the
time is expressed in seconds and the values are the mean of ten executions for each problem
size. The standard deviation is also shown. With the new heuristics more valid solutions are
generated, for all the constraints and with a lower execution time. Thus, these heuristics can
be used for the initial generation of individuals in the population of the Genetic Algorithm.
With an approximation method like the Genetic Algorithm we can not ensure the optimum
solution is found. So, the solutions obtained with the Genetic Algorithm are compared with
those obtained with CPLEX [1], which generates optimum solutions but at the expense of very
large execution times and is impracticable for large problems. Table 2 compares the solutions
380

Genetic Algorithms for Technical Eﬃciency

m
2
3
4
5
6

size
n
15
25
30
40
60

s
1
2
2
3
4

9 constraints [14]
time (sec) % val.
26.4251.44
8235.58
6.7216.03
9030.46
0.220.16
1000.00
13.1320.64
7443.40
2.011.13
3544.07

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor
13 constraints [7]
time (sec)
% val.
33.2110.82
7218.12
72.8915.56
2420.97
89.8418.63
1621.13
116.3912.86
1.62.49
117.2614.15 0.060.10

14 constraints
time (sec) % val.
0.090.02
1000.00
0.880.68
962.85
0.881.74
951.49
27.2242.38
929.07
93.4670.08
5335.57

Table 1: Execution cost and percentage of valid solutions with the previous heuristics and with the
heuristics in Section 3, varying the problem size.
m
2
3
3
3
4
4

n
50
10
30
60
30
30

s
1
2
2
2
2
4

crossover 1
2.1e-07
0.0344
0.1122
0.0778
0.1431
0.1612

crossover 2
2.1e-07
0.0373
0.1075
0.0714
0.1437
0.1029

crossover 3
2.1e-07
0.0381
0.1042
0.0689
0.1417
0.1054

Table 2: Comparison of the solution obtained with the Genetic Algorithm using diﬀerent crossover
functions with the optimum solution (obtained with CPLEX).
obtained with the Genetic Algorithm with the three crossover considered with those obtained
with CPLEX (the optimum ones), for diﬀerent problem sizes and varying the number of DMUs,
inputs and outputs. Each entry in the table represents the mean of ten experiments, and for each
experiment the mean of the diﬀerence of the solution provided by CPLEX and that obtained
with the Genetic Algorithm for all the DMUs. There are always small diﬀerences with respect
to the optimum, so the Genetic Algorithm is a good alternative to an exact method when this
can not be used due to huge computational cost. The diﬀerences between the three crossovers
is not signiﬁcant, but in general the third crossover gives better results, which can be expected
because the space of solutions is searched by varying the parameters of all the available types.
In general, and as is normal in a metaheuristic, the initial iterations give important improvements in the ﬁtness, and successive iterations give only small improvements if any. This
happens for all the sizes experimented with, as is observed in Figure 1, which compares the
ﬁtness with the Genetic Algorithm with the three crossovers implemented with the optimum
obtained with CPLEX, for one DMU in a problem with m = 4, n = 30 and s = 3. The best
ﬁtnesses obtained every 5 iterations up to 30 are represented. Similar results are obtained for
other DMUs and other problem sizes.
Small problem sizes are used in Table 2 because the execution time of CPLEX increases
exponentially with the problem size. This is seen in Figure 2, which compares (in logarithmic
scale) the execution time with CPLEX and the Genetic Algorithm when varying the problem
size.

6

Conclusions and Future Works

Maximizing technical eﬃciency or, equivalently, determining least distance measures are topics
of relevance in recent DEA literature. However, it is well-known that from a computational
point of view this has usually been solved by unsatisfactory approaches associated with a
combinatorial NP-hard problem.
381

Genetic Algorithms for Technical Eﬃciency

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor



	
































Figure 1: Comparison of the optimum ﬁtness and those obtained with the Genetic Algorithm
with the three crossovers considered at diﬀerent iterations, for one DMU in a problem with
m = 4, n = 30 and s = 3

Figure 2: Comparison of the execution time (in seconds and logarithmic scale) of CPLEX and
the Genetic Algorithm

This paper improves previous heuristics for the generation of valid solutions for an optimization problem for DEA. The new heuristic provides more valid solutions which satisfy all
the constraints in the model and with a lower execution time. A Genetic Algorithm has been
developed working with this initial population of valid and non-valid solutions to generate more
valid solutions and to improve the best ﬁtness obtained. The Genetic Algorithm gives solutions
close to the optimum and is competitive with an exact method with high computational cost,
which can not be used for large problems.
A deeper analysis should be made to tune the Genetic Algorithm to the problem to obtain
better solutions with lower execution times.
We have studied the problem associated with the so-called Enhanced Russell Graph measure.
Nevertheless, there are a lot of measures in DEA that can be used in the maximization of
382

Genetic Algorithms for Technical Eﬃciency

Gonz´
alez, L´
opez-Esp´ın, Aparicio, Gim´enez and Pastor

technical eﬃciency. In this way, programming the approach based on metaheuristic algorithms
to solve all of them can be seen as appropriate and interesting future work.

Acknowledgements
This work was supported by the Spanish MINECO, as well as European Commission FEDER
funds, under grant TIN2012-38341-C04-03. Additionally, the authors are grateful to the Santander Chair of Eﬃciency and Productivity of the University Miguel Hern´andez of Elche for
partially supporting this research.

References
[1] H. Amatatsu and T. Ueda. Measurement of simultaneous scale and mix changes in inputs and
outputs using DEA facets and RTS. European Journal of Operational Research, 223(3):752–761,
2012.
[2] A. Amirteimoori and S. Kordrostami. A euclidean distance-based measure of eﬃciency in data
envelopment analysis. Optimization, 59:985–996, 2010.
[3] J. Aparicio and J. T. Pastor. Closest targets and strong monotonicity on the strongly eﬃcient
frontier in DEA. Omega, 44:51–57, 2014.
[4] J. Aparicio, J. L. Ruiz, and I. Sirvent. Closest targets and minimum distance to the Pareto-eﬃcient
frontier in DEA. Journal of Productivity Analysis, 28:209–218, 2007.
[5] C. Baek and J. Lee. The relevance of DEA benchmarking information and the Least-Distance
Measure. Mathematical and Computer Modelling, 49:265–275, 2009.
[6] R. D. Banker, A. Charnes, and W. W. Cooper. Some models for estimating technical and scale
ineﬃciencies in data envelopment analysis. 30:1078–1092, 1984.
[7] C. Benavente, J. J. L´
opez-Esp´ın, J. Aparicio, J. T. Pastor, and D. Gim´enez. Closets targets,
benchmarking and data envelopment analysis: a heuristic algorithm to obtain valid solutions for
the shortest projection problem. In 11th International Conference on Applied Computing, 2014.
[8] A. Charnes, W. W. Cooper, and E. Rhodes. Measuring the eﬃciency of decision making units.
European Journal of Operational Research, 2(429–444), 1978.
[9] T. Coelli, D. S. P. Rao, and G. E. Battese. An Introduction to Eﬃciency and Productivity Analysis.
Kluwer Academic Publishers, 1998.
[10] W. W. Cooper, L. M. Seiford, and K. Tone. Data envelopment analysis: a comprehensive text with
models, applications, references and DEA-solver software. Kluwer Academic Publishers, 2000.
[11] G. R. Jahanshahloo, F. Hosseinzadeh Lotﬁ, H. Zhiani Rezai, and F. Rezai Balf. Finding strong
deﬁning hyperplanes of production possibility set’. European Journal of Operational Research,
177:42–54, 2007.
[12] G. R. Jahanshahloo, F. Hosseinzadeh Lotﬁ, and M. Zohrehbandian. Finding the piecewise linear
frontier production function in data envelopment analysis. Applied Mathematics and Computation,
163:483–488, 2005.
[13] G. R. Jahanshahloo, J. Vakili, and S. M. Mirdehghan. Using the minimun distance of DMUs from
the frontier of the PPS for evaluating group performance of DMUs in DEA. Asia-Paciﬁc Journal
of Operational Research, 29(2):1250010, 2012.
[14] J. J. L´
opez-Esp´ın, J. Aparicio, D. Gim´enez, and J. T. Pastor. Benchmarking and data envelopment
analysis. An approach based on metaheuristics. In Proceedings of the International Conference
on Computational Science, ICCS 2014, Cairns, Queensland, Australia, 10-12 June, 2014, pages
390–399, 2014.
[15] J. T. Pastor, J. L. Ruiz, and I. Sirvent. An enhanced DEA Russell graph eﬃciency measure.
European Journal of Operational Research, 115:596–607, 1999.

383

