Procedia Computer Science
Volume 51, 2015, Pages 2789–2793
ICCS 2015 International Conference On Computational Science

Reduction of Computational Load for MOPSO
Mathew Curtis and Andrew Lewis
Griﬃth University, Brisbane, Queensland, Australia
mathew.curtis@griffithuni.edu.au
a.lewis@griffith.edu.au

Abstract
The run time for many optimisation algorithms, particularly those that explicitly consider multiple objectives, can be impractically large when applied to real world problems. This paper
reports an investigation into the behaviour of Multi-Objective Particle Swarm Optimisation
(MOPSO), which seeks to reduce the number of objective function evaluations needed, without degrading solution quality. By restricting archive size and strategically reducing the trial
solution population size, it has been found the number of function evaluations can be reduced
by 66.7% without signiﬁcant reduction in solution quality. In fact, careful manipulation of
algorithm operating parameters can even signiﬁcantly improve solution quality.
Keywords: Multi-objective Particle Swarm Optimisation, MOPSO, computational eﬃciency

1

Introduction

Particle swarm optimisation (PSO), originally introduced by James Kennedy and Russell Eberhart [7], is a valuable technique for solving single objective problems. Multi-objective optimisation (MOO) consists of methods for optimising multiple objective functions with conﬂicting
objectives. The interactions between the multiple objectives cause a trade-oﬀ between objectives. Extending the PSO strategy for solving MOO problems was proposed by Moore and
Chapman in an unpublished manuscript in 1991 [9]. In 2002, multi-objective PSO (MOPSO)
systems began to appear in the literature [2, 4, 5, 6]. For a problem with competing objectives,
iterations of a MOPSO program allow each particle to attempt to ﬁnd an optimal solution as
close as possible to the Pareto-optimal front by moving through the parameter-space.

1.1

Computational cost for MOPSO

The run time for a MOPSO program can be very large when it is utilised for real world problems.
This is primarily caused by the often excessively large computing time taken to evaluate the
solution ﬁtness. Current work using Binary MOPSO-based optimisation on some antenna
This research has been supported in part by Australian Research Council grant DP130102098.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.435

2789

Reduction of Computational Load for MOPSO

Curtis and Lewis

design problems requires more than 15 minutes per function evaluation, and is projected to rise
to over 60 minutes to satisfy frequency range and spatial resolution requirements [5]. When
extrapolated to the tens of thousands of evaluations required for metaheuristic optimisation
algorithms this becomes very important, as it can determine whether the optimisation exercise is
practical within a business context. Finding ways to cut down on this time would be very useful.
There has been research into adaptive velocity parameters and varying the velocity values
themselves [3]. There has also been exploration into limiting the non-dominated archive [13,
1, 8], and adaptive particle populations have been trialled [13]. This latter example, adaptive
population, is of interest because it could lead to a decrease in the number of particles without
a signiﬁcant loss in solution eﬀectiveness.
Using ideas similar to inoculating the initial population [10], the initial population incorporates knowledge of the domain by using strategies that utilise knowledge discovered by one
or more high quality solutions. This can be done by running the algorithm again but ﬁrst
injecting knowledge found by high quality solutions back into the initial population. The approach tested tries to allow the particles to explore using a large population in an attempt to
ﬁnd high quality solutions quickly. Then the population is reduced, the non-dominated archive
seeded with carefully chosen, high quality solutions and allowed to forget its prior exploration
knowledge (such as personal best values). This should allow the reduced population to continue
to search with a stochastic nature without falling into traps such as local optimum. The idea
of forgetting was observed to improve performance in some PSO and PSO-variant algorithms
on a range of benchmark functions [11].
One of the motivations behind this study is to determine the loss of overall eﬀectiveness,
if any exists, when using time varying particle populations. The intention is to determine if
reducing the CPU time is worth the loss of solution quality. It should be noted that throughout
the literature, experiments have been implemented by ﬁrst running the simulation (for a small
number of iterations) with a large initial population of particles. The experiments were then
performed using smaller initial populations whose positions were chosen from the more eﬀective
higher population run [12]. This allows the particles to begin simulations with more knowledge
which may help their search for the Pareto-optimal front [10].

2

Methodology

The methods tested were applied to the benchmark test functions ZDT1-ZDT4 in 2 dimensions.
Convergence was tested by taking the mean distance from the non-dominated particles in the
archive to the true Pareto-front. Coverage was tested by partitioning the objective-space into m
segments, where m is the number of non-dominated particles within the archive. If one or more
particles were found within a segment then that segment was given a value of 1. If no particles
were present then it was given a value of 0. The percentage of ﬁlled segments compared to the
total number of segments was taken to be the coverage value.

2.1

Summary of Choices Used in Algorithm

A stochastic model was used for the initial positions by using randomised positions and velocities. A predetermined limit for the number of non-dominated particles within the archive was
enforced for speciﬁc experiments. The particles were removed randomly to maintain the archive
limit. A single personal best value was selected. For each iteration an individual particles personal best was compared with its new position. The personal best was only replaced if it was
dominated by the new position. The method used for selecting the global best position was
2790

Reduction of Computational Load for MOPSO

Curtis and Lewis

roulette wheel selection for the non-dominated archive (which simply picks one of the leaders
at random).

3

Analysing Varying Populations

During a simulation run it is possible to vary the populations. Varying the population also
changes the number of mappings from parameter space to objective space, potentially reducing
the computational load.
An analysis of the coverage and convergence was performed for each iteration for an entire
simulation run. The aim was to see if there was a speciﬁc time within a run when the population
could be reduced without causing a signiﬁcant deterioration in the ﬁnal solutions. Benchmark
functions ZDT1-ZDT4 were run 100 times for 100 iterations. Three diﬀerent initial populations
were used (10, 30 and 60). Figure 1 shows the time evolution of average coverage for each
function, for each of the three initial population sizes. (The convergence was tested but not
recorded as it decreased monotonically for ZDT1-4, with quasi-logarithmic improvement. This
is what might intuitively be expected.) The results of the time evolution analysis revealed
that the coverage does not always evolve monotonically. As may be seen in Figure 1, coverage
for ZDT3 and ZDT4 does not evolve in such a smooth monotonic manner. One of the most
important observations was the ﬁrst rise in coverage occurred over the ﬁrst 20 iterations for
ZDT1-ZDT2.
In Figure 1, diﬀerent behaviour may be observed for the three diﬀerent populations (10, 30
and 60) from left to right. The coverage and convergence were observed to improve for higher
initial populations for each ZDT function.
Using what was observed in all the simulations the analysis for dropping the population
within a single simulation was performed. An initial population of 60 particles was run for 20
iterations. This was chosen because the ﬁrst rapid rise in coverage occurred over the ﬁrst 20
iterations for ZDT1 - ZDT4. For the rest of the 80 iterations the particle population was then
reduced to 10. The 10 particles were selected from the original archive by dividing the objective
space into 10 even sections (based on objective 1) with a random archive particle chosen from
each section. They were allowed to forget any previous knowledge from the high population
run (such as personal best values). There were 100 repeated runs for each case. The data is
summarised in Table 1, presented as average coverage, as a percentage, and convergence as
mean±SD.

Coverage
Convergence

Coverage
Convergence

ZDT1
No Reduction
Reduction
69.4379
72.5820
0.0066±0.0020 0.0052±0.0011
ZDT3
No Reduction
Reduction
42.2910
43.1540
0.0170±0.0056 0.0137±0.0024

ZDT2
No Reduction
Reduction
61.4803
70.4974
0.0148±0.0075 0.0069±0.0014
ZDT4
No Reduction
Reduction
55.0063
70.6594
0.2014±0.1888 0.0021±0.0005

Table 1: Average coverage and convergence over 100 runs comparing between initial population
of 60 and time varying population (60 to 10).
The test run (No reduction in population) uses 6000 mappings (a mapping between
parameter-space and objective space by evaluation of the objective function). Table 1 shows
2791

Reduction of Computational Load for MOPSO

Curtis and Lewis

Figure 1: Average coverage of non-dominated particles over 100 iterations with initial populations of 10, 30, and 60. ZDT1, ZDT2, ZDT3, and ZDT4 are shown in rows 1,2,3 and 4,
respectively.

that for ZDT1-ZDT4 the convergence and coverage improved when the population was dropped
(when comparing to the test run). The minimum increase in coverage was greater than 1%
(ZDT3) and went as high as 15% (ZDT4). The minimum improvement in convergence was
greater than 5% (ZDT1) and went as high as 98% (ZDT4). The largest improvements were
observed in ZDT4. ZDT4 requires particles to pass local minima in order to converge to the
true Pareto front. It appears that selecting a small number of points from the (elite) archive and
forgetting past information may remove or reduce the attraction to local minima, signiﬁcantly
enhancing convergence. The general improvements in coverage across all benchmark functions
is attributed to the deliberate selection of a well-spaced sampling from the archive. These points
will then act as more uniformly distributed guide particles, overcoming the inherent bias in the
2792

Reduction of Computational Load for MOPSO

Curtis and Lewis

ﬁrst objective that is a characteristic of the ZDT functions.

4

Conclusion

A primary motivation of the research was to explore the technique of time varying populations
in order to reduce the computational cost of a canonical MOPSO algorithm. A reduction
of 66.7% in objective function evaluations did not see any degradation to the ﬁnal solutions
for both coverage and convergence. In fact in most cases both the coverage and convergence
improved for the ﬁnal solutions. The coverage was observed to have a minimum increase of
over 1% (ZDT3) and maximum of 15% (ZDT4). The minimum improvement in convergence
observed was 5% (ZDT1) with the max going as high as 98% (ZDT4). What appeared to be
important was the way the new smaller population was chosen from the larger initial population;
some care needs to be taken to ensure a reasonably uniform sampling across the range of archive
members to achieve the gains in quality of results.
This paper reports preliminary observations on benchmark problems. Further experiments
are required to determine whether the signiﬁcant gains are achievable across a range of real
world problems.

References
[1] M. Bogdan, J. Wilamowski, and D. Irwin. Intelligent Systems. CRC Press, 2011.
[2] C. Coello Coello and S. Lechunga. MOPSO: A proposal for multiple objective particle swarm
optimization. In Proc IEEE Congress on Evolutionary Computation, pages 1051–1056, 2002.
[3] S. Helwig, F. Neumann, and R. Wanka. Particle swarm optimization with velocity adaptation. In
Proc. of the International Conference on Adaptive and Intelligent Systems, pages 46–151, 2009.
[4] T. Hendtlass. Fitness estimation and the particle swarm optimisation algorithm. In Proc. Congress
on Evolutionary Computation, pages 4266–4272, 2007.
[5] J. Hettenhausen. Private communication, 2014.
[6] X. Hu and R. Eberhart. Multiobjective optimization using dynamic neighborhood particle swarm
optimization. In Proc. Congress on Evolutionary Computation, pages 12–17, 2002.
[7] J. Kennedy and R. Eberhart. Particle swarm optimization. In Proc. IEEE International Conference
on Neural Networks, pages 1942–1948, 1995.
[8] M. Laumanns, E. Zitzler, and L. Thiele. On the eﬀects of archiving, elitism, and density based
selection in evolutionary multi-objective optimization. In Evolutionary Multi-Criterion Optimization (EMO 2001) Proc. Lecture Notes in Computer Science, volume 1993, pages 181–196. Springer,
2001.
[9] J. Moore and R. Chapman. Application of particle swarm to multiobjective optimization. Technical
report, Department of Computer Science and Software Engineering, Auburn University, 1999.
[10] P. Surry and N. Radcliﬀe. Innoculation to initialise evolutionary search. In Evolutionary Computing: Proc. Of AISB Workshop, pages 269–285, 1996.
[11] R. Tang and Y. Fang. Modiﬁcation of particle swarm optimization with human simulated property.
153:319–331, 2015.
[12] G. Toscano-Pulido, C. Coello Coello, and L. Santana-Quintero. EMOPSO: A multi-objective
particle swarm optimizer with emphasis on eﬃciency. In Proc. of the 4th international conference
on Evolutionary Multi-criterion Optimization, pages 272–285, 2007.
[13] M. Woolard and J.E. Fieldsend. On the eﬀect of selection and archiving operators in manyobjective particle swarm optimization. In Proc. of 2013 Genetic and Evolutionary Computation
Conference, pages 129–136, 2013.

2793

