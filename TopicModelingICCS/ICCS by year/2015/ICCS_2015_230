Procedia Computer Science
Volume 51, 2015, Pages 2883–2887
ICCS 2015 International Conference On Computational Science

Fully automatic 2D hp-adaptive Finite Element Method for
Non-Stationary Heat Transfer
Pawel J. Matuszyk, Marcin Sieniek, and Maciej Paszy´
nski
1

2

Baker Hughes Inc., Houston Technology Center, Houston, TX, USA
Department of Computer Science, AGH University of Science and Technology, Krak´
ow, Poland

Abstract
In this paper we present a fully automatic hp adaptive ﬁnite element method code for nonstationary two dimensional problems. The code utilizes the α-scheme for time discretization
and fully automatic hp adaptive ﬁnite element method discretization for numerical solution of
each time step. The code is veriﬁed on the examplary non-stationary problem of heat transfer
over the L-shape domain.
Acknowledgements: The work of MP is supported by Polish National Science Center grant
¯
no. 2012/07/B/ST6/01229.
The work of MS is supported by a Dean’s grant.
Keywords: ﬁnite element method, non-stationary problems, fully automatic, hp adaptivity

1

Motivation

The the self-adaptive hp ﬁnite element method code (hp-FEM) has been developed by the group
of prof. Demkowicz for stationary elliptic and Maxwell problems in two and three dimensions
[6, 7]. The code generates a sequence of computational grids delivering exponential convergence
of the numerical error with respect to the mesh size, as predicted by theory [4, 5]. In this paper
we present an extension of the code for parabolic problems. We test our code on the exemplary
non-stationary heat transfer problem over the L-shape domain. This code is a prototype for
transient problems.

2

Modelling a non-stationary parabolic problem

In this section we present a model parabolic problem solved by our non-stationary adaptive
hp-FEM.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.452

2883

2d hp-FEM for n-SHT

2.1

P.J. Matuszyk et al.

Strong form of the parabolic problem

The strong form of our model parabolic problem is given by
⎧
ρcp u˙ − ∇ · (k∇u) = f
⎪
⎪
⎪
⎨ u = u (t)
D
⎪
k n · ∇u = β (uN (t) − u) + q(t)
⎪
⎪
⎩
u(x, 0) = u0 (x)

in Ω × I
on ΓD × I
,
on ΓN × I
in Ω

(1)

where u is the unknown scalar ﬁeld, u˙ = ∂u/∂t, Ω ∈ R2 is an open, bounded domain with a
Lipschitz continuous boundary Γ = ∂Ω = ΓD ∪ ΓN , I is a time domain, and ρ, cp , k, β, f ,
uD , uN , and u0 are suitable problem data deﬁned on space-time domain and H 1 is a standard
Sobolev space.

2.2

Discretization in time and space

FE-discretization in space gives the following matrix system: Mu˙ + Ku = f where M is
the mass matrix, K is the stiﬀness matrix, and f is a load vector. Applying the trapezoidal
rule for the time discretization we obtain the following algebraic problem (M + α δK) uk+1 =
[M − (1 − α) δK] uk + δf k where uk is a known solution from the previous time step (and u0 is
given), uk+1 is an unknown solution from the current time step, δ is a time step, and parameter
α ∈ [0, 1] that gives diﬀerent time integration schemes, e.g., for α = 0 we obtain explicit Euler
scheme, and for α = 0.5 — Crank-Nicolson scheme, which we use hereafter.

3

Automatic hp-adaptive 2D code for parabolic problems

The non-stationary self-adaptive hp-FEM code presented utilizes identical automatic hp adaptive algorithm for every time step, like the stationary code presented in [6]. In particular, the
code utilizes quadrilateral ﬁnite elements with hierarchic shape functions (integrated Legendre
polynomials). It allows for variable order of interpolation over ﬁnite elements, preserving C 0
inter-element continuity. The hp-FEM code supports 1-irregularity rule with hanging nodes.
In other words, an edge can be broken only once without breaking adjacent large elements.

4

Strategy for dealing with incompatible grids

The ﬁnite elements are stored in a tree-like structure, in order to allow for convenient mesh reﬁnements. The following rules apply: (1) Actual mesh is represented as leaves of the reﬁnement
tree. (2) The tree describes unambiguously a sequence of reﬁnements. (3) Succeeding meshes
from the sequence of reﬁned grids are nested. The exemplary sequence of mesh reﬁnements and
the corresponding reﬁnement trees are presented in Figure 1b.
6

8

4

6

7

2
9

5

'&%$
!"#gx
Ñ1 aaxx
ÑÑ aaaxxxxx
ÑÑ '&%$
!"#
'&%$
!"#
'&%$
!"# '&%$
5
2 p !"#
p Ñ 3 aa 4
pppÑÑÑ aaa
Ñ '&%$
ppp'&%$
'&%$
!"#
!"#
'&%$
!"#
!"#
7
6
8
9

(a) mesh + reﬁnement tree, level X

2884

2

4

10 11
12 13

8

9

14

15

'&%$
!"#
{ 1 gh gg
gg 
{{
'&%$
{{ '&%$
'&%$
!"#
'&%$
!"#
!"#
5I
3g
2 mm !"#
4
II
mm{{{ ggg
m
m
g
II
mm {{
m
m
'&%$
!"#
'&%$
!"#
'&%$
!"#
'&%$
!"#
II

7g
6
8
9

{ gg
II
{
gg 
{
{
()*+
{ ()*+
/.-,
()*+
/.-,
()*+
/.-,
/.-,
()*+
/.-,
()*+
/.-,
10
13
15
11
12
14

(b) mesh + reﬁnement tree, level X+1

2d hp-FEM for n-SHT

P.J. Matuszyk et al.

In the non-stationary version of self-adaptive hp-FEM, there is a need for storing the old
solution uk , generation of the new mesh, and transferring the old solution onto a new mesh.
This is not an easy task, since uk must be expressed in terms of degrees-of-freedom of a FE
on the new mesh. In general case, the old and the new mesh may be incompatible (in a sense
of reﬁnement tree) due to the evolution of solution u in the time; compare two grids and the
corresponding reﬁnement trees in Figure 2.
6
2

4

10 11

8

12 13

8

9

6

14

15

10

14
18 19
20 21

16

15

13

17

'&%$
!"#
z 1 hhhh
zzz
'&%$
!"#
!"#
3D
2O
m'&%$
m
m
m
DD
mmm
'&%$
!"#
'&%$
!"#
DD
5
4
z
z

DD
z

z '&%$
!"#
'&%$
!"#

DD
7h
6

hh


'&%$
!"#
()*+
/.-,
/.-,
/.-,
/.-,
'&%$
!"#
8
9
13 ()*+
10 ()*+
12 h()*+
11 h
hh
zz
zz hh
z
z
()*+
/.-,
/.-,
/.-,
/.-,
/.-,
/.-,
/.-,
()*+
15 ()*+
18 ()*+
19 ()*+
20 ()*+
16 ()*+
14 /.-,
21 ()*+
17

'&%$
!"#
{ 1 gh gg
gg 
{{
'&%$
{{ '&%$
'&%$
!"#
'&%$
!"#
!"#
5I
3g
2 mm !"#
4
II
mm{{{ ggg
m
m
g
II
mm {{
m
m
'&%$
!"#
'&%$
!"#
'&%$
!"#
'&%$
!"#
II

7g
6
8
9

{ gg
II
{
gg 
{{

{
/.-,
()*+
/.-,
()*+
/.-,
()*+
/.-,
()*+
/.-,
()*+
/.-,
()*+
10
13
15
11
12
14

Figure 2: (a) mesh from time step uk ; (b) mesh from time step uk+1 ; (c) reﬁnement tree - step
uk ; (d) reﬁnement tree - step uk+1
There are two possible strategies for dealing with reﬁnements in the consecutive time steps.
The ﬁrst strategy assumes that the new solution is obtained by the execution of the hpreﬁnement strategy starting from the very coarse mesh, at every time step. The advantage
of this approach is that the reﬁnement tree can freely adapt to the new solution. On the other
hand, full process of the hp-adaptation is needed for one time step, and the solution from the
previous time step must be projected onto the new mesh in every iteration of the self-adaptive
hp-FEM for a new time step. The second strategy assumes that the new solution is obtained by
execution of the hp-reﬁnement strategy starting from the previous time step mesh, unreﬁned
in some way. In this case, only last few steps of the the hp-adaptation procedure are needed
for one time step. On the other hand, a special strategy of mesh unreﬁnement is needed, which
can also result in possible lost of accuracy of the old solution.
In this paper we select the ﬁrst strategy, since it is easier to implement. The resulting
self-adaptive hp-FEM algorithm for non-stationary problems is presented in Figure 3a

5

Numerical experiments
S TAR T

50

S olve/G enerate
Init S olution u0

•

∗•

A utomatic hp-algorithm
for new solution

Muk+1+Kuk+1=f(uk)
Y

for each G auss point:
- localization of F E
- calculation of uk(ξ,η)

for each F E :
uk calculated by solution
local linear problem

k < k_ max

Relative error, %

S tore old solution uk

S etup initial coarse mesh

20

•

∗◦
∗◦

•

10
5

◦

•
•

•

•

∗ ◦

•

•

∗ ◦ ◦◦

∗

•
•
•
••

N
S TO P

(a) The fully automatic hp adaptive ﬁnite element
method algorithm for non-stationary problems

0.020.050.1 0.2 0.5 1 2 5 10 20 50
DOFs, n · 103

(b) Norm of error vs. number DOFs

In this simulation we select the initial temperature distribution u0 at t = 0. The convective
heating and cooling starts at t = 0 with k = 1, ρ = 1, cp = 1, β = 1, uN = 1 (top left
edge), and uN = −1 (bottom edge). There are no internal heat sources f = 0 and ﬂux
2885

2d hp-FEM for n-SHT

P.J. Matuszyk et al.

through the boundary q = 0. The self-adaptive hp-FEM algorithm executed at every time step
performs hp adaptations until the relative error is less than 5%. The temperature distributions
are presented in Figure 4. For the numerical solution of the computational problems over hpreﬁned grids in particular time steps we utilize the multi-frontal direct solver [8, 9] with MUMPS
package [1, 2, 3]. The self-adaptive hp-FEM delivers an exponential computational cost at every
time step of the non-stationary problem, as presented in Figure 3b. The hp-FEM strategy is
compared against the uniform h adaptation with uniform polynomial order of approximation
p = 1 (◦), p = 2 (∗), and p = 3 ( ) in Figure 3b.

(a) t = 0.001

(b) t = 0.02

(c) t = 0.04

(d) t = 0.1

(e) t = 0.15

(f) t = 1.5

Figure 4: Temperature distribution

6

Conclusion

The automatic hp-adaptive FEM code was extended to solve the non-stationary heat transfer
problem. The hp-reﬁnement iterations were started from the initial coarse mesh for every new
time step. For each new time step, the previous time step solution with its optimal mesh was
stored. The previous step solution was projected into a sequence of meshes generated in current
iteration and utilized to compute the next time step. In our simulation we have not encountered
a deadlock problem as reported in [20].

References
[1] Amestoy P.R. and Duﬀ, I.S.: Multifrontal parallel distributed symmetric and unsymmetric solvers,
Computer Methods in Applied Mechanics and Engineering, (2000) 184, 501-520.
[2] Amestoy, P. R. and Duﬀ, I. S. and Koster, J. and L’Excellent, J.Y.: A fully asynchronous multifrontal solver using distributed dynamic scheduling, SIAM Journal of Matrix Analysis and Applications, (2001) 1(23), 15-41.

2886

2d hp-FEM for n-SHT

P.J. Matuszyk et al.

[3] Amestoy, P. R. and Guermouche, A. and L’Excellent, J.-Y. and Pralet, S.: Hybrid scheduling for
the parallel solution of linear systems, Computer Methods in Applied Mechanics and Engineering,
(2001) 2(32), 136-156.
[4] I. Babuˇska, B. Guo: The hp-version of the ﬁnite element method, Part I: The basic approximation
results, Computational Mechanics, 1 (1986) 21-41.
[5] I. Babuˇska, B. Guo B.: The hp-version of the ﬁnite element method, Part II: General results and
applications. Computational. Mechanics, 1 (1986) 203-220.
[6] Demkowicz, L.: Computing with hp-Adaptive Finite Elements, Vol. I. One and Two Dimensional
Elliptic and Maxwell Problems, Chapman and Hall/Crc Applied Mathematics and Nonlinear Science
(2006)
[7] Demkowicz, L. and Kurtz, J. and D. and Paszy´
nski, M. and Rachowicz, M. and Zdunek, A.:
Computing with hp-Adaptive Finite Elements, Vol. II. Frontiers: Three Dimensional Elliptic and
Maxwell Problems with Applications, Chapman and Hall/Crc Applied Mathematics and Nonlinear
Science (2007)
[8] Duﬀ, I. S. and Reid, J. K.: The multifrontal solution of indeﬁnite sparse symmetric linear systems,
ACM Transactions on Mathematical Software (1983) 9, 302-325.
[9] Duﬀ, I. S. and Reid, J. K.: The multifrontal solution of unsymmetric sets of linear systems, SIAM
Journal on Scientiﬁc and Statistical Computing, (1984) 5, 633-641.
[10] Matuszyk, P. and Paszy´
nski, M.: A Fully Automatic hp Finite Element Method for Stokes Problem
in Two Dimensions, Computer Methods in Applied Mechanics and Engineering (2008) 197(51-52),
4549-4558.
[11] Paszy´
nski, M. and Pardo, D. Paszy´
nska: A. Parallel multi-frontal solver for p adaptive ﬁnite
element modeling of multi-physics computational problems, Journal of Computational Science (2010)
1(1) (2010) 48-54.
[12] Paszynska, A. and Paszynski, M. and Grabska,E.: Graph Transformations for Modeling hpAdaptive Finite Element Method with Mixed Triangular and Rectangular Elements, Lecture Notes
in Computer Science, (2009) 5545, 875-884.
[13] Paszynska, A. and Paszynski, M. and Grabska, A.: Graph transformations for modeling hpadaptive Finite Element Method with triangular elements, Lecture Notes in Computer Science (2008)
5103, 604-613.
[14] Paszynska A., Grabska E., Paszynski M., A Graph Grammar Model of the hp Adaptive Three
Dimensional Finite Element Method. Part I, Fundamenta Informaticae, (2012) 114(2) 149-182.
[15] Paszynska A., Grabska E., Paszynski M., A Graph Grammar Model of the hp Adaptive Three
Dimensional Finite Element Method. Part II, Fundamenta Informaticae, (2012) 114(2) 183-201.
[16] Paszynski, M.: On the Parallelization of Self-Adaptive hp-Finite Element Methods Part I. Composite Programmable Graph GrammarModel, Fundamenta Informaticae (2009) 93(4) 411-434.
[17] Paszynski, M.: On the Parallelization of Self-Adaptive hp-Finite Element Methods Part II. Partitioning Communication Agglomeration Mapping Analysis, Fundamenta Informaticae (2009) 93(4)
435-457.
[18] M. Paszynski, D. Pardo, A. Paszynska, L. Demkowicz, Out-of-core multi-frontal solver for multiphysics hp adaptive problems, Procedia Computer Science, 4 (2011) 1788-1797
[19] Paszynski, M. and Schaefer, R.: Graph grammar-driven parallel partial diﬀerential equation solver,
Concurrency and Computation: Practice and Experience, (2010) 22(9) 1063-1097,
[20] A. Szymczak, A. Paszy´
nska, M. Paszy´
nski, D. Pardo: Preventing deadlock during anisotropic 2D
mesh adaptation in hp-adaptive FEM, Journal of Computational Science (2013)

2887

