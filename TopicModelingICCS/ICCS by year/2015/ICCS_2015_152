Procedia Computer Science
Volume 51, 2015, Pages 2827–2831
ICCS 2015 International Conference On Computational Science

A clustering-based approach to static scheduling
of multiple workflows with soft deadlines
in heterogeneous distributed systems
Klavdiya Bochenina, Nikolay Butakov, Alexey Dukhanov, Denis Nasonov
ITMO University, Saint Petersburg, Russian Federation
k.bochenina@gmail.com, alipoov.nb@gmail.com, dukhanov@niuitmo.ru, denis.nasonov@gmail.com

Abstract
Typical patterns of using scientific workflow management systems (SWMS) include periodical
executions of prebuilt workflows with precisely known estimates of tasks’ execution times.
Combining such workflows into sets could sufficiently improve resulting schedules in terms of
fairness and meeting users’ constraints. In this paper, we propose a clustering-based approach to static
scheduling of multiple workflows with soft deadlines. This approach generalizes commonly used
techniques of grouping and ordering of parts of different workflows. We introduce a new scheduling
algorithm, MDW-C, for multiple workflows with soft deadlines and compare its effectiveness with
task-based and workflow-based algorithms which we proposed earlier in [1]. Experiments with several
types of synthetic and domain-specific test data sets showed the superiority of a mixed clustering
scheme over task-based and workflow-based schemes. This was confirmed by an evaluation of
proposed algorithms on a basis of the CLAVIRE workflow management platform.
Keywords: workflow scheduling, multiple workflows with soft deadlines, static scheduling algorithms, scientific
workflow management systems

1 Introduction and related work
Scientific workflows (directed acyclic graphs (DAGs) of tasks) are widely used to perform
multistage computationally intensive calculations. In this paper, we consider the problem of static
scheduling of multiple workflows with soft deadlines. This problem arises during a periodical
execution of prebuilt workflows on a fixed, non-extendable set of resources. Different users have
different requirements for the urgency of the results of calculations. While using a static set of
resources, we cannot guarantee that all workflows will finish their execution in time. So, the goal of
scheduling is to tune a partition of resources between different workflows, taking into account their
soft deadlines (i.e. preferable finishing times). As an example of such a problem, one can consider an
application of scientific workflows in education when students run workflows during practical work,
and the result of execution should be received before a subsequent lesson. Note that, in the case of
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.442

2827

A clustering-based approach to static scheduling...

Klavdiya Bochenina et al.

cyclic execution of workflows on a fixed set of resources, one can gather sufficiently accurate
estimations of tasks’ execution times to apply static scheduling methods.
There are two main approaches to the static scheduling of multiple workflows in heterogeneous
systems. The first approach (implemented in algorithms FPFT, FPCT [2], MWGS4, and MWGS2 [3])
is based on a merging of all tasks from multiple workflows into one larger workflow, and scheduling
this workflow using any single workflow scheduling algorithm. The other approach uses a
prioritization of workflows in a set to find the most efficient order of scheduling. Bittencourt and
Madeira, in [4], proposed an interleave algorithm where workflows are clustered independently with
the use of the Path Clustering Heuristic (PCH) algorithm, and then clusters from different DAGs are
executed in a round-robin fashion. All mentioned algorithms are aimed at minimizing the overall
makespan or to provide a fairer distribution of resources between workflows without taking into
account their preferable finishing times. So the main goal of our study is to propose an approach to a
static scheduling of multiple workflows considering soft deadlines during prioritization of tasks and
workflows.

2 An integral criterion of schedules’ quality
A mathematical formulation of a problem of multiple deadline-constrained workflows for a nondedicated heterogeneous environment was introduced in our previous work (see the details in [1]). As
we schedule multiple workflows with different computational complexities and soft deadlines
simultaneously, there is a need for a unified metric to compare resulting schedules. This metric (we
call it the integral criterion and denote it as U ) is aimed at estimating the two most important
properties of a schedule: (i) the level to which the soft deadlines are met; (ii) the fairness of
distribution of resources between workflows. We assume that U  >0;1@ achieves its maximum value,
1, when all deadlines are met, and its minimum value, 0, when none of the tasks were assigned to a
resource; so a better schedule will have a larger integral criterion.
Let NWF be the number of workflows to schedule. We define a tuple tsi , tci , di  , where tsi and
tci – the start and completion time of the i-th workflow ( 1 d i d NWF ) in the schedule, d i – its soft
max^tci  di ,0` . The length of
max di ), so tsi should be less than

deadline. The fine for violation of the deadline is calculated as Finei
the planning period, T , is set equal to a maximum deadline ( T

i

T . As a set of resources is static, some tasks may not have time to start execution. For such tasks, we
assume that they are executed consequently with average values of execution and communication

times. The maximum fine for the i-th workflow, Fineimax , is achieved when all of its tasks are not
assigned to resources. We propose to use the relative average fine, Fine , to estimate the level to
which the soft deadlines are met:

Fine

1

NWF

 ¦

Finei

.
(1)
Fineimax
The relative average fine does not allow us to quantify the fairness of the distribution of fines. To
measure it, we introduce the metric referred to as Fairness ( 1 d i, j d NWF ):

NWF

i 1

Fairness 1  max
i, j

Finei  Fine j
Fineimax

.

2828





U1  Fairness  U2  1  Fine ,
1 – the weighting coefficients (we used U1 0.5 , U 2 0.5 ).

Then, the integral criterion of schedules’ quality is defined as U

where U1 , U 2  >0;1@ , U1  U 2

(2)

A clustering-based approach to static scheduling...

Klavdiya Bochenina et al.

3 A clustering-based approach to a static scheduling of
multiple workflows with soft deadlines
The essence of a clustering-based approach is that the planning process is divided into three main
stages: (i) clustering – a creation of groups (clusters) of tasks, (ii) ordering – a search for consistent
order of clusters, and (iii) scheduling – a search for final mapping of tasks on resources for all clusters
according to the order. Here, we introduce a new algorithm for scheduling multiple workflows with
soft deadlines, which is denoted as MDW-C (Multiple Deadline-constrained Workflows – Clusteringbased). In MDW-C, we use a definition of the subdeadline d ij for the j -th task of the i -th workflow

Taskij from our previous work [1]. The start time of the task is defined as tsij
its average execution time. A cluster, C , is characterized with: (i) d (C )

min tsij , (iii) weight w(C )

dij  tij , where tij is

max dij , (ii) tsC 

¦ tij , and (iv) length l (C) d C   tsC  , where i, j  : Taskij  C . To

form clusters with approximately equal weights and lengths we try to minimize f SetC 

'w / 'wmax  L / Lmax , where SetC

^C1,...,Ck ,...,CN ` is a current set of clusters, and N C
C

number of clusters. 'w is the mean difference of clusters’ weights, 'w max
L

¦ l Ck  – the sum of clusters’ lengths, Lmax
k

is a

¦ wCk  / 2 ,
k

¦ tij – maximum possible sum of clusters’ length.

i, j

Algorithm 1. Clustering (for the i-th workflow)
Nti – a number of tasks of the i-th workflow
1: for j 1..Nti
2:
C j m Taskij , SetC = SetC C j

Algorithm 2. Ordering and scheduling
SetCi – a set of unscheduled clusters of the i-th
workflow, CF – a set of scheduled clusters,
NC m ¦ SetCi

3: Sort SetC in ascending order of deadlines
4: wasMerged = false, fbase = f(SetC)
5: do
6:
for k 2..NC  1
7:
Prev m { C1,...,Ck 1  Ck ,...,CN C }

1: while ( CF z NC )

8:

Next m { C1,...,Ck  Ck 1,...,CN C }

9:
minf = min(f(Prev), f(Next))
10:
if (minf < fBase)
11:
fbase = minf, wasMerged = true
12:
if (f(Prev) < f(Next)) SetC m Prev
13:
else SetC m Next
14:
end for
15: while (wasMerged and NC t 2 )

i * m workflow with min reserved time
SetCand m clusters with no parents in
SetCi*
4:
C * m cluster with max M from SetCand
5:
Schedule tasks from C *
6:
Recalculate start time, deadline, weight
and length of C * and all of its successors
7:
SetCi * SetCi * \ ^C *`
8: CF = CF  ^C *`
end while
w X  / l  X 
d
 U d  min
M  X  U wl 
wlmax
d X 

2:
3:

At the beginning of clustering (Algorithm 1), each task is located in a separate cluster (lines 1, 2),
and clusters are sorted (line 3). After that, there begins the iterative process of clusters merging (lines
5–15). For each cluster from C2 to C N C 1 , we make an attempt to merge the current cluster with the
previous cluster (line 7) or the next cluster (line 8). If the value of f decreases (line 10), we modify
SetC according to the lowest value of f (lines 11–13). This process repeats while there can be any
successful mergers. After all workflows are clustered, their clusters are ordered and scheduled

2829

A clustering-based approach to static scheduling...

Klavdiya Bochenina et al.

(Algorithm 2). The tasks of the current cluster, C * , are mapped to resources using any single
workflow scheduling algorithm. At each loop of the cycle, we find the workflow with minimum
reserved time (line 2) and the set, SetCand , of candidate clusters (line 3). Then, we choose the cluster
with the maximum value of metric M (line 4). This metric has two components: (i) the normalized
ratio of the cluster’s weight to its length, (ii) the normalized deadline. In the definition of M U wl ,

U d are weighting coefficients, wlmax max wC  / l C  , d min min d C  , where C  SetCand . After
scheduling of C * , we update the parameters of clusters (line 6), and the sets of scheduled and
unscheduled (lines 7, 8) clusters. The process repeats until all clusters are scheduled.

4 A comparative study of the effectiveness of algorithms for
scheduling multiple workflows with soft deadlines
The experimental part of the study was aimed at comparing the quality of schedules provided by
MDW-T, MDW-W (these algorithms were introduced in our previous work [1]) and MDW-C in terms
of the integral criterion U . We use MDW-T as an algorithm for a single workflow scheduling in
MDW-W and for a cluster scheduling in MDW-C. The first set of experiments (Figure 1a) was
performed for Cybershake and Genome benchmark workflows. The size of workflows varied from 50
to 1000 tasks. The second set (Figure 1b,c) was performed for domain-specific workflows (see the
details in [5]): (i) the workflow for ensemble flood forecasting in Saint Petersburg (WF1); (ii) the
workflow for calculating a field of sea waves on the Baltic Sea (WF2). The size of WF1 varied from 8
to 503 tasks, while the size of WF2 varied from 24 to 264 tasks. One set of workflows consisted of 20
workflows of the same size. We used different sets of resources for each set of workflows. The size of
the resource pool was increased by enlarging the number of the workflows in a set.

Figure 1: Integral criterion for Cybershake(C), Genome(G) (a), WF1 (b), WF2 (c) (N – iteration index)

We simulated different levels of concurrency for resources, increasing the length of the planning
period T during N max iterations. The value of N max 12 (for Cybershake, Genome and WF1), and
N max 6 (for WF2) was chosen during preliminary testing as it was sufficient to achieve the
maximum value of U for at least one of the algorithms. The minimum length of planning period T1
was set up to the length sufficient to execute a single workflow of current size without violating the
deadline. For each Ti 1 , we increased the value of Ti by 0.125  T1 . For each iteration, we performed
five runs of the scheduling procedure with randomly assigned start times and deadlines. The resulting
value was calculated by averaging over the sets of different workflow sizes.
Our results presented in Figure 1 show that for the same lengths of T (i.e. for the same levels of
concurrency for resources), MDW-C outperforms MDW-W and MDW-T (average advantages of 7%
and 17% for Cybershake, 7% and 14% for Genome, 6% and 11% for WF1, and 9% and 17% for WF2,

2830

A clustering-based approach to static scheduling...

Klavdiya Bochenina et al.

respectively). In addition, MDW-C achieves the maximum value of U at earlier iterations; it means
that it can satisfy stricter time requirements without violating the deadlines.
To compare algorithms in a distributed environment, we performed experiments with Montage
workflows on a basis of the CLAVIRE e-Science infrastructure platform. The size of a test workflow
was equal to 20, the size of a set varied from 40 to 120, and T was set to N max 12 . As a set of
resources, we deployed 20 VMs (Oracle VirtualBox, Windows 7) on 2 blade servers (32×Intel Xeon
E5-2650 2.00 GHz, 96 GB RAM). The results (see Table 1) confirmed the superiority of MDW-C,
which demonstrates the maximum value of U for all the sets. Although a part of delayed tasks (during
real execution in comparison with the output of algorithms) is high (from 0.375 to 0.91 for MDW-T),
a delay of the entire workflow usually does not exceed 10% from T.
Average delay time of a
Integral criterion
Part of delayed tasks
Set
workflow (part of T)
size
40
60
80
100
120

MDW-T

MDW-W

MDW-C

MDW-T

MDW-W

MDW-C

MDW-T

MDW-W

MDW-C

1
1
0.93
1
0.99

1
1
0.98
1
0.99

1
1
1
1
1

0.725
0.71
0.73
0.70
0.91

0.518
0.7
0.65
0.88
0.775

0.675
0.7
0.375
0.74
0.83

0.0297
0.03
0.17
0.0048
0.10

0
0
0.07
0.049
0.09

0.001
0
0
0.034
0.07

Table 1: Schedule quality metrics for sets of Montage workflows executed in CLAVIRE

5 Conclusion
A combination of workflows into sets before scheduling helps not only to improve effectiveness of
resources’ utilization, but also to obtain more qualitative schedules. In this work, we presented a new
algorithm, MDW-C, implementing a clustering-based approach to schedule multiple workflows with
soft deadlines. We performed the experiments with benchmark and domain-specific test data
(including the execution in the CLAVIRE e-Science infrastructure platform). The results of
experiments show that MDW-C outperforms MDW-T and MDW-W in terms of the integral criterion,
which incorporates the level of deadline violation and the fairness of the distribution of fines.
This paper is financially supported by Ministry of Education and Science of the Russian
Federation, Agreement #14.578.21.0077 (24.11.2014).

References
1. Bochenina, K. (2014) A Comparative Study of Scheduling Algorithms for the Multiple
Deadline-constrained Workflows in Heterogeneous Computing Systems with Time Windows //
Procedia Comput. Sci. Elsevier Masson SAS, Vol. 29. pp. 509–522.
2. Zhao, H. & Sakellariou, R. (2006) Scheduling Multiple DAGs onto Heterogeneous Systems //
Parallel Distrib. Process. Simp. IPDPS’06. Washington: IEEE Computer Society, p. 14.
3. Hirales-Carbajal, A. et al. (2012) Multiple Workflow Scheduling Strategies with User Run
Time Estimates on a Grid // J. Grid Comput. Vol. 10, № 2. pp. 325–346.
4. Bittencourt, L. F. & Madeira, E. R. M. (2009) Towards the Scheduling of Multiple
Workflows on Computational Grids // J. Grid Comput. Vol. 8, № 3. pp. 419–441.
5. Ivanov, S. et al. (2012) Simulation-based collaborative decision support for surge floods
prevention in St. Petersburg // J. Comput. Sci. Elsevier B.V., Vol. 3, № 6. pp. 450–455.

2831

