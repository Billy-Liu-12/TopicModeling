Procedia Computer Science
Volume 51, 2015, Pages 1013–1022
ICCS 2015 International Conference On Computational Science

Object Oriented Programming for Partial Diﬀerential
Equations
E. Alberdi Celaya1 and J. J. Anza Aguirrezabala2
1
2

Department of Applied Mathematics, University of the Basque Country UPV/EHU, Bilbao, Spain
elisabete.alberdi@ehu.es
Department of Applied Mathematics, University of the Basque Country UPV/EHU, Bilbao, Spain
juanjose.anza@ehu.es

Abstract
After a short introduction to the mathematical modelling of the elastic dynamic problem, which
shows the similarity between the governing Partial Diﬀerential Equations (PDEs) in diﬀerent
applications, common blocks for Finite Element approximation are identiﬁed, and an Object
Oriented Programming (OOP) methodology for linear and non-linear, stationary and dynamic
problems is presented. Advantages of this approach are commented and some results are shown
as examples of this methodology.
Keywords: PDEs, FEM, OOP, ODEs

1

Introduction

Numerous phenomena of science and engineering are modelled mathematically using systems of
Partial Diﬀerential Equations (PDEs). Mass, momentum and energy balances, with appropriate
constitutive laws are the basis of a broad class of Boundary Condition (BC) problems from which
the macroscopic movement of solids, ﬂuids and gases with their corresponding forces can be
deduced. Flow solutions for heat and mass transport problems can be obtained in a similar
way, and interaction problems between diﬀerent media can be studied. The analytical solution
of PDEs in a general domain is not possible and it is necessary the use of numerical methods,
among which the Finite Element Method (FEM) is the most capable in general, to deal with
any shape domains and non-linear problems. The FEM has transformed the operating mode of
the design engineering in the last 50 years where the linear computations have been consolidated
as a mechanical and structural design tool.
Traditionally, the development of numerical software has been based on procedural languages
such as Fortran or C, but in the last years there is an increasing interest of applying the
paradigms of the Object Oriented Programming (OOP), which allow an eﬃcient reutilization,
extension and maintenance of the codes [8, 10]. In the procedural programming (sequential),
small changes in the data structures could lead to unpredictable eﬀects. On the other hand, in
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.
doi:10.1016/j.procs.2015.05.246

1013

OPP for Partial Diﬀerential Equations

Alberdi and Anza

the OOP, methods are linked to their speciﬁc data by the deﬁnition of abstract classes which
are set in objects. Hence, the polymorphism allows the same function to respond in diﬀerent
ways depending on the type of object it is acting on. The encapsulation increases the strength
and the security of the code as the object data is accessible only from its methods, and the
inheritance permits classes to be organized in hierarchies, making easier to reuse the code
without modiﬁcations, see Matlab [1].
In this paper an OOP architecture to solve PDEs, modelling the continuous media by the
FEM is presented. The paper is organized as follows: in Section 2 the formulation of the
mathematical modelling of the elastic dynamic problem is done. In Section 3 the objects
that conform this architecture are described: stationary computations in Section 3.1 and the
dynamical ones in Section 3.2. Finally in Section 4, the application of this methodology to
several problems is reported.

2

The Elastic Dynamic Problem

The general case of the elastic dynamic deformation with volume forces f and material density
ρ is modelled by the Navier’s dynamic equations [5]:
(λ + μ)∇ (∇ · u) + μ∇2 u + f = ρutt

(1)

being λ and μ the Lam´e constants. For 2D problems, u is the displacement vector with two
components u(x, t) and v(x, t), being x = (x, y), and the PDE system represents the momentum
conservation at each point of the domain. Considering the constitutive Lam´e equations:
σ = λ∇ · u + 2μ ∇u + (∇u)

T

(2)

the system (1) takes the form of the dynamic equilibrium:
∇ · σ + f = ρutt

(3)

which is the starting point to work with non-linear constitutive equations, such as plasticity,
and with non-linear large deformations.
The formulation is completed with the Initial and Boundary Conditions:
BC:

Dirichlet: u(x, t) = g(x, t),
Neumann: σ(u(x, t)) · n = t(x, t),

∀x ∈ Γg
∀x ∈ Γt

IC:

u(x, 0) = u0 (x)
ut (x, 0) = u0 (x)

(4)

The introduction of a vectorial weighting function, and the integration by parts leads to the
weak formulation that admits the virtual work interpretation:

Ω

δε : σdΩ =

Γt

δu · tdΓt +

Ω

δu · f dΩ −

Ω

δu · ρutt dΩ,

∀δu ∈ V

(5)

being V = w(x) ∈ H 1 (Ω) : w(x) = 0, ∀ x ∈ Γg and δε = 12 ∇δu + (∇δu)T .
We will take n nodes in the FEM discretization, and we will deﬁne the small support FEM
functions Nj (x), that verify Nj (xi ) = δji , being δ the Kronecker delta and i, j the indexes of
1014

OPP for Partial Diﬀerential Equations

Alberdi and Anza

the nodes. Then the 2D approximation in matrix format is given by:

u(x, t) ≈ uh (x, t) =

uh (x, t)
vh (x, t)

=

N1
0

···
···

Nn
0

0
N1

···
···

N

0
Nn

⎞
u1
⎜ .. ⎟
⎜ . ⎟
⎜ ⎟
⎜un ⎟
⎟
·⎜
⎜ v1 ⎟ = N · U
⎜ ⎟
⎜ . ⎟
⎝ .. ⎠
⎛

(6)

vn
U

The operation ε : σ is given by ε : σ = ε σ, where ε and σ are deﬁned by:
T

ε = (εx , εy , 2εxy )T
σ = (σx , σy , σxy )T

(7)

So, the approximation to the linear deformation εh can be written in matrix form as:
⎞
⎞
⎛
⎛∂
0
εx
∂x
u (x)
∂
εh = ⎝ εy ⎠ = ⎝ 0 ∂y ⎠ · h
= L · N ·U = B · U
vh (x)
∂
∂
2εxy h
B
∂y
∂x

(8)

N ·U

L

Considering the virtual displacement δu = N δU and the virtual deformation δε = BδU in
(5), the following system of diﬀerential equations is obtained [2]:
M U + F int (U ) = F ext

(9)
⎧
T
⎪
⎨M = Ω N ρN dΩ
.
being: F int (U ) = Ω B T σdΩ
⎪
⎩ ext
F (U ) = Ω N T f dΩ + Γt N T tdΓt
The linear version for plane strain is obtained with the constitutive law σ = Dε, where:
⎛
⎞
1−ν
ν
0
E
⎝ ν
1−ν
0 ⎠
(10)
D=
(1 + ν) (1 − 2ν)
1−2ν
0
0
2
being E and ν the Young and Poisson modulus respectively. Then (9) takes the ﬁnal form for
the linear elastic plane strain problem:
M U + KU = F ext ,

where: K =

Ω

B T DBdΩ

(11)

We observe that the FEM approximation to a linear or non-linear problem, originates a
system of Ordinary Diﬀerential Equations (ODEs) which is deﬁned by domain integrals. These
integrals can be calculated element by element and assembled. All the integrands involved are
formed by physical constants and by some operators acting on the FEM functions. Hence, if we
have common procedures for the numerical evaluation of element integrals of the type of (9) and
(11), the systems of equations associated to the FEM approximation of many problems could be
built. In the same way, if we have procedures to solve linear systems, linear stationary problems
will be solved. Iterative procedures will allow us to solve non-linear stationary problems. And
if we add procedures to solve ODEs, problems depending on time could be solved: solving a
linear system in each step when the PDE is linear or a non-linear system otherwise.
1015

OPP for Partial Diﬀerential Equations

Alberdi and Anza

(aggregation): an element object (objelef ), a material object (objmat) and the object objU.
After solving the problem, the solution is saved in objU to be used in the post-processing.
The Finite Element object (objelef ) computes the element contributions, performing the
loop in the points of integration. Integrands are sampled, weighted and added according to
the Gauss numerical integration formulae. This object has two objects among its data: the
parent element (objelep) and the point of integration (objpint). The parent element object
(objelep) provides the weights and the values of the shape functions (matrix N of (6)) and
their derivatives, in the integration points of the parent element. It also gives the methods that
compute the derivatives of the shape functions (matrix B of (7)) in the points of integration
of the real elements. Six types of parent elements have been implemented: the segment, the
triangle and the quadrilateral, being possible to use linear and quadratic interpolation in the
three cases. The common data and methods (functions) lie in a basic class, from which the
six mentioned classes (types) inherit, completing the basic class with its particular data and
methods.
The point of integration object (objpint) provides the values of the integrands in (9), (11)
and (14), for Laplace and elasticity inlcuding the axisymmetric case and integrands of the
tangent matrices. Again, the objects inherit from a basic class adding complexity through a
tree structure form.
The deformation object (objdef ) calculates the deformation and the matrix B in the point
of integration. The common data and procedures lie in a basic class from which 4 classes
inherit: one class for the Laplace gradient; one class for the linear deformation and two classes
for non-linear deformations (one for problems with large rotations and displacements but small
deformations, and one for problems with large deformations), [3].
The material object (objmat) implements the constitutive law which gives the ﬂux in terms
of the gradient in the potential problem (Laplace); and the law that gives the stress in terms
of the deformation in the elasticity problem. Two linear cases for the two linear problems
(elasticity and Laplace) have been implemented. Four types of non-linear material classes
inherit from the linear elastic class, adding the linear elastoplasticity, the neohookean and the
incompressible neohookean functionality, and the Hencky material in the principal directions.
In the same way, two types of non-linear material classes inherit from the linear Laplace class:
one introduces a simple constitutive non-linear law, and another modiﬁes the constant tension
force in a vibrating string to depend on the transverse displacement u.
The third object aggregated in the main object objfem is the method object (objmethod ),
which can be linear, non-linear and dynamic. The object objfty is only used in the dynamic case
and it will be explained in Section 3.2. For linear stationary computations, the object method
is reduced to the object objlinsys, which constructs the system of equations using the problem
and the mesh object functions, and proceeding to solve it. In the non-linear case, the object
method is the Newton Raphson object (objnr ) (12), which aggregates the linear system object
(objlinsys) and the jacobian object (objJ ). There are two types of jacobian objects: one uses
analytic derivation to compute the jacobian matrix J (13), and the other uses ﬁnite diﬀerences
of the residual vector.

3.2

Objects for dynamic computations

For dynamic computations, the starting point is the second order ODE system (9), which can
be solved directly using methods like Newmark [9], the HHT-α [6], etc. But it is also possible
1018

OPP for Partial Diﬀerential Equations

Alberdi and Anza

to transform the ODE system (9) into an equivalent ﬁrst order ODE system:
d(t) = U (t)
⇒
v(t) = U (t)

d (t) = U (t) = v(t)
M v (t) = M U (t) = −F int (d) − Cv + F ext

(15)

The system (15) can be written as follows in matrix form:
I
0

0
M

d (t)
v (t)

˜
M

=

v(t)
R(d) − Cv

˜ y = f (t, y)
⇒M

(16)

f (t,y)

y

where f and j = ∂f /∂y are given by:
⎧
⎪
⎨f1 (t, y) ≡ y2 = v, f2 (t, y) ≡ R(y1 ) − Cy2 = R(d) − Cv
⎪
⎩j =

∂f (t, y)
=
∂y

∂f1
∂y1
∂f2
∂y1

∂f1
∂y2
∂f2
∂y2

=

∂v
∂d
∂(R(d)−Cv)
∂d

∂v
∂v
∂(R(d)−Cv)
∂v

=

0
J(U )

I
−C

(17)

and J(U ) is given by (13).
The ODE system (16) can be solved by implementing numerical methods to solve ﬁrst order
ODEs or doing the connection with the Matlab odesuite in which a set of codes to solve ODEs
[11] is oﬀered. Some numerical methods for ﬁrst order ODEs have been implemented in this
work (such as, the trapezoidal rule, the BDF and NDF methods [12], superfuture-point schemes
[4]). The step by step advancing process of the diﬀerent numerical methods is organized with
a common structure: the initialization, the loop in steps and the step actualization. These
three functions are common nearly for all the numerical methods and they are implemented in
a basic class, from which the speciﬁc methods inherit and add their particular step function
to solve their speciﬁc advancing formula. Any object method has among its data the object
objfty which provides with the values of f and j = ∂f /∂y of the ODE system (16). Three
diﬀerent classes have been implemented depending on the type of problem: diﬀusion, wave or
elastodynamics, and the general case, where the user has to deﬁne a text ﬁle with the speciﬁc
system to solve y = f (t, y).

3.3

Trapezoidal rule

Given the ODE system deﬁned by (16), the advancing formula of the trapezoidal rule is:
˜ · yn + h (f (tn , yn ) + f (tn+1 , yn+1 ))
˜ · yn+1 = M
M
2

(18)

The formula (18) is implicit and it is solved iteratively by Newton method:
m+1
m
¯ m )
yn+1
= yn+1
− J(y
n+1

where:

−1

m
¯ yn+1
, m = 0, 1, 2, ...
R

(19)

⎧
2
m
m
¯ m
⎪
⎨R yn+1 = h M yn+1 − yn − fn + fn+1
⎪
⎩¯ m
J yn+1 =

¯ m )
∂ R(y
n+1
∂yn+1

(20)
=

2
hM

−

m
jn+1

And values of f and j are calculated using (16) and (17).
The trapezoidal object speciﬁes the step function (19) and the residual and the jabobian
(20) to compute the iteration of the Newton Raphson object (objnr ).
1019

OPP for Partial Diﬀerential Equations

3.4

Alberdi and Anza

Backward Diﬀerentiation Formulae BDF

Following the same procedure the backward diﬀerentiation formulae, BDFs [12], have been
implemented. The BDF have been widely used due to their good stability properties. In the
k-step BDF the value yn+k is calculated using the previous values yn+j for j = 0, ..., k − 1:
k

˜ yn+j = hf (tn+k , yn+k )
α
ˆj M

(21)

j=0

α
ˆ j are the coeﬃcients of the BDF method. The implicit formula (21) is solved iteratively by
the Newton method:
⎧
1
m
˜ y m + k−1 α
˜
¯ m
⎪
ˆk M
⎪
n+k
j=0 ˆ j M yn+j − fn+k
⎨R yn+k = h α
(22)
⎪
¯ m )
⎪
∂ R(y
⎩J¯ y m
1
n+k
m
˜
=
= α
ˆk M − j
n+k

∂yn+k

h

n+k

where f and j are given by (16) and (17). The BDF object speciﬁes the step function (21)
and the residual and the jabobian (22) to compute the iteration of the Newton Raphson object
(objnr ). In a similar way, the numerical methods mentioned previously can be implemented.

4
4.1

Numerical results
Example 1: Elastoplastic traction of a cylinder with cavity

An axisymmetric cylinder with a radius of 20 units, a length of 40 units and a central spherical
cavity of a radius of 5 units has been considered in this example. The cylinder deforms in simple
traction with an axial force of P = 3 · 105 units. The values for Young, Poisson and hardening
modulus are E = 2 · 106 , ν = 0.25 and H = 106 respectively. Yield stress is σe = 2000 units.
Due to the symmetry only one forth of the plane section has been discretized, and it will be
analysed in 2D in the axisymmetric plane. This is an elastic problem, with linear deformation
and non-linear material.
4.1.1

Static case

The left image of Figure 3 shows the mesh, the stresses and the deformation (scale factor of
5) after 10 quasi-static steps. The stress concentration around the hole can be observed. The
right image of the same ﬁgure shows the isoregions for plastic deformation which reaches the
whole cross section with an average value of about 3%.
4.1.2

Dynamic case

The left image of Figure 4 shows the time evolution of the vertical displacement of the upper
central node, for a time interval of 10 units using the trapezoidal method with 500 steps.
We can see the permanent plastic deformation and the elastic vibration around it (for a low
density ρ = 1). The block starts its elastoplastic deformation from null initial conditions, due
to the axial force. We observe that after the static deformation is reached, the deformation
remains because of the accumulated inertia. The right image of Figure 4 shows the ﬁnal plastic
deformation at the end of the time interval.
1020

