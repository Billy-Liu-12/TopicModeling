Procedia Computer Science
Volume 51, 2015, Pages 90‚Äì99
ICCS 2015 International Conference On Computational Science

Load-Balancing for Large Scale Situated
Agent-Based Simulations
Omar Rihawi, Yann Secq, and Philippe Mathieu
CRIStAL (UMR 9189 CNRS) - Lille 1 University,
59655 Villeneuve d‚ÄôAscq, France
FirstName.LastName@univ-lille1.fr

Abstract
In large scale agent-based simulations, memory and computational power requirements can
increase dramatically because of high numbers of agents and interactions. To be able to simulate
millions of agents, distributing the simulator on a computer network is promising, but raises
some issues like: agents allocation and load-balancing between machines. In this paper, we study
the best ways to automatically balance the loads between machines in large scale situations. We
study the performance of two diÔ¨Äerent applications with two diÔ¨Äerent distribution approaches,
and we show in our experimental results that some applications can automatically adapt the
loads between machines and get alone a high performance in large scale simulations with one
distribution approach than the other.
Keywords: Load-balancing, Distributed simulations, Large scale simulations, Multi-agent systems

1

Introduction

To simulate large scale situated agent-based applications of complex phenomena with several
millions of agents, we need to distribute the simulation on a computer network. That can raise
some issues: agents allocation, interactions between diÔ¨Äerent agents from diÔ¨Äerent machines,
time management between machines, load-balancing, etc. When we distribute multi-agent
systems (MAS), agents must be separated between these machines because they have the most
computational costs in the simulation. With this separation, agents should still be able to
produce their normal behaviours. However, this separation should be fair enough to keep the
balance between machines.
In previous study [8], we have explored two main distribution approaches to simulate largescale situated-MAS applications: 1) agents distribution and 2) environment distribution. Our
experience on diÔ¨Äerent categories of situated-MAS applications shows that some applications
can be distributed eÔ¨Éciently with one distribution approach more than the other. Indeed, each
approach has some features that allow some agents to automatically adapt the load between
machines, and that can make some diÔ¨Äerences in the performance.
90

Selection and peer-review under responsibility of the ScientiÔ¨Åc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.204

Load-Balancing for Large Scale Situated Agent-Based Simulations

1.1

Rihawi, Secq and Mathieu

Environment Distribution

In some applications, the focus can be more on the environment itself instead of agents. Particularly for simulations with physical constraints, whose agents interact locally or have physical
spaces [10]. In this case, the environment can be divided between diÔ¨Äerent machines, each
machine holds a small part of the environment with agents that exist on this part. Thus, each
machine computes agents perceptions and all interactions that happens within its environment
slice. In other words, each machine manages a part of the environment (see Ô¨Ågure 1).
	









	





 

	
		
 


























	


	
		

 
 


















 



























Figure 1: agents distribution (left) and environment distribution (right).
One of the most important issue is how we can inform other machines about all changes in
the system. Information exchange between environments parts can be done with Ghost-area
[8], which represents a part of neighbours states in neighbouring machines. This area should be
updated and informed with all changes by one message at each time step to allow local agents
to interact. Each machine has to receive Ghost-areas around it from other neighbours at the
beginning of each time step, and also has to send Ghost-areas information for others too.
However, environment distribution is more suitable for situated agents whose positions have
a normal distribution on the environment. In other words, each agent has an equal probability
to exist on all special areas on the environment. That means, agents are spread on the whole
environment, and they do not aggregate on one place or they are not moving with large groups
from one area to another.

1.2

Agents Distribution

An agent in multi-agent systems (MAS) is an atomic unit, which can not be divided into smaller
parts. Even if we can consider it as a collection of diÔ¨Äerent properties and behaviours. Agents
are the main components on MAS simulations. The distribution of agents can be done simply
91

Load-Balancing for Large Scale Situated Agent-Based Simulations

Rihawi, Secq and Mathieu

by a division of the agents list between diÔ¨Äerent machines or N agents for each machine. Each
machine handles N agents to execute their interactions and communicates with other machines
to achieve agents‚Äô goals, for example each machine has to send information about its agents
and receive other information about other agents too form other machines. That must be done
with lowest communication costs.
In our platform, each machine has its agents (local agents) and should be able to have
information about other agents from other machines which can be called Ghost Agents to allow
local agents from interacting normally during the simulation (see Ô¨Ågure 1).

2

Load Balancing

Load balancing has been studied extensively in general distributed systems and diÔ¨Äerent mechanisms have been proposed. In distributed systems, load-balancing is a method to keep the
computational and communication loads balanced between all computational units. Load balancing is very important to build an eÔ¨Écient distributed system, and especially to build an
eÔ¨Écient distributed MAS simulation for large scale applications, which has some speciÔ¨Åcations.
Few researchers‚Äô works are done on the load-balancing aspect to take into account the spirit of
agent systems in such a distributed simulation [2].
In general distributed systems, all computational units are often viewed as common resources, where users can submit their tasks through connected machines. Then, a load balancing mechanism can distribute the tasks among diÔ¨Äerent machines to balance the workload, and
then tasks can run until they are Ô¨Ånished. New tasks may be added to some machines at any
time by the users, and can be scheduled by the load balancing mechanism.
This scenario is not Ô¨Åtted to agent technology and can not be applied to large scale distributed multi-agent simulations. First, agent can be built from diÔ¨Äerent tasks but it cannot be
split into diÔ¨Äerent machines or cannot be executed on diÔ¨Äerent time steps during the simulation.
Agents can still exist in the system unless the whole system is shut down or they decide to stop
interacting with others. In addition, agents in most of MAS applications can be speciÔ¨Åed and
created at system start-up, but in sometime there is a need to introduce more agents to the
system. Moreover, agents can interact with each other through variable communication forms
which depends on interaction‚Äôs nature. Whereas, the communication between the tasks in normal distributed systems are usually with static and Ô¨Åxed forms. Thus, large scale distributed
multi-agent simulations need some tailored load-balancing mechanisms.
However, it is true that agent in MAS is one solid unit and it is diÔ¨Écult to split it into
smaller parts. Agent could dramatically change its behaviours and then it could change the
load during the simulation. This highly depends on the applications and agents types that are
used. Anyway, changes in simulations can be categorized into two main categories:
1. Agent computation: which can increase or decrease during the simulation. If we have
a mixed list of agents between cognitive and passive agents in one machine, the load of
calculation can be Ô¨Åne in the system. While, if we have all heavy cognitive agents in one
machine and other machines hold passive agents or simple agents, then the load could not
be the same between machines.
2. Agent communication: which can also increase or decrease during the simulation. If we
have agents that need to communicate with other agents that exist in diÔ¨Äerent machines,
then communication costs can be high and the load of communication between two machines is more than others in the system. While, if the agents with heavy communications
92

Load-Balancing for Large Scale Situated Agent-Based Simulations

Rihawi, Secq and Mathieu

exist in the same machine, then the communication between machines should be similar
and the load should be good.
However, according to the nature of agent‚Äôs interactions the load balancing scheme could be
changed during the simulation. We will see in the experimental results that some applications
can automatically adapt the load with one distribution approach than the other. In other words,
with some applications we need to add load-balancing mechanism if the user has chosen a wrong
approach for his applications, to do that we will discuss it in both approaches: environmentdistribution and agents-distribution approaches.

2.1

Load Balancing with Environment-Distribution Approach

In case of environment-distribution (ED) approach, the environment should be divided between
diÔ¨Äerent machines and each machine holds a small part of the environment with agents that
exist on this part. In large scale simulations and after some iterations, there can be a case
where more agents are aggregated in one part of the environment more than the others in some
applications. In this case, the simulation needs a load-balancing mechanism to re-balance the
load between machines or between the environment parts.
In ED approach, the load-balancing mechanism can be implemented with a new redistribution of the environment into diÔ¨Äerent parts that respect the balance between machines.
In DMASON [2], there is a good solution with one dimension division of the environment.
DMASON is based on a server/clients approach, where the server should divide the works
between machines and receive the results from them. In their case, the server send a part of
the environment, that comes from a division with only one dimension on the environment, to
each client. This division can be changed dynamically during the simulation to adapt the loads
between machines, and it is easy to implement as it is on one dimension only. In DMASON, as all
information exist on one server that can be implemented easily but with high communications.
However, if the division should be done on 2 or three dimensions [6], the implementation could
be more complex and the clients may wait more to receive agents from the server.

2.2

Load Balancing with Agents-Distribution Approach

In case of Agents-distribution (AD) approach, the distribution can be simply by a division of
the agents list between diÔ¨Äerent machines or N agents for each machine. Then, each machine
handles N agents to execute their interactions and communicates with other machines to achieve
agents‚Äô goals. In some applications, agents can reproduce themselves or die and disappear from
the system during the simulation. These phenomena can impact the load, thus a mechanism is
needed to re-balance the load between machines.
The easiest way in AD approach can be done by reloading machines with missing agents at
each N time step, the user can determine what N can be at the beginning of the simulation. N
can be Ô¨Åxed during the simulations or dynamic [9]. However, even with a Ô¨Åxed N the simulation
should be parametrized carefully to avoid high communications. For example, at each N time
step we can transfer the missing numbers of agents between machines to re-load the balance
in the simulation. If the simulation makes a lot of transferring steps to balance the load, then
more communications delays can be produced and that can aÔ¨Äect the performance.
In Ô¨Åxed or dynamic approaches, each machine can follow 4 steps: 1) Calculate the mean
number of agents that should be in each machine. 2) Calculate the missing number of agents
in some machines (‚àíM machines) and the additional number of agents in other machines (+M
machines). 3) Divide the additional number of agents -if there are- between the machines (‚àíM )
93

Load-Balancing for Large Scale Situated Agent-Based Simulations

Rihawi, Secq and Mathieu

that are less loaded. 4) Send the additional numbers of agents to all machines (‚àíM ) that need
more agents to be balanced with others.

3

Benchmark Applications

In [8] we have proposed two interesting ways to distribute a simulation, and we believe that
each one has some speciÔ¨Åcations and better performances on some kind of applications. Table
1 shows a comparison between two applications categories. DiÔ¨Äerent applications can have
diÔ¨Äerent features, which come from agents‚Äô features themselves. For example, agent‚Äôs life-cycle
can be short (small number of time steps) or long during the simulation. Agents can move
on small area or large area, and that can change the load of computations in the simulation.
Agents can exist on the whole environment or can be aggregated on a part of it.
The user should be able to choose the distribution type that is more suitable for his application according to agents‚Äô features. For example, the short life-cycle and reproducing could
make the agent distribution approach useless for some applications, because computation can
be aggregated in one machine only. Whereas, the aggregation and the long life-cycle could make
the environment distribution approach useless too for other applications, because computation
can be aggregated in one machine too. For that, one distribution type can be the best solution
for some applications than the other.
Table 1: Applications can be in diÔ¨Äerent categories according
Agent features Category-1
Category-2
Life-cycle
Short
Long
Movement
Small area
Large area
Positioning
Everywhere Aggregation
Reproducing
Yes
No

to agents‚Äô features.
...
...
...
...
...

In the following sections, we describe the distribution of two classical multi-agent applications: Ô¨Çocking behaviour and prey-predator models. Then, we show with our experiments
that one of them has a better performance with agent distribution without load balancing
mechanisms and the other need some mechanisms to re-balance the load between machines.

3.1

Flocking Behaviour Model

This application illustrates a steering behaviour that is commonly observed with birds or Ô¨Åsh
[7]. In this model, there is only one kind of agent (e.g. bird), which can move forward with
a group of other nearby agents within its perception range. Normally after some iterations
in this simulation, groups of agents are emerging and after some times, there is only one big
group of birds that move smoothly together. On the environment‚Äôs view, there is heterogeneous
distributions, or some parts of the sky hold a lot of birds, while others are less Ô¨Ålled (see Ô¨Ågure
2).
In the environment distribution case, we can imagine that the load can be switched from
one machine to another when a group of birds moves from one environment part to another. In
this model, the best solution to distribute this model should be the agent distribution, so each
machine has the same number of agents (birds) and thus the same computational cost.
The macroscopic phenomena in Ô¨Çocking behaviour is very simple. Initially, the simulation
should create each bird with a random position and a random direction on the sky. Then, all
94

Load-Balancing for Large Scale Situated Agent-Based Simulations

Rihawi, Secq and Mathieu

Figure 2: Flocking behaviour model [7] (left) and a demo of 4 machines (right).
birds try to get closer to other birds in their perceptions, then and after some iterations some
birds should be together in larger groups.

3.2

Prey-Predator Model

The second model is more complex than Ô¨Çocking behaviour model, which is prey-predator model
or Lotka-Volterra model. This model is a classical MAS model that uses agents with goals. A
predator is an organism that eats another organism which is the prey. The prey is a part of
the predator‚Äôs environment, and the predator dies if it does not get enough food (or preys).
Additionally, the predator is a part of the prey‚Äôs environment, and the prey dies if it is eaten
by the predator. The fastest predators in the environment are able to catch food and eat, then
they survive and reproduce to make up more predators. The fastest preys are able to escape
from predators, then they survive and reproduce more preys to keep the population. The two
populations should evolve together to keep the ecosystem alive.





	


	


	






Figure 3: Wolf/sheep/grass ecosystem in Netlogo [11].
An example of such model is the wolf-sheep-grass simulation by Wilensky [11] (Ô¨Ågure 3),
which has been implemented in our framework for our experimentation. In this example, a
wolf-agent tries to Ô¨Ånd and eat a sheep-agent, a sheep-agent searches for grass-agents to eat
and grass-agents re-grows at a given rate. Wolves and sheep can have energy when they Ô¨Ånd
something to eat, and then they can reproduce themselves.
In normal situation, the number of wolves and the number of sheep can be inversely proportional in some periods of the simulation and can be directly proportional in others, or
co-evolution of both populations. If the number of wolves increases, then they can eat more of
sheep, and the number of sheep should decrease (see Ô¨Ågure 3). Then, the wolves could not Ô¨Ånd
more sheep to eat, and that leads to decreasing in wolves energies and then decreasing in the
number of wolves. After that, the sheep can increase, because there are no more wolves that
95

Load-Balancing for Large Scale Situated Agent-Based Simulations

Rihawi, Secq and Mathieu

try to eat them, and again the number of wolves should increase as there are more and more
preys to be eaten.
Sheep and wolves must exist in the model during the simulation. If we lose all sheep, then
wolves can not Ô¨Ånd any sheep to eat, and all wolves should be died. If we lose all wolves, then
the number of sheep could be increased to inÔ¨Ånity as there are no predators to attack them.
Thus, all types of agents have to co-evolve to keep the model alive.
These two applications have been chosen because they imply distinct population dynamics.
Indeed, in a prey-predator model, preys and predators can move during the simulation but they
are homogeneously distributed over whole the environment. While in the Ô¨Çocking model, even
if the distribution is homogeneous at the beginning of the simulation, Ô¨Çocks rapidly emerge
together. Then, after some iterations there should be only one main Ô¨Çock that appears in
the simulation. It means that these two applications illustrate the trade-oÔ¨Ä that has to be
made while distributing the load between machines in a computer network, and the type of
distribution can give really diÔ¨Äerent results.

4

Experimental Results

In previous study [8], we found that the prey-predator model is better with environment distribution approach than agents distribution one, whereas, the Ô¨Çocking model is better with agents
distribution approach than environment distribution one. To explore more that, we study in
this paper the load-balancing for both models with both approaches.
Figure 4 shows an experiment on 4 machines (m1, m2, m3 & m4) for prey-predator model
in both approaches. The initial load for both approaches has been exactly the same for all
machines, then after N time step the load is calculated in each machine. The Ô¨Ågure 4 shows that
the load between machines can be changed in case of agents distribution more than environment
distribution. That can aÔ¨Äect the balance between machines, as in all machines there are some
agents that die or re-produce themselves during the simulation. Whereas, for Ô¨Çocking model it
is completely a reverse situation. Figure 5 shows the same experiment on 4 machines (m1, m2,
m3 & m4) for Ô¨Çocking model in both approaches. The initial load also has been exactly the
same for all machines, then after N time step the load is calculated in each machine. This Ô¨Ågure
shows that the load between machines can be changed in case of environment distribution more
than agents distribution. That can aÔ¨Äect the balance between machines, as with environment
approach there can be more agents in some machines (birds Ô¨Çy together in big groups) more
than the other machines during the simulation.
We have seen in the experimental results that some applications are better in loads with one
distribution approach than the other, and the user should chose the best distribution approach
to his application to automatically adapt the load between machines. However, if the user has
chosen a wrong distribution approach for his applications, then the balance in load between
machines will be upset.
The best solution to re-balance the loads between machines is by adding a load balancing
mechanism, to re-load machines with the missing agents at each N time step. But, even with
this solution, the simulation should be parametrized carefully to avoid high communications.
Figure 6 shows experiments on prey-predator model with a load balancing mechanism. At
each N time step, this mechanism transfers numbers of missing agents between machines to
re-load the balance in the simulation. If the simulation makes a lot of steps to balance the load,
then more communications delays can be produced and that can aÔ¨Äect the performance.
96

Load-Balancing for Large Scale Situated Agent-Based Simulations


	


































	







 

"#$%&





!




Rihawi, Secq and Mathieu















Figure 4: Prey-predator model with agent dis- Figure 5: Flocking Birds model with agent distribution and environment distribution.
tribution and environment distribution.





	

	

	

	



























Figure 6: Communication delays in prey-predator model with diÔ¨Äerent simulations that apply
load-balancing at each N time step (LB- N TS).
Now, we experiment again the prey-predator model with both distribution approaches on
9 machines, but with a load-balancing mechanism for agent distribution. Figure 7 shows that
environment distribution approach is better than agent distribution approach in prey-predator
model even with load balancing mechanism. Our explanation for that, the communication cost
of external interactions is higher in agent distribution approach than environment distribution
one. Because in agent distribution, all machines can have external interactions with all other
machines, whereas in environment distribution each machine can have external interactions
with its neighbouring machines only.

5

Related Work

There is diÔ¨Äerent ways to balance the computing load [9], it can be static or dynamic. If the
load is balanced at the beginning of the simulation and re-balanced at each Ô¨Åxed number N
time steps, then it is static. If it is adapted during the execution (N can be changed), then it
is dynamic. A dynamic load balancing is usually better as it provides a better adaptation in
case of load variation during the model execution, but it can also be subject to instability.
However, dynamic load balancing can be classiÔ¨Åed into [12]: a centralized approach or a
decentralized approach, or more a hierarchical approach [4]. The centralized approach is managed by central controller that has a global view of load information. In the decentralized
97

Load-Balancing for Large Scale Situated Agent-Based Simulations













Rihawi, Secq and Mathieu






























	

Figure 7: In prey-predator model and even with load balancing mechanism for agent distribution, the environment distribution shows a high performance.
approach all machines are involved in making the load balance decision. Whereas, the hierarchical approach is a combination of the above two approaches, in this approach all machines
are organized in a hierarchy. High level ones are considered as centralized machines of lower
level machines, and all machines in the same level can be organized as decentralized one.
In [3] there are three important components where the Ô¨Ånal decision is made for load balancing, which are: load data collection, agent selection, and destination selection. The load
data collection speciÔ¨Åes how the load data is collected including the frequency and method of
data collection. The agent selection deals with which agent is migrated whenever there is a
need, while the destination selection decides to which machine the selected agent is migrated.
However, in [1] there are two important policies (components) which are selection policy (agent
selection) and location policy (destination selection).
In general, most of ABMS platforms do not include a load balancing mechanism and they
do not include generic migration routines [5]. That can force the developers to re-implement
some migration codes to these platforms. However, DMASON [2] has a dynamic load-balancing
by one dimension division of the environment and that can not be eÔ¨Écient for all applications
types. Our experiments show that some distribution approaches are more suitable for some
applications and need diÔ¨Äerent load-balancing mechanisms.
Table 2: Applications may have diÔ¨Äerent performance with diÔ¨Äerent distribution approaches.
Model:
Prey-predator
Flocking
AD
Need load-balancing mechanisms
Auto-balance
ED
Auto-balance
Need load-balancing mechanisms

6

Conclusion

In large scale agent-based simulations, requirements in memory and computational power are
important. To be able to tackle simulation with millions of agents, distributing the simulator
on a computer network is promising, but raises some issues like: agents allocation and loadbalancing between machines. This paper study the best ways to automatically balance the
loads between machines in large scale situations. In previous study, we have proposed two
distribution approaches for large scale situated-MAS simulations: environment distribution and
98

Load-Balancing for Large Scale Situated Agent-Based Simulations

Rihawi, Secq and Mathieu

agents distribution. In this paper, we study the performance of these two diÔ¨Äerent distribution
approaches with two diÔ¨Äerent applications on the load-balancing between machines. We show
that some applications can automatically adapt the loads between machines and get alone
high performance large scale simulations without load-balancing mechanisms with a speciÔ¨Åc
distribution approach. The experimental results have been done with two diÔ¨Äerent applications,
which are the Ô¨Çocking of birds and prey-predator models. Experimental results show that
the proposed distribution approaches have better performances in some models than others
(table 2). For example, prey-predator model can automatically adapt the loads and has better
performance in the execution time than Ô¨Çocking model when we distribute the environment.
Whereas, agents distribution approach is better for Ô¨Çocking model. To conclude, the user has
to chose the distribution approach that can be more suitable for his application according to
agents‚Äô features (table 1). In future work, we plan to extract general features that help users
to select the best distribution approaches for their applications.

References
[1] Ka-Po Chow and Yu-Kwong Kwok. On load balancing for distributed multiagent computing.
IEEE Transactions on Parallel and Distributed Systems, 13(8):787‚Äì801, 2002.
[2] B. Cosenza, G. Cordasco, R. De Chiara, and V. Scarano. Distributed load balancing for parallel
agent-based simulations. In Parallel, Distributed and Network-Based Processing (PDP), 2011 19th
Euromicro International Conference on, pages 62‚Äì69, 2011.
[3] Yong Hee Kim, Seungwok Han, Chang Hun Lyu, and Hee Yong Youn. An eÔ¨Écient dynamic load
balancing scheme for multi-agent system reÔ¨Çecting agent workload. In Computational Science and
Engineering, 2009. CSE ‚Äô09. International Conference on, volume 1, pages 216‚Äì223, 2009.
[4] Klaus Krauter, Rajkumar Buyya, and Muthucumaru Maheswaran. A taxonomy and survey of
grid resource management systems for distributed computing. Software Practice and Experience,
32(2):135‚Äì164, 2002.
[5] Claudio Mrquez, Eduardo Csar, and Joan Sorribes. A load balancing schema for agent-based spmd
applications. In Parallel and Distributed Processing Techniques and Applications, 2013.
[6] B. Ng, Rynson W.H. Lau, A. Si, and F.W.B. Li. Multiserver support for large-scale distributed
virtual environments. Multimedia, IEEE Transactions on, 7(6):1054‚Äì1065, 2005.
[7] Craig W. Reynolds. Flocks, herds, and schools: a distributed behavioral model. Computer Graphics, pages 21 pp. 25‚Äì34, 1987.
[8] Omar Rihawi, Yann Secq, and Philippe Mathieu. EÔ¨Äective distribution of large scale situated
agent-based simulations. In ICAART 2014 6th International Conference on Agents and ArtiÔ¨Åcial
Intelligence, volume 1, pages 312‚Äì319. SCITEPRESS Digital Library, 2014.
[9] Alban Rousset, Bndicte Herrmann, Christophe Lang, and Laurent Philippe. A survey on parallel
and distributed multi-agent systems. In Euro-Par 2014: Parallel Processing Workshops, volume
8805 of Lecture Notes in Computer Science, pages 371‚Äì382. Springer International Publishing,
2014.
[10] Matthias Scheutz and Paul Schermerhorn. Adaptive algorithms for the dynamic distribution
and parallel execution of agent-based models. Journal of Parallel and Distributed Computing,
66(8):1037‚Äì1051, 2006.
[11] U. Wilensky. Netlogo wolf sheep predation model. Center for Connected Learning and ComputerBased Modeling, Northwestern University. Evanston, IL, 1997.
[12] Bakri Yahaya, Rohaya Latip, Mohamed Othman, and Azizol Abdullah. Dynamic load balancing policy with communication and computation elements in grid computing with multi-agent
system integration. International Journal of New Computer Architectures and their Applications
(IJNCAA), 3, 2011.

99

