Procedia Computer Science
Volume 51, 2015, Pages 2553–2562
ICCS 2015 International Conference On Computational Science

Detecting and adapting to parameter changes for reduced
models of dynamic data-driven application systems
Benjamin Peherstorfer1 and Karen Willcox1
Department of Aeronautics & Astronautics, MIT, 77 Massachusetts Avenue, Cambridge, MA 02139
pehersto@mit.edu

Abstract
We consider the task of dynamic capability estimation for an unmanned aerial vehicle, which
is needed to provide the vehicle with the ability to dynamically and autonomously sense, plan,
and act in real time. Our dynamic data-driven application systems framework employs reduced
models to achieve rapid evaluation runtimes. Our reduced models must also adapt to underlying
dynamic system changes, such as changes due to structural damage or degradation of the system.
Our dynamic reduced models take into account changes in the underlying system by directly
learning from the data provided by sensors, without requiring access to the original high-ﬁdelity
model. We present here an adaptivity indicator that detects a change in the underlying system
and so allows the initiation of the dynamic reduced modeling adaptation if necessary. The
adaptivity indicator monitors the error of the dynamic reduced model by comparing model
predictions with sensor data, and signals a change if the error exceeds a given threshold. The
indicator is demonstrated on a deﬂection model of a damaged plate in bending. Local damage
of the plate is modeled by a change in the thickness of the plate. The numerical results show
that in this example the adaptivity indicator detects all changes in the thickness and correctly
initiates the adaptation of the reduced model.
Keywords: dynamic data-driven application systems, dynamic reduced models, model reduction

1

Introduction

Modern aerospace vehicles are becoming increasingly independent of human interaction inﬂight. Technologies range from unmanned —vehicles that do not require a human operator in
an airborne position but may require real-time interaction remotely via a pilot on the ground—
to autonomous—vehicles that are able to make in-ﬂight mission-critical decisions and react to
stimuli in the environment. A critical method for furthering autonomy is to produce self-aware
systems: not only can these systems plan and operate independently of human operators, they
are also able to quantify the state of their available internal resources and maintain knowledge
of their current health beyond their initial baseline performance [3, 8]. In this way, the system
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2015
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2015.05.363

2553

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

mimics behavior of a biological organism—it can act aggressively when it is healthy and in
favorable conditions, and can become more conservative as it ages and degrades.
There are several challenges associated with enabling a self-aware vehicle. Among them is
the task of dynamic capability estimation, needed to provide the vehicle with the ability to
dynamically and autonomously observe, orient, decide, and act in real time. In our dynamic
data-driven application systems (DDDAS) framework, models and computational methods invoked in the online decision-making phase have to meet two particular requirements. First,
a decision has to be made in a time-constrained environment and thus the model evaluation
runtime must be short. Second, the underlying dynamic system changes (e.g., due to structural damage or degradation) which in turn requires the model to adapt to these changes. The
runtime constraints can be addressed by employing model reduction; however, classical model
reduction follows a static approach where the reduced model is built once in the oﬄine phase
and then stays ﬁxed during the computations in the online phase. Thus, if the underlying
system changes, the reduced model either becomes invalid or has to be rebuilt from scratch.
Rebuilding the reduced model requires access to, and often evaluations of, the computationally
expensive high-ﬁdelity model and so becomes quickly computationally infeasible if only limited
computing resources are available.
Our recent work has proposed a dynamic reduced modeling methodology that breaks with
this rigid splitting into oﬄine and online phases [12]. Our dynamic reduced models take into
account changes in the underlying system by directly learning from data, without requiring
access to the high-ﬁdelity model. The data are provided by, e.g., sensors. Our work diﬀers
from other recent approaches in reduced model adaptation (e.g., [1, 11, 10, 15, 5, 6]) in that
we do not anticipate oﬄine how the high-ﬁdelity, and thus the reduced model changes during
the online phase, and that we incorporate new information in the form of sensor data for the
update.
We model system changes with latent parameters and inputs to the system with observable parameters. The latent parameters are prescribed by external inﬂuences and cannot be
controlled. Note that latent parameters here do not necessarily capture all possible external
inﬂuences onto the system. The values of the latent parameters are unknown, except for initial
latent parameters. If the latent parameters change, the reduced model becomes obsolete and
has to be adapted. In the following, we extend the adaptation methodology [12] with an adaptivity indicator that detects when the latent parameters have changed and then informs the
dynamic reduced modeling adaptation. The adaptivity indicator is based on monitoring the
error of the dynamic reduced model by comparing model predictions with the sensor data. If
the error exceeds a certain threshold then a change in the latent parameters is signaled. Note
that our adaptivity indicator only detects a change in the latent parameters and does not infer
the actual value of the latent parameters.

2

Systems with observable and latent parameters

We consider a model that is based on a parametrized partial diﬀerential equation (PDE). The
high-ﬁdelity model stems from the discretization of the PDE and is the system of equations
Aη (μ)yη (μ) = f (μ) ,

(1)

with N ∈ N degrees of freedom, the observable parameter μ = [μ1 , . . . , μd ]T ∈ D ⊂ Rd , d ∈ N,
and the latent parameter η = [η1 , . . . , ηd ]T ∈ E ⊂ Rd , d ∈ N. Note that μ and η are vectors
and therefore the system (1) can have multiple observable and latent parameters although we
2554

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

refer in the following to the vectors μ and η as observable and latent parameter (singular). The
linear operator Aη (μ) ∈ RN ×N and the state vector yη (μ) ∈ RN depend on the observable and
the latent parameter. The right-hand side f (μ) ∈ RN depends on the observable parameter
only. The initial state of the system is described by the initial latent parameter η0 ∈ E. Note
that the value of the initial latent parameter is known.
We construct a reduced model of the high-ﬁdelity model (1) with respect to the initial latent
parameter η0 . First, a reduced basis with proper orthogonal decomposition (POD) [2, 13] is
constructed, and then a reduced system of (1) is derived with Galerkin projection.
We select M ∈ N observable parameters μ1 , . . . , μM ∈ D, following a suitable sampling
strategy [14, 9, 4]. The snapshots
yη0 (μ1 ), . . . , yη0 (μM ) ∈ RN

(2)

are the solutions of the high-ﬁdelity model (1) for the selected observable parameters
N baμ1 , . . . , μM ∈ D and the initial latent parameter η0 . POD generates n ∈ N, n
sis vectors v1 , . . . , vn ∈ RN of the snapshots (2), which we put as columns in the matrix
V0 ∈ RN ×n . The subscript 0 of V0 indicates that the POD basis vectors in V0 depend on the
latent parameter η0 . The reduced model of the high-ﬁdelity model (1) is given by the system
of equations
˜0 (μ)y˜0 (μ) = f˜0 (μ) ,
(3)
A
˜0 (μ) = V T Aη (μ)V0 ∈ Rn×n , the reduced state vector y˜0 (μ) ∈
with the reduced operator A
0
0
n
R , and the reduced right-hand side f˜0 (μ) = V0T f (μ) ∈ Rn . For details on how to eﬃciently
˜0 (μ) for a given observable parameter μ see [12] and the references therein. We
compute A
note that the reduced right-hand side depends through the POD basis V0 on the latent parameter η0 , whereas the right-hand side f of the high-ﬁdelity model (1) is independent of the
latent parameter. In many situations, choosing n
N leads to a reduced state vector y˜0 (μ)
N , the reduced system (3) is often
such that V0 y˜0 (μ) approximates yη0 (μ) well. Since n
computationally faster to solve than (1).

3

Dynamic reduced models

We consider the following problem setup of dynamic reduced models [12]. In the oﬄine phase,
the dynamic reduced model (3) is built for the initial latent parameter η0 as described in
Section 2. In the online phase, the reduced model is evaluated at observable parameters of
interest and adapted to system changes. The online phase consists of M ∈ N steps, which
we denote with h = 1, . . . , M . At each step, a sensor sample yˆηh (μM +h ) ∈ RN is received.
The latent parameter ηh ∈ E is unknown. The observable parameter μM +h ∈ D is known but
cannot be inﬂuenced and changed. The sensor sample yˆηh (μM +h ) is a measurement of the state
vector yηh (μM +h ) of the high-ﬁdelity model (1), where the diﬀerence yηh (μM +h ) − yˆηh (μM +h )
is measurement noise and high-ﬁdelity model error. If the latent parameter changes from step
h − 1 to h, i.e., if ηh−1 = ηh , then the dynamic reduced modeling adaptation needs to be
initiated. Adapting the dynamic reduced model means adapting the POD basis, the reduced
operator, and the reduced right-hand side.
The dynamic reduced modeling adaptation was introduced in [12]. At step h = 1, the sensor
sample yˆη1 (μM +1 ) ∈ RN is received and the pointer k1 ∈ N is initialized as k1 = 1. The sensor
sample is put as a column in the sensor window
S1 = [yˆη1 (μM +1 )] ∈ RN ×1 .
2555

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

Algorithm 1 Dynamic reduced modeling adaptation
˜h−1 , f˜h−1 )
1: procedure adaptROM(Sh−1 , kh−1 , Vh−1 , A
2:
Receive new sensor sample yˆηh (μM +h ) ∈ RN
3:
Extend sensor window to
Sh = [yˆη1 (μM +1 ), . . . , yˆηh (μM +h )] ∈ RN ×h
if latent parameter changed, i.e., ηh−1 = ηh then
Set pointer kh = h
else
Set pointer kh = kh−1
end if
Adapt POD basis to Vh using sensor samples

4:
5:
6:
7:
8:
9:

yˆηkh (μM +kh ), . . . , yˆηh (μM +h )
10:
11:
12:
13:

(4)

˜h using sensor samples (4)
Adapt reduced operator to A
Adapt right-hand side to f˜h using sensor samples (4)
˜h , f˜h
return Sh , kh , Vh , A
end procedure

At step h = 1, the adaptation updates the reduced model with the sensor sample in the sensor
˜0 to A
˜1 , and the
window S1 . The POD basis V0 is adapted to V1 , the reduced operator A
reduced right-hand side f˜0 to f˜1 . We refer to [12] for details on the adaptation procedure. At
step h = 1, there is only one sensor sample and thus the pointer k1 is ignored. In the second
step h = 2, the sensor sample yˆη2 (μM +2 ) is received and the sensor window is extended to
S2 = [yˆη1 (μM +1 ), yˆη2 (μM +2 )] ∈ RN ×2 .
If η1 = η2 , both sensor samples in S2 correspond to the same latent parameter. Therefore, both
sensor samples can be used for the adaptation. The pointer is set to k2 = k1 = 1, and the sensor
samples yˆη1 (μM +1 ), yˆη2 (μM +2 ) are used to adapt the POD basis to V2 , the reduced operator
˜2 , and the reduced right-hand side to f˜2 . If η1 = η2 , the latent parameter has changed.
to A
All sensor samples in the sensor window received before step h = 2 are ignored. Therefore, the
pointer is set to k2 = h = 2, and only the sensor sample yˆη2 (μM +2 ) is used for the adaptation
to the latent parameter η2 . This process is continued. At step h, sensor sample yˆηh (μM +h )
is received. If ηh−1 = ηh , the pointer is set to kh = kh−1 . If ηh−1 = ηh , the pointer is set to
kh = h. Then, the sensor samples yˆηkh (μM +kh ), . . . , yˆηh (μM +h ) are used for the adaptation
˜h−1 to A
˜h , and the reduced right-hand
of the POD basis Vh−1 to Vh , the reduced operator A
˜
˜
side fh−1 to fh . The adaptation procedure is summarized in Algorithm 1.

4

Adaptivity indicator for dynamic reduced models

The dynamic reduced model procedure summarized in Algorithm 1 modiﬁes the pointer kh at
step h depending on whether the latent parameter has changed. We emphasize that for the
check if the latent parameter has changed, it is unnecessary to know the value of the latent
parameter, just that it has changed. In this section, we present an adaptivity indicator that
2556

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

heuristically detects if the latent parameter has changed by monitoring the error of the reduced
model. The following procedure is speciﬁcally designed for dynamic reduced models.
Consider step h − 1 with pointer kh−1 and sensor window
Sh−1 = [yˆη1 (μM +1 ), . . . , yˆηh−1 (μM +h−1 )] ∈ RN ×h−1 .
At step h, we receive the sensor sample yˆηh (μM +h ). Since the observable parameters of the
sensor samples are known (see the problem description in Section 3), we can evaluate the reduced
model of step h − 1 at the observable parameters μM +kh−1 , . . . , μM +h ∈ D corresponding to
the sensor samples
yˆηkh−1 (μM +kh−1 ), . . . , yˆηh (μM +h ) ∈ RN
(5)
that were received at the steps from kh−1 , when the adaptation starts, through the current
step h. Evaluating the reduced model of step h − 1 at μM +kh−1 , . . . , μM +h means solving the
reduced system
˜h−1 (μM +i )y˜h−1 (μM +i ) = f˜h−1 (μM +i ) ,
A
for i = kh−1 , . . . , h. We obtain the reduced state vectors
y˜h−1 (μM +kh−1 ), . . . , y˜h−1 (μM +h ) ∈ Rn .

(6)

The average relative L2 error of the approximate state reconstruction from the reduced state
vectors (6) with respect to the sensor samples (5) is denoted as
h

ah =
i=kh−1

yˆηi (μM +i ) − Vh−1 y˜h−1 (μM +i )
yˆηi (μM +i ) 2

2

.

(7)

Additionally, we deﬁne the current error of the sensor sample at step h as
eh =

yˆηh (μM +h ) − Vh−1 y˜h−1 (μM +h )
yˆηh (μM +h ) 2

2

.

(8)

Let 0 < λ ∈ R be a threshold parameter. At step h, a change in the latent parameter is signaled
if
1
(9)
λeh > |akh−1 + ah |
2
holds. The term λeh on the left of (9) is the relative L2 error eh of the reduced model of
the previous step h − 1 at the current sensor sample yˆηh (μM +h ), weighted with the threshold
parameter λ. The term 1/2|akh−1 + ah | on the right is the value between the error akh−1 ,
when the adaptation started at step kh−1 , and the current average error ah . Since the dynamic
reduced model is adapted at each of the previous steps, it is reasonable to expect that the
average error decreased as the adaptation continued. The indicator (9) therefore signals a
change if the weighted error λeh is above of half the accuracy that has been gained by the
adaptation since step kh−1 . The adaptivity indicator is summarized in Algorithm 2.

5

Numerical results

We demonstrate dynamic reduced models with our adaptivity indicator on a model of a plate in
bending, where the latent parameter describes local damage. The high-ﬁdelity and the reduced
model are introduced in Section 5.1 and numerical results are discussed in Section 5.2.
2557

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

Algorithm 2 Indicator to detect change in latent parameter
˜h−1 , f˜h−1 , yˆη (μM +h ), kh−1 , λ)
1: procedure detectChange(Sh−1 , A
h
2:
Evaluate reduced model of step h − 1 at parameters of sensor samples received since
step kh−1 (5)
3:
Compute average relative L2 error ah as deﬁned in (7)
4:
Compute relative L2 error eh corresponding to current sensor sample as in (8)
5:
if λeh > 12 |akh−1 + ah | then
6:
return True
7:
else
8:
return False
9:
end if
10: end procedure

5.1

Plate problem

We consider a model based on the Mindlin plate theory [7] of a clamped plate. We are interested
in the deﬂection of the plate when a load is applied. The spatial domain Ω = [0, 1]2 ⊂ R2 is
partitioned into four square subregions Ω1 , . . . , Ω4 . In each subregion, the thickness of the plate
and the load are each controlled by an observable parameter. The model therefore has the eightdimensional observable parameter μ = [μ1 , . . . , μ8 ]T ∈ D = [0.05, 0.1]4 × [1, 100]4 ⊂ R8 , where
for i = 1, . . . , 4 the parameters μi and μ4+i control the thickness and the load in subregion
Ωi , respectively. The model has the two-dimensional latent parameter η = [η1 , η2 ]T ∈ E =
[0, 0.2]×(0, 0.05] ⊂ R2 that controls the decrease of the thickness at position z = [0.7, 0.4]T ∈ Ω.
A decrease of the thickness at z models local damage. The thickness of the plate at x ∈ Ω is
given by the value of the function
t(x; μ, η) = t0 (x; μ) − t0 (x; μ)η1 exp −
where

⎧
μ1
⎪
⎪
⎨
μ2
t0 (x; μ) =
μ
⎪
3
⎪
⎩
μ4

if
if
if
if

x1
x1
x1
x1

< 0.5
< 0.5
≥ 0.5
≥ 0.5

1
x−z
2η22

and
and
and
and

x2
x2
x2
x2

< 0.5
≥ 0.5
< 0.5
≥ 0.5

2
2

,

(10)

(11)

The initial latent parameter is η0 = [0, ]T , where > 0 is an arbitrary scalar that has no
inﬂuence on the thickness. The high-ﬁdelity model of the plate is obtained with the ﬁnite
element method as discussed in [7, 12]. The high-ﬁdelity model has N = 19039 degrees of
freedom.
Figure 1a shows the thickness t for [μ1 , μ2 , μ3 , μ4 ]T = [0.08, 0.06, 0.07, 0.065]T and η = η0 ,
and Figure 1c the deﬂection of the plate if the load [μ5 , μ6 , μ7 , μ8 ]T = [50, 50, 100, 50]T is applied.
For the same observable parameter, the thickness and the deﬂection are shown in Figures 1b
and 1d, respectively, for latent parameter η = [0.2, 0.05]T .
A reduced model is constructed with POD and Galerkin projection for the initial latent
parameter η0 as discussed in Section 2. The POD basis V0 is generated from M = 1000
snapshots, where the observable parameters were drawn uniformly from D. The reduced model
has n = 50 degrees of freedom. This is the same reduced model as used in [12].
2558

Failure detection and correction for ROMs of DDDAS

0.08

1

Peherstorfer and Willcox

0.08

1

0.8

0.8
0.07

0.07
thickness

0.4

0.6
x2

x2

thickness

0.6

0.4

0.06

0.06

0.2

0.2

0
0.2

0.4

x

0.6

0.8

1

0

0.05

0

0.2

0.4

1

(a) thickness, no damage

x

0.6

0.8

1

(b) thickness, damage up to 20%

1

1
−0.1

0.8

−0.1
0.8

−0.2

−0.2

x2

−0.4
−0.5

0.4

−0.3
0.6

−0.4

x2

0.6

deflection

−0.3

−0.5

0.4

−0.6
−0.7

0.2

−0.6
−0.7

0.2

−0.8
0
0

0.05

1

0.2

0.4

x1

0.6

0.8

1

(c) deﬂection, no damage

−0.9

deflection

0

−0.8
0
0

0.2

0.4

x1

0.6

0.8

1

−0.9

(d) deﬂection, damage up to 20%

Figure 1: The plot shows the thickness without damage in (a) and with damage at z =
[0.7, 0.4]T ∈ Ω in (b). The corresponding deﬂection of the plate is shown in (c) and (d),
respectively.

5.2

Numerical experiments

We demonstrate the adaptivity indicator on the plate model. The latent parameter is changed
in ten equidistant steps from η0 = [0, ]T to [0.2, 0.05]T , which corresponds to a decrease of the
thickness by up to 20%. After each change of the latent parameter, 600 sensor samples are read.
We generate synthetic sensor samples that are the solutions of the high-ﬁdelity model and that
are not corrupted with noise. We have M = 10 × 600 = 6000 online steps h = 1, . . . , M . At
each step h, the average absolute L2 error over a test set with ten randomly chosen observable
parameters is computed.
Figure 2 compares the error of the static, the dynamic, and the true reduced model: The
static reduced model is built oﬄine from snapshots with η = η0 and is not adapted online.
The dynamic reduced model is adapted online with Algorithm 1. The adaptivity indicator of
Section 4 is used to check if the latent parameter has changed. The true reduced model is
rebuilt from scratch from snapshots with the changed latent parameter. It is too expensive
to use in a dynamic setting, but serves as a benchmark here. The threshold parameter of the
2559

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

10 3
true ROM

10 2
10 1
10 0

avg L

2

error over test set

static ROM
dynamic ROM

10 -1
10 -2

0

1000

2000
3000
4000
number of sensor samples read (h)

5000

6000

Figure 2: Setting the threshold to λ = 1/8, the adaptivity indicator detects all changes in the
latent parameter in this example. The dynamic reduced model therefore can quickly adapt
to changes in the underlying system and thus provides orders of magnitude more accurate
predictions than the static reduced model.

10 2
weighted current error
average error
adaptivity indicator

adaptivity indicator

10 0

10 -2

10 -4

10 -6

0

1000

2000
3000
4000
number of sensor samples read (h)

5000

6000

Figure 3: The plots shows the weighted current error λeh and the average error ah corresponding
to Figure 2. The black crosses mark when the adaptivity indicator signals a change in the latent
parameter.

2560

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

10 4

10
error over test set

true ROM

10 2
10 1

2

10 0

avg L

avg L

2

error over test set

10

3

10 4
static ROM
dynamic ROM

10 -1
10 -2

0
2000
4000
6000
number of sensor samples read (h)
(a) threshold λ = 0.25

3

static ROM
dynamic ROM

true ROM

10 2
10 1
10 0
10 -1
10 -2

0
2000
4000
6000
number of sensor samples read (h)
(b) threshold λ = 1

Figure 4: Increasing the threshold parameter λ leads to a more sensitive adaptivity indicator.
adaptivity indicator is set to λ = 1/8. The static reduced model quickly fails to provide valid
approximations of the solutions of the high-ﬁdelity model as the latent parameter, and thus
the damage, changes. The dynamic reduced model adapts to the damaged plate model and
achieves orders of magnitude more accurate approximations than the static reduced model.
The adaptivity indicator needs a few sensor samples before it signals a change in the latent
parameter. This results in high error peaks at the steps after the latent parameter has changed
and before the change is detected, because the dynamic reduced modeling adaptation mixes
sensor samples with diﬀerent latent parameters. This mixing of sensor samples leads to invalid
updates, although these are quickly corrected as more sensor data is received [12]. Figure 3
shows the weighted current error λeh and the average error ah corresponding to Figure 2. The
current error eh increases rapidly if the latent parameter is changed, whereas the average error
ah changes more slowly. The black crosses mark when a change in the latent parameter is
detected.
In Figure 4, the eﬀect of the threshold parameter λ is shown. If λ is set to be larger, then the
adaptivity detection becomes more sensitive. If the value of λ is too large, then the indicator
initiates the adaptation more often, which means that the pointer kh is reset too early and too
few sensor samples are used for the adaptation, see Algorithm 1. This can be seen in Figure 4b,
where the dynamic reduced modeling adaptation suﬀers from too few sensor samples that are
insuﬃcient to recover the true reduced model.

6

Conclusion

We discussed model reduction in the context of DDDAS, where systems depend on inputs,
modeled by an observable parameter, and external inﬂuences, modeled by a latent parameter.
Dynamic reduced models adapt to changes in the latent parameter by incorporating sensor
data. We presented an adaptivity indicator that signals a change in the latent parameter to
initiate the adaptation. The adaptivity indicator monitors the error of the reduced model and
2561

Failure detection and correction for ROMs of DDDAS

Peherstorfer and Willcox

indicates a change in the latent parameter if the error increases relative to the average error
above a threshold. In the presented numerical experiments the dynamic reduced model with the
adaptivity indicator achieved orders of magnitude more accurate results than a static reduced
model that was not adapted online.

Acknowledgments
This work was supported in part by AFOSR grant FA9550-11-1-0339 under the Dynamic DataDriven Application Systems (DDDAS) Program, Program Manager Dr. Frederica Darema.

References
[1] D. Amsallem and C. Farhat. An online method for interpolating linear parametric reduced-order
models. SIAM Journal on Scientiﬁc Computing, 33(5):2169–2198, 2011.
[2] G. Berkooz, P. Holmes, and J. Lumley. The proper orthogonal decomposition in the analysis of
turbulent ﬂows. Annual Review of Fluid Mechanics, 25(1):539–575, 1993.
[3] A M Brintrup, D C Ranasinghe, S Kwan, A Parlikad, K Owens, and The Boeing Company.
Roadmap to Self-Serving Assets in Civil Aerospace. In Proceedings of the 1st CIRP Industrial
Product-Service Systems (IPS2) Conference. Cranﬁeld University, 2009.
[4] T. Bui-Thanh, K. Willcox, and O. Ghattas. Model reduction for large-scale systems with highdimensional parametric input space. SIAM Journal on Scientiﬁc Computing, 30(6):3270–3288,
2008.
[5] K. Carlberg. Adaptive h-reﬁnement for reduced-order models. International Journal for Numerical
Methods in Engineering, 2014. accepted, available online.
[6] M. Dihlmann, M. Drohmann, and B. Haasdonk. Model reduction of parametrized evolution problems using the reduced basis method with adaptive time-partitioning. In D. Aubry, P. Dez, B. Tie,
and N. Pars, editors, Proceedings of the International Conference on Adaptive Modeling and Simulation, pages 156–167, 2011.
[7] A. Ferreira. MATLAB Codes for Finite Element Analysis. Springer, 2008.
[8] D. Kordonowy and O. Toupet. Composite airframe condition-aware maneuverability and survivability for unmanned aerial vehicles. AIAA Paper 2011-1496, Infotech@Aerospace, St. Louis,
Missouri, March 29–31, 2011.
[9] C. Lieberman, K. Willcox, and O. Ghattas. Parameter and state model reduction for large-scale
statistical inverse problems. SIAM Journal on Scientiﬁc Computing, 32(5):2523–2542, 2010.
[10] Y. Maday and B. Stamm. Locally adaptive greedy approximations for anisotropic parameter
reduced basis spaces. SIAM Journal on Scientiﬁc Computing, 35(6):A2417–A2441, 2013.
[11] B. Peherstorfer, D. Butnaru, K. Willcox, and H.-J. Bungartz. Localized discrete empirical interpolation method. SIAM Journal on Scientiﬁc Computing, 36(1):A168–A192, 2014.
[12] B. Peherstorfer and K. Willcox. Dynamic data-driven reduced-order models. Computer Methods
in Applied Mechanics and Engineering, 2014. in review.
[13] L. Sirovich. Turbulence and the dynamics of coherent structures. Quarterly of Applied Mathematics, pages 561–571, 1987.
[14] K. Veroy and A. Patera. Certiﬁed real-time solution of the parametrized steady incompressible
Navier-Stokes equations: rigorous reduced-basis a posteriori error bounds. International Journal
for Numerical Methods in Fluids, 47(8-9):773–788, 2005.
[15] K. Washabaugh, D. Amsallem, M. Zahr, and C. Farhat. Nonlinear model reduction for CFD
problems using local reduced-order bases. In 42nd AIAA Fluid Dynamics Conference and Exhibit,
Fluid Dynamics and co-located Conferences, AIAA Paper 2012-2686, pages 1–16. AIAA, 2012.

2562

