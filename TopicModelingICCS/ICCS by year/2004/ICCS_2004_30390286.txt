Development of SyNRAC—Formula Description
and New Functions
Hitoshi Yanami1,2 and Hirokazu Anai1,2
1

Information Technology Core Laboratories, Fujitsu Laboratories Ltd.
Kamikodanaka 4-1-1, Nakahara-ku, Kawasaki 211-8588, Japan
yanami@flab.fujitsu.co.jp, anai@jp.fujitsu.com
2

CREST, Japan Science and Technology Agency
Kawaguchi Center Building, 4-1-8, Honcho, Kawaguchi 332-0012, Japan

Abstract. In this paper we present newly developed functions in Maplepackage SyNRAC, for solving real algebraic constraints derived from various engineering problems. The current version of SyNRAC provides
quantiﬁer elimination (QE) for the quadratic case and an environment
dealing with ﬁrst-order formulas over the reals (including new simpliﬁers
of formulas) on Maple.

1

Introduction

We presented Maple-package SyNRAC for solving real algebraic constraints in
2003 [1]. SyNRAC stands for a Symbolic-Numeric toolbox for Real Algebraic
Constraints and is aimed to be a comprehensive toolbox composed of a collection
of symbolic, numeric, and symbolic-numeric solvers for real algebraic constraints
derived from various engineering problems.
In this paper we show the current status of development of SyNRAC. In the
previous version of SyNRAC [1] the following algorithms were available
• a special QE by the Sturm-Habicht sequence for sign deﬁnite condition,
• a special QE by virtual substitution for linear formulas,
• some naive simpliﬁcations of quantiﬁer-free formulas.
Besides, the current version of SyNRAC provides the following:
– an environment dealing with ﬁrst-order formulas over the reals,
– a special QE by virtual substitution for quadratic formulas,
– some new standard simpliﬁers of formulas.
Since we ﬁrstly presented SyNRAC, we have introduced some new operational
symbols and ﬁxed a notation system for expressing formulas. We are now developing our tool under the basis of the new environment. The QE algorithms
previously equipped have also been reimplemented after the latest setting. These
new features greatly extend the applicability and tractability of SyNRAC for solving real algebraic constraints in engineering. The current notation for ﬁrst-order
logic over the reals is much easier to read than the previous one. This helps users
describe mathematical formulas for various types of real algebraic constraints. A
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 286–294, 2004.
c Springer-Verlag Berlin Heidelberg 2004

Development of SyNRAC—Formula Description and New Functions

287

special QE method for quadratic formulas widens the application areas of SyNRAC in actual problems (see [2]). The simpliﬁers can reduce the size of a given
formula. This contributes not only to improve recognition of formulas but also
to remarkably improve the eﬃciency of special QE procedures based on virtual
substitution.
Furthermore, using SyNRAC as a kernel, we are now pushing the further
development of design tools based on computer algebra (in particular, QE) in
various application ﬁelds: One successful attempt is the development of a toolbox
for parametric robust control design on MATLAB [3] based on the authors’
previous works concerning QE-based robust control design [4,5,6,7].

2

A New Environment for First-Order Formulas over the
Reals

When we say a real algebraic constraint, what we have in mind is a ﬁrst-order
formula over the reals. We describe what type of formulas we are dealing with
and how they are expressed in SyNRAC.
An atomic formula is an equality or inequality f (x1 , . . . , xn ) ρ g(x1 , . . . , xn ),
where f and g are polynomials in a ﬁnite number of indeterminates over Q and
ρ is one of the relational operators {=, =, ≤, <}. A formula is a string obtained by appropriately arranging atomic formulas, logical operators, or existential/universal quantiﬁers. Here is an example of existential formulas with respect
to x, y, and z
∃x∃y∃z (f1 ∧ f2 ∧ (h1 ∨ h2 ) ∧ f3 ) =⇒ ¬(g1 ∧ g2 ) ,
where fi , gi , and hi are atomic formulas.
To express formulas in SyNRAC, we need to prepare and ﬁx notational symbols for ∃, ∀, ∧, ∨, ¬, and so forth. In the earlier stages of implementation, we
were using relational and logical operators bundled in Maple. As we proceeded,
it turned out that some of the Maple’s operators are unsuitable for our purpose.
Let us show a simple example. Let x be just an indeterminate. The evalb command, which evaluates a relation in Boolean context, in Maple returns false
when x = 0 is input. This behavior does not meet our expectation, because we
want to remain x = 0 unchanged unless x is assigned a value.
To avoid such reactions, we have introduced a user-deﬁned operator &=1
and replaced it for the Maple’s equality symbol ‘=’. To maintain consistency,
the other relational operators are redeﬁned by adding “&” at the forefront of
the respective commands (see Table 1). Some of them are just an alias for the
Maple’s corresponding command. Logical operators and quantiﬁer symbols have
also been redeﬁned in the same way as in Tables 2 and 3. In SyNRAC, the atomic
formula x2 − 2y 2 − 3z 2 ≤ xy − 6yz − z + 7 is expressed in
1

A Maple user can form a neutral operator symbol by using &name (the ampersand
character “&” followed by one or more characters).

288

H. Yanami and H. Anai
Table 1. The relational operators in SyNRAC
Operator =
=
≤
<
≥ >
Notation &= &<> &<= &< &>= &>
Table 2. The logical operators in SyNRAC
Operator ∧
∨
¬
=⇒
⇐= ⇐⇒
Notation &and &or &not &impl &repl &equiv
Table 3. The quantiﬁers in SyNRAC
Operator
∃x1 · · · ∃xn ϕ
Notation &Ex([x1 , . . . , xn ], ϕ)

∀x1 · · · ∀xn ϕ
&All([x1 , . . . , xn ], ϕ)

(xˆ2-2*yˆ2-3*zˆ2) &<= (x*y-6*y*z-z+7) .2
The example formula above is expressed in the following:
&Ex([x,y,z], (f1 &and f2 &and (h1 &or h2 ) &and f3 ) &impl &not(g1 &and g2 )) .

The operators &and and &or can also be used as a preﬁx operator, taking
a list of operands as an argument. The expression &and([f1 , f2 , ..., fn ]) is
equivalent in SyNRAC to f1 &and f2 &and · · · &and fn .
According to these notational rules, QE algorithms has been (re)implemented
in SyNRAC. In addition, several basic utility functions on formulas are provided
in SyNRAC, for example, functions for counting the number of atomic formulas,
extracting atomic formulas from a formula as a list, and so on. Moreover, some
computations for the disjunctive normal form3 are also available.

3

Solving Quadratic Algebraic Constraints over the Reals

Here we brieﬂy explain a special QE by virtual substitution of parametric test
points that is applicable to formulas in which the quantiﬁed variables appear at
most quadratically (see [8] for details). We call a formula whose atomic subformulas are at most quadratic (linear) with respect to its quantiﬁed variables a
quadratic (linear) formula, respectively.
Let
ψ(p1 , . . . , pm ) ≡ Q1 x1 · · · Qn xn ϕ(p1 , . . . , pm , x1 , . . . , xn )
2

3

The polynomials both sides should be enclosed within parentheses since the userdeﬁned operator &name in Maple has higher priority than the basic arithmetic operators. In the examples in the present paper, we leave them out when too convoluted.
A formula is called a disjunctive normal form if it is a disjunction (a sequence of
∨’s) consisting of one or more disjuncts, each of which is a conjunction (a sequence
of ∧’s) of one or more atomic formulas.

Development of SyNRAC—Formula Description and New Functions

289

be a linear or quadratic formula, where Qi ∈ {∀, ∃} and ϕ is a quantiﬁer-free
formula. By using the equivalence ∀xϕ(x)⇐⇒¬(∃x¬ϕ(x)), we can change the
formula into an equivalent one of the form (¬)∃x1 · · · (¬)∃xn (¬)ϕ. The negation ‘¬’ that precedes a quantiﬁer-free formula can be easily eliminated (use De
Morgan’s law and rewrite the atomic subformulas), which is not essential part
of QE. Therefore we may focus our attention on an existential formula, i.e., a
formula of the form ∃x1 · · · ∃xn ϕ(p1 , . . . , pm , x1 , . . . , xn ). Furthermore, it is suﬃcient to show how to eliminate ∃x in ∃xϕ, since all the quantiﬁers in the formula
can be eliminated by removing one by one from the innermost one.
Now our main purpose is to eliminate the quantiﬁed variable ∃x in
ψ (p1 , . . . , pm ) ≡ ∃x ϕ(p1 , . . . , pm , x)
with ϕ(p1 , . . . , pm , x) quantiﬁer-free and quadratic, and obtain an equivalent
quantiﬁer-free formula ψ (p1 , . . . , pm ). For ﬁxed real values q1 , . . . , qm for the
parameters p1 , . . . , pm , all polynomials appearing in ϕ(x) are linear or quadratic.
Therefore, the set M = {r ∈ R|ϕ(q1 , . . . , qm , r)} of real values r for x satisfying
ϕ is a ﬁnite union of closed, open, or half-open intervals over R. The endpoints
of these intervals are among ±∞ and the real zeros of atomic formulas in ϕ.
Then candidate terms, say, t1 , . . . , tk , for those zeros can be constructed by the
solution formulas for linear or quadratic equations.
If ϕ does not contain any strict inequalities, all the intervals composing M
are either unbounded or closed. In the closed case such an interval contains its
real endpoint. So M is nonempty if and only if the substitution of ±∞ or of
one of the candidate solutions tj for x satisﬁes ϕ. Let S be the candidate set
S = {t1 , . . . , tk , ±∞}. Such a set is called an elimination set for ∃xϕ. We obtain
a quantiﬁer-free formula equivalent to ∃xϕ by substituting all candidates in S
into ϕ disjunctively:
∃xϕ ⇐⇒
ϕ(x//t) .
t∈S

We note that there is a procedure assigning the expression ϕ(x/t) obtained from
ϕ by substituting t for x an equivalent formula [8]. We denote the resulting
formula by ϕ(x//t).
If ϕ contains strict inequalities, we need to add to S other candidates of the
form s ± , where s is a candidate solution for some left-hand polynomial in a
strict inequality and is a positive inﬁnitesimal.
For improving the eﬃciency of this method, the following two points are
crucial: (i) reﬁning the elimination set S by a scrupulous selection of a smaller
number of candidates in S; (ii) integrating with sophisticated simpliﬁcations of
quantiﬁer-free formulas. SyNRAC now employs three types of elimination sets
proposed in [9]. Simpliﬁcations in SyNRAC are discussed in the next section.
Moreover, (heuristic) techniques for decreasing the degree during elimination
are important for raising the applicability of quadratic QE, because after one
quantiﬁer is eliminated for a quadratic case the degree of other quantiﬁed variables may increase. Only simple degree-decreasing functions are implemented in
the current version of SyNRAC.

290

4

H. Yanami and H. Anai

Simpliﬁcation

In the present paper, the term simpliﬁcation is used for simpliﬁcation of
quantiﬁer-free formulas. When a quantiﬁer is eliminated in a given ﬁrst-order
formula with a special QE procedure, its quantiﬁer-free part usually gets larger. During a QE algorithm, formulas under manipulation tend to get extremely
large, deeply nested and highly redundant. That is why simpliﬁcation procedures, which equivalently change a quantiﬁer-free formula into more concise one,
are important. Utilizing simpliﬁcation algorithms combined with a special QE
algorithm contributes to improve not only readability of the resulting formula
but eﬃciency of the computation.
As for simpliﬁcation, Maple, on which we implement our toolbox SyNRAC,
can simplify certain formulas. By using Maple’s evalb command for the inequality 3 < 5, the value true are obtained. But it does not work for, say,
‘x < 3 and x < 5’; the evalb command does nothing and just returns
‘x < 3 and x < 5’, not ‘x < 5’. Dolzmann and Sturm [10] summarize the rule
for simplifying such formulas, to be precise, the formula ‘f ρ1 0 and/or g ρ2 0’,
where f and g diﬀer only by a constant c, and ρ1 and ρ2 are an (in)equality.
They called these laws ordering theoretical smart simpliﬁcation when c = 0, i.e.,
f = g and additive smart simpliﬁcation when c = 0, respectively.
Automatic formula simpliﬁers are implemented in REDLOG4 and QEPCAD5
(see [13,10] for possible simpliﬁcations). Several simpliﬁcation rules including ordering theoretical and additive smart simpliﬁcation are implemented in SyNRAC,
which greatly increase the eﬃciency of our QE commands. These rules dramatically work especially when the number of quantiﬁed variables are large.

5

Commands in SyNRAC

In this section we show some computational examples to illustrate how commands in SyNRAC are used.6
First, you need to load the packages:
> read "synrac";

with(combinat);

You can use qe sdc to solve the formula ∀x > 0, f (x) > 0, called the sign
deﬁnite condition (SDC). The ﬁrst argument of qe sdc is polynomial f and the
second is the variable to be eliminated. The next example shows how to use the
command to solve the problem ∀x > 0, a2 x2 + a1 x + a0 > 0,
> qe_sdc(a2*xˆ2+a1*x+a0, x);
( -a0 &< 0 &and a1 &< 0 &and -4*a0+a1ˆ2 &< 0 ) &or
( -a0 &< 0 &and -a1 &< 0 &and -4*a0+a1ˆ2 &< 0 ) &or
( -a0 &< 0 &and -a1 &< 0 &and 4*a0-a1ˆ2 &< 0 )
time = 0.02, bytes = 123614
4
5
6

REDLOG is a QE package based on virtual substitution on REDUCE.
QEPCAD is a general QE package that is applicable to all ﬁrst-order formulas based
on cylindrical algebraic decomposition (CAD) [11,12].
All computations were executed on a Pentium III 1 GHz processor.

Development of SyNRAC—Formula Description and New Functions

291

By using qe lin command, you can solve the existential linear QE problem. This
command takes two arguments; the former is a list of quantiﬁed variables and
the latter a quantiﬁer-free formula. In the following example, qe lin eliminates
the two quantiﬁed variables in ∃x∃y(y > 2x + 3 ∧ x > 0 ∧ y < s) and returns a
condition with regard to s.
> qe_lin(&Ex([x,y], y&>2*x+3 &and x&>0 &and y&<s));
-1/2*s &< -3/2
time = 0.03, bytes = 144686

The qe quad command can deal with quadratic QE problems. You can solve the
quadratic QE problem ∃x∃y(x2 − 4x − 5 ≤ y ∧ 3 ≤ x ∧ y ≤ −5s + 6) as follows:
> qe_quad(&Ex([x,y], &and[(xˆ2-4*x-5)&<=y, 3&<=x, y&<=(-5*s+6)]));
-14+5*s &<= 0
time = 0.03 sec, bytes = 233514

The two examples below show that if a decision problem is given, i.e., the input
contains no free variables, each command returns the true or false value:
> qe_sdc(xˆ5-xˆ2+3*x-9,x);
false
time = 1.11, bytes = 8774262
> qe_lin(&Ex([x,y], y&<2*x+2 and y&<=-3*x+12 and y&>(1/3)*x+5));

A sample point:
time = 0.03, bytes = 155078

true
[x, y], [52/25, 144/25]

A sample point is one that makes the formula true.
By calling the qfsimple command, you can simplify quantiﬁer-free formulas
with ordering theoretical and additive smart simpliﬁcation.
> qfsimple((x&<5 &and x&<c &and x&>=10) &or (x&<=3 &and x&<=5 &and x&>=-5
&and x&<>3) &or (x&>7 &and x&<=d));
(-3+x &<= 0 &and -5-x &<= 0) &or (-x &< -7 &and -d+x &<= 0)
time = 0.00, bytes = 44974

The substsimple command simpliﬁes quantiﬁer-free formulas by making use of
simple atomic equations. This command repeats the following two procedures:
(i) solving the linear atomic equations with only one variable in each conjunctive
formula and substituting its solution for the variable as far as its inﬂuence goes;
(ii) calling the qfsimple command and simplifying the resulting formula. These
are redone until such linear equations run out.
In the next example, z in the input formula is ﬁrstly substituted by 3/2 except in
the 4th atomic one, and then by using the 1st equation in the resulting formula,
x is replaced by 3/5 in three places.
> substsimple(5*x&=2*z &and 9&>=3*y-x &and x+4*y+z&>0 &and 2*z-3&=0
&and 5*x+2*y&<=z+3);

292

H. Yanami and H. Anai

x &= 3/5 &and -40*y &< 21 &and z &= 3/2 &and -3+4y &<= 0
time = 0.00, bytes = 97406

6

Examples

We show two example problems from mathematical programming and solve them
with SyNRAC.
Example 1 First consider the following convex quadratic programming:
minimize x21 + x1 x2 + 2x22 ,
subject to x1 + 4x2 ≥ 16, 3x1 + 2x2 ≥ 18, x1 ≥ 0, x2 ≥ 0.
To obtain a description of the ﬁrst-order formula, we add an unqualiﬁed variable
z and express the problem in
∃x1 ∃x2 (z−(x21 +x1 x2 +2x22 ) ≥ 0∧x1 +4x2 ≥ 16∧3x1 +2x2 ≥ 18∧x1 ≥ 0∧x2 ≥ 0) .
Eliminating the quantiﬁed variables x1 and x2 , we can obtain a condition on
z, from which we would obtain the range of the objective function. Quantiﬁer
elimination procedure in SyNRAC outputs the condition below in 1.78 sec:
&or([46 - z &<= 0, &and([567 - 16 z &<= 0,
&or([(46 - z) &= 0, &and([46 - z &<= 0, -162 + z &<= 0]),
&and([-466 + z &<= 0, 2659 - 40 z &<= 0]), 2659 - 40 z &<= 0])]),
&and([46 - z &<= 0, -256 + z &<= 0])])

A little computation tells us that this formula is equivalent to z ≥ 46. Thus the
minimum of the objective function x21 + x1 x2 + 2x22 equals 46.
Example 2 Next we consider the following nonconvex programming:
minimize x1 + 3x2 ,
subject to x21 + x2 − 4x1 − 3 ≥ 0, x21 + 2x2 − 12x1 + 32 ≥ 0, x1 ≥ 0, x2 ≥ 0.
As in the ﬁrst example, we rewrite the problem by using a slack variable z into
2

2

∃x1 ∃x2 (z − (x1 + 3x2 ) ≥ 0 ∧ x1 + x2 − 4x1 − 3 ≥ 0 ∧ x1 + 2x2 − 12x1 + 32 ≥ 0 ∧ x1 ≥ 0 ∧ x2 ≥ 0) .

Quantiﬁer elimination procedure as well as simpliﬁcation after QE outputs the
condition below in 6.12 sec:
-155 + 25*42ˆ(1/2) - z &<= 0

√
Thus the minimum of the objective function x1 + 3x2 is −155 + 25 42, or
approximately 7.02.

7

Conclusion

We presented a newly developed functions in Maple-package SyNRAC. The current version of SyNRAC, in particular, provides quantiﬁer elimination for quadratic case and some standard simpliﬁers of formulas over the new environment for

Development of SyNRAC—Formula Description and New Functions

293

ﬁrst-order formulas over the reals on Maple. The new features greatly extend the
applicability and tractability of SyNRAC for solving real algebraic constraints in
engineering. We are continually improving the eﬃciency of implemented algorithms and are going to implement other algorithms (including symbolic-numeric
algorithms) for solving real algebraic constraints into SyNRAC.
Now we note that based on SyNRAC the development of a toolbox for parametric robust control design on MATLAB is ongoing.
We are aware that there is still a considerable way for SyNRAC to be a
sophisticated symbolic-numeric tool. Hence we will keep progressing to bridge
the gap. Our goal is to develop innovative symbolic-numeric methods and to
build novel design tools via SyNRAC for various ﬁelds in engineering.
Acknowledgements. The authors would like to thank Volker Weispfenning for
his invaluable advice.

References
1. Anai, H., Yanami, H.: SyNRAC: A Maple-package for solving real algebraic constraints. In: Proceedings of International Workshop on Computer Algebra Systems and their Applications (CASA) 2003 (Saint Petersburg, Russian Federation),
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, Springer (2003) 828–837
2. Dolzmann, A., Sturm, T., Weispfenning, V.: Real quantiﬁer elimination in practice.
In Matzat, B.H., Greuel, G.M., Hiss, G., eds.: Algorithmic Algebra and Number
Theory. Springer, Berlin (1998) 221–247
3. Sakabe, K., Yanami, H., Anai, H., Hara, S.: A MATLAB toolbox for parametric
robust control system design based on symbolic computation. In: Bulletin (Kokyuroku) of RIMS (Research Institute for Mathematical Sciences, Kyoto Univ.)
Workshop on Computer Algebra—Algorithms, Implementations and Applications
2003 (15-18 December 2003), (To appear)
4. Anai, H., Hara, S.: Fixed-structure robust controller synthesis based on sign deﬁnite condition by a special quantiﬁer elimination. In: Proceedings of American
Control Conference 2000. (2000) 1312–1316
5. Anai, H., Hara, S.: Linear programming approach to robust controller design by a
quantiﬁer elimination. In: Proceedings of SICE Annual Conference 2002 (Osaka,
Japan). (2002) 863–869
6. Anai, H., Hara, S.: A parameter space approach for ﬁxed-order robust controller
synthesis by symbolic computation. In: Proceedings of IFAC World Congress on
Automatic Control b’02. (2002)
7. Anai, H., Yanami, H., Hara, S.: SyNRAC: a maple-package for solving real algebraic
constraints toward a robust parametric control toolbox. In: Proceedings of SICE
Annual Conference 2003 (Fukui, Japan). (2003) 1716–1721
8. Weispfenning, V.: Quantiﬁer elimination for real algebra—the quadratic case and
beyond. Applicable Algebra in Engineering Communication and Computing 8
(1997) 85–101
9. Loos, R., Weispfenning, V.: Applying linear quantiﬁer elimination. The Computer
Journal 36 (1993) 450–462 Special issue on computational quantiﬁer elimination.
10. Dolzmann, A., Sturm, T.: Simpliﬁcation of quantiﬁer-free formulae over ordered
ﬁelds. Journal of Symbolic Computation 24 (1997) 209–231

294

H. Yanami and H. Anai

11. Collins, G.E.: Quantiﬁer elimination for the elementary theory of real closed ﬁelds
by cylindrical algebraic decomposition. In Brakhage, H., ed.: Automata Theory
and Formal Languages. 2nd GI Conference. Volume 33 of Lecture Notes in Computer Science., Gesellschaft f¨
ur Informatik, Springer-Verlag, Berlin, Heidelberg, New
York (1975) 134–183
12. Collins, G.E., Hong, H.: Partial cylindrical algebraic decomposition for quantiﬁer
elimination. Journal of Symbolic Computation 12 (1991) 299–328
13. Gonz´
alez-Vega, L.: A combinatorial algorithm solving some quantiﬁer elimination
problems. In Caviness, B., Johnson, J., eds.: Quantiﬁer Elimination and Cylindrical Algebraic Decomposition. Texts and monographs in symbolic computation.
Springer-Verlag (1998) 365–375

