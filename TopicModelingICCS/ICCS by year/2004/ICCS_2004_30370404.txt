Reconstruction of 3D Curvilinear Wireframe Model from
2D Orthographic Views
1

1,2

1

1

1

Aijun Zhang , Yong Xue *,Xiaosong Sun , Yincui Hu , Ying Luo ,
1
1
1
1
1
Yanguang Wang , Shaobo Zhong , Jianqin Wang ,Jiakui Tang , and Guoyin Cai
1

Laboratory of Remote Sensing Information Sciences, Institute of Remote Sensing
Applications, Chinese Academy of Sciences, P. Box 9718, Beijing 100101, China,
aj.zhang@263.net
2
Department of Computing, London Metropolitan University, 166-220 Holloway Road,
London N7 8DB, UK
y.xue@londonmet.ac.uk

Abstract. An approach for reconstructing wireframe models of curvilinear
objects from three orthographic views is discussed. Our main stress is on the
method of generating three-dimensional (3D) conic edges from twodimensional (2D) projection conic curves, which is the pivotal work for
reconstructing curvilinear objects from three orthographic views. In order to
generate 3D conic edges, a five-point method is firstly utilized to obtain the
algebraic representations of all 2D projection curves in each view, and then all
algebraic forms are converted to the corresponding geometric forms
analytically. Thus the locus of a 3D conic edge can be derived from the
geometric forms of the relevant conic curves in three views. Finally, the
wireframe model is created after eliminating all redundant elements generated
in previous reconstruction process. The approach extends the range of objects to
be reconstructed and imposes no restriction on the axis of the quadric surface.

1 Introduction
Automatic conversion from 2D engineering drawings to solid models which allows
existing engineering drawings to be fully used for newer designs is an important
research topic in computer graphics and CAD. Much work has already been done on
automatically reconstructing solid models from orthographic views to date[1-6].
However, the existing approaches have some limitations, which hinder the work from
developing further. One of the major limitations is the narrow range of solid objects
which can be generated from 2D views. The earlier work was able to generate planar
polyhedral objects whose projections contain only lines[1,2]. Most of the later
research has concerned with extending the range of objects to be reconstructed.
Sakurai[3], Gu[4], Lequette[5], and Kuo[6] extended the earlier method to deal with
curved surfaces. However, they restricted the orientation of the quadric surface to be
parallel to one of the coordinate axes or projection planes.
In this paper, we propose a wireframe-oriented approach that can handle a wider
variety of manifold objects with curved surfaces and conic edges than existing
*

Corresponding author

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 404–411, 2004.
© Springer-Verlag Berlin Heidelberg 2004

Reconstruction of 3D Curvilinear Wireframe Model from 2D Orthographic Views 405

methods, and impose no restrictions on the orientation of the quadric surface. A key
idea of our work is to utilize five-point method to generate 3D conic edges, which
was employed by Kuo. Nevertheless, our method differs from that of Kuo’s
somewhat. The difference will be discussed in section 3.2.

2 Preprocessing of the Input Drawing
The input drawing consists of three orthographic views of the objects. i.e., front view,
top view, and side view. Only the necessary geometric elements in the drawing are
taken into consideration, and three views have been separated and identified[6]. In
addition, auxiliary lines must be added to the views as the corresponding projections
of tangent edges and/or silhouette edges for curved objects.
2D points and segments in each view are stored in P_list(view) and S_list(view),
respectively, where view is front, top, or side. Each item of P_list(view) holds
coordinate value and type. Each item of S_list(view) holds indices of its two endpoints
and type.

3 Generation of Wireframe
Generating wireframe is the early stage of reconstruction using wireframe-oriented
approach, during which all the possible 3D elements constituting the wireframe are
recovered from the 2D elements in three views. We call the 3D elements candidate
vertices, candidate edges, and candidate faces during the reconstruction, written as cvertices, c-edges, and c-faces, respectively.
3.1 Generation of 3D Candidate Vertices
We use the method to generate 3D c-vertices which has been detailed in previous
work [1-6]. The c-vertices are stored in V_list(), each item of which holds coordinate
values, corresponding points in each views, associated 3D edges, and type.
3.2 Generation of 3D Candidate Edges
In this section, we focus on the method for generating 3D conic edges, which is based
on some important properties of the conic section under orthographic projection.
3.2.1 Construction and Representation of Projection Conics
Conic curves are defined in two ways in general: implicitly and parametrically. In
solid modeling, a common way of representing a conic is by its more intuitive
geometric parameters[7], so this representation form, unlike the implicit one, requires
a different definition for each type of conic. In most cases, however, the type of a
projection curve is not directly available from the views, for there are no explicit

406

A. Zhang et al.

notations for it. Hence it is much difficult to derive the straightforward geometric
representation for each type of conic curve. In our approach, therefore, the five-point
method is employed to obtain the algebraic equation of a 2D projection conic curve
firstly, and then the algebraic form is converted to the geometric representation
analytically, seeing that it is more easy to obtain the algebraic equation of a conic
curve and this form can be conveniently converted to the geometric representation.
While in Kuo’s approach, the geometric representation of 2D projection conic curves
are obtained directly, which needs more complex geometric computation because no
more definite conic types are available from the views.
We begin with describing the general equation for a 2D conic curve in the
projection plane coordinates. Basically, the 2D coordinate systems associated with the
three projection planes are denoted as x-y for top view, x-z for front view, and y-z for
side view, respectively. Without loss of generality, suppose ct(p1,p2) is a curve in top
view, in which p1(x1,y1) and p2(x2,y2) are the endpoints of the curve. We regard it as a
conic on the basis of the theorems of the conics under orthographic projection [8].
The conic curve ct in top view can be described by an algebraic expression:
2
2
a 11 x + 2 a 12 xy + a 22 y + 2 a 13 x + 2 a 23 y + a 33 = 0

(1)

In order to construct this conic curve, we choose arbitrary three points excluding
two endpoints p1 and p2, say pi(xi,yi), i=3,4,5. The five points, pi(xi,yi), i=1,2,…,5, in
which no three points are collinear, uniquely determine the projection conic. The
conic coefficients in Eq.(1) are the solution to

P [a 11

a 12

a 22

a 13

a 23

a 33 ]T = 0

where

 x12

 x 22
P =  x 32

 x 24

 x 52

2 x1 y1

y12

2 x1

2 y1

2 x2 y2

y 22

2 x2

2 y2

2 x3 y 3

y 32

2 x3

2 y3

2 x4 y4

y

2
4

2 x4

2 y4

y

2
5

2 x5

2 y5

2 x5 y 5

1


1

1
1

1

3.2.2 Classification of Projection Conics
The type of a conic expressed in the form of Eq.(1) is determined easily by being
converted to the geometric representation according to analytic geometry[7]. The
geometric parameters for the conic are derived as follows:
(1) The orientation θ of conics

a11 − a 22
1
θ = 2 ctg −1
2 a 12
(2) The geometric parameters for central conics

x0 = a12 a 23 − a 22 a13
2
a11 a 22 − a12

y0 =

a12 a13 − a11 a 23
2
a11 a 22 − a12

Reconstruction of 3D Curvilinear Wireframe Model from 2D Orthographic Views 407

{
 {
−a

}
}

' ,
'
 − a'33 a11
− a33
a'22

{a, b} = 

'
33

' ,
'
a11
a33
a'22

for an ellipse
for a hyperbola

where

a + a 22
a − a 22 cos 2 + a 12 sin 2
'
a 11
= 11
+ 11
θ
θ
2
2
a '22 = a 11 + a 22 − a 11 − a 22 cos 2 θ − a 12 sin 2 θ
2
2
' =
a 33 ( a13 x 0 + a 23 y 0 ) + a 33
(3) The geometric parameters for a parabola

p=

−I

3

I 13

2
c − 2 a 2 3 c + a 22 a 3 3
x0 =
2 ( a 12 a 23 − a 13 a 22 )

y0 =

2
a 11 c 2 − 2 a 12 a 13 c + a 12
a 33
2 a 12 ( a 13 a 22 − a 12 a 23 )

where

I 1 = a 11 + a 22

a11 a12 a13
I 3 = a12 a 22 a 23
a13 a 23 a33

c=

a 12 a 13 + a 22 a 23
a 11 + a 22

From the above derivations, we could obtain the parameter equations of
commonly utilized conic curves, e.g., elliptical curves, hyperbolic curves, and
parabolic curves, easily [7].
3.2.3 Reconstruction of 3D Conics
We now consider a point matching method to determine the relationship between the
three projection conic curves of a 3D conic. Let v1 and v2 be two different vertices and
their corresponding points in three views be (pt1, pf1, ps1) and (pt2, pf2, ps2),
respectively. A conic edge, e(v1, v2), was found when there existed a conic connection
between the two corresponding points of v1 and v2 in each view, viz. ct(pt1, pt2)
between pt1 and pt2 in top view, cf(pf1, pf2) between pf1 and pf2 in front view, cs(ps1, ps2)
between ps1 and ps2 in side view, and it satisfied Eq.(2), providing there was no
internal vertices on the edge, in between v1 and

|pti(x)-pfi(x)|≤ε and |pti(y)-psi(y)|≤ε and |pfi(z)-psi(z)|≤ε

(2)

408

A. Zhang et al.

where pti ∈ct(pt1 , pt2 ), pfi ∈cf (pf1 , pf2 ), psi ∈cs (ps1 , ps2 ), and i=3,4,5, ε is a tolerance
introduced to allow for an inexact matching problem, considering the fact that the
input data may not give an exact alignment of coordinates between each view.
According to the point matching method, when the expression of each corresponding
projection conic curve in three views is generated, it is easy to derive the 3D conic.
Without loss of generality, let

x = ϕ1 (α )
z = ϕ 2 (α )

α1 ≤ α ≤ α 2

(3)

β1 ≤ β ≤ β 2

(4)

and

x = φ1 ( β )

y = φ 2 (β )

be two corresponding projections of a 3D conic edge, in the front and top views,
respectively. Eq.(3) and (4) share the x-axis and have the same x-coordinate.
Therefore we can derive that the combination of Eq.(3) and (4) associates with the
locus of a 3D conic edge.
Observe Eq.(3) and (4), in order to eliminate one of the two variants(e.g. α), it is
necessary to review the algebraic form of the projection conic in front view

f ( x, z ) = a11 x 2 + 2a xz + a 22 z 2 + 2a x + 2a z + a33 = 0
12
13
23

(5)

solving the z-coordinate value, then the explicit form of Eq.(5) is expressed as
2

z=

− ( a12 x + a 23 ) ± ( a12 x + a 23 ) − a 22 ( a11 x 2 + 2 a13 x + a 33 )
a 22

(6)

We can rewrite Eq.(6), substituting x value derived from Eq.(4) for the original x
value in Eq.(3), as the following simplified form:

z = φ 3 (β )

β1 ≤ β ≤ β 2

(7)

It follows that the corresponding 3D conic is the locus which satisfies

x = φ1 ( β )
y = φ 2 (β )
z = φ 3 (β )

β1 ≤ β ≤ β 2

(8)

Reconstruction of 3D Curvilinear Wireframe Model from 2D Orthographic Views 409

Thus, in accordance with the types of the relevant 2D projection conic curves in
three views, we can get the corresponding 3D conic depicted in the form of Eq.(8).
3.2.4 3D c-Edges Reconstruction Algorithm
In previous algorithms, the process to generate c-edges is obviously time
consuming[1-6]. In this section, an accelerated method is introduced to decrease the
processing time. The major steps of 3D c-edges generation procedure are as follows:
Step1. Select a 2D projection conic segment arbitrarily in one view, e.g., ct (pt1,
pt2) in top view, where pt1, pt2∈P_list(Top), ct ∈S_list(Top);
Step2. Get two 3D vertices, v1 and v2, from the V_list(), whose corresponding
projections in top view are pt1 and pt2, respectively. Then search for the corresponding
2D projections of v1 and v2 in another two views, i.e., the front and side views,
accordingly pf1, pf2∈P_list(Front), ps1, ps2∈P_list(Side), respectively;
Step3. Examine each pair of 2D points, (pf1, pf2) and (ps1, ps2), to determine
whether or not there exists a 2D curve segment connecting the two points of each
pair. If it is true, it is certain that at least one 3D edge between v1 and v2;
Step4. In accordance with the type of ct (pt1, pt2) in top view, choose the
corresponding 2D curve segments, cf (pf1, pf2) and cs (ps1, ps2), respectively, from the
remaining two views. A 3D c-edge between v1 and v2 then can be generated by
applying the method for constructing a 3D conic discussed in previous sections.
During the above steps, each 2D segment is labeled as examined after being
examined. In this case, the performance of constructing 3D c-edges is finished until
all segments in three views are labeled as examined.
All 3D c-edges are stored in E_list(), each item of which holds two endpoints,
corresponding conic segments in each of three views, parametric equation of the 3D
conic containing the edge, and type.
3.3 Construction of Wireframe
There may exist some redundant elements in V_list() and E_list(), on account of the
fact that the reconstruction is a process of recovering information from low
dimensions to high dimensions. In the stage of wireframe generation, redundant
elements generally involve overlapping edges and pathological elements[2],which
may not only increase the complexity of the computation, but also introduce
ambiguities in the wireframe as well as solid model generation process. Therefore,
they must be eliminated from V_list() and E_list(), respectively.
Thus, we can establish the wireframe with the V_list() and E_list() containing the
information of 3D vertices and edges, whose reprojections are identical with the input
drawings, and that each element, i.e., vertex or edge, in the wireframe satisfies the
following topological conditions:
(1) ∀vj ∈V_list(), ∃ρ(vj)≥3;
(2) ∀ej ∈E_list(), ∃ vj, vj+1∈V_list(), where vj, vj+1 are two endpoints of ej ;
(3) ∀ei, ej ∈E_list(), ∃ei∩ej ={ vk } and vk∈V_list(), or ei∩ej =φ.
Where ρ(v) denotes the edge connectivity of the c-vertex v.

410

A. Zhang et al.

4 Implementation
Based on the method described above, the prototype implementation of reconstruction
is realized in C++ . Figure 1 demonstrates the case that can be handled by our method,
the implementation is restricted to three orthographic views and curvilinear objects.
Figure 1(b) shows the wireframe reconstructed from a three-view engineering
drawing with straight lines, circular and elliptical arcs in Figure 1(a).

(a) Three-view engineering drawings

(b) Wireframe

Fig. 1. The wireframe of an object reconstructed from a three-view engineering drawing with
straight lines, circular and elliptical arcs

5 Conclusion
A wireframe-oriented approach to reconstruct 3D wirframes of curvilinear solids from
three orthographic views is presented, in which the method to generate conic edges is
emphasized. In order to obtain 3D conic edges, the five-point method is firstly applied
to obtain the geometric representations of 2D projection conic curves in each view in
two steps, and then 3D conic edges described in the form of coordinate locus are
accordingly derived from corresponding 2D projections afterwards by using point
matching method. In addition, an accelerated algorithm to generate 3D edges is
introduced to decrease the processing time. At last, the wireframe is established when
the redundant elements are removed from candidate vertices and edges. Our approach
extends the range of objects to be reconstructed, i.e., an object may include straight
lines, circular arcs, elliptical arcs, parabolic arcs, and hyperbolic arcs, and imposes no
restriction on the axis of the quadric surface.

Reconstruction of 3D Curvilinear Wireframe Model from 2D Orthographic Views 411

Acknowledgement. This publication is an output from the research projects "CAS
Hundred Talents Program", "Digital Earth" (KZCX2-312) funded by Chinese
Academy of Sciences and “Dynamic Monitoring of Beijing Olympic Environment
Using Remote Sensing” (2002BA904B07-2) funded by the Ministry of Science and
Technology, China.

References
1. Wesley MA, Markowsky G. Fleshing out projection. IBM Journal of Research and
Development 1981; 25(6): 934-954.
2. Yan QW, Philip CL, Tang Z. Efficient algorithm for the reconstruction of 3-D objects from
orthographic projections. Computer-aided Design 1994; 26(9): 699-717.
3. Sakurai H, Gossard DC. Solid model input through orthographic views. Computer Graphics
1983; 17(3): 243-25.
4. Gu K, Tang Z, Sun J. Reconstruction of 3D solid objects from orthographic projections.
Computer Graphics Forum 1986; 5(4): 317-324.
5. Remi Lequette. Automatic construction of curvilinear solids from wireframe views.
Computer-aided Design 1988; 20(4): 171-179.
6. Kuo MH. Reconstruction of quadric surface solids from three-view engineering drawings.
Computer-aided Design 1998; 30(7): 517-527.
7. Wilson PR. Conic representations for shape description. IEEE Computer Graphics and
Applications 1987; 7(4): 23-30.
8. Nalwa VS. Line-drawing interpretation: straight lines and conic sections. IEEE
Transactions on Pattern Analysis and Machine Intelligence 1988; 10(4): 514-529.

