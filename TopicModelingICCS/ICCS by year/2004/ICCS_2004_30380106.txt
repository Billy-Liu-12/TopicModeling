A Conceptual Model for Grid-Adaptivity
of HPC Applications and Its Logical Implementation
Using Components Technology
A. Machì and S. Lombardo
ICAR/CNR Department of Palermo
{machi,s.lombardo}@pa.icar.cnr.it

Abstract. Today grid middleware is complex to be used, the development of
grid-aware applications is error-prone and the Virtual Organization grid
paradigm contrasts with traditional High Performance Computing (HPC)
optimisation strategies relying on resource stability and known cost models.
The authors analyse several aspects of grid adaptivity, and identify 4 roles: the
active resource/execution manager, the proactive resource administrator, the
reactive quality-service coordinator, the passive resource coordinator. They
present a hierarchical model for a component-based grid-software infrastructure
in which the resource administrator and the resource coordinator roles are
assigned to grid middleware and the quality-service role to HPC skeletons.
Roles interactions through interfaces are described for a component based
infrastructure implementation. The resource administrator mimics functionalities of components containers of service-oriented architectures. The resource
coordinator manages the life cycle of sets of processes over a pool of grid
resources. It offers to upper infrastructure layers a Virtual Private Grid façade,
simulating a processor cluster facility.

1 Introduction
The computational Grid paradigm defines a flexible, secure, coordinated large-scale
resource-sharing model. Its focus is on large-scale problem-solving in dynamic,
multi-institutional Virtual Organizations [1].
High performance computing has been, instead, traditionally oriented to
performance optimisation of proprietary resources on local or wide area networks.
Optimisation exploits knowledge of management policies at any level (computational
models, resource connection patterns, cost models of the processor interaction
graphs). In particular, the structured parallel programming approach has embodied
such knowledge into patterns for the management of set of processes described by
notable Directed Graphs, called skeletons and parmods [2-3]. Skeletons are
automatically coded by parallel compilers to keep parallel efficiency and software
portability high, while maintaining parallel programming difficulty low.
Code developed with such a structured approach for environments mapped on
static networks of resources, managed with stable policies of exclusive resource
allocation or partitioning, is inefficient on wide-area networks of dynamically
discoverable and shareable resources. Resource unreliability, intrinsic in the Virtual
Organization model, deceives any forecast based on cost models.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 106–113, 2004.
© Springer-Verlag Berlin Heidelberg 2004

A Conceptual Model for Grid-Adaptivity of HPC Applications

107

One approach to such a problem is to develop self-adaptive parallel coordination
patterns, where some node in the application process graph maintains awareness of
past grid nodes performance statistics and of grid resources present status to optimally
adapt process coordination. For instance, grid-awareness can be used to steer load
balancing by means of optimal mapping of virtual processes over physical nodes
according to their effective performance [4]. Otherwise, it can be used for substituting
faulty nodes in a process graph or to redistribute data stream processing among
workers of a farm when any worker is not honouring its performance contract [5].
Programming adaptivity for each coordination pattern is a complex and error-prone
activity and makes porting of legacy (structured) parallel code hard.
We propose to adopt a hierarchical programming approach in which grid adaptivity
is distributed among various layers of the software environment, playing different
roles: the execution environment (active resource/execution manager), the application
coordination middleware (proactive resource administrator), the application
component layer (reactive quality-service coordinator) and the platform management
middleware (passive platform coordinator). Clear separation of roles allows
independent implementation of layers, as well as easy maintenance and run-time
substitution of grid infrastructure components.
Specifically, adaptivity is factorised into the following tasks: a) discovery and
reservation of grid nodes and services and definition of application virtual process
graph (task assigned to the execution environment); b) optimal mapping of
application process graph (assigned to the application coordination middleware); c)
load balancing for nodes of the actual instance of the process graph (assigned to
application components); d) monitoring of graph physical process set and (re)
configuration of their ports (assigned to the lower middleware layer).
Two patterns are defined: the Virtual Private Grid (VPG), a passive facade pattern
which hides management of physical nodes and processes on the grid, and the Gridaware Component Administrator, a reactive pattern which hides actual management
of application components constrained to honour Quality of Service criteria.
The remainder of this paper is organized as follows. Section 2 sketches the
hierarchical adaptivity model. Section 3 describes the functionalities of logical
components implementing the model. Sections 4 and 5 expose current status of
implementation of the runtime support layer prototype and research perspectives.

2 A Hierarchical Conceptual Model for Grid Adaptivity
Let’s represent an HPC application, at conceptual level, as a Directed Graph (DVG )
describing interaction of Virtual processors. Let’s also represent it, at implementation
level, with the Direct Graph (DPG) of the Physical processing units that implement
DVG. Each graph node represents an application functionality or resource (a data or
event source/sink, a computation, a control or a service). Each arc describes a
data/event transfer or a path. DVG nodes are assigned weights representing their
expected processing load, while arcs are labelled with weights representing expected
data throughput. DPG nodes are assigned weights representing their effective
available power while nodes are labelled according to the effective bandwidth
available. After virtual process coding and DVG graph composition, application lifecycle can be factored into five main phases: discovery and reservation of a meaningful

108

A. Machì and S. Lombardo

Fig. 1. Hierarchical representation of an HPC application over the grid. Upper layer: HPC
application as a coordination of Virtual Processors DVG and an external Process Manager.
Intermediate layer: Virtual Private Grid of computational resources (Master + Remote Engines)
administrated by middleware on behalf of application to support adaptivity: DPG + spare nodes
(dashed). Lower level: actual temporary mapping of VPG nodes over the grid.

set of proper physical resources, mapping of a DVG into a DPG, initialisation of
DPG, activation plus execution of DVG processes on DPG, and release of allocated
resources at completion.
HPC practice requires DVG execution to satisfy Quality of Service constraints
often expressed as performance contracts to be honoured by the platform which
enables DVG operation.
Adaptivity of the HPC application is required to cope with events affecting the
composition of DVG resources set or even the behaviour of any of its elements:
−
−
−
−
−

Fault of any processing node (graph disconnection)
Fault of any connection between nodes (graph disconnection).
Insertion of an additional resource (sub graph join)
Redirection of a link to an external service (leaf node cut+leaf node join)
Change of node effective power or link bandwidth (node/arc weight change)

Other events correspond to the occurrence of overall processing states:
− Performance contract violation (insufficient DVG node weights or non-optimal
DVG to DPG mapping)
− Parallel inefficiency (excessive DVG node weights, or sub optimal DVG mapping).
Adaptation to such events is possible only if proper constraints are satisfied:
− Graph disconnection is a catastrophic event whose recovery from checkpoints is
possible only if a mechanism for periodical backup of application status is
expressly provided by application or run-time support [6].

A Conceptual Model for Grid-Adaptivity of HPC Applications

109

− Adaptation to worker node fault or to node join is possible in master-slave
implementations of skeletons like a map or a farm if a mechanism is provided to
force any graph node to perform synchronous re-initialisation of the
communication environment.
− Adaptation to dynamic redirection of a link to a leaf node implementing a service
requires asynchronously forcing of the node to close its channel to the service and
to open a new one.
− Adaptation to variance of worker node effective power or link bandwidth is
possible for stream-parallel skeletons if knowledge of worker sub graph weights is
expressly used for workload partitioning in the implementation template [7].
− Finally, adaptation to global performance states requires access to resource
management privileges, normally reserved to a coordination process external to the
process graph.
Each adaptivity case requires a different level of activity and of grid-awareness. It can
be modelled using different actors playing hierarchically cooperative roles.
At topmost hierarchy level we find (re)selection of proper resources (nodes,
services and DVGs). It requires grid discovery ability, detailed grid-awareness,
reservation privileges and an adequate policy to coordinate resource provision and
application Quality of Service. These tasks define the role of an active
resource/execution manager.
At intermediate level we lay adaptive management of available grid resources for
optimal execution of a defined application graph of processes. Taking advantage of
self optimisation capability embodied in parallel skeleton templates, grid-adaptivity
may be factorised in two roles: optimal administration of a pool of resources on
behalf of a quality-application, and optimal administration of the set of resources
assigned to a single application. The first role requires definition of each application
quality in terms of a performance contract, selection of optimal subset for DVG to
DPG mapping, monitoring of DPG performance and a policy for DPG
reconfiguration. These tasks define a proactive resource administrator role, driven by
a moderately complex ontology. The second role mimics load (re) balancing of
physical processes over a cluster of virtually privates inhomogeneous resources
labelled with their effective quality indexes plus partial reconfiguration of the
processor graph in the event of resource modifications. These tasks define a reactive
quality-service coordinator role, as the one implemented in some parallel skeletons.
At lowest level we lay effective monitoring of resource status, support for DVG to
DPG mapping and re-mapping, detection and registration of events requiring attention
and possible adaptation, tasks executable by a passive resource coordinator.
The hierarchical role model for HPC grid-adaptivity may be mapped to a componentbased grid software infrastructure. The resource administrator and the resource
coordinator roles are assigned to grid middleware while the quality-service
coordinator role is assigned to skeletons. The resource administrator mimics
functionalities of components containers of service-oriented architectures. The
resource coordinator manages the life cycle of sets of processes on top of a pool of
grid resources and offers to the upper layers a Virtual Private Grid facade simulating
a processor cluster facility.
Next section describes a logical view of the software infrastructure as cooperation
among software components playing model roles.

110

A. Machì and S. Lombardo

3 Functional Model of Middleware Infrastructure
Software component technology is a young programming-paradigm, even though its
definition is quite old. Its aim is to enable the development of applications by
composing existing software elements in an easy way. Among various definitions of
the component concept, we report Szyperski’s one [8]: ”A software component is a
unit of composition with contractually specified interfaces and explicit context
dependencies only. A software component can be deployed independently and is
subject to composition by third parties”.
The Globus Project has proposed the OGSA model for implementing and
coordinating services over the grid. A component architecture for adaptive grid
programming compliant with OGSA model been defined in [1]. A component
architecture focusing on HPC grid programming is presently being developed by the
italian Grid.it project [9]. The details of the architecture are a topic of current research
In the working model [10] components expose their functionalities through a series of
interfaces that differ for the interaction paradigm: (Remote Procedure Calls, streams,
events, configuration). Interface signature together with implementation technology
and communication protocol defines a port type. Components with same or
compatible port-types can be connected together. In the framework of the Grid.it
project, we exploit this component architecture to implement a graceful distribution of
adaptivity roles, events and actions. Figure 2 shows the components implementing the
architecture and their interactions. Each component is represented as an UMLpackage and its interfaces as UML-classes [11].
Passive roles provide slave functionalities through provide-ports (factory, serviceprovide and config), active roles use them via Remote Procedure Calls use-ports
(discovery, system, service-invoke) as in CCA compliant frameworks [15]. Event
ports of the run time support provide to the reactive application component an event
bus for meaningful events registration and notification, to enable its reactive role.
The Execution Environment uses services exposed by Grid services, Component
administrator and Application components.
The Component Administrator component exposes the following interfaces:
– component_factory: an extension of the factory design pattern [12] to the domain
of distributed computing. It has the same goal of the OGSA Factory Port Type,
even though it differs in some details. Factory services include submission of a
Virtual Process Graph with its Quality-of-Service profile and VPG hardware
resources creation and modification.
– service_provide: it exposes a set of functionalities about the status of submitted
applications.
– component_config: modification of leaf nodes of DVG (external services
binding).
The Component Administrator uses services of VPG master service-provide port to:
– deploy a set of processes (DVG) with related libraries on the VPG;
– start a set of processes (DPG) on the VPG;
– retrieve information about the status of managed hosts (nodes of the VPG) and
about life status of started processes.

A Conceptual Model for Grid-Adaptivity of HPC Applications

111

Fig. 2. Grid Layered Components Framework

– retrieve information about the proceeding status of DPG processes to detect
Quality-of-Service violations;
– notify self-configuration requests to application-components.

112

A. Machì and S. Lombardo

4 Current Implementation of the VPG RunTime Support
A VPG Runtime Support prototype is presently being developed as a research activity
of Project Grid.it. Actual component implementation is based on usage of several
design patterns [13]: acceptor-connector, reactor, proxy, wrapper and adapter. A
platform independent SDK for these patterns is provided by open-source objectoriented framework ACE [14], which enables code portability of the run-time system.
The Virtual Private Grid pattern is implemented by the following two components:
1. VPG-Master: the VPG front-end. It administers hosts by exposing methods for
administrating node facilities (mount, un-mount, keep alive, get-status) and for
controlling set of processes (deploy, start, kill, delete, get-status). It exposes this
functionality by accepting XML-commands through a socket service-provide port.
2. VPG-Remote Engine: a daemon running on each host mounted on VPG as a slave
for VPG-Master requests. It implements the remote run-time environment,
administering, under master control, local processes lifecycle (run, kill, status,
clean) and redirects events between VPG master and Application components.
The Master communicates with each Remote Engine in two ways: by portsconnection to invoke control of process lifecycle, and by event notification to delivery
component to component event messages.
Grid nodes management and file transfer is implemented over the Globus Toolkit2
services: GRAM (for start-up of the Remote Engine), GridFTP for deploying DPG
processes, GSI protocols for authorization and secure file transfer.

5 Conclusions and Future Work
The paper proposes a hierarchical programming approach in which grid adaptivity is
distributed among various levels of the software environment, playing different roles.
The approach constitutes a novel enterprise model for the grid. It allows a Virtual
Organization to maintain application coordination while committing grid resources
administration and coordination to middleware components or external services
constrained by Quality of Service requirements.
Description of a resource coordinator middleware prototype has been presented. The
development of a Component Administrator, aimed to provide a HPC library service
is in progress [16].
Mapping of model hierarchical roles to OGSA model is a topic of current research.

Acknowledgements. Work supported by Italian MIUR Project FIRB-Grid.it, Workpackage 8: Programming Environments and Workpackage 9 Scientific Libraries.

A Conceptual Model for Grid-Adaptivity of HPC Applications

113

References
1.
2.
3.
4.
5.
6.

7.
8.
9.

10.
11.
12.
13.
14.
15.
16.

F.Berman, G.C. Fox, A.J.G.Hey: Grid Computing. Making the Global Infrastructure a
Reality. Wiley 2003
J. Darlington, Y. Guo, H. W. To, J. Yang, Parallel skeletons for structured composition, In
Proc. of the 5th ACM/SIGPLAN Symposium on Principles and Practice of Paral1el
Programming, Santa Barbara, California, July 1995, SIGPLAN Notices 30(8),19-28.G.
M. Vanneschi: The programming model of ASSIST, an environment for parallel and
distributed portable applications. Parallel Computing 28(12): 1709-1732 (2002)
Z. Chen, J.Dongarra, P. Luszczek, and K. Roche “Self Adapting Software for Num. Linear
Algebra and LAPACK for Clusters
www.cs.utk.edu/~luszczek/articles/lfc-parcomp.pdf
C. Ferrari, Concettina Guerra, G. Canotti “A grid-aware approach to protein structure
comparison” Journal of Parallel and Distributed Computing Vol 63 Issue 7-8 pp. 728-737.
P.D’Ambra, M.Danelutto, D. di Serafino, M.Lapegna:“Integrating MPI-based numerical
software into an advanced parallel computing environment“.Proc. of the 11th
EUROMICRO Conf. on Parallel, Distributed and Netwok-based Processing, IEEE Publ.,
2003, pp.283-291.
A. Machì, F. Collura “Skeleton di componenti paralleli riconfigurabili su griglia
computazionale map e farm “.TR ICAR-PA-12-03 - Dec 2003.
Szypeski, C., Component Software: Beyond Object-Oriented Programming, AddisonWesley, 1998.
M. Vanneschi “Grid.it : a National Italian Project on Enabling Platforms for Highperformance Computational Grids” GGF Intern. Grid Summer School on Grid Computing
Vico Equense Italy July 2003
www.dma.unina.it/~murli/SummerSchool/session-14.htm.
[M. Aldinucci, M. Coppola, M. Danelutto, M. Vanneschi, C. Zoccolo “Grid.it component
model “Project Grid.it WP8 Deliverable, Jan 2004.
J. Rumbaugh, I. Jacobson, G. Booch “The Unified Modeling Language Reference Manual”
Addison Wesley 1998.
E. Gamma, R. Helm, R. Joyhnson, J. Vlissides “Design Patterns . Elements of Reusable
Object-Oriented Software”. Addison-Wesley.
Douglas C. Schmidt, Michael Stal, Hans Rohnert and Frank Buschmann “Pattern-Oriented
Software Architecture: Patterns for Concurrent and Networked Objects” Wiley & Sons in
2000, ISBN 0-471-60695-2.
The Adaptive Communication Environment http://www.cs.wustl.edu/~schmidt/ACE.html
R. Armstrom, D. Gannon, K. Keahey, S.Kohn, L.McInnes, S. Parker, B. Smolinsk.
“Toward a common component architecture for high-performance scientific computing”.
In Conference on High Performance Distributed Computing, 1999
S. Lombardo, A. Machì “A model for a component based grid-aware scientific library
service.” TR ICAR-PA-01-04 Jan 2004.

