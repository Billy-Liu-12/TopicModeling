INTEGRATOR: A Computational Tool to Solve
Ordinary Diﬀerential Equations with Global
Error Control
Gennady Y. Kulikov and Sergey K. Shindin
School of Computational and Applied Mathematics, University of the Witwatersrand,
Private Bag 3, Wits 2050, Johannesburg, South Africa
{gkulikov,sshindin}@cam.wits.ac.za

Abstract. In recent papers [6]–[10] the technique for local and global
errors estimation and the local-global step size control have been presented to solve both ordinary diﬀerential equations and semi-explicit
index 1 diﬀerential-algebraic systems by multistep methods with any automatically obtained reasonable accuracy. Now we describe the object
oriented library INTEGRATOR (ver. 1.0) built in C++ for portability
and performance across a wide class of machine architectures. Also we
give some computational tests and a comparison with the software implemented the well-known Gear’s method which has been included into
MATLAB (ver. 6.2, release 12).

The problem of an automatic global error control for ODEs of the form
x (t) = g t, x(t) ,

t ∈ [t0 , t0 + T ],

x(t0 ) = x0 ,

(1)

where x(t) ∈ Rn and g : D ⊂ Rn+1 → Rn is a suﬃciently smooth function, is
one of the challenges of modern computational mathematics. ODE (1) is quite
usual in applied research and practical engineering (see, for example, [1]–[5])
Therefore any issue in that ﬁeld possesses a great potential to develop intelligent
software packages for mathematical modelling tasks. Thus, following the recent
advances in computer algorithms for global error monitoring and controlling
[7]–[10], we present the new user-oriented library INTEGRATOR for solving
problem (1) with any accuracy set by the user (up to round-oﬀ). In this paper we
give a brief outline of library types and routines as well as numerical experiments
and data analysis. We clearly show an advantage of the new software at least
over the implementation of Gear’s method [3] taken from MATLAB (ver. 6.2,
release 12) that is a good reason to use INTEGRATOR in practice.
Most of numerical algorithms imply vector and matrix computations in this
or that form. Therefore, when constructing any object-oriented software, it is important to separate the algorithm from the vector-matrix arithmetic implementation for a convenience to use or to modify the code. Following this philosophy,
we divided the library into two parts. The ﬁrst one contains basic C++ classes
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3037, pp. 570–573, 2004.
c Springer-Verlag Berlin Heidelberg 2004

INTEGRATOR: A Computational Tool

571

and routines providing facilities to code complex vectors-matrices algorithms
closer to its natural mathematical notation. The second part includes routines
implemented both multistep methods (with ﬁxed or variable coeﬃcients) and
Nordsieck ones with the local-global step size control in order to solve ODEs of
the form (1) with the accuracy set by the user.
Here, we do not describe the details concerning the vector and matrix classes
because they are not essential for using INTEGRATOR in practice. We start
with the common description of function-solvers implemented in the second part
of our library. Each of these functions are deﬁned in the standard way:
statistics <solver>(odestruct& _ODE, solveropt& _OPT);
The data structures odestruct, solveropt and statistics are declared in
the header ﬁle numerics.h and contain input and output parameters of the
function-solvers.
The input data structure odestruct has been designed to keep the input
information about ODE (1) and it contains a pointer to the functions for evaluating g(t, x) and its Jacobian ∂x g(t, x), a vector-column of the initial values
x0 for problem (1), and also the initial and ﬁnal time points of the integration
interval [t0 , t0 + T ].
The input data structure solveropt includes four groups of parameters
needed for the function-solvers. The ﬁrst one is aimed to set the order of multistep method, the type of iteration, and the number of iteration steps per grid
point. At present INTEGRATOR supports the following three iterative methods:
solveropt::mt_NEWTON is a full Newton iteration, solveropt::mt_mNEWTON is a
modiﬁed Newton iteration, solveropt::mt_sITER is a simple (or ﬁxed-point) iteration. The lower bounds of enough iteration steps for each type of the iterative
methods can be found in [7].
The second group of parameters is necessary to set particulars of the localglobal step size control (the detailed description of that algorithm for multistep
methods with both ﬁxed coeﬃcients and variable ones applied to ordinary differential equations or to diﬀerential-algebraic systems can be found in [6]–[10]).
In particular, these parameters include the global error tolerance g , the safety
factor, the initial step size τ1 for an starting procedure, and the initial restriction
for the maximum step size τ .
The third group of parameters as well as the fourth one manages an output
of statistical and integration data to the consol and the user deﬁned C++ streams,
respectively.
All function-solvers return the data structure statistics. The data ﬁelds of
this structure preserve the statistical data accumulated during the integration
process of problem (1).
The header ﬁles bdf.h and adams.h declare all the function-solvers of
the library. The ﬁrst one contains algorithms based on Backward Diﬀerentiation Formulas (BDF methods): the function-solver VBDF_SCL implements ﬁxedcoeﬃcients BDF methods with polynomial interpolation of the numerical solution; the function-solver VBDF_SCH implements variable-coeﬃcients BDF methods; the function-solver NBDF_SCH implements the Nordsieck representation for

572

G.Y. Kulikov and S.K. Shindin

BDF methods. The library INTEGRATOR supports the BDF methods of orders
2–6.
Table 1. Global errors obtained when treating problem (0.1) by the ﬁxed-coeﬃcients
implicit Adams methods (with extrapolation) according to order s
order
s
2
3
4
5
6
7

g

= 10−02

2.11 · 10−05
3.15 · 10−04
5.41 · 10−05
1.26 · 10−04
4.11 · 10−03
1.76 · 10−04

g

= 10−03

2.42 · 10−07
1.08 · 10−05
2.70 · 10−06
1.94 · 10−05
1.75 · 10−05
7.60 · 10−06

required accuracy
−04
g = 10
—
5.03 · 10−07
1.69 · 10−07
2.68 · 10−06
8.49 · 10−07
8.82 · 10−08

g

= 10−05

—
2.01 · 10−08
8.70 · 10−09
2.46 · 10−07
5.60 · 10−08
2.80 · 10−08

g

= 10−06

—
1.14 · 10−09
3.18 · 10−10
2.68 · 10−08
3.37 · 10−09
4.00 · 10−09

Table 2. Global errors obtained when treating problem (1.20) by the variablecoeﬃcients BDF methods (with extrapolation) according to order s
order
s
2
3
4
5
6

g

= 10−02

2.54 · 10−06
1.11 · 10−05
5.40 · 10−05
6.03 · 10−04
2.64 · 10−04

g

= 10−03

3.08 · 10−08
6.57 · 10−07
2.96 · 10−06
4.24 · 10−05
7.12 · 10−05

required accuracy
−04
g = 10
7.53 · 10−09
2.38 · 10−08
1.72 · 10−07
2.99 · 10−06
3.37 · 10−06

g

= 10−05

8.19 · 10−11
1.83 · 10−09
1.35 · 10−08
1.44 · 10−07
2.85 · 10−07

g

= 10−06

3.15 · 10−08
4.16 · 10−10
5.87 · 10−10
8.30 · 10−09
2.03 · 10−08

The second header ﬁle includes algorithms based on implicit Adams methods: the function-solver VADM_SCL implements ﬁxed-coeﬃcients implicit Adams
methods with polynomial interpolation of the numerical solution; the functionsolver VADM_SCH implements variable-coeﬃcients implicit Adams methods; the
function-solver NADM_SCH implements the Nordsieck representation for implicit
Adams methods. Orders of all the Adams methods have to be from 2 up to 7.
Finally, we give a couple of numerical examples showing the eﬃciency of
INTEGRATOR. As test problems, we take ODEs (0.1) and (1.20) from [4]. The
ﬁrst one is the restricted three body problem and possesses the periodic solutionpath. The second ODE has the exact solution. Thus, we are capable to observe
the work of our software in practice.
Now we apply the function-solvers of INTEGRATOR described above to
these test problems. We use both Adams methods and BDF ones with ﬁxed and
variable coeﬃcients to compute the numerical solutions. We also determine the
real errors appeared in the integrations and compare them with the required
accuracy. The lines in Table 1 mean that the second order function-solvers are
not able to ﬁnd the numerical solution with the set accuracy when g ≤ 10−04
because the required step size in this situation is smaller than the minimum
admissible step size value τmin .

INTEGRATOR: A Computational Tool

573

Table 3. Global errors obtained when treating the test problems by the Gear’s method
from MATLAB (ver. 6.2, release 12)
test
problem
(0.1)
(1.20)

l

= 10−02

l

= 10−03

l

required accuracy
−05
= 10−04
l = 10

l

= 10−06

l

= 10−07

2.09 · 10+00 2.07 · 10+00 1.94 · 10+00 1.45 · 10+00 6.00 · 10−02 1.00 · 10−03
1.40 · 10+02 1.09 · 10+02 9.50 · 10+01 2.15 · 10+00 2.92 · 10−01 6.23 · 10−02

Tables 1, 2 display that all the function-solvers have achieved the goal; i.e.,
they have computed the numerical solutions of problems (0.1) and (1.20) with
the set accuracy g . To emphasis the advantage of INTEGRATOR over the standard software packages, we applied the Gear’s method from MATLAB (ver. 6.2,
release 12) to both test problems (see Table 3). A comparison of these data with
Tables 1, 2 gives a right to conclude that the new software, in fact, controls
automatically the global error of numerical solution. This is a good result for
future testing of the library INTEGRATOR and for implementing it in practice.

References
1. Arushanyan, O.B., Zaletkin, S.F.: Numerical solution of ordinary diﬀerential equations using FORTRAN. (in Russian) Mosk. Gos. Univ., Moscow, 1990
2. Butcher, J.C.: Numerical methods for ordinary diﬀerential equations. John Wiley
& Son, Chichester, 2003
3. Gear, C.W.: Numerical initial value problems in ordinary diﬀerential equations.
Prentice-Hall, 1971
4. Hairer, E., Nørsett, S.P., Wanner, G.: Solving ordinary diﬀerential equations I:
Nonstiﬀ problems. Springer-Verlag, Berlin, 1987
5. Hairer, E., Wanner, G.: Solving ordinary diﬀerential equations II: Stiﬀ and
diﬀerential-algebraic problems. Springer-Verlag, Berlin, 1996
6. Kulikov, G.Yu., Shindin, S.K.: A local-global stepsize control for multistep methods
applied to semi-explicit index 1 diﬀerential-algebraic equations. Korean J. Comput.
Appl. Math. 6 (1999) No. 3, 463–492
7. Kulikov, G.Yu., Shindin, S.K.: A technique for controlling the global error in multistep methods. (in Russian) Zh. Vychisl. Mat. Mat. Fiz. 40 (2000) No. 9, 1308–1329;
translation in Comput. Math. Math. Phys. 40 (2000) No. 9, 1255–1275
8. Kulikov, G.Yu., Shindin, S.K.: On multistep extrapolation methods for ordinary
diﬀerential equations. (in Russian) Dokl. Akad. Nauk, 372 (2000) No. 3, 301–304;
translation in Doklady Mathematics, 61 (2000) No. 3, 357–360
9. Kulikov, G.Yu., Shindin, S.K.: On eﬀective computation of asymptotically correct
estimates of the local and global errors for multistep methods with ﬁxed coeﬃcients. (in Russian) Zh. Vychisl. Mat. Mat. Fiz. (to appear); translation in Comput.
Math. Math. Phys. (to appear)
10. Kulikov, G.Yu., Shindin, S.K.: On interpolation type multistep methods with automatic global error control. (in Russian) Zh. Vychisl. Mat. Mat. Fiz. (to appear);
translation in Comput. Math. Math. Phys. (to appear)

