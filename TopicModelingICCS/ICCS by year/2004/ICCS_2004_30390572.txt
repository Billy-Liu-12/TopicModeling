Numerical Bifurcation Analysis of Lattice
Boltzmann Models: A Reaction-Diﬀusion
Example
Pieter Van Leemput and Kurt Lust
Department of Computer Science, K.U.Leuven,
Celestijnenlaan 200A, B-3001 Heverlee, Belgium.
{pieter.vanleemput,kurt.lust}@cs.kuleuven.ac.be

Abstract. We study two strategies to perform a time stepper based
numerical bifurcation analysis of systems modeled by lattice Boltzmann
methods, one using the lattice Boltzmann model as the time stepper and
the other the coarse-grained time stepper proposed in Kevrekidis et al.,
CMS 1(4). We show that techniques developed for time stepper based
numerical bifurcation analysis of partial diﬀerential equations (PDEs)
can be used for lattice Boltzmann models as well. The results for both
approaches are also compared with an equivalent PDE description.
Keywords: numerical bifurcation analysis, lattice Boltzmann method,
Newton-Picard method, reaction-diﬀusion systems.

1

Introduction

Time simulation is a popular method to study the inﬂuence of varying the parameters in a parameter-dependent dynamical system, but comparing simulation
results for many diﬀerent parameter values is tedious. Also, only stable solutions
can be explored in this way. Bifurcation theory oﬀers a more systematic way to
study the asymptotic behavior of a parameter-dependent system.
In a numerical bifurcation analysis, one computes branches of solutions of
some type by varying one or more parameters. Along the branch, the stability
information is monitored and the critical (or bifurcation) points where stability
changes occur are detected and often computed. Several techniques and codes
have been developed for partial diﬀerential equations (PDEs), some of which
work on top of an existing time simulation code. In this paper, we show that
these techniques can be used for bifurcation analysis of lattice Boltzmann (LB)
models also. Examples of such time stepper or map based techniques are the
Recursive Projection Method [1] and the Newton-Picard method [2]. These methods exploit a spectral property of the time integration operator that is typical
of systems with a dissipative operator: the time integration operator has only
few eigenvalues close to or outside the unit circle. In other words, the system’s
long-term behavior is governed by only a small number of slow modes. This is an
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 572–579, 2004.
c Springer-Verlag Berlin Heidelberg 2004

Numerical Bifurcation Analysis of Lattice Boltzmann Models

573

inherent property of the physics of the system. It is also the starting assumption
for techniques such as inertial manifolds and reduced-order modeling.
We will discuss two strategies for the bifurcation analysis of LB models. One
approach uses the LB time stepper as the time stepper in the bifurcation code.
The state can be expressed either as distribution functions or as a full set of
velocity moments. We will also make a slight extension of the time stepper to
compute periodic solutions. The second approach uses the coarse-grained time
stepper proposed by Kevrekidis et al. [3,4] which performs a time integration for
the macroscopic variables (a subset of the velocity moments in a LB model) using
only microscopic or mesoscopic simulations. Their coarse-grained time stepper
is developed for cases where a macroscopic model is conceptually possible, but
not yet known in a closed analytical form. Whereas our numerical bifurcation
analysis techniques rely on a separation of time scales at the macroscopic level,
the coarse-grained time stepper relies on a time scale separation between the
macroscopically relevant variables, i.e., the lower-order moments of the distribution functions in a LB model, and the other variables that are only relevant at
the microscopic or mesoscopic scales.
We will use a FitzHugh-Nagumo (FHN) reaction-diﬀusion system on a onedimensional domain as our test case. This system is usually speciﬁed as a PDE
system, but it is possible to develop an equivalent LB-BGK model. We compare
the results for both approaches based on the LB model with each other and with
the results for the equivalent PDE model. Section 2 focusses on the numerical
bifurcation analysis. In Sect. 3, we present the three models. Numerical results
for the FHN system are shown in Sect. 4. Section 5 repeats the main conclusions.

2

Numerical Bifurcation Analysis

For numerical bifurcation analysis of autonomous parameter-dependent PDEs,
the PDEs are ﬁrst space-discretized to a large set of ordinary diﬀerential equations (ODEs)
yt = f (y, γ) , f : IRN × IR → IRN
(1)
with y the state vector and γ the bifurcation parameter. Let ϕT (y(0), γ) denote
the result y(T ) of a time integration of (1) at time T with initial condition y(0)
and parameter γ. A steady state (y ∗ , γ ∗ ) of (1) is also a ﬁxed point of the map
y → ϕT (y, γ)

(2)

for any value of T . A periodic solution of (1) is a ﬁxed point of (2) only when T
is a multiple of the (unknown) period.
A steady state of (1) is asymptotically stable if all eigenvalues λj of the
Jacobian matrix (∂f /∂y)(y ∗ , γ ∗ ) have a negative real part. Hence the rightmost
eigenvalues determine the asymptotic stability. The equivalent ﬁxed point of (2)
is stable if all eigenvalues µj of the matrix M := (∂ϕT /∂y)(y ∗ , γ ∗ ) are smaller
than one in modulus. Both sets of eigenvalues are related by
µj = exp(λj T )

(3)

574

P. Van Leemput and K. Lust

and thus |µj | < 1 ⇔ Re(λj ) < 0. Hence they provide exactly the same stability
information.
In time stepper based bifurcation analysis, a continuous-time dynamical system is analyzed through the (almost) equivalent map (2). In fact, the time
integrator can be any time integrator, including a LB simulation or the coarsegrained time integrator. A branch of ﬁxed points is computed with a continuation
method. Given a few points on the branch, a prediction is made for the next
point and that point is then computed by solving the nonlinear system
ϕT (y, γ) − y = 0 ,
n(y, γ, η) = 0

(4)

for y and γ. The scalar parameterizing equation n(y, γ, η) = 0 determines the
position of the point along the branch through a reparameterization with parameter η. In our experiments, we used pseudo-arclength parameterization [5].
When computing a branch of periodic solutions, the period T becomes
a variable as well. The system (4) is augmented with a phase condition
s(y, T, γ) = 0, which ensures isolated solutions of the system. M is then called the monodromy matrix and its stability-determining eigenvalues the Floquet
multipliers.
A popular way of solving (4) is Newton’s method with Gaussian elimination.
However, M and thus also the Jacobian matrix of (4) are in general dense matrices (even though (∂f /∂y)(y, γ) is usually a sparse matrix). It is not feasible to
compute and store M . However, since computing a matrix-vector product with
M is equivalent to computing a directional derivative of the time integrator,
these matrix-vector products can be computed using numerical diﬀerentiation.
The fact that M often has only a few eigenvalues close to or outside the
unit circle is exploited by several numerical methods. One of the earliest is the
Recursive Projection Method [1]. Although this method has only been derived
for the computation of steady state solutions, it can be extended to compute
periodic solutions also. However, robustness problems are fairly common with
the original implementation of [1]. We will use the more robust Newton-Picard
method [2] instead. This method was originally developed for the computation
of periodic solutions but is equally well suited for the computation of steady
states. First, an approximation to the low-dimensional generalized eigenspace U
of all dominant eigenvalues of M is computed by orthogonal subspace iterations,
requiring only matrix-vector products with M . Then, the linearized system is
projected onto U and its high-dimensional orthogonal complement U ⊥ . The large
subsystem in U ⊥ is solved approximately using a ﬁxed point (or Picard ) iteration, which corresponds essentially to time integration in the high-dimensional
subspace U ⊥ . The small subsystem in U is solved using Gaussian elimination.
The total number of time integrations needed to converge to a given accuracy is
mostly determined by the dominant eigenvalues and thus by the physics of the
problem and not by the particular mathematical model or discretization. Hence
we expect that a similar number of time integrations will be needed for the PDE
model, the LB model and the coarse-grained description, though some diﬀeren-

Numerical Bifurcation Analysis of Lattice Boltzmann Models

575

ces are possible, e.g., because of a diﬀerent number of variables or convergence
problems of Newton’s method when the nonlinearity becomes too strong.

3

System Descriptions

3.1

Macroscopic Description: A PDE System

The one-dimensional macroscopic FHN PDE model is given by
ac
ac
− (ρac )3 − ρin ,
ρac
t = ρxx + ρ
in
ac
ρin
− a1 ρin − a0 ) ,
t = δρxx + ε(ρ

(5)

with homogeneous Neumann boundary conditions on the domain [0, 20]. The
variables ρac (x, t) and ρin (x, t) are the activator and inhibitor concentration
respectively. We set δ = 4, a0 = −0.03 and a1 = 2 and vary ε ∈ [0, 1]. We used a
method of lines discretization with central diﬀerences in space at the midpoints
of 200 lattice intervals and the trapezoidal rule for time integration.
3.2

Mesoscopic Description: Lattice Boltzmann Model

The variables in a LB model are the distribution functions fis (x, t) associated
with a species s ∈ {ac, in} and a discrete “particle” velocity vi . They are deﬁned
on a space-time lattice with spacing ∆x in space and ∆t in time. We use only
three discrete values for the velocity: vi = i ∆x/∆t with i ∈ I := {−1, 0, 1}
(D1Q3 scheme). The concentration – the only relevant macroscopic variable – is
the zeroth order velocity moment of the distribution functions, i.e.,
1

ρs (x, t) =

fis (x, t) .

(6)

i=−1

The discrete time evolution of the distribution functions is described by the
standard LB time stepper equation
fis (x + vi ∆t, t + ∆t) − fis (x, t) = −ω s [fis (x, t) − fis,eq (x, t)] + Ris , i ∈ I . (7)
We used halfway bounce-back boundary conditions [6] and the approach in [7]
for the BGK collision term −ω s [fis (x, t) − fis,eq (x, t)] and reaction term Ris .
Note that the equilibrium distribution fis,eq (x, t) = 31 ρs (x, t), i ∈ I which will be
important in the remaining of the paper.
Note that the single local time scale in the LB model should not be confused
with the global time scales which are important in our numerical algorithms. The
large range of global time scales results from the coupling of all lattice points.
The slowest components in the global behavior of the system can be much slower
than the local relaxation time.
When computing periodic solutions, the integration time T is continuous
and not always an exact multiple of the LB time step ∆t. We then determine a
positive integer k such that (k − 1)∆t < T ≤ k∆t and compute the state at time
T by a linear interpolation of the states at the discrete time steps k − 1 and k.

576

3.3

P. Van Leemput and K. Lust

Coarse-Grained Description

The coarse-grained LB (CGLB) time integration procedure proposed in [3,4]
is a time stepper for the macroscopic variables. A macroscopic time step ∆T
consists of three basic steps. The ﬁrst step is the reconstruction or lifting. Here,
meaningful mesoscopic initial values fis (x, 0) are derived, which are consistent
with the governing macroscopic variable ρs (x, 0), i.e.,
1

fis (x, 0) = wi ρs (x, 0) , i ∈ I

wi = 1 .

with

(8)

i=−1

We choose the weights wi all equal to 1/3, i.e., equal to the weights for the
diﬀusive equilibrium. Next, the mesoscopic variables fis (x, t) are evolved through
the LB time stepper for a time interval ∆T . If ∆T is not an integer multiple of
the LB time step ∆t, we interpolate as in Sect. 3.2. In the ﬁnal restriction or
coarse-graining step, the macroscopic variable ρs (x, ∆T ) is computed using (6).
This procedure is repeated until time T . In our experiments, we use ∆T = 5.
Since ∆T is fairly large, we cannot interpolate between two time steps to obtain
the result at an arbitrary time T . Instead we change ∆T slightly from the target
value ∆T = 5, such that it ﬁts an integer number of times in T . As long as ∆T is
not changed too much, this has no signiﬁcant inﬂuence on the result. The choice
of the reconstruction weights wi and macroscopic time step ∆T is a topic of our
current research and will be discussed in a future publication.

4
4.1

Numerical Results and Discussion
Bifurcation Diagrams

Figure 1 shows the bifurcation diagram for steady state (upper diagram) and
periodic solutions (lower diagram), computed using the Newton-Picard method.
We used T = 5 for the steady state solutions, a good value for the Newton-Picard
method in this case. For the LB model, we used ∆t = 0.001, which produced
the best results. The steady state branch contains two bifurcation points: a fold
point at ε ≈ 0.945 and a supercritical Hopf point at ε ≈ 0.0183 where the branch
of periodic solutions in the lower diagram meets. The periodic solution branch
has a fold point at ε ≈ 0.00087. Though the unstable part of the branch has
almost the same (ε, T )-projection as the stable one, the corresponding orbits are
diﬀerent. Computing these unstable solutions proved diﬃcult, which is a wellknown problem of single shooting based numerical methods. The bifurcation
diagrams for the two LB approaches correspond very well with diﬀerences on the
order of the discretization error. Moreover, we do obtain the same bifurcation
information as from the equivalent PDE.
4.2

Eigenvalue Spectra

The Newton-Picard code computes the stability-determining eigenvalues through
orthogonal subspace iterations. Table 1 lists the dominant eigenvalues λj for an

Numerical Bifurcation Analysis of Lattice Boltzmann Models

577

zoom near Hopf
0

−1.04

LB
CGLB
PDE
unstable

−2

−1.042
−1.044
−1.046
−1.048

−6

0.0182 0.0183 0.0184
zoom near fold

ac

∫L0 ρ (x) dx

−4

−8

−10.95
−11

−10

−11.05
−12
−14

−11.1
0

0.2

0.4

ε

0.6

0.8

1

−11.15

0.943

0.944

0.945

zoom near Hopf
500
LB
CGLB
PDE

450
400

133.5
133
132.5

T

350

132
0.016

300

0.017
0.018
zoom near fold

467

250

unstable

466
200

465
464

150
100

463
0

0.005

0.01
ε

0.015

0.02

8.65

8.7

8.75
−4

x 10

Fig. 1. Bifurcation diagram for the steady state (upper diagram) and periodic solutions. Unstable solutions are indicated by dotted lines and bifurcation points by boxed
markers. The markers represent only a subset of the computed points
Table 1. Dominant eigenvalues for the unstable steady state on the upper part of the
branch and stable periodic solution at ε = 0.01 (using ∆T ≈ 5 in the CGLB integrator)

LB
CGLB
PDE

steady state
λ1,2
λ3
0.002010 ± 0.039461i −0.124867
0.002012 ± 0.039463i −0.124863
0.001999 ± 0.039446i −0.124861

λ4
−0.411364
−0.411348
−0.411288

periodic
trivial µ1
1.000000
1.000000
1.000000

solution
µ2
0.514888
0.514452
0.516712

578

P. Van Leemput and K. Lust

unstable steady state at ε = 0.01 and Floquet multipliers µj for the stable periodic solution at the same parameter value. Again, the eigenvalues for both
LB based approaches correspond very well with one another and give the same
information as the equivalent PDE model. Note that periodic solutions of an
autonomous system always have a trivial multiplier at one. The great accuracy
of the computed value indicates that the time integration and eigenvalue computation is very accurate.
4.3

Time Stepper Calls

Table 2 lists the number of time integrations needed to continue a part of the
branches of stable steady state and stable periodic solutions, not including the
integrations for the accurate computation of the stability information at the end.
For the steady states, we again used T = 5. Note that the LB model uses a diﬀerent set of variables from the other two approaches and hence another measure
for the distance. We changed the maximal step size in our variable step size
continuation code for each approach such that the number of points computed
along the branch is approximately the same. As expected, the average number of
time integrations needed for each point is almost the same. The computing time
however is much lower for the PDE based model since the implicit time stepper
uses much larger steps than the LB model. The computing time for both LB
based approaches is dominated by the LB simulations and virtually the same for
both approaches.
Table 2. Total number of time integrations, the number of points computed and the
average number of time integrations for the continuation of a part of the branches of
stable steady state and periodic solutions
number of time
steady state, ε ∈ [0.05, 0.55]
integrations
total
nb. pts
avg.
LB
1352
20
67.600
CGLB (∆T ≈ 5)
1419
21
67.571
PDE
1420
21
67.619

5

periodic, ε ∈ [0.006, 0.016]
total
nb. pts
avg.
1611
25
64.440
1623
25
64.920
1621
25
64.840

Conclusions

In this paper, we have shown that algorithms developed for time stepper based
numerical bifurcation analysis of PDEs can be used for lattice Boltzmann models
as well in two diﬀerent ways. It is possible to use either the LB model itself or
the coarse-grained time integrator as the time stepper in a time stepper based
bifurcation code. For our test case, the accuracy and computing time for both
LB based approaches are comparable which was shown to be not unexpected. We

Numerical Bifurcation Analysis of Lattice Boltzmann Models

579

have also compared the results to those for an equivalent PDE model, demonstrating that the same bifurcation information can be obtained from a lattice
Boltzmann model as from a PDE model. However, time integration of the PDE
was much faster, resulting in much lower computing times for the bifurcation
diagram of the PDE model.
The two approaches for bifurcation analysis of LB models have distinct advantages and disadvantages. Several parameters in the coarse-grained integrator
need to be chosen carefully. This is currently a subject of our research and will
be discussed in a future publication. On the other hand, the dimension of the
state vector is much lower (only one third of the number of components in our
case), resulting in a proportionally lower memory consumption of the NewtonPicard method for the coarse-grained time integrator. In some cases, this can be
an issue and thus possibly an advantage of the coarse-grained approach.
Acknowledgements. Kurt Lust is a postdoctoral fellow of the Fund for Scientiﬁc Research - Flanders which also provided further funding through project
G.0130.03. This paper presents research results of the Interuniversity Attraction
Poles Programme – Belgian Science Policy. The scientiﬁc responsibility rests
with its authors. We also acknowledge many helpful discussions with Prof. I.G.
Kevrekidis.

References
1. Shroﬀ, G.M., Keller, H.B.: Stabilization of unstable procedures: The Recursive
Projection Method. SIAM Journal on Numerical Analysis 30 (1993) 1099–1120
2. Lust, K., Roose, D., Spence, A., Champneys, A.: An adaptive Newton-Picard algorithm with subspace iteration for computing periodic solutions. SIAM Journal on
Scientiﬁc Computing 19 (1998) 1188–1209
3. Kevrekidis, I.G., Gear, C.W., Hyman, J.M., Kevrekidis, P.G., Runborg, O., Theodoropoulos, C.: Equation-free, coarse-grained multiscale computation: Enabling
microscopic simulators to perform system-level analysis. Communications in Mathematical Sciences 1 (2003) 715–762
4. Theodoropoulos, C., Qian, Y.H., Kevrekidis, I.G.: “Coarse” stability and bifurcation analysis using time-steppers: a reaction-diﬀusion example. Proceedings of the
National Academy of Sciences 97 (2000) 9840–9843
5. Keller, H.B.: Numerical solution of bifurcation and nonlinear eigenvalue problems.
In Rabinowitz, P.H., ed.: Applications of Bifurcation Theory, New York, Academic
Press (1977)
6. Ginzbourg, I., Adler, P.M.: Boundary ﬂow condition analysis for the three-dimensional lattice Boltzmann model. Journal of Physics II France 4 (1994) 191–214
7. Qian, Y.H., Orszag, S.A.: Scalings in diﬀusion-driven reaction A + B → C :
Numerical simulations by Lattice BGK Models. Journal of Statistical Physics 81
(1995) 237–253

