Characterization of Eﬃciently Parallel Solvable
Problems on a Class of Decomposable Graphs
Sun-Yuan Hsieh
Department of Computer Science and Information Engineering
National Cheng Kung University
No 1. University Road, Tainan 701, Taiwan
hsiehsy@mail.ncku.edu.tw

Abstract. In this paper, we sketch characteristics of those problems
which can be systematically solved on decomposable graphs. Trees,
series-parallel graphs, outerplanar graphs, and bandwidth-k graphs all
belong to decomposable graphs. Let Td (|V |, |E|) and Pd (|V |, |E|) denote the time complexity and processor complexity required to construct a parse tree representation TG for a decomposable G = (V, E)
on a PRAM model Md . We deﬁne a general problem-solving paradigm
to solve a wide class of subgraph optimization problems on decomposable graphs in O(Td (|V |, |E|) + log |V (TG )|) time using O(Pd (|V |, |E|) +
|V (TG )|/ log |V (TG )|) processors on Md . By using our paradigm, we show
the following parallel complexities: (a) The maximum independent set
problem on trees can be solved in O(log |V |) time using O(|V |/ log |V |)
processors on an EREW PRAM. (b) The maximum matching problem on series-parallel graphs can be solved in O(log |E|) time using
O(|E|/ log |E|) processors on an EREW PRAM. (c) The eﬃcient domination problem on series-parallel graphs can be solved in O(log |E|) time
using O(|E|/ log |E|) processors on an EREW PRAM.

1

Introduction

A class of graphs is recursive if every graph of the class can be constructed by
a ﬁnite number of applications of composition operations starting with a ﬁnite
set of basis graphs. The recursive class Γ of graphs is said to be decomposable if
each graph in Γ has a set of some speciﬁed vertices called terminals, and each
composition operation is deﬁned in terms of certain primitive operations on terminals. Trees, series-parallel graphs, outerplanar graphs, protoHalin graphs, and
bandwidth-k graphs are all decomposable graphs [3]. Also, every decomposable
graph has a ﬁxed upper bound on the treewidth of the graphs in the class, and
graphs with treewidth at most k for ﬁxed k are partial k-trees [8].
Properties of decomposable graphs are studied by many researchers [2,3,7,8,
9,11,12] which resulted in sequential algorithms to solve quite a few interesting
graph-theoretical problems on this special class of graphs. However, there are
few results in the viewpoint of parallel computation. Given a graph problem, we
say it belongs to the class of subgraph optimization problem if the object of this
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 223–230, 2004.
c Springer-Verlag Berlin Heidelberg 2004

224

S.-Y. Hsieh

problem is to ﬁnd a subgraph of the input graph to satisfy the given properties
which includes an optimization constraint. For example, the problem of ﬁnding
a maximum independent set is a subgraph optimization problem.
In this paper, we propose a diﬀerent parallel strategy on the deterministic parallel random access machine (PRAM) [6]. Given a decomposable graph
represented by its parse tree form, we deﬁne a class of subgraph optimization
problems, called the (k, Θ)-regular problem, and show such a class of problems can be eﬃciently parallelized by applying the binary tree contraction
technique to the given parse tree. Let Td (|V |, |E|) and Pd (|V |, |E|) denote the
time complexity and processor complexity required to construct a parse tree
TG of a decomposable graph G = (V, E) on a PRAM model Md . We show
that a (k, Θ)-regular problem can be solved in O(Td (|V |, |E|) + log |V (TG )|)
time using O(Pd (|V |, |E|) + |V (TG )|/ log |V (TG )|) processors on Md . Moreover, each (k, Θ)-regular problem can be solved in O(log |V (TG )|) time using O(|V (TG )|/ log |V (TG )|) processors on an EREW PRAM if TG is given
to be an input instance. Based on the technique, we obtain the following results: (a) The maximum independent set problem on trees can be solved in
O(log |V |) time using O(|V |/ log |V |) processors on an EREW PRAM, (b) The
maximum matching problem can be solved in O(log |E| log∗ |E|) time using
O(|E|/ log |E| log∗ |E|) processors on an EREW PRAM, and (c) The eﬃcient
domination problem on series-parallel graphs can be solved in O(log |E| log∗ |E|)
time using O(|E|/ log |E| log∗ |E|) processors on an EREW PRAM. Given a parse
tree of a series-parallel graph, the problems in (b) and (c) can be optimally solved
in O(log |E|) time using O(|E|/ log |E|) processors on an EREW PRAM. To our
knowledge, no NC algorithm exists for solving the problem in (c) in the literature.

2

Preliminaries

This paper considers ﬁnite, simple1 and undirected graphs G = (V, E), where
V and E are the vertex and edge sets of G, respectively. Let n = |V | and
m = |E|. For two graphs G1 = (V1 , E1 ) and G2 = (V2 , E2 ), the union of G1 and
G2 , denoted by G1 ∪ G2 , is the graph (V1 ∪ V2 , E1 ∪ E2 ). We say that a graph
G = (V , E ) is a subgraph of G = (V, E) if V ⊆ V and E ⊆ E. Given a set
V ⊆ V , the subgraph of G induced by V is the graph G = (V , E ), where
E = {(u, v) ∈ E| u, v ∈ V }. Let G[X] denote the subgraph of G induced by
X ⊆ V . For a vertex v ∈ V of a graph G = (V, E), the neighborhood of v is
NG (v) = {u ∈ V | (u, v) ∈ E} and the closed neighborhood of v is NG [v] =
NG (v) ∪ {v}. The subscript G in the notations used in this paper can be omitted
when no ambiguity arises. Given a node v in a rooted tree T , let T (v) be a
subtree of T rooted at v. For graph-theoretic terminologies and notations not
mentioned here, see [5].
We follow the notations used in [8] to deﬁne the class of decomposable graphs.
1

We only consider simple graphs in this paper although some of the results also apply
to multigraphs.

Characterization of Eﬃciently Parallel Solvable Problems

225

Deﬁnition 1. Let G = (V, E, S) be a graph with vertex V , edge set E, and an
ordered list S of t terminals chosen from V for some ﬁxed integer t. We note
that the elements of S are not necessary distinct.
(1) Let B = {B1 , B2 , . . . , Bl } be a ﬁnite set of basis graphs, where each Bi is a
ﬁnite graph having an ordered list of t (not necessary distinct) terminals.
(2) Let O = {∗1 , ∗2 , . . . , ∗q } be a ﬁnite set of binary rules of composition,
whereby two graphs Gi = (Vi , Ei , Si ) and Gj = (Vj , Ej , Sj ) can be combined
to produce new graphs Gi ∗c Gj , 1 ≤ c ≤ q. Each rule of composition ∗c
consists of three suboperations on the terminals Si and Sj :
(i) Choose a subset Si of distinct terminals from the list Si and identify
each x ∈ Si with a unique y ∈ Sj . Let Sj denote the subset of aﬀected
terminals from the list Sj .
(ii) Add any subset of the edges {(x, y)|x ∈ Si , y ∈ Sj } to Gi ∗c Gj , where
Si is the subset of terminals in the list Si but not in Si , and Sj is
deﬁned similarly.
(iii) Select an ordered list of t (not necessarily distinct) terminals from the
list Si and Sj to the terminals of Gi ∗c Gj .
(3) The class Γ of decomposable graphs is recursively deﬁned as follows:
(i) Any Bi ∈ B is in Γ .
(ii) If Gi and Gj are in Γ and ∗c is an operation in O, then the graph
Gi ∗c Gj is also in Γ .
Deﬁnition 2. Let Γ be the class of decomposable graphs. The parse tree TG of
a graph G ∈ Γ is a tree in which the leaves correspond to the basis graphs from
which G is constructed, and each internal node represents the result of applying
a composition operation to the graphs represented by the subtrees rooted at its
children. Let Gv be the subgraph of G corresponding to a node v of a parse tree.
Note that TG (v) is a parse tree of Gv .

3
3.1

A General Problem-Solving Paradigm
The (k, Θ)-Parse Tree

Given a graph G, let UV (G) (respectively, UE(G) ) be the set consisting of all
subsets of V (G) (respectively, E(G)). Given Q = {Q1 , Q2 , . . . , Ql }, where Qi ∈
UV (G) (respectively, Qi ∈ UE(G) ), we deﬁne Minv (respectively, Mine ) to be an
operator on Q that returns a minimum-cardinality set Qj for some 1 ≤ j ≤ l.
The operators Maxv (respectively, Maxe ) can be deﬁned similarly. For two lists
L1 = l1 , l2 , . . . , li and L1 = l1 , l2 , . . . , lj , we deﬁne the concatenation of L1
and L1 , denoted by L1 • L1 , to be the list l1 , l2 , . . . , li , l1 , l2 , . . . , lj .
Deﬁnition 3. Let G = (V, E) be a decomposable graph and let TG be a parse
tree of G. Given a positive integer k, and an operator Θ ∈ {Minv , Mine , Maxv ,
Maxe }, TG is a (k, Θ)-parse tree of G if the following conditions hold. Let v be
a node of TG and let Ni be the set of integers from 1 to i.
(1) If v is an internal node, then it is associated with k integers av,1 , av,2 , . . . , av,k

226

S.-Y. Hsieh

from Nk , and the following 2k functions fi : {v} × Nav,i → Nk and
gi : {v} × Nav,i → Nk , 1 ≤ i ≤ k.
(2) Node v is also associated with a list of k subgraphs2 Rv =
Rv,1 , Rv,2 , . . . , Rv,k , called the target subgraphs of v, which are deﬁned as follows.
Case 1: v is a leaf. Rv is a list of k subgraphs selected from UV (Gv ) (respectively,
UE(Gv ) ) if Θ ∈ {Minv , Maxv } (respectively, Θ ∈ {Mine , Maxe }).
Case 2: v is an internal node. Let u and w be two children of v. Then,
Rv,i = Θ{Ru,fi (u,1) ∪ Rw,gi (w,1) , Ru,fi (u,2) ∪ Rw,gi (w,2) , . . . , Ru,fi (u,av,i ) ∪
Rw,gi (w,av,i ) }, where 1 ≤ i ≤ k.
Deﬁnition 4. Let TG be a (k, Θ)-parse tree. The (k, Θ)-parse tree problem is
the problem to ﬁnd the k target subgraphs of the root of TG .
Lemma 1. The (k, Θ)-parse tree problem can be solved in O(k 2 n) time, where
n is the number of vertices of the given tree.
3.2

Parallel Complexities of the (k, Θ)-Regular Problem

In this section, we apply the binary tree contraction technique described in [1]
to parallelize the (k, Θ)-regular problem. This technique recursively applies two
operations, prune and bypass, to a given binary tree. P rune(u) is an operation
which removes a leaf node u from the current tree, and bypass(v) is an operation
(following a prune operation) that removes a node v with exactly one child w and
then lets the parent of v become the new parent of w. We deﬁne a contraction
phase to be the consecutively execution of prune and bypass operations.
Let T be an n-leave binary tree with the root r. Given a Euler tour starting
from r of T , the algorithm initially numbers the leaves from 1 to n according
to the order of their appearances in the tour. Then, the algorithm repeats the
following steps. In each step, prune and bypass work only on the leaves with
odd index and their parents. Hence, these two operations can be performed
independently and delete 2l leaves together with their parents on the binary
tree in each step, where l is the number of the current leaves. Therefore, the tree
will be reduced to a three-node tree after repeating the steps in log n times.
Lemma 2. [1] If the prune operation and bypass operation can be performed
by one processor in constant time, the binary tree contraction algorithm can be
implemented in O(log n) time using O(n/ log n) processors on an EREW PRAM,
where n is the number of nodes in an input binary tree.
Consider a node x in a rooted tree T . Any node y on the unique path from
x to the root is called an ancestor of x. If y is an ancestor of x, then x is a
descendant of y. Further, x is a proper descendant of y when x = y. Note that
every node is both an ancestor and a descendant of itself. For convenience, we
allow UG to represent one of UV (G) and UE(G) if it is not particularly speciﬁed.
2

In this paper, a subgraph H of G is represented by a set Q: If Q ∈ UV (G) , then
H = (Q, ∅); If Q ∈ UE(G) , then H = ({x|x is an endpoint of an edge in Q}, Q).

Characterization of Eﬃciently Parallel Solvable Problems

227

Deﬁnition 5. Let u and v be two nodes of a (k, Θ)-parse tree T such that u
is a descendant of v. A k-ary function h : UGu k → UGv possesses the canonical
form, if h(X1 , . . . , Xk ) = Θ{Xb1 ∪ C1 , Xb2 ∪ C2 , . . . , Xba ∪ Ca }, where bi = bj for
two distinct 1 ≤ i, j ≤ a, and Ci ∈ (UGv \ UGu ).
The following lemma can be shown by the set theory and properties of the
function composition.
Lemma 3. Let Θ ∈ {Minv , Mine Maxv , Maxe }, and let h0 : UGu k → UGv
be a function with the canonical form, where u is a descendant of v. If k
functions hi : UGw k → UGu possess the canonical form, where 1 ≤ i ≤ k
and w is a descendant of u, then the function obtained from the composition
h0 ◦ (h1 , h2 , . . . , hk ) : UGw k → UGv possesses the canonical form.
We next develop a parallel algorithm for the (k, Θ)-parse tree problem. For
a node x in the current tree H, let parH (x) (respectively, childH (x)) denote the
parent (children) of x, and let sibH (x) denote the sibling of x. The subscript
H can be omitted if no ambiguity arises. Recall that H(x) be the subtree of
H rooted at x, and Rx = Rx,1 , . . . , Rx,k is the list of the target subgraphs
associated with x.
During the process of executing the tree contraction, we aim at constructing k
k-ary functions hx,1 , hx,2 , . . . , hx,k associated with each node x of the current tree
such that hx,i ’s possess the canonical form and satisfy the condition described
below. Let v be an internal node in the current tree whose left child and right
child are u and w, respectively. Also let u be the left child and w be the right
child of v in the original tree. For the remainder of this section, we call u and
w replacing ancestors of u and w with respect to v, respectively. Once Ru,i
and Rw,i , 1 ≤ i ≤ k, are provided as the inputs of hu,i and hw,i , respectively,
the target subgraphs of v can be obtained from Ru = Ru ,1 , . . . , Ru ,k =
hu,1 (Ru,1 , . . . , Ru,k ), . . . , hu,k (Ru,1 , . . . , Ru,k ) , and Rw = Rw ,1 , . . . , Rw ,k =
hw,1 (Rw,1 , . . . , Rw,k ), . . . , hw,k (Rw,1 , . . . , Rw,k ) , using the formula
Rv,i = Θ{Ru ,fi (u ,1) ∪ Rw ,gi (w ,1) , Ru ,fi (u ,2) ∪ Rw ,gi (w ,2) , . . . , Ru ,fi (u ,av,i ) ∪
Rw ,gi (w ,av,i ) }.
(1)
=
hu,fi (u ,j) (Ru,1 , . . . , Ru,k ) and Rw ,gi (w ,j)
=
where, Ru ,fi (u ,j)
hw,gi (w ,j) (Rw,1 ,
. . . , Rw,k ) for 1 ≤ j ≤ av,i .
We call the functions hx,i , 1 ≤ i ≤ k, computed for each node x in the current
tree the crucial functions of x.
We next describe the details of our algorithm. Initially, for each node v in
the given tree we construct k functions hv,i (X1 , . . . , Xk ) = Θ{Xi ∪ ∅}, 1 ≤ i ≤ k.
Clearly, these functions are crucial functions.
In the execution of the tree contraction, assume that prune(u) and
bypass(par(u)) are performed consecutively. Let par(u) = v and sib(u) = w in
the current tree. Let u and w be the replacing ancestors of u and w with respect
to v, respectively. Assume that hu,i and hw,i , 1 ≤ i ≤ k, are crucial functions of u

228

S.-Y. Hsieh

and w in the current tree. Thus Ru = hu,1 (Ru,1 , . . . , Ru,k ), . . . , hu,k (Ru,1 , . . . ,
Ru,k ) and Rw = hw,1 (Rw,1 , . . . , Rw,k ), . . . , hw,k (Rw,1 , . . . , Rw,k ) . Since u is a
leaf, Ru,i ’s are associated with u before executing the tree contraction algorithm.
Therefore, the above k target subgraphs Ru can be obtained through function
evaluation. On the other hand, since w is not a leaf in the current tree, Rw,i ,
1 ≤ i ≤ k, is an indeterminate value represented by variable Xi . Hence. Rw can
be represented by hw,1 (X1 , . . . , Xk ), . . . , hw,k (X1 , . . . , Xk ) . By Equation 1, we
construct k intermediate functions representing k target subgraphs Rv from Ru
and Rw by:
Rv,i = Θ{Ru ,fi (u ,1) ∪ Rw ,gi (w ,1) , Ru ,fi (u ,2) ∪ Rw ,gi (w ,2) , . . . , Ru ,fi (u ,av,i ) ∪
Rw ,gi (w ,av,i ) },
(2)
where Rw ,gi (w ,j) = hw,gi (w ,j) (X1 , . . . , Xk ), 1 ≤ j ≤ av,i
As with the proof similar to that of Lemma 3, Equation 2 can be further
simpliﬁed as
(3)
Rv,i = Θ{Xb1 ∪ C1 , Xb2 ∪ C2 , . . . , Xba ∪ Ca },
where bi = bj for two distinct 1 ≤ i, j ≤ a, Xbi are variables drawn from Uw ,
and Ci ∈ (UGv \ UGw ).
Therefore, the above functions (constructed after executing prune(u)) possess
the canonical form. Given those functions Rv,i ’s, the contribution to the k target subgraphs of par(v) is obtained by function composition hv,i (Rv,1 , . . . , Rv,k )
for all 1 ≤ i ≤ k. These functions are constructed for w after executing
bypass(par(v)). By Lemma 3, hv,i (Rv,1 , . . . , Rv,k ), 1 ≤ i ≤ k, possesses the
canonical form. Hence, we have the following lemma.
Lemma 4. During the process of executing the binary tree contraction on a
(k, Θ)-parse tree to remove some nodes, the crucial functions of the remaining
nodes of the current tree can be constructed in O(k 3 ) time using one processor.
Theorem 1. The (k, Θ)-parse tree problem can be solved in O(k 3 log n) time
using O(n/ log n) processors on an EREW PRAM, where n is the number of
nodes of the input tree.
Deﬁnition 6. Let G be a decomposable graph and let TG be a parse tree. A
problem P is said to be a (k, Θ)-regular problem on G if P can be reduced to
a (k, Θ)-parse tree problem B on TG such that the solution of B is exactly the
solution of P. Moreover, the reduction scheme takes O(k 3 log |V (TG )|) time using
O(|V (TG )|/ log |V (TG )|) processors on an EREW PRAM.
Note that each (k, Θ)-regular problem corresponds to a (k, Θ)-parse tree. This
tree is obtained from a parse tree TG in which some additional data structures
are associated with V (TG ) (refer to Deﬁnition 3). In Section 4, we assume that a
parse tree is given for solving a (k, Θ)-regular problem on a decomposable graph.
The following result directly follows from Deﬁnition 6 and Theorem 1.

Characterization of Eﬃciently Parallel Solvable Problems

229

Theorem 2. Given a parse tree of a decomposable graph G, a (k, Θ)regular problem on G can be solved in O(k 3 log |V (TG )|) time using
O(|V (TG )|/ log |V (TG )|) processors on an EREW PRAM.
Corollary 1. A (k, Θ)-regular problem of a decomposable graph G = (V, E) can
be solved in O(Td (|V |, |E|) + log |V (TG )|) time using O(Pd (|V |, |E|) +
|V (TG )|/ log |V (TG )|) processors on Md .

4

(k, Θ)-Regular Problems

Given a problem P, a graph G1 , a subgraph G2 of G1 , and a subset Q of vertices
in G2 , PQ (G1 , G2 ) is a solution to the input graph G1 such that this solution
contains all vertices in Q and is in G2 . For the case of Q = ∅, i.e., P∅ (G1 , G2 ),
the notation represents a solution to G1 and this solution is contained in G2 .
For brevity, let PQ (G, G) = PQ (G).
An independent set of a graph is a subset of its vertices such that no two
vertices in the subset are adjacent. The maximum independent set problem I
is the problem of ﬁnding a maximum-cardinality independent set in the input
graph. Using our notation, given an input graph G, a solution is I∅ (G). For a
basis rooted tree G = ({r}, {}, (r)), I∅ (G) and I{r} (G) are both equal to {r},
and I∅ (G[V \ {r}]) = ∅.
Lemma 5.
Assume G = (V1 ∪ V2 , E1 ∪ E2 ∪ {(r1 , r2 )}, (r1 )) is obtained from G1 =
(V1 , E1 , (r1 )) and G2 = (V2 , E2 , (r2 )).
(1) I∅ (G) = Maxv {I{r1 } (G1 ) ∪ I∅ (G2 [V2 \ {r2 }]),
I∅ (G1 [V1 \ {r1 }]) ∪ I{r2 } (G2 ), I∅ (G1 [V1 \ {r1 }]) ∪ I∅ (G2 [V2 \ {r2 }])};
(2) I{r} (G) = I{r1 } (G1 ) ∪ I∅ (G2 [V2 \ {r2 }]);
(3) I∅ (G[V \ {r}]) = I∅ (G1 [V1 \ {r1 }]) ∪ I∅ (G2 ).
Proof. Straightforward.
By the above result, it is not diﬃcult to obtain the following two theorems.
Theorem 3. The maximum independent set problem is a (3, Maxv )-regular
problem on trees.
Theorem 4. The maximum independent set problem on trees can be solved in
O(log n) time using O(n/ log n) processors on an EREW PRAM, where n is the
number of vertices of the input graph.
Given an undirected graph G = (V, E), a matching is a subset of edges
M ⊆ E such that for all vertices v ∈ V , at most one edge of M is incident on
v. The maximum matching problem M is the problem of ﬁnding a matching of
maximum cardinality. For a basis series-parallel graph G = ({l, r}, {(l, r)}, (l, r)),
M∅ (G) = {(l, r)}, M{l} (G[V \ {r}]) = ∅, M{r} (G[V \ {l}]) = ∅, M{l,r} (G) =
{(l, r)}, M∅ (G[V \{l, r}]) = ∅. We can further show that the maximum matching
problem is a (5, Maxe )-regular problem on series-parallel graphs.
By the methods described in [4,10] to construct parse trees of series-parallel
graphs, we have the following theorem.

230

S.-Y. Hsieh

Theorem 5. The maximum matching problem on series-parallel graphs can be
solved in sequential O(n+m) time, and in parallel in O(log m log∗ m) time using
O(m/ log m log∗ m) processors on an EREW PRAM.
Given a simple graph G = (V, E), a vertex v ∈ V is said to dominate itself
and all vertices adjacent to v. A subset D of V is called an eﬃcient dominating
set of G if every vertex in V is dominated by exactly one vertex in D. Note
that not all graphs have eﬃcient dominating sets. Moreover, if a graph possesses
an eﬃcient dominating set, then all these sets have the same cardinality. The
eﬃcient domination problem D is the problem to ﬁnd an eﬃcient dominating
set of a given graph if such a set exists. Using our paradigm, we can also show
the following result.
Theorem 6. The eﬃcient domination problem on series-parallel graphs can be
solved in linear O(n + m) time, and in parallel in O(log m log∗ m) time using
O(m/ log m log∗ m) processors on an EREW PRAM.

References
1. K. Abrahamson, N. Dadoun, D. G. Kirkpatrick, and T. Przytycka, A simple parallel
tree contraction algorithm, Journal of Algorithms, 10, pp. 287-302, 1989.
2. S. Arnborg and A. Proskurowski, Linear time algorithms for NP-hard problems
restricted to partial k-trees, Discrete Applied Mathematics, 23, pp. 11-24, 1989.
3. M. W. Bern, E. L. Lawler, and A. L. Wong, Linear-time computation of optimal
subgraphs of decomposable graphs, Journal of Algorithms, 8:216-235, 1987.
4. H. L. Bodlaender and B. van Antwerpen-de Fluiter, Parallel algorithms for series
parallel graphs and graphs with treewidth two, Algorithmica, 29(4):534-559, 2001.
5. M. C. Golumbic, Algorithmic graph theory and perfect graphs, Academic press,
New York, 1980.
6. R. M. Karp and V. Ramachandran, Parallel algorithms for shared memory machines, Handbook of Theoretical Computer Science, North-Holland, Amsterdan, pp.
869-941, 1990.
7. S. Mahajan and J. G. Peters, Algorithms for regular properties in recursive graphs,
in: Proceedings of the 25th Allerton Conference on Communication, Control, and
Computing, pp. 14-23, 1987.
8. S. Mahajan and J. G. Peters, Regularity and locality in k-terminal graphs, Discrete
Applied Mathematics, 54:229-250, 1994.
9. K. Takamizawa, T. Nishizeki, and N. Saito, Linear-time computability of combinatorial problems on series-parallel graphs, Journal of the ACM, 29:623-641, 1982.
10. J. Valdes, R. E. Tarjan, and E. L. Lawler, The recognition of series-parallel digraphs, SIAM Journal on Computing, 11:298-313, 1982.
11. T. V. Wimer, Linear algorithms on k-terminal graphs, Ph.D. Thesis, Clemson
University, Clemson, SC, 1987.
12. T. V. Wimer and S. T. Hedetniemi, K-terminal recursive families of graphs, Congressus Numerantium, 63:161-176, 1988.

