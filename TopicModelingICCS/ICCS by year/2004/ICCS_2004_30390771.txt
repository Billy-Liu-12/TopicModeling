On the Eﬃciency of Simpliﬁed Weak Taylor
Schemes for Monte Carlo Simulation in Finance
Nicola Bruti Liberati and Eckhard Platen
University of Technology Sydney, School of Finance & Economics and Department of
Mathematical Sciences, PO Box 123, Broadway, NSW, 2007, Australia

Abstract. The purpose of this paper is to study the eﬃciency of simpliﬁed weak schemes for stochastic diﬀerential equations. We present a
numerical comparison between weak Taylor schemes and their simpliﬁed
versions. In the simpliﬁed schemes discrete random variables, instead of
Gaussian ones, are generated to approximate multiple stochastic integrals. We show that an implementation of simpliﬁed schemes based on
random bits generators signiﬁcantly increases the computational speed.
The eﬃciency of the proposed schemes is demonstrated.

1

Introduction

As described, for instance, in [7] to price an option via simulation, one does not
require a pathwise approximation of the solution of the underlying stochastic
diﬀerential equation (SDE). Only an approximation of its probability distribution has to be considered. Thus the appropriate notion of convergence for such
a Monte Carlo simulation should be the weak one, instead of the strong convergence, as described in [6]. It is well known that in order to achieve a certain
order of weak convergence one can approximate the random variables in a weak
Taylor scheme by appropriate discrete random variables. For instance, instead
of a Gaussian increment we can employ in an Euler scheme a much simpler two
point distributed random variable. In general, the simpliﬁed random variables
have to coincide only for certain lower order moments with those of the random
variables appearing in the Taylor schemes. In the case of a weak Taylor scheme
of second order, to construct a second order simpliﬁed method we can use a
three point distributed random variable. The aim of this paper is to show that
an implementation of such simpliﬁed schemes based on random bits generators
signiﬁcantly increases the computational eﬃciency.
It should be noticed that the simpliﬁed Euler method is equivalent to some
random walk, which again is approximately equivalent to a binomial tree. The
possible states of the tree and of the simpliﬁed Euler scheme are approximately
the same. Small diﬀerences arise only for the level of these states depending on
the chosen parametrization of the binomial tree. However, while the tree is a
deterministic backward algorithm, the simpliﬁed method is a forward method
which generates paths. As we will report in Section 4, the numerical behaviour
of simpliﬁed methods is similar to that of trees. For instance, we will obtain
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 771–778, 2004.
c Springer-Verlag Berlin Heidelberg 2004

772

N. Bruti Liberati and E. Platen

an oscillatory convergence in the case of a European call payoﬀ. This is a wellknown eﬀect of tree methods, but as will be shown, not limited to this class of
methods, see, for instance, [2].
The widespread application of the tree methodology in ﬁnance motivates the
application of the simpliﬁed schemes that will be presented in this note. The
similarity between simpliﬁed schemes and tree methods is important for the understanding of the numerical properties for both types of methods.
Simpliﬁed schemes, being forward algorithms, are not easily suitable to price
American options, even that corresponding algorithms have been developed, see
for instance [8]. Moreover, with the simpliﬁed methods we always have to face
the typical statistical error from Monte Carlo simulations. Major advantages of
simpliﬁed schemes over tree methods are that of ﬂexibility and general applicability in high dimensions.
The implementation of random bits generators will be proposed in this note. It
makes simpliﬁed methods highly eﬃcient. As shown in [5], implicit simpliﬁed
methods can overcome certain numerical instability. Most importantly, random
bits generators can be eﬃciently applied to implicit schemes, while tree methods cannot be made implicit. Note that simpliﬁed implicit schemes can be
understood as being equivalent to implicit ﬁnite diﬀerence partial diﬀerential
equation(PDE) methods. However, PDE methods cannot be easily implemented
for higher dimensions.
The order of convergence of simpliﬁed schemes is independent of the dimension of the problem. As shown in [1], around dimension three or four simulation
methods typically become more eﬃcient than tree or PDE methods. It will be
shown that simpliﬁed methods with random bits generators outperform signiﬁcantly Taylor schemes, which are based on Gaussian and other random variables.
This makes simpliﬁed methods with random bits generators eﬃcient tools for
high dimensional problems.

2

Weak Taylor Schemes and Simpliﬁed Methods

For the dynamics of the underlying security let us consider the following SDE:
dXt = a(t, Xt )dt + b(t, Xt )dWt

(1)

for t ∈ [0, T ], with X0 ∈ R. A derivative pricing problem consists in computing
an expectation of a payoﬀ function g(XT ) of the solution of the SDE (1). For
the numerical approximation of such an expectation we require only an approximation of the probability distribution XT . Therefore, the appropriate notion
of convergence is that of weak convergence, see [6].
Let us assume an equidistant time dicretisation with nth discretisation time
T
tn = n∆ for n ∈ {0, 1, . . . , N } where ∆ = N
and N ∈ {1, 2, . . .}. As a set of test
l
functions we use the space CP of the l times continuously diﬀerentiable functions
g which, together with their partial derivatives of orders up to and including l,
have polynomial growth.
We say that a time discrete approximation Y ∆ = {Yt∆ , t ∈ [0, T ]} converges
2(γ+1)
weakly to X = {Xt , t ∈ [0, T ]} at time T with order γ if for each g ∈ CP

On the Eﬃciency of Simpliﬁed Weak Taylor Schemes

773

there exists a positive constant K, which does not depend on ∆, and a ∆0 > 0
such that ε(∆) = |E(g(XT ) − E(g(YN∆ ))| ≤ K∆γ for each ∆ ∈ (0, ∆0 ).
As explained in [6], based on the Wagner-Platen expansion one can construct
the, so called, weak Taylor schemes of any given weak order γ ∈ {1, 2, . . .}. The
simplest weak Taylor scheme is the Euler method, which has the weak order of
convergence γ = 1.0. It is given by the scheme
Yn+1 = Yn + a(tn , Yn )∆ + b(tn , Yn )∆Wn ,

(2)

where ∆Wn = Wtn+1 − Wtn is the Gaussian increment of the Wiener process W
for n ∈ {0, 1, 2 . . . , N − 1} and Y0 = X0 .
If one uses in the above Euler scheme instead of Gaussian random variables
simpler multi-point distributed random variables, then one can still obtain the
same weak order of convergence γ = 1.0, see Theorem 14.5.2 p. 474 in [6]. For the
Euler method these simpler random variables have to coincide in their ﬁrst three
moments with those of the Gaussian Wiener process increments. This permits to
replace the Gaussian increment ∆Wn in (2), by a two point distributed random
√
variable ∆Wn , where P (∆Wn = ± ∆) = 12 . We then obtain the simpliﬁed Euler
scheme. Here the ﬁrst three moments of the Wiener process increments ∆Wn
match those of ∆Wn .
The same applies to the order 2.0 weak Taylor scheme
1
1
1
aa + a b2 ∆2
Yn+1 = Yn + a∆ + b∆Wn + b b ∆Wn2 − ∆ +
2
2
2
1
(3)
+a b ∆Zn + ab + b b2 {∆Wn ∆ − ∆Zn } ,
2
t

s

o integral ∆Zn = tnn+1 tn2 dWs1 ds2 . Here
where ∆Zn represents the double Itˆ
we replace the Gaussian random variables ∆Wn and ∆Zn by expressions
that
√
use a three point distributed random variable ∆Wn with P (∆Wn = ± 3∆) = 16
and P (∆Wn = 0) = 23 .
Then we obtain the second order simpliﬁed method
1
∆W n
Yn+1 = Yn + a∆ + b∆Wn + bb
2
1
1
a b + ab + b b2 ∆Wn ∆.
+
2
2

2

−∆ +

1
2

1
aa + a b2 ∆2
2
(4)

Since the three point distributed random variable ∆Wn is such that the ﬁrst ﬁve
moments of the increments of the schemes (3) and (4) are matched, the second
order simpliﬁed scheme (4) can be shown to achieve the weak order γ = 2.0.
By using four or even ﬁve point distributed random variables for approximating
the random variables needed, we can obtain simpliﬁed weak Taylor schemes of
weak order γ = 3 or 4, respectively, as shown in [6] and in [4].
An important issue for simulation methods for SDEs is their numerical stability.
As noticed in [5], when considering test equations with multiplicative noise, the
weak schemes described above show narrow regions of numerical stability. In

774

N. Bruti Liberati and E. Platen

order to improve the numerical stability one needs to introduce implicitness in
the diﬀusion terms. This leads, for instance, to the fully implicit Euler scheme
Yn+1 = Yn + a (tn+1 , Yn+1 ) − b (tn+1 , Yn+1 )
+b (tn+1 , Yn+1 ) ∆Wn .

∂
b (tn+1 , Yn+1 )
∂y

∆
(5)

Also in this case one can employ the two point distributed random variable ∆Wn
instead of ∆Wn in (5) to obtain the simpliﬁed fully implicit Euler scheme that
still achieves an order γ = 1.0 of weak convergence.

3

Random Bits Generators

We now demonstrate, for simpliﬁed schemes, how to implement highly eﬃcient
random bits generators, that exploit the architecture of a digital computer. The
crucial part of the resulting simpliﬁed schemes, are the random bits generators.
These substitute the Gaussian random number generators needed for weak Taylor schemes.
A well known and eﬃcient method to generate a pair of independent standard
Gaussian random variables is the polar Marsaglia-Bray method coupled with a
linear congruential random number generator, as described in [9]. In our comparative study we use, as our Gaussian random number generator, the routine
gasdev, see p. 293 of [9].
For the simpliﬁed Euler scheme (2) and simpliﬁed fully implicit Euler scheme
(5) we use a two point distributed random variable in each time step, which
is obtained from a random bits generator. This generator is an algorithm that
generates a single bit 0 or 1 with probability 0.5. The method implemented is
based on the theory of primitive polynomials modulo 2. These are polynomials
satisfying particular conditions whose coeﬃcients are zero or one. The important property is that every primitive polynomial modulo 2 of order n deﬁnes
a recurrence relation for obtaining a new bit from the n preceding ones with
maximal length. This means that the period lenght of the recurrence relation is
equal to 2n − 1. For a study on random number generators based on primitive
polynomials modulo 2 we refer to [11].
Since the random number generator for the polar Marsaglia-Bray method has a
period of 231 we use a random bits generator based on the following primitive
polynomial modulo 2 of order 31: y(x) = x31 + x3 + 1. The C++ implementation
of this generator is reported in Figure 1, see also [9]. This method is extremely
fast and suitable for direct hardware implementation.
On the test computer the CPU time needed to generate 10 million random numbers with the polar Marsaglia-Bray method amounts to 4.7 seconds. The two
point random bits generator, described above, is almost 30 times faster using
only 0.16 seconds.
For simpliﬁed methods of higher order similar multi-point random bits generators can be constructed. For the second order simpliﬁed method (4) it is suﬃcient
to use a three point random bits generator. A corresponding code is presented
in Figure 2. It produces three bits coupled with an acceptance-rejection method.

On the Eﬃciency of Simpliﬁed Weak Taylor Schemes

775

int irbit1per31(unsigned long & iseed)
{

unsigned long newbit;
newbit = ((iseed >> 31) & 1)
ˆ ((iseed >> 2) & 1);
iseed = (iseed << 1) | newbit;
return int(newbit); }

Fig. 1. C++ code of the two point random bits generator.

On the test computer the CPU time needed to generate 10 million random numbers with this generator amounts to 0.8 seconds, which is still 5 times less than
the polar Marsaglia-Bray method.

int ranbit3per31(unsigned long & iseed)
{

int x1 = 1, x2 = 1, x3 = 0;
while ( (x1 = = 1 && x2 = = 1 && x3 = = 0)
|| (x1 = = 0 && x2 = = 1 && x3 = = 1))
{ x1 = irbit1per31(iseed);
x2 = irbit1per31(iseed);
x3 = irbit1per31(iseed); }
return x1 − x3; }

Fig. 2. C++ code of the three point random bits generator.

4

Numerical Results

Now, we present some numerical results for the Euler, fully implicit Euler and
order 2.0 weak Taylor schemes as well as their simpliﬁed versions. As test dynamics we choose an SDE with multiplicative noise of the Black-Scholes type,
where
(6)
dXt = µXt dt + σXt dWt
for t ∈ [0, T ]. The SDE admits the closed form solution XT = X0 exp{(µ −
σ2
2 )T + σWT }. The CPU times needed to compute 4 million approximate paths
with 64 time steps with the Euler, fully implicit Euler and order 2.0 weak Taylor
scheme amount to 107, 114 and 110 seconds, respectively. The corresponding approximate simpliﬁed versions only require 3.8, 6.2 and 25.6 seconds, respectively.
Thus, for the Euler method the simpliﬁed version is roughly 28 times faster than
the Gaussian one. The simpliﬁed fully implicit Euler method is about 18 times

776

N. Bruti Liberati and E. Platen

faster than its Gaussian counterpart. For the second order simpliﬁed method we
found that it is roughly four times more eﬃcient than the order 2.0 weak Taylor
scheme.
We analyse now the weak convergence of Monte Carlo simulations when using
a smooth payoﬀ function, where we choose the ﬁrst moment for illustration and
consider later on also a non smooth payoﬀ which will be that of a European call
option.
4.1

A Smooth Payoﬀ Function

At ﬁrst, we study the weak error for a ﬁxed number of simulations and time
steps. We also compare the CPU time needed to reach a given accuracy. In order to analyse the weak error ε(∆), we run suﬃciently many simulations such
that the statistical error can be neglected. We use the following parameters:
X0 = 1, µ = 1.5, σ = 0.01, T = 1.
An important application of Monte Carlo simulation is the calculation of Value at Risk via the simulation of moments, as applied in Edgeworth expansions
and saddle point methods, see [10]. Therefore, as test function we use the ﬁrst
moment E(XT ) of XT at time T . Other moments give similar numerical results
due to the lognormal structure of the Black-Scholes dynamics. We then estimate
the weak error of the ﬁrst moment by comparing the simulated Monte Carlo
estimate with the exact expectation E(XT ) = X0 eµT .
In the ﬁrst plot of Figure 3 we show the logarithm log2 (ε(∆)) of the weak error
for the Euler, fully implicit Euler, and order 2.0 weak Taylor method versus
the logarithm log2 (∆) of the time step size. The errors for the corresponding
simpliﬁed versions are almost identical and therefore omitted. The number of
simulated paths amounted to 16 million, which resulted in extremely small conﬁdence intervals that practically do not show up in Figure 3.
We emphasize the important observation that the simpliﬁed methods achieve
8

0
-2.5
-5
-7.5

Euler

-10

FImpEul

-12.5
-15
-8

2Taylor
-6

-4

Log2 dt

-2

0

Log2 CPU Time

Log2 WError

2.5

6
4

Euler
FImpEul
2Taylor
SEuler
SFimpEul
S2Taylor

2
0
-2
0.5

1

1.5

2

2.5

3

3.5

4

Log2 WError

Fig. 3. Log-log plots of weak error versus time step size and CPU time versus the
weak error for the Euler, fully implicit Euler and order 2.0 weak Taylor schemes.

almost exactly the same accuracy of their Taylor counterparts. Note in Figure 3
that the Euler and the fully implicit Euler scheme reproduce in the log-log plot
the theoretically predicted weak order γ = 1.0. Furthermore, the order 2.0 weak

On the Eﬃciency of Simpliﬁed Weak Taylor Schemes

777

Taylor scheme achieves a weak order of about γ = 2.0, as expected. Moreover, we
note in Figure 3 that the fully implicit Euler scheme shows poor results for very
large step sizes. However, as shown in [5], the fully implicit method has better
stability properties than the explicit schemes once the time step size becomes
suﬃciently small.
What really matters in practice is the time needed to reach a given level of accuracy. In the second plot of Figure 3 we show the logarithm of the CPU time
versus the negative of the logarithm of the weak error observed for the three
methods described above and their simpliﬁed versions. Since the accuracy for a
given time step size is almost identical for the schemes of the same order, the
increase in eﬃciency simply reﬂects the fact that the simpliﬁed schemes are computationally less intensive than their Gaussian counterparts. We recall that, for
instance, the simpliﬁed Euler scheme is 28 times faster than the Euler scheme.
By comparing all six methods, we conclude that the second order simpliﬁed
scheme is signiﬁcantly more eﬃcient for the given example than any other of
the considered schemes. This result is rather important in simulations of BlackScholes dynamics since it points out eﬃcient Monte Carlo simulation algorithms
for smooth payoﬀs.
4.2

An Option Payoﬀ

In option pricing we are confronted with the computation of expectations of non
smooth payoﬀs. To give a simple example, let us compute the price of a European call option. Here we have a continuous but only piecewise diﬀerentiable
payoﬀ (XT − K)+ = max(XT − K, 0) with strike price K and the well known
Black-Scholes formula as closed form solution for the option price at time t = 0.
For this non smooth payoﬀ we study the weak error for the Euler and the simpliﬁed Euler method, assuming the volatility σ = 0.2 and the short rate µ = 0.1.
We observed no major gain by using higher order methods, which is likely to be
due to the non smooth option payoﬀ. Since the second order simpliﬁed method
(4) is approximately equivalent to a trinomial tree, as discussed in Section 1,
this is consistent with an observation in [3]. In [3] it was observed that in option
pricing the order of convergence of trinomial trees is not superior to that of binomial trees.
In the ﬁrst plot of Figure 4 we show the log-log weak error plot for an at the
money-forward option, with strike K = X0 eµT . The Euler method generates
a weak order γ = 1.0 with the log error forming a perfect line in dependence
on the log time step size. As mentioned earlier, the simpliﬁed Euler method is
approximately equivalent to a binomial tree. This method still achieves a weak
order γ = 1.0. However, its log-log error plot does not exhibit a perfect line,
which is due to the discrete nature of the random variables used. This appears
to be the same eﬀect as noticed for tree methods, see [2]. We observed for in the
money and out of the money options a similar order of convergence with similar
log error patterns.
In the second plot of Figure 4 we show the logarithm of the CPU time versus
the negative logarithm of the weak error. For the considered non smooth payoﬀ
the increase in computational speed is still about 28 times. The simpliﬁed Euler

778

N. Bruti Liberati and E. Platen

Log2 CPU Time

Log2 WError

-7
-8
-9
-10
-11
Euler
SEuler

-12
-5

-4

-3

-2

Log2 dt

-1

0

2
0
-2
Euler
SEuler

-4
6.5

7

7.5

8

8.5

9

9.5

10

Log2 WError

Fig. 4. Log-log plots of weak error versus time step size and CPU time versus the weak
error for call option with Euler and simpliﬁed Euler scheme.

method is signiﬁcantly more eﬃcient than the Euler scheme, for every level of
accuracy. We observed similar results also for in the money and out of the money
options. In summary, one can say that the proposed rather simple random bits
generators when combined with simpliﬁed schemes can signiﬁcantly enhance the
eﬃciency of typical Monte Carlo simulations in ﬁnance.

References
1. Boyle, P., M. Broadie, & P. Glasserman (1997). Monte Carlo methods for security
pricing. J. Econom. Dynam. Control 21(8-9), 1267–1321.
2. Boyle, P. P. & S. H. Lau (1994). Bumping up against the barrier with the binomial
method. J. Derivatives, 6–14.
3. Heston, S. L. & G. Zhou (2000). On the rate of convergence of discrete-time
contingent claims. Math. Finance 10(1), 53–75.
4. Hofmann, N. (1994). Beitr¨
age zur schwachen Approximation stochastischer Diﬀerentialgleichungen. Ph. D. thesis, Dissertation A, Humboldt Universit¨
at Berlin.
5. Hofmann, N. & E. Platen (1996). Stability of superimplicit numerical methods for
stochastic diﬀerential equations. Fields Inst. Commun. 9, 93–104.
6. Kloeden, P. E. & E. Platen (1999). Numerical Solution of Stochastic Diﬀerential
Equations, Volume 23 of Appl. Math. Springer. Third corrected printing.
7. Kloeden, P. E., E. Platen, & H. Schurz (2003). Numerical Solution of SDE’s
Through Computer Experiments. Universitext. Springer. Third corrected printing.
8. Longstaﬀ, F. A. & E. S. Schwartz (2001). Valuing American options by simulations:
A simple least-squares approach. Rev. Financial Studies 14(1), 113–147.
9. Press, W. H., S. A. Teukolsky, W. T. Vetterling, & B. P. Flannery (2002). Numerical Recipes in C++. The art of Scientiﬁc Computing (2nd ed.). Cambridge
University Press.
10. Studer, M. (2001). Stochastic Taylor Expansions and Saddlepoint Approximations
for Risk Management. Ph. D. thesis, Swiss Federal Institute of Technology Zurich.
11. Tausworthe, R. C. (1965). Random numbers generated by linear recurrence modulo
two. Mathematics of Computation 19, 201–209.

