On Bit-Level Systolic Arrays for Least-Squares
Digital Contour Smoothing
J´
an Glasa
Institute of Informatics, Slovak Academy of Sciences,
D´
ubravsk´
a cesta 9, 845 07 Bratislava, Slovak Republic
utrrglas@savba.sk

Abstract. In this paper bit-level systolic arrays for the least-squares
digital contour smoothing are described. The smoothing is represented
by linear operators deﬁned by sparse circulant Toeplitz matrices with
integer coeﬃcients. A suitable decomposition of such matrices allows to
analyze diﬀerent bit-level pipelined strategies of the computation and
to suggest corresponding bit-level systolic arrays which have a simple
regular structure and achieve very high throughputs.

1

Introduction

Development of eﬃcient techniques for the real-time analysis of digital arcs and
curves plays an important role in image processing [2,7,8,16,18]. The methods for
digital curves analysis can have a principal impact for analysis, representation
and characterization of signiﬁcant regions in digital images and for analysis of
shapes of real objects, so that they belong to basic tools of commercial computer
vision systems. Serious attention is paid to the introduction of new approaches
and methods to improve the estimation accuracy of shape characteristics and invariants. The high speed computation, which is required in many concrete image
processing applications [1,4,10,13,14,19], inﬂuences the development of VLSI systems utilizing parallelism, such as pipelined architectures, systolic arrays, string
processors and wavefront arrays.
In this paper1 we focus on eﬃcient pipelined calculation of the constrained
least-squares digital contour smoothing [15] which is based on the least-squares
approximation to functions on equidistant subsets of points by orthogonal polynomials. Such a smoothing is represented by linear operators deﬁned by circulant
Toeplitz matrices with integer coeﬃcients which can be eﬃciently realized. A
suitable decomposition of these matrices allows to investigate diﬀerent pipelined
bit-level computation strategies and to suggest bit-level systolic arrays with a
simple regular structure and very high throughputs.
In the following, let a digital picture be a ﬁnite rectangular array represented
by a ﬁnite square grid Ω where a distance between neighbouring grid points of
Ω is equal to 1.
1

This work was partially supported by NSGA, grant No. 2/4149/24.

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 18–25, 2004.
c Springer-Verlag Berlin Heidelberg 2004

On Bit-Level Systolic Arrays

19
N

Let a digital contour be a planar simply closed digital curve Γ ≡ j=0 Sj ,
where Sj is a linear segment of the length 1 whose end points (xj , yj ) and
(x(j+1)modN , y(j+1)modN ) belong to grid points of Ω, and for each j there are
exactly two points (x(j−1)modN , y(j−1)modN ), (x(j+1)modN , y(j+1)modN ) for which
it holds |xj -x(j−1)modN |+|yj -y(j−1)modN |=1, |x(j+1)modN -xj |+|y(j+1)modN -yj |=1.
Let us denote by


X=

x0 x1 ... xN
y0 y1 ... yN

c0
 cN

T
cN −1
, C =


 c2
c1

c1 c2 ... cN −1
c0 c1 ... cN −2
cN c0 ... cN −3
...
c3 c4 ... c0
c2 c3 ... cN

cN



cN −1

N
cN −2
, and c =
cj ,


j=0
c1 
c0

where C is an (N + 1)x(N + 1) circulant Toeplitz matrix.
Digital contour smoothing in the least-squares sense is described by linear
operator 1c C which is applied on X [15],
1
c

CX=X,

(1)

where the coeﬃcients of C are obtained by the least-squares approximation to
functions on equidistant subsets of points by orthogonal polynomials (for more
details see [15,6]). Some examples of the operators 1c C X are shown on Fig. 1.
The operators 1c C deﬁned by (1) are position invariant [15], i.e., it holds that
1
N +1

J C (X −

1
N +1

J X ) = O,

where J is an (N + 1)x(N + 1) matrix whose elements are 1s and O is an
(N + 1)x(N + 1) null matrix whose elements are 0s. This means that the
smoothed contour has the same centroid as the original digital contour.


11

1



1 1 1



1
1
1


1

3



1 1 1
1

11

(a)

 17 12
 12 17
−3 12

1
35



−3
12 −3



−3
−3 12
12 −3
−3 

17 12 −3




−3 12 17 12 −3 

−3 12 17 12
−3 12 17

(b)





7 6 3 −2 −2 3 6
 6 7 6 3 −2 −2 3 
 3 6 7 6 3 −2 −2







 −2 3 6 7 6 3 −2


−2 −2 3 6 7 6 3 



1
21

3 −2 −2 3 6 7 6
6 3 −2 −2 3 6 7

(c)

Fig. 1. Examples of the linear operators 1c C which correspond to the least-squares
3-, 5-, and 7-point approximation by polynomials of the 1-st, 3-rd, and 3-rd degree,
respectively (zero values of the matrix coeﬃcients are not registered)

20

J. Glasa

A subset of operators 1c C deﬁned by (1) are feasible [15], i.e., they fulﬁl the
condition
(2)
| xj − xj |< 12 , | yj − yj |< 12 ,
for all j, where xj , yj are elements of X and xj , yj are elements of X . According to this deﬁnition, the feasible operator is deﬁned by the constrained
least-squares smoothing with the constraints (2) and it generates points which
N
lie in the interior of the corridor j=0 {(u, v) ∈ R2 : | xj −u |≤ 12 , | yj −v |≤ 12 }.
It has been shown that all operators on Fig. 1 are feasible [15]. The operator
deﬁned by polynomials of the third degree and by seven points allows to perform in some sense ”maximal” feasible smoothing. These operators minimize the
undersampling, digitizing and quantizing error and so they are able to improve
the stability of calculation of invariants which correspond to invariants related
to original pre-digitized contours investigated (for more details see [15,6]). Note
that in this paper, the eﬀect of noise by which digital images can be corrupted
is not considered (it is assumed to be suppressed by a suitable pre-processing
technique [3,9,11,12,17]).

2

Word-Level Pipelining of the Calculation

Let us consider the matrix C with coeﬃcients c−3 = c3 = −2, c−2 = c2 = 3,
c−1 = c1 = 6, c0 = 7 and let c = 21 (see Fig. 1c). The matrix-matrix multiplication CX can be represented by two circulant convolutions
3

cxi =

3

cj x(i−j)modN , cyi =
j=−3

cj y(i−j)modN ,

(3)

j=−3

i = 0, 1, 2, ..., N . The word-level serial calculation as well as the word-level
pipelining of (3) is straightforward.

z ✲c ✲ z
j
x✲ ✲ x

z =: z + cj x;
x =: x

(a)
0 0 0 0 ... 0 0 0
0
x3 x2 x1 xN . . . x1 xN xN −1 xN −2

2
2
2
2
2
2
✲ ✲
✲
✲
✲
✲
✲
✲
1 3 ✲
1 6 ✲
1 7 ✲
1 6 ✲
1 3 ✲
1 -2 ✲
✲ -2 ✲

(b)
Fig. 2. A word-level systolic array for the least-squares 7-point digital contour
smoothing by polynomials of the third degree

On Bit-Level Systolic Arrays

21

A linear systolic array for parallel pipelined calculation of the ﬁrst circulant
convolution in (3) is shown on Fig. 2 (for more details see [15]). It has simple cells (Fig. 2a) separated by delay elements controlled by a common clock.
The numbers of delay elements at z- and x-connections and the necessary input
operations are shown on Fig. 2b. Since the primitive operations performed are
operations on the word level, the array is qualiﬁed as a word-level systolic array.
It has the throughputs (N+13)T, where T is the execution time of a single cell
function.

3

Bit-Level Pipelining of the Calculation

The bit-level pipelining of the calculation of (1) is based on a suitable decomposition of the matrix C. Since the integer coeﬃcients of the matrix C can be
represented by sums of powers of 2, it is possible to ﬁnd such decompositions of
C by which the calculation of (1) can be represented by circulant convolutions
in which neighbouring coeﬃcients are represented by neighbouring powers of 2.
It means that the corresponding multiplications can be carried out by shifting
of the x-data.
More formally, the matrix C can be represented by a sum of n matrices C (k)
(k)
with integer coeﬃcients cj ,
n

n

(k)

cj ,

C (k) , cj =

C=

(4)

k=1

k=1

which fulﬁl the following conditions:
(k)

(i) Each non-zero coeﬃcient cj

(k)

has the form cj

= 2α , α ∈ Z0+ .
(k)

(ii) For each couple of neighbouring non-zero coeﬃcients cr
r < s of the matrix C (k) , it holds that | α − β |≤ 1.
(k)

(k)

= 2α , cs

= 2β ,

(k+1)

= 2β of matrices C (k) , C (k+1) ,
(iii) For each two coeﬃcients cp = 2α , cq
(k)
(k+1)
(k)
is
where cp is the last non-zero coeﬃcient from the set {cj }3j=−3 and cq
(k+1) 3
}j=−3 ,

the ﬁrst non-zero coeﬃcient from the set {cj

it holds that | α−β |≤ 1.

The decomposition (4) of the matrix C allows to represent the calculation of
CX by two circulant convolutions, [6]
n

n

3

3

(k)

cxi =

(k)

cj x(i−j)modN , cyi =
k=1 j=−3

cj y(i−j)modN ,

(5)

k=1 j=−3

i = 0, 1, ..., N . Each particular decomposition of C mentioned above represents a
concrete bit-level pipelined systolic implementation strategy of the calculation of
(5), in which the neighbouring coeﬃcients are represented by the neighbouring
powers of 2. This corresponds to shifting by just one position in the neighbouring

22

J. Glasa

cells of the corresponding array. The procedure how to obtain a particular systolic
array completely pipelined on a bit-level for the ﬁrst circulant convolution in (5)
can be summerized as follows (for more details see [15,6]).
The array consists of a sequence of n word-level systolic arrays which have a
structure similar to the array shown on Fig. 2. The array cells correspond to the
(k)
coeﬃcients cj , j = −3, −2, ..., 3, k = 1, 2, ..., n. The cells which correspond to
(k)

zero coeﬃcients cj are omitted modifying the numbers of used delay elements.
In such a word-level systolic array, each word-level cell can be realized as a linear
vertical systolic array of full adders (see Fig. 3a) separated by delay elements.
To achieve a systolic array completely pipelined on a bit-level, a horizontal
pipelining by delay elements is involved and the input data are scewed to provide
the proper data alignment (the corresponding changes of the numbers od delay
elements on z- and x-connections are also required, for more details see [15,6].
In the case of 8-bit input data, the intermediate results can be represented by
(8 + log 2 21 + 1 ) = 14-bit numbers. The whole systolic array consists then
of 2-dimensional regular matrix of full adders arranged into (at least) 12 columns

z
0
0
0
0
1
1
1
1

c

✲ z
z ✲ ✻
x✲ ✲ x
✻
c

x
0
0
1
1
0
0
1
1

c
0
1
0
1
0
1
0
1

z
0
1
1
0
1
0
0
1

x
0
0
1
1
0
0
1
1

c
0
0
0
1
0
1
1
1

column
1 2 3 4 5 6 7 8 9 10 11 12
coeﬃcient 1 2 -1 2 1 -2 -2 2 4 8 4 2
N DEz
11 313 1 121 1 3 3
N DEx
01 111 1 711 1 1 1

(a)

(b)
1

... 0
0
0
...
(14)
(14)
(14)
xN −1 xN −2 . . .
. . . xN
... 0
(2)
. . . xN

.
.

0
0
(2)
(2)
xN −1 xN −2

... 0
(1)
. . . xN

0
(1)
xN −1

0

3 ✻
✲1 ✻✁✕✲1 ✻❆✲3 ✻✁✕✲1 ✻❆✲
✲1 . ✲ ✻
✲
.
✲ ✁
.
❆❯ • ✁
❆❯ ✲1 . ✲ ✲
❆❯ . .✻ .✁✕ .✻
❆❯. .✻
✕ .✻
.✻ .✁
.✻
1 1 1
1 1 1
1
1
3 ✻
✲1 ✻✁✕✲1 ✻❆✲3 ✻✁✕✲1 ✻❆✲
✲1 . ✲ ✻
✲
.
✲ ✁
❆❯ • ✁
❯ ✲1 . ✲ ✲
1❆
.
❆ 1✻ 1✁✕1 ✻
❆ 1✻
1 ✻ 1✁
1✻
✕1 ✻
3 ✲
1 ✲ ✲
✲1 ✁✲1 ❆✲3 ✁✲1 ❆✲
.
0
(1)
❆❯ • ✁
❯ ✲1 . ✲ ✲
1❆
xN −2 ✲ ✁
❆❯ ✻ ✁✕ ✻
❆❯ ✻
✻ ✁✕ ✻
✻

0 0 0 0 0 0 0

coeﬃcient

1

2

−1

2

0

0

1

2

(c)
Fig. 3. A bit-level systolic array for the 7-point least-squares digital contour smoothing
by polynomials of the third degree: N DE∗ - number of delay elements on ∗ -connections

On Bit-Level Systolic Arrays

23

(corresponding to the non-zero coeﬃcients of the matrices C (k) ) and 14
rows (corresponding to the bits of diﬀerent signiﬁcance) which are connected
by delay elements. An example of such systolic arrays is shown on Fig. 3.
The directions of z- and x-connections are constant for the whole array; the
directions of x-connections are constant within one column and change from
column to column. The shifting of x-data by just one bit position upwards,
downwards, or horizontally, corresponds to the multiplication by 21 , 2−1 , or
20 , respectively. The multiplication by -1 is realized by converting the x-inputs
into their 2’s complements (inverters are denoted by small black circles, see Fig.
3b). The numbers of delay elements on x- and z-connections, constant within
one column, change from column to column. The number of delay elements
on c-connections is constant in the whole array. The clock period of such
completely pipelined system is controlled by the delay t of a single full adder.
Since the primitive operations performed are operations on the bit level, the
array is qualiﬁed as a bit-level systolic array.
Table 1.

j
cj
(1)
cj
(2)
cj

-3
-2
0
−21

-2
3
20
21

-1
6
21
22

0
7
−20
23

1
6
21
22

Table 2.

2
3
20
21

3
-2
−21
0

j
cj
(1)
cj
(2)
cj
(3)
cj

-3
-2
−21
0
0

-2
3
20
21
0

-1
6
21
22
0

0
7
20
21
22

1
6
21
22
0

2
3
20
21
0

3
-2
−21
0
0

The ﬁrst bit-level systolic array for the calculation of (1) has been suggested
in [15] (see Fig. 3). This array corresponds to the decomposition of C shown in
Table 1. In this case, it holds that n = 2 and the number of non-zero coeﬃcients
(k)
cj equals to 12 (see Table 1).
Other diﬀerent decompositions (4) have been used in [5] to achieve better
throughputs (an example of such a decomposition is shown in Table 2). For
these decompositions it holds that n = 1 and the corresponding bit-level systolic
arrays have higher throughputs. In comparison with the array from [15], they
have a little bit greather number of cells (one extra column of full adders), but in
the same time there is a notable decrease of numbers of delay elements between
array cells.
Finally, in [6] the complete analysis of all possible decompositions (4) of
C has been performed to achieve the maximal throughputs of corresponding
bit-level systolic arrays. In order to minimize also the required area of such
arrays, the arrays with the minimum number of delay elements used (and with
12x14 cells) have been chosen. The complete set of bit-level systolic arrays for
the calculation of (1) is shown on Fig. 4 [6]. The throughputs of these arrays
is (N+36)t, where t is the delay of a single full adder and N is the number of
points of digital contour.

24

J. Glasa

column 1 2 3 4 5 6 7 8 9 10 11 12
coeﬃcient -1 2 1 -2 -1 2 4 2 4 8 4 -2
N DEz 1 4 2 1 1 1 1 1 1 1 1 1
N DEx 0 1 1 1 3 1 2 2 2 1 2 1
coeﬃcient -1 2 4 2 1 -2 -1 2 4 8 4 -2
N DEz 1 1 2 3 2 1 1 1 1 1 1 1
N DEx 0 1 1 1 1 1 3 1 4 1 2 1
coeﬃcient -1 2 4 2 -1 2 1 -2 4 8 4 -2
N DEz 1 1 2 2 1 2 2 1 1 1 1 1
N DEx 0 1 1 1 1 1 1 1 6 1 2 1
coeﬃcient -1 -2 1 2 -1 2 4 2 4 8 4 -2
N DEz 1 5 1 1 1 1 1 1 1 1 1 1
N DEx 0 1 1 2 2 1 2 2 2 1 2 1
coeﬃcient -1 2 4 -2 1 2 -1 2 4 8 4 -2
N DEz 1 1 2 4 1 1 1 1 1 1 1 1
N DEx 0 1 1 1 1 2 2 1 4 1 2 1
coeﬃcient -1 2 4 2 -1 -2 1 2 4 8 4 -2
N DEz 1 1 2 2 1 3 1 1 1 1 1 1
N DEx 0 1 1 1 1 1 1 2 5 1 2 1
coeﬃcient -1 2 -1 2 1 -2 4 2 4 8 4 -2
N DEz 1 3 1 2 2 1 1 1 1 1 1 1
N DEx 0 1 1 1 1 1 4 2 2 1 2 1
coeﬃcient -1 2 -1 -2 -1 -2 4 8 4 8 4 -2
N DEz 1 1 3 1 3 1 1 1 1 1 1 1
N DEx 0 1 1 1 1 1 3 3 2 1 2 1
coeﬃcient -1 2 -1 -2 -1 -2 4 8 4 8 4 -2
N DEz 1 1 5 1 1 1 1 1 1 1 1 1
N DEx 0 1 1 1 3 1 1 3 2 1 2 1
coeﬃcient -1 2 -1 -2 1 2 4 2 4 8 4 -2
N DEz 1 3 1 3 1 1 1 1 1 1 1 1
N DEx 0 1 1 1 1 2 3 2 2 1 2 1
coeﬃcient -1 2 -1 -2 -1 -2 4 8 4 8 4 -2
N DEz 1 1 3 3 1 1 1 1 1 1 1 1
N DEx 0 1 1 1 1 3 1 3 2 1 2 1
Fig. 4. Bit-level systolic arrays for the 7-point least-squares digital contour
smoothing by polynomials of the third degree with the maximal throughputs in which
the minimal number of the structural elements are used

4

Conclusion

In this paper diﬀerent bit-level pipelined computation strategies for the realtime calculation of the constrained least-squares digital contour smoothing which
represent diﬀerent bit-level systolic arrays are summerized. They are based on

On Bit-Level Systolic Arrays

25

suitable decomposition of integer coeﬃcients of the circulant Toeplitz matrix,
by which the smoothing is represented. The suggested systolic arrays completely
pipelined on the bit-level have simple regular structure and achieve very high
throughputs. They can be implemented on single VLSI chips and can be used
for the purposes of real-time digital contour analysis.

References
1. Bennamoun, M., Mamic, G.: Object Recognition. Springer-Verlag, Berlin (2002)
2. Dougherty, E.R., Laplante, P.A.: Introduction to Real-Time Imaging. IEEE Press,
NY (2001)
3. Fisher, V., Drutarovsky, M., Lukac, R.: Implementation of 3D Adaptive LUM
Smoother in Reconﬁgurable Hardware. Lect. Notes in Comp. Sci., Vol. 2438.
Springer-Verlag, Berlin Heidelberg New York (2002) 720-729
4. Fu, K.S.: VLSI for Pattern Recognition and Image Processing. Springer-Verlag,
Berlin (1984)
5. Glasa, J.: Bit-Level Systolic Arrays for Digital Contour Smoothing, Lect. Notes in
Comp. Sci., Vol. 399. Springer-Verlag, Berlin Heidelberg New York (1989) 105-120
6. Glasa, J.: Circulant Toeplitz Matrices for Digital Contour Smoothing and Their
Parallel Implementation on Systolic Arrays (in Slovak). PhD. theses. Slovak Academy of Sciences, Bratislava (1993)
7. Gonzales, R.C., Woods, R.E.: Digital Image Processing. 2nd edn. Prentice-Hall,
Upper Saddle River, NJ (2002)
8. Jahne, B.: Digital Image Processing. 5th edn. Springer-Verlag, Berlin (2001)
9. Halada, L.: About Some Methods of Image Point Classiﬁcation. Proc. of the Int.
Conf. on Mechanical Engineering, Bratislava (1997) 26-29
10. Laplante, P.A., Stoyenko, A.D., Stoyenko, A.: Real-Time Imaging: Theory, Techniques and Applications. IEEE Press, NY (1996)
11. Lukac, R.: Binary LUM Smoothing. IEEE Signal Proc. Let. 9 (2002) 400-403
12. Lukac, R., Smolka, B., Plataniotis, K.N., Venetsanopoulos, A.N.: Entropy Vector Median Filter, Lect. Notes in Comp. Sci., Vol. 2653. Springer-Verlag, Berlin
Heidelberg New York (2003) 1117-1125
13. Nishitani, T., Ang, P.H., Catthoor, F.: VLSI Video/Image Signal Processing. Kluwer Academic Publishers, Boston (1993)
14. Petkov, N.: Systolic Parallel Processing. North Holland, Elsevier Science Publ.,
Amsterdam (1993)
15. Petkov, N., Sloboda, F.: A Bit-Level Systolic Array for Digital Contour Smoothing.
Parallel Computing 12 (1989) 301-313
16. Pitas, I.: Digital Image Processing: Algorithms and Applications. Wiley Interscience, NY (2000)
17. Pitas, I., Venetsanopoulos, A.N.: Non-Linear Digital Filters: Principles and Applications. Kluwer Academic Publishers, Boston (1990)
18. Pratt, W.K.: Digital Image Processing. 3rd edn. Wiley Interscience, NY (2001)
19. van der Heijden, F.: Image Based Measurement Systems: Object Recognition and
Parameter Estimation. 1st edn. John Wiley and Sons, NY (1995)

