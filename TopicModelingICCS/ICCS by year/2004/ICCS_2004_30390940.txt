A Cache Mechanism for Component-Based WebGIS
Yingwei Luo, Xiaolin Wang, and Zhuoqun Xu
Dept. of Computer Science and Technology, Peking University, Beijing, P.R.China, 100871
lyw@pku.edu.cn

Abstract. First, a component-based WebGIS system Geo-Union is introduced,
then the architecture and the web application mode of Geo-Union are discussed.
After that, a spatial cache framework is designed and adopted in Geo-Union to
improve its performance in network environment. There are three levels of spatial cache: spatial database cache, network spatial cache and spatial data proxy
server, and they play different roles in different situations to improve spatial
data access performance of Geo-Union.

1 Introduction
Component affords a new software construction mode, which is more efficient, agile
and powerful than existing technique of object-orientation or traditional
modularization. For example, developers could combine and reuse binary modules
that independently exploited by different individual or groups, which dramatically
simplify and expedite the development. Component is independent of language and
hardware, and can run on Web. Moreover, this technique provides much more flexibility for application development [1][2].
Component technology provides a practicable way for develop WebGIS. In fact,
there are too many WebGIS products based on component technology in market now,
such as MapObject from ESRI [3] and MapX from MapInfo [4]. Assigning functions
in reason and improving performance are two key issues for making WebGIS more
practicable. In this paper, we analyze the modeling technique of component-based
WebGIS, construct a multi-level WebGIS system Geo-Union, and explore its architecture, composition and functional partition of components. Also, a spatial cache
framework used to improve performance in Geo-Union is given.

2 Component-Based WebGIS: Geo-union
Geo-Union has a multi-level Client/Server architecture, which is implemented by
principle of ORDB and component techniques. Geo-Union provides an objectoriented, extensible GIS component library for further GIS application developers.
Geo-Union can be used in both stand-alone environment and network environment.

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 940–947, 2004.
© Springer-Verlag Berlin Heidelberg 2004

A Cache Mechanism for Component-Based WebGIS

941

2.1 The Architecture of Geo-union
Component model is a primary approach to deepen the functions of WebGIS. GeoUnion is divided into four layers: application layer, component layer, service layer and
storage layer, where service layer has different units to provide both client services
and server services. Figure1 shows the architecture [5][6]. Hierarchical spatial component object model can distribute GIS functions in network reasonably and
make the system reusable, as well as provide efficiency approach for further development and integration with other systems.
Geo-Union
Application Layer

Geo-Union
Client

Geo-Union
Component Layer
Network

Cache

Geo-Union
Service Layer

Geo-Union

Geo-Union
Server

Storage Layer

Fig. 1. Geo-Union Architecture

(1) Storage layer is responsible for storage and management of both spatial and
non-spatial data based on ORDB. The main problems solved at this layer are how to
represent and store spatial data, and how to maintain relationships among spatial data.
(2) Service layer is in charge of spatial data access and process, and includes two
parts: Geo-Union client provides data access and process services to component layer,
and Geo-Union server provides data access and process services to Geo-Union client
through interacting with storage layer. Geo-Union server can manage different spatial
data resources, and also can reply to different spatial data requests from different
clients. Geo-Union server provides the services of data access, spatial index, basic
spatial query, transaction process, data share and so on. Geo-Union client provides
different GIS tools and further development functions to component layer based on
the services from Geo-Union server. Cache is an important unit of service layer, which
is imported to reduce network load and improve response speed of the system. Using
Geo-Union client, we can develop a simulation server, which can reduce network load
and improve response speed through its cache (see section 3).
(3) Component layer provides a rich set of services (components) to develop domain-oriented GIS applications for further developers. Component layer provides
interface of GIS functions to users, but the implementation details are completed in
service layer. Component layer exists as a component library, and servers as a bridge
between users and service layer. Component layer provides function-explicit and reusable interface components for users according to the functions of service layer.
(4) The work in application layer is to exploit application systems for different special domains by assembling and integrating Geo-Union components. These application systems can be running both in desktop and network environment.

942

Y. Luo, X. Wang, and Z. Xu

2.2 The Web Application Mode of Geo-union
Actually, Geo-Union component layer is a set of ActiveX controls and correlative
programmable objects. ActiveX controls can be embedded into Web pages directly
and programmable objects also can be used through ASP, by means of which Web
browser and GIS combine with each other. Figure 2 shows the Web application mode.

Fig. 2. Web Application of Geo-Union

Users betake WebGIS applications through browser, and browser can attain geographical spatial services by direct mode or indirect mode.
Direct mode means browser use Geo-Union components directly at client side.
WebGIS applications are downloaded from Web server and execute at client side with
the help of Geo-Union components. Required spatial data is transferred from GeoUnion server to client, and users’ requests are processed at client side.
Indirect mode means users’ requests are submitted to Web server, and WebGIS applications are execute at Web server side with the help of Geo-Union components to
process the requests. Required spatial data is transferred from Geo-Union server to
Web server. Finally, a dynamic Web page that reflects the result of the requests is
returned to browser.
In both modes, Geo-Union component layer is the indispensable pivot in whole
system.

3 Spatial Cache Framework in Geo-union
Cache is an important technique for improving the performance of system. In GeoUnion, there are two aspects affecting the efficiency of data access: one is the access
to database, especially when storing spatial data in ORDB; the other is the transmission of spatial data in network. We take different spatial cache modes to solve these
two problems in Geo-Union.

3.1 Spatial Cache Framework
Figure 3 shows the spatial cache framework in Geo-Union, which includes three typical cache modes: database cache, network cache and data proxy server.

A Cache Mechanism for Component-Based WebGIS
GIS
Application

GIS
Application

File
Cache

943

File
Cache

Geo-Union
Client

Geo-Union
Client

Cache

Cache
Network spatial cache

File
Cache

File
Cache

Geo-Union
Server

Cache
for Spatial DB

Cache

Cache
Server

Network

ORDB
Server

Cache
Geo-Union
Client

Spatial
Database

Geo-Union
Client
Geo-Union
Client

File
Cache

Spatial Data Proxy Server

Data Proxy
Server

Network Spatial Cache

Cache

Geo-Union
Client

Geo-Union
Client
Geo-Union
Client

Fig. 3. Spatial Cache Framework

(1) Cache for spatial database
Geo-Union server is the bridge between Geo-Union client and ORDB, so cache for
spatial database is established and maintained by Geo-Union server. Cache is stored in
both local file and memory. Because Geo-Union server can manage different spatial
data resources, and also can reply different spatial data requests from different clients,
so cache for spatial database is a global cache.
It is definite that retrieving a group spatial entities from ORDB, especially some
neighboring entities in a layer, is much more inefficient than file-structure based GIS.
Aiming to this difference, ORDB – memory file cache mechanism is adopted in GeoUnion to speed up spatial entity access. Here memory file is opened in memory and
can be random accessed like memory page. If memory in spatial database server is
great enough, memory file cache mechanism is more effective than pure file system.
(2) Network spatial cache
The bandwidth of different users in network is different, but public users of Internet
always have low bandwidth. So when people use WebGIS applications, it is a lethal
delay when spatial data is transferred from Geo-Union server. In Geo-Union client, we
adopt a two-level spatial cache mode to relief transmission bottleneck of spatial data
in the network:
The first network cache is used to help a single client access remote data: building a
spatial cache in local place. This kind of cache is a partial cache, which is also a
popular method in today’s Web browser.
The second network cache is used to help many clients in a LAN access remote
data: building a common spatial cache for a LAN (building a cache server). Once a
local client in the LAN accessed some spatial data, other clients can reuse the spatial
data in cache server. Cache server is still a partial cache.
Cache server can realize massive spatial data cache by means of the shared resources, which will speed up the hit rate of cache greatly, so as to improve efficiency
of all local clients, and save resource of all local clients. Cache server solves the speed

944

Y. Luo, X. Wang, and Z. Xu

conflict between local disk data access and remote data access, and the speed conflict
between the high-speed LAN and WAN with narrow bandwidth.
(3) Spatial data proxy server
Because the distribution of users in Internet is not well proportioned, so different
Geo-Union servers are unbalanced. Some Geo-Union server and its communication
may overload. Aiming to this problem, we design spatial data proxy server for those
Geo-Union servers to improve performance.
Spatial data proxy server is an initiative cache server. Overloaded Geo-Union
server selects a suitable Geo-Union client and builds a spatial data proxy server there,
cache all or part of spatial data in spatial database, and response a special group of
users.
In Geo-Union, spatial data proxy server serves as special server in Internet to provide spatial data access services for public users. The structure and implementation of
spatial data proxy server is same as cache server, but they play a different role in GeoUnion.
Cache server is private of a LAN, and clients in the LAN have to get an authorization before accessing to cache server. Spatial data in cache server is changing with
different requests of clients in the LAN.
Spatial data proxy server is public to all clients. Spatial data proxy server may
serve as a peer of Geo-Union server. Spatial data proxy server can be built anywhere
in Internet if needed. If spatial data in a spatial database is unchanged for a long time,
spatial data proxy server can cache all spatial data of that spatial database.
Building spatial data proxy servers properly in Internet will make Geo-Union applications more scalable and effective.

3.2 Organization of Spatial Cache
In Geo-Union, spatial cache is organized as three levels: layer, slot and entity.
When creating a layer in spatial database, a GUID (Global Universal Identification)
is generated to identify the layer, which is named as layerID. When reading a layer
into cache, the system will allocate a separate space for the layer according to its
layerID. Whether a layer is valid in cache is determined by the layerVersion of the
layer both in cache and in spatial database.
Entities in a layer are always separated into different slots according to a certain
rule. When reading a layer into cache, we do not read the whole layer, but read some
slots of the layer. Slot brings two benefits: almost all spatial queries do not need a
whole layer but only a certain scope in the layer, so when the layer is massive, reading
relative slots can satisfy the requirement and will reduce network load greatly; less
data will exhaust less computing resource and storage resource. The rules to organize
slot are various. We can organize slots in a layer according to a correlativity of geographical location or a neighborhood geographical location. A correlativity of geographical location means we can put entities along a railway into a slot, and a neighborhood geographical location means we will put entities in a certain spatial scope
into a slot. Every entity in a layer belongs to a slot. When entities in any slots
changed, the slotVersion of the layer will change too.

A Cache Mechanism for Component-Based WebGIS

945

One update operation may modify only one or several entities in a layer, so layerVersion and slotVersion of the layer cannot reflect the latest modification of entities.
We set a versionNumber for every entity, and when an entity changes, its versionNumber changes too. The entityVersion of a layer is the max versionNumber in the
layer. When the versionNumber of a layer in cache is less than that in spatial database,
some entities in cache is invalid and those entities that have larger versionNumber
should be reloaded from spatial database into cache.

3.3 Refresh and Pre-load Spatial Cache
Refreshment of spatial cache can be done online or offline. Online refreshment means
updating spatial data in cache at the same time as updating spatial entities in a layer in
spatial database. Offline refreshment means updating invalid spatial data of a layer in
cache if their versions are invalid when accessing to them.
Information in spatial cache includes layerVersion, slotVersion, entityVersion and
the corresponding relations between all entities and slots of a layer. When accessing to
entities in a layer, we can determine whether spatial data in cache is valid or not
through comparing version information in cache and spatial database.
(1) If layerVersion of a layer in cache is smaller than that in spatial database, it
means that all entities of the layer are changed, and the whole layer should be refreshed in cache. Otherwise,
(2) If slotVersion of a layer in cache is smaller than that in spatial database, it
means that all slots of the layer are rearranged, and the corresponding relations between all entities and slots of the layer should be refreshed in cache. Otherwise,
(3) If entityVersion of a layer in cache is smaller than that in spatial database, it
means that some entities of the layer are changed, and those entities should be refreshed in cache.
(4) If above three conditions are all equal to those in spatial database, it means spatial data of a layer in cache is same as that in spatial database, and no refreshment is
required.
When accessing to spatial data, if we can pre-load some spatial data into cache, it
will make spatial cache more effective. But how to predict what kind of spatial data
will be accessed to?
There are two rules of accessing to memory: there is every probability of accessing
to just being accessed memory, and there is every probability of accessing to neighbors of just being accessed memory. There are same rules in accessing to spatial data:
there is every probability of accessing to just being accessed spatial data, and there is
every probability of accessing to neighbors of just being accessed spatial entities.
According to those rules, we can arrange slots by spatial scope, and a slot is an accessing unit of spatial data. When the network is idle, we can pre-load some neighbors
of spatial data in cache from spatial database.

946

Y. Luo, X. Wang, and Z. Xu

3.4 Spatial Cache Object
In Geo-Union, different spatial caches are all implemented by the six spatial cache
objects: CGuCacheMgr, CGuCache, CGuSlots, CGuSlot, CGuEntries and CGuOpList. Figure 4 illustrates the hierarchies of them.

Fig. 4. Hierarchies of Spatial Cache Objects

In every spatial cache, there is only one CGuCacheMgr object, which manages all
CGuCache objects. A layer in cache is represented by a CGuCache object. When
opening a layer, CGuCacheMgr object will create a CGuCache object or find an existing CGuCache object through its layerID.
CGuEntries object is used to manage a mapping list between an entityID and entity
data of a layer. From the mapping list, we can know the slotID where an entity belongs to (if slotID = 0, it means an entity is not existing; if slotID > 0, it means an
entity is in cache; and if slotID < 0, it means an entity is not in cache), and the address
pointer of the entity data if the entity is in cache.
CGuOpList object is used to record updating operation list of a layer at client side
that still doesn’t be committed to spatial database. When the updating operation list is
committed, it will also update the corresponding spatial data in cache. But when the
updating operation list is cancelled, no change will happen in cache.

4 Conclusion
The development trend of WebGIS is the management of massive distributed spatial
data and the construction of distributed component-based WebGIS. Component-based
WebGIS can be integrated into other development environments seamlessly, therefore
can not only decrease the complexity of applications and speed up development progress, but also descend the cost and increase the maintainability. Component-based
system makes it more convenient to construct domain-oriented application systems in
a distributed environment.
Geo-Union has finished a preliminary component-based model for distributed
WebGIS, and has got into use in many fields with sound effects. Although spatial
cache and other techniques are adopted in Geo-Union to improve its performance, a
lot of works still wait us ahead to make Geo-Union more practicable and effective:
(1) Dynamic load balancing policy. In Geo-Union, most works are completed at
client side, and server is only responsible for data access and simple data query.
Therefore it is not well balanced between client and server. Especially there will exists
a lot of transmission for massive data between client and server. Although, spatial
index and spatial cache techniques can improve the performance to a certain extent,

A Cache Mechanism for Component-Based WebGIS

947

we still want to take full advantage of the computing capability of GIS server, so as to
lighten load at client side and decrease the transmission of redundant data in network.
This needs a more reasonable component design for the system.
(2) System security. People should pay more and more attention to system security
in network when they enjoy shared resources. The security solution in Geo-Union is
only based on database system and simple user password mechanism. It is a challenge
to provide an effective security mechanism in component system to make users access
spatial information conveniently and safely. In addition, some other related problems
should be solved, such as controlling different access levels in distributed environment, encrypting important information during transmission, etc.
(3) System concurrency. WebGIS is open to millions of users. How to ensure the
correctness, validity, stability and scalability of Geo-Union to satisfy users’ requests is
another key problem for practicable WebGIS.
(4) System intelligence. Agent technique is a development trend and provides a
new model for in distributed software construction. Of course, agent technique will
bring a new thought for distributed GIS [8]. How to apply agent technique into distributed GIS, and provide interoperable services, collaborative services and intelligent
services with the help of spatial metadata, are most important and significant researches in distributed GIS.
Acknowledgement. This work is supported by the National Research Foundation for
the Doctoral Program of Higher Education of China under Grant No. 20020001015;
the National Grand Fundamental Research 973 Program of China under Grant
No.2002CB312000; the National Science Foundation of China under Grant
No.60073016 and No.60203002; the National High Technology Development 863
Program under Grant No. 2002AA135330, No. 2002AA134030 and No.
2001AA113151; the Beijing Science Foundation under Grant No.4012007.

References
1. Li Bin: A Component Perspective on Geographic Information Services, Cartography and
Geographic Information Science, 27(1): 75-86(2001).
2. Szyperski C: Component software: beyond object-oriented programming Reading, MA:
Addison-Wesley Press, 1998.
3. http://www.esri.com.
4. http://www.mapinfo.com.
5. Dept. of Computer Science and Technology: Peking University, Operation Guide for GeoUnion Enterprise (in Chinese), Technology Material, http://gis.pku.edu.cn.
6. Dept. of Computer Science and Technology: Peking University, Component Guide for GeoUnion Enterprise (in Chinese), Technology Material, http://gis.pku.edu.cn.
7. Li Muhua: Study on Component based WebGIS and Its implementation [Master Dissertation] (in Chinese), Beijing: Peking University, 2000.6.
8. http://map.sdsu.edu/geoagent/.

