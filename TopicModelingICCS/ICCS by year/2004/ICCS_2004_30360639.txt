A New Authorization Model for Workflow Management
System Using the RPI-RBAC Model *
SeungYong Lee1, YongMin Kim2, BongNam Noh2, and HyungHyo Lee3**
1

Dept. of Information Security, Chonnam National University, Gwangju, Korea 500-757
birch@athena.chonnam.ac.kr
2 Dept. of Computer Science, Chonnam National University, Gwangju, Korea 500-757
{ymkim, bongnam}@chonnam.ac.kr
3 Div. of Information and EC, Wonkwang University, Iksan, Korea 570–749
hlee@wonkwang.ac.kr

Abstract. The traditional Role Based Access Control (RBAC) model can be
applied to WorkFlow Management System (WFMS) well, but there are some
issues. Since the senior roles inherit all the permissions of the junior roles and
all the permissions are accumulated for the top senior role, applying the
traditional RBAC to WFMS does not meet the access control requirements:
least privilege principle, Separation of Duty (SoD). To tackle these, we propose
applying Restricted Permission Inheritance RBAC to WFMS authorization and
evaluate the advantages and benefits of them in design time and runtime.

1 Introduction
WorkFlow Management System (WFMS) requires various policies involving access
control since it defines the business processes and supports the enforcement of
process control over processes. In this paper, when traditional Role Based Access
Control (RBAC) is applied to WFMS to enforce an authorization [1], we investigate
the problems that occur from inheritance of all permissions to senior roles. Then we
evaluate the usefulness and benefits of employing the RPI-RBAC for the enforcement
of access control polices in WFMS.

2 Related Work
YongHoon et al. introduced the concept of the sub-role to restrict the complete
inheritance of junior permissions to senior roles [2]. In RBAC models, a senior role
inherits the permissions of all its junior roles. One of the main security principles of
RBAC models is to enable compliance with the least privilege principle. This
unconditional permission inheritance can cause the violation of this principle. In order

*

This paper was supported by University IT Research Center Project and partially by
Wonkwang University in 2001
** Correspondent author
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 639–643, 2004.
© Springer-Verlag Berlin Heidelberg 2004

640

S. Lee et al.

to address this drawback, they divide a role into a number of sub-roles based upon the
characteristics of job functions and the degree of inheritance.
r1
CC : Corporate Common

r14

r1

r13

r12

r11

DC : Department Common
RI : Restricted Inheritance

PR

RI

(a) role

DC

PR : PRivate

CC

(b) sub-roles

Fig. 1. Sub-role concept for corporate environment

Fig. 1. describes their proposed sub-role concept compared with the original role
one in the traditional RBAC model.

3 Applying the RPI-RBAC Model to WFMS
In this section we mention a workflow scenario in a bank as an example the need for
permission restrictions. We will use this scenario to illustrate how the RPI-RBAC
model can be applied to this business process well.
Assume that a customer applies for a large loan from a bank. The deposit
department uses the customer’s credit information which it received from the credit
review department to determine the amount of the money to loan to the customer, and
a deposit clerk gives the money to the customer while a senior employee checks that
the transfer was made successfully.
Deposit Dept.

Credit Review Dept.

loan_
request_
receive
transfer_
check

credit_
request

money_
transfer

loan_
evaluate

credit_
request_
receive

credit_
evaluate

credit_
inform

loan_
approve

Fig. 2. Business process of loan in a bank

Fig. 2. shows the flow of tasks in the business process related to our scenario.
There are two departments: the deposit and credit review departments in the bank
scenario. Some tasks like loan_request_receive, credit_request and transfer_money
are processed by the members of the deposit department whereas some tasks like
credit_request_receive and credit_evaluae are executed by the members of the credit
department. These business rules ensure that the Separation of Duty (SoD)
requirement is met and that semantic integrity is maintained. In the rules, there are
several constraints like who should do something, who can do something, who should
not, etc.
In the case of employing traditional RBAC to WFMS, in which the senior roles
inherit all the permissions of their junior roles, since the general manager has all the

A New Authorization Model for Workflow Management System

641

permissions of a manager, a supervisor and each departmental clerk, he or she has the
permissions needed to execute all the tasks of all junior roles. This runs counter to the
principle of least privilege and can cause many problems like abuse of rights and
fraud. So, there is a need to restrict permission inheritance to satisfy the least
privilege principle and prohibit an overuse of rights. Since the RPI-RBAC model
limits the inheritance of permissions from a junior’s rights, we can forbid the
individual from committing frauds and improperly using his or her rights by applying
RPI-RBAC to WFMS authorization.
We can consider the task’s functionality, responsibility and interoperability to
categorize them. These tasks can be categorized to four categories: Private User Task,
Department Task, Restricted Task and User Task. We can assign each task to the
proper sub-roles related to the jobs or tasks in design time. Because the permissions
assigned to private user tasks should not be inherited by senior roles, if private user
tasks are assigned to the private sub-role, we can prevent senior roles from executing
the junior’s own tasks. Fig. 3. shows the assignment of tasks to sub-roles.
loan_
approve
General
Manager
Deposit Dept.
loan_
evaluate

Deposit
Manager

transfer_
check
Deposit
Supervisor

Deposit
Clerk

loan_
request_
receipt
PR

RI

DC

CC

credit_
request
money_
transfer

Fig. 3. Detailed assignment of tasks to sub-role

In this part, we examine the application of RPI-RBAC to WFMS authorization
from the perspective of runtime and SoD. If it is possible that SoD will be violated by
a task in a business process, WFMS prevents the task from being performed or voids
the workflow instance by checking the associated constraints.
Assume that there is a business rules that no single individual should be allowed to
process two tasks: money_transfer and transfer_check. If someone who executed a
money_transfer can also execute a transfer_check, it is possible that he or she could
commit fraud. This does not satisfy the requirement of SoD in the business processes.
In the case of applying traditional RBAC to WFMS authorization, the supervisor
and other senior users have permission to execute both of the conflicting tasks. To
satisfy the business rules described for the integrity, it is necessary to prevent a single
user from executing both tasks. To cope with this requirement in traditional RBAC,
some type of constraints must be defined and enforced during runtime. Bertino,
Ferrari and Atluri (BFA) have introduced authorization constraints into WFMS
authorization to deter fraud [3]. Sandhu et al. also presented a Transaction Control

642

S. Lee et al.

Expression (TCE) for dynamic SoD [4]. In Table 1, we can use both BFA and TCE to
resolve a SoD requirement. These authorization constraints require that any single
user should not execute both money_transfer and transfer_check tasks.
Table 1. Constraints to tasks for SoD with BFA and TCE
Constraint by BFA
cannot_dou( transfer_check, Ui )

← execute ( U , money_transfer, k )
u

i

Constraint by TCE
money_transfer • deposit_clerk
transfer_check • deposit_supervisor

From the perspective of WFMS authorization, applying the traditional RBAC
model causes extra overhead on WFMS, since at runtime the WFMS must monitor
the tasks and check the predefined constraints for the integrity during workflow
execution time. This inefficiency is caused by the automatic permission inheritance in
traditional RBAC and the measures that must be taken to circumvent it. If the RPIRBAC model is applied to WFMS authorization, the administrator does not need to
set or configure constraints for the integrity and WFMS do not need to check them for
authorization since the RPI-RBAC model itself covers the authorization problems
associated with these permissions. So, applying RPI-RBAC to WFMS is more
efficient than applying traditional RBAC. However, the former is not as flexible as
the later because it strictly limits the inheritance of permissions.

4 Conclusions
We have shown that RPI-RBAC satisfies the least privilege principle and separation
of duty which are requirement needed for access control in WFMS, and that it works
well when applied to WFMS authorization as an access control policy.
If traditional RBAC is applied to WFMS, some integrity constraints to WFMS
must be defined and checked during workflow runtime to guarantee the integrity of
business processes. But if RPI-RBAC is applied to WFMS, each role has the least
amount of permissions and it does not have permission to other private ones. So, it
can cut down on the possibility of rights abuse and fraud in advance and thus reduce
the overhead of performing the constraints checks in runtime and satisfy SoD.

References
1. David F. Ferraiolo, D. Richard Kuhn and Ramaswamy Chandramouli, “Role-Based Access
Control,” Artech House Publishers, ISBN 1-58053-370-1

A New Authorization Model for Workflow Management System

643

2. YongHoon Yi, Myongjae Kim, etc., "Applying RBAC Providing Restricted Permission
Inheritance to a Corporate Web Environment," APWeb Conference, Lecture Notes in
Computer Science(LNCS) 2642, Sep. 2003, pp. 287-292.
3. Elisa Bertino, Elena Ferrari and Vijay Atluri, “The Specification and Enforcement of
Authorization Constraints in Workflow Management Systems,” ACM Transactions on
Information and System Security, Vol. 2, No. 1, Feb. 1999, pp. 65-104.
4. Savith Kandala, Ravi Sandhu, “Extending the BFA Workflow Authorization Model to
Express Weighted Voting,” Database Security XIII: Status and Prospects, Kluwer 2000.

