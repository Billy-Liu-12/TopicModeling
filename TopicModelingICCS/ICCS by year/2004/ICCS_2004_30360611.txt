On Algorithm for All-Pairs Most Reliable Quickest
Paths*
1

Young-Cheol Bang1 , Inki Hong , and Hyunseung Choo
1

2

2,**

Department of Computer Engineering, Korea Polytechnic University
Kyunggi-Do, Korea

{ybang, isslhong}@kpu.ac.kr
School of Information and Communications Engineering, Sungkyunkwan University
Suwon, Kyunggi-Do, Korea
choo@ece.skku.ac.kr

Abstract. The reliability problem of the quickest path deals with the transmission of a message of size σ from a source to a destination with both the minimum end-to-end delay and the reliability of the path over a network with
bandwidth, delay, and probability of fault free on the links. For any value of
message size σ , we present algorithm to compute all-pairs most-reliable quick2
est paths each with time complexity O(n m), where n and m are the number of
nodes and the number of arcs or links in the network, respectively.

1 Introduction
We consider point-to-point computer networks represented by a graph G = (V, A)
with n nodes and m arcs or links. Any node can be reached from any other node in
this network, and two nodes are connected by at most single directed link in each
direction. Each directed link l = (i, j) ∈ A has a bandwidth B(l) ≥ 0, delay D(l) ≥ 0,
and probability of fault free 0 ≤ π (l) ≤ 1. A message of σ units can be sent along
the link l in T(l) σ / B(l) + D(l) time with reliability π (l) as in [4].
Consider a simple path P from i0 to ik given by (i0, i1), (i1, i2), …, (ik – 1, ik), where (ij,
ij + 1) ∈ A, for j = 0, 1, 2, …, (k - 1), and all i0, i1, …, ik are distinct. Subsequently, a
simple path is referred to simply as a path. The delay of this path P, denoted by D[P],
k −1

is given by Σ D (l j ) , where lj = (ij, ij + 1). The bandwidth of this path is defined as
j =0

k −1

k −1

j =0

j =0

B(P) = min B (l j ) . The reliability of P, denoted by R(P), is Π π (i j , i j −1 ) . The endto-end delay of the path P in transmitting a message of size σ is T(P) = σ / B(P) +
D[P] with reliability R(P). Let b1 < b2 < … < br and Gb denote the distinct values of
* This paper was supported in part by Brain Korea 21 and University ITRC project.
** Dr. Choo is the corresponding author.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 611–614, 2004.
© Springer-Verlag Berlin Heidelberg 2004

612

Y.-C. Bang, I. Hong, and H. Choo

B(l), l ∈ E and the sub-network with all edges of G whose bandwidth is greater than or
equal to b, respectively.
The path P from s to d is the most-reliable (MR) if R(P) is the maximum among all
paths from s to d. The path P is the quickest for message size σ if T(P) is the minimum among all paths from s to d. The path P is the quickest most-reliable (QMR) if it
is the quickest for σ among all MR paths from s to d. The P is the most-reliable
quickest (MRQ) if it has highest reliability among all quickest paths from s to d for
σ.
In this paper, we consider the all-pairs versions of computing MRQ paths with respect to any size of σ . The all-pairs version of the classical quickest path problem
2
was solved in [2, 3] with time complexity of O(n m). By applying the algorithms of
Xue [4] for each s ∈ V, we can compute MRQ paths between all pairs s and d with
2
2
2
time complexity O(nrm + rn log n); since r ≤ m, we have the complexity O(nm + n m
2
log n). In this paper, we present O(n m) time algorithm to compute all-pairs MRQ
paths, which match the best-known complexity for the all-pairs classical quickest path
problem.
The rest of paper is organized as follows. In section 2, we present details of algorithm to compute the MRQ paths for all pairs of nodes in a given network. Section 3
summarizes our researches.

2 All-Pairs Most-Reliable Quickest Paths for Any Size of Message
To compute an MRQ path from s to d, we have to “account” for all quickest paths
from s to d. Note that all-pairs quickest path algorithm (AQP) [3] returns a quickest
path from s to d, which may not be a MRQ path, and hence a simple condition similar
to line 8 of all-pairs QMR algorithm (AQMR) [1] does not work. In particular, it is
not sufficient to check if an edge l is on a quickest path P1 with bandwidth B(l); in
fact, l can be on a quickest path with any b = B(P1) ≤ B(l). In our algorithm, we compute the largest of such b and place l at an appropriate step in the computation, which
is an iterative process similar to AQMR. Let t[u, v] represent the end-to-end delay of
quickest path from u to v for σ .
To compute MRQ paths, we first compute all-pairs quickest paths in G using AQP
with the following enhancement. For each bandwidth value bk and pair u, v ∈ V, we
store a matrix [ d bk [u, v] ] where d bk [u, v] is the delay of the shortest path from u to v

in Gbk . These matrices can be computed for b = br, br – 1, …, b1 during the execution
of AQP. For each ( σ i , σ i + 1 ), 1 ≤ i ≤ r – 1, we define
Θ(σ i , σ i + 1 , u , v) = {bk | B(Pk) such that Pk is the quickest path for any σ ∈(σ i , σ i + 1 ) }
if such bk exists, and ∅ otherwise. In this case, if σ i ≠ σ i + 1 then σ ∈(σ i , σ i + 1 ) represents σ i < σ < σ i + 1 , otherwise ( σ i , σ i + 1 ) equals to the intersection point σ i , i +1 .

On Algorithm for All-Pairs Most Reliable Quickest Paths

613

Lemma 1. (i) Θ(σ i , σ i + 1 , u , v) ≠ ∅ if and only if there is a shortest path from u to v in

Gb for some b ∈ Θ(σ i , σ i + 1 , u , v) .
(ii) ∃ the quickest path from u to v for b ∈ Θ(σ i , σ i + 1 , u , v) if and only if ∃ bk such
that bk ∈ Θ(σ i , σ i + 1 , u , v)
Lemma 2. All Θ(σ i , σ i + 1 , u , v) can be computed with the time complexity of O(n m)
2

for all u, v ∈ E.
In AMRQ, we organize the sets Θ(σ i , σ i + 1 , u , v) ’s as stacks with bandwidths decreasing top to bottom. Let Ω [u, v] denote the queue to store Θ s in order of which
each Θ is computed. We use AQP [3] to compute [db[u, v]] in line 1. In line 2-4, we
2
compute all Θ(σ i , σ i + 1 , u , v) ’s for all pairs u, v ∈ V with time complexity O(n m).
2

There are O(n m) iterations in the rest of the algorithm, where links are considered in
non-increasing order of bandwidth with which they participate in quickest paths (if at
all). In each iteration, we consider the current link bandwidth B(l), and pair u, v ∈ V.
Lines 12-17 compute the maximum bandwidth with which the link l is used in a
quickest path from u to v. The reliability of new path via l from u to v is then computed and the existing value and MRQ path are replaced appropriately in lines 18-20.
Consider that as a result of while loop in lines 12-17, the retrieved bandwidth b[u, v] is
strictly smaller than B(l) if b[u, v] corresponds to link l1, no more pop operations
on Θ(σ i , σ i + 1 , u , v) will performed until all links with bandwidths in the range [B(l1),
B(l)] have been retrieved from the heap and processed. For each pair u, v ∈ V, this
algorithm can be viewed in terms of alternating subsequences of top operations on
arc_heap, dequeue operations on queue Ω [u, v], and pop operations on
stack Θ(σ i , σ i + 1 , u , v) with no backtracking involved. In actual execution, however, all
these subsequences corresponding to various u – v pairs are intermingled among
themselves as well as subsequences of top operations.
Algorithm AMRQ (G, D, B, π )
/* MRQP(u, v, σ i , σ j ) maintains MRQ path from u to v for ( σ i , σ j ) */

/* P[u, v] maintains a currently selected MRQ path from u to v */
1. compute [db[u, v]] using AQP (G, B, D)
2. for each pair u, v ∈ V do
3.
for each interval of σ do
4.
compute stack Θ(u, v, σ i , σ j ) and store to Ω [u, v] with i ≤ j
5.
6.
7.
8.

for each pair u, v ∈ V do
Θ(u, v, σ i , σ j ) = dequeue( Ω [u, v])

b[u, v] = pop( Θ(u, v, σ i , σ j ) );
arc_heap = top_heavy heap of all edges of G according to the bandwidth

614

Y.-C. Bang, I. Hong, and H. Choo

9. while not arc_heap ≠ ∅ do
10.
(i, j) = top(arc_heap); let l = (i, j);
11.
for each pair u, v ∈ V do
12.
while (B(l) < b[u, v]) do
13.
if ( Θ(u, v, σ i , σ j ) ≠ ∅ ) then
b[u, v] = pop( Θ(u, v, σ i , σ j ) );

14.
15.
16.

else

b[u, v] = pop( Θ(u, v, σ i , σ j ) );

17.
18.

Θ(u, v, σ i , σ j ) = dequeue( Ω [u, v]) if Ω [u, v] ≠ ∅

if (B(l) ≥ b[u, v]) and
( d b[u , v ] [u, v] = d b[ u , v ] [u , i ] + D(i, j) + d b[u , v ] [ j , v] ) then
Φ[u , v] ← min{ Φ[u , v] , Φ[u , i ] + π ' (i, j) + Φ[ j , v] };

19.

/* update routing table for MRQ path from u to v for [ σ i , σ j ] */
20.

MRQ_RT(u, v, σ i , σ j ) = P[u, i] + l(i, j) + P[j, v] if any

Theorem 1. The all-pairs most reliable quickest paths for any size of message can be
2
computed by algorithm AMRQ with time complexity O(n m) and space complexity
2
O(n m).

3 Conclusion
We presented algorithms to compute most-reliable quickest and quickest mostreliable paths between all pairs of nodes in a network. These algorithms match the
best known computational complexity for the classical all-pairs quickest path problem, namely without the reliability considerations.

References
1. Y. C. Bang, H. Choo, and Y. Mun, Reliability Problem on All Pairs Quickest Paths,
ICCS2003, LNCS 2660, pp. 518-523, 2003
2. G. H. Chen and Y. C. Hung, On the quickest path problem, Information Processing Letters,
vol 46, pp. 125-128, 1993
3. D. T. Lee and E. Papadopoulou, The all-pairs quickest path problem, Information Processing Letters, vol. 45, pp. 261-267, 1993
4. G. Xue, End-to-end data paths: Quickest or most reliable?, IEEE Communications Letters,
vol. 2, no. 6, pp. 156-158, 1998

