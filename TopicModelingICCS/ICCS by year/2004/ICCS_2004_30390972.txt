An Extended Locking Method for Geographical
Database with Spatial Rules
Changxiu Cheng1, Paiwei Shen1, Mingbo Zhang1,2, and Feng Lu1
1

State Key Laboratory of Resources and Environmental Information System,
Institute of Geographical Sciences and Natural Resources Research,
Chinese Academy of Sciences, Beijing 100101, P.R.China
2
Shan Dong University of Technology, Zi Bo 255000,P.R China

Abstract. Locking and unlocking operations are crucial to keep data
consistency for concurrency control. Compared with traditional pessimistic
locking method, the neutral concurrency control scheme can highly improve the
concurrency of spatial database management systems. However, in
consideration of spatial rules, dead locks brought about by waiting mutually for
releasing required resources may frequently arise. To avoid such dead locks,
referring to the theories of session management in operation system, we set
forward an extended locking method for geographical database with spatial
rules to implement the collaboration and competition between concurrent
locking and unlocking transactions. The method avoids the expenditure of
detecting dead locks and rolling back, and the system becomes more efficient.
The test shows the extended locking technique makes the spatial database
management system more ordered and efficient in a multi-users environment
only with some time consumption of managing logical codes.

1 Introduction
HYPERLINKA heterogeneous, distributed, and loose-coupled working environment
is evolving. The cooperative GIS will be popular in the future. As a key technology to
realize cooperative GIS, concurrency control is also emerging, i.e. how to ensure that
geographical database operations from different users do not interfere with each other
(Hanssen 2003).
The early GIS were based on CAD systems where the map base was held as a
collection of CAD drawings. The methods of managing such a system where multiple
users wish to access and update the map base are based on the manual drawing office
approach. Indeed there is a market for Document Management systems(Newell
2003).However, as GIS shift to Relation Database Management Systems form
Document Management systems, the concurrency control scheme of GIS has been
changed. Most distributed database employ either pessimistic or optimistic
concurrency control scheme（Lee and Yang et al 2000）. The former often results in
the high communication delay, because the spatial data queried by clients would be
hold for a long time. Generally, the latter is employed in distributed GIS application,
i.e. version management. The version management in GIS has been put forward for

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 972–980, 2004.
© Springer-Verlag Berlin Heidelberg 2004

An Extended Locking Method for Geographical Database with Spatial Rules

973

decades (Easterfield and Newell et al 1990). Now, it has been widely used, i.e.
ArcSDE (Gaskill and Brooks 2000), Oracle Spatial (Arun 2001). But it makes the
system complex and perplexes users with undoing and redoing of previous actions on
user interface when conflict occurs（Lee and Yang et al 2000, Batty 2002）.In
addition, the version management is not reasonable to distribute interactive GIS
applications. In this application, the changes are not so complex, the changed entities
are not so many, but the results are required to submit in a few minutes. WAVE (Lea
and Matsuda 1997) adopts a simple locking mechanism for this interactive
application. A user locks objects that would be manipulated and updates them. The
updates are propagated to the other users while the lock is released. It was named
Neutral Concurrency Control Scheme (NCCS) in this paper.
However, only locking these manipulated spatial entities is not enough considering
spatial rule-based processing (Michael 2001, Mayal and Hall 2002, Sha and Bian
2002)in NCCS. So, not only these manipulated objects but also their neighboring
objects should be locked in geographical database with spatial rules. Then it will be
frequent to encounter dead locks resulted by waiting for releasing required resources
by each other. To avoid the emergence of such dead locks, we propose an extended
locking method for spatial rule-based processing. It makes the spatial database
management system more ordered and efficient in a multi-users environment only
with some time consumption of managing logical codes.
The remaining parts of this paper are organized as follows. Section 2 describes the
neutral concurrency control scheme and introduces why the dead lock are frequently
encountered in spatial rule-based geographical database. Section 3 analyzes the reason
why dead locks occur, and presents an extended locking method to avoid the
emergence of such dead locks. The implementation of the extended locking method in
Oracle Spatial is then introduced in section 4. Section 5 bring forward two tests,
which show that the extended locking method makes the spatial database management
system more ordered and efficient in a multi-users environment with just some time
consumption of managing logical codes. Finally, in Section 6 of this paper, summary
as well as forward are made as conclusion.

2 Neutral Concurrency Control Scheme and Deadlocks
In pessimistic concurrency control scheme, there are two types of locks. One is share
lock (lock-S); another is exclusive lock (lock-X). Share lock specifies that others may
read while you read, but writing objects in the storage group is prevented. Several
users can have the share lock at the same time. Exclusive lock prevents other users
from getting either of the two kinds of locks. In NCCS, there are also share lock and
exclusive lock. But there is something different in compatibility matrix. The share
lock allows that one and only one user should write objects while you read. In order to
keep consistency, the writing results are propagated to the other users when the
exclusive lock is released.
However, only locking these manipulated spatial entities is not enough considering
spatial rule-based processing in NCCS. If fig 1 conforms to share edit rule, the shape
of entity C, entity D and entity G will be changed on moving the P1P2 of entity A.

974

C. Cheng et al.

Therefore, in spatial rule-based geographical database, not only these manipulated
objects but also their neighboring objects should be locked. Because the locking
granularity is not atomic, a deadlock will occur when two or more users are waiting
for data unlocked by each other. If transaction 1 and transaction 2 are executed
according to the schedule shown in fig 2, transaction 1 will be choked and wait for
transaction 2 to unlock the entity D, and transaction 2 will also be choked and wait for
transaction 1 to unlock the entity C at the time point of T5. As a result, the deadlock
occurs.
H

I
G

F

B

C
P1

P2
A

D

J

E

Fig. 1. Map view

T0
T1
T2
T3
T4
T5
…
T (n-1)
Tn

Transaction 1：
Edit A Entity
Begin
Lock-X C
Lock-X G
Lock-X F
Lock-X E
Lock-X D
…
Edit
Commit

Transaction 2 ：
Edit B Entity

Begin
Lock-X J
Lock-X D
Lock-X C
…
Edit
Commit

Fig. 2. The executive schedule

In geographical database with spatial rule-based, deadlocks occur most often.
Because there are many kinds of spatial rule-based in GIS, and some rules maybe lock
many entities. For example, when a user is editing the “Changjiang River” of china,
he will hold the many spatial data that cover large areas, and then the probability of
the occurrence of deadlocks would be high. Some time the deadlocks are no less than
the chain reaction specified in the multi-user environment.

3 The Extended Locking Method
To avoid the emergence of such dead locks, referring to the theories of session
management in operation system, we set forward an extended locking method to
implement the collaboration and competition relationships between locking and
unlocking transactions.

3.1 The Collaboration between Locking and Unlocking Transactions
Collaboration is the style or approach used by some processes as they work toward a
common goal. Locking, updating, and unlocking are three basic steps in any updating
transaction. In the updating transaction, the systems must make them work according
to some rules. They are as follows: Rule 1: Firstly lock the data that would be
updated. Then update them. At last unlock them. Rule 2: the lock operation must be
atomic. Ensures that either all lock operations of a transaction accomplish
successfully or all of its effects fail. Rule 3: the lock operations have to wait until
others unlock the Data. So, it is a type of collaboration.

An Extended Locking Method for Geographical Database with Spatial Rules

975

The data synchronization is an effective instrument to implement the collaboration.
We can set an IsXLocked signal to any spatial entity, which is used for
communication. The entity is not locked by transaction, if its IsXLocked equals 0.
And it is locked by transaction, if its IsXLocked equals 1. According to the rules of
updating transaction, the locking and unlocking logic can be presented as follows
shown in fig 3. The UpdateTransaction in fig3 could avoid some deadlocks.
SpatialXLock (SE)
Begin
If (sum(IsXLocked of SE and its
neighbor)=0) Then
XX_UpdateTransaction

Set IsXLocked of SE and its

Begin

neighbor Equal 1;

SpatialXLock (SE);

Else

…

Add to waiting queue;

Edit;

Sleep;

Save;

End if

…

End

Commit;

SpatialXUnLock (SE)

SpatialXUnLock(SE);

Begin

End

Set IsXLocked of SE and its
neighbor Equal 0;
Remove SpatialXLock from
waiting queue;
Wake up SpatialXLock;
End

Fig. 3. Logic of locking and unlocking

3.2 The Competition between Locking and Unlocking Transactions
Accessing the shared resources causes the competition between locking and
unlocking transactions. In the multi-user environment, many locking transactions
exist at the same time. These transactions maybe request the same resource, change
the same data, and keep the change for a period. Then the shared data may be
inconsistent, and deadlocks will be resulted from. For example, as shown in fig 2, if
transaction 1 executes the if clause in fig 3 at time point T0 and transaction 2 executes
the if clause at time point T2, the IsXLocked value of the entity C will still be 0 at
time point T2, because its value will not change until the transaction is committed. So,
transaction 2 will not be chocked, and the deadlocks still occurred at time point T5.
In order to keep consistency of share variables, the locking and unlocking
transactions must be mutex. We can define the code section that access IsXLocked as
critical section (CS) that only allows one transaction to enter this code section at the
same time. The semaphore, SemWait and SemSignal operations can implement the

976

C. Cheng et al.

concept of CS. A semaphore called Mutex, is integer variables that, apart from
initialization, can be accessed only through atomic SemWait and SemSignal
operations. If insert the SemWait operations after Begin clause of locking and
unlocking transaction, and insert the SemSignal operations after Begin clause of them,
the locking and unlocking transactions will be mutually exclusive.

4 The Implementation of Extended Locking Method
There are two troublesome in the implementation of extended locking method in
Oracle Spatial. One is the implementation of critical section; another is transaction
queue mechanism. There isn’t the concept of critical section in PL/SQL of Oracle, so
it must be simulated with other techniques. And the advanced queue is very complex,
so coding it is difficult.
In Oracle, the exclusive table lock is the most restrictive mode of table lock. Only
one transaction can obtain an exclusive table lock for a table.So, if we create
Table_mutex table as semaphore, then the SemWait operation （EnterCritical
Section）can be programmed as follows:
Begin
LOCK TABLE Table_Mutex IN exclusive MODE;
Lock

--Exclusive

End
However, it is needless to program the SemSignal operation, because it operation
has been included in commit clause at the end of transaction. The commit will release
the exclusively hold of Table_Mutex, and wake up some waiting transactions. So, it is
obvious that the queue mechanisms has worked in the lock table and commit clause.
Given the geometry column was name ‘shape’, we can add IsXLocked column as
signal to express the entities whether locked or unlocked. Then, the locking
transaction can be programmed as followed:
(SpatialEntityID in Number, TableName in Char)
RETURN Integer IS
BEGIN
EnterCriticalSection;
…

-- Enter critical section
--The define of variables

SELECT SUM (t1.IsXLocked) INTO LockedCount FROM
TableName t1, TableName t2 WHERE t1.oid=SpatialEntityID
AND SDO_RELATE (t1.Shape, t2.Shape, 'MASK= ANYINTERACT
QUERYTYPE=WINDOW')='TRUE';
IF LockedCount =0 THEN

--These entities are available

UPDATE TableName SET IsXLocked =1 WHERE oid IN (SELECT
t1.oid FROM TableName t1, TableName t2 WHERE
t1.oid=SpatialEntityID AND SDO_RELATE (t1.Shape,

An Extended Locking Method for Geographical Database with Spatial Rules

977

t2.Shape, 'MASK=ANYINTERACT
QUERYTYPE=WINDOW')='TRUE');
COMMIT;

--Commit, then exit critical section

RETURN 1;
ELSE

--Return success
--Some entities aren’t available

COMMIT;

--Commit, then exit critical section

RETURN 0;

--Return fail

END IF;
END Spatial_XLock;
The produce is not optimum, because the implicit spatial query of anyinteract is
executed twice. We can define some arrays in which the results of the spatial query
are stored, which will be reusable. Additionally, the explicit query also can make the
produce more effective than implicit query. The unlocking transaction is simpler than
the locking transaction; details of which will not be presented here in this paper.

5 Tests and Performance Analysis
The test data is the chinese county boundary scale at 1:4,000,000, in which there are
2525 polygon. The database management systems is Oracle 9i. The database server is
Dell4600.
Test1:Set up only one session (single user environment), use the old method
described in section 3 to lock and unlock these polygons one by one, and record the
elapsed time. Repeat it eight times, and calculate the average elapsed time. Then, use
the extended locking method to do the same test.
The test results are shown in Table 1 in the single user enviroment. It is easily
calculated that the average elapsed time of locking and unlocking one entity is
0.0209s (52.75/2525) to the old method, and 0.0216s（54.63/2525）to the new
method. The 0.007s (0.0216-0.0209) excrescent time of locking and unlocking one
spatial entity is few in relative to the elapsed time of its editing produce, which may
be lasted for some minutes.
Table 1. The elapsed time using these two method in single user enviroment (Unit:s)

Test times
1
2

3
4
5
6
7
8
Average

The elapsed time using The elapsed time using
the old method
the new method
53
54
52
57
53
54
53
55
54
55
52
55
52
53
53
54
52.75
54.63

978

C. Cheng et al.

Test 2: Set up four sessions (multi-user environment), almost simultaneously use
the old method to lock and unlock these polygons one by one, and record their
elapsed time. Repeat it four times, and calculate the average elapsed time. Then, use
the new method to do the same test.
The test results of the old method are shown in Table 2 in the single user
enviroment. ‘∞’ stands for the session was enmeshed into deadlocks after one time
point. The result show that only session 1 which was start up more ealy would well
worked, the others session would enmeshed into deadlocks.
Table 2. The elapsed time using the old method in multi-user enviroment (Unit:s)

Test times
1
2

3
4

Session 1
109
108
112
110

Session 2
∞
∞
∞
∞

Session 3
∞
∞
∞
∞

Session 3
∞
∞
∞
∞

The test results of the new method are shown in Table 3 in single user enviroment.
The result show that the four sessions would be worked orderly and finish as soon as
possible. The average time elapsed of Table 3 will be quadruple of Table 1, because
the four sessions were executed in serial.
Table 3. The elapsed time using the new method in multi-user environment (Unit:s)

Test times
1
2

3
4

Session 1
211
210
213
211

Session 2
215
212
216
215

Session 3
214
221
214
214

Session 3
212
219
213
212

The results of test 2 indicate that the new method is better than the old method as a
whole in multi-user environment. The new method keeps the systems work orderly,
and the old method makes the most session be in bad deadlock situations.

6 Conclusions
This paper has explored an extended locking method for geographical database with
spatial rules. With reference to related theories of process management in operation
system, the extended locking method implements the management of collaboration
and competition between locking and unlocking transactions, avoids deadlocks, and
improves the effectiveness of the geographical database management systems. The
two tests show that the extended locking technique makes the systems more ordered
and efficient in a multi-users environment at the cost of some time consumption of
managing logical codes.

An Extended Locking Method for Geographical Database with Spatial Rules

979

The NCCS is the protocol abided by the extended locking method. Compared with
the traditional pessimistic scheme, the NCCS makes the requirements for locking
executive less strict and improves the concurrency of the system. While compared
with version management, it is easier to be realized and little system expenditure is
needed for creating version, recording change, merging two versions, and proposing
conflicts.
During the research on geographical database, we should keep in mind the
speciality of spatial data and refer theories of computer science to draw conclusions
for the use of spatial database.

References
1. Anthony Chiu, Ben Kao and Kam-yiu Lam: An adaptable constrained locking protocol for
high data contention environments: correctness and performance, Information and
Software Technology. Vol. 42 (2000) 599-608
2. Bharat Bhargava: Concurrency Control in Database Systems, IEEE Transactions on
Knowledge and Data Engineering, Vol. 11 (1999) 3-16.
3. Dean Kuo, Volker Gaede, Kerry Taylor: Using Constrains to Manage Long Duration
Transaction in Spatial Information System. http://www.wiwi.hu-berlin.de/~gaede/ltm.ps.gz
(19997).
4. Dongman Lee, Jeonghwa Yang, Hee Yong Youn, et al: Entity-Centric Scalable
Concurrency Control for Distributed Interactive Applications. Proceedings 19th IEEE
Int'l Performance, Computing, and Communications Conference, (2000)544～550.
5. Zeiler Michael: Modeling Our World: The ESRI Guide to Geodatabase Design. New York:
ESRI Press, (2001).
6. E. Easterfield, Richard G. Newell , David G. Theriault: Version Management in GIS Applications and Techniques. Proceedings EGIS ‘90, (1990) 288-297.
7. Gjermund Hanssen: Concurrency control in distributed geographical database systems.
Proceedings 9th Scandinavian Research Conference on Geographical Information Science,
(2003)167-180.
8. Gopalan Arun: Oracle Workspace Manager: A Framework for Long Transactions.
Proceedings GeoSpatial World 2001 Conference,(2001)
9. Jackie Gaskill, Dale Brooks: Understanding ArcSDE: The Gateway to Your RDBMS.
Proceedings 12th Annual ESRI International User Conference, (2000).
10. Kevin Mayal, G. Brent Hall: Generalizing GIS: Development of Spatial Grammars for
Landscape Planning. http://www.isprs.org/commission4/proceedings/pdfpapers/360.pdf
(2002) HYPERLINK
11. Mainguenaud Michel: Consistency of Spatial Database Query Results. Computer,
Environment and Urban Systems, Pergamon Press, Vol. 18 (1994)333-342.
12. Manhoi Choy, Mei-Po Kwan, Hong Va Leong: Proceedings the 27th Hawaii
International Conference on System Sciences, Vol.IV(1994)337-346.
13. Oracle Corp: Data Concurrency and Consistency. http://downloadwest.oracle.com/docs/cd/B10501_01/server.920/a96524/c21cnsis.htm#3178.
14. Peter M. Batty: Version Management Revisited.
http://www.gita.org/members_only/downloads/batty.pdf(2002).
15. Prabhudev Konana , Sudha Ram : Transaction management mechanisms for active and
real-time databases: A comprehensive protocol and a performance study. The Journal of
Systems and Software, Vol. 42, (1998) 205-225

980

C. Cheng et al.

16. Richard G. Newell: The Why and the How of the Long Transaction.
http://emea.smallworld.co.uk/support/techpaper/tp9.html.
17. R. Lea, Y. Honda, K. Matsuda: Virtual Society: Collaboration in 3d Spaces on the Internet.
The Journal of Collaborative Computing, Vol. 6 (1997)227-250.
18. Sha Zongyao, Bian Fuling: Comprehensive Knowledge Discovery: Theory, Concept and
Application.http://www.isprs.org/commission4/proceedings/pdfpapers/191.pdf(2002).HYP
ERLINK
19. S. Goel, B. Bhargava and S. K. Madria: An adaptable constrained locking protocol for high
data contention environments: correctness and performance, Information and Software
Technology, Vol. 42(2000) 599-608.
20. Thomas Connolly, Carolyn Begg: Database Systems: A Practical Approach to Design,
Implementation, and Management 3/e, Addison Wesley Higher Education(2001).

