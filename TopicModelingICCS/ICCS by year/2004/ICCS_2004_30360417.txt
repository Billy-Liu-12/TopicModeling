Reliability of Cluster System with a Lot
of Software Instances
Magdalena Szymczyk and Piotr Szymczyk
Department of Control Systems, University of Mining and Metallurgy, al. Mickiewicza 30
30-059 Kraków, Poland
{mszm, pszm}@ia.agh.edu.pl

Abstract. This paper presents model of complex fault – tolerant system with
multiple software instances and hardware clusters. We want to show influence
of number software and hardware components on overall reliability of the
system. Previously, other models have been developed only for software or
hardware systems. Our model assumes that failure of each component is
statistically independent.

1 Introduction
Today computers are much more sophisticated then their earlier version. They are
made up of software and hardware components.
These days, in order to ensure effective performance of the computer, software
and hardware need to function with considerable amount of reliability. There are
number of methods to improve reliability of software products: reliable software
design, fault-tolerance design, formal methods and testing [1] [2] [3].
Reliability is the probability that system works properly by a certain time.
Reliability of serial systems where failures of components in system are mutually
independent equals with the probability that all components are working [4] [5].
If the probability that a component Ai is operational equals P(Ai), and its reliability
equals Ri=P(Ai), then reliability of the whole system (probability that system is
functioning properly) with the assumption of independency of failures equals:
n

Rs = ∏ Ri

(1)

i −1

For parallel system reliability Rp equals to:
n

R p = 1 − ∏ (1 − Ri )
i =1

under the assumption of independence of failure events.

M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 417–420, 2004.
© Springer-Verlag Berlin Heidelberg 2004

(2)

418

M. Szymczyk and P. Szymczyk

2 Optimization of the Number of Software and Hardware
Let’s make some assumption in our model. A repeated task and each repetition of task
are independent. We assume that software task has a fixed probability of failure.
Software failures of different version of code are independent, but still have the same
of reliability. For this architecture we have such RBD diagram [5]:

RS1,H1

RH1

RS1

RS2,H1

RSN1,H1

RS1,H2

RH

RH2

RS2

RS2,H2

RSN1,H2

RS1,HK

RHK

RSK

RS2,HK

RSN1,HK

Fig. 1. RBD diagram for considered system

Notation:
K – number of hardware clusters in systems
N – number of software instances on j-th cluster node
Hj – j-th hardware node
Si,Hj – i-th software instance on j-th cluster node
RH – common reliability of hardware
RHj – reliability of each hardware node
RSj – reliability of common software on j-th hardware node
RSi,Hj – reliability of each software instance on j-th hardware node
RS – reliability of common software
Reliability of the system is given by:

RS

Reliability of Cluster System with a Lot of Software Instances
K 

R = RH * 1 − ∏ 1 − RH j * RS j


j =1 


(

(

Nj


* 1 − ∏ 1 − RSi ,H j
i =1




)   * R

from this equation , if all RHj are equal, RSj and RSj,Hj too, we get:

(

419

( (

R = R H * RS * 1 − 1 − R H K * R S N * 1 − 1 − RS N , H K



) ))
N

(3)

S

K

)

(4)

Results can be presented after some calculations in a form of charts. For simplicity
and better visualization of influence RHK and RSN,HK on R it is assumed that RH, RS, and
RSN are equal to 1. Values RH, RS and RSN in all cases we have a direct influence on R,
so it should have the highest value possible.

1,000

10 9

No of sofware
instances

Value of R

0,998

0,996
8 7
10
8 9
6 5
6 7
4 3
4 5
2 1 1 2 3
No of hardware

nodes

Fig. 2. Charts for RH=1, RS=1, RHK=0.999, RSN=1, RSN,HK=0.999

From Fig. 2 it follows that for software instances greater than 4 and for the same
numbers of nodes the value of R does not change at all. So if we give greater numbers
of software and clusters, R doesn’t change dramatically. When RHK and RSN,HK are
equal, increasing number of hardware nodes to 2 produce good result on R.

B)

A)
0,9995

0,9980

Value of R

0,9990
0,9985

0,9975
4

0,9970

3

No of
sofware
instances

2
1
1

2

3

4

No of hardware
nodes

4
3

No of
sofware
instances

2
1
1

2

3

Value of R

1,0000
0,9998
0,9996
0,9994
0,9992
0,9990
0,9988
0,9986
0,9984
0,9982

1,0000

4

No of hardware
nodes

Fig. 3. Charts for RH=1, RS=1 RSN=1, RHK=0.999 A) RSN,HK=0.999; B) RSN,HK=0.9999;

420

M. Szymczyk and P. Szymczyk

A)

3
2
1
1

2

3

4

No of hardware
nodes

1,00000
0,99995
0,99990
0,99985
0,99980

Value of R

4

No of
sofware
instances

B)
Value of R

1,0000
0,9998
0,9996
0,9994
0,9992
0,9990
0,9988
0,9986
0,9984
0,9982

0,99975
4

0,99970

3

No of
sofware
instances

2
1
1

2

3

4

No of hardware
nodes

Fig. 4. Charts for RH=1, RS=1 RSN=1, RHK=0.9999 A) RSN,HK=0.999; B) RSN,HK=0.9999;

3 Conclusions
We consider dependencies in the system reliability with respect to the number of
hardware cluster nodes and software instances for fault-tolerant systems. Analyzed
system is composed of K clusters and N software instances. For such system
reliability R is most sensitive on changes from 1 to 2 in hardware nodes in all
considered cases. The most optimal number of hardware nodes equals 2 because
further increase in hardware does not have any remarkable influence on R. In
principle, software depends from properly functioning hardware so if we have very
high RSN,HK values with relation to RHK, increase in software number dose not produce
the same effects as increase in node number. It can raise reliability R if RSN,HK>>RHK
(Fig.3 B) and software instances changes from 1 to 2. Such solution can be
economically justified in the case when the implementation of two different instances
of software is significantly less than the cost of buying two hardware nodes and
RSN,HK>>RHK. Increasing above two software instances and two hardware nodes don’t
have significant influence on the system reliability. It is necessary to focus our
attention on obtaining high level of values RSN,HK and RHK.

References
1. Kim K.H. and Welch H.O.: Distributed execution of recovery blocks: an approach for
uniform treatment of hardware and software faults in real-time applications, IEEE
Transaction on Computers, 38 (5): pp. 626-636, 1989.
2. Randell B.: System Structure for software fault tolerance. IEEE Transaction Software
Engineering, SE-1(2): pp. 220-232, 1975.
3. Avizienis A.: The N-version approach to fault-tolerant, SE-11(12): pp. 1491-1501, 1985.
4. Hunter S.W., Smith W.E.: Availability Modeling and Analysis of a Two Node Cluster.
5. Bobbio A. and Trivedi K.: Reliability Theory and Methods

