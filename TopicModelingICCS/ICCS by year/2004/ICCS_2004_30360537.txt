Using Adaptive Priority Controls for Service
Diﬀerentiation in QoS-Enabled Web Servers
M´
ario Meireles Teixeira2,1 , Marcos Jos´e Santana1 , and
Regina H. Carlucci Santana1
1
University of S˜
ao Paulo
Institute of Mathematics and Computer Science
S˜
ao Carlos, SP, Brazil 13560-000
{mjs, rcs}@icmc.usp.br
2
Federal University of Maranh˜
ao
Department of Informatics
S˜
ao Lu´ıs, MA, Brazil 65085-580
mario@icmc.usp.br

Abstract. We propose an architecture for the provision of diﬀerentiated
services at the web server level. The architecture is validated by means of
a simulation model and real web server traces are used as workload. We
implement an adaptive algorithm which allows the tuning of the priority
level provided and determines how strict the use of priorities will be. The
server can then adapt itself to various workloads, an essential feature in
a highly dynamic environment such as the Web.

1

Introduction

The service currently provided on the Internet is based on a best-eﬀort model,
which treats all traﬃc uniformly, without any type of service diﬀerentiation or
prioritization, a characteristic we ﬁnd even in the design of critical Internet
services, such as the Web. However, not all types of traﬃc are equivalent or have
the same priority to their users [1]. Therefore, it is essential to provide service
diﬀerentiation with diﬀerent levels of quality of service (QoS) to diﬀerent request
types [2].
In this paper, we propose a novel architecture for a web server capable of
providing diﬀerentiated services to its users and applications. We consider two
classes of users and analyze the implementation of an adaptive priority mechanism, an innovative solution for service diﬀerentiation at the application domain.
There are a few studies in the literature which use priorities for service diﬀerentiation [3] [4] [5]. However, all of them are based on some sort of strict priority
scheme and do not provide mechanisms for its adaptation, as is the case of our
algorithm.
The authors would like to thank Brazilian funding agencies CAPES, CNPq and
FAPESP for their support to the research projects at LaSDPC-ICMC-USP
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 537–540, 2004.
c Springer-Verlag Berlin Heidelberg 2004

538

2

M. Meireles Teixeira, M.J. Santana, and R.H. Carlucci Santana

Service Diﬀerentiating Web Server Model

In this section, we propose a generic model for a Service Diﬀerentiating Web
Server (SWDS, in Portuguese) which should be able to provide diﬀerent levels
of service to its clients with quality of service guarantees. Figure 1 describes
the proposed architecture, composed of the following modules: a Classiﬁer, an
Admission Control module and a cluster of web server processes.

Fig. 1. Service Diﬀerentiating Web Server (SWDS)

The Classiﬁer is the element responsible for receiving requests upon arrival
at the server and for dividing them into classes following some previously deﬁned criteria. The Admission Control module manages the acceptance of new
requests by the server taking into account current service policies and system
workload information. In case of system overload, a request may be either rejected (Dropping) or have its QoS requirements downgraded (Negotiation), so
that it can be accepted in a lower priority class. After being admitted to the
system, the request is assigned to one of the nodes of the web server cluster
and is serviced according to the scheduling or service diﬀerentiating algorithm
currently in operation. After processing, the results are sent back to the clients.
In this work, each cluster node is viewed as a plain web server with a CPU,
a disk, a network interface and other resources. The nodes could have also been
abstracted as processes, tasks or even CPU’s in a parallel computer, since the
model does not necessarily imply that the cluster is composed by computers in
a distributed system.

Using Adaptive Priority Controls for Service Diﬀerentiation

3

539

Adaptive Priority Mechanism

To implement the adaptive algorithm, each server process is deﬁned with a single
waiting queue where requests are inserted in strict arrival order. The algorithm
uses a look-ahead parameter (k) that speciﬁes the maximum number of positions
that will be searched from the head of the queue looking for requests of a given
priority (class). If no request of the desired priority is found, the algorithm is
repeated for the next lower level and so on. In the worst case, the ﬁrst request of
the queue will be chosen for processing. The higher the value of k, the better the
treatment given to higher priority requests. For k = 1, requests will be serviced
in strict arrival order, i.e., without any service diﬀerentiation.
The model is validated by means of a discrete-event simulation using the
SimPack simulation package. We used log ﬁles collected from the 1998 World
Cup web site [6] for workload generation. We assume four homogeneous web
servers in the cluster. Arriving requests are divided into two service classes (high
and low priority) with 50% of the requests in each class. The admission control
module is disabled so as not to interfere with the performance evaluation of the
algorithm. Therefore, the Classiﬁer works as a dispatcher for the requests and
server queues are unlimited.
Initially, we analyzed the behavior of request mean response time for diﬀerent
values of the look-ahead, as shown in Fig. 2. For k = 1, the curves overlap, since
the same treatment is given to both service classes. However, for k = 3000, the
service diﬀerentiation becomes evident and the service provided to high priority
requests is noticeably better, as initially intended.

Fig. 2. Request response time using adaptive priority scheduling

The following experiments analyzed the behavior of the ratio of completed
high priority requests with respect to the arrival rate. Look-ahead values range
from 1 to 4,500. For k = 1, the service received by both classes of requests is
virtually the same. However, higher values of k gradually increase the ratio of
high priority requests that reach a successful completion (Fig. 3), to the point
where strict priority scheduling is enforced. In this case, the treatment provided
to low priority requests becomes much worse.

540

M. Meireles Teixeira, M.J. Santana, and R.H. Carlucci Santana

Fig. 3. Ratio of completed requests for diﬀerent values of the look-ahead

4

Conclusions

We proposed an architecture for a service diﬀerentiating web server, the SWDS
server, which can provide diﬀerent levels of service to diﬀerent classes of users.
Our model is an evolution from conventional web server architectures, which
service clients using an FCFS discipline, without considering the demands of
any particular group of users or applications.
We proposed and implemented an adaptive priority mechanism in the SWDS
server model, an innovative solution at the application domain. It employs a
look-ahead parameter in the cluster’s waiting queues in order to ﬁne-tune the
prioritization level used by the system. Thus, the server can support varying
degrees of QoS-awareness according to the real time system load. The adaptive
algorithm brings adaptability to the SWDS server and shifts the workload associated with service diﬀerentiation to the cluster nodes, which in turn reduces
the workload of the dispatcher and improves system scalability.

References
1. Dovrolis, C., Ramanathan, P.: A case for relative diﬀerentiated services and the
proportional diﬀerentiation model. IEEE Network (1999)
2. Kant, K., Mohapatra, P.: Scalable Internet servers: Issues and challenges. In:
Proceedings of the Workshop on Performance and Architecture of Web Servers
(PAWS), ACM SIGMETRICS (2000)
3. Chen, X., Mohapatra, P.: Providing diﬀerentiated services from an Internet server.
In: Proceedings of the IEEE International Conference on Computer Communications and Networks. (1999) 214–217
4. Eggert, L., Heidemann, J.: Application-level diﬀerentiated services for web servers.
World Wide Web Journal 3 (1999) 133–42
5. Rao, G., Ramamurthy, B.: DiﬀServer: Application level diﬀerentiated services for
web servers. In: Proceedings of the IEEE International Conference on Communications. (2001)
6. Arlitt, M., Jin, T.: Workload characterization of the 1998 World Cup web site.
Technical Report HPL-1999-35, HP Laboratories (1999)

