Load Analysis and Load Control in Geo-agents
Yingwei Luo, Xiaolin Wang, and Zhuoqun Xu
Dept. of Computer Science and Technology, Peking University, Beijing, P.R.China, 100871
lyw@pku.edu.cn

Abstract. Geo-Agents is an agent-based distributed Geographic Information
System (GIS), which is a multi-agent system and consists of four types of GIS
agent: GuServer, Facilitator, interface agent and GIS function agent. For a
multi-agent system, there contains many distributed agents in different environments, which form a complex distributed system. In order to improve the
performance, load control should be a keystone in a multi-agent system. Firstly,
the load problems in Geo-Agents are analyzed, and then two load control
strategies are discussed in detail.

1 Geo-agents: An Introduction
Geo-Agents is an agent-based distributed GIS (see Figure 1)[1][2]. Geo-Agents consists of four types of GIS agent: Facilitator, Interface agent, GIS function agent and
GuServer.
Agent Region

…
…

…

Spatial Database
Spatial Metadata Database

……

LAN/
WAN
…

……

…

Spatial Metadata
Database

High
Speed
LAN

…

…
Spatial Database

Host

AgentServer

Interface Agent or GIS Function Agent

Facilitator
GuServer

Fig. 1. Geo-Agents System

Facilitator is the manager of Geo-Agents. The functions of Facilitator include registering available GIS agents, searching for practicable GIS agents, managing all active agent instances, coordinating communication and coordinating cooperation.
GIS function agent encapsulates spatial querying, spatial processing or spatial analyzing services. The encapsulated services in GIS function agent may come from difM. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 997–1003, 2004.
© Springer-Verlag Berlin Heidelberg 2004

998

Y. Luo, X. Wang, and Z. Xu

ferent existing GIS platforms. Each GIS function agent can complete a same type of
problem. According to the features of GIS, GIS function agent is classified into another two types: basic function agent and domain-oriented function agent. Basic function agent completes basic GIS services, such as spatial data search, spatial data access, network analysis, overlay analysis, buffer analysis and so on. Domain-oriented
function agent is responsible for application tasks in various domains, and can be
constructed by domain-oriented model and used generally in one domain.
Interface agent provides interfaces for users or applications to hand task. GeoAgents provides GeoScript, an agent manipulating language to describe GIS tasks [2].
When solving a practicable problem, users or applications can simply use GeoScript
statements to describe the task, and then hand the statements to interface agent. Interface agent has a GeoScript interpreter and can disassemble the task to subtasks
autonomously, recruit GIS function agents to complete the task concurrently.
GuServer is in charge of spatial information accessing services, which manages
spatial information and spatial metadata in spatial databases.
In Geo-Agents, GIS agent is reactive agent, and every GIS agent consists of five
units: control subsystem, functional subsystem, communication subsystem, humancomputer interface and data resource. GIS agent is not only able to carry out its own
task independently, but also communicate with other agents, exchange information
and cooperate with others.
“Agent Region” mode is adopted to control the distributed scenario for GeoAgents. An “Agent Region” consists of one or more hosts, which must be installed
with a Facilitator (and or other GIS agents). There are many Facilitators in an “Agent
Region”. Different Facilitators can cooperate to control and coordinate every GIS
agent to run correctly, and hold the distributed controls of the whole system.
In an “Agent Region”, there is one and only one Facilitator that will be configured
as AgentServer. Facilitator is used to manage and coordinate agents inside one “Agent
Region”. Besides the functions of Facilitator, AgentServer serves as a bridge among
different “Agent Regions”. That is to say, an agent in one “Agent Region” can only
communicate with agents in other “Agent Regions” through AgentServer. Of course,
an authorization is required. AgentServer manages a table to register other “Agent
Regions” that are authorized with itself each other. Between two directly authorized
“Agent Regions”, agents between them can communicate via the coordination of their
AgentServers. The authorization relation in Geo-Agents can be passed one by on: If a
directly authorized AgentServer chain can be found for two “Agent Regions” that
have no direct authorization, agents between the two “Agent Regions” can communicate via the coordination of the AgentServer chain.
A multi-agent system contains many distributed agents in different environments,
which form a complex distributed system. In order to improve performance, load
control should be a keystone in a multi-agent system. The existing researches imply
that load control can improve performance of distributed system very well [3-6]. In
multi-agent system, agent is the minimum execution unit, and the load control is to
dispatch all subtasks of a complex task to different agents in different hosts averagely
[7]. In the following two sections, the load problem and load control strategy in GeoAgents are introduced.

Load Analysis and Load Control in Geo-agents

999

2 The Load Problem in Geo-agents
Generally, the load problem a distributed system faces may involve two aspects: host
load and network load [3]. In Geo-Agents, host load indicates the number of agents
resided on one host, and network load contains two parts: the communication among
agents and the transmission of spatial data. For any distributed GIS system, the transmission of spatial data is the primary network load. Spatial data is not transmitted
directly in a message in Geo-Agents. Spatial data is encapsulated as a Geo-spatial
object, and the transmitted data in a message is the reference of the Geo-spatial object.
Only when spatial data is really needed, the transmission of spatial data takes place.
The transmission of spatial data is through the reference of Geo-spatial object, not
through the message among agents [2].
In order to achieve a high performance, it is necessary to control the load for a distributed system. Generally, load control can be accomplished from two aspects: reducing load and balancing load [4][5].
In Geo-Agents, the number of agent for completing a special task is fixed, it is impossible to reduce host load. But we can balance the host load through controlling the
number of agent in different hosts.
Network load is a serious problem in Geo-Agents, which is because of that: 1) the
collaboration among agents will bring a lot of communication cost; 2) massive spatial
data is transmitted in network. The communication mechanism in Geo-Agents is
point-to-point direct communication, so it is hard to balance network load among
different hosts. But we can reduce the network load through some other effective
measures.
Reducing network load can be obtained from two aspects: 1) reducing the quantity
of each communication, which must be considered when designing system; 2) reducing communication times, especially massive spatial data communication times [5][6].
In Geo-Agents, the distribution of spatial data and the collaboration among GIS agents
make communication absolutely necessary. The only way is to let massive spatial data
communication take place in a same host.
In those ways, it is easy to find that a conflict happens between reducing network
load and balancing host load. In Geo-Agents, because of the hugeness of spatial data,
reducing network load is principal. Balancing host load will be considered only after
network load is accordant.

3 Load Control in Geo-agents
In Geo-Agents, load is mainly controlled when creating GIS agent. There are two
control strategies: agent scheduling strategy and peer host strategy.

1000

Y. Luo, X. Wang, and Z. Xu

3.1 Agent Scheduling Strategy
3.1.1 The Principles to Create an Agent. GIS Agent is designed as reusable GIS
agent and ordinary GIS agent [2]. Reusable GIS agent means its result can be used
again.
When creating a reusable GIS agent, if its type and task are same with an existing
active reusable GIS agent (in Geo-Agents, there are some determinate reusable GIS
agent types, and the task of each type is comparable [2]), it is unnecessary to create a
new reusable GIS agent. Otherwise, the requirement to create a reusable GIS agent is
same with creating an ordinary GIS agent.
When creating an ordinary GIS agent, there are some different requirements because of considering network load:
(1) A GIS agent must be created in an appointed host.
(2) A GIS agent must be created in local host by Facilitator.
(3) A GIS agent will be created in appropriate host (for example, the host where
spatial data locates).
(4) A GIS agent can be created in any host.
In the first two cases, the host load they bring is inevitable, and there is no proper
method to reduce or balance relative host load. But in the last two cases, it is necessary to control the creation of agent because of the randomicity, otherwise, there will
have too many agents in one host.
During the creation of GIS agent, the network speed must be considered. In GeoAgents, some assumptions are given: accessing an agent in a same “Agent Region” is
faster than in other “Agent Region”; accessing data resource in a same “Agent Region” is faster than in other “Agent Region”; the priority of accessing data resource is
higher than accessing agent. For example, supposing there are two “Agent Regions”,
the data resource is in “Agent Region1”, and a user in “Agent Region2” wants to create an agent to process the data resource in “Agent Region1”. At this situation, the
agent should be created in “Agent Region1”.
According to above requirements, the following principles must be obeyed when
creating an agent:
(1) An agent should be created in the host where data resource it processes locates
if possible.
(2) If an agent needs to process several data resources, the agent should be created
in one of the hosts where data resources locate if possible.
(3) If an agent couldn’t be created in the host where data resource locates, it should
be created in one of the “Agent Regions” where data resources locate if possible.
(4) An agent should be created in the same “Agent Region” with its requestor if
possible.
(5) In an “Agent Region”, an agent should be created in the host where its load is
light.

Load Analysis and Load Control in Geo-agents

1001

3.1.2 Agent Scheduling Algorithm. Scheduling agents when creating agents is a
powerful means to control host load and network load. The goal of scheduling agents
is: 1) making the most of CPU of all hosts, in another word, eliminating the situation
that some hosts are too busy and some other hosts are idle at a same time; 2) Shorting
the average response time of all tasks and reducing the network transmission as greatly
as possible.
When designing an agent scheduling algorithm, three problems must be considered
firstly [5]:
(1) Determinate or heuristic algorithm: determinate algorithm is adopted only when
the actions(such as computing requirements, data requirements, communication requirements and so on) of all agents are foreseeable. But if the load of a system is unpredictable, a heuristic algorithm is needed. Heuristic algorithm means that the host
allocation is instructed by experiential rules and heuristic information during the
working progress.
(2) Distributed or centralized algorithm: centralized algorithm must gather all
global information to give a decision, but distributed algorithm can give a decision
only by some partial information. Gathering all global information in centralized algorithm brings heavy burden to the decision-making host, which will become the bottleneck of a system.
(3) Optimized or hypo-optimized algorithm: centralized algorithm can obtain optimized result, but the cost is higher than hypo-optimized result, because more information and complete processing are needed.
According to the agent creating principles and the agent scheduling goals, a heuristic, distributed and hypo-optimized agent scheduling algorithm is designed:
In Geo-Agents, agent scheduling is completed by AgentServer. When creating an
agent, a request is sent to AgentServer to ask it find an appropriate agent type. So
AgentServer maintains a host-table that records the number of created agents in each
host. If an appropriate agent type can be found only in one host, the agent should be
created in that host, and the number of created agents in that host increments by 1; if
an appropriate agent type can be found in several hosts, after considering the agent
creating principles, AgentServer will select the host where the number of created
agents is minimum to create the agent, and the number of created agents in that host
increments by 1.
We call this scheduling algorithm a heuristic, distributed and hypo-optimized algorithm because that: 1) it is incapable to predict that how many agents will be created in
the system and how many agents are executing at a same time; 2) the scheduling criterion is the number of created agents, not the number of executing agents in one host;
and 3) the scheduling criterion is obtained at the volley and it doesn’t bring additional
burden for AgentServer.

3.2 Peer Host Strategy
When it is foreseeable that the host load in one host is too heavy, the peer host strategy is adopted to reduce the host load: connecting the host with some other hosts via
high speed LAN, which have same software and hardware configuration with the host

1002

Y. Luo, X. Wang, and Z. Xu

and can complete same tasks with the host. The host is called as peer main host, and
other hosts are called as peer secondary hosts. All main and secondary hosts form a
peer host group (see Figure 2). When creating an agent in main host, if the host load
of main host is too heavy, the agent can be created in anyone of the secondary hosts.
Of course, in order to balancing the host load of all peer hosts, the host where the host
load is lightest is selected.

Fig. 2. Peer Host Group

In Geo-Agents, the host crying for “peer host” is the hosts where GuServer locates.
GuServer maintains one or more spatial databases and spatial metadata databases [2],
and is responsible for managing and accessing spatial data and spatial metadata. Spatial information is centralized in the host where GuServer locates. According to the
agent scheduling strategy, all agents who need GuServer to manage and access spatial
information will be created in the host where GuServer locates. So the host load of the
host where GuServer locates will be too heavy, and the performance of the system will
be serious low. Of course, enhancing the software and hardware configuration of the
host where GuServer locates can improve performance of the system, but cannot reduce the host load of that host. “Peer host” will play an important role here (see Figure
3).

Fig. 3. The Peer Host Group of GuServer

Here, the host installed GuServer is main host, and the hosts installed peer secondary GuServer are secondary hosts. All GuServers manage and access same spatial
databases and spatial metadata databases. When creating agents who will use spatial
information managed by the GuServer, they can be created averagely in the peer host
group of GuServer.

Load Analysis and Load Control in Geo-agents

1003

4 Conclusion
The performance is an important factor to evaluate a distributed system, and load
control is a powerful means to improve performance. Geo-Agents is an agent-based
distributed system, and the granularity of load control is an agent. In this paper, the
load problems in Geo-Agents are analyzed and two load control strategies, named as
agent scheduling strategy and peer host strategy, are introduced to balance the host
load and network load. The performance of Geo-Agents is improved very well by
these two strategies [2].
Acknowledgement. This work is supported by the National Research Foundation for
the Doctoral Program of Higher Education of China under Grant No. 20020001015;
the National Grand Fundamental Research 973 Program of China under Grant
No.2002CB312000; the National Science Foundation of China under Grant
No.60073016 and No.60203002; the National High Technology Development 863
Program under Grant No. 2002AA135330, No. 2002AA134030 and No.
2001AA113151; the Beijing Science Foundation under Grant No.4012007.

References
1. Luo Yingwei, et al: The Model of Distributed GIS-oriented Multi-agent System (in Chinese), Acta Scientiarum Naturalium Universitatis Pekinensis, 38(3): 375-383(2002).
2. Luo Yingwei: The Study on Agent-based Distributed GIS (in Chinese), [Ph.D. Dissertation], Peking University, Beijing (1999).
3. Zhou S.: A Trace-Driven Simulation Study of Dynamic Load Balancing, IEEE Trans. on
Software Engineering, 14(9): 1327-1341(1988).
4. Shivararri G, et al: Load Distributing for Locally Distributed Systems, IEEE Computer,
25(12): 33-44(1992).
5. Lin Hwa-chu, Raghavendra C S.: A Dynamic Load Balancing Policy with a Central Job
Dispatch, IEEE Trans. on Software Engineering, 18(2): 148-157(1992).
6. Luo Zhigang, et al: Study on CORBA Load Balancing (in Chinese), Computer Science,
27(10): 31-35(2000).
7. Myung-Hee Jo, et al: The Design and Implementation of Dynamic Load Balancing for Webbased GIS Services, The proceedings of 22nd Asian Conference on Remote Sensing, P5-9,
Singapore (2001).

