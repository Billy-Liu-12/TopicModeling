An Application of the DEDS Control Synthesis
Method
ˇ
Frantiˇsek Capkoviˇ
c
Institute of Informatics, Slovak Academy of Sciences
D´
ubravsk´
a cesta 9, 845 07 Bratislava, Slovak Republic
{Frantisek.Capkovic,utrrcapk}@savba.sk
http://www.ui.sav.sk/home/capkovic/capkhome.htm

Abstract. An application of the method suitable for modelling and control of general discrete event dynamic systems (DEDS) to special kinds of
communication systems is presented in this paper. The approach is based
on Petri nets (PN) deﬁned in [12] and directed graphs (DG) described
in [11]. It is supported by the previous author’s works [1]-[10], [13].

1

Introduction

DEDS are the systems driven by discrete events. A sequence of discrete events
can modify the DEDS behaviour. There are two kinds of discrete events - spontaneous events (peculiar to the system) and controllable ones (forced from without). Typical DEDS are ﬂexible manufacturing systems, communication systems,
transport systems. Processes in Web and/or multiagent systems are special kinds
of communication systems. Thus, the modelling and control methods suitable for
DEDS in general can be applied to modelling and control of them. We will use
the analytical PN-based model of the DEDS dynamics development as follows
xk+1 = xk + B.uk
B = GT − F

,

k = 0, N

F.uk ≤ xk

(1)
(2)
(3)

where k is the discrete step; xk = (σpk1 , ..., σpkn )T is the n-dimensional state
vector of DEDS in the step k; σpki ∈ {0, cpi }, i = 1, ..., n express the
states of the DEDS elementary subprocesses or operations - 0 (passivity) or
0 < σpi ≤ cpi (activity); cpi is the capacity of the DEDS subprocess pi as
to its activities; uk = (γtk1 , ..., γtkm )T is the m-dimensional control vector of
the system in the step k; its components γtkj ∈ {0, 1}, j = 1, ..., m represent occurring of the DEDS elementary discrete events (e.g. starting or ending
the elementary subprocesses or their activities, failures, etc.) - i.e. the presence (1) or the absence (0) of the discrete event; B, F, G are constant matrices; F = {fij }n×m , fij ∈ {0, Mfij }, i = 1, ..., n , j = 1, ..., m expresses
Partially supported by the Slovak Grant Agency for Science (VEGA) under grant
# 2/3130/23.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 529–536, 2004.
c Springer-Verlag Berlin Heidelberg 2004

530

ˇ
F. Capkoviˇ
c

the causal relations among the states of the DEDS (as causes) and the discrete
events occuring during the DEDS operation (as consequences) - i.e. the nonexistence (0) or the existence and multiplicity (Mfij > 0) of the causal relations;
G = {gij }m×n , gij ∈ {0, Mgij }, i = 1, ..., m, j = 1, ..., n expresses very analogically the causal relations among the discrete events (causes) and the DEDS states
(consequences); F and G are the arcs incidence matrices and B is given by means
of them according to (2); (.)T symbolizes the matrix or vector transposition.
Simultaneously, we will utilize the DG-based model in the form
X(k + 1) = ∆k .X(k) ,

k = 0, N

(4)

where k is the discrete step; X(k) = (σπ1 (γ), ..., σπnRT (γ))T , k = 0, N is the
(k)

(k)

(k)

nRT -dimensional state vector of the DG in the step k; σπi (γ), ∈ {0, 1}, i =
1, nRT is the state of the elementary DG node πi in the step k. Its value depends
on actual enabling its input transitions. γ symbolizes this dependency; ∆k =
(k)
(k)
(k)
ATDGf = {δij }n ×n , δij = γtπ |π , i = 1, nRT , j = 1, nRT is the functional
RT

(k)

RT

i

j

matrix; γtπ |π ∈ {0, 1} is the transition function of the PN transition ﬁxed
i j
on the edge oriented from the DG node πj to the DG node πi . It is necessary
to say that the PN places pi are completely diﬀerent form the DG nodes πi .
While pi represent the states of elementary activities inside PN, πi represent the
complete state vectors of the PN. It corresponds with the fact that the DG (with
the nodes πi , i = 1, ... nRT ) is the RG of the PN (with the places pi , i = 1, ... n)
and represents the alternative artiﬁcial ﬁctive state machine (SM) with the nodes
πi , i = 1, ... nRT representing the reachable state vectors of the PN.
In [1], [2] the procedure enumerating the quasi-functional adjacency matrix
A of the RG and the space of the PN reachable states in the form of the matrix
Xreach was presented in a diﬀerent depth. The columns of the matrix Xreach
are the PN state vectors x0 , x1 , x2 , ... reachable from the initial state x0 . The
inputs of the procedure are the PN structural matrices F, GT and the PN initial
state vector x0 . While the PN-based model in general (where any transition can
have more than one input places as well as more than one output places) cannot
be understood to be the classical SM (because of synchronization problems), the
DG-based model (where DG is RG of the PN in question) is the classical SM.
To illustrate the operation of the above mentioned procedure let us model
the client-server cooperation as simply as possible. There can be distinguished
the following principal partial activities expressed by PN places: p1 = the client
requests for the connection, p2 = the server is listening , p3 = the connection
of the client with the server, p4 = data sent by the client to the server, p5 =
the disconnection of the client by the client himself. The PN representing the
problem is given on the left side in Fig. 1. The PN transitions t1 - t3 represent
discrete events that realize the system dynamics. The order of their occurrence
inﬂuences the actual development of the system dynamics. The inputs F, G and
x0 are the following as well as the outputs - i.e. the quasi-functional adjacency
matrix A of the RG (given on the right in Fig. 1), the corresponding transpose
of the functional matrix ∆k , and the state space of its reachable states Xreach .

An Application of the DEDS Control Synthesis Method
t3

✛
 ✻

p1 r❤

❅

t1

✒
 
 

 
p2 r❤

❤x0

r❤p4

t1

 
 
✠
✲❤
✁ p3
✁
✁

❅
❘
❅

❅
■
❅

x2

✁
✁
☛✛
❅✁

❄
❤
x1
t2   ❅ t3
 
❅
✠
 
❘❤
❅
❤
x
t2

3

❄
❤
x4

r❤p5

t2

531

Fig. 1. The PN-based model of the client-server cooperation (on the left) and the
corresponding reachability graph (on the right)



1
1

F=
0
0
0


0
0

A=
0
0
0

1
0
0
0
0

0
2
0
0
0

0
3
0
0
0


0

0
0

0
1
G
=

1
0
0


0
0
0
0
 T 

0
 ∆k =  0

0
2
0
0

0
0
1
0
1


0 1 0 0
1 0 0 0  x0 = (1, 1, 0, 1, 1)T
0 1 0 0
t1
0
0
0
0

0
t2
0
0
0

0
t3
0
0
0



0
1 0
1 0
0



0
 Xreach =  0 1
1 1

t2
1 1
0

0
1
0
1
0

0
0
1
0
1


0
1

0

0
0

As we can see, the nonzero elements of A represent the indices of the PN transitions. In this very simple example the control synthesis is very simple. After
occurrence of the discrete event represented by the transition t1 the client is
connected with the server (the state x1 ). Now the client has two possibilities to disconnect once more (by the event t2 to the state x2 ) or to sent data to the
server (by t3 to x3 ). After sending data the client can work on the server and
after ﬁnishing the work he can disconnect (by t2 to x4 ). In more complicated
cases (with more places and transitions and/or with more complicated structure
of PN) it is necessary to perform the automatic control synthesis.

2

The Procedure of the Control Synthesis

The problem of control in general is the following: to transform the system to
be controlled from a given initial state x0 to a prescribed terminal state xt at
simultaneous fulﬁlling the prescribed control task speciﬁcations (like criteria,
constraints, etc.). For DEDS control synthesis the very simple idea can be utilized. Consider a system being in the initial state x0 . Consider the desirable
terminal state xt . Develop the straight-lined reachability tree (SLRT) from the
state x0 towards xt directed to xt . Develop the backtracking reachability tree
(BTRT) from the state xt towards x0 however, directed to xt . Intersect both
the SLRT and the BTRT. The trajectory (or several ones) starting from x0 and

532

ˇ
F. Capkoviˇ
c
s
t✲ step k
a❄0 1 2 3 4 5
❵ ❵ ❵ t2 ❵ ❵ ❵
t
5
e 5
❈ 
✒
✒❈ 
✒❵
❵ 
❵ 
❵ 
4 ❵ ❵ t1  
t2 ❈ ❈
4✂
✕❆❵ ✁
✕❆ ✁
✕✂✍
✍❆ 8 ✁
❈✁❆ ❵ ✁
❈ ✂❵
3 ❵ 0 ❵ ✂t2❵ ✁
❆
❆
✂
✂
7
2
❆t3
✒
✒
✒
❈❆
❈❆
❯ 
❯ 
❯❵
 
✁❆❵  
✁❆❵  
❵ t 
2❆
2 ❵ ❆ ❵✂ ✁
❆❈ ✂ 
❆❈
1
✒
✒
 
t
❲
❈
❯
❆
❯❈❲❵
❆
❯
❆
 
✂
 
✂
❵
❵
❵
❵
❵
1
1

s
t✲ step k
a❄0 1 2 3
❵ ❵ ❵ 2 ❵
t
e 5 ❈ 
✒❵❈t6 ❵
 
❵ ✒❵❈ 
4  
❈ ❈ ❈t2

4

5

❵ ❵
❵ ❵
❆ ✁✕✂✂✍❵❆ ❵ 7✁✕✂✂✍❵❆ ❵ ❵
❵
❈
❈
❈
3 ✁
❆✂ ❆ 
❆ ❆✁✂t24 ❆ t38  
✒
 
✒
✒
t42
❈❆❯❵ 
❈ ❈
❵❆ 
2 ✁
✂❆❈ ❆❆❯❈ ❵✁✂❆2❈ ❵ 3❆❯❵  ❵
✒
 
✒❆❯❈❲❵✂ t3❆❯❈❲❵ 
 
✒
 
t1 ❵ ❵
❯❈❲❵ 
1 ❵✂ ❆

s
t✲ step k
a❄0 1 2
❵ ❵ ❵
t
e 5
4
3
2
1

3

4

5

❵ ❵ ❵
❵ ❵ ❵ 2 ❵ ❵ ❵
t7
❵ ❵ ❵ ✁✁✕❵❆ 3❵ ❵
❆ t8  
0
✒
t42❵
❵❆t3 ❵ ❵✁ ❵ ❆❯❵ 
❆  
✒
t11 ❵ ❵ ❵ ❵
❵ ❆❯❵ 

Fig. 2. The straight-lined system development from the initial state (on the left), the
backtracking system development from the terminal state (in the centre), and the
intersection (on the right)

ﬁnishing in xt is (are) obtained. To illustrate such an approach see Fig. 2 (where
the SLRT is given on the left, the BTRT in the centre, and their intersection
on the right). Although in general there can be more than one trajectory after
intersection, in any case we obtain the feasible possibilities of the system behaviour between the x0 and xt . When a criterion for optimality is given we can
ﬁnd even the optimal trajectory.
To avoid problems with symbolic operations at computer handling ∆k in
(4) we will understand all of the transitions to be enabled (i.e. their transition
functions having the values 1). In such a way we can replace the functional matrix
∆k by the constant matrix ∆. Thus, the DG-based approach operates with the
constant matrix ∆ being the transpose of the constant adjacency matrix of the
RG (representing the SM corresponding to the original PN). The constant RG
adjacency matrix can be obtained from the quasi-functional adjacency matrix A
by means of the replacement all of the nonzero elements by the integer 1. Hence,
the SLBT can be constructed in analytical terms as follows
{X1 } = ∆.X0 ; {X2 } = ∆.{X1 } = ∆2 .X0 ; . . . ; {XN } = ∆.{XN −1 } = ∆N .X0
where XN = Xt . In general, {Xj } is an aggregate all of the states that are
reachable from the previous states. According to graph theory N ≤ (nRT − 1).
The BTRT is developed from the Xt towards X0 , however, it contains the paths
oriented towards the terminal state. It is the following
{XN −1 } = ∆T .XN ; {XN −2 } = (∆T )2 .XN ; . . . ; {X0 } = (∆T )N .XN
Here, {Xj } is an aggregate all of the states from which the next states are
reachable. It is clear that X0 = {X0 } and XN = {XN }. It is the consequence of
the fact that in general ∆.∆T = In as well as ∆T .∆ = In (where In is (n × n)
identity matrix). The intersection of the trees is made as follows
M1 = (X0 , 1 {X1 }, . . . , 1 {XN −1 }, 1 {XN }); M = M1 ∩ M2
M2 = (2 {X0 }, 2 {X1 }, . . . , 2 {XN −1 }, XN ); M = (X0 , {X1 }, . . . , {XN −1 }, XN )
where the matrices M1 , M2 represent, respectively, the SLRT and the BTRT.
The special intersection both of the trees is performed by means of the column-to-

An Application of the DEDS Control Synthesis Method
p1

p11

q
❢

533

❢x

q
❢
 
❆
p6
❄
✠
✲❢✲  
❆
t1
t6
 

❆
 ❆❯
❄
p7 ❢ 
✠
❢

q

p2
✏ t7
✘✘
✏✏
  ❅
✘✘✘ p
✏
✘
✏
✘
8
❄
p12 ❢
✏
✠
 
❘✛
❅
✾✘
✘
✮
❢✏
t2
t3
t8   ❅
❄
p9 ❢✛
✠
 
❘
❅
❢
✘
p3
✏✏
✘✘✘ ✁ t9
❆
✘
 ✏✏
❅✏ p
✘
✏
❆
✁
✾✘✘
✮
✏
✠
 
❘ ✛10 ❢✘
❅
t4
t5
❆
✁
 
❆❯ ✁☛
❄
❄
✠
 
p4 ❢
p5 ❢
p13 ❢

0

t6  
✠
❢ 
x2

t
❄
❢1x
❍1

7
❍t❍
❥ ❢x
❍
3
t3  
t8 ❅ t9
t2
✠
 
❘
❅
❄
❄
❢x4 x5 ❢
❢
❢
✟ x6 x7
t8   ✟
 
❅
t
✠ t3
✠
 
❘ 9❢ 
t3 ❅
✙✟
x8 ❢✟
x9

t4 ❄
x10 ❢

t
❄
❢x5 11

Fig. 3. The PN-based model of two agents cooperation (on the left) and the corresponding reachability graph (on the right)

column intersection both of the matrices. Thus, {Xi } = min (1 {Xi }, 2 {Xi }), i =
0, ..., N with 1 {X0 } = X0 , 2 {XN } = XN .
To illustrate the approach let us model a simple cooperation of two agents
A and B by PN. A needs to do an activity P , however, it is not able to do
this. Therefore, A requests B to do P for him. On the base of the conversation
between the agents P is either done (if B is willing to do P and it is able to do
P ) or not (when B refuses to do P or it is willing to do P , however, it is not able
to do P ). The PN places express the activities of the agents and the messages
being routed between them: p1 = the agent A wants to do P , however, he is not
able to do P , p2 = A waits for an answer from B, p3 = A waits for a help from
B, p4 = the failure of the cooperation, p5 = the satisfaction of the cooperation,
p6 = A requests B to do P , p7 = B refuses to do P , p8 = B accepts the request
of A to do P , p9 = B is not able to do P , p10 = doing P by B, p11 = B receives
the request of A, p12 = B is willing to do P , p13 = the end of the work of B. The
transitions correspond either to synchronization due to the receipt of a message
or to conditions of the application of actions. The PN-based model is given on
the left in Fig. 3 while the corresponding RG is given on the right. When the
initial state vector x0 = (1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0)T and the structural
matrices are


1
0

0

0

T
F =
0
0

0

0
0

0
1
1
0
0
0
0
0
0

0
0
0
1
1
0
0
0
0

0
0
0
0
0
0
0
0
0

0
0
0
0
0
0
0
0
0

0
0
0
0
0
1
1
0
0

0
1
0
0
0
0
0
0
0

0
0
1
0
0
0
0
0
0

0
0
0
1
0
0
0
0
0

0
0
0
0
1
0
0
0
0

0
0
0
0
0
1
1
0
0

0
0
0
0
0
0
0
1
1



0
0
0
0


0
0


0

0


0 G = 
0
0
0


0

0

0

0
0
0

1
0
0
0
0
0
0
0
0

0
0
1
0
0
0
0
0
0

0
1
0
1
0
0
0
0
0

0
0
0
0
1
0
0
0
0

1
0
0
0
0
0
0
0
0

0
0
0
0
0
1
0
0
0

0
0
0
0
0
0
1
0
0

0
0
0
0
0
0
0
1
0

0
0
0
0
0
0
0
0
1

0
0
0
0
0
0
0
0
0

0
0
0
0
0
0
1
0
0


0
0

0

0

0

0

0

1
1

534

ˇ
F. Capkoviˇ
c

the output matrices A, Xreach , and M are, respectively, the following






100000000000
100000
010000000000
0 1 1 1 0 0 1 1 0 0 0 0
 0 1 0 0 0 0
0 0 6 7 0 0 0 0 0 0 0 0 

 
 

0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0

 0 0 0 0 1 0 0 0 0 0 1 0 


 
0 0 0 0 0 3 8 9 0 0 0 0 
 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0

 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 

 
 

0 0 0 0 0 0 0 0 8 9 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0

; 0 0 1 0 0 0 0 0 0 0 0 0; 


 
0 0 0 0 0 0 0 0 3 0 0 0 
 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0

 0 0 0 1 0 0
0 0 0 0 0 0 0 0 0 3 0 0 

 
 

0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0

 0 0 0 0 0 0 0 1 0 1 0 0 


 
0 0 0 0 0 0 0 0 0 0 0 5 
 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0

 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 1 0 1 0 0 0 0 0 0
000001
000000000000
000000111111
The approach can be tested very quickly in Matlab. The trajectory given in the
matrix M represents the situation when the desired terminal state is the successful cooperation x11 = (0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1)T . It is graphically
demonstrated on the left in Fig. 4. When the terminal state represents the failure of the cooperation x10 = (0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1)T (when B is not
able to do P ) the result is diﬀerent - see the trajectory on the right in Fig. 4.
s
t✲ step k
a ❄ 0❵ 1❵ 2❵ 3❵ 4❵ 5❵
t 12
✕❵
e 11 ❵ ❵ ❵ ❵ t4❵ ✁✁
5
❵
❵
❵
❵
❵
❵
✁
10
t33❵ ✁✁
✕
✗
✄
❵
❵
❵
❵
9
✄ ❵
❵
❵
❵
❵
✁
✄t39❵ ❵
8
✗
✄
❵
❵
❵
❵
✄
7
✄ ❵ ❵
2
❵
❵
❵
6
t9 ✄ ✄❵ ❵ ❵
✕❵ ❵ ❵
5 ❵ ❵ ❵ ✄✁✁
t23❵ ❵ ❵
❵
❵
❵
✄
✁
4
t17✕❵ ❵ ❵ ❵
3 ❵ ❵ ✁✁
❵ ❵ ❵ ❵ ❵
2 t❵ 01 ✁
✒
 
❵
❵ ❵ ❵ ❵ ❵
 
1

s
t✲ step k
a ❄ 0❵ 1❵ 2❵ 3❵ 4❵ 5❵
t 12
e 11 ❵ ❵ ❵ ❵ ❵ ❵
t4 ✕❵
10 ❵ ❵ ❵ ❵ ❵4 ✁✁
❵ ❵
9 ❵ ❵ ❵ ❵ ✁
3 ✁
✕
✍
✂
❵
❵
❵
❵
❵ ❵
t
✁
3 ✂t3
8
8
❵
❵
❵
✁
❵
❵ ❵
✂
7
✍
✂
❵
❵
❵
✂
❵
✂ ❵ ❵
6
t2 ✕❵ ❵ ❵
5 ❵ ❵ 8❵ ✂✁✁
2
✂❵ t3❵ ❵ ❵
4 ❵ ❵1✁
t
7✕❵
❵ ❵ ❵
3 ❵ ❵ ✁✁
❵
❵
✁
❵
❵ ❵ ❵
2 t01
✒
 
❵
 
❵
❵
❵ ❵ ❵
1

Fig. 4. The resulting trajectories - in case of the successful cooperation (on the left)
and in case of the failure of the cooperation when B is not able to do P (on the right)

3

The Adaptivity

As to the applicability of the above described approach we can distinguish two
kinds of adaptivity. On the one hand it is the adaptivity concerning the modifying
of the system dynamics development by means of choosing a suitable trajectory

An Application of the DEDS Control Synthesis Method

535

from the set of feasible state trajectories obtained in the control synthesis process. Such a kind of the adaptivity can be clear e.g. from the left picture in Fig. 4
where two diﬀerent feasible trajectories (expressing possibilities of the system behaviour) are presented. Because no other trajectory exists, either the trajectory
corresponding to the sequence of enabled transitions {t01 , t17 , t29 , t33 , t45 } or the trajectory corresponding to the sequence {t01 , t17 , t23 , t39 , t45 } can be chosen in order
to adapt the system behaviour to the actual demand. On the other hand it is the
adaptivity of the system behaviour by means of a structural fragment added to
the original system structure. Such a fragment is able to accept demands (given
from without) on the system behaviour and realize them. The adaptivity is illustrated in Fig. 5. On the left the system model consisting of two processes and
the structural fragment containing the place p4 is given. The fragment is able
to inﬂuence the performance of the processes (the mutual exclusion, sequencing,
re-run). In the centre of Fig. 5 the RG is presented while the result of the control synthesis process transforming the system from x0 = (1, 0, 0, 1, 1, 0, 0)T to
x6 = (0, 0, 1, 0, 0, 1, 0)T (when p3 has priority ahead of p7 ) is put on the right.
✲❤
r p1
t1

r✛
p5 ❤

❄

❄

❄

❄
❤p6

t4

p2 ❤
t2
p3

❄
❄
t5
■
❅
✒
 
❅ p4  
❄ ❅   ❄
❤
r
❤
❤p7
✒
 
■
❅
 
❅
 
❅❄
❄
t3

❅

x0

❤

 

t6❅ t3 ✯
❨❍t6  t3
✟✟ ❍
✟ t1 ✁ ❆ t4 ❍

 
✟ ❅❅
❆❯ ❤
❘ ✁☛
✠ ❍
 
❆ x1 ❤
x2 ✁
❆ t2 ✁ t4❆ ✁ t1❆ t5 ✁
❆❯ ✁☛
❆❯ ✁❤
❆ ✁☛
x3 ❤ x4 ❤
x5
t4❆ t2 ✁ ❆ t5 ✁ t1
❆❯ ✁☛
❆❯ ❤
✁☛
x6 ❤
❍ ✟ x7
✟❍
❍
✟

✲ step k
s ❄
t
0 1 2 3
a 8 ❵ ❵ ❵ ❵
t
e 7 ❵ ❵ ❵ 2 ❵
t2✕
✁✂✍
6 ❵ ❵ ❵ ✁✂2❵
✂t4
❵✂ ❵
5 ❵ ❵ t1 ✁
1✁
✕✂✂✍✂❵ ❵
❵
❵
4
1✁
✂✕
t✁
4 ✁
❵
❵
3 0 ✂✁1 ❵ ❵
✕✂✁❵ t2 ❵ ❵
t❵ 4 ✁
2 ✁ 0
✒t1❵ ❵ ❵
❵ 
 
1 ✁

t6

Fig. 5. The PN-based model of the system behaviour (on the left), its reachability
graph (in the centre), and the feasible trajectories from x0 to x6 (on the right)

4

Conclusions

The approach to the modelling and control synthesis of DEDS was presented in
this paper. Its applicability to the special communication systems was demonstrated. The approach is suitable for DEDS described by PN with the ﬁnite
state space. In order to automate the control synthesis process the graphical
tool GraSim was developed. The input of the tool is represented by the RG created by means of icons. On its output the tool yields (in the graphical form) the
system trajectories from a given initial state to a prescribed terminal one.

536

ˇ
F. Capkoviˇ
c

References
ˇ
1. Capkoviˇ
c, F.: The Generalised Method for Solving Problems of DEDS Control
Synthesis. In: Chung, P.W.H., Hinde, C., Ali, M. (eds.): Developments in Applied
Artiﬁcial Intelligence. Lecture Notes in Artiﬁcial Intelligence, Vol. 2718. SpringerVerlag, Berlin Heidelberg New York (2003) 702–711
ˇ
ˇ
2. Capkoviˇ
c, F., Capkoviˇ
c, P.: Petri Net-based Automated Control Synthesis for a
Class of DEDS. In: ETFA 2003. Proceedings of the 2003 IEEE Conference on
Emerging Technologies and Factory Automation. IEEE Press, Piscataway, NJ,
USA (2003) 297–304
ˇ
3. Capkoviˇ
c, F.: Control Synthesis of a Class of DEDS. Kybernetes. The International
Journal of Systems and Cybernetics 31 No. 9/10 (2002) 1274–1281
ˇ
4. Capkoviˇ
c, F.: A Solution of DEDS Control Synthesis Problems. Systems Analysis
Modelling Simulation 42 No. 3 (2002) 405–414
ˇ
ˇ
5. Capkoviˇ
c, F., Capkoviˇ
c, P.: Intelligent Control Synthesis of Manufacturing Systems. In: Monostori, L., Vancza, J., Ali, M. (eds.): Engineering of Intelligent Systems. Lecture Notes in Computer Sciences, Vol. 2070. Springer-Verlag, Berlin Heidelberg New York (2001) 767–776
ˇ
6. Capkoviˇ
c, F.: Intelligent Control of Discrete Event Dynamic Systems. In: Koussoulas, N.T., Groumpos, P.P., Polycarpou, M. (eds.): Proc. of IEEE International
Symposium on Intelligent Control. IEEE Press, Patras, Greece (2000) 109–114
ˇ
7. Capkoviˇ
c, F.: Modelling and Control of Discrete Event Dynamic Systems. BRICS
Report Series, RS-00-26. University of Aarhus, Denmark (2000) 58 p.
ˇ
ˇ
8. Capkoviˇ
c, F.: A Solution of DEDS Control Synthesis Problems. In: Koz´
ak, S.,
Huba, M. (eds.): Control System Design. Proceedings of IFAC Conference. Pergamon, Elsevier Science. Oxford, UK (2000) 343–348
ˇ
9. Capkoviˇ
c, F.: Automated Solving of DEDS Control Problems. In: El-Dessouki, A.,
Imam, I., Kodratoﬀ, Y., Ali, M. (eds.): Multiple Approaches to Intelligent Systems.
Lecture Notes in Computer Science, Vol. 1611. Springer-Verlag, Berlin Heidelberg
New York (1999) 735–746
ˇ
10. Capkoviˇ
c, F.: Knowledge-Based Control Synthesis of Discrete Event Dynamic Systems. In: Tzafestas, S.G. (ed.): Advances in Manugacturing. Decision, Control and
Information Technology. Chapter 19. Springer-Verlag, London (1998) 195–206
11. Diestel, R.: Graph Theory. Springer-Verlag, New York (1997)
12. Peterson, J.L.: Petri Net Theory and Modeling the Systems. Prentice Hall, New
York (1981)
ˇ
13. Tzafestas, S.G., Capkoviˇ
c, F.: Petri Net-Based Approach to Synthesis of Intelligent
Control for DEDS. In: Tzafestas, S.G. (ed.): Computer Assisted Management and
Control of Manufacturing Systems, Chapter 12. Springer-Verlag, Berlin Heidelberg
New York (1997) 325–351

