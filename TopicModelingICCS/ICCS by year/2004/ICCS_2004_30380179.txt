Implementation and Evaluation of Integrity
Protection Facilities for Active Grids
Arso Savanovi´c1 , Duˇsan Gabrijelˇciˇc1 , Borka Jerman Blaˇziˇc1 , and Janez Beˇster2
1

Joˇzef Stefan Institute, Laboratory for Open Systems and Networks,
Jamova 39, 1000 Ljubljana, Slovenia,
2
University of Ljubljana, Laboratory for Telecommunications,
Trˇzaˇska 25, 1000 Ljubljana, Slovenia

Abstract. Some recent studies have shown that Grid systems can beneﬁt from active networks technologies, thus a novel networking paradigm
called Active Grid has been proposed. On the other hand, the development of appropriate security components for Grid systems is still in
an early stage due to complexity and mostly academic use of Grids to
date. However, security issues are exacerbated in Active Grids due to
the availability of processing and caching capacity in intermediate network nodes, which adds to Grid complexity. In this paper we describe
a set of facilities for protection of data integrity in Active Grids, and
then present and discuss some experimental results from validation and
evaluation test with the prototype implementation of these facilities.

1

Introduction

Some recent studies have shown that Grid systems can beneﬁt from active networks technologies [12,15,13], thus a novel networking paradigm called Active
Grid has been proposed. The main idea is to place active network nodes (ANNs)
at strategic points in the network and to make processing and caching capabilities of ANNs explicitly available to Grid applications. Examples of such Active
Grid conﬁgurations include Meta-cluster computing, where an ANNs is used as a
network head of each cluster or parallel computer, and Global computing, where
an ANN is used to manage a single Grid node or a collection of Grid nodes [12].
On the other hand, the development of appropriate security components for
Grid systems is still in an early stage, which is largely due to Grid complexity
and mostly academic use of Grids to date. Existing Grid toolkits do provide some
security features, e.g. [8,7,2], however many important challenges still lie ahead,
including but not limited to the Grid security requirements listed in [17]. These
open issues are even more challenging in Active Grids due to the availability
of processing and caching capacity in intermediate network nodes, which adds
to the already recognised complexity of Grids. In this paper we focus on one
aspect of security, the integrity service, and present a set of facilities for integrity
protection, which can be applied to Active Grids. These facilities are a part of
a comprehensive security architecture for active networks based systems [19],
which has been developed, implemented and tested within the FAIN project [6]
from the EU VI. Framework Programme.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 179–186, 2004.
c Springer-Verlag Berlin Heidelberg 2004

180

2

A. Savanovi´c et al.

On Integrity in Active Grids

An integrity service protects against unauthorised changes of data while in transit over the network, including both intentional change or destruction and accidental change or loss. Unauthorised changes include modiﬁcations, replay, and
spooﬁng of data.
With the growing industry support an important tendency in Grid development is gradual commercialisation of Grids, which increases the incentive for
unauthorised change of data, since this kind of mischief generates direct economic beneﬁts for the adversary. For illustration consider the following example.
A provider of a commercial computational Grid oﬀers processing capacity to
its customers in return for a ﬁnancial compensation. Assume that the use of
Grid is based on prepaid digital tokens. Obviously, there is an incentive for Grid
users to tamper with these tokens in order to reduce or even eliminate the costs
related to the use of commercial Grid resources. Without integrity protection
facilities in place, a skillful adversary would be able to cheat in diﬀerent ways,
e.g. : (a) buy a single token, but use it several times by replaying it to the Grid
accounting system, (b) change the nominal value of the token to allow the use
of more resources than what was originally paid for, or (c) sniﬀ the network
and intercept someone else’s tokens, then change the owner ID in these tokens,
eﬀectively stealing them.
Traditionally, integrity has been provided on an end-to-end basis, which is a
valid approach for current Grid systems, where Grid nodes are mapped to end
nodes and Grid application data is processed only at these end nodes. However,
the availability of ANNs in Active Grids makes it possible to process application
data at intermediate network nodes as well. Thus, Grid application data can
legally change while in transit over the network, which requires a diﬀerent approach to integrity protection. In fact, this requirement is not speciﬁc to Active
Grids but is valid in general for systems based on active networks technologies.

3

Integrity Protection Facilities for Active Grids

Even though Active Grids oﬀer Grid applications processing capabilities at intermediate network nodes, not all Grid application data require processing in these
nodes, i.e. Grid application data can be divided into two classes: static (end-toend) data and dynamic data. Consequently, our integrity protection service is
based on a combination of end-to-end protection and hop-by-hop protection.
Both types of protection are based on a speciﬁc packet format, which has to
provide for diﬀerent treatment of static and dynamic Grid application data. We
have adopted the ANEP, Active Networks Encapsulation Protocol [3], because of
its extensibility and because the majority of active network approaches support
it. In the context of ANEP we have deﬁned several options to support the FAIN
security architecture. These options carry a service identiﬁer (eg. label), hop
protection and credentials option related information, service variable data and
resource usage information. Integrity protection is based on the hop protection,
credential and variable data options.

Implementation and Evaluation of Integrity Protection Facilities

3.1

181

End-to-End Protection

The end-to-end protection is facilitated through the use of the ANEP credential
option. The credential option is generated at the source and is never modiﬁed.
Every receiver of the ANEP packet can verify the integrity of static data in
the ANEP packet by processing this option. The credential option is deﬁned by
the credential identiﬁer and type, location ﬁeld (specifying where the credentials
can be fetched), target ﬁeld (where the user can specify speciﬁc targets as nodes,
system layer or a packet itself), optional timestamp (protects against replays),
and the digital signature. The digital signature covers only static data within
an ANEP packet, which includes the ﬁrst 32 bits of basic ANEP header, source
address, service identiﬁer, ANEP payload, and the credential option itself except
digital signature data. There can be zero, one, or more credential options in a single ANEP packet. On each visited ANN the relevant credentials are fetched, the
certiﬁcation path is validated, and the digital signature is veriﬁed. We note that
the digital signature mechanism provides authentication of data origin and nonrepudiation security services in addition to the end-to-end integrity protection.
Various credential types are supported: X.509 certiﬁcates, attribute certiﬁcates [1], SPKI certiﬁcates or Keynote credentials [5]. Unless included in the
packet, the credentials can be fetched from a suitable store, e.g. DNS or LDAP.
In our case, we have designed and implemented a simple protocol that enables
fetching credentials from the previous hop ANN. In this way, the originating entity is responsible for supplying all the credentials, which may be required later
on the nodes that a packet traverses. To be able to supply credentials on the
intermediate nodes we have designed and implemented node credentials cache.
After successful validation, the credentials are cached on the node for the time
of their validity or according to the cache policy on cache size and maximum
time period of a cache entry. Caching credential has also other beneﬁts: if the
cache entry is valid, there is no need to validate the credentials. In this way we
can reduce required digital signature validation to only one per credential option
in the packet, which results in a signiﬁcant speed improvement, after the ﬁrst
principal packet has passed the node. Additionally, we cache bad credentials in a
separate cache in the cases, when the credentials cannot be veriﬁed. Subsequent
packets with bad credentials are discarded immediately.
3.2

Hop-by-Hop Protection

While the ANEP data option serves as a container for transporting dynamic
Active Grid application data, the hop-by-hop integrity protection is facilitated
with the ANEP hop protection option. Each ANN in an Active Grid maintains
a (separate) shared secret key with each of its neighbour ANNs. When an ANN
receives an ANEP packet, it a) uses the secret key it shares with the previous
hop ANN to process the hop protection option and thus check the integrity of
dynamic data in the ANEP packet, and b) uses the secret key it shares with the
next hop ANN to generate a new hop protection option before forwarding the
ANEP packet towards its destination.

182

A. Savanovi´c et al.

The hop protection option is deﬁned by a triple of Security Association (SA)
identiﬁer, which points to the respective association with a neighbour node,
sequence number ﬁeld, which protects against replays, and keyed hash. The keyed
hash covers the entire ANEP packet except the keyed hash itself. The per-hop
protection protects all ANEP packets exchanged between two neighbour ANNs.
When the packet leaves the node a new hop protection option is built based on
the respective SA for the next hop ANN.
Dynamic and scalable hop protection requires at least two supporting protocols. First, a SA setup protocol that supports setup and maintenance of SA
(including key exchange) between two neighbour ANNs, and second, a neighbour discovery protocol. For the former we have adopted the Station-to-Station
protocol [20], additionally protected with end-to-end protection, as described in
section 3.1. Neighbour discovery is described in the next section.

3.3

Neighbour Discovery

As seen above, the hop-by-hop integrity protection requires each ANN in an
Active Grid to keep an up-to-date list of all its neighbour ANNs. Manual conﬁguration of ANN neighbour lists is not acceptable due to scalability issues
and dynamic nature of Active Grids. We have therefore developed a protocol,
which enables ANNs in an Active Grid to automatically create a list of neighbour ANNs and update it whenever necessary due to changes in the network
infrastructure [18].
The protocol has three operation modes: node advertisements, discovery
handshake, and heartbeat exchange. ANNs advertise themselves by periodically
transmitting the advertisement message to an emulated communications bus,
which distributes the advertisement to all ANNs. The implementation of an emulated communications bus can be multicast-based, with one dedicated multicast
group per overlay, server-based, or a combination of both. Upon reception of an
advertisement an ANN starts a discovery handshake with the sender with probability p only in order to limit the load on the sender of the advertisement. The
discovery handshake is the main protocol mechanism for neighbour discovery and
detection of network changes. It involves an exchange of two messages between
the node, which initiates the handshake (poller), and the node, which responds
(responder). Both messages carry the address of the previous hop ANN, which
is used by ANNs en route for updating their neighbour tables when necessary. A
node periodically sends the heartbeat message to each of its known neighbours
to indicate that it is still alive. Neighbour ANNs use this message to refresh
the soft state in their neighbour tables. We note that neighbour discovery protocol employs packet interception, where an intermediate ANN intercepts and
processes the protocol message, even though the message is addressed to some
other node. Packet interception is inherently supported by ANNs [21] and is an
example of how Grid systems can beneﬁt from active network technologies.

Implementation and Evaluation of Integrity Protection Facilities

4

183

Proof-of-Concept Implementation and Experimental
Results

The proof-of-concept implementation of the facilities described above has been
developed in order to verify end evaluate the operation of the integrity service
provided by these facilities. The facilities have been tested in a series of lab tests
and demonstrated at the FAIN project Final Review and Demonstration Event.
The testing environment was set up on a commodity PC, with Intel P4
2.2 GHz processor, 512 MB RAM, Red Hat Linux 8.0, kernel 2.4.18-14, Java
SDK 1.3.1 3, the Bouncy Castle crypto-library version 1.17, and the FAIN ANN
code. In our tests ANEP packets carried basic ANEP header, a hop protection
option, a service identiﬁer option, a single credential option, a resource option
and a zero length variable option and payload. The keyed hash algorithm used
in the hop protection option was HMAC-SHA-1 [9]. The credential used was
an X.509 [1] based certiﬁcate signed with a combination of RSA encryption and
MD5 hash. The signature in the credential option, used for end-to-end protection,
was an RSA encrypted SHA-1 hash. The RSA key length was 768 bits and the
certiﬁcation path length was one.
Figure 1 shows the breakdown of the measured security costs related to an
ANEP packet traversing an ANN. The “hop” part represents the costs of processing the hop protection option, i.e. validating the option on the receiving side
and building a new option on the sending side. The “encoding/decoding” part
represents the costs of parsing a packet at the receiving side and forming a new
packet at the sending side. The “other costs” part represents the costs of ANN
building a security context of the packet. The “signature” part refers to the costs
of validating a credential and verifying the digital signature in the packet.
The left hand side of the ﬁgure depicts a case, when the user credential (certiﬁcate) is contained in the ANEP packet (but not yet veriﬁed), while the right
hand side of the ﬁgure depicts a case, when the user credential is already in
the cache. As expected, the largest overhead is due to the credential option processing, since this involves the costly asymmetric cryptography (RSA signatures
validation). With no caching of credentials, these costs represent as much as
85% of all security related costs, while the hop-by-hop protection related costs
represent around 8%. When credentials are cached (from previous packets), the
digital signature related costs are reduced to 50%. The hop-by-hop protection
related costs remain the same, however their percentage raises to 25% due to a
reduction of overall costs.
In absolute numbers, we were able to reach the ANN throughput of 396 packets per second without the credential cache. The use of the credential cache yields
the threefold improvement, i.e. an ANN is capable of handling 1190 packets per
second. When only hop-by-hop protection is activated, the ANN can handle more
than 7000 packets per second. Our measurements show that security related costs
are not drastically related to the RSA key size in current setup: in the case of
RSA512 the node can pass 1340 and in case of RSA1024 1003 packets per second.
We have also looked into the ways of reducing the performance overhead
induced by our protection facilities. A comparison of the Bouncy castle crypto-

184

A. Savanovi´c et al.

Fig. 1. Security related packet processing costs

graphic library with the OpenSSL library1 shows that the OpenSSL outperforms
the Bouncy castle by the factor of two for digital signature veriﬁcation (1428
vs. 3550 veriﬁcations per sec). Cryptographic accelerators like Broadcom based
BCM5821 cryptographic accelerator,2 show additional speed improvements with
very light utilisation of the main CPU (8142 signatures veriﬁcation per sec, less
then 1% CPU). Thus, integrating native libraries or accelerators should considerably improve performance of protection facilities presented in this paper and
enable ANNs to handle few thousands ANEP packets per second even with the
costly checking of digital signatures.
In comparison, the existing performance results for active networks based
systems are for simpler packet structures as in our case, and range from 6000 to
11000 packets per second in a similar environment, e.g ANTS [23] and Bees [22].
As far as authors are aware, so far no security nor cryptography related costs
were calculated or reported for active networks based systems.
With regards to the neighbour discovery, we were mostly interested in
the speed of neighbour discovery, i.e. the delay between the network change
and the corresponding updates of neighbour ANN tables. By varying diﬀerent
protocol parameters in our tests we were able to reach convergence delay in
the range of 30–40 seconds, i.e. our target values. We chose this target value
because the convergence delay of current routing protocol implementations
ranges from around 30s for OSPF [4] to several minutes for BGP [11]. We ﬁnd
the comparison with the routing protocols interesting due to the following.
As far as the authors are aware, no results on convergence delay are currently
available for related eﬀorts in the area of automatic discovery of neighbour
ANNs (e.g. [14]). On the other hand, routing protocols provide analogous
functionality to neighbour discovery protocol: after a perturbation occurs in
the network, the routing protocol has to accordingly reconﬁgure the physical
network (i.e. routes in the network) as soon as possible in order to minimise the
disruption in communication caused by the perturbation.

1
2

http://www.openssl.org
http://www.broadcom.com/products/5821.html

Implementation and Evaluation of Integrity Protection Facilities

5

185

Related Work and Conclusions

Some of the existing Grid toolkits provide support for integrity protection, see
e.g. [8,7,2], however these protection facilities are based on an end-to-end approach, i.e. they completely preclude modiﬁcations of data while in transit over
the network. This breaks the Active Grid model, which renders these integrity
protection facilities unsuitable for Active Grids.
In [10] authors have presented a framework for providing hop-by-hop security in active network testbeds. This framework is heavily based on oﬀ the shelf
security solutions. More importantly, the framework raises serious scalability
concerns, since it is centralised and involves manual conﬁguration of active network nodes. Thus, this work has demonstrated a more practical and short term
solution for existing testbeds based on active networks technologies rather than
a true long term security solution.
SANTS [16] provides a strong and relatively complete security solution for
active networks based systems. Integrity protection in SANTS is also based on
the separation of end-to-end and hop-by-hop concerns, and their solution is
similar to ours. However, in SANTS there is no mechanisms for automatic discovery and conﬁguration of neighbour active nodes, which is a basic prerequisite
for (scalable) hop-by-hop protection. Neither do they report on performance of
their prototype.
In this paper, we have presented a working example of a complete set of
integrity protection facilities suited for communications systems based on active networks technologies, including the novel paradigm of Active Grids. The
facilities are a part of a comprehensive security architecture, which has been
designed, implemented and evaluated within the EU FAIN project. This work
does not replace but rather complements the work in other Grid security eﬀorts,
e.g. within GGF.
In general, providing security is costly in performance terms, since strong security solutions employ cryptographic techniques. We believe that performance
results presented in this paper contribute towards better understanding of performance limits imposed by security facilities. Based on the performance results
from our evaluation tests with the prototype and existing reports on performance
of some active networks systems, we ﬁnd the performance of integrity protection
facilities completely suitable for the control and management planes of Active
Grids. In the transport plane, however, the integrity protection facilities may not
be able to meet the requirements of those Active Grid applications demanding
higher performance.

References
1. Information Technology - Open Systems Interconnection - The Directory: Publickey and Attribute Certiﬁcate Frameworks. International Standard, March 2000.
2. Uniform Interface to Computing Resources. UNICORE Plus Final Report, December 2002. http://www.unicore.org/.

186

A. Savanovi´c et al.

3. D. S. Alexander et. al. Active Network Encapsulation Protocol (ANEP). Active
Network Group draft, July 1997.
4. A. Basu and J. G. Riecke. Stability Issues in OSPF Routing. In Proceedings of
SIGCOMM 2001, pages 225–236, August 2001.
5. M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D. Keromytis. The KeyNote TrustManagement System, Version 2. RFC 2704, September 1999.
6. FAIN—Future Active IP Networks. http://www.ist-fain.org.
7. A. Ferrari et. al. A Flexible Security System for Metacomputing Environments.
Technical Report CS-98-36, University of Virginia, Charlottesville, VA 22903, USA,
December 1998.
8. Grid Security Infrastructure (GSI). http://www.globus.org/security/.
9. H. Krawczyk, M. Bellare, and R. Canetti. HMAC: Keyed-Hashing for Message
Authentication. RFC 2104, February 1997. Informational.
10. S. Krishnaswamy, J. B. Evans, and G. J. Minden. A Prototype Framework for
Providing Hop-by-Hop Security in an Experimentaly Deployed Active Network. In
Werner Bob, editor, Proceedings of DANCE 2002, pages 216–224. IEEE Computer
Society, 2002. May 29–30, 2002, San Francisco, USA.
11. C. Labovitz, A. Ahuja, A. Bose, and F. Jahanian. Delayed Internet Routing Convergence. In Proceedings of SIGCOMM 2000, pages 175–187, 2000.
12. L. Lef`evre et. al. Active Networking Support for the Grid. Lecture Notes in
Computer Science, 2207:16–33, 2001.
13. M. Maimour and C. Pham. An Active Reliable Multicast Framework for the Grids.
In International Conference on Computational Science (2), pages 588–597, 2002.
14. S. Martin and G. Leduc. RADAR: Ring-based Adaptive Discovery of Active neighbour Routers. In Proceedings of IWAN 2002, pages 62–73, December 2002.
15. N. Mohamed. Active Networks and Their Utilization in the Computational Grid.
Technical Report TR03-04-01, Engineering University of Nebraska-Lincoln, Lincoln, NE 68588-0115, April 2003.
16. S. L. Murphy, E. T. Lewis, and N. M. R. Watson. Secure Active Network Prototypes. In Werner Bob, editor, Proceedings of DANCE 2002, pages 166–181. IEEE
Computer Society, 2002. May 29–30, 2002, San Francisco, USA.
17. N. Nagaratnam et. al. The Security Architecture for Open Grid Services. GGF
Speciﬁcation, July 2002.
18. A. Savanovi´c and B. Jerman Blaˇziˇc. A Protocol for Adaptive Autoconﬁguration
of Active Networks. WSEAS Transactions on Communications, 2:78–83, 2003.
19. A. Savanovi´c, D. Gabrijelˇciˇc, B. Jerman Blaˇziˇc, and S. Karnouskos. An Active
Networks Security Architecture. Informatica, 26(2):211–221, 2002.
20. B. Schneier. Applied Cryptography: Protocols, Algorithms, and Source Code in C.
John Wiley and Sons, Inc., second edition, 1996.
21. J. M. Smith et. al. Activating Networks: A Progress Report. IEEE Computer
Magazine, pages 32–41, April 1999.
22. T. Stack, E. Eide, and J. Lepreau. Bees: A Secure, Resource-Controlled, JavaBased Execution Environment, December 2002.
http://www.cs.utah.edu/flux/janos/bees.html.
23. D. Wetherall, J. Guttag, and D. Tennenhouse. ANTS: Network Services Without
Red Tape. IEEE Computer, pages 42–48, Apr 1999.

