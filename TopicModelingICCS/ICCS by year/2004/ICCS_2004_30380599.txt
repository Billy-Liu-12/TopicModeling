REMARK – Reusable Agent-Based Experience
Management and Recommender Framework
Zoltan Balogh1 , Michal Laclavik1 , Ladislav Hluchy1 , Ivana Budinska1 , and
Krzysztof Krawczyk2
1

Institute of Informatics, SAS, Dubravska cesta 9, Bratislava 84237, Slovakia
{balogh.ui,laclavik.ui,hluchy.ui,utrrbudi}@savba.sk
2
ACC CYFRONET AGH, Nawojki 11, 30-950 Cracow, Poland
krafcoo@icsr.agh.edu.pl

Abstract. In this paper we introduce an advanced experience management and recommendation framework. The framework exploits software
agent technology to ensure distributed and robust functioning. In design
and implementation we use state of the art methodologies, technologies and tools. Ontology is used for modeling and describing knowledge.
The infrastructure is able to provide relevant recommendations to a requester entity based on recorded experiences from the past depending on
the current context of the environment. Such infrastructure is suitable
for environments where instant recommendation is required in a given
situation. A concrete example implementation of this framework is introduced in the public administration organization where employees need
knowledge according to their current work context which is represented
by activities in a workﬂow process.

1

Introduction

There are many experience management (EM) frameworks but each of them is
usually liaison to a concrete application area. Having a general reusable infrastructure for EM where ﬁnal implementation would not require redesign of the
whole system but only customization and maintenance of a knowledge model
is highly demanded. In this paper we describe such experience management
framework which employs software agent technology. Our aim was to make our
framework integrable with existing software so we do not create a barrier for
information ﬂows.
This introduction is followed by a section in which we give an overview of
relevant experience management systems and sketch the motivation of our work
(Section 2). The core framework is described in Section 3. CommonKADS is a
methodology for developing and maintaining knowledge management (KM) systems. We discuss the use of CommonKADS methodology for developing systems
based on our framework is Section 4. A project called Pellucid [8,9,10] being
This work was supported by EC Project Pellucid 5FP RTD IST-2001-34519 and
Slovak Scientiﬁc Grant VEGA 2/3132/23.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 599–606, 2004.
c Springer-Verlag Berlin Heidelberg 2004

600

Z. Balogh et al.

developed in scope of the 5th EU FP is introduced in section 5 as a veriﬁcation
of our framework. We conclude (in Section 6) with account of further possible
implementation areas for the framework.

2

Motivation and State of the Art

The goal of developing an EM system is to create a knowledge repository
that contains problem solving experiences for a complex problem domain that
changes over time. There have been proposed several systems which we examine
in this section.
HOMER [1] is a generic experience management architecture and a set of
related tools that stores the experience of the help-desk operators in a case base
and enable them to access, reuse, and extend the knowledge in a natural and
straightforward manner. HOMER has been developed mainly for realizing helpdesk and self-service experience management applications. An object-oriented
approach is used to model the experiences in HOMER. The system is implemented utilizing pure client-server architecture. Each request must be processed
by the server. Server is therefore the critical point of the overall architecture
what is typical for purely centralized architectures.
In [2] Lacher and Koch propose a theoretical reference agent-based knowledge
management framework called Knowledge Management Information Technology
(KM IT). Authors identiﬁed the advantages to employ software agents in KM
system. The framework is built of agencies made up of several agents each.
The agencies represent the organizational knowledge entities and manage the
respective information objects. Also a so called shared ontology is proposed
used for consistent communication among agencies as a basis for the user proﬁle
in the user agency and to specify information requests and replies. Even though
KM IT proposes to use agents and ontologies in EM system design, the whole
framework is purely theoretical with no implementation or veriﬁcation work.
In [3] authors describe a development of an Intranet-based knowledge management framework called KnowledgePoint in a consulting ﬁrm. The paper further introduces a simple ontology model of organizational knowledge. The article
is rather a case study than a scientiﬁc article. Anyhow very important implementation problems are raised here such as security or managerial issues in the
organization. Scientists often neglect such problems whereat those must be considered during the system design.
There are also other KM systems but they usually deal only with a concrete knowledge model design and implementation. Such projects are CoMMA
[4],DECOR [5], FRODO [6] or KnowMore [7].
All these above described systems address only a speciﬁc problem domain.
That makes these systems too specialized and therefore inappropriate as
candidates for generic EM framework. We aimed at developing a ﬂexible and
adaptable platform for enhancing EM in organizations. The framework is a set
of methods, tools and reusable components that may be applied to develop
further EM applications.

REMARK

3

601

Framework Description

Herein we describe the component architecture for advanced experience management. The main goal was to create a general infrastructure for EM. The
infrastructure is primarily intended for use for human users, but can be easily
applied to serve computational clients as well. Henceforward we will refer to any
entity which is served from the framework as client. The overall framework is on
the ﬁgure bellow.

Fig. 1. The REMARK framework

Processing of knowledge in the infrastructure is fulﬁlled in three stages
which are typical for the EM domain: capture, capitalization and reuse. In the
capture phase knowledge is recorded. Additional reasoning and data mining is
performed in the capitalization phase where the inferred knowledge is produced.
Recorded and inferred knowledge is then used to assist users in the reuse phase.
The core of the framework is the Processing Infrastructure (PI). PI has the
following components:
–
–
–
–
–

Corporate Memory (CM),
Monitoring Subsystem (MSS),
Reasoning Subsystem (RSS),
Post-processing Subsystem (PPSS),
Recommender Subsystem (RSS).

There are also monitors and sensors which are part of the framework
but are not executed inside the PI. Monitors/sensors need to be executed on
the application side with enabled active environment sensing and monitoring
interfaces. Software agents have been chosen for the overall implementation of
the framework. The main advantage of using agent technology is the distributed
nature of agents, their well established communication infrastructure based on
ontology and execution autonomy and mobility (required mainly for sensors
and monitors).

602

Z. Balogh et al.

All the information stored in scope of the framework is modeled by the ontology, what is simply the object model of the real world. The ontology is extensible,
what makes also the framework open. We have identify the need for:
– a Generic Ontology which is usable for any application and
– a Domain-Speciﬁc Ontology which is speciﬁc for concrete application domain.
The Knowledge Gathering Environment (KGE) was separated from the
Knowledge Exploitation Environment (KEE) in the schema. KGE is simply the
environment in which the knowledge is gathered. KEE is monitored and depending on the context concrete experience is recommended to the client. KGE can
be but must not be identical with KEE. The knowledge is gathered from KGE by
Sensor Agents (SA) or directly from a running model or simulation. SA communicates the captured information to the Monitoring Agent (MA) which records
the information to the CM. The structure of information monitored by SA is:
– the context of selected properties of the KGE and
– the events performed in the KGE.
Both context and events must be modeled by ontology. In simpler cases
context can be modeled as part of the event concept and therefore only events
need to be modeled. In most cases events and context will share some common
general and domain-speciﬁc concepts.
Stored contexts and events are processed by the Reasoning Agent (RE) which
generates active experiences in various forms. These experiences are stored as
inferred knowledge in the CM. The structure of possible recommendations presented to the client is pre-modeled. The set of pre-modeled recommendations
can be extended according to application needs.
SA are used also to monitor the context of the KEE. SA communicates
the monitored information to the Recommender Agent (RCA). If RCA ﬁnds
knowledge which is valuable for the client in the current context it will return the
knowledge to client. RCA may utilize Task Agents (TA) for concrete experience
retrieval from the CM. The recommendation is handed over to Personal Assistant
Agent (PAA) in a case when the client is a human user.

4

Development Methodology

CommonKADS [11] methodology is standard for developing knowledge management systems and can be very well used for creating model for our experience
management framework. It contains of several standard model describing a problem domain:
– Organizational Model, which describes organization structure, its goals, and
also problem domain of concrete application;
– Task Model describes tasks preformed in organization;

REMARK

603

– Agent Model describes actors involved in organization and it can be humans
or computer systems involved in performing tasks;
– Knowledge and Communication Model are created from 3 models above and
describes knowledge and communication between actors and
– Design Model comes from Knowledge and Communication model and describes how system should be implemented.
Knowledge model is basically ontology which describes entities (users, problems, application/domain related terms, resources) and its relation in the organization. In our framework we utilize DAML+OIL [15] based on XML/RDF for
interfacing with existing systems and also for processing of knowledge results.

5

Framework Implementation

The described framework was veriﬁed in the Pellucid (IST-2001-34519) EU
project [8]. The aim of the Pellucid platform is to provide assistance for organizationally mobile employees. Capture and capitalization of employee’s knowledge
in public organizations was the main interest in the project. Workﬂow process
is used as a work context for knowledge creation, capitalization and reuse. It
means that each event or action performed in an organization is stored in respect to the current workﬂow process status. Stored and capitalized knowledge
is then recommended to other employees as they work on particular tasks in the
process.
Knowledge ontology was created according to the application. First we have
created an Organizational Model (Fig 2).

Fig. 2. Organizational Model of the Pellucid Framework

604

Z. Balogh et al.

Fig. 3. Model of Resources in the Pellucid System

Fig. 4. Ontology Model in Pellucid

In scope of the Organizational Model we have also identiﬁed roles of the actors
involved in organization together with their descriptions. As another important
model all relevant resources in the organizations were modeled (Fig 3).
All the described ontologies create the generic ontology for any workﬂow
driven application in public sector organizations. There are also three pilot sites

REMARK

605

were the Pellucid platform is installed. For all of these pilot sites a domainspeciﬁc ontology had to be created.
Active Hints (AH) were created as examples of inferred knowledge. It was
deﬁned that AH is composed according to the following formula:
[ACTIVE_HINT] = [WORK_CONTEXT] + [ACTION] + [RESOURCE] +
[EXPLANATION]
The matching of the proper AH is then driven by the following condition:
If [ACTIVE_HINT].[WORK_CONTEXT] = [CURRENT].[WORK_CONTEXT]
Then Display [ACTIVE_HINT]
It is a simple rule which matches any AH from the CM which matches the
users current work context. All the concepts from the formulas are modeled in
the ontologies (see Fig. 3). Personal Assistant Agent was created to communicate
the Active Hints returned from Pellucid to the end-user.
The ontology on Fig. 4 is the Design Model of the Pellucid platform according
to the CommonKADS methodology. Eeach important ontology is included thus
creating the overal model of the application domain.
In our framework we utilize DAML+OIL language for interfacing with
existing systems, for interfacing among agents and also for processing of
knowledge results. For system implementation we use the HP Jena library
[12] which supports DAML+OIL and RDF models. Jena library also includes
the RDQL query language and specialized query engine which is useful for
reasoning and querying knowledge in the CM. We use JADE [13,14] as the
agent implementational platform.

6

Conclusion

Our experience management framework can be used not only for public administrational organizations, but also for other application areas. One of possible applications is military combat strategy recommendation system where the
knowledge base is build from real world combat situations or virtual combat simulations. Context of the situation can be represented for example by geographical
location of the combat troop. The recommendations can be transmitted to objects from satellites to wireless devices. Analogical research and development
project is being prepared in conjunction with the Slovak Military Academy as a
veriﬁcation of our framework. Disease diagnosis and cure recommendation system is another application area this once from medical environment. In such case
the context can be represented by patient’s health condition, patient’s physiological measures and patient’s medical record. There are further possibilities for
the exploitation of our framework including recommender system for consultation companies or help desk applications. In the future we plan to continue
developing our framework for the above mentioned application areas.

606

Z. Balogh et al.

References
1. Goker, M. and T. Roth-Berghofer (1999). The development and utilization of casebased help-desk support system HOMER. Engineering Applications of Artiﬁcial
Intelligence 12(6), 665-680.
2. Lacher S. and Koch M. (2000). An Agent-based Knowledge Management Framework.
3. Sarkar R. and Bandyopadhyay S. Developing an Intranet-based Knowledge Management Framework in a Consulting Firm: A Conceptual Model and its Implementation.
4. CoMMA project, http://www.si.fr.atosorigin.com/sophia/comma/
5. DECOR: Delivery of Context-Sensitive Organizational Knowledge, project outline
at http://www.dfki.uni-kl.de/decor/deldec/D1-Final.pdf.
6. Abecker, A., Bernardi, A., van Elst, L., Lauer, A., Maus, H., Schwarz, S., Sintek, M.
(2001) “FRODO: A framework for distributed organizational memories. Milestone
M1: Requirements analysis and system architecture”, DFKI Document D-01-01,
DFKI GmbH.
7. Abecker, A., Bernardi, A., Hinkelmann, K., K¨
uhn, O., Sintek, M. “Context-aware,
proactive delivery of task-speciﬁc knowledge: The KnowMore project”, International Journal on Information Systems Frontiers, 2000, 2(3/4), pp. 139-162.
8. Pellucid – A Platform for Organisationally Mobile Public Employees, EU IST2001-34519 Project, 2002, http://www.sadiel.es/Europa/pellucid/.
9. M. Laclavik, Z. Balogh, L. Hluchy, G. T. Nguyen, I. Budinska, T. T. Dang: Pellucid
Agent Architecture for Administration Based Processes, IAWTIC 2003, Vienna
(2003).
10. R. Slota, M. Majewska, M. Dziewierz, K Krawczyk, M. Laclavik, Z. Balogh, L.
Hluchy, J. Kitowski, S. Lambert: Ontology Assisted Access to Document Repositories for Public Sector Organizations. PPAM Conference (2003).
11. CommonKADS.
12. Jena (A Semantic Web Framework for Java) Homepage,
http://jena.sourceforge.net/.
13. JADE (Java Agent DEvelopment Framework) Homepage,
http://agentcities.cs.bath.ac.uk/docs/jade/.
14. Giovani Caire (2002). JADE Tutorial Application-deﬁned Content Languages and
Ontol-ogy, http://jade.cselt.it/.
15. DAML (DARPA Agent Markup Language) Homepage, http://www.daml.org/.

