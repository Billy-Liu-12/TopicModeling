The ReLPM Exponential Integrator for FE
Discretizations of Advection-Diﬀusion
Equations
Luca Bergamaschi1 , Marco Caliari2 , and Marco Vianello3
1

3

Dip.to di Met. e Mod. Mat. per le Scienze Appl., Universit`
a di Padova
2
Dip.to di Informatica, Universit`
a di Verona
Dip.to di Mat. Pura ed Appl., Universit`
a di Padova, marcov@math.unipd.it

Abstract. We implement an exponential integrator for large and sparse
systems of ODEs, generated by FE (Finite Element) discretization with
mass-lumping of advection-diﬀusion equations. The relevant exponentiallike matrix function is approximated by polynomial interpolation, at
a sequence of real Leja points related to the spectrum of the FE matrix (ReLPM, Real Leja Points Method). Application to 2D and 3D
advection-dispersion models shows speed-ups of one order of magnitude
with respect to a classical variable step-size Crank-Nicolson solver.

1

The Advection-Diﬀusion Model

We consider the classical evolutionary advection-diﬀusion problem

∂c


= div(D∇c) − div(cv) + φ x ∈ Ω, t > 0



 ∂t
c(x, 0) = c0 (x)
x∈Ω

 c(x, t) = gD (x, t)
x ∈ ΓD , t > 0




D∇c(x, t), ν = gN (x, t)
x ∈ ΓN , t > 0

(1)

with mixed Dirichlet and Neumann boundary conditions on ΓD ∪ ΓN = ∂Ω,
Ω ⊂ IRd , d = 2, 3; cf. [1]. Equation (1) represents, e.g., a simpliﬁed model for
solute transport in groundwater ﬂow (advection-dispersion), where c is the solute
concentration, D the hydrodynamic dispersion tensor, Dij = αT |v|δij + (αL −
αT )vi vj /|v|, 1 ≤ i, j ≤ d, v the average linear velocity of groundwater ﬂow and
Work supported by the research project CPDA028291 “Eﬃcient approximation methods for nonlocal discrete transforms” of the University of Padova, and by the
subproject “Approximation of matrix functions in the numerical solution of diﬀerential equations” (co-ordinator M. Vianello, University of Padova) of the MIUR
PRIN 2003 project “Dynamical systems on matrix manifolds: numerical methods
and applications” (co-ordinator L. Lopez, University of Bari). Thanks also to the
numerical analysis group at the Dept. of Math. Methods and Models for Appl. Sciences of the University of Padova, for having provided FE matrices for our numerical
tests, and for the use of their computing resources.
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 434–442, 2004.
c Springer-Verlag Berlin Heidelberg 2004

The ReLPM Exponential Integrator

435

φ the source (cf. [2,3]). The standard Galerkin FE discretization of (1) nodes
N
{xi }N
i=1 and linear basis functions {ϕi }i=1 [4], gives the linear system of ODEs
P z˙ = Hz + b + q,

t>0

(2)

z(0) = c0

where z = [z1 (t), . . . , zN (t)]T , c0 = [c0 (x1 ), . . . , c0 (xN )]T , P is the symmetric
positive-deﬁnite mass matrix, H the (nonsymmetric) stiﬀness matrix and
bi ≈

φ ϕi dΩ,
supp(ϕi )

qi ≈

ΓN ∩supp(ϕi )

gN ϕi dΓN ,

i = 1, . . . , N .

(3)

As it is known, such a basic FE discretization makes sense numerically only on
suﬃciently ﬁne grids (small grid P´eclet numbers). Otherwise, special stabilization techniques should be adopted, like Petrov-Galerkin upwinding; see [1].
Actually, system (2) does not take into account yet of possible Dirichlet
conditions: we discuss in detail their treatment within the next sections.

2

An Exponential Integrator via Mass-Lumping

In the sequel we consider stationary velocity, source and boundary conditions
in (1), which give a system of ODEs like (2) with constant H, b and q. Such a
system can be rewritten in the form
z˙ = P −1 Hz + φ + P −1 q, t > 0
z(0) = c0
which is suitable for the application of exponential integrators (cf. [5,6,7]). Observe that φ = P −1 b since we chose b = P [φ(x1 ), . . . , φ(xN )]T in (3). In order to
impose the lacking Dirichlet conditions we make vanishing the i-th row of P −1
and of φ (recall that gD is stationary) and substitute the i-th component of the
initial vector c0 with gD (xi ), if xi ∈ ΓD , obtaining P −1 , φ and c0 . In practice,
the system above is modiﬁed into
c˙ = P −1 Hc + φ + P −1 q, t > 0
c(0) = c0

(4)

System (4) is now the discrete approximation of the PDE (1), where the Dirichlet
conditions have been artiﬁcially imposed also to the initial data c0 .
As known, the solution can be written explicitly in the exponential form
c(t) = c0 + tϕ(tP −1 H)[P −1 H c0 + φ + P −1 q] ,
where ϕ(z) is the entire function ϕ(z) = (ez − 1)/z if z = 0, ϕ(0) = 1. Clearly,
availability of matrix P −1 (and thus P −1 ) is a computationally expensive task:

436

L. Bergamaschi, M. Caliari, and M. Vianello

so, we can apply the well known mass-lumping technique (sum on the diagonal
of all the row elements) to P in order to obtain a diagonal matrix PL (and,
immediately, PL−1 and PL−1 ); cf. [1,8]. Now we can consider the transformed
system (4) with P −1 replaced by PL−1 , and apply the exact and explicit timemarching scheme (see the work by Schaefer [5] for FD spatial discretization)
ck+1 = ck + ∆tk ϕ(∆tk HL )v k ,

k = 0, 1, . . . ,

c0 = c0 ,

(5)

where we have deﬁned HL = PL−1 H and v k = HL ck + φ+ PL−1 q. Exactness of the
exponential integrator (5) entails that the time-steps ∆tk can be chosen, at least
in principle, arbitrarily large with no loss of accuracy, making it an appealing
alternative to classical ﬁnite-diﬀerence integrators (cf. [6,7,9]).
However, the practical application of (5) rests on the possibility of approximating eﬃciently the exponential operator ϕ(∆tHL )v, where v ∈ IRN . To this
aim, two classes of polynomial methods are currently used. We have Krylov-like
methods, which are based on the idea of projecting the operator on a “small”
Krylov subspace of the matrix via the Arnoldi process, and typically involve
long-term recurrences in the nonsymmetric case; see, e.g., [10,11,12], and [13,
14] for other (nonstandard) Krylov-like approaches. The second class consists
of methods based on polynomial interpolation or series expansion of the entire
function ϕ on a suitable compact subset containing the spectrum (or in general
the ﬁeld of values) of the matrix (e.g. Faber and Chebyshev series, interpolation at special points like Faber, Fej´er and Leja points). They typically require
some preliminary estimate of the underlying spectral structure, but, despite of
this, this second class of methods turned out to be competitive with Krylovbased approaches, especially on very large nonsymmetric matrices, cf. [15,16,17,
18,19]. In this work we adopt the Real Leja Points Method (shortly ReLPM),
recently proposed in the frame of FD spatial discretization of advection-diﬀusion
equations [9].

3

Computing the Exponential Operator by the ReLPM
(Real Leja Points Method)

Sequences of Leja points {zj }∞
j=0 for the compact K ⊂ C are deﬁned recursively
as follows: if z0 is an arbitrary ﬁxed point in K (usually such as |z0 | = maxz∈K |z|,
cf. [20]), the zj are chosen in such a way that
j−1

j−1

|zj − zk | = max
k=0

z∈K

|z − zk |,

j = 1, 2, . . .

k=0

By the maximum principle, the Leja points for K lie on ∂K. We recall that an
eﬃcient algorithm for the computation of a sequence Leja points, the so-called
Fast Leja Points, has been recently proposed in [21].
Now, for any ﬁxed compact set K with more than one point, there is a
function Φ which maps the exterior of K conformally onto the exterior of the unit

The ReLPM Exponential Integrator

437

disk, and satisﬁes in particular the condition limz→∞ Φ(z)/z = γ, where γ > 0
is called capacity of K (cf. [22]). For any R > 0, deﬁne ΓR = {z : |Φ(z)| = R/γ}
and KR the bounded domain with boundary ΓR ; observe that Kγ = K, KR has
capacity R, and KR1 ⊆ KR2 if R1 ≤ R2 . Let f be an entire function: it is well
known [22,20] that the sequence of polynomials pm of degree m that interpolate
f on the Leja points {zj }m
j=0 for K converges maximally to f on every KR ,
i.e. asymptotically like the best uniform approximation polynomials, and thus
superlinearly, that is
1/m
lim sup f − pm KR = 0 .
m→∞

Moreover, Leja sequences are attractive for interpolation at high-degree, in
view of the stability of the corresponding algorithm in the Newton form (cf. [20]).
From these properties, we can derive a stable and eﬃcient polynomial approximation method for the matrix operator ϕ in (5). In fact, cf. [17], if {pm }
converges maximally to the entire function f on a compact K, then
lim sup f (A)v − pm (A)v
m→∞

1/m
2

=0 .

(6)

In particular, if R is such that the spectrum σ(A) of the matrix A ∈ IRN ×N is
contained in KR , and if A = X −1 ΛX is diagonalizable, we have the estimate
f (A)v −pm (A)v

2

≤ cond2 (X)· f −pm

KR ·

v

2

=O

e·R
m

m+1

, (7)

for m ≥ m0 > R. More reﬁned convergence estimates (even in the nondiagonalizable case) can be obtained by resorting to the notions of pseudospectra and
ﬁeld of values of A; cf. [17,9].
Following [9], an algorithm for the approximation of the advection-diﬀusion
FE propagator ϕ(∆tHL )v can be now easily developed, by means of Newton
interpolation at “spectral” Leja points. In the sequel, the compact subset used
for estimating the spectrum of HL in (5) will be an ellipse in a suitable family of
confocal ellipses {KR }, where K = Kc/2 = [d−c, d+c] ⊂ IR is the common focal
interval. Note that we restrict our attention to ellipses symmetric with respect
to the real axis, since in our application we deal with real matrices. Moreover,
it makes sense to consider a real focal interval, since the numerically evaluated
spectra of HL with small grid P´eclet number have an horizontal projection larger
than the vertical projection. The advantage of working with such confocal ellipses
stems from complex approximation theory: if the spectrum σ(∆tHL ) is contained
in KR for some R, then a sequence of polynomials converging maximally to ϕ
on Kc/2 = [d − c, d + c] converges maximally also on KR (cf. [22]), and thus the
corresponding sequence of matrix polynomial operators converges maximally to
ϕ(∆tHL )v; cf. (6)–(7). Thus we are entitled to interpolate on Leja points of the
focal interval [d − c, d + c] ⊂ IR, working with real instead of complex arithmetic
(as it would be required interpolating directly on the complex Leja points of
some ellipse of the family). Clearly, a key step in this procedure is given by

438

L. Bergamaschi, M. Caliari, and M. Vianello

estimating at low cost the reference focal interval for the spectrum of ∆tHL .
Following [5] and [9], which deal with FD discretizations, we adopt the simplest
estimate given directly by Gershgorin’s theorem.
We can now sketch the algorithm for Leja points interpolation (ReLPM) of
the advection-diﬀusion propagator ϕ(∆tHL )v in Table 1. The ReLPM algorithm
Table 1. Algorithm ReLPM (Real Leja Points Method)

–
–
–
–
–

Input: HL , v, ∆t, tol
Estimate the spectral focal interval [d−c, d+c] for ∆tHL , by Gershgorin’s theorem
Compute a sequence of Fast Leja Points {ξj } in [d − c, d + c] as in [21]
d0 := ϕ(ξ0 ), w0 := v, p0 := d0 w0 , m := 0
while eLeja
:= |dm | · wm 2 > tol
m
• wm+1 := (∆tHL − ξm I)wm
• m := m + 1
• compute the next divided diﬀerence dm
• pm := pm−1 + dm wm
– Output: the vector pm : pm − ϕ(∆tHL )v 2 ≈ eLeja
≤ tol
m

turns out to be quite simple and eﬃcient. Indeed, being based on two-term
vector recurrences in real arithmetic, its storage occupancy and computational
cost are very small. For implementation details not reported in Table 1, we refer
to [9]. We only stress that ReLPM is very well structured for a possible parallel
implementation, since it uses only sparse matrix-vector multiplications and basic
vector operations, but no inner product.

4

Application: 2D and 3D Advection-Dispersion Models

We present now three examples (cf. [13]), concerning application of the ReLPM
exponential integrator (5) to advection-dispersion models like (1), together with
the comparison with the classical variable step-size Crank-Nicolson solver.
Example 1. As ﬁrst numerical test, we consider problem (1) on the 2D rectangular domain Ω = [0, 1] × [0, 0.5], with a regular grid of N = 161 × 81 = 13041
nodes and M = 25600 triangular elements. Here, φ ≡ 0 and c0 ≡ 1. Dirichlet
boundary conditions c = 1 for 0.2 ≤ y ≤ 0.3 and c = 0 elsewhere are imposed on ΓD = {0} × [0, 0.5]; the Neumann condition ∂c/∂ν = 0 is prescribed on
ΓN = ∂Ω \ ΓD . The velocity is v = (v1 , v2 ) = (1, 0), and αL = αT = 0.00625.
Example 2. The second numerical test is the extension of the ﬁrst on a 3D
domain Ω = [0, 1]×[0, 0.5]×[0, 1], with a regular grid of N = 81×41×9 = 29889

The ReLPM Exponential Integrator

439

nodes and M = 153600 tetrahedral elements. The boundary conditions of the
previous test are extended along the z axis, while we have taken the peaked initial
data c0 = [1, . . . , 1, 100, 1, . . . , 1]T . The velocity is v = (v1 , v2 , v3 ) = (1, 0, 0), and
αL = αT = 0.0125.
Example 3. In the last numerical test, the domain is the unit circle with a mesh
consisting of N = 35313 nodes and M = 245997 triangular elements, generated
by the triangle software of Shewchuk (available at www.netlib.org/voronoi).
Dirichlet boundary condition c = 0 are imposed on the whole boundary. The
velocity is v = (v1 , v2 ) = (1, 1), and αL = αT = 0.00625; moreover c0 ≡ 1, and
the source is constant and negative, φ ≡ −1.
4.1

Crank-Nicolson (CN) Method

Although Crank-Nicolson (CN) method might not be considered the best choice
for time integration of advection-diﬀusion problems, it is a robust method still
widely used in engineering applications, and a sound baseline benchmark for any
advection-diﬀusion solver (cf. [13]). In the case of the relevant ODEs system (2)
(with stationary b and q), its variable step-size version writes as
P−

hk
H uk+1 =
2

P+

hk
H uk + hk (b + q),
2

k = 0, 1, . . . ,

u0 = c 0 .

In order to impose Dirichlet conditions, we change the i-th row of the system
matrix above with the basis vector ei and the i-th component of the right hand
side with the value of gD (xi ), if xi ∈ ΓD . The linear system is solved by the
biconjugate gradient stabilized method, preconditioned at each step (since the
system matrix depends on hk ) with the incomplete triangular factor and no
...
ﬁll-in. As for estimation of the local truncation error O( c (tk ) 2 h3k ) and stepsize control, we have used standard ﬁnite-diﬀerence approximation of the third
derivatives.
4.2

Numerical Tests and Comparisons

In Table 2 we have compared the absolute and relative errors with respect to the
˙
“exact” solution for Example 1 at the “steady” state t = 1.3 (where c(1.3)
2 ≤
10−2 · c0 2 ). The reference solution has been computed by CN with a local
tolerance equal to 10−6 , whereas the comparison of the errors is made using a
local tolerance of 10−4 for both methods (namely “tol” for the ReLPM algorithm
in Table 1), which guarantees an error of the order of the spatial discretization
error. Note that ReLPM is more accurate than CN at the ﬁnal time, which shows
that the mass-lumping technique does not signiﬁcantly degrade the accuracy of
the exponential integrator (5).
While for CN the local time-step is selected adaptively, in order to guarantee
a local error below the given tolerance, for scheme (5) there is no restriction on
the choice of ∆tk , since it is exact for autonomous linear systems of ODEs. To

440

L. Bergamaschi, M. Caliari, and M. Vianello
Table 2. Comparison of absolute and relative errors for Example 1
CN

ReLPM η = 0.1 ReLPM η = 0.5

abs. err. 3.5 · 10−2

4.7 · 10−3

4.8 · 10−3

−3

−4

1.4 · 10−4

rel. err. 1.0 · 10

1.4 · 10

follow with some accuracy the evolution of the solution, we propose as in [9] to
select the local time-step in (5) in such a way that the relative variation of the
solution be smaller than a given percentage η, that is
ck+1 − ck

2

≤ η · ck

2,

0<η<1 .

(8)

If condition (8) is not satisﬁed, the time step ∆tk is halved and ck+1 recomputed;
if it is satisﬁed with η/2 instead of η, the next time-step ∆tk+1 is doubled.
Tables 3–5 show that the ReLPM exponential integrator is always faster than
CN method, with speed-ups (ratio between CPU times) ranging from 5.1 to 16.2.

Table 3. Comparison of CN and ReLPM for Example 1 (constant initial data)
CN
# time-steps CPU s.
451

37.47

ReLPM
η
# time-steps CPU s. Speed-up
0.1
41
7.33
5.1
0.25
17
4.62
8.1
0.5
11
4.02
9.3
0.75
8
3.68
10.2

Table 4. Comparison of CN and ReLPM for Example 2 (peaked initial data)
CN
# time-steps CPU s.
385

ReLPM
η
# time-steps CPU s. Speed-up
0.1
44
27.53
7.2
0.25
22
19.94
9.9
198.24
0.5
11
15.37
12.9
0.75
9
12.26
16.2

Table 5. Comparison of CN and ReLPM for Example 3 (constant initial data)
CN
# time-steps CPU s.
1079

ReLPM
η
# time-steps CPU s. Speed-up
0.1
90
66.24
7.7
0.25
38
41.53
12.2
507.36
0.5
21
36.09
14.0
0.75
15
32.09
15.8

Note that the local tolerance for Examples 1 and 2 has been chosen equal
to 10−4 , that is the order of spatial discretization error, whereas in Example 3

The ReLPM Exponential Integrator

441

equal to 10−5 , to match the ﬁner accuracy of the FE discretization. Finally,
Fig. 1 shows that even the choice of the variation percentage η = 0.5 allows to
track with suﬃcient accuracy the evolution of the solution, with much less steps
than CN, exhibiting speed-ups of one order of magnitude.
200

200
CN
ReLPM η=0.5

CN
ReLPM η=0.5

150
Euclidean norm

Euclidean norm

150

100

50

100

50
0

1

0,5
time

1,5

0

1

0,5

1,5

time

Fig. 1. Evolution of the norm of the solution computed by the CN method and the
ReLPM (η = 0.5) for Example 2 (left) and Example 3 (right)

References
1. Hundsdorfer, W., Verwer, J.G.: Numerical Solution of Time-Dependent AdvectionDiﬀusion-Reaction Equations. Volume 33 of Springer series in Computational Mathematics. Springer-Verlag, Berlin (2003)
2. Wood, W.L.: Introduction to numerical methods for water resources. Oxford
Science Publications. The Clarendon Press, Oxford University Press, New York
(1993)
3. Fetter, C.W.: Applied Hydrogeology. Prentice Hall (2000)
4. Thom´ee, V.: Galerkin ﬁnite element methods for parabolic problems. SpringerVerlag, Berlin (1997)
5. Schaefer, M.J.: A polynomial based iterative method for linear parabolic equations.
J. Comput. Appl. Math. 29 (1990) 35–50
6. Gallopoulos, E., Saad, Y.: Eﬃcient solution of parabolic equations by Krylov
subspace methods. SIAM J. Sci. Statist. Comput. 13 (1992) 1236–1264
7. Hochbruck, M., Lubich, C., Selhofer, H.: Exponential integrators for large systems
of diﬀerential equations. SIAM J. Sci. Comput. 19 (1998) 1552–1574
8. Vanselow, R.: Error estimates of a FEM with lumping for parabolic PDEs. Computing 68 (2002) 131–141
9. Caliari, M., Vianello, M., Bergamaschi, L.: Interpolating discrete advectiondiﬀusion propagators at Leja sequences. Preprint, to appear in J. Comput. Appl.
Math. (2003)
10. Hochbruck, M., Lubich, C.: On Krylov subspace approximations to the matrix
exponential. SIAM J. Numer. Anal. 34 (1997) 1911–1925
11. Saad, Y.: Analysis of some Krylov subspace approximations to the matrix exponential operator. SIAM J. Numer. Anal. 29 (1992) 209–228

442

L. Bergamaschi, M. Caliari, and M. Vianello

12. Sidje, R.B.: Expokit. A Software Package for Computing Matrix Exponentials.
ACM Trans. Math. Software 24 (1998) 130–156
13. Pini, G., Gambolati, G.: Arnoldi and Crank-Nicolson methods for integration in
time of the transport equation. Int. J. Numer. Meth. Fluids 35 (2001) 25–38
14. Moret, I., Novati, P.: RD rational approximation of the matrix exponential. Preprint, to appear in BIT (2003)
15. Bergamaschi, L., Vianello, M.: Eﬃcient computation of the exponential operator
for large, sparse, symmetric matrices. Numer. Linear Algebra Appl. 7 (2000) 27–45
16. Bergamaschi, L., Caliari, M., Vianello, M.: Eﬃcient approximation of the exponential operator for discrete 2D advection-diﬀusion problems. Numer. Linear Algebra
Appl. 10 (2003) 271–289
17. Moret, I., Novati, P.: The computation of functions of matrices by truncated Faber
series. Numer. Funct. Anal. Optim. 22 (2001) 697–719
18. Moret, I., Novati, P.: An interpolatory approximation of the matrix exponential
based on Faber polynomials. J. Comput. Appl. Math. 131 (2001) 361–380
19. Novati, P.: A polynomial method based on Fej´er points for the computation of
functions of unsymmetric matrices. Appl. Numer. Math. 44 (2003) 201–224
20. Reichel, L.: Newton interpolation at Leja points. BIT 30 (1990) 332–346
21. Baglama, J., Calvetti, D., Reichel, L.: Fast Leja points. Electron. Trans. Numer.
Anal. 7 (1998) 124–140
22. Walsh, J.L.: Interpolation and approximation by rational functions in the complex
domain. Volume XX of Amer. Math. Soc. Colloq. Publ. AMS (1935)

