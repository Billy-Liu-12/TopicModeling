PRED: Prediction-Enabled RED
Min Gyo Chung and Euinam Huh
Dept. of Computer Science, Seoul Women’s University, Seoul, Korea
{mchung,huh}@swu.ac.kr

Abstract. This paper proposes a router congestion control mechanism
called PRED (Prediction-enabled RED), a more adaptive and proactive
version of RED (Random Early Detection). In essence, PRED predicts
its queue length for an early detection of possible congestion alerts in the
near future and operates adaptively to the predicted changes in traﬃc
patterns. Typically, PRED does this by ﬁrst making prediction about average queue length and then using the predicted average queue length to
adjust three classic RED parameters maxth , minth , and maxp . The incoming packets after the adjustment are now being dropped with the new
probability deﬁned by updated parameters. Due to its adaptability and
proactive reaction to network traﬃc changes, PRED can be considered
as a novel solution to dynamically conﬁgure RED. Extensive simulation
results from NS-2 simulator are presented to verify the performance and
characteristics of PRED.

1

Introduction

DT (Drop Tail) and RED (Random Early Detection) [1] are two well-known
router congestion control algorithms. DT discards the packets when the queue
becomes full, but RED drops the packets randomly before the queue is completely full. However, in order that RED operates at the maximal fairness without incurring major network disruption, RED should be properly conﬁgured.
RED conﬁguration is a problem to ﬁnd out the optimal set of RED parameters
given some dynamic traﬃc conditions such as number of active ﬂows, connection
bandwidth, congestion level, etc. The solution to the conﬁguration problem can’t
be obtained easily because of the dynamic nature of the network conditions.
A number of approaches to this problem have appeared in the literature.
The authors in [2,3] addressed the conﬁguration problem and described many
diﬃculties in the deployment of RED routers into the real world networks. The
methods in [4,5] have been focused on the direct control of a packet drop probability, but Padhye et al. [6] shows that the fast and frequent ﬂuctuation of the
drop probability rather leads to lower overall throughput.
In this work, we propose PRED (Prediction-enabled RED), which is an adaptive and proactive version of RED (Random Early Detection) designed to alleviate the RED conﬁguration diﬃculties. Basically, PRED keeps monitoring the
current queue status for an early detection of possible congestion alerts in the
near future and operates adaptively to the anticipated congestion, thereby leading to a more proactive reaction to changes in traﬃc patterns. Speciﬁcally, PRED
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 1193–1200, 2004.
c Springer-Verlag Berlin Heidelberg 2004

1194

M.G. Chung and E. Huh

does this by ﬁrst making prediction about average queue length and then using
the predicted queue size to adjust three classic RED parameters maxth , minth ,
and maxp . The incoming packets after the adjustment are now dropped with
the new probability deﬁned by updated parameters. Due to its inherent characteristics of adaptability and proactive reaction, PRED can be a novel solution
to the above conﬁguration problem.
In addition, PRED has some other features. It still allows fair bandwidth
sharing among TCP ﬂows, and yields better network utilization than RED. As
with standard RED, PRED can be also added to an existing FIFO-based router
without any problems. To verify the performance and characteristics of PRED,
we have conducted extensive simulation experiments using NS-2 simulator.
The rest of this paper is organized as follows. In Sec. 2, DT and RED congestion control algorithms are brieﬂy introduced. In Sec. 3, we give a detailed
description of PRED. In Sec. 4, detailed simulation results and analyses are presented to show the performance of PRED in many diﬀerent aspects. Lastly, some
concluding remarks are given in Sec. 5.

2

DT and RED

DT, a simplest form of congestion control over a router queue, accepts packets for
the queue until the queue is full and then discards new incoming packets until
the queue gets its room back again. However, DT occasionally allows a small
number of ﬂows to monopolize the queue space, leading to the disproportionate
distribution of packet losses among ﬂows. It also has a bias against bursty traﬃc
and possibly causes a global synchronization problem.
RED is another congestion control scheme, speciﬁcally designed to eliminate
the problems encountered in DT. RED reacts to a congestion signal proactively
by dropping packets before the queue is completely full. Further, the packet
drop is done at random so that all competing ﬂows will get treated fairly in
terms of packet loss rate. The drop probability used by RED, Pd (·), is a linearly
increasing function of the average queue length and is deﬁned as follows:

q < minth
 0,
q−minth
max
,
Pd (q) = max
p minth ≤ q ≤ maxth
th −minth

1,
maxth < q,
where q denotes the (average) queue size, maxth a maximum queue length threshold, minth a minimum queue length threshold, and maxp a maximum drop
probability.

3
3.1

PRED
Motivation

RED has been used for congestion control in the Internet for many years, but
it has one major drawback, namely RED conﬁguration problem. If RED is not

PRED: Prediction-Enabled RED

1195

conﬁgured properly, it can bring about traﬃc disruption and lower network
utilization. The author in [7] showed that under the false conﬁguration, the
fairness of RED gets even worse than the fairness of DT as the number of TCP
ﬂows increases. Observing that RED yields the best result when the average
queue length comes between maxth and minth , Hasegawa et al. [8] proposed
dt-RED. Although dt-RED exhibited some improvement over its predecessors,
it is still diﬃcult to ﬁnd out maxth and minth optimal for the current queue
status. Overall, ﬁnding an optimal solution to RED conﬁguration problem is
tough, and requires many resources and eﬀorts. PRED mainly aims to relieve
such conﬁguration diﬃculties.
3.2

Algorithm

As shown in Fig. 1, PRED consists of two functional modules: prediction module
(PM) and congestion control module (CCM). PM continuously monitors the
queue to collect its current and past statistical data into a database. Based on
the accumulated information, it detects possible congestion signals ahead in the
near future by analytically making predictions for some unknown variables such
as average queue length. Using the predicted values generated by PM, CCM is
responsible for updating three classic RED parameters maxth , minth , and maxp
to be optimal for the current network conditions. The packet drop probability is
now redeﬁned by updated parameters and subsequent incoming packets will be
discarded with updated probability.

Fig. 1. PRED modules

With the average queue lengths in the current and past cycles, PRED is
able to predict the variation of the average queue length in the next cycle.
RED computes the average queue length in the current cycle to obtain the drop
probability. On the other hand, PRED executes a built-in prediction algorithm
to forecast the average queue length in the next cycle and compares the predicted
average queue length with maxth and minth to update those parameters with
proper values. For example, if the predicted average queue length is greater than
maxth , the threshold maxth is increased in advance so that the average queue
length will not exceed maxth in the next cycle. Similarly, if the predicted average
queue length is less than minth , the threshold minth is decreased before the next
cycle so that the average queue length will come between maxth and minth . In
this way, PRED ﬁgures out the adequate values for thresholds maxth and minth ,
adaptively to the dynamic changes in traﬃc patterns.

1196

M.G. Chung and E. Huh

Prediction Module. Numerous prediction methods have already been available in the literature, including MACD (Moving Average Convergence/Divergence), AR (Autoregressive), and LR-Line (Linear Regression-Lines). The
MACD model is based on two moving average series. When the shorter term
moving average crosses over the longer term moving average, a rising tendency
is predicted. Likewise, when the shorter term moving average falls below the
longer term moving average, a declining signal is generated. The AR model, also
known as IIR(Inﬁnite Impulse Response) ﬁlter in engineering ﬁeld, is one of linear prediction formulas that attempts to predict an output of a system using
the current/past inputs and the past outputs. The LR-Lines is a statistical tool
to make prediction about an unknown variable by discovering an equation for a
line that most nearly ﬁts the given data.
We tested the above three prediction approaches and discovered that all but
the LR-Lines don’t forecast the average queue length very well. The LR-Lines
quite correctly predicts the average queue length when the queue is long enough,
but as the queue gets shorter, it reports some discrepancies, that is, the predicted
average queue length tends to be greater than the one measured. Nevertheless,
it doesn’t incur any big problems in applying the LR-Lines to PRED, because
the throughput of RED-type routers doesn’t get seriously deteriorated even if
the average queue length goes below minth due to the false prediction.
Congestion Control Module. Shortly after the predicted average queue
length, denoted by avgp , is available from PM, CCM attempts to modify three
RED parameters maxth , minth and maxp by referring to avgp . Here, avgp is calavgp1 +avgp2 +avgp3
culated by
, where avgpi is the predicted average queue length
3
next i-cycles ahead of the current cycle. Depending on the relationship between
avgp and two thresholds (maxth and minth ), the modiﬁcation can be done in
three distinct ways. We will next discuss three possible situations and how CCM
works in those situations.
First, consider the situation where avgp is greater than maxth . This situation, for example, can take place when the amount of incoming traﬃc rises
dramatically in a short period of time. In preparation for such a sudden traﬃc
increase, CCM shifts maxth and minth to the right such that avgp is positioned
between new maxth and minth (See Fig. 2 (a)). More precisely, to calculate
maxth , minth and maxp , we use the following procedure:
maxth = min{avgp (1 + imax ), maxlim }
minth = min{minth,old (1 + imin ), avgp }
maxp,lim
(maxth − minlim )
maxp = maxlim −min
lim
where maxlim and minlim represent maximum and minumum values, respectively, that the thresholds maxth or minth can possibly take; imax and imin
represent the rate of increase for maxth and minth , respectively; maxp,lim is a
maximum possible value for maxp ; and minth,old is the previous value of minth .
Note that the equation of the straight line connecting two points (minlim , 0) and

PRED: Prediction-Enabled RED

1197

Drop probability

Drop probability
1

1

maxp,lim
maxp
maxp,old

maxp,lim
maxp,old
maxp

minlim

Queue size
minth
avgp maxth maxlim
minth,old maxth,old

(a)

minlim

minth avgp
maxth
minth,old maxth,old

Queue size
maxlim

(b)

Fig. 2. PRED congestion control. (a) Situation where predicted average queue length
is expected to increase, and (b) Situation where predicted average queue length is
expected to decrease
max

p,lim
(maxlim , maxp,lim ) is y = maxlim −min
(x − minlim ), and that maxp is derived
lim
from this equation by substituing x = maxth .
Second, consider the situation where avgp is less than minth , which is usually
caused by persistent low traﬃc. Motivated by the fact that RED-type algorithms
show the best result when avgp is bounded by thresholds maxth and minth ,
CCM will set up the new values for those thresholds by shifting them to the left.
Detailed procedure to calculate maxth , minth and maxp is shown below:

minth = max{avgp (1 − dmin ), minlim }
maxth = max{maxth,old (1 − dmax ), avgp }
maxp,lim
maxp = maxlim −min
(maxth − minlim )
lim
where dmax and dmin represent the rate of decrease for maxth and minth , respectively; maxth,old is the previous value of maxth ; and other names carry the
same meaning as the above ﬁrst situation. Note that the formula to compute
maxp is same.
The last situation can happen when minth ≤ avgp ≤ maxth . Generally, in
this circumstance, each of incoming ﬂows sends packets at its sustained rate,
so the traﬃc does not show any remarkable ﬂuctuations. Since avgp is already
bounded by thresholds maxth and minth , CCM does not execute any particular
operations to change maxth , minth and maxp .
In brief, PRED gets a control over the packet drop probability in more proactive sense than RED by predicting the average queue length ahead of time and
updating maxth , minth and maxp based on the predicted average queue length.
Ultimately, this proactive and adaptive behavior of RED to traﬃc dynamics
helps to facilitate RED conﬁguration process.
3.3

Features

In this section, we will describe some other notable features that PRED retains,
especially compared with standard RED. The average queue size is used by RED

1198

M.G. Chung and E. Huh

to determine its drop rate. Instead of instantaneous queue size, using the average
queue size makes RED tolerant toward brief queue changes or bursts. However,
the use of the average queue size can also bring undesirable detrimental eﬀects
to RED’s overall throughput, because of its delayed reaction to dynamically
changing network conditions. PRED is able to minimize this sort of detriment
by reacting a few cycles earlier based on predicted quantities by LR-Lines.
In RED, the parameters maxth , minth and maxp are ﬁxed, but PRED dynamically adjusts their values according to the level of traﬃc congestion. Persistent high traﬃc will allow PRED to keep moving maxth and minth toward
maxlim , so the distance between maxth and minth gets shorter and maxp gets
bigger gradually. Similarly, as the traﬃc runs low, maxth and minth come closer
to minlim . As a result, the distance between maxth and minth as well as maxp
becomes smaller and smaller.
In comparison with RED, PRED still allows fair bandwidth sharing among
TCP ﬂows and yields better network utilization. Further, as with standard RED,
PRED can be added to an existing FIFO-based router without any big modiﬁcation.

4
4.1

Simulation and Analyses
Simulation Environment

To demonstrate the performance and characteristics of PRED, we used NS-2
(Network Simulator Version 2) simulator and the topology of simulated network
as shown in Fig. 3. NS is a discrete event simulator targeted at networking
research [9]. The topology consists of N source nodes, one sink node and a single
PRED router shared by the source and sink nodes. Each connection between a
source node and the PRED router is a TCP link with 100 Mbps capacity and
10 ms propagation delay, while the connection between the sink node and the
router is a TCP link with 1 Mbps and 10 ms propagation delay. TCP New-Reno
was applied to those links.

Fig. 3. Simulation Topology

PRED: Prediction-Enabled RED

4.2

1199

Simulation Results

We consider the following simulation scenario: the number of source nodes, N ,
has some distinct values of 21, 100, 150, and 200, and each source node will send
out packets at diﬀerent bit rate every 10 second over a 70-second interval. This
simulation scenario is applied to each of DT, RED, and PRED algorithms to
measure the performance metrics such as fairness and the amount of dropped
packets for congestion control.
The ﬁrst simulation result as shown in Fig. 4 (a) supports that PRED performs well rather than the conventional TD and RED in terms of total delivered
input from source nodes. This implies that PRED adjusts the drop probability
to smaller than the RED as the declined traﬃc curve is forecasted. The second
experiment as shown in Fig. 4 (b) is done under the increased traﬃc trend but
the amount of packet delivered to the router is smaller than the peak transmission rate. PRED drops more packets than the RED as we expected. This implies
the LR-Lines forecasts packet trend accurately. The fairness metric (as TCP is
used in each node) is also measured from the third experiment as shown in Fig.
4 (c). PRED provides better fairness than others when the number of nodes is
increased.

11700000

Packets

11200000
TD

10700000

RED
10200000

PRED

9700000
9200000
21

50

100

150

200

Number of nodes

(a)
1.2

3000000

1

2000000

TD

1500000

RED

1000000

PRED

Fairness

Packets

2500000

0.8

TD

0.6

RED

0.4

PRED

0.2

500000

0

0
21

50

100

150

Number of nodes

(b)

200

21

50

100

150

200

Number of nodes

(c)

Fig. 4. Performance comparison: (a) Total amount of input data packets delivered over
the link between the source nodes and the router, (b) Amount of data being dropped
for congestion control when avgp increases, and (c) Fairness index

1200

5

M.G. Chung and E. Huh

Conclusion

This paper proposes a new congestion avoidance scheme called PRED, a more
adaptive and proactive version of RED. PRED consists of two functional modules: prediction module (PM) and congestion control module (CCM). PM continuously examines the queue to collect its current and past statistical data into
a database. Based on the accumulated information, it detects possible congestion
signals ahead of time by making predictions about average queue length. Using
the predicted values generated by PM, CCM is responsible for updating three
classic RED parameters maxth , minth , and maxp to be optimal for the current
network conditions.
PRED provides more adaptability and proactive reaction to network traﬃc
changes than RED, thus can be eﬀectively used to dynamically conﬁgure RED
parameters. Further, PRED allows fair bandwidth sharing among TCP ﬂows,
yields better network utilization, and can be added to an existing FIFO-based
router without any big modiﬁcation.

References
1. S. Floyd and V. Jacobson, “Random early detection gateways for congestion avoidance,” IEEE/ACM Transactions on Networking, vol. 1, pp. 397-413, Aug. 1993
2. Martin May, Jean Bolot, Christophe Diot, and Bryan Lyles, “Reasons not to deploy
RED,” in Proceedings of IWQoS ’99, June 1999
3. Mikkel Christiansen, Kevin Jeﬀay, David Ott, F. Donelson Smith, “Tuning RED
for web traﬃc,” in Proceedings of ACM SIGCOMM 2000, August 2000
4. Haining Wang and Kang G. Shin, “Reﬁned design of random early detection gateways,” in Proceedings of Globecom ’99, pp. 769-775, December 1999
5. Wu-chang Feng and Dilip D.Kandlur and Debanjan Saha and Kang G. Shin, “A
self-conﬁguring RED gateway,” in Proceedings of IEEE INFOCOM ’99, March 1999
6. J. Padhye, V. Firoiu, D. Towsley, and J. Kurose, “Modeling TCP throughput: a
simple model and itsempirical validation,” in Proceedings of ACM SIGCOMM ’98,
pp. 303-314, Aug. 1998
7. Raj Jain, “Throughput fairness index: An explanation,” ATM Forum Contribution
99-0045, February 1999
8. Go Hasegawa, Kouichi Tokuda and Masayuki Murata, “Analysis and Improvement
of fairness among many TCP connections sharing Tail-Drop and RED Routers” in
Proceedings of INET 2002
9. LBNL, LBNL Network Simulator-ns version 1, http://www-nrg.ee.lbl.gov/ns/

