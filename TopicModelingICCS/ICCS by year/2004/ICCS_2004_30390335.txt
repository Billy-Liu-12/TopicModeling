Computing Theta-Stable Parabolic Subalgebras
Using LiE
Alfred G. No¨el
The University of Massachusetts, Department of Mathematics, Boston, MA
02125-3393, USA
Massachusetts Institute of Technology, Department of Mathematics, Cambridge, MA
02139-4307, USA

Abstract. This paper describes an algorithm for computing representatives of conjugacy classes of θ-stable parabolic subalgebras of a semisimple complex Lie algebra gC relative to any of its non-compact real
forms g of inner type. These subalgebras are important for studying representations of g.

1

Introduction

The notion of a θ-stable parabolic subalgebra of gC was introduced by Vogan
[1] in the 1970’s in order to study representations of semisimple Lie groups.
Since then such subalgebras have been used by several authors to understand
certain questions related to the theory of nilpotent orbits. In many instances,
it is desirable to compute representatives of certain classes of such subalgebras
under the action of a given Lie group. In this paper we propose an algorithm
for computing such representatives under the action of a connected complex Lie
group KC . The algorithm was implemented in the computer algebra system LiE
[2] and was used to show that a theorem of Peter E. Tapa for classical real Lie
groups does not extend to exceptional Lie groups [3]. It is also being used to
study polarization in the exceptional Lie groups [4].
Let g be a real semisimple Lie algebra with adjoint group G and gC its complexiﬁcation. Also let g = k ⊕ p be the Cartan decomposition of g where k is a Lie
algebra and p, a vector space. Finally, let θ be the corresponding Cartan involution of g. Then gC = kC ⊕ pC where kC and pC are obtained by complexifying k
and p respectively. Denote by KC the connected subgroup of the adjoint group
GC of gC , with Lie algebra kC . Then kC and pC are the +1-eigenspace and the
−1-eigenspace of the extension of θ on gC respectively. We shall call such an
extension θ also. The subgroup KC preserves pC under the adjoint action.
Let hC be a Cartan subalgebra and Φ = ∆(gC , hC ) the root system of gC determined by hC . A Borel subalgebra of gC is a subalgebra b = hC ⊕ n where
gCα for some positive system Φ+ within Φ and gCα denotes the root space
n=
α∈Φ+

of α. Any subalgebra q of gC containing a Borel subalgebra is called a parabolic
subalgebra of gC . If q = q ∩ kC ⊕ q ∩ pC then we shall say that q is a θ-stable
parabolic subalgebra of gC . Any parabolic subalgebra decomposes as q = l + u
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3039, pp. 335–342, 2004.
c Springer-Verlag Berlin Heidelberg 2004

336

A.G. No¨el

where l is a Levi subalgebra of gC and u, the nilradical of q, is a vector space
consisting of nilpotent elements of gC .
We shall give an algorithm to compute representatives of all the KC -conjugacy
classes of θ-stable parabolic subalgebras of gC when g is of inner type, that is,
when rank(g) = rank(k), and gC simple. Slight modiﬁcations of the algorithm
are necessary to handle the cases where g is not of inner type. More will be said
on this at the end.

2

Algorithm Description and Proof of Correctness

The algorithm is divided into two main components:
i. Computation of the KC -conjugacy classes of systems of simple roots. This
task will be performed by the function Compute Chambers().
ii. Computation of representatives of conjugacy classes of θ-stable parabolic
subalgebras. The function Compute Parabolics() will perform this computation.
The algorithm will be written in “pidgin” LiE, that is, we shall use a lot of
built-in functions from LiE. Readers should consult [2] to ﬁnd information on
such functions. The built-in functions will be written in italics in the deﬁnition
of the algorithm. We should point out that the algorithm can be implemented on
any computer algebraic systems containing some Lie-theoretical capabilities. All
variables will be of type integer. This is the only type that LiE accommodates.
To see a very brief evaluation of LiE consult our ICCS 2003 paper [5]. Finally,
we shall use the notation S for the cardinality of a set S and comments will
be placed between square brackets.
Description of the algorithm.
Input:
G: semisimple type of GC
K: semisimple type of KC
Rnc : set of non compact roots of GC
Output:
P: one-dimensional array of integers containing the indices of the roots in
each parabolic subalgebra.
P addr: two-dimensional array of integers containing the start and the end
of each parabolic subalgebra in P.
This variable plays an important role when processing the parabolic subalgebras.
num parabolics: number of representatives computed
Begin [ Main]
n = n pos roots(G);
l = Lie rank(G);
[ Compute the number of KC -conjugacy classes of root systems ]
n ch = W(G) / W(K) ; [ W(G) and W(K) are the Weyl groups of G and K ]

P = null(n ch∗2l , l); [ Create and initialize P ]
P addr = null(n ch∗2l , 2);

Computing Theta-Stable Parabolic Subalgebras Using LiE

337

dim par = null(n ch∗2l );
[ Initialize lists and queues ]

ch = null (n ch*l,l); qu = null ((n ch*l),l);
cur ch =null(l,l); new ch = null(l,l);
[ Initialize counters ]

l count = 1; q indx = l; l indx = l;
d index = 0;
Compute Chambers();
Compute Parabolics();
End [ Main]

Compute Chambers();
begin
[ This algorithm computes the KC conjugacy classes of simple roots systems as follows:
Starting with a Vogan system in the usual bourbaki system it looks for other non KC conjugate systems by performing reﬂection along non compact imaginary roots ]

for i = 1 to l do ch[i] = pos roots(G)[i] ; qu[i] = pos roots(G)[i]; od;
[ Main Loop ]

while l count < n ch do
[ reﬂect through all non compact roots in current chamber ]
[ be sure that both queue and list are properly maintained ]
for i =1 to l do cur ch[i] = q[i];od; [ dequeue ]

for i = 1 to l do
if cur ch[i] ∈ Rnc then
[ this is a noncompact root reﬂect through it ]

for k = 1 to l do
new ch[k] = cur ch[k] - Cartan(cur ch[k], cur ch[i], G)
*cur ch[i]; od;
[ check for duplicate ]

for j =1 to l do if new ch[j] != ch[(k-1)*l + j] then
uniq = 0; break; ﬁ; od;
if uniq == 1 then break; ﬁ; od;
if uniq ==0 then for k = 1 to l do ch[l indx + k] = new ch[k];
qu[q indx +k] = new ch[k]; od; l indx = l indx + l;
q indx = q indx + l;
ﬁ; ﬁ; od;
for i = 1 to (q indx- l) do qu[i] = qu[i+l]; od; [ rebuild queue ]
q indx = q indx - l;
od; [Main Loop]
end [ Compute Chambers() ]

338

A.G. No¨el

Compute Parabolics();
[ This algorithms computes a list which contains all the representatives of the KC conjugacy classes of θ-stable parabolic subalgebras of gC . Since each chamber given by
the previous algorithm is equivalent to a θ-stable Borel subalgebra the algorithm builds
standard parabolic subalgebras in each chamber by using the subsets of the chamber. ]

begin
chamb = null (l,l); i = 1; par index = 0;
for j = i to (i+l-1) do count= count+1; chamb[count]= ch[j];od;
[ initialize the nilradical of the Borel subalgebra generated by chamb ]

u = null (n pos roots(G), l);
for u indx = 1 to n pos roots(G) do
for r indx = 1 to l do u[u indx] = u[u indx]+ pos roots(G)[u indx,r indx]*
chamb[r indx]; od; od;
[ ﬁnd all subsets of the simple roots in the class
and build the resulting parabolic q = l ⊕ u ]

cc[ii] = ii; od;
null(kk,l);
[ retrieve the subset of simple roots deﬁning the Levi subalgebra ]

chamb[cc[ii]];od;
l matrix= null (kk,l); [ Cartan matrix for the Levi subalgebra ]
for i l = 1 to kk do for j l =1 to kk do
l matrix[i l,j l] = Cartan(G)(lev roots[i l],lev roots[j l]); od; od;
g = Cartan type(G)(lev roots); m cartan = Cartan(G)(g);
if l matrix = m cartan then
good lev = lev roots; nnn = kk; pi =null(nnn+2); p = null(nnn+1);
d = null(nnn+1); previous = null(nnn); current = null(nnn);
for iii = 2 to nnn+1 do pi[iii] = iii; p[iii] = iii; d[iii] = -1; od;
d[1] = 0; m = nnn+2; pi[1] = m; pi[m] = m; counter = 0; for c = 2 to nnn+1
do current[c-1] = pi[c] - 1; od;
lev roots[current[i l]] od; to kk do l matrix[i l,j l] =
Cartan(G)(good lev[i l],good lev[j l]); od; od;
if l matrix == m cartan then lev roots =good lev ; break; ﬁ;
[ right order found ]

m = nnn+1; while pi[p[m]+d[m] ] >m do d[m] = -d[m]; m = m-1;
if m ==1 then break; ﬁ; od;
bucket = pi[p[m]]; pi[p[m]] = pi[p[m]+d[m]]; pi[p[m]+d[m]] = bucket;
previous = current;
od; ﬁ;
[ end permutation, continue to process subsets ]

jj=kk;
while cc[jj]== (l-kk +jj) do jj = jj-1; if jj == 0
then break ﬁ; od;
if jj !=0 then cc[jj] = cc[jj] +1 ﬁ;
for ii = jj+1 to kk do if ii == 1 then cc[ii] = 1 else
cc[ii] = cc[ii-1] +1; ﬁ ;od;

Computing Theta-Stable Parabolic Subalgebras Using LiE

339

n pieces = n comp(g);
nilp u = null(n,l); levi index = 0; nilp u index = 0; lev ptr = 0;
sg = g[ii]; l p = Append ( pos roots(sg), (-pos roots(sg)));
for jk = 1 to 2 n pos roots(sg) do
levi index = levi index +1;
for ll=1 to Lie rank(sg) do
levi subalg[levi index] = levi subalg[levi index] +
l p[jk,ll]*lev roots[lev ptr + ll]; od;od;
lev ptr = lev ptr + Lie rank(sg); od;
for ik = 1 to n do trouver = 0;
break;ﬁ; od;
if trouver == 0 then nilp u index = nilp u index + 1;
nilp u[nilp u index] = u[ik]; ﬁ; od;
[ check for duplicate subalgebras and build the list]

found = 0; u qq = null(nilp u index,l);
for ik = 1 to nilp u index do u qq[ik] = nilp u[ik]; od;
q = sort(Append (levi subalg,u qq)); [ q = l ⊕ u ]
dimq = levi index+nilp u index;
data = Append (levi subalg u qq);
if n parabolics == 0 then
n parabolics = n parabolics + 1; P addr[1,1] = 1; P addr[1,2] = dimq;
for ik =1 to dimq do par index = par index +1;
P[par index] = data[ik]; od;
d index = d index +1; dim par[d index] = dimq+l;
else found = 0; [ Check for duplicates ]
P[P addr [ik,1] +jk -1] od; break; ﬁ; ﬁ; ood;
dimq do par index = par index +1;
P[par index] = data[ik]; od;
d index = d index +1; dim par[d index] = dimq+l;
ﬁ; ﬁ; od; od; od;
end [ Compute Parabolics() ]
Remark. At the end of Compute Parabolics() the list P will contain representatives of all classes of parabolic subalgebras except those of the Borel subalgebras.
However, the Borel subalgebras are completely determined by the roots stored
in the variable chamb which deﬁnes the Cartan subalgebra equivalent to the
Levi subalgebra in this case. The variable u contains the appropriate positive
roots and is in fact the nilradical of the Borel representative.
Proof of correctness
Theorem. The above algorithm is correct.
Proof. Maintaining the above notations, it is known that the parabolic subalgebras q containing a Borel subalgebra b of gC are parametrized by the set of
subsets of ∆ the set of simple roots that deﬁnes b ( See [7] Proposition 5.90
for a proof). Let Φ be the root system generated by ∆ and let Γ be a subset
of ∆. Deﬁne qΓ to be the subalgebra of gC generated by hC and all of the root

340

A.G. No¨el

spaces gCα such that α ∈ ∆ or −α ∈ Γ . Let Γ denote the subroot system of Φ
generated by Γ and put Γ + = Γ ∩ Φ+ . Deﬁne
gCα

l = hC ⊕
α∈ Γ

gCα

u=
α∈Φ+ \ Γ

+

Then qΓ = l ⊕ u is a parabolic subalgebra containg b and is said to be a standard
parabolic subalgebra. Moreover every parabolic subalgebra of gC is conjugate to
a standard parabolic subalgebra of gC . Since we assume that g is of inner type
we conclude that all parabolic subalgebras are θ-stable. The above argument
is valid for each kC -conjugacy class of Borel subalgebras. Hence, the algorithm
generates a list containing representatives of all the kC -conjugacy classes of θstable parabolic subalgebras of gC .
In order to ﬁnish the proof we need to show that the computation Γ is correct.
This is done in Compute Parabolics() by obtaining subsets of ∆ and permuting
the set of roots in such subsets when necessary. We generate the permutations
using minimal change order as described in [6]. To compute subsets of ∆ we
use an implementation of Algorithm 5.8 in [6] also. The proofs of correctness of
both algorithmic schemes are found in [6]. Hence, the theorem follows.

Complexity
The complexity of the algorithm depends on that of the built-in functions. In
LiE such functions are well designed and seem to perform in an optimal manner.
Since LiE is not a multipurpose software package, the designers were able to use
clever and faster algorithms to enhance performance. The reader should realize
that most of the work in this algorithm is done by Compute Parabolics() which
computes subsets and permutations of elements of ∆ which is of size l the rank
of gC . The analysis of both schemes is done in [6] and it is not too diﬃcult to
see that the permutation scheme will take O(k!) to permute k elements of ∆
and the determination of the subsets of size k is proportional to the number of
combinations of subsets of k elements of ∆ that is O( kl ). Hence both schemes
perform quasi-optimally. Of course, this is a worst case analysis. For l ≤ 8 the
algorithm performs very well on average. We are not in a position to give an
average case analysis at this time. However the reader should know that we
were able to compute the representatives of the classes of theta-stable parabolic
subalgebras for all the exceptional non compact simple Lie groups relative to
all their real forms of inner type. This is not trivial [4]. The computations were
carried on an IMac G4 with speed 1GHz and 1Gb SDRAM of memory.

3

Some Applications of Representation Theory

A representation of a group is a mathematical map which associates a matrix
to each element of the group. Matrices are very concrete objects that facilitate
diﬃcult computations which would be impossible otherwise. This was recognized

Computing Theta-Stable Parabolic Subalgebras Using LiE

341

after the discovery of quantum mechanics. Hence, given a group, if all or a lot
of its representations are available then the investigator has a better chance of
ﬁnding one which ﬁts the problem at hand. Finding all the representations of a
given reductive real Lie group is one the most important unsolved problems in
Mathematics.
An other incentive to study Representation theory comes from Number theory.
Here, we should point out that the ﬁeld of Number theory, although considered one of the purest branches of mathematical thought, turns out to have very
important and concrete applications in our industrial world. One such application is the design and development of almost unbreakable codes in cryptography
allowing the possibility of making transactions on the internet using credit cards.
Representation theory is used in quantum chemistry, quantum computing, construction of telephone networks, radar and antenna design, robotics, coding
theory, computer vision and many other branches of science and engineering.
Readers who are interested in real world applications of Representation theory
should visit the following website:
http : //web.usna.navy.mil/˜wdj/repn thry appl.htm
The work presented in this paper is part of a program whose aim is to compute
new representations of reductive real Lie groups. See [8] for more details.

4

Conclusion

In this paper we proposed and used and algorithm which produces a list containing representatives of all the KC -conjugacy classes of theta-stable parabolic
subalgebras of a complex simple Lie algebra gC relative any of its real noncompact forms g of inner type. We proved the correctness of the algorithm and
gave a worst case analysis of its complexity. We also mentioned that the average
performance of the algorithm is quite good because we were able to use it to
compute data from all the exceptional simple Lie groups. However we still have
more work to do. First, we need to extend the algorithm to the cases where g is
not of inner type. This can be done as follows: the group KC should be replaced by GθC the subgroup of GC that ﬁxes kC and the computation of the theta
stable parabolic will be more complicated. We should be able to do this soon.
In order to manage space more eﬀectively we need to develop a formula for the
number of KC -conjugacy classes of theta-stable parabolic subalgebras. We have
not been able to ﬁnd such a formula in the literature. From our conversation
with experts there are reasons to believe that the formula is not known. One
way to circumvent this issue is to use the Weyl group of KC . This solution does
not scale well because the Weyl group grows fast as the rank of g increases and
traversing it becomes a challenging problem. We are currently developing some
new strategies to solve this problem.
There are also some software issues. LiE provides essentially two types of data
structures, the vector, a one-dimensional array of type integer, and the matrix,
a two-dimensional array of type integer and does not allow dynamic allocation.
These two factors complicate the handling of large data sets. Since the LiE source

342

A.G. No¨el

code is available we plan to solve these problems in the future. We believe that
in general the mathematical algorithms in LiE are well designed. However we
would welcome some serious work on a good user-interface.
Many mathematicians are currently using Computer Algebra Systems in their
research not only as simulation tools but also as a way of generating important
counterexamples and conjectures. As these systems become more and more powerful we should expect a stronger cooperation between mathematicians, system
designers and computer scientists.

Acknowledgment. The author wishes to thank the referees for their helpful
and insightful comments.

References
1. Vogan D. jr:The algebraic structure of the representation of semisimple Lie groups
I, Annals of Math. 109 (1979), 1-60
2. Van Leeuwen M. A. A., Cohen A. M., Lisser B.:LiE A package for Lie Group Computations, Computer Algebra Nederland, Amsterdam The Netherlands (1992)
3. No¨el A. G.: Appendix to “Richardson Orbits for Real Classical Groups” by Peter E.
Trapa ( Counterexamples in F4 ) , to appear in Journal of Algebra
4. No¨el A. G.: Some remarks on Richardson Orbits in Complex Symmetric Spaces,
(preprint)
5. No¨el A. G.: Computing maximal tori using LiE and Mathematica, Lectures Notes
in Computer Science, Springer-Verlag. 2657 (2003) 728-736
6. Reingold E. M., Nievergelt J., Deo N.: Combinatorial Algorithms Theory and Practice, Prentice-Hall (1977)
7. Knapp A. W.:Lie Groups Beyond and introduction second edition, Birkha¨
user Progress in Mathematics 140 (2002)
8. Peter E. Trapa.: Richardson Orbits for Real Classical Groups , to appear in Journal
of Algebra

