An Adaptive Communication Mechanism for
Highly Mobile Agents
JinHo Ahn
Dept. of Computer Science, Kyonggi University
San 94-6 Yiuidong, Paldalgu, Suwonsi Kyonggido 442-760, Republic of Korea
jhahn@kyonggi.ac.kr

Abstract. Agent mobility causes reliable inter-agent communications
to be more diﬃcult to achieve in distributed agent based systems. To
solve this issue, three representative agent tracking and message delivery mechanisms, broadcast-based, home-based and forwarding pointerbased, were previously proposed. However, due to their respective drawbacks, none of them is suitable for eﬃcient delivery of messages to highly
mobile agents, which move frequently between service nodes. This paper introduces an adaptive forwarding pointer-based agent tracking and
message delivery mechanism to alleviate their disadvantages. The proposed mechanism allows each mobile agent to autonomously leave tails
of forwarding pointers on some few of its visiting nodes depending on
its preferences. Thus, it is more eﬃcient in terms of message forwarding
and location management than the previous forwarding pointer-based
one. Simultaneously, it considerably reduces the dependency on the home
node in agent location updating and message delivery compared with the
home-based mechanism.

1

Introduction

Mobile agent is an autonomously running program, including both code and
state, that travels from one node to another over a network carrying out a task
on user’s behalf[4]. Due to its beneﬁcial characteristics, i.e., dynamicity, asynchronicity and autonomy, it has been primarily used as an enabling programming
paradigm for developing distributed computing infrastructures in various application ﬁelds such as e-commerce, telecommunication, ubiquitous computing,
active networks and the like[2,4]. However, as the size of these ﬁelds is rapidly
increasing, several research issues related to the mobile agent technology such
as communication, security, dynamic adaptation, etc., should be reconsidered
to be suitable for their scale. Among them, it is most important to enhance
the performance of the agent communication in Internet-scale infrastructures.
For this purpose, some eﬀective and eﬃcient inter-agent communication mechanism is required in distributed agent-based systems. Agent mobility may lead
to the loss of messages being destined to an agent on its migration. Thus, it
causes reliable inter-agent communications to be not easy to achieve in the distributed agent based systems. Especially, guaranteeing the delivery of messages
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3036, pp. 192–199, 2004.
c Springer-Verlag Berlin Heidelberg 2004

An Adaptive Communication Mechanism for Highly Mobile Agents

193

to highly mobile agents, which move frequently among service nodes, is a more
challenging problem, which this paper attempts to address. To consider the agent
mobility, three representative agent tracking and message delivery mechanisms,
broadcast-based, home-based and forwarding pointer-based, were previously proposed. The broadcast-based mechanism[7] guarantees transparent and reliable
inter-agent communication and can also provide multicast communication to a
set of agents. But, to locate the message destination, the mechanism has to contact every visiting node in the network. Thus, its large traﬃc overhead makes
broadcasts impractical in large-scale distributed agent systems.
The home-based mechanism[5] is borrowed from the idea of Mobile IP[8]. It
requires that each mobile node has a home node, and forces the mobile node
to register its current temporary address, called care-of-address, with its home
node whenever it moves. Thus, when some messages are sent to a mobile node
currently located at a foreign network, the messages are ﬁrst directed to its
home node, which forwards them to the mobile one. This mechanism is simple
to implement and results in little mobile node locating overhead. However, it is
unsuitable for highly mobile agents in distributed agent based systems because
every agent location updating and message delivery are all performed around
the home agent, which introduces centralization. Moreover, the Mobile IP generally assumes each mobile node’s home node is a static one whereas distributed
agent based systems don’t have this assumption, i.e., the home node may be
disconnected from the network. Thus, this mechanism cannot address the disconnection problem.
In the forwarding pointer-based mechanism[3,6], each node on a mobile
agent’s movement path keeps a forwarding pointer to the next node on the path.
Thus, if a message is delivered to an agent not being at the home node, the message must traverse a list of forwarding nodes. Thus, this mechanism can avoid
performance bottlenecks of the global infrastructure, and therefore improve its
scalability, particularly in large-scale distributed agent-based systems, compared
with the home based one. Additionally, even if a home node is disconnected from
the rest of the network, the forwarding pointer based mechanism allows agents
registering with the node to communicate with other agents. However, as highly
mobile agents leads to the length of their chains of pointers being rapidly increasing, its message forwarding overhead may be signiﬁcantly larger. Furthermore,
the number of forwarding pointers each service node needs to keep on its storage
may exponentially increase if a large number of mobile agents are running in the
systems. In a previous work[6], a type of update message called inf orm message
was introduced to include an agent’s current location for shortening the length
of trails of forwarding pointers. In this case, a node that receives the message is
allowed to update its table if the received information is more recent than the
one it had. However, it introduces no concrete and eﬃcient solutions for this
purpose, for example, when update messages should be sent, and which node
they should be sent to.
Therefore, we observe these respective drawbacks of the three previous mechanisms may be critical obstacles to eﬃcient communications between highly mo-

194

J. Ahn

bile agents in large-scale distributed agent systems. This paper introduces an
adaptive forwarding pointer-based agent tracking and message delivery mechanism to avoid their disadvantages. The proposed mechanism allows each mobile
agent to autonomously leave trails of forwarding pointers only on some few of
its visiting nodes depending on its preferences such as location updating and
message delivery costs, security, network latency and topology, communication
patterns, etc.. Thus, it is more eﬃcient in terms of message delivery and location management than the previous forwarding pointer-based one. Additionally,
it considerably decentralizes the role of the home node in agent location updating
and message delivery. This feature alleviates the two problems of the home-based
mechanism.
Due to space limitation, our system model, formal descriptions and correctness proof of the proposed mechanism, and related work are all omitted. The
interested reader can ﬁnd them in [1].

2

The Adaptive Communication Mechanism

As mentioned in section 1, the proposed adaptive communication mechanism is
designed to have the following features unlike previous ones.
• Require small size of storage for location management per service node.
• Result in low message forwarding overhead.
• Reduce considerably the dependency on home node in agent location updating
and message delivery.
First of all, let us deﬁne two important terms, f orwarder and locator.
Forwarder of an agent means a service node keeping a forwarding pointer of the
agent on its storage. Thus, depending on the behavior of agent communication
mechanisms, there may exist various number of forwarders of each agent in the
system. Locator of an agent is the forwarder managing the identiﬁer of the node
where the agent is currently located. In this paper, it is assumed that there
is only one locator in the system. To satisfy all the three requirements, our
adaptive mechanism forces only some among all visiting nodes of each agent
to be forwarders. This behavior can considerably reduce both the amount of
agent location information each node needs to maintain and the delivery time
of each message because the length of its forwarding path may be much more
shortened. Also, since there exist multiple forwarders, not only one, in this
mechanism, the home node centralization can be avoided. But, as a part of the
vising nodes are forwarders in this mechanism, a new method is required to
consistently manage location of each agent and enable each sent message to be
delivered to the agent despite its migrations unlike in the previous forwarding
pointer-based one. In the following, two components of the proposed mechanism,
agent location management and message delivery algorithms, are explained in
detail respectively.
Agent Location Management.
For the agent location management
algorithm, every node Ni should maintain the following data structures.

An Adaptive Communication Mechanism for Highly Mobile Agents

195

• RunningAgentsi : A table for saving location information of every agent
currently running on Ni . Its element is a tuple (agent id, locmngr n, agent t).
locmngr n is the identiﬁer of agent agent id’s locator. agent t is the timestamp
associated with agent agent id when the agent is located at Ni . Its value is
incremented by one every time the corresponding agent migrates. Thus, when
agent agent id migrates to Ni , Ni should inform locmngr n of both its identiﬁer
and agent t of the agent so that locmngr n can locate the agent.
• AgentLocsi : A table for saving location information of every mobile agent
which is not currently running on Ni , but of which Ni is a forwarder. Its element
is a tuple (agent id, destination n, agent t, ismanaging f , ismigrating f ).
destination n is the identiﬁer of the node where Ni knows agent agent id is
currently located and running. agent t is the timestamp associated with the
agent when the agent is located at node Ndestination n . It is used for avoiding
updating recent location information by older information[6]. ismanaging f is a
bit ﬂag indicating whether Ni is agent agent id’s locator or not. In the ﬁrst case,
its value is true and otherwise, f alse. ismigrating f is a bit ﬂag designating if
the agent is currently migrating to another node(=true) or not(=f alse).
The algorithm for managing each agent’s location on its migration is informally described using ﬁgure 1. This ﬁgure shows message interactions between
nodes occurring in a’s location updating and location information maintained by
each node while migrating from its home node to N1 through N5 . In ﬁgure 1(a),
a is created on Nhome and then an element for a (ida , home, 0) is saved into
RunningAgentshome in the ﬁrst step. If a attempts to move to N1 after having
performed its partial task, in the second step, it inserts into AgentLocshome a’s
element (ida , 1, 1, true, true) indicating Nhome is a’s locator and a is currently
moving to N1 . Then, Nhome dispatchs the agent with the identiﬁer of the node
and a’s timestamp to N1 . When receiving these, N1 increments the timestamp
by one. In this case, as a wants N1 to be its locator, it inserts a’s location
information (ida , 1, 1) into RunningAgents1 in the third step. At the same
time, N1 sends Nhome a message changelmngr including a’s timestamp in order
to inform Nhome that N1 is a’s locator from now. On receiving the message,
Nhome updates a’s location information on AgentLocshome using the message
and sets two ﬁelds of a’s element, ismanaging f and ismigrating f , all to
f alse. If the messages destined to a have been buﬀered in Nhome ’s message
queue due to the migration, they are transmitted to N1 . When a attempts to
migrate to N2 after a has performed a part of its task in the forth step, N1 puts
a’s element (ida , 2, 2, true, true) into AgentLocs1 and then dispatchs agent a
to N2 . In this case, N2 increments a’s timestamp by one and then inserts a’s
element (ida , 1, 2) into RunningAgents2 like in the ﬁfth step because a wants
N2 to be just a visiting node. Also, the node registers a’s current location with
its locator N1 by sending a message update including the timestamp to N1 . If
there are any messages sent to the agent in the queue of N1 , they are forwarded
to N2 .
Figure 1(b) illustrates that agent a moves from N2 to N3 . In this example,
N2 ﬁrst sends N1 a message m initiated indicating that a’s migration process

196

J. Ahn

begins from now. When receiving the message, N1 sets one ﬁeld of a’s element
ismigrating f to true in the second step and then send a message m reply to
N2 . Suppose the migration is started without the execution of this invalidation
procedure. If N1 receives any message destined to a in this case, it forwards
the message to N2 because it doesn’t know whether the migration continues
to be executed. But, neither a may be currently running on N2 nor N2 keep
a’s location information on AgentLocs2 because N2 isn’t a’s forwarder. In this
case, the message cannot be delivered to a. Therefore, N2 has to push a to N3
after having received the message m reply from a’s locator, and then remove a’s
element from RunningAgents2 . Afterwards, a’s visiting node N3 increments a’s
timestamp and saves a’s element (ida , 1, 3) into RunningAgents3 in the third
step, and then sends a message update to N1 . On the receipt of the message, N1
updates a’s element in AgentLocs1 to (ida , 3, 3, true, f alse) using the message.
Figure 1(c) shows an example that N5 becomes a’s locator when agent a
moves from N4 to N5 . In this case, after N5 creates a’s location information
(ida , 5, 5) and inserts it into RunningAgents5 in the third step, the node sends
N1 a message changelmngr for notifying the previous locator N1 that N5 is a’s
locator from now. Also, a attempts to register its current location with Nhome
in order to reduce the message delivery time incurred when another agent
initially sends a message to a via Nhome . For this purpose, N5 sends a message
update to Nhome . If a recognizes this consideration helps no performance
improvement, it doesn’t perform the home node update procedure. After that,
Nhome and N1 update a’s location information respectively like in the third step.
Message Delivery. For the message delivery algorithm, every node Ni
should contain an agent location cache, ALocsCachei , as follows.
• ALocsCachei : A cache for temporarily storing location information of each
mobile agent which agents running on Ni communicate with. Its element is a
tuple (agent id, f orward n, agent t). f orward n is the identiﬁer of the node
where Ni knows agent agent id is currently located and running. Thus, when
attempting to deliver messages to agent agent id, each agent on Ni forwards
them to f orward n regardless of whether this address is outdated. agent t is
the timestamp assigned to agent agent id when the agent was located at node
Nf orward n .
We intend to use an example in ﬁgure 2 to clarify the algorithm to enable
every sent message to be reliably delivered to its target agent despite agent
migrations. This example illustrates agent b sends three messages, msg1, msg2
and msg3 to agent a in this order while a is migrating from its home node
to N1 through N6 according to its itinerary. In ﬁgure 2(a), after a has moved
from Nhome to N2 , b at Nsender will deliver the ﬁrst message msg1 to a.
In this case, Nsender has no location information for a in its location cache
ALocsCachesender . Thus, Nsender creates and saves a’s element (ida , home, 0)
into ALocsCachesender . Then, it sends the message msg1 to Nhome . Receiving
the message, Nhome retrieves a’s element from AgentLocshome . In this case, as
the value of the bit ﬂag ismanaging in the element is f alse, Nhome isn’t a’s

An Adaptive Communication Mechanism for Highly Mobile Agents
NHome
RunningAgents
Step 1)

N1
AgentLocs

Home

RunningAgents

Home

197

N2
AgentLocs

1

RunningAgents

1

2

(id a, home, 0)

Step 2)

(id a, 1, 1, true, true )

Step 3)

(id a, 1, 1, false, false )

Step 4)

(id a, 1, 1, false, false )

Step 5)

(id a, 1, 1, false, false )

(id a, 1, 1)
(id a, 2, 2, true, true )
(id a, 2, 2, true, false )

N1

NHome

N2

2. changelmngr (id a , 1)

4. update( id a, 2)

(a) Agent a migrates from its home to
N1

N1 and then N2

N2

AgentLocs

N3

RunningAgents

1

(id a, 1, 2)

3. migrate( a)

1. migrate( a )

Step 1)

(id a , 2, 2, true, false )

(ida , 1, 2)

Step 2)

(id a , 2, 2, true, true )

(ida , 1, 2)

Step 3)

(id a , 3, 3, true, false )

RunningAgents

2

3

(id a, 1, 3)

1. m_initiated( id a)
3. migrate( a )
2. m_reply (id a)
N1

N2

N3

4. update( id a, 3)
(b) Agent a migrates from N 2 to N3
N Home
AgentLocs

N1
Home

AgentLocs

N4
1

RunningAgents

Step 1)

(id a, 1, 1, false, false )

(id a , 4, 4, true, false )

(id a , 1, 4)

Step 2)

(id a, 1, 1, false, false )

(id a , 4, 4, true, true )

(id a , 1, 4)

Step 3)

(id a, 5, 5, false, false )

(id a , 5, 5, false, false )

N5
4

RunningAgents

5

(ida , 5, 5)

1. m_initiated( id a)
3. migrate( a)
2. m_reply (ida )
NHome

N1

N4

N5

4. changelmngr (id a, 5)

5. update( id a, 5)
(c) Agent a migrates from N4 to N 5

Fig. 1. An example of agent a’s location updating on its migration according to its
itinerary

locator. Thus, it consults the element and forwards the message msg1 to the
next forwarder N1 . On the receipt of the message, N1 obtains a’s element from
AgentLocs1 and then checks the ﬂag ismanaging in the element. In this case,
N1 is a’s locator because the value of the ﬂag is true. Also, as the value of
the second ﬂag ismigrating is f alse, it forwards the message to a’s currently
running node N2 by consulting the element. At the same time, as Nsender has
the outdated identiﬁer of a’s locator, N1 sends Nsender a message updateCache
containing the identiﬁer of a’s current locator(=N1 ) and timestamp(=2) in
ﬁgure 2(a). When receiving the message, Nsender updates a’s element in
ALocsCachesender using the message in the second step.
Figure 2(b) shows that a migrates from N2 to N4 and then b at Nsender
sends the second message msg2 to a. In this case, Nsender ﬁnds a’s element
from ALocsCachesender and then forwards msg2 to N1 . On the receipt of

198

J. Ahn

msg2, N1 can see that it is a’s current locator because the value of the bit ﬂag
ismanaging of a’s element in AgentLocs1 is true. Also, as the value of the ﬂag
ismigrating is f alse, N1 can sends msg2 to a’s currently running node(=N4 ).
At this time, as b knows the identiﬁer of a’s current locator, N1 doesn’t sends
any message updateCache to b.
Figure 2(c) illustrates that after a has migrated from N4 via the next

NHome

N1

N2

AgentLocs Home

AgentLocs1

RunningAgents2

(ida , 1, 1, false, false)

(id a, 2, 2, true, false)

(ida, 1, 2)

1. migrate

2. migrate

NHome

N1

N2

4. msg1
Nsender

5. msg1

3. msg1

ALocsCache sender
Step 1)

(ida, Home, 0 )

Step 2)

(ida , 1, 1)

5’. updateCache(id a, 1)
Nsender

(a) Agent b at host Nsender sends message msg1 to agent a at N2 via a’s home
N1

N3

N4

AgentLocs 1

RunningAgents 2

RunningAgents 3

Step 1)

(ida , 3, 3, true, false )

(id a, 1, 3)

Step 2)

(ida , 3, 3, true, true )

(id a, 1, 3)

Step 3)

(ida , 4, 4, true, false )

(ida, 1, 4)
1. migrate

N1

Nsender

N2

N3

3. msg2

ALocsCache sender

2. migrate

N4

4. msg2

Nsender

(id a, 1, 1)

(b) Agent b at Nsender sends message msg2 to agent a at N4 via a’s locator N1
N1
AgentLocs

N5
1

RunningAgents 5

N6
AgentLocs

RunningAgents

5

Step 1)

(id a, 5, 5, false, false )

Step 2)

(id a, 5, 5, false, false )

(id a, 6, 6, true, true )

Step 3)

(id a, 5, 5, false, false )

(id a, 6, 6, true, false )
1. migrate

N1

Nsender

3. msg3

ALocsCache sender
Step 1)

(ida , 1, 1)

Step 2)

(ida , 5, 5)

6

(id a, 5, 5)

N4

4. msg3

(ida , 5, 6)
2. migrate

N5

N6

5. msg3

Nsender
5’. updateCache (ida, 5)

(c) Agent b at Nsender sends message msg3 to agent a at N 6 via a’s forwarder N 1

Fig. 2. An example of agent b sending three messages msg1, msg2 and msg3 to agent
a in order while a migrating to several nodes according to its itinerary

locator N5 to N6 , b transmits the third message msg3 to a. In this ﬁgure,
when the migration has been completed, three nodes N1 , N5 , N6 have each
a’s location information like in the step 3. First, Nsender sends msg3 to N1 by
consulting a’s element in ALocsCachesender . In this case, as the value of the
ﬂag ismanaging of a’s element in AgentLocs1 is f alse, N1 forwards msg3 to

An Adaptive Communication Mechanism for Highly Mobile Agents

199

the next forwarder N5 . When N5 receives the message, it transmits the message
to N6 because it recognizes that it is a’s locator and a isn’t currently migrating.
Concurrently, N5 informs Nsender that a’s current locator is N5 by sending a
message updateCache to Nsender .

3

Conclusion

In this paper, an adaptive agent communication mechanism was introduced to
considerably reduce both the amount of agent location information maintained
by each service node and the delivery time of each message while reducing the
dependency on the home node. To achieve this goal, this mechanism forces only
a small part of all visiting nodes of each agent to becomes forwarders. In this
mechanism, each agent should register its location with its current locator on every migration until it arrives at the next locator of the agent. This method may
result in slightly higher location update cost per agent migration compared with
that of the previous forwarding pointer-based mechanism. However, if each agent
determines some among its visiting nodes as forwarders by properly considering
several performance factors, the gap between the two costs may be almost negligible. Moreover, the mechanism allows the identiﬁer of each agent’s locator to
be kept on the agent location cache of a node. This behavior highly reduces the
cache update frequency of the node compared with the previous mechanism.
Future work is focused on selecting appropriate forwarders of each agent
according to the changes which the agent senses in its environment related to
location updating and message delivery costs, security policies, network latency
and topology, communication patterns.

References
1. J. Ahn. Adaptive Communication Mechanisms for Mobile Agents. Technical Report
KGU-CS-03-050, Kyonggi University, 2003.
2. P. Bellavista, A. Corradi and C. Stefanelli. The Ubiquitous Provisioning of Internet
Services to Portable Devices. IEEE Pervasive Computing, Vol. 1, No. 3, pp. 81-87,
2002.
3. J. Desbiens, M. Lavoie and F. Renaud. Communication and tracking infrastructure
of a mobile agent system. In Proc. of the 31st Hawaii International Conference on
System Sciences, Vol 7., pp. 54-63, 1998.
4. A. Fuggetta, G.P.Picco and G. Vigna. Understanding Code Mobility. IEEE Transactions on Software Engineering, Vol. 24, No. 5, pp. 342-361, 1998.
5. D. Lange and M. Oshima. Programming and Deploying Mobile Agents with Aglets.
Addison-Wesley, 1998.
6. L. Moreau. Distributed Directory Service and Message Router for Mobile Agents.
Science of Computer Programming, Vol. 39, No. 2-3, pp. 249-272, 2001.
7. A. L. Murphy and G. P. Picco. Reliable Communication for Highly Mobile Agents.
Journal of Autonomous Agents and Multi-Agent Systems, Vol. 5, No. 1, pp. 81-100,
2002.
8. C. Perkins, IP Mobility Support. RFC 2002, October 1996.

