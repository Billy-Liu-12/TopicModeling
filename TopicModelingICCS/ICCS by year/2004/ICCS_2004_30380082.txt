A Concept of Replicated
Remote Method Invocation
Jerzy Brzezinski and Cezary Sobaniec
Institute of Computing Science
Poznan University of Technology, Poland
{Jerzy.Brzezinski,Cezary.Sobaniec}@cs.put.poznan.pl

Abstract. In this paper we present a new infrastructure for building
distributed applications that communicate through remote objects. The
objects are available by the use of the Java RMI, enhanced by replication. Shared objects may be arbitrary complex with references to other
objects allowing nested invocations. The replication process may be controlled and tuned by careful design of shared objects granularity, explicit
synchronization operations, and replication domains deﬁnitions.

1

Introduction

Replication is one of the key concepts in distributed systems, introduced mainly
for increasing data availability and performance. It consists in maintaining multiple copies of data items (objects) on diﬀerent servers. However, replication introduces some serious problems like consistency. Centralized systems have only
one version of every object, and its state at any time reﬂects the last write operation on that object. In a distributed system the notion of last is not so obvious
because of the lack of a common clock. Every system using replication must
therefore use some kind of consistency protocol that will arrange communication
between replicating servers. Consistency protocol is a practical implementation
of a consistency model that deﬁnes guarantees provided by the system regarding
operation execution order.
In this paper we present a concept of a system for sharing objects in a
distributed environment that supports replication. The fact of replica existence
must be known by the user, and the system expects some cooperation in order to
maintain the replicas in consistent state. We use Java RMI as the basic operation
model, because it is a widely accepted solution, and allows tight integration of
remote objects with application code.
Java Remote Method Invocation [1] is an extension of the Java programming
language and its Java Object Model into Distributed Object Model [2]. It allows
applications to call methods of remote objects in the same manner as they call
methods of local objects. Essentially it is a kind of remote procedure call known
This work was supported in part by the State Committee for Scientiﬁc Research
(KBN), Poland, under grant KBN 7 T11C 036 21
M. Bubak et al. (Eds.): ICCS 2004, LNCS 3038, pp. 82–89, 2004.
c Springer-Verlag Berlin Heidelberg 2004

A Concept of Replicated Remote Method Invocation

83

from such products as Sun RPC. The unique feature of RMI is that it seamlessly
integrates with Java programming language hiding the fact of true object location. On the client side the application uses an automatically generated stub that
implements the interface of the shared object. The stub intercepts all method
invocations, transmits the invocation with arguments to the server side, receives
the results, and ﬁnally returns them to the application. On the server side there
is a skeleton that receives a method invocation from a client, unpacks it, and
issues an appropriate method of a locally available object.
Related work. CORBA and DCOM are example technology standards that deﬁne a distributed object model which allows invocations on remote objects in
a very similar way local methods are invoked. Because of their emphasize on
interoperability they are not so tightly integrated with a programming language
as the Java RMI. What is more important: they do not support replication.
NinjaRMI [3] is a ground-up reimplementation of Java RMI with three important enhancements: UDP unicast, UDP multicast, and cryptography support
for reliable, unicast RMI. The system optimizes communication, and is a good
base to build a replication system on top of it.
JGroup [4] uses a group communication approach. A specialized group reference maintains references to all replicas and uses a reliable unicast when communicating replicas. Clients invoke methods of the group reference which causes an
iteration process through replicas until a working one is found. JGroup increases
reliability but does not solve the problem of consistency.
Manta [5] generalizes standard RMI by providing a Group Method Invocation.
Methods can be invoked on a local copy, on a remote object, or on an explicit
group of objects. GMI may be therefore treated as an implementation tool for
building a replication system.
Aroma [6] intercepts remote method calls and propagates them to other replicas. Method invocations are transfered using underlying group communication
with reliable, totally ordered multicast protocol to provide strong replica consistency. One of the most important drawbacks of this approach is a consequence
of the most important advantage: full transparency. Intercepting, decoding, and
distributing method invocations is a costly process.
Highly eﬃcient replication was used for a long time in Distributed Shared
Memory (DSM) systems. They usually relax memory consistency model in order
to achieve a better performance. However, DSM systems are usually memoryoriented instead of object-oriented. Objects in DSM systems are usually simple
encapsulations of data, and do not allow to build complex object structures.
Replicated Remote Method Invocation (RRMI) is an eﬃcient object replication
infrastructure that will increase the availability of shared remote objects. The
system seamlessly integrates with the Java object model thanks to the RMI
concept, and, on the other hand, provides eﬃcient replication using consistency
protocols adapted from DSM systems. The shared object model does not restrict
possible complexity of object structures, allowing the developer to create objects
that reference other objects, with methods that call methods of other objects.

84

J. Brzezinski and C. Sobaniec

We give the developer tools for optimizing the replication management such as:
explicit synchronization and replication domains.

2

Design of RRMI

Replication strategy. Object replication in general is a complex task resulting
from potential object complexity. Our previous experience [7] concerning object replication was limited to simple read-write objects, where objects may be
treated as variables wrapped with objects that provide simple access methods
for these variables. General objects provide methods that modify their state in
an arbitrary way. The ﬁrst problem that arises while replicating such objects is
distinction between methods: which methods modify the state, and which are
read-only methods. The problem may be generalized to the problem of identiﬁcation of commuting methods, i.e. methods that may be safely executed concurrently, possibly on diﬀerent replicas. A simple example is a queue object that
can execute concurrently two modifying methods add and get unless it is empty.
In RRMI the user annotates the shared object interface with statements indicating whether the method is a modifying one or not. The statements are then
interpreted by a stub compiler to optimize method invocations.
Replication requires some kind of consistency management in order to hide
replicas divergence from the user. An important part of consistency management
is updating policy. Objects can be updated by means of state transfer or operation transfer. State transfer is usually used by DSM systems which use a ﬂat
page of memory as the basic sharing structure. In such systems update consists
in transferring the whole updated page, or in computing so called diﬀs [8] that
eﬃciently represent changes applied to memory page. Tracking changes made on
objects, and especially object structures, is not that simple, and causes considerable computing overhead. The alternative is to transfer the whole object state
every time it changes, which results in unacceptable communication overhead.
For these reasons we have chosen operation transfer as the basic replica update
policy.
Usually replication techniques are divided into two distinctive groups: passive replication and active replication [9]. The classiﬁcation is somehow related
to replica update policy but it emphasizes another aspect of replication: the
organization aspect. In passive replication the processing takes place only at a
single server, called the primary replica, and then is transfered (using state transfer ) to other replicas. In active replication all replicas are contacted directly by
the client, and are instructed to execute a given processing. Our approach is a
mixture of these two approaches. Clients of RRMI contact only a single server
(as in passive replication), the server registers appropriate method invocations
on shared objects, and later sends the invocation history to other replicas where
the methods are re-executed. This procedure assumes obviously a deterministic
processing on replicas (as in active replication). Our system tries to be as lazy
as possible: updates are sent to the nodes that really need them, usually after
explicit requests.

A Concept of Replicated Remote Method Invocation

85

State transfer systems are easy to implement because they require keeping
only the newest version of all objects in the system with some kind of timestamps
indicating its version. When a replica needs to be updated, the current version
is located, transfered, and replaces the old one, regardless of the state of the
replica. This is not the case in advanced state transfer systems (i.e. using diﬀs),
nor operation transfer systems. They need to apply all changes made on an
object by all servers, and apply them in order. In case of object replication
system that permits references between objects and therefore nested calls, it is
also necessary to apply the changes in causal order. We register and reconstruct
the causal order of method invocations by the use of vector clocks which are also
used by the consistency manager (see Sect. 3).
Shared object structure. Objects are very diﬀerent entities. They may be as small
as single variables, or as large as databases. This raises important problems
when designing a system that provides replication facility of such objects. Every
object registered and maintained by the replication infrastructure needs some
additional data structures that keep track of its replicas consistency. The best
performance can be achieved when the size of maintenance structures is small
compared to the size of shared objects. The size of a shared object therefore
should be as large as possible. However, this limits the possible concurrency level
of applications accessing shared objects. In an extreme case the system would
handle a single shared object with permanent access conﬂicts on replicas that are
constantly inconsistent. In order to minimize possible number of conﬂicts and to
increase concurrency, the shared data space should be divided into small, possibly
autonomous entities. This claim is however in conﬂict with the previous one. In
RRMI we leave the decision of object granularity to the user. He is responsible
for designing shared objects in a manner that will be the best possible tradeoﬀ between concurrency and maintenance overhead. The system does not have
enough knowledge about the application characteristics to make the decision in
a better way.
Construction of more advanced objects very often requires the use of other
objects because they are inherently complex. For example, one object may consist
of a couple of other objects. Our system does not require explicit registration
of all internal objects within the shared space. It is only necessary to register
the top-level, interface objects. The whole internal structure will be replicated
along with the main object. This concept is similar to clouds of objects used in
Manta [5]. However, our objects may still have references to other shared objects
which is not the case in Manta clouds. We use regular Java references to point
to internal objects, and remote references to point to other shared objects. The
kind of reference therefore semantically deﬁnes boundaries of replication entities.
Nested invocations. Objects are not isolated structures. Usually they are in relations with other objects which is expressed in programming languages as references to other objects. References allow invocations of other objects’ methods,
that is nested invocations. Pure active replication systems that permit nested
invocations face the problem of repeated calls when the nested object is called

86

J. Brzezinski and C. Sobaniec

several times by its callee that is also replicated. The system should either detect such repeated calls and silently ignore them, or avoid them by ignoring some
calls at their source. RRMI solve the problem in a slightly diﬀerent manner. Because of the replication strategy, the objects are called directly by the client
only once. Such calls are then transmitted to replicas, but the re-execution is
explicit, therefore may be treated diﬀerently — it is just not replicated. The only
method invocations that are replicated come directly from the user. Whenever a
nested method is called by a shared object, it is executed only on locally available replica of that object. Such nested calls are not registered in the history,
and are not replicated. This assumes that every shared object reachable through
remote references is available locally.
Naming. In standard RMI, objects, before they can be accessed, are bound to a
name within a registry. Registry is a simple naming service that holds an array
of objects’ stubs, and sends them to clients when they issue lookup operation.
The stub internally contains enough information to locate the server that provides the object implementation, i.e. its address and port number. The standard
implementation does not assume replication, so every object is registered only
once, at the server that provides its implementation. In an environment supporting replication the registry is aware of object replicas and returns stubs pointing
to the nearest server. “Near” may be deﬁned diﬀerently: based on the network
delay, latencies, server load, and other factors.
The process of object creation and registration needs to be done atomically in
order to avoid conﬂicting name resolutions at diﬀerent servers. These operations
are integrated within the consistency management. Successful object creation
guarantees that there was no other object with a given name before that creation.
Remote references may be passed by value between shared objects as method
parameters. When such a reference is transfered to another server, its representation is updated to point to that server, if the server holds a replica of that
object. This is necessary to properly handle nested calls: it was assumed that
replicas of objects that are referenced are available locally, at the same server.
Replication domains. Objects in RRMI are allowed to call methods of other objects because they are expected to be available locally. In the worst case, when
there is some kind of link between every object in the system, the assumption
will require total replication of all objects. Obviously this does not lead to optimal eﬃciency, because some replicas will be updated even when they are not
accessed by anyone. We introduce a new concept of replication domains [10]
in order to alleviate the problem. A replication domain essentially is a set of
shared objects that may reference each other, and a set of servers that maintain
their replicas. There are no references between objects from diﬀerent domains.
Objects from diﬀerent domains may be replicated on a diﬀerent set of servers.
The concept reﬂects diﬀerent requirements of concurrent applications that run
on top of RRMI. Applications have diﬀerent expectations concerning objects
availability, and their consistency management. The programmer is responsible
for deﬁning replication domains and objects’ associations to domains.

A Concept of Replicated Remote Method Invocation

87

Transport layer. One of the most important factors that inﬂuence the availability of remote objects is the communication infrastructure that is used to
access the objects or their replicas. We use two diﬀerent transport mechanisms
to communicate between processes. Remote invocations coming from clients are
transfered using TCP connections. However, in contrary to the standard RMI
implementation, we establish a single connection between a client and a server,
and keep it open between consecutive calls. Java RMI uses a new TCP connection every time a method is called, which may result in a poor eﬃciency if the
methods are issued frequently. On the other hand, a client is usually located at
the same host as the server being contacted by the client, or on a host that is
located close to such a server (e.g. within the same LAN). As a consequence, the
connection overhead introduced by TCP protocol remains low, and its reliability
gives the client precise monitoring of the link status.
Communication between servers maintaining objects’ replicas is carried out
diﬀerently. The servers are located on diﬀerent nodes, usually distant. In order
to facilitate and optimize the communication we have developed a new message
passing library dedicated for the Java environment. It is called JMPL — Java
Message Passing Library. The library was used in our previous project Jash
[7]. RRMI uses the second revision of JMPL which is substantially rewritten
and enhanced. Currently the library is much more ﬂexible, supports dynamic
reconﬁguration, uses new features of the Java language, and is ready to work
in an unreliable environment. JMPL uses UDP as the main transport protocol,
but provides typical features of the TCP protocol like: reliable communication,
ordering, ﬂow control, message fragmentation, or windowing.

3

Consistency Maintenance

Replication introduces the problem of consistency when replicas are allowed to
change. The problem becomes more complicated when modiﬁcations can be done
concurrently at diﬀerent replicas, i.e. in a multi-master model. Concurrent conﬂicting writes should not be allowed, or, in an optimistic approach [11], detected
and resolved.
Our approach in RRMI system at this stage of development is close to pessimistic replication. It means that it is not possible to submit concurrent, conﬂicting object updates. Such updates would require a roll-back mechanism that
is necessary to reschedule non-commutative operations in the case of a conﬂict.
However, RRMI tries to postpone update propagations to maximum extent in
order to minimize delays when submitting modiﬁcations to a shared object.
Traditionally, one of the most important goals of systems supporting replication in a distributed system was to hide the fact of replication from the user,
i.e. to make the replication as transparent as possible. Although possible, this
transparency comes at a cost. Usually it requires a kind of strong consistency
where all replicas are updated or invalidated at the same time. Such protocols tend to be highly ineﬃcient, and are only useful in systems with a high
read/write operation ratio. Other models have been developed and they relax

88

J. Brzezinski and C. Sobaniec

somehow consistency constrains at the cost of user awareness of the replication.
In RRMI we have used entry consistency (EC) [12] as the basic consistency
model. Entry consistency is a kind of relaxed consistency that uses special synchronization operations on locks. These operations are used explicitly by the user
to instruct the underlying replication managers when and where a given portion
of data should be updated. There are two synchronization operations: acquire
and release, that indicate blocks of code when a replica should be updated. EC
additionally distinguishes between acquires in shared mode and acquires in exclusive mode, in order to make possible concurrent reads of objects. Another
unique feature of EC compared to release consistency (RC), is that it requires
explicit association of shared objects to locks. In RC the association is implicit
and may be deduced by analyzing the code. RRMI is a public system that is
designed to be used by diﬀerent applications at the same time. For this reason,
the associations of locks to shared objects should be explicit, and available for
applications communicating only with the system.
The consistency management layer intercepts method invocations in stubs,
especially in server stubs. The user is expected to select a lock for every shared
object during object creation. Several objects may be synchronized using a single
lock. Consider the following example code:
Lock l = new Lock("mylock");
SharedObject x = new SharedObject("myobject1", l);
SharedObject y = new SharedObject("myobject2", l);
l.acquire(Lock.RW);
x.method1(argument1);
y.method2(argument2);
l.release();

Here, the lock was explicitly acquired. The same processing may be also done
using implicit synchronization. The server stub will detect that the appropriate
lock has not been acquired, and will acquire it before calling the method, and
release after the method returns. This model is close to strong consistency, and is
attractive for its full transparency. However, it does not allow the user to optimize
the processing in order to decrease the number of synchronization operations.
In the example, there is no synchronization operations between method1() and
method2(), neither explicit nor implicit. Explicit synchronization may be necessary in deadlock prevention. Another possible usage of this technique is an
atomic update of a set of objects, an operation not possible with strong consistency without implementing additional synchronization mechanisms.
Processing history. Modiﬁcations of objects are not sent directly to other servers
right after their submission. RRMI uses operation transfer which requires gathering information about the processing. This is done by maintaining histories of
processing at every server. Servers register all top level local method invocations
submitted by clients, and incorporate parts of histories from other servers sent
during synchronization operations (namely acquires). The histories are applied
at servers in causal order. Causal order is preserved thanks to vector clocks that
represent number of synchronization operations (acquires) issued at servers.

A Concept of Replicated Remote Method Invocation

4

89

Conclusions

In this paper we have presented a new infrastructure for building distributed
applications that communicate through remote objects. The construction of the
system is currently being ﬁnalized, and we expect to get more practical experience and carry out some performance evaluation tests. Future work will be
concentrated on introducing other consistency models, especially those which
are more client-oriented, and on increasing dependability of the system through
object recovery in case of server crashes.

References
1. Sun Microsystems: Java Remote Method Invocation Speciﬁcation. (1998)
2. Wollrath, A., Riggs, R., Waldo, J.: A distributed object model for the Java system. In: 2nd Conference on Object-Oriented Technologies & Systems (COOTS),
USENIX Association (1996) 219–232
3. Gribble, S.D., Welsh, M., Brewer, E.A., Culler, D.: The MultiSpace: An evolutionary platform for infrastructural services. In: In Proc. of the 16th USENIX Annual
Technical Conference, Monterey, CA, USA (1999) 157–170
4. Montresor, A.: The JGroup distributed object model. In: Proc. of the Intl. Working Conference on Distributed Applications and Interoperable Systems, Helsinki,
Finland (1999) 389–402
5. Maassen, J., Kielmann, T., Bal, H.E.: Parallel application experience with replicated method invocation. Accepted for publication in Concurrency and Computation: Practice and Experience (2001)
6. Narasimhan, N., Moser, L.E., Melliar-Smith, P.M.: Transparent consistent replication of Java RMI objects. In: Proc. of the International Symposium on Distributed
Objects and Applications (DOA’00), Antwerp, Belgium (2000)
7. Brzezi˜
nski, J., Sobaniec, C., Szychowiak, M., Wawrzyniak, D.: Jash: A platform
for sharing data in distributed Java applications. In: Proc. of the Int’l Conf. on
Parallel and Distributed Processing Techniques and Applications (PDPTA ’98),
Las Vegas, USA (1998) 1430–1437
8. Amza, C., Cox, A.L., Dwarkadas, S., Keleher, P., Lu, H., Rajamony, R., Yu, W.,
Zwaenepoel, W.: Treadmarks: Shared memory computing on networks of workstations. IEEE Computer 29 (1996) 18–28
9. Pedone, F., Wiesmann, M., Schiper, A., Kemme, B., Alonso, G.: Understanding
replication in databases and distributed systems. In: Proc. of the 20th International
Conference on Distributed Computing Systems (ICDCS’00), Taipei, Taiwan (2000)
464–474
10. Sobaniec, C., Wawrzyniak, D.: Using domains to support replication in a distributed shared object system. In: Proc. of Int’l Conf. on Parallel and Distributed
Computing and Networks (PDCN 2004), Innsbruck, Austria (2004)
11. Saito, Y., Shapiro, M.: Optimistic replication. Technical Report MSR-TR-2003-60,
Microsoft Research (2003)
12. Bershad, B.N., Zekauskas, M.J., Sawdon, W.A.: The Midway distributed shared
memory system. In: Proc. of the 38th IEEE Int’l Computer Conf. (COMPCON
Spring’93). (1993) 528–537

