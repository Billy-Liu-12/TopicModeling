Parallelization of Pricing Path-Dependent
Financial Instruments on Bounded Trinomial
Lattices
Hannes Schabauer1 , Ronald Hochreiter2 , and Georg Ch. Pﬂug2
1

Research Lab Computational Technologies and Applications, University of Vienna
hannes.schabauer@univie.ac.at
2
Department of Statistics and Decision Support Systems, University of Vienna
{ronald.hochreiter,georg.pflug}@univie.ac.at

Abstract. Complex ﬁnancial instruments are a central concept for the
survival of ﬁnancial enterprises in liberalized markets. The need for fast
pricing of more complex and exotic ﬁnancial products led to the development of new algorithms, and to the parallelization of existing algorithms. In this paper, we present a parallelization scheme for pricing
path-dependent interest rate products on bounded trinomial lattices. The
basic building block presented in this paper can be used to build more
complex pricing schemes. The paper is concluded by a set of numerical
results concerning the speedup of the proposed parallelization scheme.
Keywords: computational ﬁnance, pricing, bounded lattice, cluster computing, parallelization.

1

Introduction

Pricing a ﬁnancial contract is based on the calculation of its respective present
value, which is done by computing the expected, discounted cash-ﬂow given a
cash-ﬂow function. The underlying interest rate process, which is the basis of
the calculations is most commonly given as continuous-time stochastic process.
In order to numerically cope with such processes, one can either apply MonteCarlo methods or use some sort of time and state discretization, see e.g. [1]. If a
stochastic process is simulated and discretized, then this discretization process
leads to (non-recombining) trees or recombining trees (lattices) - see Figure 1
for two-stage, binomial examples of these structures.
Using a lattice model results in problems of polynomial order if the lattice has
polynomial growth and cash-ﬂows may be represented on the lattice. However,
exotic contracts, which are of growing importance for practical applications,
deﬁne the payable cash-ﬂows as a function of the whole history of the underlying
interest rate process. The tree covering the history grows exponentially and
therefore the complexity of pricing such contracts is non-polynomial. For certain
subclasses of cash-ﬂow functions however, a polynomial pricing algorithm exists,
see [2]. Algorithms of this subclass are an essential component of the AURORA
M. Bubak et al. (Eds.): ICCS 2008, Part II, LNCS 5102, pp. 408–415, 2008.
c Springer-Verlag Berlin Heidelberg 2008

Parallelization of Pricing Path-Dependent Financial Instruments

t=0

1

2

ÆÓÒ¹Ö ÓÑ Ò Ò ØÖ

t=0

1

409

2

Ê ÓÑ Ò Ò ØÖ ´Ð ØØ µ

Fig. 1. Tree-type structures

Financial Management System, a modular decision support tool for asset and
liability management under development at the University of Vienna, see [3].
The main aim of this paper is to present a parallelization of the algorithms
presented there for the special structure of bounded trinomial lattices. For an
algorithmic and implementational overview of the general pricing methodology
on trees, see [4] and [1]. Some foundations of the work presented in this paper
have also been shown by [5]. Parallelization approaches for binomial trees (BT)
have been proposed e.g. in [6] and [7]. Parallelizations of trinomial trees (TT)
in [8]. In [9] two parallel - shared memory and distributed memory - algorithms
for implementing the lattice methods for pricing European and American style
equity options are discussed. Special parallelization schemes for Asian option
structures are presented in [10].
A summary of the topic of ﬁnancial pricing related to high performance computing is presented by [11]. The idea is to modify pricing algorithms to optimally run on clusters of workstations and some Grid middleware (see [12] for a
summary of the importance for the whole ﬁnancial industry). Both extensions
provide an interesting infrastructure for pricing complex ﬁnancial instruments,
especially with a proper portage of the underlying data format of the pricing
process (trees) to specialized hardware structure.
This paper is organized as follows. Section 2 describes the lattice approach to
pricing path-dependent interest rate instruments. Section 3 summarizes parallelization issues, and the chosen parallelization approach and Section 4 contains
numerical results, while Section 5 concludes the paper.

2
2.1

Path-Dependent Financial Instruments
Interest Rate Path Dependency

Financial instruments tend to become increasingly complex, due to ever changing
regulatory situations in liberalized markets. Many interest rate products do not
only depend on the interest rate at the time of exercise of the instrument, but on
an interest rate, that depends on the path of the underlying interest rate. The
calculation of the eﬀective interest rate may be based on the following modiﬁers.

410

H. Schabauer, R. Hochreiter, and G.Ch. Pﬂug

– Mean-type. The eﬀective interest rate is the arithmetic mean or geometric
mean of the interest rate path.
– Barrier-type. The eﬀective interest rate is modiﬁed if the underlying interest rate reaches certain lower or upper barriers.
– Extremum-type. The eﬀective interest rate is bound to some upper and/or
lower level.
Furthermore the eﬀective interest rate may depend on the whole path of the
interest rate process (full path dependency) or only on the last tl stages (limited
path dependency). While the eﬀective interest rate of path-independent interest
instruments depends on the current market interest rate, the contracted interest
rates of path-dependent interest rate instruments are contingent to the historical
path of the underlying interest rate. We assume, that a model for discretizing
the process is available. Many other instruments are available respectively can be
generated out of some basic building blocks. The strategy for creating complex
products out of simpler building blocks is shown by [2].
The underlying time-discretized stochastic process has a ﬁnite set of T stages
(points in time), which constitutes the complexity parameter for the calculations.
It might be useful to use a ﬁne-grained time discretization, i.e. hourly steps. Such
a ﬁne time-discretization results in up to tens of thousands of stages for long-term
ﬁnancial products.
For most algorithms on lattices, a backward and a forward recursive algorithm
can be deﬁned. Introduce the conditional present values P Vt,j (c) for a future
state (t, j) as the conditional expectation shown in Eq. 1.
T

E[ s=t cs (ξs ) fs−1 (ξs−1 ) · · · ft (ξt )|ξt = j] =
T
ct (j) + E[ s=t+1 cs (ξs ) fs−1 (ξs−1 ) · · · ft (ξt )|ξt = j]

(1)

The conditional present values P Vt,j satisfy a recursion. The basic backward
recursion to calculate the present value of a path-independent product is shown
in Table 2.1. The vectors C and F contain the cash-ﬂow and the discount factors,
which are deﬁned for all nodes in the lattice respectively. St denotes the set of
possible states at time t.
Table 1. Basic backward recursion algorithm

1
2
3
4
5
6
7
8

BackwardRecursion (C, F ) returns P V0
forall j ∈ ST
P VT,j ← cT (j)
endforall
for t ← T − 1 downto 0
forall j ∈ St
P Vt,j ← ct (j) + ft (j) k P Vt+1,k pt,j,k
end forall
end for

È

Parallelization of Pricing Path-Dependent Financial Instruments

411

This algorithm is the basic block for pricing path-dependent present values,
such as both mean-type cash ﬂow structures, see [2].
2.2

Bounded Trinomial Lattices

Table 2 compares binary and ternary lattices and trees of height T . However,
instead of working plain trinomial lattices (TL), whose number of nodes is (T +
1)2 , it is more common to use bounded trinomial lattices (BTL). A bounded
trinomial lattice is bounded in a stage tb < T . In all succeeding stages, starting
in tb , the highest-value as well as the lowest-value node do not branch into new
additional lower and upper value nodes, i.e. the number of nodes per stage is
constant ((2·tb )−1). A methodology to calibrate such lattices has been proposed
by [13]. A degenerated bounded trinomial lattice (DBTL) has the additional
feature that it is only binomial at the highest-value and lowest-value. The choice
of the bound structure (degenerated or not) is determined by the underlying
calibration methodology.
Table 2. Complexity of lattices and trees
Type of lattice
Binary
Ternary
1
Nodes (Lattice)
(T
+
2)(T
+
1)
(T
+ 1)2
2
Arcs (Lattice)
T (T + 1)
3T 2
T +1
1
Nodes (History Tree)
2T +1 − 1
(3
− 1)
2
T +1
1
(3
− 3)
Arcs (History Tree)
2T +1 − 2
2

Bounded lattices consist of a triangular part and a rectangular part as shown
in Figure 2. The triangular part has an increasing number of nodes and edges
at each stage. The present values of both parts can be calculated in parallel.
As expected, parallelization of the triangular part has turned out to be slower
than parallelization of the bounded, rectangular part. The triangular part was
parallelized by dynamic arrays for its nodes and edges. However, parallelization
of this part is not that important, as the rectangular part is considerably larger
than the triangular one in practice.

3

Parallelization

Our parallel approach introduces pricing of path-dependent contracts on distributed memory machines (clusters of PCs or workstations) [14].
3.1

Iterative and Recursive Problem Pattern

A very general algorithm for path-dependent pricing can be described as follows.
The algorithm includes both bounded and non-bounded parts of a lattice. Our
approach of parallelizing is a combination of a divide-and-conquer algorithm
combined with data decomposition. You can imagine the structure of a path

412

H. Schabauer, R. Hochreiter, and G.Ch. Pﬂug
Ternary bounded lattice, T=4, NB=2
#nodes=19, #arcs=42

t=0

t=1

t=2

t=2

t=3

t=4

Fig. 2. Triangle and rectangle part

dependent lattice as a bundle of independent parts of the whole lattice. Therefore
it is possible to calculate the parts in parallel, without communication during the
computation. Each part is called here a sweep. For example, if a lattice extends
over 5 periods (T = 5), you result in sweeps 1, 2, 3, 4 and 5. Communication
between the nodes is only needed before and after performing the respective
sweeps. Though, one should note that each sweep has a diﬀerent runtime. Our
parallel algorithm divides the subproblems into parts, which can be calculated
in the same amount of time together. The way of dividing the lattice into parts
is as follows. Consider the example of three nested loops. The interior loop is
calculating all nodes in same state, in same time period, in the same sweep. One
node needs the values of all adjacent edges and vertices. These have already been
calculated in the last step. Thus, in the inner loop all vertices in same period,
same sweep are calculated. A covering loop iterates over all time periods start
at the period of the sweep, ending at period 0. The outer loop is iterating over
all sweeps.
3.2

Parallel Code and Data Structure

In principle, all three loops have to be observed in order to ﬁnd the best one for
ﬁnding an eﬃcient way of parallelization. Parallelization of the interior loop has
been tried earlier. It turned out not to work well, as the ratio of computation
to communication is not high enough. The covering loop can not be parallelized
by any means, because of its recursive calculation. As described in [2], a path
dependent lattice carries two diﬀerent types of data: Path dependent and path
independent data. Path independence occurs on discount factors and probabilities, whereas path dependency occurs on cash ﬂows and calculated present
values. From the algorithmic point of view, this means that discount factors

Parallelization of Pricing Path-Dependent Financial Instruments

413

and probabilities are the same for all respective sweeps. We just have to copy
them before calculating. Cash ﬂows and obviously also calculated present values
are diﬀerent for each iteration at each state and in each sweep. Calculating a
net present value of T periods yields to T diﬀerent subproblems (sweeps) from
1 . . . T . Their respective runtime complexity equals to the number of the sweep.
E.g. Sweep 100 takes 50 times of sweep 2. Notice that after distributing all jobs
to the nodes, we want to have our results at the end on the same time. Therefore
we combine sweeps, which pairwise sum up to the same value.
3.3

Simpliﬁed Numerical Example

Let us consider an example of a ternary bounded lattice of height 99, lasting
over 20 periods, running on a cluster with 4 nodes. Such a lattice consists of
20 distinct sweeps, starting at 1, 2, 3, . . . , 19, 20. In each sweep, we need sweep
× height cash ﬂows. In order to gain the same amount of data at each sweep,
we combine two of them. Here, we combine sweep 20 with sweep 1, 19 with 2
and so on. Thus we can result in 10(20/2) columns of 21 · 99 cash ﬂows. Now we
distribute these cash ﬂows in equal sizes to our worker nodes. 10 columns for 3
worker nodes results in 3 columns per node. The remaining column is performed
by the master node.
16
j = 25
j = 49
j = 75
j = 99
Linear speedup

14

Speedup

12
10
8
6
4
2
0
1

2

4

6

8

10

12

14

16

Number of nodes
Fig. 3. Speedups for diﬀerent bounded heights j

4

Numerical Results

Parallel codes have been tested on the Schroedinger III cluster1 at the Vienna
University Computer Center at the University of Vienna. Calculations were done
on single-core processors, therefore all communication utilizes network communication, which takes signiﬁcantly more time than locally on SMP or multi-core
1

http://www.univie.ac.at/ZID/schroedinger/

414

H. Schabauer, R. Hochreiter, and G.Ch. Pﬂug

Table 3. Runtime for T = 3000 (left) and T = 2000 (right) for n = 1 to 16 parallel
computing nodes with a bounded height j of 25, 49, 75, 99

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

25
9,487
16,980
4,484
2,960
2,289
1,859
1,609
1,320
1,203
1,089
0,976
0,917
0,871
0,824
0,796
0,746

49
15,693
29,457
9,566
6,371
4,726
3,878
3,273
2,886
2,531
2,292
2,070
1,929
1,769
1,695
1,566
1,535

75
26,778
32,722
15,828
10,511
7,890
6,378
5,230
4,613
4,128
3,628
3,324
3,085
2,867
2,671
2,515
2,433

99
35,203
43,640
21,339
14,082
10,707
8,511
7,070
6,113
5,449
4,816
4,375
4,003
3,773
3,464
3,253
3,089

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

25
3,389
5,792
3,542
1,316
1,003
0,761
0,640
0,535
0,476
0,437
0,402
0,421
0,390
0,390
0,378
0,363

49
6,781
14,789
10,476
2,902
2,175
1,722
1,398
1,226
0,121
0,988
0,922
0,882
0,832
0,785
0,742
0,726

75
10,627
24,421
15,917
4,539
3,417
2,683
2,234
1,914
1,718
1,558
1,433
1,386
1,273
1,214
1,312
1,558

99
13,997
33,812
9,050
5,980
4,535
3,574
2,910
2,488
2,230
2,003
1,832
1,738
1,601
1,519
1,593
1,824

processors. The structure of the cluster at the time of the calculation of the
results below consisted of 240 nodes. Each node has a Pentium 4 Prescott CPU,
operating at 3.2 GHz, and 2 GB RAM. The runtime environment is operating on
a Gigabit network, interconnected by a Cisco 6500 switch. The total performance
is approximately 1.14 Teraﬂops per second (linpack).
All program codes were written in Fortran 90, using mpich 1.27. The used
compiler was Portland Group pgf90 6.1-1 (x86-64 Linux).
The resulting runtime for T = 3000 and T = 2000 is summarized in Tab. 3.
The speedup is shown graphically for T = 3000 for all four heights in Fig. 3.
The speedup results indicate, that the algorithm scales well.

5

Conclusion

In this paper, we presented a parallelization scheme for pricing path-dependent
interest rate instruments deﬁned on discrete-time bounded trinomial lattices.
Generally, tree and lattice-based data structures are not perfectly suited on cluster architectures. However, the results look promising to continue the work and
extend the underlying ﬁnancial problems from pricing path-dependent interest
rate products to option pricing or large-scale multi-stage stochastic tree-based
portfolio optimization.

References
1. J¨
ackel, P.: Monte Carlo Methods in Finance. John Wiley & Sons, Chichester (2002)
2. Hochreiter, R., Pﬂug, G.C.: Polynomial algorithms for pricing path-dependent interest rate instruments. Computational Economics 28(3), 291–309 (2006)

Parallelization of Pricing Path-Dependent Financial Instruments

415

´ etanowski, A., Dockner, E., Moritsch, H.: The Aurora ﬁnancial
3. Pﬂug, G.C., Swi¸
management system: model and parallel implementation design. Annals of Operations Research 99, 189–206 (2000)
4. Clewlow, L., Strickland, C.: Implementing Derivative Models. John Wiley & Sons,
Chichester (1998)
´ etanowski, A.: Selected parallel optimization methods for ﬁnancial
5. Pﬂug, G.C., Swi¸
management under uncertainty. Parallel Computing 26(1), 3–25 (2000)
6. Thulasiram, R., Bondarenko, D.: Performance evaluation of parallel algorithms
for pricing multidimensional ﬁnancial derivatives. In: Fourth International Workshop on High Performance Scientiﬁc and Engineering Computing with Applications
(HPSECA 2002), pp. 306–313. IEEE Computer Society, Los Alamitos (2002)
7. Gerbessiotis, A.V.: Architecture independent parallel binomial tree option price
valuations. Parallel Computing 30(2), 303–318 (2004)
8. Gerbessiotis, A.V.: Trinomial-tree based parallel option price valuations. Parallel
Algorithms and Applications 18(3), 181–196 (2003)
9. Campolieti, G., Makarov, R.: Parallel lattice implementation for option pricing
under mixed state-dependent volatility models. In: 19th International Symposium
on High Performance Computing Systems and Applications (HPCS 2005), pp. 170–
176. IEEE Computer Society, Los Alamitos (2005)
10. Huang, K., Thulasiram, R.K.: Parallel algorithm for pricing american asian options
with multi-dimensional assets. In: 19th International Symposium on High Performance Computing Systems and Applications (HPCS 2005), pp. 177–185. IEEE
Computer Society Press, Los Alamitos (2005)
11. Moritsch, H., Benkner, S.: High-performance numerical pricing methods. Concurrency and Computation: Practice and Experience 14(8-9), 665–678 (2002)
12. Harris, D.: Will ﬁnancial services drive Grid adoption? Grid Today 3(40) (2004)
13. Hull, J., White, A.: The general Hull-White model and super calibration. Financial
Analysts Journal 57(6) (2001)
14. Dongarra, J., Sterling, T., Simon, H., Strohmaier, E.: High-performance computing: Clusters, constellations, MPPs, and future directions. Computing in Science
and Engineering 7(2), 51–59 (2005)

