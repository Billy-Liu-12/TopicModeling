A Tool for Building Collaborative Applications
by Invocation of Grid Operations
Maciej Malawski1 , Tomasz Barty´
nski2 , and Marian Bubak1,2
1

Institute of Computer Science, AGH, Mickiewicza 30, 30-059 Krak´
ow, Poland
2
Academic Computer Centre CYFRONET AGH, Nawojki 11, 30-950
Krak´
ow, Poland
{malawski,bubak}@agh.edu.pl, t.bartynski@cyfronet.pl

Abstract. The motivation for this work is the need for providing tools
which facilitate building scientiﬁc applications that are developed and
executed on various Grid systems, implemented with diﬀerent technologies. As a solution to this problem, we have developed the Grid Operation
Invoker (GOI) which oﬀers object-oriented method invocation semantics
for interacting with computational services accessible with diverse middleware frameworks. GOI forms the core of the ViroLab virtual laboratory engine and it is used to invoke operations from within experiments
described using a scripting notation. In this paper, after outlining the
features of GOI, we describe how it is enhanced with a mechanism of
so-called local gems which allows adding high-level support for middleware technologies based on the batch job-processing model, e.g. EGEE
LCG/gLite. As a result, we demonstrate how a molecular dynamics program called NAMD, deployed on EGEE, was integrated with the ViroLab
virtual laboratory.
Keywords: tools, application building, Grid computing, virtual laboratory, EGEE, DEISA.

1

Introduction

Grid infrastructures have been considered the most appropriate platform for
computational science for many years [1]. Mainstream projects providing such
infrastructures in Europe include EGEE [2] and DEISA [3], but there are also
other initiatives using various middleware frameworks, often based on a serviceoriented architecture or component models. Building applications that can utilize
these infrastructures remains a challenging task for programmers, due to the
relatively low-level interfaces to computing resources, often limited to simple
batch job submission. Therefore, research in the ﬁeld of providing tools for the
development of such programs is of great importance.
Such a challenge is faced by the Virtual Laboratory [4], which is developed in
the scope of the ViroLab project. The experiments in this virtual laboratory are
high-level applications which orchestrate many computational tasks run on the
Grid. The notation used for specifying experiment plans uses the Ruby scripting
language. This approach allows specifying arbitrary complex experiments in a
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 243–252, 2008.
c Springer-Verlag Berlin Heidelberg 2008

244

M. Malawski, T. Barty´
nski, and M. Bubak

modern object-oriented dynamic language, thus giving the programmer full control and ﬂexibility in experiment design. Scripts, being written in a full-ﬂedged
programming language, can deﬁne experiment logic using a rich set of control
structures and also perform some computations locally.
To access the underlying Grid resources, a dedicated module of the virtual
laboratory, called the Grid Operation Invoker (GOI) [5], has been developed. It
applies an object-oriented model with remote procedure call semantics to dispatch computation in a uniform manner using diverse middleware technologies.
Web Services and MOCCA [6] components were supported at the ﬁrst development stage. GOI introduces multiple levels of abstractions, called Grid Objects,
which allow users to interact with various middleware systems.
The main goal of the research presented in this paper was to extend GOI to
support middleware technologies which are based on the job processing model,
which is the case with EGEE and DEISA. Such infrastructures provide scientists
with computational power, storage and a wide range of scientiﬁc applications.
However, their resources are accessed with tools dedicated for one speciﬁc middleware package, which enables submitting jobs or sequences of jobs. In order to
solve a scientiﬁc problem, it is often required to combine results produced by a set
of these tools, as well as by local applications. This procedure is time-consuming
and can be performed only by skilful users. Research can be facilitated by integrating all local tools, Web Services and Grid jobs into a single experiment
which uses a uniform and simple notation to describe all steps of a scientiﬁc
process and automate it entirely.
This paper is organized as follows: Section 2 gives an overview of the related
work on providing access to Grid middleware systems. Subsequently, in Section 3,
we introduce the main concepts of the Grid Operation Invoker and then, in
Section 4 – its role in the virtual laboratory. Subsequently, in Sections 5 and 6, a
detailed description of enhancements which were provided to add support for jobbased middleware systems on the example of LCG/gLite (EGEE) is presented.
In Section 7 we report on experiments which were performed in the virtual
laboratory exploiting this new tool. The ﬁnal section includes a summary and a
brief presentation of future work.

2

Related Work

Numerous software frameworks have been developed to provide high-level access
to Grid services using heterogeneous middleware systems. The Grid Application
Toolkit (GAT) [7], currently evolving into the Simple API for Grid Applications
(SAGA), provides a language-neutral API to basic Grid use cases, such as operations on ﬁles, monitoring events, resources, jobs, information exchange, error
handling and security. However, it does not introduce an object-oriented API
to invoke applications. A similar approach has been undertaken by the authors
of the Grid Services Base Library (GSBL) [8], but it is still limited to such
operations as job submission and ﬁle transfers.
Another high-level approach is implemented in NetSolve/GridSolve [9], which
is an RPC-based system where a client delegates the execution of an operation

A Tool for Building Collaborative Applications

245

to a selected server providing input parameters. The server executes the appropriate service and returns output parameters or error status to the client. Since
GridSolve requires installation of speciﬁc servers, its usage on such infrastructures as EGEE is not straightforward.
Portal-based systems, like GridPortlets and OGCE [10], also provide the
means of accessing multiple middleware technologies. These solutions are usually
dependent on a speciﬁc portal technology (e.g. Java portlets), although recently,
in VINE project, there have been eﬀorts to extend their usability to more general
applications.
Of note are systems used for migrating so-called legacy code applications to
Grid or to Grid Services. Examples of such systems include LGF [11] which wraps
legacy code as Globus 4 services on a ﬁne-grained level, or GEMLCA [12], which
oﬀers a more coarse-grained approach. However, they are limited to a single
middleware suite, such as Globus 4.
Other platforms which aim to facilitate the usage of Grids by scientiﬁc applications include workﬂow systems, such as K-Wf Grid [13], which manages
workﬂows on multiple levels of abstraction; Kepler [14], which allows integrating multiple actor models, and Taverna [15], successfully applied to many lifescience applications. The main drawback of workﬂow systems, in comparison to
the scripting approach, is the limited expressiveness of graphical notations when
applied to more complex experiments.

3

Grid Operation Invoker: Abstractions over the Grid

The Grid Operation Invoker is designed as a module of the Virtual laboratory
engine which is responsible for communication with diverse underlying middleware technologies. Fig. 1 illustrates the Grid Object hierarchy. The main reason
behind introducing this hierarchy and its associated layers of abstraction was
that the complexity of the heterogeneous, distributed environment should be
hidden from end users. Developers of an application should not be concerned
with manually interfacing all underlying middleware technologies – they should
instead be focused on the problem they are solving.
Each Grid Object Class is an abstract entity which deﬁnes a set of Grid Operations. These operations are invoked from the script, while the actual computation
is performed on a remote machine. Each Grid object class may have multiple
Implementations with diﬀerent middleware technologies representing the same
functionality. Each of the implementations may have multiple Instances, possibly
running on diﬀerent resources, thus with diﬀerent levels of performance. Grid
object instances of a speciﬁc class may use a variety of middleware suites and
therefore must be interfaced using their speciﬁc protocols. Moreover, Grid objects may have various properties, such as stateless or stateful interaction mode,
synchronous or asynchronous operation invocation or being private or shared
between experiments runs and users. Developers are not concerned about ﬁnding the optimal instance and interfacing with it; however, they must be aware
of each Grid object’s properties. For instance, they must know whether a Grid
object they are using preserves state between invocations of operations.

246

M. Malawski, T. Barty´
nski, and M. Bubak

Fig. 1. Three levels of the abstraction over the Grid environment

require ’cyfronet/gridspace/goi/core/g_obj’
begin
drs = GObj.create(’org.virolab.DrugRankingSystem2’)
mutations = ’P1M I2L S3T P4Q E6G T7C V8T P9L V10N K11F V35T T39K’.split(’ ’)
res = drs.drs(’ANRS’, ’reverse_transcriptase’, mutations)
puts res
end

Fig. 2. A sample ViroLab experiment invoking the drug ranking Web service using the
Grid Object library

A sample script demonstrating the invocation of the Decision Support System
(DSS) which suggests a drug ranking for a patient with a speciﬁc set of HIV mutations is shown in Fig 2. GObj is a factory for creating Grid objects representing
the DSS Web service. Upon instantiation, the operations of a Grid object can
be invoked directly, as seen in the next line of code. Please note that by using
Ruby string operations, such as split(), simple conversions are possible (this
would be nontrivial in the case of graphical workﬂow systems and would often
require speciﬁc converter or adapter services).

4

Architecture of Grid Operation Invoker

The Grid Operation Invoker is a JRuby implementation of the library that provides a uniform interface to multiple middleware technologies. It supports abstraction over the heterogeneous environment described in Section 3.
Fig. 3 shows how GOI is positioned in the context of other modules of the
virtual laboratory. GOI is a part of GSEngine, which is the main execution
server for experiments, with an embedded JRuby interpreter. Descriptions of
technical information of Grid Objects are stored in the external Grid Resource

A Tool for Building Collaborative Applications

247

Fig. 3. Grid Operation Invoker in the context of the GSEngine

Registry service and the Optimizer module is responsible for selection of optimal
instances if more than one instance is available for a speciﬁc object. The Grid
Object Invoker has a modular architecture, which allows plugging in adapters for
diﬀerent technologies. Web Services and MOCCA components were supported
from the beginning, while adapters for job-based middleware technologies such
as EGEE and DEISA, are the subject of this research and are described in detail
in the following sections.

5

Local Gems

Grid objects which represent application-speciﬁc functionality are often referred
to as gems, by analogy to RubyGems [16] – a standard for distributing Ruby
libraries. Examples of ViroLab gems are such services as the Drug Resistance
Service [17] or the RegaDB HIV sequence alignment and subtyping tools [18],
all wrapped as Grid Objects.
In addition to the Grid Objects corresponding to remote computations, Local
gems are introduced as a way of representing local computation as a Grid object.
From the application developer’s point of view local gems are another computational technology and are accessed via the same uniform interface as other
technologies. Local gems enable one to download the source of a Ruby class,
evaluate the source at runtime and execute it locally. They facilitate sharing
single classes that provide functionality usable for a scientiﬁc community, which
is, however, too lightweight to be exposed as e.g. a Web service. Local gems are

248

M. Malawski, T. Barty´
nski, and M. Bubak

registered in the Grid Resource Registry as a Grid Object Instance and their
source code is stored in the registry.

6

Representation of Applications Executed as Jobs

In order to integrate job-oriented middleware such as EGEE LCG/gLite with the
Grid Operation Invoker, an object-oriented representative of a job is required.
We require a Grid object implementation (technology adapter) which would
delegate the invocation of its operations to the submission of jobs using speciﬁc
Grid middleware, and return a result upon successful completion of a job.
In contrast to the already implemented adapter classes, capable of producing
client-side Grid Object Instance representatives of Web Service and MOCCA
middleware, it is not possible to implement a generic factory for representatives of
jobs. Web Service and MOCCA components are, by their nature, object-oriented
and are contacted using a well-deﬁned interface. Representatives of Grid Object
Instances published with these technologies are actually stubs (proxies) which
provide the same interface and therefore can be generated automatically. Joboriented middleware enables us to execute command-line applications which do
not provide a remote API. Functionality provided by an application is organized
in a set of methods, and is determined on the basis of command-line input
parameters. As a consequence of this fact, the application has to be wrapped
with a special class that exposes its functionality as Grid object methods.

require ’cyfronet/gridspace/goi/utils/lcg/edg_u_i_wrapper’
require ’cyfronet/gridspace/goi/utils/lcg/job_spec’
class NamdWrapper
def molecule_simulate_submit(jobName, inputs, outputs, nodeNumber=1)
@jobSpec = JobSpec.new
@jobSpec.executable=’/bin/bash’
@jobSpec.arguments=(’$VO_VOCE_SW_DIR/NAMD_2.6/namd.run #{inputs[0]}’)
if nodeNumber > 1
@jobSpec.add_property(’JobType’, ’"MPICH"’)
@jobSpec.add_property(’NodeNumber’, nodeNumber.to_s)
end
@jobSpec.stdoutput= jobName + ’.out’
@jobSpec.stderr= jobName + ’.err’
@jobSpec.add_to_output_sandbox(@jobSpec.stdoutput)
@jobSpec.add_to_output_sandbox(@jobSpec.stderr)
inputs.each{ |input|
@jobSpec.add_to_input_sandbox(input) }
outputs.each{ |output| @jobSpec.add_to_output_sandbox(output) }
return @jobSpec
end
...

Fig. 4. Local class wrapping an EGEE NAMD job: the submit() method

Each wrapper class should be application-speciﬁc. It is common practice in
various legacy-code wrapping systems to deﬁne a special descriptor language
(e.g. XML-based) to specify the mapping between object operations and speciﬁc

A Tool for Building Collaborative Applications

249

command-line parameters or program execution. In our case, since Ruby is used
as the implementation language, it is natural to also use Ruby for speciﬁcation
of this mapping. Therefore, we have decided that wrapper classes would be local
gems, able to prepare inputs, submit a job, manage it and retrieve results. Such
local gems, in turn, can use a lower-level Ruby API to interact with middlewarespeciﬁc job management operations.
As an example of how such a local gem is built, let us consider a NamdWrapper
class which enables us to use the molecular dynamics NAMD [19] application
(Fig. 4), which has been installed on a Cyfronet EGEE site. The wrapper uses
two classes provided by the Grid Operation Invoker: EdgUIWrapper, that allows
using the EDG User Interface, and JobSpec, which generates a JDL ﬁle for a given
job. The EdgUIWrapper class provides a Ruby API to LCG/gLite middleware
by wrapping the command-line user interface.
...
def molecule_simulate_get_output
out = edg_job_get_output(@edgJobId)
xscFile = out.get_file(’alanin.xsc’)
return xscFile
end

Fig. 5. Local class wrapping an EGEE NAMD job: the get output() method

The wrapper class must implement two methods for each method of the Grid
Object Instance representative. For instance, representative of the NAMD application provides a molecule simulate() method and the wrapper class must
implement molecule simulate submit() and molecule simulate get output methods. The former method (Fig. 4) generates a JDL ﬁle for a job that performs
the requested computation and performs data conversions if required. The latter
method (Fig. 5) retrieves the job’s output and converts it to Ruby objects.

7

Sample Applications

As stated earlier, the Grid Operation Invoker was implemented and integrated
with the ViroLab Virtual Laboratory. In addition to previously developed adapters for Web Services and MOCCA technologies, support for local gems is now
available. Support for EGEE LCG/gLite middleware was implemented using
local gems. In a similar way, gems from RegaDB for HIV genotyping [18] were
integrated, using WTS [20] services.
A sample application made accessible in the Virtual laboratory is the NAMD
molecular dynamics package. The source code of a sample experiment that performs a molecular dynamics simulation for an alanine amino acid in a water
environment is presented in Fig. 6. At the beginning of the script, the developer
requires a GObj class that provides a uniform interface to create Grid Object Instance representatives. Subsequently, a representative of the NAMD application
is created. Properties of the job are deﬁned (job name, input and output ﬁles

250

M. Malawski, T. Barty´
nski, and M. Bubak

and, ﬁnally, the number of nodes used for computation). The next line invokes
the molecule simulate() method which automatically generates a JDL ﬁle for the
job, submits the job, monitors its status and retrieves results upon successful
completion or informs the user about an error.

require ’cyfronet/gridspace/goi/core/g_obj’
namd = GObj.create(’cyfronet.gridspace.gem.Namd’)
jobName = ’namd’
inputs = [’alanin.namd’, ’alanin.params’, ’alanin.psf’, ’alanin.pdb’]
outputs = [’alanin.coor’, ’alanin.vel’, ’alanin.xsc’]
nodeNumber = 4
namd.molecule_simulate(jobName, inputs, outputs, nodeNumber)

Fig. 6. Application submitting a job that executes NAMD on the EGEE

This experiment may be further extended by adding invocations of the locally
installed VMD (Visual Molecular Dynamics) [21] toolkit, which is a molecular
visualization program, in order to display the obtained results.
GOI is also used to run other experiments in the Virtual laboratory, including a full experiment called “from genotype to drug resistance”. Data mining
experiments can also be built using the Weka [22] toolkit wrapped as MOCCA
components. At present, more services are being added as new gems; among
them the Web services from the European Bioinformatics Institute [23].

8

Summary and Future Work

In this paper we have described the Grid Operation Invoker as a tool facilitating
application building, used by scientiﬁc experiment developers who are familiar
with simple script programming. To hide the complexity of details which are usually required to deal with Grid middleware technologies, we have introduced the
Grid Object abstraction, which represents any type of computational resource.
Support for Web services and MOCCA components as sample technologies was
present from the earliest version of GOI. In this paper we have described how
GOI was extended to support Grid objects representing local processing by local
gems and how this mechanism can be used to add support for middleware systems based on the batch job submission processing model. By introducing simple
wrapper classes implemented in Ruby, we can add an object-oriented interface
to various applications executed on EGEE using LCG/gLite middleware. This
new technology was tested using the NAMD molecular dynamics package and
integrated into the ViroLab Virtual Laboratory.
Further work involves analysis, design and implementation of an introspection
mechanism that will enable interactive execution of experiments. Moreover, we
will work on a module enabling us to plug in diverse security mechanisms, such as
GSI [24] and Shibboleth [25]. Adding support for more middleware technologies,

A Tool for Building Collaborative Applications

251

such as UNICORE [26], AHE [27] and WSRF [28], is also under development.
Thereafter we would like to integrate more Grid Object Instances to be able to
build more complex experiments.
Acknowledgments. This work has been made possible through the support of
the European Commission ViroLab Project [29] Grant 027446. This research is
also partly funded by the EU IST CoreGRID Project and Polish SPUB-M grants.
The authors would like to express their gratitude to Mariusz Sterzel for his hints
on integrating NAMD with our system and deployment on EGEE, and to Tomasz
Gubala, Eryk Ciepiela and Piotr Nowakowski for their comments and input.

References
1. Foster, I., Kesselman, K.: Scaling System-Level Science: Scientiﬁc Exploration and
IT Implications. Computer 39(11), 31–39 (2006)
2. EGEE Homepage (2006), http://public.eu-egee.org/
3. DEISA project (1999), http://deisa.org
4. The ViroLab Virtual Laboratory Website (2008), http://virolab.cyfronet.pl/
5. Bartynski, T., Malawski, M., Gubala, T., Bubak, M.: Universal Grid Client: Grid
Operation Invoker. In: PPAM. LNCS. Springer, Heidelberg (to appear, 2007)
6. Malawski, M., Bubak, M., Placek, M., Kurzyniec, D., Sunderam, V.: Experiments
with distributed component computing across grid boundaries. In: Proceedings
of HPC-GECO/COMPFRAME Workshop in Conjunction with HPDC 2006, pp.
109–116 (2006)
7. Grid Application Toolkit (2004), http://www.gridlab.org/WorkPackages/wp-1/
8. Bazinet, A.L., Myers, D.S., Fuetsch, J., Cummings, M.P.: Grid Services Base
Library: A high-level, procedural application programming interface for writing
Globus-based Grid services. Future Generation Comp. Syst. 23(3), 517–522 (2007)
9. NetSolve/GridSolve (2006), http://icl.cs.utk.edu/netsolve/
10. Zhang, C., Kelley, I., Allen, G.: Grid portal solutions: a comparison of GridPortlets
and OGCE: Research Articles. Concurr. Comput. Pract. Exper. 19(12), 1739–1748
(2007)
11. Bubak, M., Bali´s, B., Sterna, K., Bemben, A.: Eﬃcient and Reliable Execution of
Legacy Codes Exposed as Services. In: Shi, Y., van Albada, G.D., Dongarra, J.,
Sloot, P.M.A. (eds.) ICCS 2007. LNCS, vol. 4487, pp. 390–397. Springer, Heidelberg
(2007)
12. Delaitre, T., Kiss, T., Goyeneche, A., Tersty´
anszky, G., Winter, S.C., Kacsuk, P.:
GEMLCA: Running Legacy Code Applications as Grid Services. J. Grid Comput. 3(1-2), 75–90 (2005)
13. Neubauer, F., Hoheisel, A., Geiler, J.: Workﬂow-based Grid applications. Future
Generation Comp. Syst. 22(1-2), 6–15 (2006)
14. Altintas, I., Jaeger, E., Lin, K., Ludaescher, B., Memon, A.: A Web Service Composition and Deployment Framework for Scientiﬁc Workﬂows. In: ICWS. IEEE
Computer Society, Los Alamitos (2004)
15. Oinn, T.M., Greenwood., R.M., Addis, M., Alpdemir, M.N., Ferris, J., Glover,
K., Goble, C.A., Goderis, A., Hull, D., Marvin, D., Li, P., Lord, P.W., Pocock,
M.R., Senger, M., Stevens, R., Wipat, A., Wroe, C.: Taverna: lessons in creating a
workﬂow environment forthe life sciences. Concurrency and Computation: Practice
and Experience 18(10), 1067–1100 (2006)

252

M. Malawski, T. Barty´
nski, and M. Bubak

16. Thomas, D., Fowler, C., Hunt, A.: Programming Ruby – The Pragmatic Programmer’s Guide, 2nd edn. The Pragmatic Programmers (2004)
17. Sloot, P.M.A., Tirado-Ramos, A., Altintas, I., Bubak, M., Boucher, C.: From
Molecule to Man: Decision Support in Individualized E-Health. Computer 39(11),
40–46 (2006)
18. de Oliveira, T., Deforche, K., Cassol, S., Salminen, M., Paraskevis, D., Seebregts,
C., Snoeck, J., Janse van Rensburg, E., Wensing, A.M.J., van de Vijver, D.A.,
Boucher, C.A., Camacho, R., Vandamme, A.-M.: An automated genotyping system
for analysis of HIV-1 and other microbial sequences. Bioinformatics (2005)
19. Phillips, J.C., Braun, R., Wang, W., Gumbart, J., Tajkhorshid, E., Villa, E.,
Chipot, C., Skeel, R.D., Kal´e, L., Schulten, K.: Scalable molecular dynamics with
NAMD. J. Comput. Chem. 26(16), 1781–1802 (2005)
20. Witty Services (2007), http://wts.sf.net
21. Humphrey, W., Dalke, A., Schulten, K.: VMD – Visual Molecular Dynamics. Journal of Molecular Graphics 14, 33–38 (1996)
22. Witten, I.H., Frank, E.: Data Mining: Practical machine learning tools and techniques. Morgan Kaufmann, San Francisco (2005)
23. Labarga, A., Valentin, F., Anderson, M., Lopez, R.: Web Services at the European
Bioinformatics Institute. Nucl. Acids Res. (2007)
24. Foster, I.T., Kesselman, C., Tsudik, G., Tuecke, S.: A Security Architecture for
Computational Grids. In: ACM Conference on Computer and Communications
Security, pp. 83–92 (1998)
25. Shibboleth (2008), http://shibboleth.internet2.edu/
26. Unicore (2008), http://www.unicore.org
27. Application Hosting Environemt (2007), http://www.realitygrid.org/AHE/
28. The WS-Resource Framework (2007), http://www.globus.org/toolkit/
29. ViroLab (2006), http://virolab.org

