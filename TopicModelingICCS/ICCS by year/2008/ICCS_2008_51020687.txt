Improving Software Development Process Implemented
in Team Project Course
Iwona Dubielewicz and Bogumiła Hnatkowska
Institute of Applied Informatics, Wroclaw University of Technology,
Wyb. Wyspianskiego 27, 50-370 Wroclaw, Poland
{Iwona.Dubielewicz, Bogumila.Hnatkowska}@pwr.wroc.pl

Abstract. The paper presents an assessment approach to software development
process used within students’ team project. The assessment is based on exemplary Process Assessment Model given in ISO/IEC 15504-5 standard. The
results of the assessment suggest the area of improvement in our software development process realization. The history, context and basic assumptions established and proposed for the future improvements in the course are given.
Keywords: team project, software development, process assessment model.

1 Introduction
Software engineering (SE) is a discipline of developing and maintaining software
systems that behave reliably and efficiently, are prepared for future enhancement and
modification, and satisfy the requirements that customers have formulated for them.
Students of SE during their program of study should participate in the development of
software of real-world software.
To fulfill the industrial postulate of incorporating professional practice into the curriculum, since 1998 we have been offering a Software Development Course (SSD).
During this course students work in teams on design and implementation of projects that
involve consideration of real-word issues including safety, efficiency, and suitablity for
the intended users.
Usually every educational course after several editions is a subject to change. It is
especially true for software area because of the rapid changes in the field of software
engineering. Similarly to software development, the course development can be divided into four phases: specification, design, implementation, and assessment. Even
though a course specification is stable and is performed only once, design and implementation of the course is not a one-time process but rather a "work in progress" i.e. it
can be seen as an iterative process. In order to conduct the next course iteration one
should know the results from the assessment of the previous one.
The main aim of the paper is:
-

to present an assessment carried out for the existing software development
process implemented in project course; the assessment process is based on the
assessment model as it is proposed in ISO/IEC 15504-5 [3] standard,

M. Bubak et al. (Eds.): ICCS 2008, Part II, LNCS 5102, pp. 687 – 696, 2008.
© Springer-Verlag Berlin Heidelberg 2008

688

I. Dubielewicz and B. Hnatkowska

-

to figure out the elements which could be changed in order to reach the higher
quality of this process, and
to propose a technical tool aiding of new quality-oriented activities.

We expect that due to more formal process assessment of course implementation
we will get a strong rationale for the course modification.
The paper consists of four sections. Section 2 presents briefly a model of process
assessment as defined in [2], [3]. Section 3 describes an assessment of the taught
process and gives some suggestions how it could be change for better quality. Section
4 summarizes the paper.

2 Model of Process Assessment
An assessment of software development process can be conducted according to ISO
15504-2 standard [2]. Process Assessment Model (PAM) is used as a common basis
for performing assessments of software engineering process capability. PAM is a twodimensional model of process capability. The considered dimensions are:
1. the process dimension, where processes are defined and classified into process
categories; further these categories are decomposed into groups.
2. the capability dimension, where a set of process attributes grouped into capability levels is defined; these process attributes provide the measurable characteristics of process capability.
In the process dimension there are distinguished three categories of processes: primary, supporting and organizational. An individual process is described in terms of
process name, purpose, and outcomes [1]. For example in Table 1 Software construction process is described.
In PAM every process is extended with additional information in the form of:
-

-

a set of base practices for the process providing a definition of the tasks and
activities needed to accomplish the process purpose and fulfil the process outcomes; each base practice is explicitly associated to a process outcome (see
Table 1 the line named Base Practices);
a list of input and output work products associated with each process and related to one or more of its outcomes; each work product has some characteristics associated.

PAM is based on the principle that the capability of a process can be assessed by
demonstrating the achievement of process attributes on the basis of evidences related
to assessment indicators. There are two types of assessment indicators: process capability indicators, that can be applied to capability levels 1 to 5, and process performance indicators, that can be applied exclusively to capability level 1 .
Process capability indicators are as follows:
-

Generic Practice (GP);
Generic Resource (GR);
Generic Work Product (GWP).

Improving Software Development Process Implemented in Team Project Course

689

These indicators concern significant activities, resources and or results associated with
the process. The existence of these indicators provides evidence of process capability.
Table 1. Exemplary process description in PAM (the source: [3])
Process
ID
Name
Purpose

ENG.6

Software construction
The purpose of the Software construction process is to produce executable
software units that properly reflect the software design.
Outcomes As a result of successful implementation of Software construction process:
1) verification criteria are defined for all software units against their requirements;
2) software units defined by the design are produced;
3) consistency and traceability are established between software requirements
and design and software units; and
4) verification of the software units against the requirements and the design is
accomplished.
ENG.6.BP1: Develop unit verification procedures. Develop and document
Base
Practices procedures and criteria for verifying that each software unit satisfies its design
requirements. The verification procedure includes unit test cases, unit test data
and code review. [Outcome: 1]
ENG.6.BP2: Develop software units. Develop and document the executable
representations of each software unit. Update test requirements and user documentation. [Outcome: 2] (…)

In Table 2 the examples of mapping from the defined generic practices (GP x.y.z)
to the relevant process attributes (PA.x.y.z) are given.
A capability level is a set of process attribute(s) that provide a major enhancement
in the capability to perform a process. There are defined six process capability levels:
0–incomplete, 1–performed, 2–managed, 3–established, 4–predicable, 5–optimizing.
Every capability level attribute is described in structured, standardized form [3]. An
example of such a description for the attribute of process performance indicator of the
1st level is presented below:
Level 1: Performed process
PA 1.1 Process performance attribute
The process performance attribute is a measure of the extent to which the process
purpose is achieved. As a result of full achievement of this attribute:
a) the process achieves its defined outcomes.
Generic Practices for PA 1.1:
- Achieve the process outcomes;
- Perform the intent of the base practices;
- Produce work products that evidence the process outcomes;
Generic Resources for PA 1.1:
- Resources are used to perform the intent of process specific base practices [PA
1.1 Achievement a]

690

I. Dubielewicz and B. Hnatkowska
Table 2. Exemplary relationships between generic practices and process attributes ([3])

GP
Practice Name
PA 1.1: Process performance attribute
GP 1.1.1 Achieve the process outcomes.
PA 2.1: Performance management attribute
GP 2.1.1 Identify the objectives for the performance of the process.
GP 2.1.2 Plan and monitor the performance of the process to fulfill the
identified objectives.
GP 2.1.3 Control the performance of the process.
GP 2.1.4 Define responsibilities and authorities for performing the process.
GP 2.1.5 Identify and make available resources to perform the process
according to plan.
GP 2.1.6 Manage the interfaces between involved parties.
PA 2.2: Work product management attribute
GP 2.2.1 Define the requirements for the work products.
GP 2.2.2 Define requirements for documentation and control of work products.
GP 2.2.3 Identify, document and control the work products.
GP 2.2.4 Review and adjust work products to meet the defined requirements.

Maps to
PA.1.1.a
PA.2.1.a
PA.2.1.b
PA.2.1.c
PA.2.1.d
PA.2.1.e
PA.2.1.f
PA.2.2.a
PA.2.2.b
PA.2.2.c
PA.2.2.d

Generic Work Products for PA 1.1
-

Work products exist that provide evidence of the achievement of the process
outcomes [PA 1.1 Achievement a]

All process attributes for all capability levels are given in Table 3. In this table it is
also defined what attribute ratings are required for a process to be categorized as being on the appropriate level of capability.
Table 3. Process Capability levels and their attributes
Capability level
Level 0: Incomplete
Level 1: Performed
Level 2: Managed

Process attribute
Incomplete
Process Performance
Level 1+
Performance Management, Work prod. Management
Level 3:
Level 2+
Established
Process Definition, Process Deployment
Level 4: Predictable Level 3+
Process Measurement, Process Control
Level 5:
Level 4+
Optimizing
Process Innovation, Continuous Optimization

where symbols of attribute rating
N
Not achieved
P
Partly achieved
L
Largely achieved
F
Fully achieved

Attribute rating
N/P
L/F
F
L/F
F
L/F
F
L/F
F
L/F

are interpreted as follows:
i.e. 0 up to 15% attribute achievement
i.e. > 15% up to 50% attribute achievement
i.e. > 50% up to 85% attribute achievement
i.e. > 85% up to 100% attribute achievement

Improving Software Development Process Implemented in Team Project Course

691

3 Improvement of Software Development Process Implemented in
SSD Course
3.1 Historical Background
The considered software development process is implemented within team project
classes offered since 1999. Initially students followed USDP [6] methodology, but
since 2004 we have introduced RUP process [7]. The previous editions of SSD course
are described in [4], and [5].
As this project corresponds to the concept of the capstone course, it has three
common elements of capstone programs:
1) students are divided into teams of typically 4 to 6 students each; one of them
plays a role of the project manager and the lecturer plays a supervisor/auditor
role;
2) each team is given a real-world project or problem to solve;
3) this project takes 30 weeks to complete (it is continued along two semesters –
60 class-hours, offered within 7th and 8th semesters for about 120 students every
year).
The project constitutes a part of a subject called System Software Development.
Before attending the course we require the students have finished the courses of
object-oriented programming, UML [8], fundamentals of databases. In parallel the
students are offered software project management and database design courses.
Design and implementation of software system belongs to the important activities
within project. We suggest students to use multi-tiers architecture as well as component techniques. The target system architecture should be distributed between at least
two tiers. Client-server is the most often selected system architecture.
3.2 Assessment of Current Software System Development Process
The students are obliged to use customized RUP approach while developing software
system within SSD project. Comparing attributes of our implemented development
process to these given in [3], we can recognize that our process is at least on the 1st
capability level.
According to [2] the process is performed when it fully achieves its performance
attribute due to achieving its defined outcomes. In Table 4 there are presented selected implemented workflows (GP), required work products (GWP) and some of
resources used in process (GR).
To establish how far is our process from the 2nd level of capability we have to point
out that our performed process is implemented in a managed fashion (planned, monitored and adjusted) and its work products are appropriately established, controlled and
maintained (see Table 3).
We have decided to performed such assessment for limited numbers of attributes,
which, in our opinion need to be improved. The same approach to assessment might
be conducted for all attributes defined in [3] for managed process.

692

I. Dubielewicz and B. Hnatkowska
Table 4. Software system development work products

RUP discipline Work products
Requirements
Vision, Glossary
Supplementary Specification
Use Case Model
Use-Case specifications
User-interface prototype
Design
Design Model
Deployment Model
Data Model, SAD
Deployment Model
Test
Test plan, Defects list
Test evaluation summary
Defects list
Project manIteration Plan
agement
(from 2nd iteration)
Iteration Assessment
Use-case priorities
Environment
Project specific guidelines
(option)

Notes
Sketches of GUI-interface,
screen shots or executable GUI
prototype.

Tools
Requisite Pro
Rational Rose

Rational Rose
SoDa

Test Factory
(option)
Clear Quest
Software Development Plan was
elaborated by a teacher.
Risk list is limited to use-case
priorities.
Design guidelines
Programming guidelines.

Table 5 gathers information about performance management attributes for assessment – they are described by letters from A to D. Particular indicators are evaluated
subjectively – in 0-5 point scale – basing on our expectations and experiences. Some
comments about each element rate are put below. The process in considered area is
partially achieved (42%).
Ad. A) Better monitoring of the project progress and tasks realization is needed.
Now each team prepares weekly reports for team supervisor. The control over the
project from the supervisor’s perspective is relatively small. Tasks to be performed
within a concrete iteration should be communicated in a readable way.
Ad. B) More flexible treatment of iteration content is needed. The disciplines performed within the project should be carefully selected, e.g. in many cases full business modeling is spared.
Ad. C) Easier access to templates and examples of artifacts used during software
development is needed. The artifacts should be clearly described; now they are distributed as packed zip archives.
Ad. D) Improved communication inside the development team as well as between
the development team and the supervisor is needed; now, the direct contact between
the supervisor and a team is usually limited to 30 min a week; it is often too short, so
additional information is exchanged by e-mails or printed documents; the feedback is
rather low and late.
Table 6 gathers information about attributes needed for assessment of work product management attributes (row E). Some comments about each element rate are put
below the table. The process in considered area is partially achieved (30%).

Improving Software Development Process Implemented in Team Project Course

693

Table 5. Assessment of performance management attributes
ID Attribute
A

B

Indicator
GP

Performance of
the process is
planned and
monitored

GR
GWP

Performance of
the process is
adjusted to meet
plans

GP
GR
GWP

Resources and
information
necessary for
performing the
process are
identified, made
available, allocated and used

GP

Interfaces between involved
parties are managed (…)
Summary

GP

C

D

GR
GWP

GR
GWP

Element to be assessed
a.1) Process performance is monitored to
ensure that planned results are achieved
a.2) Workflow management system
a.3) Contains status information about
corrective actions; schedule and work
b.1) The plan(s) are adjusted, as necessary,
b.2) Rescheduling is done when necessary.
b.3) Facilities and infrastructure resources
are available
b.4) Process definition describes the way
of plan controlling and adjusting
c.1) The human and infrastructure resources necessary to performed the process are
defined, made available, allocated and
used.
c.2) Information and/or experiences repository.
c.3) States results achieved or provides
evidence of activities performed in a process.
d.1) Communication between the involved
parties is effective
None
None

Assessment
[0-5] scale
2 (rarely, manual)
0 (none)
2 (incomplete,
not up to date)
3 (very rarely)
2 (very rarely)
0 (fully manual)
2 (not formalised)
4 (distributed as
zip files)

3 (zip files)
2 (not up to
date)
3 (weekly meetings)

23/55

(42%)

Table 6. Assessment of work product management attributes
ID Attribute

Indicator
GP

Element to be assessed

Assessment
[0-5] scale
e.1) Change control is established for work pro- 2 (manual)
E Work prodducts.
ucts are ape.2) The work products are made available 0 (not for supropriately
through appropriate access mechanisms.
identified,
pervisor)
e.3) The revision status of the work products 3 (contact with
documented,
may readily be ascertained.
and controlled
supervisor is
needed))
GR
e.4) Configuration management system.
0 (none)
e.5) Document identification and control proce- 3 (manual)
dure.
GWP e.6) Records the status of documentation or
2 (not up to
work product.
date)
e.7) Contains and makes available work prod0 (not for suucts and/or configuration items.
pervisor)
e.8) Supports monitoring of changes to work
2 (often not up
products.
to date)
Summary
12/40 (30%)

694

I. Dubielewicz and B. Hnatkowska

Ad. E) There is a need for introducing commonly used change and version control
mechanisms for artifacts (especially documents). Now, a team is responsible for assuring both mechanisms. The supervisor has limited access and thus not complete
knowledge on about the document versions, their authors, and the reasons of changes.
3.3 Proposed Solution
This section presents how the generic elements, identified and described in section
3.1, are to be instantiated within software system developing process. The solution
will be implemented during following semester. The main element of the solution is
Office SharePoint Server 2007 [9] that is used within the Institute of Applied Informatics as a LMS e-learning platform and as a portal for document management.
SharePoint supports business life cycle of design documents. All documents prepared by a particular team are stored and versioned by SharePoint server. Creation of
new documents is simplified due to possibility of using templates.
In SharePoint a document can be in one of four states: draft, pending, approved, rejected. The document is in draft state after creation. Within this state document can be
modified and updated many times. History of document revisions is available for both
the team and the supervisor. The team can change the state of document to pending –
see fig. 1. That means, that the document is ready to be checked. If the document
verification is successful the supervisor changes its state to approved, otherwise – to
rejected state. The team is obligated to prepare a new version of rejected document –
the life cycle of such document begins once again. The information about the authors/updaters of each document could be easily obtained (realization of c.3, d.1, e.3e.8 – tables 5 and 6).

Fig. 1. Information about work product state

SharePoint supports monitoring of design tasks and design progress. Iteration plan
for 1st iteration is prepared by team supervisor. Plans of subsequent iterations are
prepared by team managers. The plan is visualized by Gantt’s graph – see fig. 2 (realization of a.1, a.2, a.3).
Any plan rescheduling has to be agreed with the supervisor. After that a team manager is allowed to introduce changes into iteration breakdown (realization of b.1, b.2,
b.3). Each week the supervisor controls project progress according to the plan. Usually the supervisor asks for reasons of noticed delays and, if they are important he/she
talks over the possible corrective actions and/or about the rearrangement of schedule
(realization of b.4).
Discussion forum and wiki pages enable knowledge transfer between all stakeholders within the process, i.e. students, domain experts, IT experts etc. (realization
of c.2). Table 7 presents assessment of a current process (CSA) and a priori assessment of proposed solution (FSA). We hope the process will move to fully achieved
2nd capability level in the considered area.

Improving Software Development Process Implemented in Team Project Course

695

Fig. 2. Iteration process breakdown
Table 7. A priori assessment of planned improvements
Element
a.1)
a.2)
a.3)
b.1)
b.2)
b.3)
b.4)
c.1)
c.2)
c.3)
d.1)

CSA
[0-5]
2
0
2
3
2
0
2
4
3
2
3
Summary

FSA
[0-5]
4 (planned and documented)
5
4 (omits corrective actions)
5
5
5
5
5
4 (acceptance procedure is needed)
5
4 (communication not guaranteed)
49/55 89%

Element
e.1)
e.2)
e.3)
e.4)
e.5)
e.6)
e.7)
e.8)

CSA
[0-5]
2
0
3
0
3
2
0
2

FSA
[0-5]
5
5
5
5
5
5
5
5

Summary 40/40 100%

4 Summary
The aim of the paper was to show how to evaluate a process capability level and point
out these task and activities in a process implementation improving of which would
rise up a capability level. The assumption is that the process should be capable in
terms of ISO/IEC 15504-2 assessment model.
Up to now the software development process was at least at 1st performed capability level. It results from the fact that it is a customised version of RUP methodology.
The RUP disciplines: Configuration, and Change Management and Project Management need improvement in our opinion. The elements of these two disciplines were
assessed to fulfil requirements defined for the managed level (according to Process

696

I. Dubielewicz and B. Hnatkowska

Assessment Model described in [3]). The solution aiming at improvement of the software development process in considered area and moving the process from partially
achieved to fully achieved attributes was also described.
The key element of the solution is based on application of Office SharePoint 2007
Server. The solution is fully developed by the students attending the course. It is
planned for deployment during the following semester. Its a posteriori assessment
will be possible in six months.

References
1. ISO/IEC 12207:1995/Amd.1:2002; Amd.2:2004, Information technology – Software life
cycle processes (2004)
2. ISO/IEC 15504-2:2003, Information technology – Process assessment – Part 2: Performing
an assessment (2003)
3. ISO/IEC 15504-5:2006, Information technology – Process assessment – Part 5: An exemplar Process Assessment Model (2006)
4. Dubielewicz, I., Hnatkowska, B.: Teaching of Information system modeling with UML. In:
Proceeding of International Conference MOSIS 2000, Roznov, Czech Republic 2000, pp.
149–159 (2000)
5. Dubielewicz, I., Hnatkowska, B.: RUP customization in teaching of system software development. In: Benes, M. (ed.) Proceedings of the 7th ISIM conference. Acta MOSIS, MARQ
2004, Ostrava, vol. 96, pp. 19–27 (2004)
6. Jacobson, I., Booch, G., Rumbaugh, J.: The Unified Software Development Process. Addison-Wesley, Reading (1999)
7. Rational Unified Process, Rational Software Corporation (2003)
8. OMG Unified Modeling Language Specification, Version 1.4 (2001)
9. Microsoft Office SharePoint Server (2007), http://office.microsoft.com/
pl-pl/sharepointserver/FX100492001045.aspx

