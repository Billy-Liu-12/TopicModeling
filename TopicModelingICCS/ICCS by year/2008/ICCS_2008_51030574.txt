Extensible Multi-Robot System
Wojciech Turek
AGH University of Science and Technology, Krakow, Poland
wojciech.turek@agh.edu.pl

Abstract. In recent decades many important problems concerning mobile robots control algorithms have been solved. In order to integrate
those solutions into complex, reliable, production-quality systems, an effort must be made to deﬁne abstract methodologies, architectures and
frameworks, that would provide common functionalities and support features desirable in production systems: scalability, extensibility, ﬂexibility
and durability. This paper presents an agent-based architecture, which
should provide extensibility of Multi-Robot Systems.

1

Solved Problems in Mobile Robotics

In recent years research into mobile robotics received signiﬁcant attention. Constant development of hardware and communication technologies increases range
of potential applications of systems using robots. Theoretically such systems
should be able to successfully fulﬁl tasks like guarding, cleaning or all types of
ﬂexible transportation in warehouses, oﬃces, etc. However, in case of mobile
robots the distance between theoretical suitability and practical, reliable and
worthwhile applications is very large, mainly due to enormous complexity of
required software modules regarding many diﬀerent domains.
This complexity caused separation of several well-deﬁned problems concerning
robotics, which became subjects of research. One of the most important of those
was the localization and mapping problem, or SLAM [1], which aimed at the
issue of map building and navigation of one or more robots in an unknown
environment. The SLAM is now considered solved. Another popular problem
regards algorithms of reactive navigation and collision avoidance, which must
be applied in unknown environments, where global path planning cannot be
applied. Several interesting solutions have been proposed [2]. Of course all of
those have common limitations caused by limited knowledge.
When a map is available, the problem of path planning and motion coordination arises. In complex system with large number of robots operating on limited
space a robust solution of this issue is crucial. The complexity of real-time coordination problem makes it impossible to calculate one correct solution, therefore
motion coordination is often considered optimization problem [3].
Complex, separated operations performed by single or multiple robots are
called tasks. If several tasks are to be performed simultaneously, a task scheduling
This work has partly been supported by the grant MNiSzW Nr 3 T11C 038 29.
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 574–583, 2008.
c Springer-Verlag Berlin Heidelberg 2008

Extensible Multi-Robot System

575

and assignment algorithm is required. Several approaches designed for diﬀerent
constraints can be found in literature [4].
Most of basic issues associated with mobile robots have already been addressed, and (better or worse) solutions are available. However, there are hardly
any propositions concerning methods for integrating these solutions into robust
systems, that could claim production quality. A detailed review of MRSs (MultiRobot Systems) architectures was presented by Farinelli et al. in [5]. Most of
those solutions were designed for solving particular types of problems, without
paying any attention on features of the software, which are mandatory in production systems: scalability, extensibility, ﬂexibility and durability. It seems
justiﬁed to say, that a system, that cannot provide those features will never be
introduced into large scale applications. Therefore an eﬀort must be made to
deﬁne abstract methodologies and frameworks, that would support the features
and provide basic services required by most MRSs: universal navigation, ﬂexible
traﬃc control, sustainability and abstract task management and scheduling.

2

Extensibility of Systems

There are numerous works trying to deﬁne extensibility and identify methods
of achieving it [6]. Extensibility of a system is typically deﬁned as a presence of
mechanisms dedicated for extending the system, and measured as eﬀort required
to implement extensions. The eﬀort includes time needed for implementing new
functions as well as the hardware that need to be added or modiﬁed. Other features taken into considerations can include the inﬂuence that new functionality
has on former features of the system, or ability of introducing the changes without altering normal runtime. In the domain of software engineering, extensibility
is one of the key aims. Lack of prepared mechanisms may result in huge looses for
the institution which faces sudden need of extending functionality of its crucial
software.
Supporting software extensibility includes creation of interfaces and hooks,
which should be as ﬂexible as possible, to allow new functionalities to access
existing system resources without altering its internal structure. The interfaces
should not assume which features will be added, but should rather consistently
cover whole functionality which can be exposed. Ability of introducing new features without halting the system or causing risks of unexpected behaviours is
also very desirable. It can be achieved by using distributed architectures, which
separate runtime process of diﬀerent components.
It seems that the multi-agent design and runtime paradigm is a good basis
for building extensible software system. Features like parallel and asynchronous
execution, inherent distribution, interaction based on messages or runtime code
inclusion make it possible to implement safe functionality addition mechanisms.
What needs to be done is implementation of ﬂexible protocols used by crucial
agents in the system, which would allow new agents to integrate. Another feature
that might be useful is a replacement mechanism, which would support changing
agent’s code on runtime, without loosing agent’s internal state.

576

3

W. Turek

Extensibility in Multi-Robot Systems

It is highly probable, that within few decades mobile robots will be commonly
used as physical tools of many systems. Applications can include performing
tasks like cleaning, guarding, all types of transportation, guiding and providing
information, and many other unpredictable uses, which are the most important
in context of this paper. It is obvious that complex systems, which use mobile
robots, should also support functionality modiﬁcation and extension abilities.
Identiﬁcation of general methods of supporting extensibility in a Multi-Robot
System or MRS requires deﬁning abstract architecture of such a system. Without
loosing generality it is safe to say, that most of the following elements will be
present in a typical MRS:
–
–
–
–
–

set of mobile robots and communication infrastructure,
map and localization methods,
path planning and motion coordination algorithms,
task scheduling and execution algorithms,
sustainability methods and infrastructure (robots charging, maintenance).

Several general directions of extension can also be identiﬁed. An extensible
multi-robot system should support all of those with no need of altering normal
functionality.
1. It should be possible to add a new type of task, which can be solved by
robots already present in the system.
2. Addition of a new type of robot, which would be used for solving tasks already known in the system, should also be possible. The software responsible
for solving the tasks should be able to make use of the new hardware without
any modiﬁcation.
3. Robot of a type which is new to the system may have diﬀerent maintenance
requirements – the system must allow addition of maintenance functionality.
4. New types of tasks and robots may require modiﬁcations in coordination
algorithms, including task scheduling policies.
5. Expansion of working environment, which includes elements unknown to the
system, should be supported. For example, if a second ﬂoor of a warehouse
is to be included, robots must become able of using an elevator.
6. New types of tasks, robots and new management requirements may require
modiﬁcations in motion coordination algorithms.
Before describing the system that will support the requirements, methods of
making a MRS inextensible should be identiﬁed. It may seem surprising that
one of the most popular methods of extensibility removal is related to application of software agents. The issue is caused by a very popular observation of
similarities between features attributed to a software agent and an autonomous
mobile robot (autonomy, mobility, communication and cooperation). The similarities encourage creation of an autonomous robot-agent, which is a software
component embedded into a hardware robot. Typically the agent implements

Extensible Multi-Robot System

577

algorithms for navigation and solving several individual tasks and a communication protocol, which is used for performing cooperative tasks. If these features
are compared against the extensibility scenarios listed above, it is obvious that
the approach is unacceptable. The same eﬀect can be achieved by using taskbased coordination protocols, which are typically forced by too strong autonomy
of the robots.
Another method of reducing extensibility is application of fully autonomous
navigation without any remote management or coordination mechanisms. Fully
autonomous mobility may seem very advanced, but can cause a lot of trouble
when a new type of robot is introduced to the system, and even more when
working environment is to be extended.
It is impossible to foresee all possible applications of a complex robot during
system design process. However, the ability of performing calculations on-board
often leads to creation of high-level asynchronous interfaces, usually hiding basic
functions of a robot. As a result, the system owns a robot unable of performing
simple tasks, despite no hardware limitations present. The general conclusion
is: too much autonomy given to hardware robots is not the best idea in the
context of system extensibility. In the following section a MRS will be described,
which uses agent design and runtime paradigm and meets identiﬁed extensibility
requirements.

4

Agent-Based Extensible Multi-Robot System

Every complex system requires diﬀerent types of modules with diﬀerent amount
of autonomy or proactivity included. The architecture will use an agent-based
design paradigm, which usually involves a discussion about diﬀerent deﬁnitions
of a software agent. Therefore at the very beginning of this section several assumptions concerning modules naming is needed:
– Master - a proactive module with a separated execution thread or threads,
responsible for performing high-level tasks. Its activities will include decision making, creation and destruction of other elements, management and
coordination.
– Worker - a reactive module with a separated execution thread. It will perform
orders received by asynchronous messages, according to a deterministic and
known algorithm. Its functionality may include immediate request-response
operations as well as long-lasting tasks.
– Server - a reactive module with no separated execution thread. It will respond
immediately to all requests received, using a deterministic algorithm.
From a design point of view probably only ﬁrst or ﬁrst two of those should be
called agents. But as the implementation will use an agent platform, all of those
will be agents on runtime, diﬀering in amount of proactivity shown. Therefore the
names used for particular modules will end with “MasterAgent”, “WorkerAgent”
or “ServerAgent” suﬃx.

578

W. Turek

The architecture presented here can be implemented on a group of complex
robots performing all computations and communication using on-board hardware, as well as robots using external communication and computation infrastructure. In both cases it is assumed, that there is an agent framework available,
which is logically separated from the robots. The framework is supposed to support basic messaging and management services, like for example those deﬁned
by FIPA [7] standards. Obviously there are going to be diﬀerences in implementation of both cases, but at the level of an abstract architecture all assumptions
and conclusions are very similar. Modules of the architecture may be divided into
four groups, responsible for robots, navigation sustainability and task execution.
4.1

Robot

The most basic module that need to be deﬁned is a robot controller. Following
the conclusion of the previous section and the deﬁnitions presented above, a
robot controller should be deﬁned as a RobotWorkerAgent or RWA – a reactive
module, able of performing long-lasting operations and oﬀering a deterministic, detailed interface. The interface is divided into two groups: common and
specialized functions. The common functions, that must be implemented by all
the robots in the system, contain getters for identiﬁcation information, state
(position, orientation) and information about specialized services.
The specialized RWA’s interface should contain at least a complete wrapper
to all low-level hardware functions. In addition it can contain any higher level
methods, which implement most common algorithms. In particular, every mobile robot will include basic functions for setting velocities of its engines, and
optionally several more complex functions concerning mobility, like for example
reactive navigation methods. Methods in specialized interfaces are grouped into
services, which are used for selecting proper robots for particular types of tasks.
If a robot is able of hosting a part of the agent platform, then the RWA is
supposed to be located at the robot, where it can have the most direct access
to the hardware. Otherwise the RWA is placed on a remote device (computer or
other robot), which is equipped with communication hardware able to manage
the robot. The ﬁrst scenario guarantees better performance, but can be diﬃcult
to implement on small or simple robots. Other elements of the system must take
into consideration, that the RWA is strongly connected with a hardware unit,
and therefore can fail and disappear from the system without any warning or
notiﬁcation.
4.2

Navigation Subsystem

The navigation subsystem described in this section is an extension of the solution proposed in [8]. The basic idea is to divide the environment into two types
of fragments: rooms, where autonomous, reactive navigation should work ﬁne for
all types of robots, and areas, where remote assistance and motion coordination
is required. The areas may include narrow passages or junctions but also doorways or elevators. An example of such division is shown on the left side of Fig. 1.

Extensible Multi-Robot System

579

Fig. 1. Fragment of environment and a graph created for it

The graph on the right side is generated directly from the layout of rooms and
areas in the environment. Edges of the graph represent rooms and areas, while
nodes are intersections of those. The graph is maintained by a MapServerAgent
or MSA, which supports path planning functionalities. Its interface must contain methods for modifying the structure of the environment and a method for
ﬁnding the fastest path for a given robot between any two locations in the environment. Each edge associated with a room has a constant weight representing
distance between connected areas. Weights of the edges associated with areas
are calculated dynamically for a particular robot by an agent which manages
the area, called AreaMasterAgent or AMA. Each AMA may have a diﬀerent
weight calculation strategy, which can be used for preventing high traﬃc. It can
also return an inﬁnite value, which forbids a particular robot crossing the area.
Calculation of edge weight is the simplest of responsibilities incumbent on an
AMA. Its basic task is to coordinate safe motion of robots within the area. The
coordination algorithm used by AMAs will diﬀer depending on type of the area
and current traﬃc.
4.3

Sustainability Subsystem

Each type of robot may have diﬀerent maintenance requirements. Typically these
will include battery charging, in some cases more complicated operations might
be performed automatically. Performing service operations requires specialized
hardware devices installed in selected locations of the environment, called depots
and managed by DepotMasterAgents or DMAs. When a new robot is introduced
into the system, it is manually assigned to selected DMA, which becomes robot’s
basic Master and caregiver. It is supposed to maintain the robot working properly or report failures to a human operator. While registering, new robot sends
available services descriptors, which contain service name and characterizing parameters. The name deﬁnes unambiguously associated parameters and a set of
methods available in RWA’s specialized interface. Although service name can and
should be meaningful in a natural language, it is not intended to be semantically
analysed by any element of the system.
Mobility services can be used as a good example. Three services could be
created, named for example: ,,basic mobility”, ,,reactive mobility” and ,,intelligent mobility”. Basic should contain on method: move(linear velocity, angular velocity); and several parameters describing robots features, like maximum

580

W. Turek

velocities, accelerations, turning radius etc. Reactive mobility service should implement one method: go(x,y, velocity); and one parameter describing maximum
velocity. Intelligent mobility service, which would use MapServerAgent, would
implement a method go(x,y), which would return estimated time of arrival or
information about destination inaccessibility.
Besides maintaining robots, DMA acts as a robot rental for modules responsible for task execution. It implements a ,,Query Service” method, which takes
service name or robot type as a parameter and returns names, services and availability information of all robots supporting given condition. It also supports a
,,Request Robot” method, which allows the caller to master requested robot for
speciﬁed period of time. To provide tasks management and priorities in the system, methods of DMAs must recognize priority of a caller - robots are shown
as available only when no requests were made, or requests were made by callers
with lower priority.
It should be pointed out, that a DMA can, but does not have to be associated
with a speciﬁed location in the environment. It can but does not have to move
all idle mobile robots to that location. For example there could be a DMA,
which would be responsible for providing naming and rental services for several
industrial manipulators mounted at ﬁxed locations.
4.4

Task Execution Subsystem

Addition of a new type of task will probably be the most often extension in every
Multi-Robot System, therefore lots of attention should be put to simplify this
operation. Two types of agents must be implemented to add a new type of task:
– TaskExecutorMasterAgent (TExMA), which will use a group of robots located near the task to fulﬁl it,
– TaskExecutorFactoryServerAgent (TExFSA), which will support information about TExMA requirements (robots count, services and estimated execution time), and will be able to create an instance of TExMA.
The most proactive element of the system, is a TaskSchedulerMasterAgent or
TSMA. It is fully independent on type of tasks performed, therefore it does not
have to be modiﬁed when a new type of task is added. It can be created (by a
user interface or by automated task detection mechanisms) for a group of tasks,

Fig. 2. The most important steps of task execution process

Extensible Multi-Robot System

581

as well as for a single task. There can be diﬀerent implementations present in
the system to enable diﬀerent scheduling strategies. Each TSMA has a priority
value assigned, which it uses in communication with DMAs. A sequence of the
most important steps in tasks execution process is shown in Fig. 2.
At the ﬁrst glance this architecture might seem too complicated, but it can
be justiﬁed by analysing required execution threads in considered process. If
there are multiple tasks to be synchronized, there must be a supervising entity (TSMA) which will watch and manage progress. If a task involves several
cooperating robots, there must be a supervising entity (TExMA) which will coordinate actions of particular hardware devices. As it was pointed out before,
Server Agents (TExFSA) do not require separated execution threads – are agents
only from implementation point of view.
4.5

Features of the Architecture

The approach presented here was designed to meet MRS extensibility requirements described earlier in this paper. The most important of those was support
for addition of new types of tasks to the running system, which was described
in previous section. Algorithms of task execution are separated in agents, therefore relatively small amount of code must be implemented to add new type of
task. Many coexisting task scheduling agents are allowed, implementing diﬀerent
algorithms – implementations can be added or removed on runtime.
A new type of robot can also be easily added to the system without altering its functioning. If the robot does not have any special service requirements
(diﬀerent that provided by the system already), the only think that must be
done is implementation of a new RobotWorkerAgent, which will be created for
the robot and registered in selected existing DepotMasterAgent. Otherwise a
new DepotMasterAgent must be implemented and deployed as well. All of these
operations can be performed on runtime.
The navigation subsystem is built of separated agents responsible for managing traﬃc in fragments of the environment. Global map representation implemented by a MapServiceAgent is not dependent on type or implementation of
AreaMasterAgents; the only think required is proper reaction for several types
of messages – new types of environment fragments can be easily added.
The architecture has other desirable features, of which the most important
is scalability – the only central elements of the architecture are the MapServiceAgent and internal services of agent platform used. Other components are
created as needed and operate only in particular fragment of the system, using
limited resources. Agent paradigm allows transparent distribution of the system among multiple computers, which makes the system easily scalable. It is
worth pointing out, that the subsystems hardly depend on each other, making
the architecture very ﬂexible. It could even be used as a robot-soccer controller
implementation, where particular plays are implemented by TExMAs, and a
TSMA is responsible for detecting situations opportune for performing a play.
Navigation subsystem is not used at all, while one DepotMasterAgent is used to
move robots to idle positions in a pitch. Obviously there are better approaches

582

W. Turek

to the particular problem; the point is that the architecture allows addition of
signiﬁcantly diﬀerent functionalities to existing systems.

5

Implementation and Tests

All components of the architecture were successfully implemented and tested.
The agent platform was JADE [9], one of the most popular FIPA-compliant platforms, which is very suitable for experiments concerning agents interoperability,
provided that the scale of the system is limited. Unfortunately it is not feasible
to get into implementation details due to limited length of this paper. Therefore only general functionality and conclusions of the example will be described
here. To make the example simpler, the navigation subsystem was disabled. Its
implementation and tests involving complex environments were described in [8].
First version of the system was supposed to support box moving functionality
in a simple warehouse (ﬁgure 3). There were three identical robots used, each
equipped with a two-degrees-of-freedom gripper. Each robot implemented basic
and reactive mobility services and a ’gripper’ service, which contained a method
for setting gripper’s position in both axis, and higher level ’grab’ and ’drop’
methods. There was one type of task deﬁned, characterized by a source and
destination locations of a box, and one TExMA using ’grab’ and ’drop’ methods.
The implementation was tested using the RoBOSS [10] simulation system.
First new requirement added to the system was moving a box initially placed on

Fig. 3. Simulation model of the robots and the environment used in the example

another box. Former TExMA would have failed to fulﬁl this type of task, because
’grab’ method always picked boxes from the ground – a new type of task and a
new TExMA (using lower level gripper control) was created and introduced into
the running system. Next innovation in the system were very heavy boxes, which
could not be lifted by available robots. Solving the issue required adding new
type of robots, which supported mobility and gripper service like the others, and
a new ’stronger gripper’ service. New type of task, and a new TExFSA-TExMA
pair were created and included. As expected, new robots were used for solving
both new and old types of tasks – all possible services were supported.
It is easy to notice, that if robots services and the ﬁrst task in the system
were properly characterized (by 3D initial location and maximum weight of
a box), new types of tasks and TExMAs would not have been necessary. The

Extensible Multi-Robot System

583

most interesting conclusion is, that new functionalities can be added successfully
despite serious lacks and mistakes in existing implementation of a system.

6

Conclusions

It seems justiﬁed to say, that agent design and runtime paradigm is a good approach to creating extensible software systems, which use robots as hardware
eﬀectors. An approach proposed in this paper can be a good basis for building
extensible multi-robot systems. Obviously not all applications of robots can and
should be ﬁtted into this architecture, however some ideas and solutions presented here may help increasing extensibility of complex multi-robot systems.
More reliable veriﬁcation of the approach will require tests of more ’real-life’,
larger scale scenarios. Further investigation into diﬀerent task scheduling strategies and failures handling methods must be carried out to provide reliability,
robustness and ﬂexible high level management methods. Tests on diﬀerent types
of hardware robots are also planned.

References
1. Smith, R., Self, M., Cheeseman, P.: Estimating Uncertain Spatial Relationships in
Robotics. In: Autonomous robot vehicles, pp. 167–193. Springer, Heidelberg (1990)
2. Minguez, J., Montano, L., Santos-Victor, J.: Reactive navigation for non-holonomic
robots using the ego kinematic space. In: Proc. if Int. Conf. on Robotics and
Automation, Washington, USA, pp. 3074–3080 (2002)
3. Bennewitz, M., Burgard, W., Thrun, S.: Finding and Optimizing Solvable Priority
Schemes for Decoupled Path Planning Techniques for Teams of Mobile Robots.
Robotics and Autonomous Systems 41(2), 89–99 (2002)
4. Farinelli, A., et al.: Task assignment with dynamic perception and constrained
tasks in a multi-robot system. In: Proc. of the IEEE Int. Conf. on Robotics and
Automation (ICRA), pp. 1535–1540 (2005)
5. Farinelli, A., Iocchi, L., Nardi, D.: Multirobot systems: A classiﬁcation focused on
coordination. IEEE Transactions 34(5), 2015–2028 (2004)
6. Nurnberg, P.: Extensibility in component-based open hypermedia systems. Journal
of Network and Computer Applications 24, 19–38 (2001)
7. O’Brien, P.D., Nicol, R.C.: FIPA – Towards a Standard for Software Agents. BT
Technology Journal 16(3), 51–59 (1998)
8. Ambroszkiewicz, S., Cetnarowicz, K., Turek, W.: Multi-Robot Management Framework based on the Agent Dual-Space Control Paradigm. In: Proc. of the AAAI 2007
Fall Symposium, Arlington, Virginia, USA, pp. 32–37 (2007)
9. Bellifemine, F., Poggi, A. and Rimassa, G.: JADE – A FIPA-compliant agent
framework. In: Proc. of the PAAM 1999, London, UK, pp. 97–108 (1999)
10. Turek, W., et al.: RoBOSS - an universal tool for robots modelling and simulation.
In: Proc. of Computer Methods and Systems, Krakow, Poland, pp. 347–354 (2005)

