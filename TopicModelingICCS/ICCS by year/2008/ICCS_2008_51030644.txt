GRADIS – Multiagent Environment Supporting
Distributed Graph Transformations
Leszek Kotulski
Department of Automatics, AGH University of Science and Technology
Al. Mickiewicza 30, 30 059 Krakow, Poland
kotuslki@agh.edu.pl

Abstract. Graph transformations are a powerful notation formally describing
different aspects of modeled systems. Multiagent systems introduce distribution,
parallelism and autonomous decision properties. In the paper a basic properties
of the GRADIS agent’s framework, joining of both approaches, are discussed.
This framework supports splitting the graph, describing a problem, onto a few
partial graphs, that can be maintained by different agents. Moreover, the
multiagent’s cooperation enables the application to the local graphs the graph
transformation rules introduced for the centralizes graph; this permits us transfer
all theoretical achievements of the centralized graph trans-formations to the
distributed environment. The usefulness of the hierarchical graphs structure are
and some examples of its usefulness are presented.

1 Introduction
Graphs are very useful formalism describing in a natural way a wide spectrum of
problems. Unfortunately their use is limited with respect size and distribution. All the
propositions mentioned in the three volume Handbook on Graph Grammars and
Computing by Graph Transformations [1][2][3] remember the transformed graphs in
one place. Moreover, the size of these graphs is limited due to a computational
complexity of the parsers and the membership checkers. Even in the case of a few
solutions, which offer the polynomial complexity of the solution of the mentioned
problems (like O(n2) in [4]), this complexity permits us to think rather about hundreds
or thousands nodes than about billions of ones. Let’s note that billion of nodes is size
of the small semantic web solutions.
The natural solution of the mentioned problem seems to be a graph distribution
and a parallel transformation of these subgraphs. While the Multiagent Systems are
characterized [5] by the assumption that:
• each agent has incomplete information or capabilities for solving the problem and,
thus, a limited point of view,
• there is no global system control,
• data are decentralized,
• computations are asynchronous,
they seam to be the natural candidate for supporting distributed graph transformations.
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 644–653, 2008.
© Springer-Verlag Berlin Heidelberg 2008

GRADIS – Multiagent Environment Supporting Distributed Graph Transformations

645

The first approach, of the author, at solving the similar problem [6] also assumes
creation a set of agents; each of them maintains a local graph, and transforms it (what
sometimes needs an cooperation with another agent). The presented solution of the
distributed control of the allocation state assumes that the rules of the agents
cooperation are designed for the given set of graph grammar production (describing
graphs transformations); any change of this grammar causes the redesigning of the
agents cooperation rules.
The GRADIS agent’s framework, presented in the paper, enables the cooperation
of the agents (maintaining a local graph) in a way, that is independent from the graph
grammar definition. What is more, the cooperation of the local graph transformations
systems, that are founded upon different types of graph grammars, is also possible.
The scope of the paper is the following: in section 2 the basic model of the
Multiagent GRADIS framework is introduced; in section 3 the theoretical foundation
of the complementary graph construction (supporting the graph distribution) is
presented; in section 4 the way of the cooperation of agents using different types of
grammars is considered; finally, some concluding remarks are presented.

2 GRADIS Agent Model
The GRADIS framework (that is an acronym of GRAph DIStribution toolkit) makes
possible the distribution of a centralized graph and the controlling its behavior with
the help of concurrent processes. The proposed solution is based on Multiagent
technology; an agent is responsible both for:
• a modification of the maintained (local) graph, in a way described by the graph
transformation rules associated with it.
• a cooperation with other agents for the purpose of holding the cohesion of the
whole graph system.
The GRADIS agent model assumes the existence of two types of agents, called:
maintainers and workers.
The maintainer agent – maintains the local graph; the whole set of maintainers take
care about the global system cohesion understood as a behavior equivalent to the graph
transformations made over the centralized graph. Initially we assume, that at the
beginning one maintainer controls the centralized graph, but it is able to split itself onto
the set of maintainer agents controlling parts of the previous graph transformation. The
cooperation of the maintainers is based on the exchanging information among the
elements of the agent’s local graph structure; the graph transformation rules are
inherited from the centralized solution. The formal background of the maintainer’s
activities is presented in section 3.
The worker agents – are created: temporarily – for the purpose of realization of the
given action (eg. for finding subpattern) or permanently - to achieve the more
complex effect (eg. for detail designing of the element represented a the lower graph
hierarchy). The worker graph structure is generated while its creation (by a maintainer
or other worker agent) and is associated with some part of the parent’s graph
structure. However, this association in not the direct association among some nodes of
maintained by these agents graph structure; we assume, that the parent worker

646

L. Kotulski

association is made on the graph transformation level i.e. some worker’s
transformation enforces the realization of some graph transformation over the parent’s
graph structure. This problem will be in detail discussed in section 4.
The GRADIS agent’s model supports the hierarchical model structure with the
following limitation:
1.
2.
3.
4.

a maintainer agent can exist only at the first level of this structure,
a maintainer cannot split itself when it is the parent of some workers,
a worker cannot split itself,
workers cooperation is limited only to worker parent relations.

The 1, 3, 4 assumptions seam to be the fundamental one, and we have not the intention
to modify them in the next time. We would like to cancel the second assumption, and
the algorithm of the assurance correct cooperation of the worker with the maintainer
agents, created by splitting worker’s parent is in the final phase of the realization.

3 Complementary Graph as a Background for Maintainer Agent
Work
The data structure, that is maintained and transformed by agents, has a form of
labeled (attributed) graphs. Let Σv and Σe be a sets; the elements of Σv are used as
node labels and the elements of Σe are used as edge labels. The graph structure are
defined as follows:
Definition 3.1
A (Σv,Σe)-graph is a 3-tuple (V,D,v-lab) where V is nonempty set, D is a subset of
V×Σe×V, and v-lab is a function from V into Σv.
■
For any (Σv,Σe)-graph G, V is set of nodes, D is set of edges and v-lab is a node
labeling function. One can extend this graph definition eg. by introduction attributing
functions both for nodes and edges, but these extensions will not influence on the
rules of the centralized graph distribution and their transformation, because of that
they will not consider here.
Our intention is splitting of the graph G onto a few parts and distribute them onto
different locations. Transformation of each subgraph Gi will be controlled by some
maintainer agent.
To maintain the compatibility of centralized graph with the set of split subgraphs
some nodes (called border nodes) should be replicated and placed in the proper
subgraph. Graphically, we will mark a border node by a double circle representation;
we also introduce the set Border(G) to express that v is a border node in the graph G
by a formulae v∈Border(G). During the splitting of the graph we are interested in
checking if the connection between two nodes crosses a border among the subgraphs;
the function PathS(G, v,w) will return all sets of the nodes belonging to the edges
creating a connection (without cycles) among v and w. For example for the graph G
presented in figure 3.1 PathS(G,a,c)={{a,c},{a,b,c},{a,d,e,c},{a,d,f,g,e,c}}.

GRADIS – Multiagent Environment Supporting Distributed Graph Transformations

647

Definition 3.2
The set of graphs Gi=(Vi,Di,v-labi), for i=1..k, is a split of graph G to a complementary
forms iff exist a set of injective homomorphisms si from Gi to G such as :
1)

∪ s (G )
i

= G

i

i =1.. k

2) ∀i, j = 1..K

3) ∀w ∈ Vi

(s (V )
i

i

)

∩ s j (Vj )

=

(s (Border (G ))
i

i

∩ s j (Border (G j )))

∀v ∈ Vj : ∃p ∈ PathS(G, w, v ) ⇒ ∃b ∈ Border(G i ) : si ( b) ∈ p

4) ∀j = 1..k v ∈ Border(G j ) ⇔

(∃w ∈ G

j

: w ↔ v ) or G j = {v}

where ↔ means that the nodes are connected by an edge.

■

The introduced formal definition is difficult to use in practical construction of the
complementary graphs, because of that we introduce an algorithm for splitting of the
centralized graph.
Algorithm 3.1
Let H be a subgraph of G then two complementary graph H’ and H’’ are created in
the following steeps:

1. initially H’=H and H’’=G\H
2. for every v∈H such that exist w∈G\H if w is connected with v then v is replicated
and:
• v stays in H’ but it is marked as a border node,
• border node v’, a copy of v, is attached to H’’ with all edges connecting v with
G\H,
• proper references are added to v and v’ (iff v has been a border node before this
operation this references should also associate these node with another ones),
3. some reindexation of VH’ and VH’’ should be made for optimizing local
transformations.
■
The unique addressing of nodes in the glued graph (after 3-th steep of an algorithm or
any sequences of local graph transformations) is guaranteed by the remembering their
indices as a pair (local_graph_id, local_index). We also assume, that marking of the
node as a border one is associated with designation for it of an unique index in the
border nodes set (border_id is equal to 0).
Algorithm 3.2
The construction of G from the complementary graphs set {Gi} is made in the
following way:

• for the boarder nodes, one of the replicas, indexed as (0,glob_bord_node_index), is
added to V,
• foe all normal (not border) nodes are added to V, with their local indexation,
• the edges in E are inherited from the local graphs (if one node of the edge is a
border node in the final edge its global representative appears).
• The labeling function lab is the union of labi .
■
Splitting the graph G onto a few new complementary forms can be made by execution
of the algorithm 3.1 on the already split graph H’ or H” (and so on).

648

L. Kotulski

An example of G and set of two comple-mentary distributed graphs are presented
appropriately on Fig. 3.1 and 3.2. The indexation inside G is consistent with one
introduced in algorithm 3.2.
For any border node v in the graph
Gi we can move boundary in such a
way that, all nodes that are connected
with v (inside another complementary
graphs) are incorporated to Gi as a
border nodes and the v node replicas
Fig. 3.1 Graph G
are removed from another graphs (i.e. v
stays a normal node). For graphs
presented
in
Fig.
3.2
an
incorporate((0,1),1) operation creates
graphs presented in Fig. 3.3.
Let
be a class of graphs, then
analogically as in [7], we define as a
class of rules and ⇒r as a rule
application operator, that for r∈ ×
yielding a binary operation over the
Fig 3.2 Complementary graphs
graphs. A pair (G,G’), usually written
as G⇒rG’, establish a direct
derivation from G to G’ through r.
The GRADIS framework associates
with each distributed complementary
graph the maintainer agent, that not
only makes the local derivations
possible, but also assures the
Fig. 3.3. Complementary graphs- 2
coordination and synchronization of
parallel derivations on the different
complementary graphs. Each maintainer agent is also able to gather (after some
cooperation with other agents) a temporary information about the neighborhood of the
replicas of the pointed boundary node; for any natural number k and any border node
v∈Border(Gi) i-th maintainer agent is able to return a graph B=k-distance_
neighborhood(v) that is a subgraph of the global graph G limited to the nodes distant
from v no more then k.
Graph grammars provide a mechanism in which a local transformations on a graph
can be modeled in a mathematically precise way. The main component of a graph
grammars is a finite set of productions; a production is in general, a triple (L,R,E)
where L and R (left- and right-hand graph of production, respectively) are a graph and
E is some embedding mechanism. Such a production can be applied to graph G
whenever there is an m occurrence of L in G. It is applied by removing m(L) from G,
replacing it by (an isomorphic copy) of R, and finally using embedding mechanism E
to attach R to the remainder G-m(L).
The general idea of the proposed application of the production L→(R, E) over a
distributed graph is the following:

GRADIS – Multiagent Environment Supporting Distributed Graph Transformations

649

1. each of i-th maintainer agent autonomously decide to apply this production when
one can find the m occurrence of L inside Gi , none of border nodes are removed
and all removed edges belongs to Gi edges.
2. otherwise, i-th maintained agent needs the cooperation with the rest of the system,
that will be made in three steep:
2.1. the gathering an information: for all nodes v such that
v∈Border(Gi)∩Nodes(m(L)) we are looking such k that the graph B designnated as k-distance_ neighborhood(v) covers L and all removed nodes and
edges.
2.2. the preparing an environment: all nodes belongs to B and does not belongs to
Gi are incorporated to the graph Gi by execution of sequence incorporate(…)
operations made in the transactional mode.
2.3. the applying of a production: a production L (R,E) can be applied in a new
created graph Gi’ according to 1-th rule (local derivation).
■
The presented algorithm does not depend on the specific properties of the graph
transformation mechanism like NLC embedding transformation (in case of the
algorithmic approach) [8] or single- and double-pushout (in the case of the algebraic
approach) [9]. In [10] the cooperation among the agents in the case of these types graph
transformations is considered and a detail algorithms basing on these transformation
properties are presented.

4 Cohesion Graph Grammar as a Background for Workers
Agents Cooperation
The maintainer cooperation, based on complementary graphs, make possible to
distribute some centralized solution onto the distributed agent’s environment; each of
agents maintains the “reasonable” part of the centralized graph, what makes the
parallel computation effective. As it was mentioned in section 2, GRADIS framework
offers more one type of agents – the worker agents. The worker agent is created by
the maintainer agent temporarily or permanently to support the maintainer creativity.
For a better understanding of the problem we consider some examples.
The first example is a part of the problem of finding subpatterns, presented in [11].
Let, set of maintainer agents remember a set of complementary graphs {Gi} describing
large pattern, and let the graph grammar SUB defines a set subpatterns; we would like
to check iff a given node v of Gi graph is a starting point of any subpattern (defined by
SUB) contained by H=⎩⎭Gi.
For the simplicity we assume that in all subpatterns minimal distance between two
node is less or equal to k. Usually, graph B=k-distance_ neighborhood(v) in H does
not contain itself in the graph Gi. The sequence of incorporate operations can enlarge
graph Gi to Gi’ such that B⊆Gi’, but this solution seems unlucky from two reasons:
• it causes growing the i-th maintainer structure and finally it leads to the centralized
solution,

650

L. Kotulski

• the i-th maintainer agent should in parallel way service two types graph grammars
transformations (inherited from centralized solution and defined by SUB graph
grammar) what would enforce the need of these activities synchronization. This
synchronization could not be independent from the definition of the mentioned
grammars.
• It seams to be better replicate the structure of graph B, and create a worker agent
that solves the membership problem parameterized by graph B, node v, and graph
grammar SUB1. Let’s consider maintainer-worker relationship:
• the worker is created only for realization of the particular task,
• the maintainer and worker structures are not synchronized,
• the worker after the task realization informs the maintainer about its work effects.
In GRADIS we assume that the communication among these agents is made at the
graph transformation level, i.e. the worker recommends execution by the maintainer
of some transformations depending on the final effect of its work.
The second example is inspired by a distributed adaptive design process [12]. This
process composes from a few phases: firstly we create basic plans (eg. of a building
design), next we can plan rooms arrangement and finally details of the furniture.
Graph transformations seams to be very promising for this application [13].
We assume that, the building plain (in a graph form) is maintained for the set of
maintainer agents, and each of maintainer agents takes care about the subgraph
responsible for parameterization (allocation of walls, doors, windows, etc.) of one or
more rooms. With each of the rooms it is associated a permanent worker agent that is
responsible for this room arrangement. Let’s note that, in this case, the maintainer-worker
relationship is more complex then in the previous example. The moving walls or doors
has a very strong influence on the room arrangement process and from the other hand
putting of the wardrobe on the wall with door is possible only when these door will
become transferred into other place. Thus the cooperation between graph transformation
systems supported by maintainer and worker agents should be very close.
The formal background of the for the support above problem bases on a conjugated
graph grammars theory [14][15]. In the conjugated graph a new type of nodes appears
– remote nodes. Remote nodes represent the nodes appearing in other graph structures.
In the conjugated graphs grammars we assume that, the P graph transformations (on
the first agent graph structure) in which exist a remote node w is associated with the Q
graph transformation (on the second agent graph structure), such that it modifies the
neighborhood of the node represented by w. The pair P and Q are called conjugated
transformations in context of remote node w. In order to synchronize the set of
conjugated graph transformations we assume that, GRADIS assures that both P and Q
graph transformations will be successfully performed.
To guarantee this we consider three types of the conjugated graph grammars:
• the strictly conjugated graph grammars – when the created conjugated graph structure
guarantee, that application of P graph transformation forces the possibility of
application Q graph transformation. In [15] there is proved that the fulfillment eight
condition guarantee strictly conjugated model for double-pushout graph grammars.
1

It is assumed that SUB graph grammar is one of that are able to solve the membership
problem in a polynomial time complexity (like for example ETPL(k) graph grammar [16]).

GRADIS – Multiagent Environment Supporting Distributed Graph Transformations

651

• the conditional conjugated graph grammar – when both the transformations are
performed, when some (earlier defined) conditions are fulfilled by the both graph
structures.
• the transactional conjugated graph grammars – when both the production are
performed in the transactional mode i.e. either all of these graph transformation can
be performed without violating the conjugated graph cohesion or none of them will
be applied.
Let’s notice that in conditional and transactional models, there was not any assumption on the type graph transformation performed by agents. There is no objection to
construct a system in which parent and son agents uses different graph transformation
systems.
The level of a furniture design (supported by the worker created for the support the
room arrangement) points out yet another problem. Assume that, we would like to
furnish the house in the style Louise XVI and all chairs should be identical. The first
part of the problem can be solved by preparing of the proper graph grammar. The
second at the first sight demands the non-hierarchical worker’s cooperation.
Fortunately, it can be solved by introduction worker’s equivalence, i.e. while a worker
creation its parent can decide whether create a new agents instance or to use already
created agent. The common agent react on demand any of its parents, but its reaction
is broadcasted to all of them. This solves the problem of some subsystems unification;
in our example when the one room arranger suggest made chairs more wide, then this
modification (if accepted by the other arrangers) will be made for all chairs.

5 Conclusions
There was a few fundamental assumptions of the agents GRADIS framework:
• the introduction of the possibility graph transformation over the set of distributed
graphs,
• the making use of the all earlier theoretical achievement of the centralized graph
transformations in the multiagent’s environment.
• the support the agents cooperation over the hierarchical graph structures.
The concept of the distribution (to specify a concurrent and distributed system) was
initially considered in the algebraic approach. The distributed graph transformation [2]
was developed with the aim to naturally express computation in system made of
interacting parts. In general, it is assumed an existence of some global state, representted as a graph, that is used to synchronize execution of the amalgamated productions or synchronized productions. In [9], a distributed attributed graph (Distr(AGr) has
two levels: a network and a local level. Network nodes are assigned to the local graphs,
which represent their state. This graphs are transformed via distributed rules. They
consist from a network rule and a set of local rules, one for each node of network rule.
In addition to the usual, in the double push-out approach, dangling and identification
conditions, two additional locality conditions should be verified [17][18]. The
satisfying of the locality conditions by a local graph morphism assures that the pushout can be constructed component wise. There are a few examples of usefulness of

652

L. Kotulski

Distr(AGr) in the visual design of distributed system [17], the specifying integrated
refactoring [19], the modeling a analysis of a distributed simulation protocols [20]. The
problem of evaluation of the distributed rules and graphs in a real distributed
environment is not up till now considered (the last implementation [20] is made in a
centralized environment with help of AToM tool [21]).
The complementary graphs model, introduced for the worker agents in the
GRADIS framework, assure that for each of the local graphs any graphs transformation are introduced locally using only these graph; what means that GRADIS
does not influence of the properties of the graph transformation (considered in context
of global graph generation) such as: confluention, Local Church-Roster problem; the
explicit parallelism problem is also solved on condition, that concurrency instead real
parallelism is possible, because we assume that, the evaluation of m(Li) is made in a
critical section with respect of the nodes belonging to m(Li).
The conjugate graph grammars system, supporting the hierarchical graph
transformation systems, assumes that each agent can be supported by another type of
graph transformation. As a consequence, for each of the subproblem we can use the
graph transformation system that describes it in the best way.
The different graph transformation systems, coexisting in a hierarchical graph
structure, seams to be promising solution with respect the final computational
effectiveness evaluation; it is obvious that the graph structure supported by the
maintainer agents, with respect of its size, should be managed by graph transformation
systems with the polynomial time complexity. Unfortunately, such systems have too
weak descriptive power to describe most of the considered problems. On the other hand,
the maintainer usually keep an information about the structural properties of the modeled
system; for such type of information exist at least one class of graph transformation
systems (ETPL(k) graph grammars [16]) with enough descriptive power [22] and the
polynomial time complexity of the parsing and membership checking. From the worker
agents we need not pay such attention on the graph transformation complexity, when the
size of supported graphs is limited to tens. Finally, the computational complexity of such
a hierarchical system, constructed in such a way, can be acceptable.
One of the most important limitation of the current GRADIS framework is lack
possibility of the maintainer’s graph split, when some worker has been created by
them (then more that some of this worker could be created as a permanent one). This
problem is our preferential work, and an algorithm of the assurance correct
cooperation of the worker with maintainer agents, created by splitting the worker’s
parent seams to in the final phase of the realization.

Reference
1. Rozenberg, G.: Handbook of Graph Grammars and Computing By Graph Trans-formation,
Foundations edn., vol. I. World Scientific Publishing Co., Singapore (1997)
2. Ehrig, H., Engels, G., Kreowski, H.-J., Rozenberg, G.: Handbook of Graph Grammars and
Computing By Graph Transformation, Application, Languages and Tools edn., vol. II.
World Scientific Publishing Co, Singapore (1999)
3. Ehrig, H., Kreowski, H.-J., Montanari, U., Rozenberg, G.: Handbook of Graph Grammars
and Computing By Graph Transformation, Concurrency, Parallelism, and Distribution
edn., vol. III. World Scientific Publishing Co, Singapore (1999)

GRADIS – Multiagent Environment Supporting Distributed Graph Transformations

653

4. Flasiński, M.: Distorted Pattern Analysis with the Help of Node Label Controlled Graph
Languages. Pattern Recognition 23(7), 765–774 (1990)
5. Sycara, K.P.: Multiagent Systems. AI Magazine, 79–92 (1998)
6. Kotulski, L.: Supporting Software Agents by the Graph Transformation Systems. In:
Alexandrov, V.N., van Albada, G.D., Sloot, P.M.A., Dongarra, J. (eds.) ICCS 2006.
LNCS, vol. 3993, pp. 887–890. Springer, Heidelberg (2006)
7. Kreowski, H.-J., Kuske, S.: Graph Transformation Units and Module. In: [2], pp. 607–640
8. Engelfriet, J., Rozenberg, G.: Node Replacement Graph Grammars. In: [1], 3–94
9. Ehrig, H., Heckel, R. Löwe, M., Ribeiro, L., Wagner, A.: Algebraic Approaches to Graph
Transformation – Part II: Single Pushout and Comparison with Double Pushout Approach.
In: [1], pp. 247–312
10. Kotulski, L.: On the Distribution Graph Transformations, Preprint of Automatics Chair,
AGH University of Science and Technology (January 2007); (submitted to the Theoretical
Computer Science)
11. Kotulski, L.: Distributed Graphs Transformed by Multiagent System. In: International
Conference on Artificial Intelligence and Soft Computing ICAISC, Zakopane.
LNCS(LNAI), vol. 5097. Springer, Heidelberg (2008) (accepted) (to be published)
12. Strug, B., Kotulski, L.: Distributed Adaptive Design with Hierarchical Autonomous Graph
Transformation Systems. In: Shi, Y., van Albada, G.D., Dongarra, J., Sloot, P.M.A. (eds.)
ICCS 2007. LNCS, vol. 4488, pp. 880–887. Springer, Heidelberg (2007)
13. Grabska, E., Strug, B.: Applying Cooperating Distributed Graph Grammars in Computer
Aided Design. In: Wyrzykowski, R., Dongarra, J., Meyer, N., Waśniewski, J. (eds.) PPAM
2005. LNCS, vol. 3911, pp. 567–574. Springer, Heidelberg (2006)
14. Kotulski, L., Fryz, Ł.: Assurance of system cohesion during independent creation of UML
Diagrams. In: Proceedings at the Second International Conference on Dependability of
Computer Systems DepCoS - RELCOMEX 2007, Poland, June 14-16, 2007, pp. 51–58.
IEEE Computer Society, Los Alamitos (2007)
15. Kotulski, L., Fryz Ł.: Conjugated Graph Grammars as a Mean to Assure Consistency of
the System of Conjugated Graphs. In: Third International Conference on Dependability of
Computer Systems DepCoS - RELCOMEX 2008 (accepted, 2008)
16. Flasinski, M.: Power Properties of NLC Graph Grammars with a Polynomial Mem-bership
Problem. Theoretical Comp. Sci. 201(1-2), 189–231 (1998)
17. Fisher, I., Koch, M., Taentzer, G., Vohle, V.: Distributed Graph Transformation with
Application to Visual Design of Distributed Systems. In: [3], pp. 269–337
18. Taentzer, G.: Distributed Graphs and Graph Transformation, Applied Categorical
Structures. Special Issue on Graph Transformation 7(4) (December 1999)
19. Bottoni, P., Parisi Presicee, F., Taentzer, G.: Specifying Integrated Refactoring with
Distributed Graph Transformations. In: Pfaltz, J.L., Nagl, M., Böhlen, B. (eds.) AGTIVE
2003. LNCS, vol. 3062, pp. 220–235. Springer, Heidelberg (2004)
20. de Lara, J., Taentzer, G.: Modelling and Analysis of Distributed Simulation Protocols with
Distributed Graph Transformation. In: Proceedings of the Fifth international Conference
on Application of Concurrency To System Design. ACSD, pp. 144–153. IEEE Computer
Society, Washington (2005)
21. de Lara, J., Vangheluve, H.: AToM3: A Tool for Multi-Formalism Modeling and MetaModelling. In: Kutsche, R.-D., Weber, H. (eds.) FASE 2002. LNCS, vol. 2306, pp. 174–
188. Springer, Heidelberg (2002)
22. Kotulski, L.: Graph representation of the nested software structure. In: Sunderam, V.S.,
van Albada, G.D., Sloot, P.M.A., Dongarra, J. (eds.) ICCS 2005. LNCS, vol. 3516, pp.
1008–1011. Springer, Heidelberg (2005)

