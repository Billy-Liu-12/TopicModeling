Formal Model for Contract Negotiation in
Knowledge-Based Virtual Organizations
´
Mikolaj Zuzek1 , Marek Talik1 , Tomasz Swierczy´
nski1 , Cezary Wi´sniewski1 ,
2
2
Bartosz Kryza , Lukasz Dutka , and Jacek Kitowski1,2
1

2

Institute of Computer Science, AGH-UST, Krakow, Poland
Academic Computer Centre CYFRONET AGH, Krakow, Poland
{bkryza,dutka,kito}@agh.edu.pl

Abstract. In this paper we propose a formal model which supports
the process of setting up a Virtual Organization by means of allowing
contract negotiation between parties pariticipating in such VO. The negotiated contract is used to conﬁgure the necessary Grid middleware
components for the purpose of contract enforcement during the lifetime
of the Virtual Organization. We present a brief overview of the framework and discuss in detail the formal model underlying the process of
contract negotiation and how the ontological description of the domains
related to given VO supports this process.
Keywords: Virtual Organization, Contract Negotiation, Ontology, Grid

1

Introduction

As Grid systems are being moved from academic and research facilities to more
challenging business and commercial applications, such issues as control of resource sharing become of crucial importance. In order to manage and share
resources within the Grid the idea of Virtual Organizations emerged, which enables sharing only subsets of resources among partners of such Virtual Organization within a potentially larger Grid setting. In order to support creation and
management of such Virtual Organization, Grid middleware must support several aspects such as security, resource sharing policy deﬁnition and enforcement,
resource discovery and usage limited according to the VO policy and other. We
propose a semantic based approach, implemented in the form of a framework,
called FiVO (Framework for intelligent Virtual Organization) that supports creation and management of dynamic Virtual Organizations with special focus on
authorization of access to resources based on ontologies [1,2]. In this paper we focus on its contract negotiation component and in particular on the formal model
which allows to control and verify the negotiations process and its result. The contract, described by a special ontology, provides all information necessary for conﬁguration of Virtual Organization in a Grid system, by automatically translating
proper contract statements to conﬁguration options of such systems as for example VOMS (Virtual Organization Management System) [3] or PERMIS [4]. Contracts also allow for speciﬁcation of non-functional parameters of the envisioned
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 409–418, 2008.
c Springer-Verlag Berlin Heidelberg 2008

410

M. Zuzek et al.

VO collaborations, especially SLA’s (Service Level Agreements) in order to provide for the Grid monitoring layer necessary data for the contract enforcement
[5]. Our work is being evaluated within the EU-IST project Gredia [6], on two
commercial applications. First is related to inter-banking solution for automatic
credit-scoring of bank users credit requests. The second one is a media application
oriented on providing a collaborative environment for nomadic journalists.

2

Related Work

The idea of supporting Virtual Organizations with formal model of contract negotiation process is not present in existing works. However, some attempts were
already made in order to deal with supporting Virtual Organizations with contract based agreements on how to share the resources of the entities participating
in some VO. The authors of [7] describe requirements for automating the contract
management in a VO. They identify 3 kinds of contracts in a VO: business contract, ICT contract and ASP (Application Service Provider) contract. In [8] an
attempt was made to formalize a deﬁnition of contract based multi-agent Virtual
Organization. The authors deﬁne 4 key properties of VOs: Autonomy, Heterogeneity, Dynamism and Structure. They use terminology from agent-based systems, e.g. they refer to the VO itself as an agent. The contract is deﬁned as a
set of commitments, goals and agents in some context. The paper introduces a
formal deﬁnition of a hierarchical VO with a set of agents (which can be VOs
themselves), policies, goals and commitments. The VO is then a set of bilateral
contracts between agents in a VO, and can be more easily deﬁned in a distributed
setting. For example for 3 partners and 2 contracts A ↔ B and B ↔ C, A and C
don’t event need to know about each other. Another example of contract based
VO’s is presented in [10]. Authors present web-Pilarcos J2EE based agent framework for managing contract based Virtual Organizations. The contract itself is an
object (J2EE EntityBean) and can be in several states such as In-negotiation, Terminated etc. The proposed solution is not based on ontologies, and the metadata
reasoning is mentioned brieﬂy. The proposed architecture has many diﬀerent components - which might make it hard for integration with custom systems - should
rather provide a more uniﬁed interface based on easily adaptable standards. The
paper discusses the basic requirements for a VO contract such as modeling of service behaviour, communication services and some non-functional properties such
as QoS. In [9] authors present an event based protocol for decision making in Virtual Organizations, for multi-agent systems. The authors introduce a voting protocol based on RONR (Robert’s Rules of Order). Thorough discussion of requirements necessary for a general VO management system can be found in [11].

3

Contract Negotiation Approach in Gredia

The GREDIA project aims at the development of a Grid application platform,
providing high level support for implementation of Grid business applications
concerned with users mobility. This platform is generic in order to combine both

Formal Model for Contract Negotiation

411

Fig. 1. FiVO overall vision in a distributed Gredia environment

existing and arising Grid middleware, and facilitates the provision of business services, which mainly require access and sharing of large quantities of distributed
annotated numerical and multimedia content. One of the main GREDIA features
is its focus on mobile users to exploit Grid technologies in a seamless way by
enabling mobile access and sharing of distributed content. The potential results
of the platform are being validated through two pilot applications, including
media and banking. Fig. 1 presents example deployment of the FiVO framework
in a distributed Gredia environment. Four organizations are sharing their resources within the VO-1. FiVO component is deployed within each organization
and is responsible for storing semantic descriptions of its contents (i.e. resources
provided to other organizations). These descriptions can include such aspects
of organization as its structure and business logic described in proper ontology
as well as hardware, data and service resources available and provide for sharing with other organizations including security and QoS rules. FiVO instances
deployed in particular environment can connect through a peer-to-peer overlay,
based on Grid Organizational Memory (GOM) knowledge base [12], in order
to form a VO and collaborate on emerging tasks. The main feature of FiVO
is the support for contract negotiation and management, which enables coordinated establishment of agreement among partners who want to create a new
Virtual Organization. In order to enable organizations to deﬁne an unambigous
agreement on how to share their resources in the form of ontology, the contract ontology provides all the necessary generic concepts, covering such aspects
as the notion of Virtual Organization, security and authorization rights, Quality

412

M. Zuzek et al.

of Service in the form of Service Level Agreement statements as well as the negotiation process itself. These generic concepts have to be extended by the domain
speciﬁc concepts of a particular VO in order to reﬂect its actual intented goal.
The contract itself is simply a set of ontology individuals. Abstract statements
from the contract are used to conﬁgure the VO middleware, including security
and monitoring infrastructure, in order to enforce proper access authorization
and QoS, as described by the contract.

4

Formal Model of Contract Negotiation

The formal model of contract negotiations in FiVO framework will be presented
by the introduction of several deﬁnitions. In general we can say, that the contract is a set of statements which state the rules of cooperation between parties,
referred to here as agents (A) and the rules specifying how their resources (X)
can be shared.
Deﬁnition 1. Let R : A → 2X be resource ownership function which assigns
the sets of resources to agents who own them, with the assumption that agents
do not own the same resources at the same time, i.e.:
∀a1 , a2 ∈ A : a1 = a2 ⇒ R(a1 ) ∩ R(a2 ) = ∅

(1)

Deﬁnition 2. Atom, p, is a logical expression concerning one agent and one of
his resources. The set of all possible atoms can be deﬁned as:
P = {p = (a, x, z, d) : a ∈ A ∧ x ∈ R(a)∧
d = {(u, v) : u ∈ Ω ∧ v ∈ V al(u)}} (2)
where a is the agent, x is the resource owned by the agent, z represents an action
that is supposed to be taken by the agent and d contains the parameters of the
action (Ω is the set of possible attributes and V al maps the parameters to their
possible values).
Deﬁnition 3. Statement, s, is a set of atoms in the form of a logical sentence. It
represents agents’ requirement or commitment depending on whether the statement is still under negotiations or is already accepted. All atoms of a given
statement must relate to one agent. The set of all possible statements can be
deﬁned as:
S = {s = (p1 , p2 , ..., pn ) : n ∈ N+ ∧ pi = (a, xi , zi , di ), i = 1, 2, ..., n}

(3)

In order to allow separation of the negotiation process for the whole VO into
partial negotiations on subsets of resources that will be included in the overall
contract, we introduce the concept of a negotiation table.
Deﬁnition 4. The negotiation table is a couple (O, C) of disjunctive sets of
statements, where O includes opened statements which are still being negotiatied,

Formal Model for Contract Negotiation

413

and C contains already accepted statements (closed). The set of all possible tables
can be deﬁned as:
˚∪ Φ
ˆ = {(O, C) ∈ 2S × 2S : O ∩ C = ∅}
Φ=Φ

(4)

We say that negotiation table is closed when it does not contain any opened
statements, otherwise it is opened. Thus we can deﬁne the sets of opened and
closed negotiation tables as:
˚ = {(O, C) ∈ Φ : O = ∅}
Φ

(5)

Φˆ = {(O, C) ∈ Φ : O = ∅}

(6)

Since all negotations take place on at least one negotiation table we can deﬁne
a negotation state as a subset of the possible negotiations set, i.e.:
Deﬁnition 5. The negotiation state is any set of negotiation tables, i.e. q ⊂ Φ
The changes in the negotiation tables can only be achieved by means of sending
proper messages. These messages deﬁne who states what about which resources:
Deﬁnition 6. By message, m, we mean a quintuple deﬁned as:
˚

(a, I, Y, U, R) ∈ M = A × MI × MY × MU × 2Φ

(7)

where a represents the agent who sends the message, I is the set of pairs tablestatement, which speciﬁes which statements should be added to which negotiation
table (MI ), thus:
˚ × S : ((O, C), s) ∈ I ⇒ s ∈
MI = {I ⊂ Φ
/ O ∩ C}

(8)

The above deﬁnition disallows adding statements which are already in a given negotiation table. Y is the set of statements accepted by the agent (only statements
already added to the given negotiation table can be accepted), i.e:
˚ × S : ((O, C), s) ∈ Y ⇒ s ∈ O}
MY = {Y ⊂ Φ

(9)

U speciﬁes the set of statements updated by the current message and it contains
triples, which contain the set on which the statement is updated, statement already existing in this table and the new statement which does not yet exist in
this table:
˚ × S × S : ((O, C), s1 , s2 ) ∈ U ⇒ s1 ∈ O ∧ s2 ∈
/ O ∪ C}
MU = {U ⊂ Φ

(10)

The statement from the set U can only modify parameters (d) of existing statements, thus the following holds:
((O, C), (a1 , x1 , z1 , d1 ), (a2 , x2 , z2 , d2 )) ∈ U ⇒ a1 = a2 ∧ x1 = x2 ∧ z1 = z2 (11)

414

M. Zuzek et al.

Finally the set R is the set of tables rejected by the agent. It cannot contain
already closed negotiation tables, as well as it cannot contain the sets mentioned
by statements in I, Y and U , thus we have:
((O, C), s) ∈ I ∨ ((O, C), s) ∈ Y ∨ ((O, C), s1 , s2 ) ∈ U ⇒ (O, C) ∈ R

(12)

Since agent cannot accept statements which are not related to him, we have:
˜ ∈Y ⇒a=a
(a, I, Y, U, R) ∈ M ∧ ((O, C), (˜
a, x˜, z˜, d))
˜

(13)

Now, we can use these deﬁnitions to verify that a message is valid with respect
to the negotiation state:
Deﬁnition 7. Let V : 2Φ → M be a mapping, such that:
m = (a, I, Y, U, R) ∈ V (q) ⇔
[((O, C), s) ∈ Y ∨ ((O, C), s1 , s2 ) ∈ U ∨ (O, C) ∈ C] ⇒ (O, C) ∈ q

(14)

In a given negotiations state, as correct messages from the set V (q), we mean
those, which accept or modify statements from the negotiation tables which are
actually contained within that negotiation state. Invalid messages, are those,
which relate to statements not present in any of the negotiation tables for the
given state.
Deﬁnition 8. Let Q : {(q, m) ∈ 2Φ × M : m ∈ V (q)} → 2Φ be a transfer
function which assigns to every negotiation state and message the consecutive
state. Assuming m = (a, I, Y, U, R) we get:
∪

Q(q, m) = q∪(

((O,C),s)∈I

∪

(

((O,C),s)∈I

(

∪

((O,C),s1 ,s2 )∈U

(O ∪ {s}, C)) \ (

∪

((O,C),s)∈Y

(O \ {s}, C ∪ {s})) \ (

(O, C))∪

∪

(O, C))∪

((O,C),s)∈Y

(O ∪ {s2 } \ {s1 }, C)) \ (

∪

((O,C),s1 ,s2 )∈U

(O, C)) \ C

(15)

The message modiﬁes the negotiation state according to these rules:
– statements of the form ((O, C), s) from set I create new statements s in the
negotiation table (O, C), so the negotiation table changes to (O ∪ {s}, C)
– statements of the form ((O, C), s) from set Y change the statement to close,
i.e. it moves them from the set O to set C: (O \ {s}, C ∪ {s}
– statements of the form ((O, C), s1 , s2 ) from the set U , cause replacement of
the statement s1 with statement s2 within the table (O, C), thus: (O ∪ {s2 } \
{s1 }, C)
– negotiation tables from the set C are removed from the input state
Each valid message sent to a negotiation table, modiﬁes the state of the negotiation process. Thus we can deﬁne a mapping which gives us the negotiation
state from the sequence of messages:

Formal Model for Contract Negotiation

415

Deﬁnition 9. Let us deﬁne a mapping ϕ : Dϕ → 2Φ , such that:

∀

∅ ∈ Dϕ

(16)

ϕ(∅) = ∅

(17)

mi ∈ M ∧ Ψ = (m0 , ..., mn ) ∧ Ψ˜ = (m0 , ..., mn+1 ) ∧ Ψ ∈ Dϕ

i=0,1,2,...,n+1

⇒ [mn+1 ∈ V (ϕ(Ψ )) ⇒ Ψ˜ ∈ Dϕ ∧ ϕ(Ψ˜ ) = Q(ϕ(Ψ ), mn+1 )] (18)
The above mapping maps sequences of messages into negotiation states. An
empty sequence is assigned an empty negotiation state. If a given negotiation
sequence Ψ belongs to the domain of state function (which means it represents
correct negotiation process) then the value of function ϕ(Ψ ) is the state of negotiations after applying all messages from this function.
Deﬁnition 10. Negotiations is any ﬁnite sequence of messages which belongs
to the domain of state function ϕ.
We say that negotiations completed successfully when the last state contains at
least one closed negotiation table and does not contain any opened negotiation
tables. Thus ﬁnally we can deﬁne a contract:
Deﬁnition 11. A contract is a set of statements contained in the ﬁnal negotiations state. i.e.:
C
(19)
K=
∪
(O,C)∈ϕ(Ψ )

The deﬁnitions presented above specify formal way of negotiating a contract for
a VO, therefore VO can be understood as a practical realization of the above
deﬁned contract. This allows to verify that the negotiations were fair and that
they completed successfully, i.e. all parties were ﬁnally satisﬁed. Another step is
to use the deﬁnition of a VO goal, deﬁned as a set of requirements for the contract
to automatically verify, whether all initial requirements for the VO were satisﬁed.
In order to support dynamic VOs, where the conditions can change during the
operation of VO, the contract, as deﬁned above can be ammended, by starting
the negotiations again with the current state of the contract as the initial state.

5

From Contract Model to VO Ontology

The formal model provides means to implement a negotiation framework which
can allow parties to deﬁne the rules of cooperation within a given Virtual Organization. After the contract is successfuly negotiated, the framework should ensure
the rules agreed upon are obeyed. According to the presented formal model a
sample statement from the EasyLoan banking Virtual Organization looks like
below:

416

M. Zuzek et al.

s = StCreditCalculation =
{p = (a=’#Marco’, x=’#CreditCalculationService’, z=’#ProvidesService’,
d={(’#TimeToComplete’, ’15minutes’), (’#accessRole’,’#BankClerk’)})}
These statements are encoded in the Web Ontology Language with respect to
proper contract ontology, and the above statement in this ontology is rendered
as:
<j.0:VirtualOrganization rdf:ID="EasyLoan">
<j.0:name rdf:datatype="...">
EasyLoan Application VO</j.0:name>
<j.0:administeredBy rdf:resource="l#Marco"/>
<j.3:hasContract>
<j.3:Contract rdf:ID="EasyLoanContract">
<j.3:hasStatement>
<j.3:Statement rdf:ID="StCreditCalculation">
<j.3:hasAtom>
<j.3:Atom rdf:ID="AtomCreditCalculationService">
<j.3:hasActor rdf:ID="#Marco"/>
<j.3:hasResource>
<j.2:Service rdf:ID="CreditCalculationService">
<j.0:isOwnedBy rdf:resource="#HappyBank"/>
<j.0:belongsTo rdf:resource="#EasyLoan"/>
</j.2:Service>
</j.3:hasResource>
<j.3:hasAction>
<j.3:Action rdf:ID="ProvidesService"/>
</j.3:hasAction>
<j.3:hasParameter>
<j.3:Parameter>
<j.0:hasQoSAttribute>
---- j.5:QoSAttribute - #j.6:TimeToComplete
</j.0:hasQoSAttribute>
<j.6:hasValue>
---- { "15", #owlTime::unitMinute }
</j.6:hasValue>
</j.3:Parameter>
</j.3:hasParameter>
<j.3:hasParameter>
<j.3:Parameter>
<j.0:hasAuthorizationRestriction>
---- j.5:accessRole
</j.0:hasAuthorizationRestriction>
<j.6:hasValue>
---- { "#BankClerk" }
</j.6:hasValue>
</j.3:Parameter>

Formal Model for Contract Negotiation

417

</j.3:hasParameter>
---- more parameters ...
</j.3:Atom>
</j.3:hasAtom>
</j.3:Statement>
</j.3:hasStatement>
</j.3:Contract>
</j.3:hasContract>
</j.0:VirtualOrganization>
In Fig. 2, we can see sample contract ontology visualization for EasyLoan Virtual
Organization of the banking scenario.

Fig. 2. Graphical representation of ontological contract for Banking application

This contract is used by FiVO to conﬁgure Grid middleware services such
as VOMS, PERMIS or MDS in order to actually deploy the Virtual Organization in the Grid environment. Further enforcement of the contract statements is
performed automatically by these services.

6

Conclusions and Future Work

In this paper we have presented the vision and architecture of the FiVO (Framework for Intelligent Virtual Organizations) which enables contract negotiation
and management for Grid-based Virtual Organizations in a business setting.
We believe that such functionality will foster the adoption of Grid and Virtual
Organizations in commercial applications by simiplifying the process of Virtual
Organization inception and management of agreements on how the resources
of each participating organizations should be shared among partners of a VO.
The framework is currently being implemented and the future work will include,
development of ontologies required for contract deﬁnition and evaluation of the
framework on pilot applications. The formal model will be extended with a

418

M. Zuzek et al.

equivalence relation by means of the type of resources and allowing OR operator
between atoms in a statement.
Acknowledgements. The authors want to acknowledge the support of the EU
Gredia Project (IST-FP6-034363) and AGH University of Science and Technology grants 11.11.120.777 and 500-08.

References
1. Kryza, B., Dutka, L., Slota, R., Kitowski, J.: Supporting knowledge-based dynamic
virtual organizations with contracts. In: Proc. of eChallenges 2007 Conference and
Exhibition, The Hague, Netherlands, October 24-26, 2007, pp. 937–945 (2007)
2. Kryza, B., Dutka, L., Slota, R., Pieczykolan, J., Kitowski, J.: Gvosf: Grid virtual
organization semantic framework. In: Bubak, M., Turala, M., Wiatr, K. (eds.) Proc.
of Cracow Grid Workshop 2006 (CGW 2006), pp. 104–110. ACK-Cyfronet AGH,
Krakow (2007)
3. Alﬁeri, R., Cecchini, R., Ciaschini, V.: Voms, an authorization system for virtual
organizations. In: Fern´
andez Rivera, F., Bubak, M., G´
omez Tato, A., Doallo, R.
(eds.) Across Grids 2003. LNCS, vol. 2970, pp. 33–40. Springer, Heidelberg (2004)
4. Chadwick, D.W., Otenko, A.: The permis x.509 role based privilege management
infrastructure. Future Generation Comp. Syst. 19, 277–289 (2003)
5. Alipio, P., Neves, J., Carvalho, P.: An ontology for network services. Computing
and Informatics 26(5), 543–561 (2007)
6. Gredia Consortium: Gredia project website, http://www.gredia.eu
7. Shelbourn, M., Hassan, T., Carter, C.: 3.1. Legal and contractual framework for
the VO. In: Camarinha-Matos, L.M., Afsarmanesh, H., Ollus, M. (eds.) Virtual
Organizations Systems and practices, pp. 167–176. Springer, Heidelberg (2005)
8. Udupi, Y.B., Singh, M.P.: Contract enactment in virtual organizations: A
commitment-based approach. In: Proc. of the Twenty-First National Conference on
Artiﬁcial Intelligence and the Eighteenth Innovative Applications of Artiﬁcial Intelligence Conference, Boston, Massachusetts, USA, July 16-20, 2006. AAAI Press,
Menlo Park (2006)
9. Pitt, J.V., Kamara, L., Sergot, M.J., Artikis, A.: Formalization of a voting protocol
for virtual organizations. In: 4rd International Joint Conference on Autonomous
Agents and Multiagent Systems (AAMAS 2005), Utrecht, The Netherlands, July
25-29, 2005, pp. 373–380. ACM, New York (2005)
10. Metso, J., Kutvonen, L.: Managing virtual organizations with contracts. In: Workshop on Contract Architectures and Languages (CoALa 2005) (2005)
11. Ratti, R., Camarinha-Matos, L.M., et al.: Speciﬁcation of vo creation support tools.
Technical report, Ecolead Consortium (2006)
12. Kryza, B., Slota, R., Majewska, M., Pieczykolan, J., Kitowski, J.: Grid Organizational Memory - Provision of a High-level Grid Abstraction Layer Supported by
Ontology Alignment. Future Generation Computer Systems (FGCS) 23(3) (March
2007)

