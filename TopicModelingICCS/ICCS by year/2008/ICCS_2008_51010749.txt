New Sky Pattern Recognition Algorithm
Wojciech Makowiecki1 and Witold Alda2
1

Astronomical Observatory of the Jagiellonian University, Krak´
ow, Poland
wojciech.makowiecki@gmail.com
http://www.wojciech.us
2
AGH University of Science and Technology, Krak´
ow, Poland
alda@agh.edu.pl

Abstract. We present here a new algorithm which enables the identiﬁcation of stars in astronomical photographs using readily available star
catalogs for this purpose. The algorithm was implemented in a standalone application called ‘Skyprint‘ capable of performing a matching
process. The computational aspect of the problem can be designated
to the wide class of image recognition methods and analysis of multidimensional data. The astronomical aspect concentrates on astrometry –
the method of determining the coordinates of stars in the celestial sphere.
The problem of identifying star patterns occurs most often in such areas as cosmic probe navigation, adjusting and merging numerous photographs of the sky together, or in recovering missing information in
relation to a fragment of the sky represented in the photograph.
Keywords: Pattern recognition, Astrometry, Geometric hashing.

1

Introduction

The concept of matching the stars in a photograph with stars in the catalog has
been investigated for many years. The majority of algorithms which are able
to successfully solve the problem are based on the idea of comparing polygonal
shapes in the photograph with those in the catalog. The shapes in the photograph
are created by connecting stars in the photograph together and likewise the
shapes in the catalog.
We can distinguish two strategies of approaching the problem of matching
these two groups of shapes. The ﬁrst one, used for example by Valdes [1],
Groth [2] and Murtagh [3], relies on heavy restrictions that are put on the fragment of the catalog to be compared with the photograph. We must know that
the chosen fragment of the catalog contains most of the stars visible in the photograph. Also the size of the fragment can not be larger than a few times the
size of the ﬁeld of view (FOV) shown on the photograph. The shapes (in this
case triangles), made up of stars brighter than a certain limiting magnitude, are
created in the picture and in the chosen part of the catalog. Then the triangles
are saved in two separate lists so that they can be later investigated for similarities. Conﬁrmation that two found shapes are made up of the same objects is
done in the so called ‘voting process‘.
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 749–758, 2008.
c Springer-Verlag Berlin Heidelberg 2008

750

W. Makowiecki and W. Alda

In this paper the authors have concentrated on proposing a new algorithm
belonging to the second group, that has emerged recently e.g. Lang [4].
Algorithms belonging to this group are able to recognize an arbitrary fragment
of the catalog shown on the photograph, without being limited by cases where
the approximate location is not known. Such algorithms are not usually able
to identify particular stars belonging to the shape, however, for this purpose,
one of the algorithms from the ﬁrst group which has already been developed,
can be chosen. The main idea behind the algorithm presented is to create and
subsequently compare two sets of convex quads. The ﬁrst set is created by using
the stars found in the photograph, and the second one by using the stars present
in the catalog.

2

Algorithm

One of the most important issues in the algorithm is its method of characterizing
the shapes. We need to do this in a way which is invariant with respect to
translation, rotation and scaling. Each shape consists of N points. Each point
has 2 coordinates, therefore we need 2N parameters to determine the positions
of all N points in the 2-dimensional space. As translation, rotation and scaling
in a 2D coordinate system require 4 degrees of freedom, we end up with the
2N − 4 parameters which determine the shape unambiguously. This gives us
2 parameters for each triangle and 4 parameters for each quad.
In our approach we have chosen to use quads and to compare them by using
only 3 internal angles of each quad. Although such a measure is not suﬃcient to
determine the convex quad unambiguously, we sacriﬁce this for the advantage
of having only three parameters for each shape. Our tests show that such an
approach performs well and is suﬃcient in most cases.
The algorithm consists of several steps:
1. Creating the ‘grid of seeds‘
By ‘seed‘ we mean a virtual point having 2 coordinates (Right Ascension
and Declination). We deﬁne ‘grid of seeds‘ as points distributed in one of any
number of regular ways. For example one can choose to satisfy the following
condition:
number of seeds per unit area
≈ const.
(1)
number of stars per unit area
We believe this rule of placing seeds is one of the best.
2. Choosing only the convex shapes for later comparison
Now we use the seeds to create shapes as shown in Fig. 1. We try to create
a convex quad in the vicinity of each seed. A case with three collinear stars
is treated as a correct convex quad.
3. Angle calculation, discretization and hashing
In this stage we ﬁrst calculate angles by using one of three diﬀerent methods
mentioned later. Subsequently we discretize angles every 2 degrees. For each
shape we store 5 values: 3 discrete angles and 2 coordinates of the seed which

New Sky Pattern Recognition Algorithm

751

Fig. 1. Stages of creating a convex quad. Black dots denote seeds of the grid, blue
circles denote stars. Sequence of stages are as follows:
a) select one seed and choose 4 closest stars
b) create quad only if these 4 stars can make a convex one
c) calculate internal angles of the quad
d) choose the largest angle and two more angles by moving in a clockwise direction,
remember values and sequence of these 3 angles.

was used to create this particular quad. We use a standard hash function
with primes as coeﬃcients in the form:
(α ∗ 23827 + β ∗ 34693 + γ ∗ 46021) % 904997

(2)

which transforms 3 input angles (α, β and γ) to an array index. This method
enables quick matching of quads.
4. Division of sky into fragments
In this step, in order to use ‘voting‘, we divide the whole sky into fragments as shown in Fig. 2, 3 and 4. Fragments can have diﬀerent shapes and
sizes so there are many diﬀerent ways of doing this. In our approach we use
orthogonal division. We limit the minimum size of the fragments to the maximum FOV of the input photograph. In other words, the minimum size of
the fragment must be larger than the photograph. However, the limiting size
cannot be too large - because in such a case, identifying fragments would be
imprecise or incorrect. Even when the photograph has angular dimensions
which ﬁt in the single fragment of the catalog, it may be only partially contained. Figure 2 shows our solution to this problem. We enlarge the fragment

752

W. Makowiecki and W. Alda

Fig. 2. Enlarging fragments of the catalog by a factor of 2 in order to be sure that the
photograph is always entirely contained by at least one fragment

by a factor of 2 in order to be sure that the photograph is always entirely
contained by at least one fragment.
5. Counting matched quads and voting on catalog fragments
We then match the convex quads from the photograph with those in the
catalog. Once a match is found, one or more areas in the sky receives votes
as shown in Fig. 3. At the end of the process, the region of the catalog
which has received the highest number of votes is the one we were looking
for (Fig. 4).
We use seeds for two reasons. Firstly, to introduce a unique and easy method
for choosing stars, which will be used later to create quads. Secondly, using seeds
is necessary for reducing the number of convex quads created from the catalog.
The problem shows certain asymmetry. For the photograph, we can create as
many convex quads as possible without using seeds at all. The number of convex
quads is the main reason for this. A photograph always has many fewer stars
than the whole sky catalog. However, as it turned out in our tests, such a method
is not optimal and introduces diﬃculties. The main problem concerns the scale
of quads. If we create all possible convex quads from the stars in the photograph

New Sky Pattern Recognition Algorithm

753

Fig. 3. Example of quads matching process

we would create convex quads in many diﬀerent scales, whereas using a grid of
seeds for the catalog would create only quads of similar sizes.

3

Software

The name ‘Skyprint‘ [10] was intended to be analogous with ﬁngerprinting because it tries to ﬁnd the same patterns of stars in a large database. Skyprint is
a highly interactive application written in C++ with Qt interface. Sample screen
of the program’s graphical interface is shown in Fig. 5.
There are two algorithms implemented in Skyprint. First, the algorithm presented in the previous section and second - a version of the algorithm presented
by Valdes [1]. The distortion eﬀects originating from projecting a celestial sphere
onto a 2D plane can no longer be neglected for photographs with FOV larger
than 30 arcmin. For this reason Skyprint gives the option of choosing between
three diﬀerent types of projection. The ﬁrst one is a ‘no projection‘ method (the
angles are calculated on the sphere with use of spherical trigonometry). The
second method is to calculate the angles on the sphere by treating them as if
they were in a two dimensional plane. The last one, the ‘gnomonic projection‘,

754

W. Makowiecki and W. Alda

Fig. 4. Sample results of voting procedure

Fig. 5. Skyprint - view of the main window

New Sky Pattern Recognition Algorithm

755

is the best option as it uses exactly the same distortion as the one that appears
when a picture of the sky in taken.
The typical use case of Skyprint is as follows:
–
–
–
–
–

4

Open the photograph.
Select or correct position of stars on the photograph.
Choose sky region (possibly the whole sky).
Select between algorithm I and II.
Choose matching parameters for the selected algorithm.

Results

Although we made our tests on a number of images, here we would like to concentrate on the comparison of results obtained by matching a single photograph
while changing many parameters of the algorithm. We have used the simplest
orthogonal division as shown in Fig. 3. This allowed us to divide the catalog into
128 parts. We placed seeds much more densely, but in precisely the same manner. Seed density is a parameter of the software. Typically we use two densities:
600 x 300 and 1200 x 600. However, these seeds are not uniformly distributed on
the sphere. This particular distribution causes the seeds with highest and lowest
declinations to be close to other seeds. This is not desirable, because in this way
there would be many more quads created for the regions close to the poles than
for the parts of the sky which lie beside the equator. The same problem applies
to choosing fragments that the catalog is divided into. One solution is to use
number of votes in the region of the catalog with 2nd highest number of votes
number of votes in the region of the catalog with highest number of votes
total number of quads created from the photgraph

Number of quads (blue bars)
Number of votes (red and black bars)

140

120

100

80

60

40

20

0
400

450

500

550

600

Maximal spacing between stars in the photograph [pixels]

Fig. 6. Results obtained without using any projection

650

756

W. Makowiecki and W. Alda

number of votes in the region of the catalog with 2nd highest number of votes
number of votes in the region of the catalog with highest number of votes
total number of quads created from the photgraph

Number of quads (blue bars)
Number of votes (red and black bars)

140

120

100

80

60

40

20

0
300

350

400

450

500

550

600

Maximal spacing between stars in the photograph [pixels]

Fig. 7. Results obtained by calculating the angles on the sphere with use of spherical
trigonometry
number of votes in the region of the catalog with 2nd highest number of votes
number of votes in the region of the catalog with highest number of votes
total number of quads created from the photgraph

Number of quads (blue bars)
Number of votes (red and black bars)

140

120

100

80

60

40

20

0
350

400

450

500

550

600

Maximal spacing between stars in the photograph [pixels]

Fig. 8. Results obtained by using the gnomonic projection

650

New Sky Pattern Recognition Algorithm

757

HEALPix [8] for determining the uniform distribution of seeds and regions of
the catalog. The other is to utilize the constraint in equation 1. For the tests we
used a M45 [7] photograph with a FOV of about 1 degree, which is very small
in size, when compared with 22.5 degrees (the largest part into which we divide
the catalog). The larger the ratio of FOV to the size of the part of the catalog,
the harder it is for the algorithm to work properly. This was one of the reasons
for choosing this photograph. The second reason was to show that even at such
a small FOV (small in the context of amateur photography) we need to make
sure we pay attention to distortions. In Fig. 6, 7 and 8 we show the number
of created quads compared with the number of votes in the regions with two
highest ranks, obtained for each method of angle calculation.

5

Conclusions

We have shown that the implemented algorithm works well with almost any class
of photographs. We have made no assumptions about the photograph apart from
limiting its size which makes the algorithm much more eﬃcient.
In practice the maximum size of the photograph is usually well known and
can be set as a parameter, thus representing a very soft constraint.
We have also determined the most important factors in the identiﬁcation of
the fragment of the sky. One of them is the number of stars selected in the
photograph either by an automatic ﬁlter or the user. The more stars selected,
properly and precisely, the higher the probability of successful matching. The
projection and the method used to calculate angles of the shape is also very
important, especially for larger FOVs. For matching real life photographs of
the sky, the gnomonic projection is the best choice. Because there are countless
methods of characterizing shapes we plan to explore some more possibilities
further in our future research on this subject.
The work of Arzoumanian et.al. [9] shows that diﬀerent applications of the
star pattern matching algorithms may exist in a disparate ﬁelds of science and
are still to be explored.
AGH Grant no. 11.11.120.777 is acknowledged.

References
1. Valdes, F.G., Campusano, L.E., Velasquez, J.D., Stetson, P.B.: FOCAS Automatic
Catalog Matching Algorithms. PASP 107, 1119 (1995)
2. Groth, E.J.: A pattern-matching algorithm for two-dimensional coordinate lists.
The Astrophysical Journal 91, 1244–1248 (1986)
3. Murtagh, F.: A new approach to point-pattern matching. PASP 104, 301–307
(1992)
4. Lang, D., Hogg, D.W., Mierle, K., Blanton, M., Roweis, S.: Making the sky searchable (submitted, 2007), http://www.astrometry.net
5. Harvey, C.: New Algorithms for Automated Astrometry. M.Sc. Thesis, University
of Toronto (2004)

758

W. Makowiecki and W. Alda

6. Roeser, S., Bastian, U.: PPM Star Catalog, vol. I & II. Astronomisches RechenInstitut, Heidelberg (1991)
7. De Martin, D.: M45 picture, http://www.skyfactory.org
8. G´
orski, K.M., Hivon, E., Banday, A.J., Wandelt, B.D., Hansen, F.K., Reinecke, M.,
Bartelmann, M.: HEALPix: A Framework for High-Resolution Discretization and
Fast Analysis of Data Distributed on the Sphere. The Astrophysical Journal 622(2),
759–771 (2005)
9. Arzoumanian, Z., Holmberg, J., Norman, B.: An astronomical pattern-matching
algorithm for computer-aided identiﬁcation of whale sharks Rhincodon typus. Journal of Applied Ecology - British Ecological Society 42 (6), 999–1011 (2005)
10. Makowiecki, W.: Skyprint software for interactive Star Pattern Matching,
http://www.skyprint.info

