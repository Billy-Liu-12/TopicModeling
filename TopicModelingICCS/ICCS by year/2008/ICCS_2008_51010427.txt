Heuristics Core Mapping in On-Chip Networks
for Parallel Stream-Based Applications
Piotr Dziurzanski and Tomasz Maka
Szczecin University of Technology,
ul. Zolnierska 49, 71-210 Szczecin, Poland
{pdziurzanski,tmaka}@wi.ps.pl

Abstract. A novel approach for implementation of multimedia streaming applications into mesh Networks on Chips structure is proposed. We
provide a new multi-path routing algorithm together with heuristic algorithms for core mapping so that minimize the total transfer in the
hardware implementation. The proposed approach has been tested with
two popular stream-based video decompression algorithms. The experimental results conﬁrming the proposed approach are provided.
Keywords: Multimedia streaming applications, On-Chip routing algorithm, IP core mapping, Multi-path routing.

1

Introduction

Computational-intensive multimedia applications are especially well suited for
parallel and distributed processing due to their data-dominated algorithms that
can be split intro a number of stages. These stages can be implemented in separate computational units working in a pipeline-like way and transmitting each
other streams of relatively large, but usually ﬁxed, amount of data. Some widelyknown examples of the algorithms of that type are, e.g., MPEG-4, DAB, DVB,
and many others. In these applications, it is usually required to keep an assumed
quality level of service and meet real-time constraints [7].
Multi Processor Systems on Chips (MPSoCs) are often considered as suitable
hardware implementations of these applications [3]. As each processing unit of a
MPSoC can realize a single stage of streaming application processing, it is still
problematic to connect these units together. The simplest point to point (P2P)
connections require too much space, whereas bus-based connections result in
large number of conﬂicts and, consequently, despite various arbitrage techniques
decrease the overall performance of the whole system [4]. Besides, both P2P and
bus-based realizations do not scale well with the constantly increasing number of
independent Intellectual Property (IP) cores (i.e., computational units) required
by contemporary devices dealing with a number of various algorithms in a single
system [1].
In order to omit these obstacles, the packet-based Network-on-Chip (NoC)
paradigm for the designs of chips realizing distributed computation has been
introduced [2]. The recent popularity of this approach can be attributed to a
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 427–435, 2008.
c Springer-Verlag Berlin Heidelberg 2008

428

P. Dziurzanski and T. Maka

lower number of conﬂicts in a chip with a large number of cores. It is reported
that NoC architectures oﬀer high bandwidth and good concurrent communication capability, but they require additional mechanisms to overcome problems
typical for packet switching communication, such as packet deadlock or starvation, but the techniques known for traditional computer networks have to be
altered before applying to on-chip networks [6]. A mesh is one of the most often used on-chip network topologies owing to its regularity and reliability due
to the existence of many redundant interconnections between nodes. In NoCs,
each mesh node is comprised of the IP core realizing a particular stage of the
algorithm and a router which is typically connected to four neighboring nodes.
A typical NoC implementation utilizes packet switching approach that is
called wormhole routing [5]. In this technique, each packet is split into smaller
units of equal length, ﬂits (ﬂow control units). Usually, the ﬁrst ﬂits contain
some routing information, such as the destination address. Having obtained the
routing information, a wormhole router selects the next-hop router and establishes the path to that neighboring router. This path can be used exclusively for
transferring the current package ﬂit by ﬂit as long as the whole package has not
been transferred. The next-hop router typically does not store the whole package in its buﬀers, but tries to establish a connection with another router being
selected for the transfer. If another package is to be sent through the connection
already used for transferring a package, its transfer is deferred as long as all ﬂits
of the previous package has not been sent. This situation is known as contention
and may result in signiﬁcant decreasing of eﬃciency. Contentions are especially
likely to be observed in various data-intensive applications, where large streams
of data are transferred in every second. This may result in violating the real-time
constraints and thus making an MPSoC designing in this way inappropriate for
the task.
The most popular routing algorithm used in NoCs, named XY, can be also
viewed as inappropriate for switching large streams of information. According
to this algorithm, a ﬂit is ﬁrstly routed according to the X axis as long as the
X coordinate is not equal to the X coordinate of the destination core, and then
the ﬂit is routed vertically. Despite being deadlock-free [5], this algorithm is not
adaptive and thus is not equipped with mechanism for decreasing the contention
level.
Taking into consideration the above mentioned facts, it follows that in order to
design a NoC-based MPSoC for multimedia streaming applications it is necessary
to (i) propose a routing algorithm that is more suitable to this task that the
traditional XY algorithm and (ii) to propose a mapping scheme of IP cores into
mesh nodes that decreases the contention level.

2

Proposed Design Flow

The ﬁrst stage of the proposed approach is to construct a ﬂow network for a given
stream-based algorithm. The processing blocks of the algorithm are identiﬁed
and the transfers between them are computed. We describe all transfers in a

Heuristics Core Mapping in On-Chip Networks

429

Table 1. Transfers table for H.264 decoder
Source Destination Transfer [bps]
1
2
11744051
2
3
503316480
3
4
503316480
4
5
788529152
5
8
788529152
1
5
360710144
1
6
37748736
6
4
11744051
1
7
251658240
7
4
1560281088
8
7
2348810240

so-called transfer table. An example of the transfer table for the H.264 decoder
is presented in Table 1. The numbers in the Source and Destination columns
represent indices of the nodes in the ﬂow network.
Then, we have to determine the mapping of the cores into the mesh structure
leading to the improved performance of the NoC structure.
The impact of the mapping on the ﬁnal implementation properties is very
signiﬁcant in case of the traditional wormhole XY routing approach. For the
example of MPEG-4 decoder [9], the diﬀerence between the required capacity
and the best and the worst mappings is about 203.04 per cent.
For example, the XY algorithm applied to the H.264 video decoder [8] for core
permutation 0-2-3, 7-8-4, 1-6-5 in the ﬁrst, second, and the third row, respectively, leads to the transfers presented in Fig. 1.
In this situation, the maximal transfer between adjacent cores is relatively
high being equal to 2240 Mbit/s. It means that in every second such amount of
data is to be transferred between cores 8 and 7, so that the NoC infrastructure

Fig. 1. Transfers between cores for the H.264 decoder, XY routing algorithm (in
Mbit/s)

430

P. Dziurzanski and T. Maka

has to oﬀer capacities large enough to cope with this transfer. Assuming the most
popular regular NoC mesh architecture, all the links have to have equal capacities, so all of them have to be capable of transferring 2240 Mbit/s. However, the
majority of the remaining links are utilized in small percentage of this maximal
value. It may be expressed with the standard deviation value, which is equal to
about 598.36 Mbit/s. Thus, we assumed that the standard deviation express the
transfer balancing level. The smaller is the standard deviation, the transfers are
closer to each other. Moreover, only 13 links out of 24 are utilized, which results
in unbalanced transfers and poor utilization of the available resources.
This is our main motivation to introduce a routing scheme we named tapeworm
routing. An eﬃciency of this routing algorithm depends on a structure of cores
and their connections to each other, which is deﬁned with a mapping of the ﬂow
network nodes functionality into NoC cores.
Having selected an appropriate mapping, it is important to balance transfers
between each path in a NoC structure. Our mapping algorithms need on its input a
complete list of data transfers in the network ﬂow built at the previous stage. The
proposed technique takes advantage of the well-known Ford-Fulkerson method for
determining maximal throughput of the network between a set of cores.
The example of the three successive steps of the tapeworm algorithm is presented in Fig. 2. In this ﬁgure, the numbers written above links mean a ﬂow and
a remaining available capacity. The data length to be sent between cores S and
D is equal to 70 bits. At the ﬁrst stage, 30 bits of the link between routers 2
and 3 have been already allocated. As the available capacity between routers 1
and 2 (i.e., the link selected by the XY rule) is only 50 bits, 50 bits are sent by
this link, and the remaining 20 bits are sent by the alternative route to the 4th
router. In router 2, the package is further segmented: 20 bits follow the path to
the router 3, whereas 30 bits are sent to router 5. Thus, the total data length
sent between routers 5 and 6 is equal to 50 bits.
A few algorithms for heuristic core mapping into a NoC structure are provided
in the following section.

3

On-Chip Cores Mapping Heuristics

In order to determine the appropriate cores mapping into NoC nodes, i.e., the
mapping leading to the minimal value of transfers between cores while using
the tapeworm algorithm, it is possible to use an exact algorithm. However, its
application is reasonable to the size of the NoC mesh lower than 4x4 cores due
to its immense computational complexity O(n! · n2 ), where n is the number
of cores. For larger n, however, it is possible to use heuristic algorithms that
do not signiﬁcant worsen the ﬁnal result, as it is shown in the sequel of this
paper. Below, we propose three heuristics that according to experimental results
(presented in Section 4), lead to results close to the exact approach.
We start our algorithm with a generating of a population of random core
permutations to be mapped into the NoC structure. Then, we execute one of the
provided below heuristics (Fig. 3-5) for every permutation a number of times.

Heuristics Core Mapping in On-Chip Networks

(a)

(b)

431

(c)

Fig. 2. Successive steps of the tapeworm algorithm

1.
2.
3.
4.
5.
6.
7.

src ← select randomly a core c1
do
nDir ← random direction (Left, Right, Up, Down)
while (move toward nDir direction is possible)
dest ← select the adjacent core of c1 , c2 , in the nDir direction
if(the exchange between src and dest cores decreases the total transfer)
swap (c1 , c2 )
Fig. 3. Pseudo-code of heuristics 1 for cores mapping

1.
2.
3.
4.
5.
6.
7.

select randomly an item from NoC transfers table between src and dest
do
nDir ← random direction (Left, Right, Up, Down)
while (move dest toward nDir direction is possible)
dest ← select the adjacent core of dest in the nDir direction
if(the exchange between src and dest cores decreases the total transfer)
swap (src, dest)
Fig. 4. Pseudo-code of heuristics 2 for cores mapping

1. select randomly an item from NoC transfers table between src and dest
2. d0 ← calculate Manhattan distance between scr and dest cores
4. (d1 , d2 , d3 , d4 ) ← calculate Manhattan distance
between src and all neighbors of dest
5. if(min(d0 , d1 , d2 , d3 , d4 ) = d0 )
6. nmin ← neighbor with the lowest distance
7. swap (dest, nmin )
Fig. 5. Pseudo-code of heuristics 3 for cores mapping

We decided to terminate when a maximum number of generations has been
produced, or the obtained transfers do not decrease for a speciﬁc number of
steps. As we tested our approach for multimedia applications split into relatively
low number of cores (9), we could compare the obtained results with the exact
solutions.

432

P. Dziurzanski and T. Maka

In the ﬁrst heuristics (Fig. 3), we select randomly two neighboring cores, and
then compute total number of bits transmitted in a second for two cases: (i) for
the existing core mapping (ii) and the one obtained after the exchange of the
two selected cores. If the latter approach is characterized with a lower transfer,
the exchange is performed.
In the second approach (Fig. 4), we select randomly a single transfer from the
transfer table of the algorithm to be mapped. Next, the direction from the set
{left, right, up, down} is selected, and a new mapping, when the destination core
is exchanged with the core situated directly on the selected side is performed.
Similarly to the previous heuristic, both total transfers before and after the
exchange are computed and if the core with the second one is lower, the exchange
is carried out.
In the third heuristics (Fig. 5), we also select a single transfer from the transfer
table. Then, we calculate the Manhattan distance between the source and the
destination cores of the selected transfer. The Manhattan distances between the
source and all the neighbors of the destination core are also computed and, if the
distance is lower for any of the neighbors, it is exchanged with the destination
core. In case when more than one neighbor is characterized with a lower distance,
the lowest of them is chosen. It is worth stressing that in the case of this approach
there is no need of computing the total transfer in the NoC, which is time-saving
as presented in the next section.

4

Experimental Results

In order to verify the above provided approach, we have chosen the MPEG-4,
and H.264 decoders and decided to execute all the heuristic described in the
previous section for determining the permutation mapping that is characterized
with the lowest total transfer in the NoC realization.
For the selected decoders, we have built ﬂow networks and determined the
amount of data transmitted between their nodes in every second. We executed
an implementation of the proposed approaches 2000 times and concluded that
in every case a local minimum has been found at a relatively early iteration (the
solution was the same as obtained with the exact algorithm). For the two ﬁrst
approaches, the local minimum has been found no later than in 367th iteration,
whereas for the 3rd approach it was no later than 1684th iteration. However, the
vast majority of the found local minima has been found much earlier, what is
Table 2. Comparison of the mean transfers and standard deviations obtained with the
proposed approaches (in Mbit/s)
Approach 1
Approach 2
Approach 3
Algorithm Mean StdDev Mean StdDev Mean StdDev
MPEG-4 1734.74 9.03 1734.63
9.1
1726.75 1.96
H.264
828.32
2.79
828.39
2.64
829.21
2.64

Heuristics Core Mapping in On-Chip Networks

433

700
approach 1
approach 2
approach 3

600

number of minima

500

400

300

200

100

0

0

100

200

300

400

500

iterations

Fig. 6. Minima histogram for H.264

1000
900

approach 1
approach 2
approach 3

800

number of minima

700
600
500
400
300
200
100
0

0

100

200

300

400
iterations

500

600

700

Fig. 7. Minima histogram for MPEG-4

depicted by histograms presented in Fig. 6 and Fig. 7 for H.264 and MPEG-4,
respectively. Only few instances has been found in further iterations than 300.
In Tab. 2, we have presented average transfers and standard deviations for a
set of 1000 algorithm executions. All three approaches resulted in values close

434

P. Dziurzanski and T. Maka

to the minimum. For H.264 (MPEG-4), we obtained the global minimum for
59.55, 54.9, and 26.7 (47.15, 48.4, and 96.85) per cent of cases for the ﬁrst,
second, and the third approach, respectively.
In the two ﬁrst approaches, it is important to stress that for each iteration one
has to determine the total transfer for a number of times. We have measured
that for 200 iterations the transfer is to be determined 60100 times. As our
tapeworm routing runs for 8.224 seconds in average (Intel Pentium 4 CPU 3
GHz, 1GB RAM memory), the running time for the two ﬁrst approaches is less
than 6 days. On the other hand, the third approach produces results in 0.5s.
Although the ﬁrst time seems huge, especially in a comparison with the second
one, it is still much less, the exact algorithm is practically unacceptable for even
4x4 cores (a few million years of computation). The execution time of the ﬁrst
two approaches depends only polynomially on the size of the mesh.

5

Conclusion

We described our approach for implementing data-intensive streaming multimedia applications in Network on Chip based on the mesh topology. We focused
on two phases: mapping of algorithm stages into the target NoC’s nodes and
developing a new multi-path routing algorithm. Both our proposals beneﬁt from
the static streams of data transferred between IP cores being known at the design stage. We provided three heuristic mapping algorithms and compared them
with the exact solutions. The provided experimental results, based on two reallife multimedia decoder examples, showed that in majority of cases our heuristics
give results equal to the exact solution at relatively early iterations.
The computational complexity of the proposed heuristics is polynomial with
respect to the number of cores, whereas the complexity of the exact solution is
intractable as being estimated with O(n! · n2 ), where n is the number of IP cores
to be mapped. Consequently, the proposed technique allows us to practically
solve the problem of mapping a streaming multimedia application into a NoCbased MPSoC in a reasonable time so that the data transfers between IP cores
are balanced and close to the global minimum.

References
1. Bjerregaard, T., Mahadevan, S.: A Survey of Research and Practices of Networkon-Chip. ACM Computing Surveys (CSUR) 38, Article 1 (2006)
2. Dally, W.J., Towels, B.: Route Packets, Not Wires: On-Chip Interconnection Networks. In: 38th ACM IEEE Design Automation Conference (DAC), pp. 684–689
(2001)
3. Kavaldjiev, N., et al.: Routing of guaranteed throughput traﬃc in a network-on-chip.
Technical Report TR-CTIT-05-42 Centre for Telematics and Information Technology, University of Twente, Enschede (2005)
4. Lee, H.G., Chang, N., Ogras, U.Y., Marculescu, R.: On-chip communication architecture exploration: A quantitative evaluation of point-to-point, bus, and networkon-chip approaches. ACM Transactions on Design Automation of Electronic Systems 12(3), article no. 23 (2007)

Heuristics Core Mapping in On-Chip Networks

435

5. Li, M., Zeng, Q.A., Jone, W.B.: DyXY: a proximity congestion-aware deadlockfree dynamic routing method for network on chip. In: 43rd ACM IEEE Design
Automation Conference (DAC), pp. 849–852 (2006)
6. Ogras, U.Y., Marculescu, R.: Prediction-based Flow Control for Network-on-Chip
Traﬃc. In: 43rd ACM IEEE Design Automation Conference (DAC), pp. 839–844
(2006)
7. Smit, G.J.M., et al.: Eﬃcient Architectures for Streaming DSP Applications, Dynamically Reconﬁgurable Architectures. Internationales Begegnungs- und
Forschungszentrum fuer Informatik (IBFI), Schloss Dagstuhl, Germany (2006)
8. van der Tol, E.B., Jaspers, E.G.T., Gelderblom, R.H.: Mapping of H.264 decoding on
a multiprocessor architecture. In: Image and Video Communications and Processing,
Santa Clara, CA, USA, vol. 5022, pp. 707–718 (January 2003)
9. van der Tol, E.B., Jaspers, E.G.T.: Mapping of MPEG-4 Decoding on a Flexible
Architecture Platform. In: Media Processors 2002, San Jose, CA, USA, vol. 4674,
pp. 362–363 (January 2002)

