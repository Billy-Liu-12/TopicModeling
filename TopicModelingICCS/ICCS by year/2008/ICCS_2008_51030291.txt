Modeling Input Space for Testing Scientific
Computational Software: A Case Study
Sergiy A. Vilkomir1, W. Thomas Swain1, Jesse H. Poore1, and Kevin T. Clarno2
1

Software Quality Research Laboratory,
Department of Electrical Engineering and Computer Science, University of Tennessee,
Knoxville, TN 37996, USA
{vilkomir,swain,poore}@eecs.utk.edu
2
Reactor Analysis Group, Nuclear Science and Technology Division,
Oak Ridge National Laboratory, Oak Ridge, TN 37923, USA
clarnokt@ornl.gov
Abstract. An application of a method of test case generation for scientific
computational software is presented. NEWTRNX, neutron transport software
being developed at Oak Ridge National Laboratory, is treated as a case study. A
model of dependencies between input parameters of NEWTRNX is created.
Results of NEWTRNX model analysis and test case generation are evaluated.

1 Introduction
Testing scientific computational software has been the subject of research for many
years (see, for example, [3, 4, 6, 7]). Because of the increase in size and complexity of
such software, automation of scientific software testing is very important. A part of
this task is test case selection from a large input space.
For test automation, model-based approaches are most effective. In particular, we use
Markov chain models to support automated statistical testing [13, 14]. The method and
tools were initially applied to systems where sequences of discrete stimuli cause software
responses and changes in the state of use. However, the behavior of computational
software is more typically a function of a large multi-parameter static input space rather
than sequences of discrete stimuli. Often all input parameters are entered as a batch, and
then the software computes results with no further interaction with users.
Although other testing methods (combinatorial testing [2, 5], etc.) are applicable to
this problem, they are not as directly supportive of automated testing as the method
based on directed graphs and Markov chains. We considered this problem in [12]
where a method based on dependency relations encoded into Markov chain models
was described. When mutual dependencies limit the set of valid input combinations,
the method captures only the valid combinations. In this paper, we consider an
application of this method to scientific software1. The case study is NEWTRNX [1] – a
neutron transport simulation developed at Oak Ridge National Laboratory (ORNL)2.
1

This research is supported by the University of Tennessee Computational Science Initiative in
collaboration with the Computing and Computational Sciences Directorate of Oak Ridge
National Laboratory.
2
Research sponsored by the Laboratory Directed Research and Development Program of Oak
Ridge National Laboratory (ORNL), managed by UT-Battelle, LLC for the U. S. Department
of Energy under Contract No. DE-AC05-00OR22725.
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 291–300, 2008.
© Springer-Verlag Berlin Heidelberg 2008

292

S.A. Vilkomir et al.

For NEWTRNX, as in most multiphysics simulations, the large number of input
parameters and values makes manually selecting an arguably sufficient set of test
cases very challenging. As a first step towards test automation, a model of
dependencies among NEWTRNX input parameters is created. Then special tools can
be used to generate test cases automatically from the model. In our test automation,
we used JUMBL [10] – the J Usage Model Builder Library developed in the Software
Quality Research Laboratory (SQRL) at the University of Tennessee.
Sec. 2 presents a brief review of the method for modeling the input space. In Sec. 3,
we describe the neutron transport software in very general terms. In Sec. 4, we apply
our method to this specific case to create a model of dependencies among NEWTRNX
input parameters. Sec. 5 contains results of model analysis and test case generation for
the model from Sec. 4, using the JUMBL. Conclusions are discussed in Sect. 6.

2 Modeling Input Space for Software Test Case Generation
Modeling an input space for the purpose of test case generation was presented in [11]
for independent input parameters and in [12] for the situations when dependencies
between input parameters exist. The basis of the method is representation of the input
space as a directed graph, where nodes represent input parameters and incoming arcs
represent specific values of the parameters. Any path through the graph (a sequence
of arcs) corresponds to a test case, so the graph can be used as a model for test case
generation.
From a usage point of view, there is some probability (relative frequency) that the
parameter will have a particular value. We associate these probabilities with
corresponding arcs of the graph, creating a probability distribution over the exit arcs
of each node. This creates a model which satisfies the probability law of Markov
chains, allowing analysis of the testing process via well-known mathematical
techniques and software.
Input space modeling can be illustrated with the following small example.
Consider a system with three input parameters i1, i2, and i3, which can take the
following values:
- i1∈{1, 2, 7, 9}
- i2∈{2, 5, 8}
- i3∈{3, 6, 9}
If these parameters are independent, then all combinations are possible. One model of
the input space for this situation is shown in Fig. 1.
1

2

3

2
Enter

7
9

i1

5
8

i2

6

i3

9

Fig. 1. Model for independent parameters

Exit

Modeling Input Space for Testing Scientific Computational Software: A Case Study

293

When dependencies among parameters exist, we modify the model by splitting
nodes and merging nodes [12]. Splitting nodes is used for a dependency between two
parameters. For example, consider the following dependency between i2 and i3: P1(i2)
⇒ i3=6, where P1(i2) is the characteristic predicate for set {2, 8}. In other words, if i2
takes value 2 or value 8, then i3 shall take only the value 6. To encode this
dependency, we split i2 node into to nodes: (i2, P1) and (i2, P2), as shown in Fig. 2,
where P2 is the characteristic predicate for set {5}. The model in Fig. 2 now satisfies
the Markov probability law. The model can then be analyzed as a Markov chain and
used for test case generation.

i2 , P 1

2

1
2
Enter

i1

7

3

8

6

5

9

6

i2 , P 2

i3

Exit

9

Fig. 2. Model of dependency between i2 and i3

Merging nodes is used for dependencies among several parameters. For example,
suppose the pair (i2, i3) is dependent on i1:
- P3(i1) ⇒ (i2, i3)∈{(5, 9), (8, 3), (8, 9)}, where P3(i1) is the characteristic predicate
for set {2, 9}.
- P4(i1) ⇒ (i2, i3)∈{(2, 3), (2, 6), (2, 9), (5, 3), (5, 6), (8, 6)}, where P4(i1) is the
characteristic predicate for set {1, 7}.
This dependency can be modeled in three steps (Fig. 3):
- Creating a new derived parameter (i2, i3) by merging parameters i2 and i3,
- Splitting parameter i1 according to predicates P3 and P4,
- Establishing arcs between i1 and (i2, i3) based on the possible values of (i2, i3).

2

i1 , P 3

(8,3)
(8,9)

9
Enter

(5,9)

(2,3)

1

(i 2, i3)

Exit

(2,6)
(2,9)

7
i1 , P 4

(5,3)
(5,6)
(8,6)

Fig. 3. Model of the dependency between i1 and (i2, i3)

294

S.A. Vilkomir et al.

Detailed information about this method, including the application of the method to
different types of dependencies, results of test case generation, and more examples
can be found in [12]. The purpose of the current paper is to apply this approach to an
existing computational science software application.

3 A Case Study: Neutron Transport Software (NEWTRNX)
The NEWTRNX transport solver [1] was developed at ORNL to provide proof-ofprinciple software for high-fidelity modeling of nuclear fission energy systems. The
primary function of the solver is to provide the heat generation distribution of
neutrons.
Realistic nuclear reactor simulation is important because it requires an accurate
understanding of the interactions of multi-scale, multi-physics phenomena through
complex models that may only be tractable with leadership-class computing facilities.
The distribution of neutrons within the nuclear vessel is described by the sevendimensional isotropic source-driven or forward eigenvalue neutral-particle Boltzmann
transport equation (equations 1-3) [8], where the fundamental unknown, ψ , is the
time-dependent space-velocity distribution of neutrons in the system.

⎧
⎪
1 ∂ψ
1 ⎪
+ Ω • ∇ψ + σ t ψ =
⎨
4π ⎪ ∞
v ∂t
dE ′
⎪⎩ ∫0

∞

∫

p

s

0

p =0

P

p

∑σ ∑ φ
p

s

p =0

p

P

∑σ ∑ φ

dE ′

pq

Ypq + Q

q=− p

∞

pq

Ypq +

q=− p

⎡ 1 ⎤ dE ′ σ φ 00
f
⎢⎣ k ⎥⎦ ∫
0

⎫

isotropic ⎪

⎪ (1)
⎬
forward ⎪
⎪⎭

4π

φ

=

pq

∫ d Ω′ ψ ( r , E ′, Ω′, t ) Y ( Ω′ )
*

pq

(2)

0

r = space ( x, y , z )

( E , Ω ) = velocity ( energy of the neutron, direction of travel )
ψ ( r , E , Ω, t ) = " angular flux "
φ ( r , E ′, t ) = pq angular moment of the " angular flux "
σ ( r , E , t ) = total cross section
σ ( r , E ′ → E , t ) = p harmonic moment of the scattering cross section
σ ( r , E ′ → E , t ) = energy distribution of fission cross section
Y ( Ω ) = pq spherical harmonic moment
pq

th

t

p

th

s

f

th

pq

v ( E ) = speed of the neutron

(

)

Q r , E , Ω, t = external source of neutrons
k = largest eigenvalue ( real and positive )

(3)

Modeling Input Space for Testing Scientific Computational Software: A Case Study

295

Solving for the space-velocity distribution for even simple geometries requires a
large number of degrees of freedom (dof) for an accurate solution (traditionally 109
dof per time-step for small single-processor calculations). To solve the equation, the
direction of neutron travel is discretized into a set of uncoupled discrete-ordinate
directions for a given neutron energy. Similarly, the energy (speed) of the neutron
utilizes a piecewise-constant (“multigroup”) discretization. This leads to a multi-level
iterative solver where “outer” iterations solve for the coupling of the energy terms for
all space and angular moments and “inner” iterations solve for the coupling of all
directions for a given energy “group” [8].
There are various methods to solve the inner and outer iterations, as well as
possible communications strategies. Many of these options are dependent on other
options. For example, there are many ways to choose the discrete-ordinate directions,
such as a 3d level-symmetric or a 2d/1d product quadrature set [8]. The type of
quadrature set and number of directions constrain the number of angular moments
that can be accurately computed. This leads to a large and inter-dependent input
space that must be regularly tested for robustness and accuracy. This testing task
necessitates automation.

4 Modeling Dependencies Among Input Parameters of
NEWTRNX
One important aspect of NEWTRNX is the ability to specify different problem
definitions and various mathematical methods for solving each defined problem. It
allows the user to choose various input options by setting values of the following
input parameters:
- mode - type of the problem (isotropic or forward)
- nSpherical - number of harmonics moments used to represent the
anisotropic scattering source
- quadrature - type of quadrature set utilized (level-symmetric or product)
- nSn - level-symmetric quadrature set order (even numbers)
- nAziProd - azimuthal (2d) portion of the product quadrature set
- npolar - polar (1d) portion of the product quadrature set (3d is the product of
nAziProd and npolar)
The parameters mode and nSpherical can be assigned their values
independently, but there are dependencies between quadrature and other
parameters:
- If quadrature equals symmetric, then parameter nSn is used and
nAziProd and npolar are not used.
- If quadrature equals product, then parameters npolar and nAziProd
are used but nSn is not used.
To reflect this dependency, we split parameter quadrature into two nodes, as
described in Sec. 3.1. The structure of the dependency is presented in Fig. 4 (values of
the parameters are not shown).

296

S.A. Vilkomir et al.

quadrature
=symmetric

nSn

nSpherical

Exit

quadrature
=product

npolar

nAziProd

Fig. 4. Structure of the dependency among quadrature and nSn, nAziProd, npolar
The dependency among nSpherical, nSn, nAziProd, and npolar is shown in Table 1.
The left column contains all possible values of nSpherical, and the other columns contain
corresponding values of nSn, nAziProd, and npolar for every value of nSpherical.
Table 1. Dependency among nSpherical and nSn, nAziProd and npolar
nSpherical
{0, 1}
{2}
{3}
{4}
{5}

nSn

nSpherical

{2, 4, 6, 8, 10, 12,
14, 16}
{6, 8, 10, 12, 14, 16}
{10, 12, 14, 16}
{14, 16}
-

{0, 1}
{2, 3}
{4, 5}

npolar

nAziProd

{1, 2, 3,
4, 5, 6}
{2, 3, 4,
5, 6}
{3, 4, 5,
6}

{1, 2, 3, 4,
5,…, 12}
{2, 3, 4,
5,…, 12}
{3, 4, 5,…,
12}

Five different groups of values of nSpherical correspond to only four groups of
values of nSn and to three groups of values of nAziProd and npolar. To reflect
this, we split the node for nSpherical into five different nodes (Fig. 5). Then for
each of these five nodes, we reflect the dependency on quadrature by splitting the
node for quadrature into two nodes.
The model in Fig. 5 shows all dependencies between pairs of NEWTRNX input
parameters and can be used for test case generation. Note that the model contains only
necessary states (five for nSpherical, four for nSn, and three for nAziProd and
npolar).

5 Test Case Generation for NEWTRNX
The model in Fig. 5 is a Markov chain model of valid input parameter combinations.
We use the JUMBL [10] for the following tasks:
- Analysis of the Markov chain model.
- Test case generation based on the model.

Modeling Input Space for Testing Scientific Computational Software: A Case Study

297

To define a model for input to the JUMBL, the model is described in The Model
Language (TML [9]). First the JUMBL is used to check logical consistency of the
model and then to produce a model analysis report. General information includes
numbers of nodes, arcs, stimuli, etc., as shown in Fig. 6 for the NEWTRNX model.
Detailed information includes long run model statistics for nodes, arcs, and stimuli.
Of particular interest are statistics for stimuli (Fig. 7) because they directly describe
the long run use of different input values represented by the model.
Here “occupancy” is the number of occurrences of a given value (stimulus) divided
by the total number of stimuli occurrences. “Mean occurrence” is the average number
of times the specific value occurs in a single test case.
“2”, 0.02
quadrature
=symmetric
-A

nSpherical
=0; =1

“symmetric”,
0.25

“product” ,
0.75

“4”, 0.04
“6”, 0.08
“8”, 0.2
“10”, 0.4
“12”, 0.2
“14”, 0.02
“16”, 0.04

“1”, 0.1
“2”, 0.25
“3”, 0.35

quadrature
=product -A “4”, 0.15

npolar -A

“5”, 0.1
“6”, 0.05

“0”, 0.3

“1”, 0.3
quadrature
=symmetric
-B
“symmetric”,
0.25

nSpherical
=2

“6”, 0.1
“8”, 0.2
“10”, 0.4
“12”, 0.2
“14”, 0.04
“16”, 0.06

“product” ,
0.75
“2”, 0.3

“3”, 0.4
quadrature
=product -B “4”, 0.15

“2”, 0.05

npolar -B

“5”, 0.1
“product” ,
0.75

“6”, 0.05

“forward” , 0.9
Enter

nSn-A

“1”, 0.05
“2”, 0.1
“3”, 0.3
“4”, 0.05
“5”, 0.03
“6”, 0.3
“7”, 0.005
“8”, 0.005
“9”, 0.1
“10”, 0.005
“11”, 0.005
“12”, 0.05

nAziProd-A

nSn-B

“2”, 0.1
“3”, 0.3
“4”, 0.06
“5”, 0.04
“6”, 0.3
“7”, 0.01
“8”, 0.01
“9”, 0.1
“10”, 0.01
“11”, 0.01
“12”, 0.06

nAziProd-B

“10”, 0.6
mode

quadrature
=symmetric
-D

“3”, 0.2 nSpherical
=3

“isotropic” , 0.1
“4”, 0.01

“12”, 0.3
“14”, 0.04

“symmetric”,
0.25

Exit

“14”, 0.4
quadrature
=symmetric
-C

“5”, 0.14

nSn-D

“16”, 0.06

“16”, 0.6

nSpherical “symmetric”,
=4
0.25
“product” ,
“3”, 0.55
0.75
“4”, 0.2
quadrature
=product -C “5”, 0.15
“6”, 0.1
“product” ,
1.0
nSpherical
=5

npolar -C

nSn-C

“3”, 0.32
“4”, 0.07
“5”, 0.05
“6”, 0.32
“7”, 0.015
“8”, 0.015
“9”, 0.11
“10”, 0.015
“11”, 0.015
“12”, 0.07

nAziProd-C

Fig. 5. Dependencies between input parameters of NEWTRNX

298

S.A. Vilkomir et al.

Fig. 6. NEWTRNX model statistics (fragment from JUMBL output)

Fig. 7. NEWTRNX stimulus statistics (fragment from JUMBL output)
Table 2. NEWTRNX weighted test cases (fragment)
N

Probab
ility

mode

nSphe
rical

quadra
ture

nSn

npolar

nAziProd

1
2
3
4
5
6
7
8
9
10

0.027
0.027
0.027
0.022
0.022
0.021
0.021
0.021
0.021
0.016

forward
forward
forward
forward
forward
forward
forward
forward
forward
forward

3
0
1
5
5
0
0
1
1
3

symmetric
symmetric
symmetric
product
product
product
product
product
product
product

10
10
10
-

3
3
3
3
3
3
3

6
3
6
3
6
3
6

Various types of test cases can be generated from the model including model
coverage tests, random tests, and weighted tests. Coverage tests are generated as the
minimal set of test cases that cover every arc in the model. Thus, to cover all arcs in
the NEWTRNX model, 53 test cases were generated. Random test cases are generated
according to the probabilities on the arcs. Weighted test cases are those generated in
order of decreasing probability. For random and weighted tests, the number of test

Modeling Input Space for Testing Scientific Computational Software: A Case Study

299

cases can be specified. A separate file is created for every test case. The ten highest
probability test cases for the NEWTRNX model are shown in Table 2, with their
individual probabilities of occurrence. Statistics for the 53 coverage tests and the ten
most likely tests are provided in separate test analysis reports (Fig. 8).
Random test cases can be generated for reliability estimation. The "optimum"
reliability represented by a particular set of test cases can be computed prior to test
execution by assuming that all test cases will be successful. These values can be used
during test planning for estimation of the required number of test cases. When testing
is completed and the number of failures is known, operational reliability estimates are
included in a test analysis report.

Fig. 8. NEWTRNX model test case statistics (fragment from JUMBL output)

6 Conclusions
Specification of all valid test cases from a large input space can be a challenging task,
especially when there are dependencies among input parameters. We have presented a
method for solving this problem and demonstrated its practical application on the
neutron transport software tool NEWTRNX.
The selection of test cases is performed in two steps. First, a Markov chain model
of the input space is created, reflecting dependencies among input parameters.
Second, the JUMBL library of software tools is used for model analysis and test case
generation. Results for NEWTRNX test planning are provided. The case study shows
the applicability of model-based statistical testing for testing large scientific
computational software systems. The next phase of this effort will investigate
methods for automating both test execution and results checking.

References
1. Clarno, K., de Almeida, V., d’Azevedo, E., de Oliveira, C., Hamilton, S.: GNES-R: Global
Nuclear Energy Simulator for Reactors Task 1: High-Fidelity Neutron Transport. In:
Proceedings of PHYSOR–2006, American Nuclear Society Topical Meeting on Reactor
Physics: Advances in Nuclear Analysis and Simulation, Vancouver, Canada (2006)

300

S.A. Vilkomir et al.

2. Cohen, D.M., Dalal, S.R., Fredman, M.L., Patton, G.C.: The AETG system: An approach
to testing based on combinatorial design. IEEE Transactions on Software
Engineering 23(7), 437–444 (1997)
3. Cox, M.G., Harris, P.M.: Design and use of reference data sets for testing scientific
software. Analytica Chimica Acta 380(2), 339–351 (1999)
4. Einarsson, B. (ed.): Accuracy and Reliability in Scientific Computing. SIAM, Philadelphia
(2005)
5. Grindal, M., Offutt, J., Andler, S.F.: Combination testing strategies: A survey. Software
Testing, Verification, and Reliability 15(3), 167–199 (2005)
6. Hatton, L.: The T experiments: errors in scientific software. IEEE Computational Science
and Engineering 4(2), 27–38 (1997)
7. Howden, W.: Validation of scientific programs. Comput. Surv. 14(2), 193–227 (1982)
8. Lewis, E., Miller Jr., W.F.: Computational Methods of Neutron Transport. ANS (1993)
9. Prowell, S.: TML: A description language for Markov chain usage models. Information
and Software Technology 42(12), 835–844 (2000)
10. Prowell, S.: JUMBL: A Tool for Model-Based Statistical Testing. In: Proceedings of the
36th Annual Hawaii International Conference on System Sciences (HICSS 2003), Big
Island, HI, USA (2003)
11. Swain, W.T., Scott, S.L.: Model-Based Statistical Testing of a Cluster Utility. In:
Sunderam, V.S., van Albada, G.D., Sloot, P.M.A., Dongarra, J. (eds.) ICCS 2005. LNCS,
vol. 3514, pp. 443–450. Springer, Heidelberg (2005)
12. Vilkomir, S.A., Swain, W.T, Poore, J.H.: Combinatorial test case selection with
Markovian usage models. In: Proceedings of the 5th International Conference on
Information Technology: New Generations (ITNG 2008), Las Vegas, Nevada, USA (2008)
13. Walton, G., Poore, J.H., Trammell, C.: Statistical Testing of Software Based on a Usage
Model. Software: Practice and Experience 25(1), 97–108 (1995)
14. Whittaker, J., Poore, J.H.: Markov Analysis of Software Specifications. ACM Transactions
on Software Engineering and Methodology 2(1), 93–106 (1993)

