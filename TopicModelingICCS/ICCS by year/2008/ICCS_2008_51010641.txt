Domain Decomposition Techniques for Parallel
Generation of Tetrahedral Meshes
Barbara Glut and Tomasz Jurczyk
AGH University of Science and Technology, Krak´
ow, Poland
{glut,jurczyk}@agh.edu.pl

Abstract. We present solutions for dealing with the problem of parallel generation of unstructured meshes for 3D domains. The selected
approach is based on a geometric decomposition of the domain where
the input data is given in the form of a surface mesh. The diﬀerence between the two presented decomposition techniques lies in the step where
the actual partitioning takes place. In the ﬁrst method the partitioning
is obtained using solely the surface mesh while in the latter one a coarse
tetrahedral mesh is used. After the decomposition and creation of an
interface mesh (which is a surface mesh in both approaches) the ﬁnal
volume meshes are generated independently for each subdomain. The
interface mesh and the subdomain meshes are constructed using a Riemannian metric combined with a control space structure which allows to
generate meshes with varied density and anisotropy [1].
Keywords: Mesh Generation, Geometric Decomposition, Tetrahedral
Mesh, Anisotropic Metric.

1

Introduction

In the modern simulations of processes with the ﬁnite element method the increasingly more complicated models require very large number of elements in
order to achieve suﬃciently precise computations. Consequently, such computational tasks are often solved using a parallel approach. However, the parallelization of the solver does not solve the problem completely. The sequential
construction of meshes with a large number of elements poses some problems
as well – mainly with respect to the memory requirements. It should be noted
that the problem of a parallel mesh generation is considered much more diﬃcult
than the parallelization of the further computation step [2]. An eﬃcient parallel
algorithm requires an adequate load balancing for computational nodes while
minimizing the communication overhead between the processors.
The task of decomposing the domain for the subsequent mesh generation is
complicated due to the limited information available at the beginning of this
process (which usually includes only the geometric model description). At this
point it is usually diﬃcult to properly assess the time required to discretize the
subdomains of the created partitioning which is necessary to achieve the proper
M. Bubak et al. (Eds.): ICCS 2008, Part I, LNCS 5101, pp. 641–650, 2008.
c Springer-Verlag Berlin Heidelberg 2008

642

B. Glut and T. Jurczyk

load balancing. An additional complication is often introduced by an irregular
density and anisotropy of the mesh in some areas of the discretized model.1
In recent years much notice has been devoted to the problem of a parallel
mesh generation and a number of solutions have been proposed [3]. It seems that
the key to the successful parallelization of the mesh generation problem is the
proper partitioning of the domain into subdomains and a possibly independent
discretization of these subdomains. Depending on the method and the order of
an interface mesh generation three classes of methods can be identiﬁed [4]:
1. The a priori class includes methods which ﬁrst create meshes of the interfaces
and then, in parallel, the meshes for each subdomain are generated.
2. The a posteriori methods generate in parallel the meshes of the subdomains
ﬁrst. These meshes are then adjusted in a way which assures consistency of
the mesh within the whole domain.
3. The third class contains methods where the interface meshes and the subdomain meshes are generated concurrently.
There have been so far developed no methods which would solve this problem
in a satisfactory way for a wide class of 3D models. It is partly due to the fact
that even the sequential problem of the volume mesh generation for arbitrary
domains is diﬃcult enough. A number of diﬀerent techniques of mesh construction is utilized in various generators which makes it diﬃcult to choose the most
advantageous class of the parallelization methods for the given task. Additionally, the geometric complexity of the considered models is constantly increasing
which reduces the chances of ﬁnding a deﬁnite solution for this problem. However, due to the importance of this problem the heuristic solutions applicable in
a possibly wide family of models have to be sought.

2

Main Concept of the Proposed Techniques

Two approaches of decomposing the discretized domain into subdomains are
presented in the article. For both methods the input data are the boundary surface meshes. The diﬀerence between these methods is the selection of a moment
when the parallelization procedure is executed. Both methods can be categorized as the a priori class where the interface meshes are constructed ﬁrst and
then the mesh of each subdomain can be independently generated in parallel.
Such approach has a number of advantages. During the parallel generation of
the mesh the communication between the computational nodes is limited. The
volume mesh does not need to be stored in the memory of a single computational
node. The only data interchanged during the simulation phase is the information
about interface meshes which have to be compatible. Moreover, the sequential
mesh generator can be utilized without any modiﬁcations. This technique assures also keeping the initial surface mesh intact which can be beneﬁcial for the
computational process.
1

Such requirements concerning the shape and density of elements may result for
example from the computational aspects or the geometric features of the domain.

Domain Decomposition Techniques for Parallel Generation

643

The studies presented in this article are founded on the mesh generator developed by authors [1]. This generator constructs meshes using the information
gathered in the control space [5]. The concept of a Riemannian metric stored
within the adaptive control space structure has a substantial inﬂuence on the
proposed techniques of the mesh decomposition for a parallel generation. As a
consequence the developed methods can be successfully used in the problems
with a high local variation of the density and the anisotropy of the mesh which
are often found in the contemporary simulations with the adaptive solvers.

3

Method I: Decomposition of Surface Mesh (DSM)

The DSM technique (Fig. 1) [8] is based on the geometric decomposition of the
domain using the surface meshes only. The surface mesh is partitioned by cutting
it with separators which at this development stage are implemented as planes.
Then, the subdomains are being closed by generation of a proper surface mesh
on the separators. Finally, the volume mesh can be constructed independently
for each of these closed subdomains. The main steps for each closed subdomain:
1. Selection of the separator.
2. Localization of the intersection of the separator with the surface mesh and
determination of the cutting contours.
3. Generation of a surface mesh on the separator (Fig. 1(b)) which in case of a
planar separator requires:
– construction of a 2D control space taking into account various metric
sources,
– generation of a 2D mesh on the cutting plane,
– projection of the planar mesh to the 3D space.
4. Closing of the subdomains (Fig. 1(c)).
5. Generation of volume meshes in the subdomains (Fig. 1(d)).
The selection of a separator (with respect to both its shape and placement)
is crucial for the ﬁnal eﬀect of the domain decomposition as well as for the
course of the subsequent phases of the method. The selection of the separator
should assure a low cut size, a proper load balancing and a minimal number of
multiply connected interfaces. In the literature two main techniques are usually
proposed for the selection of the cutting plane: along the inertial axis [6] and
perpendicularly to the longest edge of the bounding cubicoid [7]. However, none
of these methods guarantee suﬃciently good results in a general case and this
problem is considered as a subject of further studies. In the presented examples
the authors applied cutting using the information about the bounding box.
The construction of an interface mesh requires ﬁrst the localization of cutting contours of the surface mesh and the separator. These contours are then
projected onto the separator plane. In order to generate the mesh of the cutting
plane, a special 2D control space is created. The metric in this case is associated
with the lengths of edges in the cutting contour calculated both in the threeand two-dimensional space. Any other available metric sources are also included.

644

B. Glut and T. Jurczyk

(a) surface mesh

(b) split

(c) closing
(cross-section)

(d) ﬁnal mesh
(cross-section)

Fig. 1. Subsequent steps of DSM (the cross-section visualization of a mesh is created
by removing a set of elements)

Using the created metric ﬁeld the 2D mesh is generated and projected to the
3D space. This technique was described in more detail in [8,9] where diﬀerent
problems respecting the placement of a separator were also considered.

4

Method II: Decomposition of Coarse Volume Mesh
(DCVM)

In the second method (Fig. 2) the coarse volume mesh is utilized to partition the
discretization domain. This coarse mesh is created as a result of a discretization
based on the boundary nodes only. In this technique the separators are purely
virtual and their purpose is to guide the mesh reﬁnement in the selected subdomain. The partitioning of the domains is achieved by separation of the mesh
along the reﬁned fragments of the mesh which also deﬁnes the boundaries of
closed subdomains. The meshes for the closed subdomains are generated independently as in the ﬁrst approach. In this method the cost of the sequential part
of the procedure increases but a more detailed information about the discretized
domain becomes available which might help to achieve a better decomposition.
The subsequent steps of this method:
1.
2.
3.
4.

Generation of a coarse 3D mesh (Fig. 2(a)).
Determination of the separator placement.
Reﬁnement of the mesh in the vicinity of the separator (Fig. 2(b)).
Separation of the subdomains and recognition of the interface surface
(Fig. 2(c)).
5. Reﬁnement of the volume meshes in the subdomains (Fig. 2(d)).
The coarse mesh based on the boundary nodes only is created with utilization
of a three-dimensional control space. The contents of this space is determined

Domain Decomposition Techniques for Parallel Generation

(a) coarse mesh
(cross-section)

(b) reﬁnement
(cross-section)

(c) split
(cross-section)

645

(d) ﬁnal mesh
(cross-section)

Fig. 2. Subsequent steps of DCVM

using the geometry of the model and any additional criteria which may be introduced by the user.
As in the DSM, the ﬁrst problem which has to be solved is determining the
placement of the virtual separator. The solutions proposed in the literature for
methods starting decomposition from coarse mesh are usually applying partitioning libraries (like METIS2 , CHACO3 , etc.) [10], neural networks or genetic
algorithms [11]. However, in order to better compare both presented methods
the selection of a separator is determined in this work similarly as in the DSM.
In the vicinity of the separator the control space (and the metric stored
therein) is modiﬁed in order to obtain a selective reﬁnement of the mesh in
the subsequent step of the procedure. This special control space CS3d
p used to
prepare the coarse mesh for partitioning is calculated using the main control
3d
space CS3d
m . The metric near the separator is copied directly from CSm and in
the other areas of the discretized domain the maximum metric is applied (with
an additional smoothing of the metric ﬁeld).
The mesh created with respect to CS3d
p is partitioned along the virtual separator which at this point is already properly reﬁned. The procedure of an actual
mesh partitioning starts with identiﬁcation of all faces incident to two tetrahedral blocks belonging to a diﬀerent partitions. In order to reduce the cut size
(i.e. the number of faces between the partitions) an additional operation of moving some mesh elements between the partitions is performed. Finally, the mesh
elements from diﬀerent partitions are divided into the separate meshes which
requires duplication of all mesh entities (vertices, edges and faces) forming the
interface mesh and some updating of the mesh interconnections (all these operations are local). The volume meshes in the subdomains can be then further
reﬁned independently and the discretization of each subdomain is guided by the
main control space CS3d
m.
2
3

http://glaros.dtc.umn.edu/gkhome/views/metis/
http://www.cs.sandia.gov/∼ bahendr/chaco.html

646

5

B. Glut and T. Jurczyk

Examples

Both proposed methods were inspected for various geometric models and discretizations of theirs surfaces. The test meshes are shown in Fig. 3.
The results of the mesh generation via domain decomposition (with one separator) using both described methods are shown in Fig. 4, 5, 6 and 7. Since the
article concentrates on the partitioning method itself, all test were computed on
a single machine.
Table 1 presents the numbers of elements in the volume meshes created using
diﬀerent approaches.
For both presented methods the summary number of tetrahedra is similar as
in the case of the sequential generation. The only signiﬁcant diﬀerence between
the methods is visible in the number of faces on the interface between the mesh
partitions.
In Table 2 there are gathered the running costs (for a single 3.2 GHz Intel P4
computer with 1 GB memory) of the subsequent steps of the mesh generation
process. Both tested methods allow to decrease the expected parallel meshing
time.4 The running times for the DCVM method are somewhat higher than
for the DSM method. In this case the increased time is mostly due to the cost
of the initial sequential step. The times of the volume mesh construction in
the partitioned subdomains using the second method (DCVM) are lower since
the coarse volume meshes for the subdomains are already available. Also the
boundary recovery cost is absent (since this procedure had been already run in
the earlier sequential part) which is most visible in the case of the mesh M3 (a
non-convex domain). The quality of meshes (Table 3) obtained using both the
ﬁrst and the second method is very similar and also close to the quality of the
meshes generated sequentially.

(a) M1

(b) M2

(c) M3

(d) M4

Fig. 3. Example meshes

4

The given summary time does not include the cost of transferring the partition
data between the computation nodes which may depend on the speciﬁc parallel
architecture.

Domain Decomposition Techniques for Parallel Generation

(a) DSM

647

(b) DCVM

Fig. 4. Decomposition of the mesh M1

(a) DSM

(b) DCVM

Fig. 5. Decomposition of the mesh M2

(a) DSM

(b) DCVM

Fig. 6. Decomposition of the mesh M3
Table 1. Number of elements (NFB [103 ] – number of boundary faces, NT [103 ] –
number of tetrahedra, NTi [103 ] – number of tetrahedra in ith partition, NFI – number
of faces on interface (cut size))

Mesh NFB
M1 4.1
M2 6.5
M3 7.9
M4 31.1

Sequential
NT
427.2
794.9
83.9
254.6

NT1
209.1
380.9
41.7
127.2

DSM
NT2 NT(1+2)
206.5
415.6
377.0
757.9
44.1
85.8
119.5
246.7

NFI
1566
2693
391
432

NT1
214.2
396.5
43.1
133.1

DCVM
NT2 NT(1+2)
227.4
441.6
432.0
828.6
43.2
86.3
127.7
260.8

NFI
3657
7152
654
1075

648

B. Glut and T. Jurczyk

(a) DSM

(b) DCVM

Fig. 7. Decomposition of the mesh M4 (only one of the created subdomains is shown)
Table 2. Generation time (ts [s] – sequential generation time, ti [s] – mesh generation
time for the ith subdomain, the summary parallel generation time tsum is estimated
as ts + max(ti ))

Mesh
M1
M2
M3
M4

Sequential
ts
42.1
80.0
9.6
25.1

ts
0.4
0.5
0.2
1.0

DSM
t1 t2
17.1 16.7
32.4 33.0
4.2 6.0
12.0 11.3

tsum
17.5
33.6
6.2
13.0

ts
14.0
27.1
6.0
10.4

DCVM
t1 t2
15.4 16.7
29.1 32.5
2.6 2.7
9.1 8.7

tsum
30.7
59.6
8.7
19.5

Table 3. Quality of the generated meshes (η M – average mean ratio of mesh elements
min – minimum mean ratio of mesh elements calculated
calculated in metric space, ηM
in metric space, μM – average length of mesh edges calculated in metric space [12])
Sequential
min μ
Mesh η M ηM
M
M1 0.882 0.167 1.037
M2 0.874 0.050 1.031
M3 0.858 0.035 1.034
M4 0.875 0.109 1.040

6

DSM
min
η M ηM
0.881 0.034
0.874 0.009
0.858 0.092
0.874 0.153

μM
1.018
1.008
1.025
1.027

DCVM
min μ
η M ηM
M
0.882 0.069 1.037
0.874 0.025 1.031
0.846 0.001 1.046
0.875 0.065 1.040

Conclusions

The DSM method based on the generation of a mesh on a separator surface
has the beneﬁt of a low cost of the sequential part and a small cut size (for a
given selection of a separator). However, this technique is sensitive to a proper
placement of a separator [8]. If the angle between the separator and the surface
mesh is too small (which can be diﬃcult to avoid for complex models) there may
arise problems with the correct projection of contour nodes onto the separator
surface. Moreover, the quality of the volume elements generated in such areas
may be unacceptably low.

Domain Decomposition Techniques for Parallel Generation

649

The second method (DCVM) overcomes this problem and the quality of the
generated mesh elements is unaﬀected by the selection of the (virtual) separator
placement. The separator type for this method can be also easily extended to a
non-planar surface. Moreover, due to the availability of the coarse volume mesh
during the partitioning phase the predicted number of elements in the ﬁnal
mesh for various areas of the discretized domain might be assessed with higher
accuracy. As a result better balancing of the decomposition balancing may be
achieved. Unfortunately, these beneﬁts are combined with an increased cost of
the sequential part of the algorithm and a higher cut size.

7

Further Research Directions

The computational and communication costs are diﬀerent for various computer
architectures. Because of this it is diﬃcult to select the proper parallelization
strategy applicable for diﬀerent architectures. From this point of view the approach where each subdomain becomes an individual object to discretize appears
to be advantageous. However, this thesis has to be tested and veriﬁed for a number of diﬀerent architecture conﬁgurations and tools.
The further studies are also required with respect to the localization of the
optimal placement and shape of the separator. This task is correlated with the
problem of assessment of the predicted number of volume elements in the ﬁnal mesh based only on the number of boundary elements. The authors were
inspecting a similar problem for a two-dimensional case [13]. A further studies
are however necessary for three-dimensional meshes where the prediction will
additionally utilize the information from the control space.
Acknowledgments. The partial support of the AGH Grant No. 11.11.120.777
is gratefully acknowledged.

References
1. Glut, B., Jurczyk, T., Kitowski, J.: Anisotropic Volume Mesh Generation Controlled by Adaptive Metric Space. In: AIP Conf. Proc. NUMIFORM 2007, Materials Processing and Design: Modeling, Simulation and Applications, Porto, Portugal, June 17-21, vol. 908, pp. 233–238 (2007)
2. Tu, T., Yu, H., Ramirez-Guzman, L., Bielak, J., Ghattas, O., Ma, K.-L.,
O’Hallaron, D.R.: From Mesh Generation to Scientiﬁc Visualization: An End-toEnd Approach to Parallel Supercomputing. In: Proc. of SC 2006, Tampa, FL (2006)
3. Chrisochoides, N.: A survey of parallel mesh generation methods,
http://www.cs.wm.edu/∼ nikos/pmesh survey.pdf
4. Cougny, H.L., Shepard, M.S.: Parallel volume meshing face removals and hierarchical repartitioning. Comput. Methods Appl. Mech. Engrg. 174, 275–298 (1999)
5. Jurczyk, T., Glut, B.: Adaptive Control Space Structure for Anisotropic Mesh
Generation. In: Proc. of ECCOMAS CFD 2006 European Conference on Computational Fluid Dynamics, Egmond aan Zee, The Netherlands (2006)

650

B. Glut and T. Jurczyk

6. Ivanov, E., Andr¨
a, H., Kudryavtsev, A.N.: Domain decomposition approach for
automatic parallel generation of 3D unstructured grids. In: Proc. of ECCOMAS
CFD 2006 European Conference on Computational Fluid Dynamics, Egmond aan
Zee, The Netherlands (2006)
7. Larwood, B.G., Weatherill, N.P., Hassan, O., Morgan, K.: Domain decomposition approach for parallel unstructured mesh generation. Int. J.Numer. Meth. Engng. 58, 177–188 (2003)
8. Glut, B., Jurczyk, T., Breitkopf, P., Rassineux, A., Villon, P.: Geometry Decomposition Strategies for Parallel 3D Mesh Generation. In: Proc. of Int. Conf. on
Computer Methods and Systems CMS 2005, Krak´
ow, Poland, vol. 1, pp. 443–450
(2005)
9. Jurczyk, T., Glut, B., Breitkopf, P.: Parallel 3D Mesh Generation using Geometry Decomposition. In: AIP Conf. Proc. NUMIFORM 2007, Materials Processing
and Design: Modeling, Simulation and Applications, Porto, Portugal, June 17-21,
vol. 908, pp. 1579–1584 (2007)
10. Ito, Y., Shih, A.M., Erukala, A.K., Soni, B.K., Chernikov, A., Chrisochoides,
N.P., Nakahashi, K.: Parallel unstructured mesh generation by an advancing front
method. Mathematics and Computers in Simulation 75, 200–209 (2007)
11. Sziveri, J., Seale, C.F., Topping, B.H.V.: An enhanced parallel sub-domain generation method for mesh partitioning in parallel ﬁnite element analysis. Int. J. Numer.
Meth. Engng. 47, 1773–1800 (2000)
12. Jurczyk, T.: Eﬃcient Algorithms of Automatic Discretization of Non-Trivial
Three-Dimensional Geometries and its Object-Oriented Implementation. PhD
thesis, AGH University of Science and Technology, Krak´
ow, Poland (2007),
http://home.agh.edu.pl/jurczyk/papers/phd-jurczyk.pdf
13. Jurczyk, T., Glut, B.: Organization of the Mesh Structure. In: Bubak, M., van
Albada, G.D., Sloot, P.M.A., Dongarra, J. (eds.) ICCS 2004. LNCS, vol. 3037, pp.
646–649. Springer, Heidelberg (2004)

