Synthesis of the Supervising Agent in MAS
ˇ
Frantiˇsek Capkoviˇ
c
Institute of Informatics, Slovak Academy of Sciences
D´
ubravsk´
a cesta 9, 845 07 Bratislava, Slovak Republic
Frantisek.Capkovic@savba.sk
http://www.ui.sav.sk/home/capkovic/capkhome.htm

Abstract. The systematic approach to the synthesis of the agent-supervisor supervising a group of agents is presented. It is based on results of
the DES (discrete event systems) control theory. The agents as well as
the agent-supervisor are understood to be DES and they are modelled
by Petri nets (PN). The method based on PN place invariants is used in
order to synthetise the supervisor. The illustrative example is introduced
to explain the elementary steps of the proposed technique. A counterexample illustrating the limits of the approach is introduced too.
Keywords: Agent, invariants, MAS, modelling, Petri nets, supervisor.

1

Introduction

Agents are usually understood to be persistent (not only software, but also
material, personal, etc.) entities that can perceive, reason, and act in their
environment, and communicate with other agents. Hence, multiagent systems
(MAS) can be apprehended as a composition of collaborative agents working in
shared environment. The agents together perform a more complex functionality.
Communication enables the agents in MAS to exchange information. Thus, the
agents can coordinate their actions and cooperate with each other. However, an
important question arises here: What communication mechanisms enhance the
cooperation between communicating agents?
In this paper the synthesis of the supervising agent is presented. It utilizes
some results of the DES (discrete event systems) control theory, especially those
concerning the theory of place invariants [8,6] and the supervisor [9] and/or
controller synthesis based on this theory. Mathematical and/or graphical description of the agents as well as the global MAS will be delt on the background
of place/transition Petri nets (P/T PN) described e.g. in [8].
Consider two simple agents A1 , A2 representing, respectively, two processes
P1 , P2 given in Fig. 1a). While the resources used by the agents are suﬃcient,
the agents can work autonomously. However, when the resources are limited a
coordinated action is necessary. In such a case a supervisor or a controller is
necessary. The procedure of the mutex (mutual exclusion) frequently occurs in
Partially supported by the Slovak Grant Agency for Science (VEGA) under grant
# 2/6102/26.
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 545–554, 2008.
c Springer-Verlag Berlin Heidelberg 2008

546

ˇ
F. Capkoviˇ
c

diﬀerent systems when it is necessary to solve conﬂicts among parallelly operating subsystems. It is very frequent also in DES like ﬂexible manufacturing systems (e.g. a robot serves two transport belts), communication systems
(two users want to use the same channel), transport systems (two trains want
to enter the same segment of the railway), etc. The PN model of the simplest form of the mutex - the mutex of two processes - is given in Fig. 1b).
It is not very complicated to synthesize such a supervisor in this simple case.
Contrariwise, in case of more agents and more complicated conditions for co✲ ❤
r p1
❄

✲ r❤p3
❄

❄
❤
p2
❄

❄
❤
p4
❄

t1

r p1
✲ ❤
✲
❄
t1
❨
❍
✯
❍ p5✟✟✟
❄
❤p2 ❍ r❤
✯ ❍
✟
❨❍
❄
✟✟
❍

t3

t2
Process P1

t4
Process P2

t2
Process P1

a)

r❤p3
❄
t3

❄
❤
p4
❄

t4
Process P2

b)

Fig. 1. The PN-based model of the a) two simple processes and b) their mutex

operation among them, founding the supervisor is by far more intricated. Consider the group of 5 autonomous agents GrA = {A1 , A2 , A3 , A4 , A5 } given
in Fig.2. Consider e.g the situation when it is necessary to ensure that only
one agent from the subgroup Sgr1 = {A1 , A4 , A5 } and only one agent from
the subgroup Sgr2 = {A2 , A4 , A5 } and only one agent from the subgroup
Sgr3 = {A3 , A4 , A5 } can simultaneously cooperate with other agents from
GrA . In other words, the agents inside the designated subgroups must not work
simultaneously. Even, the agents A4 and A5 can work only individually (any
cooperation with other agents is excluded). However, the agents A1 , A2 , A3 can
work simultaneously. In such a situation the synthesis of the supervisor realizing
such a mutex (i.e. deciding which agents can simultaneously work and when) is
not so simple. Consequently, a systematic (orderly, not stray) approach has to
q p1
✲❢
❄
t1
❄
❢p2
❄

t2
Agent A1

q p3
✲❢
❄
t3
❄
❢p4
❄

t4
Agent A2

✲ q❢p5
❄
t5
❄
❢
p6
❄

t6
Agent A3

✲ q❢p7
❄
t7
❄
❢
p8
❄

t8
Agent A4

✲ q❢p9
❄
t9
❄
❢
p10
❄

t10
Agent A5

Fig. 2. The PN-based model of the group of 5 simple agents

be found. There exists the DES control synthesis method based on the PN place
invariants (P-invariants) in DES control theory [11,7,2,4]. Its principle can be
utilised for our purposes.

Synthesis of the Supervising Agent in MAS

2

547

The Supervisor Synthesis

Before starting the supervisor synthesis it is necessary to introduce the mathematical model of P/T PN. Namely, the ability to express the states of agents,
the ability to test properties by means of the PN invariants and the reachability
graph (RG) as well as the ability to synthesize the supervisory controllers by
means of the invariants and RG [3,5] utilizing linear algebra predestinate PN to
be frequently used. The model has the form as follows
xk+1 = xk + B.uk

,

B=G −F
F.uk ≤ xk
T

k = 0, N

(1)
(2)
(3)

where k is the discrete step of the dynamics development; xk = (σpk1 , ..., σpkn )T is
the n-dimensional state vector of DEDS in the step k; σpki ∈ {0, cpi }, i = 1, ..., n
express the states of the DEDS elementary subprocesses or operations - 0 (passivity) or 0 < σpi ≤ cpi (activity); cpi is the capacity of the DEDS subprocess pi
as to its activities; uk = (γtk1 , ..., γtkm )T is the m-dimensional control vector of the
system in the step k; its components γtkj ∈ {0, 1}, j = 1, ..., m represent occurring of the DEDS elementary discrete events (e.g. starting or ending the elementary subprocesses or their activities, failures, etc. - 1 (presence) or 0 (absence)
of the corresponding discrete event; B, F, G are structural matrices of constant
elements; F = {fij }n×m , fij ∈ {0, Mfij }, i = 1, ..., n , j = 1, ..., m expresses
the causal relations among the states of the DEDS (in the role of causes) and the
discrete events occuring during the DEDS operation (in the role of consequences)
- 0 (nonexistence), Mfij > 0 (existence and multiplicity) of the corresponding
causal relations; G = {gij }m×n , gij ∈ {0, Mgij }, i = 1, ..., m, j = 1, ..., n expresses very analogically the causal relations among the discrete events (causes)
and the DEDS states (consequences); because F and G are the arcs incidence
matrices the matrix B is given by means of them according to (2); (.)T symbolizes the matrix or vector transposition.
The main idea of the approach to the supervisor synthesis consists in imbedding of additional PN places (slacks) and ﬁnding the structural interconnections
between them and the original PN places. Consequently, a new PN subnet representing the supervisor and its interface with the original system are found and
added to the PN model. Thus, the desired behaviour of agents is forced. The
deﬁnition of the P-invariant v of PN in general is the following
/
BT .v = 0

(4)

with v being n-dimensional vector and 0
/ is m-dimensional zero vector. However, usually there are several invariants in PN models. Hence, the set of the
P-invariants of PN is created by the columns of the n × nx -dimensional (nx
expresses the number of invariants) matrix V being the solution of the equation
VT .B = 0
/

(5)

548

ˇ
F. Capkoviˇ
c

In PN with the slacks mentioned above we have to use the following structure
with augmented matrices. Consequently, the equation (5) has to be writen in
the form
B
[L, Is ].
=0
/
Bs
where Is is (nx × nx )-dimensional identity matrix and L describes conditions
(as to marking of some places in the PN models of agents) of the desired MAS
behaviour. While B is the known structural matrix of the agents (without the
supervisor), Bs is the supervisor structure which is searched by the synthesis
process. Thus,
L.B + Bs = 0
/;

Bs = −L.B;

Bs = GTs − Fs

(6)

where the actual structure of the matrix L has to be respected. The augmented
state vector and the augmented structural matrices (of the original system together with the supervisor) are the following
xa =

x
; Fa =
xs

F
Fs

; GTa =

GT
GTs

where the submatrices Fs and GTs correspond to the interconnections of the
incorporated slacks with the actual (original) PN structure.
2.1

The Illustrative Example

It can be seen that in the above mentioned case of the ﬁve agents the form of
L follows from the imposed conditions prescribing the limited cooperation of
agents expressed mathematically as
σp2 + σp8 + σp10 ≤ 1
σp4 + σp8 + σp10 ≤ 1

(7)
(8)

σp6 + σp8 + σp10 ≤ 1

(9)

The form of the augmented matrix [L, Is ] follows from the modiﬁed conditions
(introducing the slacks) which are given mathematical terms as
σp2 + σp8 + σp10 + σp11
σp4 + σp8 + σp10
σp6 + σp8 + σp10

=1

(10)

+ σp12
=1
+ σp13 = 1

(11)
(12)

where p11 , p12 , p13 are the additional places - i.e. the slacks s1 , s2 , s3 (in general,
the number i of such slacks si can also be diﬀerent from i = 3, of course) - that
ensure the desired eliminations of the agents cooperation activities. The number
of the slacks depends on the number of conditions and on their form. As it
is clear from the equations (10)-(12), only one place from the set of four places

Synthesis of the Supervising Agent in MAS

549

p2 , p8 , p10 , p11 can be active while the rest ones have to be passive. Analogically,
the same is valid for the sets p4 , p8 , p10 , p12 and p6 , p8 , p10 , p13 .
⎛
⎞
⎞
⎛
0
0
0
FA1 0 0 0 0
GA1 0
⎜ 0 FA2 0 0 0 ⎟
⎟
⎜0
GA2 0
0
0
⎜
⎟
⎟
⎜
⎜
⎟
⎟ (13)
⎜
0
GA3 0
0
F = ⎜ 0 0 FA3 0 0 ⎟ ; G = ⎜ 0
⎟
⎝ 0 0 0 FA4 0 ⎠
⎠
⎝0
0
0
GA4 0
0 0 0 0 FA5
0
0
0
0
GA5

FAi =

1 0
0 1

; GAi =

0 1
1 0

; BAi =

−1 1
1 −1

; i = 1, ..., 5

(14)

⎛

⎞
−1 1 0 0 0 0 0 0 0 0
⎜ 1 −1 0 0 0 0 0 0 0 0 ⎟
⎜
⎟
⎜ 0 0 −1 1 0 0 0 0 0 0 ⎟
⎜
⎟
⎜ 0 0 1 −1 0 0 0 0 0 0 ⎟
⎛
⎞
⎜
⎟
0100000101
⎜ 0 0 0 0 −1 1 0 0 0 0 ⎟
⎜
⎟(15)
⎝
⎠
L= 0001000101 ; B=⎜
0 0 0 0 1 −1 0 0 0 0 ⎟
⎜
⎟
0000010101
⎜ 0 0 0 0 0 0 −1 1 0 0 ⎟
⎜
⎟
⎜ 0 0 0 0 0 0 1 −1 0 0 ⎟
⎜
⎟
⎝ 0 0 0 0 0 0 0 0 −1 1 ⎠
0 0 0 0 0 0 0 0 1 −1
⎛

−1
Bs = −L.B = ⎝ 0
0

1 0
0 −1
0 0

0 0
1 0
0 −1

0 −1
0 −1
1 −1

1 −1
1 −1
1 −1

⎞
1
1⎠
1

Hence, by wirtue of (6), we have
⎛
⎞
⎛
⎞
1000001010
0100000101
Fs = ⎝ 0 0 1 0 0 0 1 0 1 0 ⎠ ; GTs = ⎝ 0 0 0 1 0 0 0 1 0 1 ⎠
0000101010
0000010101

(16)

(17)

Thus, we obtain the structure of MAS given in Fig. 3 where the supervisor is
represented by the structure consisting of the places p11 , p12 , p13 together with
the interconnections joining them with the elementary agents. Such MAS exactly
fulﬁls the prescribed conditions. The reachability graph (RG) [8] of the system is
given in Fig. 4. Its nodes are the states reachable from the initial state x0 and its
edges are weighted by corresponding PN transitions enabling the state-to-state
transit. The control synthesis based on RG is described in the author’s works
[3,5]. Consequently, this problem is not discussed here. In the light of the above
introduced facts we can illustrate also the systematic synthesis of the simplest
mutex presented in Fig. 1. Here we have
≤1

(18)

σp2 + σp4 + σp5 = 1

(19)

σp2 + σp4

550

ˇ
F. Capkoviˇ
c

⎛

L = (0, 1, 0, 1);

⎞
−1 1 0 0
⎜ 1 −1 0 0 ⎟
⎟
B=⎜
⎝ 0 0 −1 1 ⎠ ;
0 0 1 −1

Bs = −L.B = (−1, 1, −1, 1);

L.B = (1, −1, 1, −1)

Fs = (1, 0, 1, 0);

(20)

GTs = (0, 1, 0, 1) (21)

Of course, the result is the same like that given in the Fig. 1.b) - compare (21)
with Fig. 1b).

 
 

p11 r❤

✒✁✄✗ ✻
 
 
✁✄
✲ ❤
r p1
✑
❄
✑
✰
t1

❄
❤p2
❄

✲
✶
✏✏
✟
✏
✟
✏✏ ✟
✟
✟
✲ r❤p3
✲
✑
❄
✰
t3 ✑
t5
❄
❤
p4

❄

t2

t4

✟
❍
✟
✙
✟
❥ r❤
❍
✙
✟
✛
r❤
p12
✟p13❍
❍
❅
❍❍ ✟✟
❅❍❍
✟
❍
❍
✟❍
❍
✲ ❤
✲
❤
r p5
r p7
◗
◗
◗
✑
❅
 
❘ ❄ 
❄
s
◗
✠
◗
s
✲
✰
✑
t7
❅
 
❅
❅
  ❅
❄
❄
❤p6 
❅
❅ ❤p8 
❅
 
 
❅❄
❄
t6

t8

 
 

❤
r p9
❄
t9

❄
❤
p10
❄
t10

Fig. 3. The PN-based model of the controlled cooperation of the agents
x0

❡

❍
  ❅
❍
❍
 
❅ ❍

 
❅ ❡ ❍❍ 
 ❡
❡
❡
x1
x2
x3
x4 ❡ x
5
❅   ❅  
 
❅
 
❅
  ❅   ❅❡
x6 ❡ x7 ❡ x✟
8
  ✟✟
 ✟
a)
✟
 
❡
✟
x9

x0

❡✛
②❳
❳


t10
❍❳❳❳t8
❅
 ✁ ✻
t1 t2✒
❈❖ ❍

 t3✁t4 t6❅t❍
❆
5 ❍
❳❅
❄
9 ❡
❘
  x2❆❆❯ ❡❈❳
❳ ❡t7 ❍❍
❥❆ t
q
x1 ❡ t1
x3 x4 ❡ x
5
t
5
✁
❆
✡
❅  
✒❅
 
■
✒
 
✻
✻
t2 t❅
❪
6
 
❅
t4 ❏
t
 
❅
4
✁ 
❆
❅ t5 t2 ✡  t3
t3❅
✟t1❅❆❯  
❘✁
❅
✠
☛ ❏
❘  
❅
✙
✟
t6❍
❡x8
x6 ❡ ❍ ❡x7 ✟
✯
✁
✟
t
✒
 
3
✻
 
t2
 
t6 ✁  
t4 ✟
b)
t5❅
✟✟ t1
❘❡✁
❅
☛ 
✟
x9 ✛

Fig. 4. The RG of the ﬁve cooperating agents a) in the form where the edges are
oriented bidirecitonally, but weights of the elementary edges are not introduced because they are diﬀerent depending on the orientation; b) in the form where both the
orientation of edges and their weights are introduced implicitly

3

Applicability of the Approach

The method described above is suitable for the so called pure PN. P/T PN is
pure when there is no ’loop’ between a place and a transition - i.e. it is the
net without the loops of the form given in Fig. 5a). Namely, in such a case

Synthesis of the Supervising Agent in MAS

551

the matrices F, GT have nonzero element equal to 1 in the same place - in
general, when there exists the ’loop’ between pi and tj the element f (i, j) of the
matrix F is equal to the element gT (i, j) of the matrix GT . The eﬀect is, that
the diﬀerence GT - F = B gives us a deformed information about the system
structure, because the elements f (i, j), gT (i, j) eleminate each other (namely,
gT (i, j) - f (i, j) = 0). Fortunately, in PN theory a simple solution of such a
problem is possible. It is suﬃcient to replace the transition in question by the
ﬁctive structure introduced in Fig. 5b). The auxiliary place p together with its
input and output transitions t and t replace the original transition t. It means
that the impureness in the form of a ’loop’ can be replaced (without changing any
dynamic property of the net) very simply by the replacement of the transition in
question by two ﬁctive transitions and a ﬁctive place set between them. Such a
replacement is invariant. After removing the ’loop’ problems the original method
of the supervisor synthesis can be utilized also for the systems modelled by the
’impure’ P/T PN.
p

t
❧
✟✟❍❍
❥
❨❍✟ ✟
❍
a)

p

❧✲

✻

t

p

t

✲ ❧✲

t

b)

Fig. 5. The replacement of the loop. The original loop is on the left. The structure
replacing the loop is given on the right.

3.1

Dealing with Problems of Mutual Interactions Among Agents

Many times, another form of demands on the cooperation among agents occurs.
Especially, the situation - see e.g. [1] - when there exist mutual interactions
among the agents to be supervised. In such a case a particular marking (i.e.
the state of a concrete place) of one agent aﬀects (e.g. stops) ﬁring a transition
in another agent. The situation is illustrated in Fig. 6a), where the transition
A1
t of the agent A1 is prevented from ﬁring under marking the place A2 p of the
agent A2 . As we can see in that picture, a ﬁgment that the place p represents the
supervising agent A3 (or, better said, its part) can be accepted and consecutively,
the above described approach to the supervisor synthesis can be utilized. Namely,
the transition A1 t can be substituted by means of the auxilary ﬁctive place p
together with its ﬁctive input and output transitions t , and t analogically
to that displayed in Fig. 5b). Hence, the new situation - i.e. new structure is displayed in Fig.6b). It can be seen that it is the classical mutex. Such a
substitution can be utilized in synthesis of the supervisor in case of agents with
more complicated structure. For example, the well known kind of the readerwriter cooperation named as the Owicki/Lamports mutex (deﬁned e.g. in [10])
can be automatically synthetised using this substitution.
However, it is necessary to say, that there exist cases where the synthesis of
the supervisor based on invariants is not so simple (i.e. fully automatized) or
even, it is impossible. Here, the experience and invention of the creator of the

552

ˇ
F. Capkoviˇ
c

♣♣ ❆
♣♣
✁
♣♣ ❆
♣♣
☛
♣♣ ❯ ❄✁
♣♣
A2
t1
♣♣
♣♣
♣♣
♣♣
♣
♣
✒
 
❆
✁♣ p  
♣♣
❄
❯ ❄✁
❆
☛✛♣♣ ✎☞
  ♣♣ ✎☞
♣
A1
A2
♣♣
t
♣♣✲
t
♣♣ ✍✌ p
♣♣ ✍✌
♣♣
■
❅
 
❅♣♣♣
✠
 
❄ ♣♣
♣❅ ❄
♣♣♣ Agent ♣♣♣
A2
t2
♣
♣♣
♣♣ A3 ♣♣♣ ✁ ❆
☛ ❄❆
✁
❯
Agent A1

a)

Agent A2

✁
❆
✁ ♣♣
♣♣♣ ❆
♣♣ ❆❯ ❄✁☛
❆❯ ❄✁☛ ♣♣♣
A2
♣♣
♣♣
t1
♣♣
♣
♣
♣
♣
t ❅
■
✒
 
♣
♣
❅
 
p ♣ p
♣
❄ ♣♣ ❅✎☞
❄
✎☞
  ♣♣♣ ✎☞
♣♣
A1
A2
♣♣
t
t
♣♣
♣♣ ✍✌ p
✍✌
♣♣ ✍✌
■ ♣♣♣
 
♣♣✒ ❅
t
♣♣
❄ ♣♣♣ Agent ❅
❄
♣♣
A2
♣♣
t2
♣
♣♣♣ A3 ♣♣♣
✁
❆
 
✠
 
❄
✁☛ ❄❆❯
Agent A1

b)

Agent A2

Fig. 6. The prevention of the transition A1 t (the part of the Agent A1 ) from ﬁring
under the marking A2 p (the part of the Agent A2 ) by means of p - the part of the
supervisor, i.e. the Agent A3 . a) The original schema; b) The substitutive schema.

agents supervisor has to be used. In the next illustrative example such a system
is presented and described.
3.2

The Counter-Example

In order to illustrate such a counter-example let us consider the so called Peterson’s mutex algorithm [10] given in Fig. 7. This system consists of two agents
A1 (writer) and A2 (reader). The PN places describe the following activities: p1
- pending 1 of A1 ; p2 - pending 2 of A1 ; p3 - critical A1 ; p4 - ﬁnished A1 ; p5 pending 0 of A1 ; p6 - quiet A1 ; p7 - pending 1 of A2 ; p8 - pending 2 of A2 ; p9 critical A2 ; p10 - ﬁnished A2 ; p11 - pending 0 of A2 ; p12 - quiet A2 ; p13 - at A1
(left); p14 - at A2 (right).
The state p4 signals to A2 that A1 is presently not striving to become critical.
This allows A2 to ”easily” access its critical region, by the action represented by
the transition t12 . Likewise, the state p10 allows A1 to access its critical state, by
the action represented by the transition t5 . The shared token alternates between
the states p13 and p14 The step from p1 to p2 results in the token in p13 : by
action expressed by the transition t2 in case A1 obtains the token from p13 , or
by action expressed by the transition t3 in case at A1 held the token anyway.
The step from p7 to p8 likewise results in the token in p14 . Hence, the token is
always at the site that executed the step from ’pending 1’ to ’pending 2’ most
recently.
After leaving p6 along the quiescent action represented by the transition t7 ,
the A1 takes three steps to reach its critical state p3 . In the ﬁrst step, the fair
action represented by the transition t6 brings A1 from p5 to p1 and removes the
state p4 . Fairness of the transition t6 is local, because the transition t6 is local to
A1 , with p4 the only forward branching the place in the transition t6 , which is
connected to the A2 by the loop (p4 , t12 ). The second step, from p1 to p2 , results
in the shared token in the place p13 , as described above. The third step brings
A1 to p3 , with action expressed by the transition t5 in case A2 signals with p10 ,

Synthesis of the Supervising Agent in MAS

553

✬

✩✬
✩
✲ ✐p1✟❍
✛
p
7 ✐
✟❍
✟ ❍
✟ ❍
❍ ✟
p13
14
 ✟ ❅
  ❍❅
✟❍pr✐
✠
 
❘ ✛
❅
✠
❘
❅
❥
❍
✙
✟
✲
✛
✲  
✐
t2 ❍ t3
t10 ✟ t9
❨
❍
✯
✟
❍
✟
❍
✟
✒
 
■
❅
❅
 
❅
 
❍
✟
❘  
❅
✠
❘  
❅
✠
❍  ✟ ❍❍
❅✟
p2 ✐ ✟✟
❍❍ ✐p8
✟
 ✟❅
 ❍❅
t✛
13
t6
✠
 
❘
❅
✠
 
❘
❅
✲
✟
❥
t4 ✙
t5
t12 t❍
11
❦◗
✸ ❅
✻ ❅
✻
  ◗
 
✑✑
❘✐
✠
 
❘✐
❅
✠
 
✐p5 p❅
✐
◗✑
p
3
9 p11
✑◗
◗
✑
✻
✻
❄
✛ r✐
✛ ❄ ✑
◗ t8 ✲ r✐✲
t1✑
◗
p6 ✰
t7
s❄p12 t14
❄
◗
✑
r✐p4
p10 r✐
✫
✪✫
✪
Agent A1

Agent A2

Fig. 7. The PN-based model of the two agents communication - the writer (agent A1)
and the reader (agent A2) - in the form of the Peterson’s mutex

that it is presently not interested in going critical, or with action represented by
the transition t4 in case A2 more recently executed the step from p7 to p8 .
The algorithm’s overall structure guarantees that one of p10 or p14 will eventually carry a token that remains there until eventually either the event represented
by t5 or t4 occurs. The two agents are structurally symmetrical, but the initial
state favors A2 (if the place p14 contains the token) or A1 (if the place p13
contains the token).
In this example the invariants-based approach to the supervisor synthesis fails.
Namely, any satisfying matrix L cannot be found. Searching for reasons it was
detected that the problem consists in the speciﬁc structure of the P-invariants of
the global system presented in Fig. 7. As we can see from the following matrix of
the global system P-invariants the invariants of the agents A1 , A2 are mutually
disjoint
⎛
⎞
00000011101100
⎜0 0 0 0 0 0 1 1 1 1 0 0 0 0⎟
⎜
⎟
T
⎟
V =⎜
⎜0 0 0 0 0 0 0 0 0 0 0 0 1 1⎟
⎝1 1 1 0 1 1 0 0 0 0 0 0 0 0⎠
11110000000000

4

Conclusion

The method of the DES control theory based on PN place invariants was utilized
for the synthesis of the agent (with prescribed properties) supervising a group
of agents in MAS. The illustrative example documenting the soundness of the
method was introduced. It was shown that the method is simply applicable for
autonomous agents modelled by pure PN. Additionally, it was described how the
applicability can be extended for the agents modelled by impure PN. Namely,

554

ˇ
F. Capkoviˇ
c

a simple substitution of the transition in the loops of the PN model is suﬃcient
to remove the impureness. As a result of the research it can be said that the
method is very useful for the synthesis of the agents supervising a group of
automous agents. In case of a group of cooperating agents some problems can
occur. Therefore, the counter-example was presented. It was shown that e.g. for
the reader-writer in the form of the so called Peterson’s mutex the supervising
agent cannot be synthetised by the proposed method. Hence, there exists a
challenge for the future investigation on this way, especially, to deﬁne general
conditions for the validity of the approach.

References
1. Bordbar, B., Giacomini, L., Holding, D.J.: UML and Petri Nets for Design and Analysis of Distributed Systems. In: IEEE International Conference on Control Applications (CCA 2000) and IEEE International Symposium on Computer-Aided Control
System Design (CACSD 2000), pp. 610–615. IEEE Press, Piscataway (2000)
2. Buy, U., Darabi, H.: Sidestepping Veriﬁcation Complexity with Supervisory Control. In: Workshop on Software Engineering for Embedded Systems: From Requirements to Implementation, 8 pages (2003),
http://www.cs.uic.edu/∼ shatz/SEES/Schedule.htm
ˇ
3. Capkoviˇ
c, F.: An Application of the DEDS Control Synthesis Method. Journal of
Universal Computer Science 11, 303–326 (2005)
ˇ
4. Capkoviˇ
c, F.: DES Modelling and Control vs. Problem Solving Methods. Int. J.
Intelligent Information and Database Systems 1, 53–78 (2007)
ˇ
5. Capkoviˇ
c, F.: Modelling, Analysing and Control of Interactions among Agents in
MAS. Computing and Informatics 26, 507–541 (2007)
6. Martinez, J., Silva, M.: A simple and fast algorithm to obtain all invariants of
generalized Petri net. In: Application and Theory of Petri Nets, vol. 52, pp. 301–
311. Springer, New York (1982)
7. Moody, J.O., Antsaklis, P.J.: Supervisory Control of Discrete Event Systems Using
Petri Nets. Kluwer Academic Publishers, Boston (1998)
8. Murata, T.: Petri Nets: Properties, Analysis and Applications. Proceedings
IEEE 77, 541–580 (1989)
9. Ramadge, P.J., Wonham, W.M.: Supervisory Control of a Class of Discrete Event
Processes. SIAM Journal on Control and Optimization 25, 206–230 (1987)
10. Reisig, W.: Elements of Distributed Algorithms. Modeling and Analysis with Petri
Nets. Springer, Berlin (1998)
11. Yamalidou, K., Moody, J.O., Antsaklis, P.J., Lemmon, M.D.: Feedback Control of
Petri Nets Based on Place Invariants. Automatica 32, 15–28 (1996)

