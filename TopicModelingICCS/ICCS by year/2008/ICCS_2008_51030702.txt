Agents for Searching Rules in Civil Engineering
Data Mining
Janusz Kasperkiewicz and Maria Marks
Institute of Fundamental Technological Research,
Polish Academy of Sciences,
21 Świętokrzyska Str., 00-049 Warsaw, Poland
{J.Kasperkiewicz,M.Marks}@ippt.gov.pl

Abstract. The software agents are applied for a remote search of information. It seems natural that to analyse such information machine
learning routines should be built-in into an agent system. After ﬁnding
and processing the data the generated rules will be evaluated by means
of so called interestingness measures, and only the best rules should be
returned to the user.
The paper presents situation in civil engineering data processing, as a
suggestion for designers of intelligent software tools, to work out diﬃcult
but much needed procedures that should be implemented into autonomous
agent system, intended for retrieving special kind of information searched
for example by materials technologists.
A simple architecture for an agent system is suggested without, however, getting into any technical details on how the elements of such system should be constructed.
Keywords: machine learning, data mining, software agents, engineering
databases.

1

Introduction

Generally speaking the agents are to reduce the workload of their users, but there
is a diversity of kinds of information interesting for diﬀerent users. Many users
are satisﬁed only with a task of simply ﬁnding appropriate documents, like text
ﬁles, Internet sites, data tables, images, audio or video ﬁles, which are dedicated
to speciﬁc topics. Introducing agents able not only to ﬁnd but also to process the
data might immensely increase the possibilities of remote knowledge search.
An agent is intelligent, autonomous code that can be send out on a mission,
[1]. It can work in a static way, being located at the local system, or it may be
mobile, working after being embedded in a remote machine. Agents may be static
or mobile, acting in a collaborative way or separately, but their crisp deﬁnition
is diﬃcult and a classic paper of 1996, [2], was pointing out a general lack of
precision in software agents taxonomy. It seems that the situation in this respect
is not much diﬀerent today. In the description which follows the case of static
agent is assumed.
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 702–711, 2008.
c Springer-Verlag Berlin Heidelberg 2008

Agents for Searching Rules in Civil Engineering Data Mining

703

Machine learning (ML) programs are not agents, but it seems natural that
they might and should be built in into an agent system. ML programs usually are
constructed for purposes more sophisticated than simple ﬁnding of information
sources. In our investigations we are using them mainly for searching rules representing knowledge about technological processes under inspection. An example
here can be a process of selecting proper mix of components in a composite
material.
A concept of an agent for engineering data search will be explained on an example. An agent could be a personiﬁcation of an Internet user, who from the computer terminal is searching, e.g. around WWW, or some protected network, or the
whole Internet, or only the single computer of the user, for a particular kind of
information. After the information source is found, (e.g. a report with experimental results), it is usually downloaded by the user from the remote system, before
it can be analysed to extract the knowledge in form of statements, (hypotheses,
rules, generalisations). Generation of rules is performed by the ML programs. A
rule of practical importance for a civil engineer can be for example an information, in form of a relation, what amounts of certain components of a concrete mix
correspond to a desired quality of the resulting hardened concrete material.
In our group at IPPT1 we are using various kinds of AI tools, such as ANNs,
(Artiﬁcial Neural Networks), but especially ML methods for prediction of rules.
Important in our investigations were the methods developed by Ryszard Michalski and his team at George Mason University; programs: AQ15, AQ19, AQ21.
We were also comparing them with various other ML algorithms.
The present paper is to indicate certain important characteristics of agent
type programs that might bring most needed results. It is assumed that the
agent will generate the rules concerning certain process; the details of creation
of association rules, of the decision trees, etc., are not discussed in this text. Also
technical questions such as the protection of the data or the robustness of the
agent, etc., are not discussed here.

2

Machine Learning Tools

Learning systems have the ability of setting values of their certain internal parameters, of some preset, abstract algorithm, in a way that will minimize difference between the internal results and the external control values. The values
can be scalars, vectors or categories. If during the training the conﬁguration of
the internal parameters tends to a certain steady state, such state represents the
knowledge of the system about the process under consideration.
A generalization of the learned knowledge can be a black-box type tool, like in
case of ANNs, (Artiﬁcial Neural Networks), or a set of various concepts, (rules,
hypotheses), expressed in form of logical expressions, such as a proposition:
A → B.
1

IPPT - Institute of Fundamental Technological Research, Polish Academy of
Sciences.

704

J. Kasperkiewicz and M. Marks

This expression represents an inference containing an antecedent (A) and the
consequent (B). The antecedent A may represent a larger set of simple conditions
on the components of the input and B represents output conditions, typically it
is a designation of the class, of a certain category.
The symbol A represents some concept, which is a conjunction, (or a complex ), of simple, or atomic conditions, called selectors, described by numerical or nominal attributes of the dataset. The selectors are marked by square
brackets, ([. . .]). A few examples of selectors are: [x ≤ 12], [y > 2.37], [z ∈
(1.30, 1.77 ], in case of only numerical variables, and [v ∈ red , blue , yellow ],
[w ∈
/ A , D , K , L , R ] – where only nominal variables appear.
For any record in the training or testing datasets the hypothesis in form of
the proposition A → B can be either true or false. In rare cases it can also be
undeﬁned.
A task for ML programs is to propose to the user rules of the type described
above, selected from the collection of the trainee set of training hypotheses,
[3]. The selection should correspond to a possibly low error rate of the power
of a concept in predicting its consequences, characterizing the dataset under
consideration. A ﬁnally selected rule might be for example:
if [y > 2.37] and [[v = red ] or [v = yellow ]] then [class = ClassIII]
The requirements concerning the formatting of the database are slightly diﬀerent
for diﬀerent ML programs, but it is relatively easy to translate an input script
created for one system to another one.
There is a number of diﬀerent Machine Learning programs available. Many
of these are more or less for free, like AQ15, AQ19, AQ21, C4.5, WinMine,
Gradestat, WEKA, Rosetta, (a rough sets toolbox), [4, 5, 6, 7].
There are many commercial data mining programs, as was described e.g. in
[8, 9]. Examples are: DataCruncher, IBM Intelligent Miner, MineSet, CART,
See5, WizRule, Magnum Opus, etc. Various elements of rules searching from
database examples are also available now in large commercial packages dedicated
to statistics and data mining, like Oracle, Statistica, SPSS or SAS.
In civil engineering there is a hypothetical possibility of combining various
soft computing tools into a one system, [10, 11, 12], but so far it is still only the
concept that needs much further programming work.

3

Civil Engineering Data Bases

Civil engineering experimental data are scattered around various sources, such
as technical papers, reports, books, standards and instructions, also special
databases, which are properties of laboratories or production managers. Many
of such sources are available only in a paper form, so to transfer them into electronic form considerable additional work would be needed. It is assumed in this
paper that there is a certain digital data environment accessible, in which the
agent will function. This may be simply a selected directory in the computer of
the user, the contents of a network of connected computers, or any library that
may be opened in the Internet.

Agents for Searching Rules in Civil Engineering Data Mining

705

There are diﬀerent types of engineering data. These are descriptive databases
concerning composition of concrete and similar composite materials, data concerning various diagnostic problems, data enabling only the quantitative predictions, data allowing only for classiﬁcation, etc. For example the properties of
concrete depend on composition of the original concrete mix, on certain elements
of its mixing technology, on its curing and protection, its age, sometimes on its
whole history. The properties of concrete can be characterized by attributes in
form of numbers, (like: strength, density, amounts of cement, water or additives),
and in form of categories, (like: ’basalt’, ’limestone’, ’PFA1’, ’PFA2’, etc.)
The ﬁelds of investigation may be properties of materials, diagnostics of the
quality of materials, diagnostics of whole engineering structures. In any case for
processing by ML algorithms, (Machine Learning), the data must be properly
formatted, so that the program would not encounter any unannounced values.
A very simple example of a structure of a database prepared for generation
of rules for civil engineering purposes is shown in Table 1. The attributes of the
records can, in the simplest case, be of two diﬀerent types: numerical or nominal.
There is number of diﬀerent other attribute types, such as date or string, which
are not discussed here. Any attribute in a database record may also have an
unknown value, (a symbol ’ ?’ is usually applied).
Table 1. An example of a simple structure of a formatted database
name

type

action

No
numeric ignore
nrpomiaru numeric ignore
lzdH
numeric active
lzdM
numeric active
lzdL
numeric active
senH
numeric active
senM
numeric active
senL
numeric active
sazH
numeric active
sazM
numeric active
sazL
numeric active
phase
nominal ignore
HV
numeric ignore
class
nominal active

min
max
or - list of legal values
1
455
1
502
394
660
461
833
886
1027
35
71
62
286
351
606
14
33
23
178
103
248
cp, a, v
56
1298
A0, A15K, A15T, A30K, A30T

A formatted database can be conceived as a matrix in which the rows represent
records and the columns represent attributes.
All the information on the structure of a database like in this example are
needed to organise properly the ML processing of the dataset. Not all the attributes must be taken into account during the ﬁnal rule generation. Working
on a number of attributes bigger than the necessary minimum might result in
an unnecessary noisiness of the data. The designation ‘ignore’ in the example

706

J. Kasperkiewicz and M. Marks

above, (’ignore’, as opposite to ’active’), concerns the attributes that were excluded from the calculations in the example in Chapter 5.
There are various actions that an agent should do. A diﬃcult and important
task to be fulﬁlled by an agent is after identiﬁcation of the source, (e.g. ﬁnding
in the Internet a paper dedicated to some type of concrete), to evaluate this
source from the point of view of "useful data", (i.e. whether it contains the kind
of data that this particular agent will be able to recognise and format), to decide
how the data will be procured and transformed, and - if needed - also imported
to the agent’s home site.
Not discussed here are quite obvious but more particular tasks for agent system, for example optical character recognition in case of the PDF documents
available in form of images, recognition of diﬀerent decimal systems, uniﬁcation
of descriptions, identiﬁcation, proper understanding and translation in case of
foreign languages, etc.

4

The Concept of Interestingness

The ML programs often produce for a given dataset many, even hundreds of
particular rules. For a user who is looking for rules as simple as typical empirical
formulae proposed over the ages by the human experts, the rules produced typically by a ML program are of unequal value, many practically useless. Worth
further attention may be only some of them – those "most interesting" ones.
The concept of interestingness has appeared in data mining literature mainly
in the last decade, (perhaps one of the ﬁrst uses of the term was in 1995, by Silberschatz and and Tuzhilin, as cited in [13]). It concerns the relative importance
of any rules conceived by people, but mainly of the rules generated by machine
learning algorithms. The meaning of the term interestingness is slightly imprecise,
because the value of a rule depends naturally on the point of view of the user.
There are more than 30 diﬀerent interestingness measures discussed in the
literature; cf. for example [13, 14, 15, 16]. They are mostly constructed by algebraic operations on a set of primary measures of amounts of records in a database
under consideration, (in certain texts, depending on the ﬁeld of interests of the
author, instead of the term records used is the word transactions; e.g. [17]). And
some investigators apply their own measures concerning the quality of the rules,
without referring at all to the notion of interestingness, (e.g. [5, 7, 18]).
With association rules in form of A → B, (the antecedents in A and consequent or target class B, being conjunctions of simple rules or selectors of
attributes), and n being a total number of records in a database, the primary
measures are: na , nb , nab and na¬b , meaning numbers of records matching the
conditions, respectively, of A, B, A ∩ B, A ∩ ¬B, (here ¬B means: NOT B).
Examples of four simplest and most typical interestingness measures are:
Support, Confidence, Conviction and Lift 2 . They are, respectively, deﬁned by
formulae:
2

the same name Lift corresponds to a diﬀerent operator in See5, although there is
close linear correlation between the results of the both formulae.

Agents for Searching Rules in Civil Engineering Data Mining

707

support = (na − na¬b )/n,
conf idence = 1 − na¬b /na ,
conviction = na n¬b /(nna¬b ), lif t = n(na − na¬b )/(na nb ).
Among the interestingness measures discussed in the literature rarely mentioned
is a measure characterizing the simplicity of a rule. For example very important
may be the diﬀerence whether the rule is composed of only 1, 2 or 3 selectors,
and not – e.g. – 20 selectors or more. The issue is treated in AQ21, where a
special function is introduced that can be used to minimize the complexity of
learned rules.
In the present paper it is proposed to introduce an additional interestingness
measure called Simplicity, calculated as an inverse of the number of selectors on
the antecedents’ side of the rule in question.
In this way a vector of 5 interestingness measures designated respectively as:
sup., conf., conv., lift and simpl., presents a compact set of parameters, enabling
the user a quick evaluation and comparison of the applied ML procedures.

5

Experiments

The particular experiments with ML procedures discussed in what follows were
dedicated to a case of data collected during the microindentation tests on hardened concrete, using a Vickers indenter, and recording acoustic emission signals,
which were subsequently processed by wavelet transformation, [19]. The database
of about 300 records contained, among others, 9 columns of numbers characterising the acoustic emission signal, (AE), on selected frequency and magnitude
levels. The structure of the database was presented in the Table 1, above.
The task of ML programs were to discover from the AE data the rules allowing
recognizing which records correspond to concrete containing certain additives,
(like ﬂy ash or PFA), and which ones are without those additives. The issue
may be of importance in case of forensic analysis problems in construction of
questionable quality. The presence of additives in the experiment was identiﬁed
by a class code, (there were three levels of the additive content: 0, 15 and 30
percent, and two additive sources: K and T; cf. the bottom raw of the Table 1).
In search of the rules applied were mainly four ML tools: See5, AQ19, WEKA
and AQ21, [5, 6, 7, 18]. A number of diﬀerent rules were obtained from diﬀerent
methods. In many cases the primary measures concerning numbers of records
supporting rules generated by the system could be evaluated directly from the
accuracy statistics indices built-in into programs. In other cases they were calculated manually using MS Excel.
Selected results in form of rules, the primary measures and the corresponding
interestingness measures are presented in Table 2.
The database from which the numbers were taken in the Table 1 was of 239
records, (n = 239), with the numbers, (nb ), of records in ﬁve diﬀerent classes
A0, A15K, A15T, A30K and A30T being, respectively, 80, 60, 62, 63 and 64.
The numbers na , nab and na¬b were either taken from the ML programs or were
counted in Excel.

708

J. Kasperkiewicz and M. Marks

Table 2. Examples of interestingness measures obtained using four ML programs
(the cases of conv=max correspond to rules in which there were no erroneous
predictions)
na nab na¬b sup
Rules according to See5
[senH <= 47]
→ Class = A0
229 78 151 0.24
[sazH > 18][sazL <= 167]
→ Class = A30T 108 41 67 0.12
[senL > 400][sazH <= 17]
→ Class = A15T 16 14
2 0.04
[senH > 47]
→ Class = A15K 100 39 61 0.12
[lzdH > 486][senH > 54]
→ Class = A15K 35 16 19 0.05
[senH > 47][senH <= 54]
→ Class = A30K 62 21 41 0.06
Rules from AQ19
[lzdH = 510..578][lzdM = 697..800]
51 35 16 0.11
[lzdL = 976..1007, 1027][senH = 39..42]
[senL = 351..393]
→ Class = A0
[lzdH = 486..555, 571][lzdM = 655..748, 807]
28 21
7 0.06
[lzdL = 950..1005][senH = 39..41]
[senL = 379..507]
→ Class = A15T
[lzdH = 394..531, 633][lzdL = 950..1006]
19 16
3 0.05
[senH = 42..57][senM = 99..286][sazM = 47..148]
[sazL = 113..145, 177..195]
→ Class = A30T
Rules from WEKA, (classifier PART)
[senH > 47][lzdL <= 942]
9
8
1 0.02
[lzdH > 465]
→ Class = A15K
[senH > 47][lzdL > 974][sazH > 21] → Class = A30T 10 10
0 0.03
Rules from AQ21
[lzdH = 522..568][lzdM = 680..744]
16 16
0 0.05
[lzdL = 976..1000][senH <= 45]
[senM = 73..103][sazH <= 18][sazM >= 28]
[sazL = 106..138]
→ Class = A0
[senH = 45..66]
→ Class = A15K 135 48 87 0.15
[sazH <= 17]
→ Class = A15T 132 44 88 0.13

conf conv lift simpl
0.34
0.38
0.88
0.39
0.46
0.34

1.15
1.30
6.49
1.34
1.51
1.22

1.06
1.57
3.77
1.75
2.05
1.43

1.00
0.50
0.50
1.00
0.50
0.50

0.69 2.41 2.14 0.20

0.75 3.25 3.23 0.20

0.84 5.10 3.49 0.17

0.89 7.36 3.99 0.33
1.00 max 4.14 0.33
1.00 max 3.11 0.13

0.36 1.27 1.59 1.00
0.33 1.22 1.44 1.00

The numbers in bold print in the last columns of the Table 2 correspond to
best results from the point of view of a given interestingness measures. The limit
values are 1 in case of Support, Confidence and Simplicity measures. There are
no practical limits in cases of Conviction and Lift, or, to be more precise the
maximum number that can appear there depends on the size of the database
under investigation.
As can be seen the rules obtained by the programs have limited eﬀectiveness.
The rules are either of low support even being quite reliable, or are of low accuracy,
(many false predictions), or are very complicated, (e.g. 8 selectors in a rule).
It should be added, that the recognition of the data by ML programs was
generally rather good. It is obvious that eﬀectiveness of the whole set of rules
generated by any ML program used together as a whole collection of formulae
may be very eﬀective. For example by applying a whole set of 60 rules obtained
by one of the programs, (it was See5 ), quite a satisfying confusion matrix was
obtained, as shown in Fig. 1-a. Confusion matrix displays how the ML system
assigns the records to their respective classes. When in the next run selected was
the Boost-10 trials option the results were almost ideal – Fig. 1-b.
Similar results were obtained also using the other ML programs. The good
recognition, however, is an eﬀect of applying a kind of voting procedures, and

Agents for Searching Rules in Civil Engineering Data Mining

709

Fig. 1. Confusion matrices obtained on the same dataset with program See5:
default settings, (b) – after selecting the option: Boost (10 trials)

(a) –

Fig. 2. Proposed architecture – (a) of the agent system, (b) of the sub-agent

there are no simpler formula resulting from such calculation. And these possibly
simple formulae are what is really needed by engineers.
The selected rules presented in the ﬁrst column of Table 2 were obtained at a
default settings in cases of See5 and AQ19, applying the classiﬁers PART in case
of WEKA, and applying the PD mode, (Pattern Discovery), in case of AQ21.

6

Conclusions

It seems that the ambitions presented in this paper seem to be rather farreaching. It would be however really advantageous to strive towards creating
an agent system able to realize proceedings described above. Or at least some
elements of it, as these also might be helpful to a human researcher.

710

J. Kasperkiewicz and M. Marks

After being activated the agent, (agents), should start looking for appropriate
data sources, to process what is found, and return ﬁnally a number of rules, each
accompanied with an interestingness measures vector, as deﬁned in the previous
chapter. For the beginning, however, it would be important to have at least one
agent that could identify which papers, from a list of hundreds of titles, contain
the tables of interesting experimental results.
In Fig. 2 shown is what seems to be a possible architecture for such an agent
system.
The input by the user would be some characterization of the ﬁeld of search, for
example by typing-in a number of keywords, (e.g.: "concrete, additives, admixtures, silica, PFA"; as previously this is an example from the ﬁeld of concrete-like
composite materials), and a proposal of a list of expected headings of the columns
in the tables presenting the features aimed at during the search. Such list would
have to contain as many alternatives as the user can think of. For example: "w,
water, c, cement, silica, silica fume, sup, superplasticiser, aggregate, CA, FA, air
entrainment, strength, compression strength, density, fc28", (as can be seen the
same attributes may have diﬀerent symbols in diﬀerent data sources).
After receiving the results from such system the user is thereupon to decide
which results are better from others. The rules obtained by diﬀerent procedures are
mutually supplementing, to combine the results, however, a human action would
be needed, so the question of how to combine the rules is not discussed here further.
There is a general observation from the experiments performed on actual
experimental data using diﬀerent ML tools that very often the resulting set of
rules was either too large, (e.g. 100 rules), or the rules were too complex, (more
than 3 ÷ 4 selectors), or they had too low the support or too low the accuracy.
The results like those in Table 2 will allow the user to concentrate on only the
most important results of the search.
The problem of ﬁnding optimal rule is a really multi-criteria task. The user in
the presented example could support his or her estimate of the resulting rulsets
by the ﬁve components of the interestingness vector. Later on the user will be
able to work out the position to recognise the value of the search by the ﬁrst
look into the results.
Acknowledgments. This work was supported by Projects No. R04 013 01 and
No. 4 T07E 036 30, sponsored by The Ministry of Science and Higher Education,
Warsaw, Poland, (MNiSW), to which the authors are grateful.

References
[1] Ouderkirk, J.: Technical services task assignment: from macros to collection management intelligent agents. The Journal of Academic Librarianship 25, 397–401
(1999)
[2] Nwana, H.S.: Software agents: An overview. Knowledge Engineering Review 11(2),
205–244 (1995)
[3] Cichosz, P.: Learning systems. WNT, Warszawa (in Polish) (2000)

Agents for Searching Rules in Civil Engineering Data Mining

711

[4] Gradestat - a statistical program for exploratory data analysis,
http://gradestat.ipipan.waw.pl/
[5] Michalski, R.S., Kaufman, K.A.: The AQ19 system for machine learning and
pattern discovery: A general description and user’s guide (2001)
[6] Witten, I.H., Frank, E.: Data Mining: Practical Machine Learning Tools and Techniques, 2nd edn. Morgan Kaufmann Series in Data Management Sys. Morgan
Kaufmann, San Francisco (2005)
[7] Wojtusiak, J.: AQ21 user’s guide. Technical Report MLI 04-3, P 04-5 (2004)
[8] Elder, J.I., Abbott, D.: A comparison of leading data mining tools. In: Fourth
International Conference on Knowledge Discovery & Data Mining (1998)
[9] King, M., Elder, I.J., Gomolka, B., Schmidt, E., Summers, M., Toop, K.: Evaluation of fourteen desktop data mining tools. In: IEEE International Conference on
Systems, Man, and Cybernetics, vol. 3, pp. 2927–2932 (1998)
[10] Alterman, D., Kasperkiewicz, J.: Evaluating concrete materials by application
of automatic reasoning. Bulletin of the Polish Academy of Sciences. Technical
Sciences 54(4), 352–362 (2006)
[11] Alterman, D.: Evaluation of concrete materials by automatic reasoning. IPPT
PAN, Polish Academy of Sciences (in Polish) (manuscript, 2005)
[12] Kasperkiewicz, J., Alterman, D.: Holistic approach to diagnostics of engineering
materials. Computer Assisted Mechanics and Engeneering Sciences 14, 197–207
(2007)
[13] Vaillant, B.: Mesurer la qualité des regles d’association. Etudes formelles et expérimentales. l’École Nationale Supérieure des Télécommunications de Bretagne
en habilitation conjointe avec l’Université de Bretagne Sud (2006)
[14] Huynh, X., Guillet, F., Briand, H.: ARQAT: an exploratory analysis tool for
interestingness measures. In: Janssen, J. (ed.) 11th international symposium on
Applied Stochastic Models and Data Analysis (ASMDA 2005), Brest, France, May
17-20, 2005, pp. 334–344 (2005)
[15] Lallich, S., Vaillant, B., Lenca, P.: A probabilistic framework towards the parameterization of association rule interestingness measures. Methodology and Computing in Applied Probability 9(3), 447–463 (2007)
[16] Lenca, P., Meyer, P., Vaillant, B., Lallich, S.: On selecting interestingness measures
for association rules: User oriented description and multiple criteria decision aid.
European Journal of Operational Research 127(2), 610–626 (2008)
[17] McGarry, K.: A survey of interestingness measures for knowledge discovery.
Knowl. Eng. Rev. 20(1), 39–61 (2005)
[18] Rulequest research 2007, See5: An informal tutorial
http://www.rulequest.com/see5-win.html
[19] Kasperkiewicz, J.: On a possibility of structure identiﬁcation by microindentation
and acoustic emission. In: de Miguel, Y., Porro, A., Bartos, P. (eds.) 2nd International Symposium on Nanotechnology in Construction, NICOM 2, Bilbao, Spain,
pp. 151–159. RILEM Publications S.A.R.L (2006)

