A Framework for Interactive Parameter Sweep
Applications
Adianto Wibisono1 , Zhiming Zhao1 , and Adam Belloum1 ,
and Marian Bubak1,2
1

Informatics Institute, University of Amsterdam, Amsterdam, the Netherlands
{wibisono,zhiming,adam,bubak}@science.uva.nl
2
Institute of Computer Science AGH, Krakow, Poland
bubak@agh.edu.pl

Abstract. This paper describes ongoing eﬀorts on adding interactivity
for performing parameter sweep experiments. The literature study and
analysis of requirements gathered from use cases in various scientiﬁc domains indicate that interactivity is needed but not fully supported by
most of existing frameworks designed to support parameter sweep applications. Based on this study we identify the requirements for interactivity
during execution of parameter sweep experiments and the type of interactive actions needed to steer parameter sweep execution. Preliminary
design of a framework that would support interactivity is presented and
it will be analyzed further with Model Driven Architecture modelling
approach and ORC to formally analyze grid service interaction used in
this framework. The implementation of this framework will be based on
existing components from WS-VLAM project.
Keywords: e-Science, parameter sweep, interactivity, workﬂows, virtual
laboratory.

1

Introduction

Applications that can beneﬁt from the computational power oﬀered by Grid based
systems are science and engineering simulations, many of which can be structured
as loosely coupled Parameter Sweep Applications (PSA) [3]. A typical PSA is an
application which has to be executed independently large number of times, to evaluate either a single or a multi dimensional parameter space of the experiments
to locate a particular point in the parameter space that satisﬁes certain criteria.
These applications are very often developed and run as workﬂows [7].
Albeit simple in terms of computational model, parameter sweep studies occurs frequently in scientiﬁc computation across a broad range of scientiﬁc disciplines. For example this application model is needed in bio-medical [10], bio
informatics [8], bio-physics domain [11], data mining [13] and many other scientiﬁc domains. Recognizing that science has an exploratory and evolutionary
nature, dynamic and interactive behaviour need to be supported [7]. However,
existing frameworks for performing parameter sweep such as Nimrod-G [1] or
M. Bubak et al. (Eds.): ICCS 2008, Part III, LNCS 5103, pp. 481–490, 2008.
c Springer-Verlag Berlin Heidelberg 2008

482

A. Wibisono et al.

APST [2] focus mainly on the scheduling and the management of the computing resources required for the execution of PSAs. Performing parameter sweep
experiments based on these frameworks typically involve multiple batch submissions of parameter ranges. Scientists often prefer to guide the parameter space
exploration based on some heuristics, the current way of performing parameter
sweep experiments does not allow such an action. In this paper we are aiming
to provide interactivity features to support the exploratory scientiﬁc process in
parameter sweep applications. This interactivity will allow more eﬃcient ways
of exploring parameter space, thus increasing the productivity of performing
parameter sweep experiments.
The rest of this paper is organized in the following way: in Section 2 we
discuss the basic processes involved in parameter sweep experiments derived from
example use cases. A critical overview of currently available parameter sweep
frameworks is presented in Section 3. Section 4 discussed goals and requirements
to support interactive parameter sweep experiments. A design to satisfy these
requirement is presented in Section 5 along with current prototype status. We
conclude in Section 6 with summary and future research directions.

2

Basic Processes in Parameter Sweep Experiments

In this section we describe two use cases to analyze the basic lifecycle of parameter sweep experiments and then distinguish its basic processes. The use cases
will also be used to illustrate issues that have to be addressed in developing
framework to support interactive parameter sweep.
The ﬁrst use case is the ADDA Distributed Light Scattering. Discrete Dipole
Approximation (DDA) [11] is a general method to calculate scattering and absorption of electromagnetic waves by particles of arbitrary geometry and composition. Amsterdam DDA (ADDA) is used to study light scattering pattern
in red blood cells (RBC). Mature red blod cells are modeled as biconcave disk
in DDA simulations, and the results of this simulation are compared against
experimental results based on scanning ﬂow cytometer of actual RBC. There
are 6 variables that deﬁnes the parameter space in ADDA experiments, which
characterize the modelled RBC such as hemoglobin concentration, biconcave disk
dimensions which includes height, width, diameters and angle of rotation. In this
experiments a parameter sweep is conducted to ﬁnd a set of parameter related
to modelled RBC which will minimize the error when comparing simulation with
experimental results. Currently, the approach of ﬁnding appropriate parameters
are by performing 40000 light scattering patterns simulation for RBC randomly
varying the 6 parameters. Result of this simulation is then used to solve inverse
light scattering problems using χ2 test based on direct comparison of experimental LSP and simulated ones. Each of these simulations take in average 10 to
15 minutes, and performing possible combinations of the 6 parameters requires
a couple of processing months.
The second use case is about Functional Magnetic Resonance Imaging (fMRI)
Applications. FMRI is a modality that enables the observation of brain activity

A Framework for Interactive Parameter Sweep Applications

483

during physical or cognitive simulation. Acquired MRI scans containing time
series of 3D datasets during brain rest and stimulation phases need to be processed to generate brain activation maps. The analysis of fMRI data is performed
with fMRIB software library and statistical parametric mapping tools [12]. Although these packages hide much of the image analysis complexity, the choice
of parameters still plays an important role in fMRI analysis. Most researchers
adopt standard parameter values for spatial smoothing, delay hemodynamic response function (HRF) and image registration. However these default values not
always are the appropriate ones for a number of cases. The search for the optimal parameter requires investigating a large parameter space. Previous sweep
experiments which varies the HRF delay parameters [10] using ranges from 4s
up to 8s with steps 0.25 seconds applied to 22 diﬀerent data sets generates 374
jobs. Repeating this experiments up to 6 times with job completion varies from
30 to 140 minutes takes 416.7 hours total experiment times. This search can be
optimized if the experts can interact at run time with the system.
The experiment scenarios of the two use cases consist of many independent tasks,
each of which corresponds to the evaluation of one point in multi-dimensional parameter space. Each of these tasks are the basic unit of application used in parameter sweep which usually consists of legacy application or existing library used
such as the ADDA library, or FSL library for the fMRI experiments. The independent nature of the tasks composing the two applications makes them suitable for
a parameter sweep approach and opens up possibility to grid enabled computing
resources. Unlike the case for tightly coupled parallel applications which has communication overhead trade oﬀs when using distributed computing resources, the
search the optimal paremeters in the two use cases presented in this section does
not involve any communication among the diﬀerent runs.
In both scenarios, we can distinguish a number of basic steps. First, a preliminary run is done based on an initial guess of interesting parameter ranges. This
preliminary run is used to determine the predicted behaviour of the modeled
system (parameter space landscape) under limited input conditions. Based on
analysis of this landscape, a process of gradual reﬁnement is started [4]; in each
subsequent runs, the parameter space is reduced by the user and/or through the
parameter optimization method employed. Based on the analysis performed after
each run, a diﬀerent region of parameter space as well as a diﬀerent optimization
method can be chosen.

3

Overview of Parameter Sweep Frameworks

A support environment for parameter sweep experiments, namely parameter
sweep framework, allows a scientist to eﬃciently perform and manage diﬀerent steps of a parameter sweep experiment. A number of parameter sweep
frameworks have been developed e.g Nimrod-G [1], AppLes Parameter Sweep
Template (APST) [2], P-Grade [9], Virtual Instrument [4], Science Experimental Grid Laboratory (SEGL) [5] and SimX [16]. These systems aim to support
the basic processes in parameter sweep experiments and provide user front end

484

A. Wibisono et al.

to describe, execute and monitor the experiments. Nimrod-G [1] provide a tool
for parameterized simulation on distributed systems designed for large widely
distributed computational systems. APST [2] focuses on adaptive scheduling of
parameter sweep applications on the Grid. P-Grade [9] provide an integrated
portal and workﬂow based approach for parameter sweep applications. Science
Experimental Grid Laboratory (SEGL) [5] aims at management of complex and
dynamic parameter studies in grid environments, by automating the creation
of complex modules for the computation and providing dynamic control of the
study, utilizing the use of results from previous computational stages. These existing frameworks focus more on scheduling and management of computing resources to satisfy computational demand of parameter sweep applications. The
essential feature to monitor and to intervene with running parameter sweep simulation is something which is missing from these existing frameworks, which we
will address in our research. A related research that have similar goal with our efforts is Virtual Instrument [4] which allows user directed parameter space search
on distributed computing resources, speciﬁcally targetted for M-Cell application. Another related research that allow parameter space adjustment during
experiment execution is SimX [16].
Table 1 summarizes the support from existing environment for performing
parameter sweep. From this table we can see that most of existing systems
does support basic job farming of tasks, provide basic handling of experimental results, but only few of them attempted to provide interactivity i.e Virtual
Instrument [4] and SimX [16]. The former is a completed project which managed to add interactivity by assigning priority to interesting region of parameter
space. The later is an ongoing eﬀort which is aiming to add interactivity by

Table 1. Features supported by existing parameter sweep environment
Experiment Monitoring Scheduling
description
Strategy
Nimrod-G Parametric
MDS
Deadline and
Modelling
Budget
Language
Constraint
APST
APST-XML MDS, NWS, Adaptive,
Ganglia
XSuﬀerage
P-Grade PS-Workﬂow MDS, BDII
Condor
(DAG)
Dagman
based
Virtual
Model
APST Based APST Based
Instrument Description
Language
Sim-X
Scirun
Greedy,
dataﬂow
Fairshare
SEGL
Task/
Unicore
data ﬂow
Based

Result
Emphasizes
Management
File
Computational
Based
Economy
SRB, GridFTP

Scheduling
Heuristics
Workﬂow of
Parameter
Sweep
VI Database
Interactive
Computational
Steering
Shared Object Engineering
Layer (SISOL) Optimization
OODB
Dynamic
Parameter
Studies

A Framework for Interactive Parameter Sweep Applications

485

allowing user to change optimization strategy during experiments. Other type
of interactivity is not yet studied and fully supported by available systems.

4

Requirements of Framework for Interactive Parameter
Sweep

A support environment for interactive parameter sweep experiments, allows a
scientist to eﬃciently perform and manage diﬀerent steps of a parameter sweep
experiment. The goal of performing parameter sweep experiments is to locate
some particular point in the parameter space that satisﬁes some subjective criteria. Back to our examples, in the ADDA experiments the criteria is to minimize
the error compared to the experimental light scattering pattern of RBC cells,
and in the fMRI applications this criteria is to observe the eﬀect of delay in
hemodynamic response function parameters in the analysis results. User must
be able to guide the search away from certain regions of parameter space to
be explored once it is indicated that intermediate results for this region is not
satisﬁying. User can then concentrate on other regions based on intermediate
application results. This requires that the framework allows the creation and
cancellation of application tasks on the ﬂy.
Framework for interactive parameter sweep (FRIPS) extends normal parameter sweep framework by adding user support for interactive visualization of
computing results, parameter space choosing, decision making, and provenance
of computation. FRIPS beneﬁts the state of the art results of existing framework but have new requirements on system design. In this section, we discuss
those requirements from user perspective i.e the scientist/expert who wish to exploit existing parameter sweep applications, application developers perspective
i.e the developer of parameter sweep applications and from the problem solving
environments perspective.
Domain scientists and application developers are basically two types of users
of FRIPS. The domain scientists are experts of the application model and are
interested in using to determine most interesting parameter regions for an application. From the point of view of domain scientists, the details and complexity of
underlaying grid environment should be hidden so that they can focus on their
main concern on performing their experiments. They also need to be able to
monitor the job execution, and view intermediate results. For the interactivity
they need to be able to change parameter space or set new policy for execution
at runtime.
Application developers use this framework to develop experiment for speciﬁc
applications. From the point of view of application developer, porting legacy
application should be possible with minimal eﬀort. The framework should be
ﬂexible enough to allow for diﬀerent sampling policy or optimizer for experiments. From the perspective of a problem solving environment, FRIPS provide
high level user seamless access to underlaying computing environments. In general the following characteristics are desired scalability, adaptability, platform
independence and fault tolerance.

486

5

A. Wibisono et al.

Design Considerations

In this section we describe the design of interactive parameter sweep framework
which will addresses the requirements mentioned in the previous section. The
main challenges in such framework lies on the dynamic nature of both the execution environment and the way scientist conduct such experiments. Therefore
the framework need to be adaptive, both to the changes in the resources, and to
parameter space steering initiated by user.
5.1

Functional Components

We distinguish a number of functional components of FRIPS, a front end, visualizer, a coordinator for parameter sweep experiment, an execution manager,
worker and a result repository, as shown in Fig. 1.

Fig. 1. Main modules of interactive parameter sweep framework

Using the Front End, a user can describe experiments, view computing results,
and steer the execution at runtime. Description of the experiments includes parameter space, sampling strategy, and observation space description. User would
be able to made such intervention based on feedback that he sees on the visualizer. He might make decisions such as modiﬁcation of parameter space, abort
the experiment if intermediate results looks not promising etc.
Visualizer is required to allow monitoring of the progress in an ongoing parameter sweep experiments. Depending on the user conﬁguration at the beginning
of the experiment, intermediate result visualizer might visualize individual experimental results or an aggregated result of previous set of parameter spawned
by parameter sweep coordinator.
Parameter Sweep Coordinator (PS-Coordinator) is the main component which
is responsible for managing parameter space region which is currently being

A Framework for Interactive Parameter Sweep Applications

487

explored during the experiments. This component determines the next set of
interesting parameter to be explored, cancel pending parameter set which is
considered no longer interesting by the user, and manage the results obtained
from past execution of parameter spaces. The decision taken by parameter sweep
coordinator can be based on interactive steering from user, or based on sampling
strategy deﬁned by user at the beginning of the study. Once the parameter sweep
coordinator made decision about the next set of parameter to be explored, it will
contact resource manager for mapping each of parameter to available resources.
Execution Manager is responsible for spawning workers responsible for executing each individual experiments to appropriate grid resources. We will possibly
reuse existing resource manager from our previous work [15] since this component is concern only with appropriate resource allocation for workers.
Results Repository is needed to keep track of results from previous runs of
experiments. This components will also be responsible for the provenance of the
experiments to ensure that current experiment could be reproduced.
Shared Workspace is component responsible form maintaining a state of running parameter sweep experiments. It is a tuple space like workspace, which will
be central communication points between components used in the framework.
Worker is the components that wraps real applications used to perform parameter sweep, to allow the legacy application to be interfaced with our framework. It is responsible for fetching parameters from shared workspace, executing
the application and storing results back to the workspace.
5.2

Current Prototype

We have started to develop a prototype for the proposed framework. Currently
we are focusing on the PS Coordinator, execution manager, and management
of experiment status. We consider these three components as the main building
blocks on top of which the interactivity features is built. One of the most important issue to develop these components is to provide a platform to manage the
state of the parameters. All three components (PS Coordinator, execution manager, and management of experiment status) need to have access to the state of
the parameter to perform their task. In the current prototype the state of a running parameter sweep experiment is maintained by a tuple space like workspace.
Shared workspace allows concurrent access to experiment status such as active
parameters, intermediate results and available workers.
The PS Coordinator, execution manager and later on the visualizer can concurrently access or modify the status of the experiment stored in the shared
workspace. First PS Coordinator stores the next set of parameters to be executed into the workspace. This set is determined by initial sampling strategy, or
on later stage based on feed back from user interaction. The visualizer retrieves
the available intermediate results, and presents them to the end-user allowing
him to follow the progress of the experiment and interact with the system to
make the adequate changes. Finally, the execution manager accesses the experiments to provide information about available workers.

488

A. Wibisono et al.

In the current prototype each worker is spawned by the execution manager,
and provided with the following elements: the location of the workspace, and the
experiments it is associated with. The worker is responsible for retrieving the parameters needed to execute the experiment, performs the actual execution of the
experiment and stores back results in the shared workspace. If the size of results
is very large only a reference to the actual location of the results is stored.
Since the worker is an active agent pulling parameters from the workspace,
we do not have problem with restriction from common grid infrastructure where
inbound connectivity to worker nodes is prohibited. Using this pull model the
framework is more scalable, any number of workers can be added as soon as
resources are available to accommodate the worker.
The current prototype supports limited interactivity features. At this stage
the user can cancel at will unprocessed parameters and/or replacing with new
set of parameters, stopping the experiment if the scientist consider no further
exploration is necessary and also requesting execution manager to spawn more
workers in resources if needed. For monitoring purposes, users can view active
parameters that are being processed, available workers and intermediate results.
Further interactivities will be supported at the next development stage of this
framework.
5.3

Modelling of the System

We have presented our approach for designing and prototyping the interactive
parameter sweep framework. We will perform further analysis based on Model
Driven Architecture (MDA) [6], an architectural framework based on computational independent model, platform independent model and platform speciﬁc
model that will enables rapid development of new system speciﬁcation.
We will use available grid services as a building block for this framework. We
consider that it is necessary to formally analyze the interaction among this basic
grid services within our framework. For analysing the interaction among basic
grid services used in the framework, we are considering the use of orchestration language ORC [14]. Grid service interactions including resource discovery,
resource contract negotiation, job placement is essential in the development of
this interactive framework. It has been shown in [14] that ORC can provide the
means to describe these essential features of grid management.

6

Summary

In this paper we use two use cases to analyze basic scenarios in typical parameter
sweep applications, and then a review on existing parameter sweep frameworks
is given. From the research, we learned that including human knowledge in the
runtime loop of parameter sweep application is essential to improve the eﬃciency of performing parameter sweep experiments. We argued that the batch
based execution in existing frameworks hampers the inclusion of human expertise in runtime loop of parameter sweep, and we propose a new framework for
interactive parameter sweep.

A Framework for Interactive Parameter Sweep Applications

489

We identify the requirements for interactivity during execution of parameter
sweep experiments. We present our initial design supporting these requirements
and describe the modelling approach that we will use to further analyze this
design. A prototype that supports basic interactivity, has been developed.
In this paper we have focused mainly on achieving interactivity on performing
parameter sweep application. In future work, we plan to focus our research on
the adaptive execution of parameter sweep experiments. The added interactivity
poses additional challenge, since changes now come from both dynamic grid
resource environment, and interactive behaviour of the user.
Acknowledgements. This work was carried out in the context of the Virtual

Laboratory for e-Science project (www.vl-e.nl). Part of this project is supported
by a BSIK grant from the Dutch Ministry of Education, Culture and Science
(OC&W) and is part of the ICT innovation program of the Ministry of Economic
Aﬀairs (EZ). The authors of this paper would like to thank all the members in
the VL-e SP2.5 especially to Vladimir Korkhov, Dmitry Vasyunin and Silvia
Ollabariaga for fruitful discussion.

References
1. Buyya, R., Abramson, D., Giddy, J.: Nimrod/G: An Architecture for a Resource
Management Scheduling System in a Global Computational Grid. In: 4th International Conference on High-Performance Computing in the Asia-Paciﬁc Region, pp.
283–289. IEEE Computer Society, Los Alamitos (2000)
2. Casanova, H., Berman, F., Obertelli, G., Wolski, R.: The AppLeS Parameter Sweep
Template: User-Level Middleware for the Grid. Sci. Program. 8, 111–126 (2000)
3. Casanova, H., Bartol, T., Berman, F., Stiles, J.: Distributing MCell Simulations
on the Grid. Int. J. High Perform. Comput. Appl. 15, 243–257 (2001)
4. Casanova, H., Berman, F., Bartol, T., Gokcay, E., Sejnowski, T., Birnbaum, A.,
Dongarra, J., Miller, M., Ellisman, M., Faerman, M., Obertelli, G., Wolski, R.,
Pomerantz, S., Stiles, J.: The Virtual Instrument: Support for Grid-Enabled Mcell
Simulations. Int. J. High Perform. Comput. Appl. 18, 3–17 (2004)
5. Currle-Linde, N., Kuester, U., Resch, M., Risio, B.: Science Experimental Grid
Laboratory (SEGL) Dynamic Parameter Study in Distributed Systems. In: Joubert, G.R., Nagel, W.E., Peters, F.J., Plata, O.G., Tirado, P., Zapata, E.L. (eds.)
PARCO 2005, vol. 33, pp. 49–56. Central Institute for Applied Mathematics, J¨
ulich,
Germany (2005)
6. Djuric, D., Devedzic, V.: Model Driven Architecture and Ontology Development.
Springer, Heidelberg (2006)
7. Gil, Y., Deelman, E., Ellisman, M., Fahringer, T., Fox, G., Gannon, D., Goble, C.,
Livny, M., Moreau, L., Myers, J.: Examining the Challenges of Scientiﬁc Workﬂows.
Computer 40, 24–32 (2007)
8. Inda, M., Belloum, A., Roos, M., Vasyunin, D., de Laat, C., Hertzberger, L.O.,
Breit, T.M.: Interactive Workﬂows in a Virtual Laboratory for e-Bioscience: the
SigWin-Detector Tool for Gene Expression Analysis. In: 2nd IEEE International
conference on e-Science Grid computing, pp. 19–19. IEEE Computer Society, Washington (2006)

490

A. Wibisono et al.

9. Kacsuk, M.: Parallel program development execution in the grid. In: International
Conference on Parallel Computing in Electrical Engineering, pp. 131–138. IEEE
Computer Society, Washington (2002)
10. Olabarriaga, S., Nederveen, A., O’Nuallain, B.: Parameter Sweeps for Functional
MRI Research in the Virtual Laboratory for e-Science Project. In: 7th IEEE International Symposium on Cluster Computing and the Grid, pp. 685–690. IEEE
Computer Society, Washington (2007)
11. Penttila, A., Zubko, E., Lumme, K., Muinonen, K., Yurkin, M., Draine, B., Rahola,
J., Hoekstra, A., Shkuratov, Y.: Comparison between discrete dipole implementations exact techniques. J. Quant. Spectros. Radiat. Transf. 106, 417–436 (2007)
12. Smith, S., Jenkinson, M., Woolrich, M., Beckmann, C., Behrens, T., JohansenBerg, H., Bannister, P., De Luca, M., Drobnjak, I., Flitney, D., Niazy, R., Saunders,
J., Vickers, J., Zhang, Y., De Stefano, N., Brady, J., Matthews, P.: Advances in
Functional Structural MR Image Analysis and Implementation as FSL. NeuroImage 23, 208–219 (2004)
13. Stankovski, V., Dubitzky, W.: Special section: Data mining in grid computing
environments. Future Gener. Comput. Syst. 23, 31–33 (2007)
14. Stewart, A., Gabarro, J., Clint, M., Harmer, T.J., Kilpatrick, P., Perrott, R.: Managing Grid Computations: An ORC-Based Approach. In: Guo, M., Yang, L.T., Di
Martino, B., Zima, H.P., Dongarra, J., Tang, F. (eds.) ISPA 2006. LNCS, vol. 4330,
pp. 278–291. Springer, Heidelberg (2006)
15. Wibisono, A., Vasyunin, D., Korkhov, V., Zhao, Z., Belloum, A., de Laat, C.,
Adriaans, P., Hertzberger, L.O.: WS-VLAM: A GT4 Based Workﬂow Management
System. In: Shi, Y., van Albada, G.D., Dongarra, J., Sloot, P.M.A. (eds.) ICCS
2007. LNCS, vol. 4489, pp. 191–198. Springer, Heidelberg (2007)
16. Yau, S.M., Grinspun, E., Karamcheti, V., Zorin, D.: Sim-X: Parallel System Software for Interactive Multi-experiment Computational Studies. In: 20th International Parallel and Distributed Processing Symposium, pp. 10–10. IEEE Press,
New York (2006)

