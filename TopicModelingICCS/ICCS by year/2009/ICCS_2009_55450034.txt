Teaching Model for Computational Science and
Engineering Programme
Hayden Stainsby, Ronal Muresano, Leonardo Fialho, Juan Carlos Gonz´
alez,
Dolores Rexachs, and Emilio Luque
Universitat Aut`
onoma de Barcelona
Computer Architecture and Operating System Department (CAOS)
Barcelona, Spain
{hstainsby,rmuresano,lfialho,jgonzalez}@caos.uab.es
{dolores.rexachs,emilio.luque}@uab.es

Abstract. Computational Science and Engineering is an inherently multidisciplinary ﬁeld, the increasingly important partner of theory and
experimentation in 0the development of knowledge. The Computer Architecture and Operating Systems department of the Universitat Aut`
onoma
de Barcelona has created a new innovative masters degree programme
with the aim of introducing students to core concepts in this ﬁeld such
as large scale simulation and high performance computing. An innovative course model allows students without a computational science background to enter this arena. Students from diﬀerent ﬁelds have already
completed the ﬁrst edition of the new course and positive feedback has
been received from students and professors alike. The second edition is in
development.

1

Introduction

Computational Science and Engineering (CSE) is the increasingly important
partner of theory and experimentation in the development of knowledge. CSE
requires multidisciplinary work, which allows the undertaking of complex scientiﬁc and engineering problems, under the unifying concepts of computing and
mathematics.
Diﬀerent industrial sectors such as medicine, life sciences, mechanics, economy, social sciences and management together with engineering use key CSE
techniques, like modelling and simulation, to aid in solving their problems [1].
Due to this requirement the Computer Architecture and Operating Systems
(CAOS) department of the Universitat Aut`
onoma de Barcelona (UAB) initiated
an innovative masters programme in Computational Science and Engineering.
The members of the CAOS department have previous experience in these areas,
for some years they have been performing research in the ﬁelds of advanced parallel and distributed simulation techniques, such as individual orientated simulation in biology and forest ﬁre propagation, using High Performance Computing.
Supported by the MEC-Spain under contract TIN2007-64974.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 34–43, 2009.
c Springer-Verlag Berlin Heidelberg 2009

Teaching Model for Computational Science and Engineering Programme

35

The results of this experience have been a number of masters and doctoral (PhD)
theses as well as research papers and participation in diﬀerent research projects
funded by the European Union.
The programme has been designed according to the European Higher Education Area (EHEA), the so-called Bologna process, the current European standardised university degree system [2].
The masters programme in CSE is geared towards accepting students of various backgrounds across diﬀerent sectors. This includes students from all areas
that make use of mathematical modelling and scientiﬁc computing technologies.
Further to the core subjects, depending on the student’s background, a different set of subjects will be oﬀered to complement their knowledge according
to the skills expected at the conclusion of the programme.
Upon concluding the programme, students will have the capability to identify
computational needs in the areas in which they are working. The degree gives
students the option of following either an academic or professional career path.
In this programme students will be given opportunities to join and perform
within a research group as well as the possibility of working with high performance computers. Students learn investigation techniques, experience participating in multidisciplinary groups, and working with other people with expertise in
diﬀerent areas. These skills are applied in the development of the masters thesis
for students following a research specialisation, or project report for the students
focussing on professional skills.
This paper is written as follows. Section 2 discusses the course model, both the
process of knowledge standardisation and the core and optional subjects. Section
3 presents the experiences obtained and observations made after the ﬁrst year
of running the CSE masters programme, shown using examples of work from
masters theses. Finally, the conclusions are stated in section 4.

2

Overview of the Proposed Course Model

The classical concept of three pillars of knowledge, upon which computational
science is based, has driven the model for the masters degree in Computational
Science and Engineering. These three pillars are Mathematics, Computation,
and Science and Engineering as shown in Figure 1. The relationship between
these three pillars and the content of the CSE masters programme is discussed
in section 2.2.
According to the Bologna Process to achieve a masters degree a student must
have completed a total of 300 European Credit Transfer System (ECTS) credits including the bachelor degree (180 ECTS) or graduate (240 ECTS) credits.
This model accepts students who have already completed more than 180 ECTS
credits [3][4].
The core subjects of this masters programme are worth a total of 60 ECTS
credits. The programme is divided in three compulsory subjects and one optional
subject each worth 10 ECTS credits and a project which is worth 20 ECTS
credits. There are nine additional subjects, each also worth 10 ECTS credits.
The complete course structure is shown in Figure 2.

36

H. Stainsby et al.

Fig. 1. Three pillars of Computational Science and Engineering

Students who have already completed 240 ECTS credits and have the requisite
computational science background are able to begin the masters course with the
core subjects, the second year of the programme. Other students may need to
complete all or part of the ﬁrst year. There are two possible reasons for this, the
ﬁrst is that the student has only completed 180 ECTS credits, usually analogous
to three years of study under the ECTS. The second reason is that the student
requires additional knowledge to follow the core of the course, this is discussed
further in Section 2.1.

Fig. 2. CSE Course Structure

Teaching Model for Computational Science and Engineering Programme

2.1

37

Knowledge Standardisation

This Computational Science and Engineering masters programme is designed
to accept students from various academic ﬁelds. A challenge of this model is
that students may begin the course without suﬃcient background in one of the
fundamental areas of the course, such as computational science, mathematics, or
parallel applications. In order to solve this problem, the masters programme has
proposed a criteria to help standardise the students’ knowledge in computational
science.
The proposed criteria is based on two phases. The ﬁrst phase starts with
the analysis of each candidate’s previous academic experience, sent during their
application. In the second phase, once the candidate has been accepted, they
attend an interview with the course director in order to deﬁne what additional or
complimentary knowledge they will require. The optional subjects of the masters
programme will provide the opportunity for the student to gain this knowledge.
A multidisciplinary committee will analyse each candidate’s academic experience in order to deﬁne which subjects from the student’s previous studies could
be credited towards the masters course model. Taking into account the number
of ECTS credits which the candidate must achieve to complete a masters degree, a diﬀerent number of subjects may be required. This analysis takes into
account the areas in which the candidate has previous academic experience, e.g.
a candidate who already has some programming experience will most likely be
better equipped to understand the course core than another candidate with no
equivalent experience. There are a number of diﬀerent aspects that are taken
into consideration when choosing the optional subjects which will make up the
student’s knowledge standardisation. Some examples are listed in Table 1.
The possibility of choosing these optional subjects permits the student to compose a more personalised programme. The completion of the optional subjects
also allows the student to follow the course core.
2.2

Core Subjects

The core of the course is comprised of two parts. The ﬁrst part involves three
core subjects and forms the basis of the skills students will learn in the masters
programme. The second part allows students to orientate themselves towards
research or professional skills, by choosing either the masters thesis or a professional internship.
While each of the core subjects features aspects of one of the three pillars
more than the others, just like Computational Science and Engineering itself
they are composed of all three key areas. Tools and Environments for Parallel Programming draws mainly from Computing , Modelling and Simulation is
seated mostly within Science and Engineering, and Numerical Treatment of Applications is based in Mathematics.
Tools and Environments for Parallel Programming. Focusses on introducing students to parallel programming and the variety of tools available to

38

H. Stainsby et al.
Table 1. Important aspects of a student’s previous experience and examples
Academic
experience

Professional
experience

Masters
orientation

Area of
interest

The speciﬁc topics the student has studied in previous
academic courses. This also takes into account additional
certiﬁcates and accreditations in relevant ﬁelds, e.g. an
economist who has completed a course in ﬁnancial mathematics may not need to take a numerical analysis subject.
Particular aspects of the student’s professional career
which are relevant to the CSE course, e.g. an electronic
engineer who has worked with micro-controller programming will most likely not need to take the introductory
programming subject.
According to the student’s motivation for starting the
masters programme, whether they are considering a professional specialisation or to begin a research career, e.g.
a student wishing to follow a research path would ﬁnd
subjects such as Methodology for the assignment in computational science or Scientiﬁc computation and visualisation of most interest.
Corresponding to the ﬁeld in which the student wishes to
apply the knowledge gained in this masters course, different subjects should be considered, e.g. a biologist who
wishes to work in the management of a research centre
which makes use of large scale calculations would attend
subjects oriented towards computer architecture such as
High performance computers or Distributed systems and
GRID.

assist in all stages of the design, construction, and analysis of parallel applications. In this subject the students must make use of knowledge from all areas of
CSE.
As part of this subject, the student will choose a problem to solve through the
use of parallel computing. The subject is structured around providing the student
with the skills and knowledge necessary to complete this project. The course
begins with introductions to various methods of parallel programming, such as
message passing and shared memory. During this time the student will select a
topic and present it, along with how they propose to create a parallel version, to
the class. In this presentation feedback is given, both by the class instructor and
fellow students. Using this knowledge, the student then goes away to complete
the parallelisation and performance analysis of their project. At the same time
the class topics begin to cover a range of skills that will assist the student in this
task, skills such as performance modelling and analysis, and scalability.
While the student is working on their personal project they may encounter
diﬃculties, whereupon they are encouraged to seek assistance from their class
instructor. This interaction provides a more personalised approach to teaching,

Teaching Model for Computational Science and Engineering Programme

39

Table 2. Course content for Tools and Environments for Parallel Programming
Parallel
programming
Parallel
paradigms
Performance
analysis

Message passing, shared memory, and skeletons
Master-worker, pipeline, and single programme multiple data
Performance models, dynamic instrumentation, and
automatic tuning tools

where the instructor can give advice on tools and methods relating to the student’s speciﬁc problem ﬁeld.
At the end of the subject, the student will give a second presentation to the
class detailing the process they went through in creating a parallel version of
their problem and the performance that it has achieved.
Throughout this entire process the student will learn far more than how to
write parallel code. They will understand the processes involved in analysing a
serial algorithm and making eﬃcient use of resources in order to parallelise it.
Table 2 shows the subject contents.
Modelling and Simulation. Aims to develop a model which represents a
problem in a speciﬁc research ﬁeld. This permits the student to apply methodologies, following scientiﬁc criteria, in order to deﬁne and extract conclusions
and evaluate performance on the proposed problem.
The student ﬁrst learns the basics of modelling, the considerations that need
to be made when a real world system is modelled and how the expected outcome
of a model eﬀects decisions about which aspects of a system are important in
the model.
This knowledge is used when the student goes on to learn about the various methods of simulation, especially the uses of system dynamics and discrete
event simulation techniques. This leads into the importance of the analysis of
simulation data and design practices.
Throughout a number of classes in this subject speciﬁc simulation areas are
presented by experts in their respective ﬁelds. The student will understand how
modelling and simulation is applied in real world situations, for example classes
are given by a sociologist with computational experience. The student is shown
a speciﬁc social sciences model and the method used to solve it using simulation
software. This hands-on experience teaches the student the techniques and tools
used to solve many kinds of problems. Other use cases give the student the
appreciation of speciﬁc aspects of simulation.
During this subject the student will understand not only the basic concepts of
how to develop models of real world systems and simulate them using computer
software, but ways in which this has been applied to speciﬁc problem areas.
Table 3 shows the subject contents.
Numerical Treatment of Applications. Teaches students to apply the numerical techniques of computational modelling for applications in speciﬁc ﬁelds

40

H. Stainsby et al.
Table 3. Course content for Modelling and Simulation
Modelling

Simulation

Application
use cases

Types of models (Heuristic and Empirical), application ﬁeld (Conceptual and mathematical), representation ﬁeld (Qualitative and Numerical) and veriﬁcation
and validation
Physical systems and simulation, language and tools,
performance metrics and distributed high performance
simulation
Biological, economic and social systems, and propagation of forest ﬁres

of science and engineering. This subject is a link between Modelling and
Simulation and Tools and Environments for Parallel Programming just as mathematics is the path between a problem and the problem solving process.
In the ﬁrst part of the subject the student learns mathematical techniques
and how they are applied in a computing system. This covers such topics as
ﬂoating-point errors, data mining, and eﬃcient methods for storing data. This
is important when explaining the solving of linear equation systems, where the
student will use diﬀerent solving methods and compare them using mathematical
software.
The student will choose a topic in the area of statistical modelling which they
will present to the class. This builds upon what the students have already been
taught in class and allows the student to investigate a topic of interest to them in
more depth. Another presentation is given by the student on diﬀerent techniques
for solving diﬀerential and integral calculus. These techniques are analysed and
their potential for parallelisation is investigated.
This method of constant student feedback in the form of projects and presentations given to their peers allows a degree of interaction between the students
and the instructor that gives an insight into these topics with the objective of
identifying and reinforcing the key points.
The subject contents are shown in Table 4.
Table 4. Course content for Numerical Treatment of Applications
Mathematics Application to problem modelling, linear equation systems, statistics, and integral and diﬀerential calculus
Application Eﬃcient methods of storing information, optimisation
and search methods

Selection of the Master Orientation. Once the student has completed these
three core subjects they will choose the focus of their masters degree. As mentioned previously, there are two possible proﬁles, researcher or professional skills.
Students who choose the research focus for their masters will join one of the
existing research groups and choose a topic in that area. During the ﬁrst part

Teaching Model for Computational Science and Engineering Programme

41

of the course the student will research their chosen area and attend the research
group meetings. This culminates in the ﬁnal part of the course where they will
write the masters thesis, and must defend it in front of a tribunal.
The students that follow the professional skills course will spend time working
on a computational science project during an internship in a ﬁrm. They will then
produce a report about the project and present it to a panel composed professors
from the CAOS department.
Throughout this model students undergo a signiﬁcant learning process. The
three core subjects, and subsequent project give each student a well rounded
knowledge of all aspects of the three Computational Science and Engineering.
2.3

Optional Subjects

The optional subjects exist to permit students from diﬀerent areas to standardise their knowledge so that they may better follow the core subjects. Students
with degrees not related to computational science or with bachelor degrees must
choose a set of subjects in order to perform between 10 and 60 additional ECTS
credits, depending on their previous knowledge. These are also the subjects that
students choose from to ﬁll the optional subject space in the course core.
There are nine optional subjects which the students may choose from, each
one worth 10 ECTS credits. These subjects can be split into two groups. The
ﬁrst ﬁve subjects teach knowledge complimentary to the course core, and are as
follows.
– Methodology for the assignment in computational science discusses
the standards and formats used in project ﬁnancing, writing computational
science projects, and the presentation of results. Students learn the processes
involved in applying for ﬁnancing for projects and present a mock application
to the other students. This is the subject where students will gain most of
the knowledge they require to present their masters thesis.
– High performance computers describes the computer components used
to create high performance machines, interconnection networks, computing
clusters, fault tolerance techniques, and input/ouput mechanisms. As part
of this subject students research an existing supercomputer and perform an
analysis of it’s components. Students also complete practical work either using a network simulator or parallel performance simulation software. Upon
completing this subject the student will be able to evaluate diﬀerent architectures to choose the most appropriate according to given criteria.
– Distributed systems and GRID introduces students to parallel and distributed systems across diﬀerent administrative domains, including programming, performance optimisation, and simulation. During this subject the
students will read a number of seminal papers in the ﬁeld of distributed system and take turns presenting the contents to the other students, followed
by discussions on these topics between the students and the instructor.
– Application principles teaches students to recognise diﬀerent applications
that need high performance computing and how to identify their requirements. In this subject the main goal is to show students the many uses of

42

H. Stainsby et al.

high performance applications in industry. Students hear lectures from individuals from many diﬀerent ﬁelds that use parallel tools, and can see the
diverse range of areas that make use of them. Students will also choose an
application and design some improvements to it, the results of which are
presented to the class.
The remaining four subjects provide introductory knowledge, which enables students to follow the course core, they are listed below.
– Operating Systems assures that students have a standard level of knowledge of the eﬃcient use of operating systems in scientiﬁc computation ﬁelds.
– Scientific Computation and visualisation teaches the basic techniques
of representing computational results in diﬀerent scientiﬁc ﬁelds.
– Introduction to programming gives students a knowledge of programming and debugging in scientiﬁc languages as well as the basic concepts of
software engineering.
– Introduction to parallel programming establishes methodologies and
strategies to paralellise applications using message passing and shared memory libraries.
– Numerical analysis teaches students to resolve diﬀerential equation systems and computational optimisation techniques.
Alongside the course work, there are conferences and seminars organised within
the department, at which presentations are given by relevant people from a range
of academic and professional areas, complementing the students’ studies.

3

Experience Obtained

The Computational Science and Engineering masters programme has already
begun, thus some experiences can be presented. Masters theses have been completed in diﬀerent ﬁelds, including biology and forest ﬁre propagation. There are
also ongoing projects in other ﬁelds, such as social sciences and economics. These
projects have been built upon areas in which the CAOS department already has
experience1 . Three examples of masters theses, which were presented and defended in July 2008, will be described here: forest ﬁre propagation prediction[5],
modelling and simulation of ﬁsh school movement[6], and parallelisation of the
kriging interpolation method[7]. These topics provide good examples of ﬁelds
which make use of the three pillars of computational science and engineering in
order to achieve their objectives.
The prediction of forest ﬁre propagation is possible through the use of computational science and engineering methods. In this case, science and engineering
provides the moisture burn model, associated meteorological variables and other
input data in order to create the propagation model. Through mathematical
techniques this model can be enhanced with genetic and heuristic. Finally, computation gives the calculation power necessary to produce a set of scenarios based
on these variables.
1

http://caos.uab.es/research projects.php

Teaching Model for Computational Science and Engineering Programme

43

The modelling of ﬁsh school behaviour is already established and well known
in the ﬁeld of biological science. However, in this case the numerical model does
not accurately represent reality. Using fuzzy logic it may be possible to achieve
better results. Computation provides the resources required to simulate this
model and the mechanisms to visualise the results in a manner that permits the
biological specialists to reﬁne their original model.
Kriging is a method for interpolating unknown values from data at known
locations, while slower than other methods of interpolation it can provide more
accurate results. By implementing a parallel version of kriging interpolation using
message passing on a distributed memory machine it was possible to signiﬁcantly
reduce the execution times of the entire process.
These examples show how this course model helps specialists use computational science and engineering in order to solve their problems.
To appraise the students’ degree of satisfaction the CAOS department prepared a survey where students evaluated the masters programme in general as
well as each speciﬁc subject. These results are being used in the development of
the second edition of this course.

4

Conclusion

This paper has presented an innovative model for teaching computational science
and engineering. The focus is providing the opportunity for students with and
without computational science backgrounds to be introduced to this ﬁeld. Some
positive results have been shown through masters theses, which demonstrate the
eﬀective application of this model.
In the second year of this course, the number of students in the programme
has increased considerably, which indicates the acceptance of this model.

References
1. Guha, R., Hartman, J.: Teaching parallel processing: Where Architecture and Language Meet. In: Proceedings of Twenty-Second Annual conference on Frontiers in
Education, 1992, pp. 475–479 (1992)
2. Wachter, B.: The bologna process: developments and prospects. European Journal
of Education 39(3), 265–273 (2004)
3. Kargidis, T., Kefalas, P., Stamatis, D., Tsadiras, A.: Towards a European Credit
Transfer System for Networked Learning (ECTS-NL) (2003)
4. European Union: ECTS Users’ Guide. The European Credit Transfer System. European Commission Publication 31(03) (1998)
5. Wendt, K.: Eﬃcient knowledge retrieval to calibrate input variables in forest ﬁre
prediction. Master’s thesis, Universitat Aut`
onoma de Barcelona (2008)
6. Gonzalez, J.: Individual oriented model applying fuzzy logic. Master’s thesis, Universitat Aut`
onoma de Barcelona (2008)
7. Pesque, L.: Soluci´
o paral.lelitzada d’interpolaci´
o kriging amb ajust automatitzat del
variograma. Master’s thesis, Universitat Aut`
onoma de Barcelona (2008)

