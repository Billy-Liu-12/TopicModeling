Snapshot-Based Data Backup Scheme: Open
ROW Snapshot
Jinsun Suk, Moonkyung Kim, Hyun Chul Eom, and Jaechun No
Dept. of Computer Software
College of Electronics and Information Engineering
Sejong University, Seoul, Korea

Abstract. In this paper, we present the design and implementation details of the Open ROW Snapshot which is the data backup scheme based
on the snapshot approach. As the data to be stored in storage systems are
tremendously increased, data protection techniques have become more
important to provide data availability and reliability. Snapshot is one
of such data protection techniques and has been adopted to many ﬁle
systems. However, in large-scale storage systems, adopting a snapshot
technique to prevent data loss from intentional/accidental intrusion is
not an easy task because the data size being backup-ed at a given time
interval may be huge. In this paper, we present the Open ROW Snapshot that has been implemented based on the ﬁle system-based snapshot
approach. The Open ROW Snapshot provides a widely portable structure and causes less I/O processing overhead than the ROW(Redirect-On
Write) method does. Furthermore, the Open ROW Snapshot provides a
capability of maintaining the disk space assigned to snapshot images in
a consistently-sized disk portion. We present the performance results of
the Open ROW Snapshot obtained from the Linux cluster located at
Sejong University.

1

Introduction

Many data recovery approaches [11,12,13] have been developed to protect important data against system crash. Especially, the snapshot-based data recovery
has been adopted to many ﬁle systems [5,6,7,8,9,10] to provide data availability
and reliability. However, in large-scale storage systems, implementing a snapshot technique to prevent data loss from intentional/accidental intrusion is not
an easy task because the data size being backup-ed at a given time interval may
be huge. Simply duplicating the inodes and data blocks associated with a pointin-time snapshot causes high I/O processing overhead. Furthermore, maintaining
a large number of snapshot images consume a large portion of disk space.
Snapshots can be built in two diﬀerent ways; one is a volume-based snapshot in
which the snapshot images are taken under LVM (Logical Volume Manager), and
the other is a ﬁle system-based snapshot in which all the snapshot related operations are performed under the ﬁle system control. Even though the volume-based
This work was supported by a Seoul R&BD program.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 657–666, 2009.
c Springer-Verlag Berlin Heidelberg 2009

658

J. Suk et al.

snapshot can eﬃciently manage snapshot images and disk space, it requires to preserve some disk space for retaining snapshot images. The ﬁle system-based snapshot does not need to reserve the disk space to store snapshot images. However,
because the ﬁle system-based snapshot is tightly coupled to the underlying ﬁle
system, porting a snapshot implementation among several ﬁle systems would take
considerable overheads. Porting a snapshot becomes even worse when ﬁle systems
that are supposed to use a snapshot support diﬀerent block allocation policies.
We developed the Open ROW Snapshot that combines the good features of
both ﬁle system-based method and ROW approach. Our primary objectives in
developing the Open ROW Snapshot were to minimize I/O processing overhead
occurred between successive snapshot images, to provide a wide range of portability by supporting both the extent-unit and block-unit allocation policies, and
to provide a capability of managing disk space for snapshots in a consistent size
of disk section. In order to minimize I/O processing overhead occurred in duplicating inodes and data blocks to take a point-in-time snapshot, we chose to adopt
the ROW-based snapshot approach. Besides, we used a pre-allocated metatdata
to reduce the block allocation time for each instantaneous snapshot. Furthermore, the Open ROW Snapshot can easily be combined with the extent-based
storage structure [1,2], as well as be combined with the block-based storage
structure [3,4]. When the Open ROW Snapshot is combined with an extentbased storage structure, it can easily detect the sharing of data blocks between
several snapshot images by checking the value of the bitmap ﬂag. This helps to
eﬃciently eliminate the corrupted snapshot images in the snapshot history.
The rest of this paper is organized as follows. In Section 2, we discuss the
design motivations of the Open ROW Snapshot. Section 3 describes the implementation details of the Open ROW Snapshot and in Section 4, we present the
performance results obtained from the Linux cluster at Sejong University. In
Section 5, we conclude our paper.

2
2.1

Design Motivation
Minimize I/O Processing Time

In order to minimize I/O processing overhead occurred in duplicating inode and
data blocks to take a point-in-time snapshot, we chose to adopt the ROW-based
snapshot approach. Additionally, in adopting the ROW approach, we used a
pre-allocated metadata to reduce the block allocation time for each instantaneous snapshot. When the inode of an active ﬁle is created, we also allocate an
additional inode to be used for the following snapshot image. When a point-intime snapshot is taken, this additional inode becomes an inode of the snapshot
ﬁle. Also, instead of simply duplicating all the associated blocks of the snapshot
ﬁle, the snapshot inode just links pointers to the original blocks to denote that
these data blocks are shared between the active ﬁle and the snapshot ﬁle. In this
way, we can signiﬁcantly reduce the processing time for the block allocation,
compared to that of COW(Copy On Write) approach.

Snapshot-Based Data Backup Scheme: Open ROW Snapshot

2.2

659

Provide a Wide Range of Portability

The Open ROW Snapshot can easily be combined with the extent-based storage
structure where a contiguous number of blocks are allocated to a ﬁle segment, as
well as can be combined with the block-based storage structure. When the Open
ROW Snapshot is combined with the extent-based structure, such as XFS [1,2],
each inode, including the inode of a snapshot image, contains the extents composed of three components; the starting block address, block count describing the
number of blocks contiguously allocated, and bitmap ﬂag describing the sharing
of the data blocks belonging to the extent. If the bitmap ﬂag is set to 1, it would
then denote that the data blocks belonging to the corresponding extent are recently allocated, and thus no other inode currently shares these data blocks yet.
If the ﬂag is set to 0, it would then mean that the data blocks belonging to the
associated extent are shared between ﬁles, thus a careful block management is
required while the modiﬁcation to the data blocks happens to these blocks.
2.3

Manage Disk Space for Snapshots

We developed a snapshot spatial algorithm that enables us to keep the disk
space allocated for snapshot images as smallest as possible. In the Open ROW
Snapshot, all the snapshot images, including their active ﬁle, are grouped by two
pointers, prev core snap and next core snap, and in each snapshot group, the
active ﬁle is linked at the front and the oldest snapshot image is linked at the
back. Constructing a snapshot group of an active ﬁle enables us to easily trace
back and forth the link to ﬁnd which data blocks are shared between ﬁles. When
the Open ROW Snapshot ﬁnds corrupted or backup-ed snapshot images while
traversing a snapshot group, the snapshot spatial algorithm can easily check
the sharing of the data blocks belonging to those images. It also unlinks the
associated inode from the snapshot group, and thus enables to keep snapshot
images in a consistently-sized disk section.

3
3.1

Implementation Details
Overall Structure

Figure 1 illustrates an overview of the Open ROW Snapshot. In this Figure,
the Open ROW Snapshot was conﬁgured to support for the extent-based allocation. For two active ﬁles File1 and File2, there exist two snapshot ﬁles
each, snapshot1 and snapshot2. The Open ROW Snapshot uses two pointers,
prev core snap and next core snap, to easily make a snapshot group of an active ﬁle, and thus to verify the integrity of each snapshot ﬁle with low processing
overhead. The ﬁle pointed by prev core snap is of a preceding snapshot image,
while conversely, the ﬁle pointed by next core snap is of a following snapshot
image or an active ﬁle.
Figure 1 shows how the snapshot images are grouped as time goes by. At
t0, two active ﬁles, File1 and File2 are created, and then, at t1, these two

660

J. Suk et al.

k







}mz
W

vGyv~Gz
X

mX

X











Y

Y


X

mY



X

Y















X





























Fig. 1. An overview of the snapshot structure

ﬁles became the snapshot images of their active ﬁles, while being linked with
their active ﬁles by using the prev core snap. To easily ﬁnd out which is the
next snapshot image of a ﬁle, each snapshot image is linked with the following
one by using the next core snap. Grouping the related snapshot images with
these two pointers enables for the Open ROW Snapshot eﬃciently to perform
the snapshot spatial algorithm to eliminate a corrupted snapshot image or a
backup-ed snapshot image. As a result, the snapshot ﬁles can be stored in a
small-sized disk space.
When the inode of an active ﬁle is created, an additional inode, linked with the
active inode by the prev snap ino, is also pre-allocated to be used as the inode of
the following snapshot image. When the next snapshot is taken, there is no need
to allocate and to replicate the inode of its active ﬁle. Only thing to be performed
at that time is to adjust two pointers, prev core snap and next core snap, and
to setup the bitmap value of the extent to denote the sharing of the data blocks.
The Open ROW Snapshot provides a snapshot daemon that periodically wakes
up and issues a snapshot system call to check the state of each snapshot image.
3.2

Snapshot Procedure

The Open ROW Snapshot assigns a bitmap value to each extent structure to
manage the sharing of the data blocks, as shown in Fig. 2(a). If the bitmap value
is set to 0, it then means that the data blocks of the extent can not be modiﬁed
because those blocks must have been shared with other ﬁles. Otherwise, the

Snapshot-Based Data Backup Scheme: Open ROW Snapshot

661

blocks of the extent can be modiﬁed. Figure 2(a) shows an active ﬁle using the
extent storage structure. The ﬁle is composed of ﬁve data blocks, B0 through
B4, and its extent includes three components: the starting block number, block
count and bitmap value. Because there is no snapshot taken yet, the bitmap
value is set to 1, meaning that no other ﬁle currently shares the data blocks
belonging to this ﬁle. Figure 2(b) describes the steps involved in taking the ﬁrst
snapshot. The ﬁle located at the left side in Fig. 2(b) denotes an active ﬁle and
the ﬁle at the right side denotes its point-in-time snapshot image.
As can be seen in Fig. 2(b), the bitmap value of the active ﬁle is changed
from 1 to 0 at the time of taking the ﬁrst snapshot image because the data
blocks of the active ﬁle are shared with those of the ﬁrst snapshot. Changing
a bitmap value has a signiﬁcant performance impact on data modiﬁcation or
deletion because, by checking the current value of the bitmap, we can determine
if the corresponding data block enables to be updated or the new blocks must
be allocated to get the new data values.
Figure 2(c) describes the steps involved in the ﬁrst update occurred after the
ﬁrst snapshot image was taken. In Fig. 2(c), the update requires two blocks, B3
and B4, to be modiﬁed. Since these two blocks are shared between the active
ﬁle and the ﬁrst snapshot image, two new blocks, B5 and B6, are allocated and
then the update is performed on these two new blocks, without touching the
two original blocks, B3 and B4. Also, to reﬂect the new block allocation for the
update, an additional extent is created and its bitmap value is initially set to 1
because no other ﬁle currently shares these new data blocks with the original ﬁle.

h

h



zGX








l

l

W
zG


iW

\

W

X

iG


zG


i

iX

iY

iZ

l

\

W

iG


iW

i[

OPGhGG

W

\

iX

iY

iZ

i[

i\

OPG{GGGG

h

zGX






l

l

W
zG


iW

Z

W

iG


iX

\

Y

W

X

\

X

i

iY

iZ

i[

i\

X

i

i]

i^

i_

i`

OPG|GGGG

Fig. 2. Snapshot procedure in Open ROW Snapshot

i]

662

3.3

J. Suk et al.

Spatial Optimizations

In order to minimize I/O processing overhead to be occurred while a snapshot
is taken, the Open ROW Snapshot pre-allocates the inode for the next snapshot
and duplicates all the data block addresses to the pre-allocated inode. Furthermore, to maintain the snapshot image groups in a small-sized disk section, the
snapshot daemon is periodically waken up to make sure that all the snapshot
images are in a consistent state. When the snapshot daemon ﬁnds a snapshot image that has been corrupted or an image that has been backup-ed to other disk,
the daemon eliminates the snapshot by unlinking it from the snapshot history.
The Open ROW Snapshot provides a snapshot spatial algorithm in which
any snapshot image linked at the middle of the history can eﬃciently be deleted
by checking the sharing of the data blocks. Figures 3(a) and (b) show the
steps involved in the snapshot spatial algorithm to eliminate a snapshot image, snapshot2. Figure 3(a) describes a snapshot overview before eliminating a
corrupted snapshot image, snapshot2. In this Figure, the ﬁrst snapshot image,
snapshot1, includes an extent denoting that four data blocks, B0 through B3,
are allocated to this image. The second snapshot image, snapshot2, inherits four
data blocks from snapshot1, while changing the bitmap value from 1 to 0 because those data blocks are shared between these two ﬁles. It is noted that when
snapshot2 was an active ﬁle, there existed a write operation requiring three new

h

zGY

zGX












W

^

W

W

iX

iW



iY

iZ

[

W

i[

[

Z

i\

W

X

i]

i^

i_

[

X

i`

OPGiGGY

h

zGY

zGX










W

[

W

iW

[

iX

Z

X

iY

W

iZ

[

i[

[

W

i\

Z

W

X

i]

i^

OPGhGGY

Fig. 3. Snapshot elimination process

i_

[

i`

X

Snapshot-Based Data Backup Scheme: Open ROW Snapshot

663

data blocks, B4 through B6, to be allocated. Therefore, the Open ROW Snapshot
assigns an extent to the inode of snapshot2 while setting its bitmap value to 1
because no sharing happened yet to those new blocks.
When the second snapshot was taken, the active ﬁle contains these seven
data blocks, B0 through B6. Suppose that the snapshot daemon ﬁnds the second
snapshot image, snapshot2, was corrupted. The elimination process occurred in
the snapshot spatial algorithm requires the daemon to traverse prev core snap
and next core snap pointers to determine if the data blocks belonging to the
ﬁle to be deleted can be deallocated. The snapshot spatial algorithm to eliminate
a corrupted image works as follows.
– In case that the bitmap value of an extent is of 0. It denotes that the blocks
belonging to this extent can not be modiﬁed because those blocks are shared
with other ﬁle linked by the prev core snap pointer.
– In case that the bitmap value of an extent is of 1. It denotes that the blocks
belonging to this extent is not shared with the preceding snapshot images.
However, these data blocks can be shared with other following snapshot
images connected to by the next core snap pointer. Therefore, the traversal
through the next core snap pointer is needed to execute.
In order to eliminate snapshot2, the bitmap value of all the extents of snapshot2
should be checked. As can be seen in Fig. 3(b), snapshot2 has two extents to
manage the data blocks associated. Since the bitmap value of the ﬁrst extent
is set to 0, the corresponding data blocks can not be deallocated, and thus the
snapshot spatial algorithm simply unlinks the pointers to those data blocks.
The bitmap value of the second extent is of 1, therefore the preceding snapshot
images connected to by the prev core snap pointer with snapshot2 has not
shared the data blocks with snapshot2. However, since these data blocks can be
shared with the following snapshot images or the active ﬁle, before de-allocating
the data blocks, the spatial algorithm should take into account the bitmap value
of the active ﬁle labeled as active in Fig. 3(b). Because the active ﬁle includes
the data blocks being shared with snapshot2, the snapshot spatial algorithm
splits the extent into two parts to separate the data blocks. The bitmap value of
the ﬁrst split extent is set to 0 because, even though snapshot2 is eliminated,
the associated data blocks, B0 through B3, are still shared with the ﬁrst snapshot
image, snapshot1. On the other hand, the bitmap value of the second split extent
is set to 1, because, after eliminating snapshot2 image, no other ﬁle shares the
associated data blocks, B4 through B6, with the active ﬁle.

4

Performance Evaluation

We obtained all performance results on the Linux cluster at Sejong university.
We installed the Open ROW Snapshot on top of XFS using the extent-based
allocation policy and produced the performance results. Figures 4 through 9
compare the performance measurements of the Open ROW Snapshot structure
and the LVM snapshot. Figures 4 and 5 show the results measured using small

664

J. Suk et al.

Fig. 4. Snapshot execution time using the Fig. 5. Snapshot execution time using the
small size of ﬁles (1MB - 8MB)
small size of ﬁles (2MB - 16MB)

Fig. 6. Snapshot execution time using the Fig. 7. Snapshot execution time using the
intermediate size of ﬁles (8MB - 64MB)
intermediate size of ﬁles (16MB - 128MB)

ﬁles. At each experiment, we calculated the volume size to be the ﬁle size multiplied by the number of ﬁles. With the LVM snapshot, no matter which ﬁles
need to be taken pictures, the total volume size should be duplicated, therefore, the time for taking a snapshot image is quite high. On the other hand,
the Open ROW Snapshot only takes duplicated images for the ﬁles that are
not either backup-ed, or corrupted. Furthermore, in order to minimize the I/O
processing overhead, we used the pre-allocated inode for a following snapshot image. These optimizations help to produce better performance in the Open ROW
Snapshot than in the LVM snapshot. Quite similar results are obtained with the

Snapshot-Based Data Backup Scheme: Open ROW Snapshot

665

Fig. 8. Snapshot execution time using the Fig. 9. Snapshot execution time using the
large size of ﬁles (64MB - 512MB)
large size of ﬁles (128MB - 1GB)

intermediate ﬁle size, as shown in Fig. 6 and Fig. 7, and with the large ﬁle size,
as shown in Fig. 8 and Fig. 9.

5

Conclusion

In this paper, we presented the Open ROW Snapshot that combined the good
features of both ﬁle system-based method and ROW approach. The Open ROW
Snapshot was designed to minimize I/O processing overhead occurred between
successive snapshot images, to provide a wide range of portability by supporting
both the extent-unit and block-unit allocation policies, and to provide a capability of managing disk space for snapshots in a consistent size of disk section.
We presented the performance results obtained from the Linux cluster at Sejong
university. With the LVM snapshot, no matter which ﬁles need to be taken pictures, the total volume size should be duplicated, therefore, the time for taking a
snapshot image is quite high. On the other hand, the Open ROW Snapshot only
takes duplicated images for the ﬁles that are not either backup-ed, or corrupted.
This optimization helps to produce better performance in the Open ROW Snapshot than in the LVM snapshot. In the future work, we will justify and improve
the performance of the Open ROW Snapshot by doing more experiments.

References
1. Sweeney, A., Doucette, D., Hu, W., Anderson, C., Nishimoto, M., Peck, G.: Scalability in the XFS File system. In: USENIX 1996: Annual Technical Conference
(1996)
2. Mostek, J., Earl, W., Koren, D.: Porting the SGI XFS File System. In: Linux 6th
Linux Kongress: The Linux Storage Management Workshop, LSMW (1999)

666

J. Suk et al.

3. Peterson, Z.N.J., Burns, R.C.: Ext3cow: The design, implementation, and analysis of metadata for a timeshifting ﬁle system. Technical report, Department of
Computer Science, The Johns Hopkins University (2003)
4. Peterson, Z.N.J., Burns, R.C.: Ext3cow: A Time-Shifting File System for Regulatory Compliance. ACM Transactions on Storage 1(2), 190–212 (2005)
5. Shim, S., Lee, W., Park, C.: An Eﬃcient Snapshot Technique for Ext3 File System
in Linux 2.6. Technical report, Pohang University of Science And Technology
6. Americal Megatrends. Inc., AMI Snapshot Thechnology, Technical report (2005)
7. Chapman, D., Merrill, J.: Open systems SnapVault. Technical Report 3466, Network Appliance (2006)
8. Mary, B., Perterson, D.: Integrating Network Appliance Snapshot and SnapRestore
with Veritas Netbackup in an Oracle Backup Environment. Technical Report 3394,
Network Appliance (2006)
9. Patterson, H., Manley, S., Federwisch, M., Hitz, D., Kleiman, S., Owara, S.: SnapMirror: File System Based Asynchronous Mirroring for Disaster Recovery. In: Proceedings of the FAST 2002 Conference on File and Storage Technologies, pp. 28–30
(2002)
10. SuSE Inc., The Logical Volume Manager (LVM), Technical report (2002)
11. Piernas, J., Cortes, T., Garcia, J.: DualFS: a New Journaling File System without
Meta -Data Duplication. In: Proceedings of the 2002 International Conference on
Supercomputing (2002)
12. Seltzer, M., Bostic, K., McKusick, M.K., Staelin, C.: An Implementation of a LogStructured File System for UNIX. In: USENIX Annual Technical Conference (1993)
13. Santry, D., Feeley, M., Hutchinson, N., Veitch, A.: Elephant: The File System that
Never Forgets. In: Proceedings of IEEE Hot Topics in Operating Systems (1999)

