Computational Steering Strategy to Calibrate
Input Variables in a Dynamic Data Driven
Genetic Algorithm for Forest Fire Spread
Prediction
M´
onica Denham, Ana Cort´es, and Tom´as Margalef
Departament d’ Arquitectura de Computadors i Sistemes Operatius,
Universitat Aut`
onoma de Barcelona, 08193 - Bellaterra (Barcelona) Spain

Abstract. This work describes a Dynamic Data Driven Genetic Algorithm (DDDGA) for improving wildfires evolution prediction. We propose an universal computational steering strategy to automatically
adjust certain input data values of forest fire simulators, which works
independently on the underlying propagation model. This method has
been implemented in a parallel fashion and the experiments performed
demonstrated its ability to overcome the input data uncertainty and to
reduce the execution time of the whole prediction process.

1

Introduction

Forest ﬁres are part of natural balance in our planet but, unfortunately, during
last years the number of forest ﬁres had increased in an alarming way. The high
number of this kind of disasters break the natural balance that forest ﬁre means.
Nowadays, people is arduously working on this problem in order to avoid and
to reduce forest ﬁres damages. As results of this eﬀort there exist diﬀerent kind
of studies, strategies and tools used to prevent ﬁres, to deﬁne risk areas and to
reduce the ﬁre eﬀects when a disaster occurs.
Forest ﬁre simulators are a very useful tool for predicting ﬁre behavior, simulators allow us to know the ﬁre progress, intensity, spread area, ﬂame length,
etc. Nowadays, there exist several forest ﬁre simulators [7], which may diﬀer in
inputs, outputs, ﬁre model implemented, ﬁre type (crown, surfaces or underground ﬁres), etc.
A forest ﬁre simulator needs to be fed with data related to the environment
where ﬁre occurs such as terrain main features, weather conditions, fuel type,
fuel load and fuel moistures, wind conditions, etc. However, it is very diﬃcult to
exactly evaluate the real time values of these parameters for diﬀerent reasons.
There are certain parameters that change through time such as air and fuel humidities. Environmental conditions are also aﬀected by the ﬁre itself due to its
elevated temperatures, ﬁres could generate very strong gust of winds as well,
This work is supported by the MEC-Spain under contracts TIN 2007-64974.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 479–488, 2009.
c Springer-Verlag Berlin Heidelberg 2009

480

M. Denham, A. Cort´es, and T. Margalef

etc. The lack of accuracy of the input parameter values adds uncertainty to the
whole method and it usually provokes low quality simulations [1].
Thus, in order to achieve high simulation quality, our application is held at
Dynamic Data Driven Application Systems (DDDAS) paradigm [4] [5] [9]. In
particular, our prediction system explores multiple ﬁre propagation scenarios
(diﬀerent combinations of the input parameters values) dynamically adapting
those scenarios according to observed real ﬁre evolution. By the observation of
real ﬁre progress, certain input parameter values are steered in order to reduce
the whole search space achieving a response time reduction. Consequently, steering the parameter values will improve its value accuracy improving predictions
quality as well.
Moreover, in order to reduce response time, we also had developed our application using a parallel solution (master/worker programming paradigm).
This work is organized as follow. Next section describes the proposed dynamic data driven forest ﬁre prediction methodology compared to the classical
prediction scheme. Section 3 is focused to describe the Calibration Stage of
the proposed prediction methodology and two steering strategies are described.
Experimental results are shown in section 4 and, ﬁnally, main conclusions and
future work are reported in section 5.

2

Forest Fire Spread Prediction

Traditionally, forest ﬁre prediction (ﬁgure 1 (a)) is carried out using a forest ﬁre
simulator (FS), a set of input parameters (slope, vegetation, dead fuel humidity,
live fuel humidity, wind characteristics) and the state of the ﬁre front at a given
instant time ti (called RF ti : Real Fire for instant ti ). Using this information,
the predicted ﬁre line for a time ti+1 is obtained (SF ti+1 : Simulated Fire for
instant ti+1 ). This method consumes very few resources in terms of time and
computation power (it performs just one simulation using the unique scenario).
However, this simplicity suﬀers from a very important drawback: usually the
predictions obtained are far from the real ﬁre spread due to simulator underlying
uncertainty and the quality of the unique scenario.
In order to improve the prediction accuracy, we include a stage called Calibration Stage that will be executed before the classical prediction scheme (called
Prediction Stage, ﬁgure 1 (b)). Within this new stage, we used a Genetic Algorithm (GA) for evolving a set of diﬀerent scenarios in order to improve their
values accuracy (each scenario is an individual of a given GA population).
At Calibration Stage, the beginning ﬁre line (RF ti ) and a set of parameter
values are used to obtain the simulated ﬁre line for instant ti+1 (SF ti+1 ). This
simulated ﬁre line and the real ﬁre line (SF and RF both for instant ti+1 ) are
compared and the result of this comparison is used as feedback tunning information to improve parameter values accuracy. This process is executed for all
population individual, through a preﬁxed number of generations. Once Calibration Stage ends, the Prediction Stage takes place where the best parameter’s set
values found in the Calibration Stage is used to feed the simulator and to obtain
the ﬁnal prediction for the next time instant (SF ti+2 )) [1].

Computational Steering Strategy to Calibrate Input Variables in a DDDGA

481

Fig. 1. (a) Classical method for forest fire prediction. (b) Two stage method for forest
fire prediction.

Since in the Calibration Stage the original random values setting for the GA is
updated to be driven by the observed real ﬁre behavior, it could be referred as a
Dynamic Data Driven Genetic Algorithm (DDDGA). In the subsequent section,
the proposed DDDGA strategy is described.

3

Parallel Dynamic Data Driven Genetic Algorithm

Classical GAs [8] are inspired in evolutionary theory where a population of individuals is evolved generation by generation with the objective of improving
population individuals characteristics. Some operations are applied to obtain
each of the generations: selection (including elitism), crossover and mutation.
Through our application frame, the goodness of a given individual (scenario)
is determined by real and simulated ﬁre maps comparison (SF ti+1 and RF ti+1
in ﬁgure 1(b)) where maps diﬀerences determine the error of the simulation.
Therefore, GA main goal is to minimize this error.
In this work, we use the forest ﬁre simulator fireLib [3] [7] [10] for surface ﬁres.
Some of fireLib input parameters are: terrain slope (direction and inclination),
wind speed and wind direction, moisture content of live fuel, moisture content
of dead fuel (at three diﬀerent times: 1 hour, 10 hours and 100 hours), vegetation type, etc. In particular, vegetation is modeled by considering the vegetation
models deﬁned in [2].
Vegetation type and slope are the most static parameters, therefore, their
values will be considered static and known for each prediction process. Consequently, the DDDGA will only consider for evolving purposes the remainder
parameters: wind direction and wind speed, moisture content of live fuel and the
three moisture content of dead fuel.
In a previous work [6], the authors introduced the data assimilation process
needed for this two stage prediction method and an analytical steering strategy
for the Calibration Stage was also described.
It is well known that slope and wind are the two main features to determine ﬁre progress. Thus, during most ﬁre model implementations slope and
wind factors are composed in order to obtain ﬁre progress direction and velocity.

482

M. Denham, A. Cort´es, and T. Margalef

Through Calibration Stage, we dispose of ﬁre progress from instant ti to ti+1
(ﬁgure 1 (b)), then we analyze this ﬁre progress and we obtain ﬁre direction and
velocity (the real ﬁre spread characteristics for instant ti+1 ).
Taking into account these facts and knowing slope characteristics (as we had
mentioned in a previous paragraph), we could combine slope and real ﬁre spread
in order to obtain wind values, those which are necessary for achieving the observed ﬁre spread [6]. For this purpose, an analytical steering strategy for the
Calibration Stage was introduced in [6]. This approach shows good results reducing the error function and improving Calibration and Prediction Stages results.
However, the main drawback exhibited by this steering method was its strong
dependency to the underlying simulator. In order to overcome this penalty, we
had developed a steering strategy called computational method, which has no
dependence of the underlying ﬁre simulator.
Next section will introduce the computational steering strategy main characteristics and, in subsequent sections, a comparative study of both analytical and
computational steering strategies will be presented.
3.1

Computational Steering Strategy

The main advantage of the proposed computational steering strategy is its ﬁre
simulator independence. For this purpose, the underlying ﬁre simulator is used
as a black-box from which the only available information is the input/output
data used/generated. Based on a complete set of ﬁre spread information obtained from both real historical and synthetic ﬁres, one generates a complete
database of ﬁre evolutions with the corresponding environmental conditions.
This database information will be used for the DDDGA (Calibrationg stage) to
discover the ”ideal” wind values (wind speed and wind direction) based on a key
search obtained from the real observed ﬁre spread.
Figure 2 shows an example of how the DDDGA works under this computational steering strategy. Let’s assume that the observed real ﬁre at instant ti+1
exhibits a rate of spread equal to 20 fpm and a spread direction equal to 45o .
Furthermore, the slope is known and corresponds to 45o (1 radian), and the observed fuel model is 7 [2]. The database register selected by the method is shown
with a circle in the ﬁgure. This register has a wind speed equal to 9 fpm and
its direction is 45o azimuth. These wind values will be used to deﬁne a subrange
through the whole parameter valid range and when mutation takes place, the
wind values will be assigned using a random value limited by the new subrange
(taking into account database cases incompleteness).
In order to validate the experimental results when the proposed computational
steering strategy is applied, we have compared its results (computational method
results) against analytical steering strategy results. Although we expected that
analytical method performs better than the computational strategy, we wanted
to demonstrate that the proposed method could reach a good performance prediction despite of not being aware of the underlying simulator model used.
Taking into account that ﬁre simulation is the most time consuming task,
we had proposed a master/worker solution for our parallel GA. Thus, master

Computational Steering Strategy to Calibrate Input Variables in a DDDGA

483

Fig. 2. Data stored in Computational Method data base

process holds the population, and it distributes the individuals among the worker
processes and then, it receives the evaluated individuals (that means, each individual and its error). In turn, the worker processes receive a group of individuals
(called chunk). For each individual of the received chunk, the worker process
executes the ﬁre spread simulation and evaluates the error function. When the
worker ﬁnalizes with one chunk, it sends back to the master process the evaluated information. Then, the worker will keep waiting until another chunk of
individuals is being received. This process is repeated until the whole population has been evaluated. Afterward, the master process applies genetic operators
over the evaluated population in order to minimize the error value.

4

Experimental Results

As we had mentioned, two important key point in ﬁre spread prediction are, on
the one hand, to obtain the prediction results as fast as possible and, on the
other hand, to provide simulation results as precise as possible. These two characteristics are essentials for having useful forest ﬁre spread predictions. Thus,
our experimentation covers these two topics: time reduction using parallel computing and error reduction when a dynamic data driven option is applied. Next
sections describe how each experiment has been performed.
4.1

Parallel GA Performance Evaluation

The ﬁrst experiment deals with application scalability. We had ﬁxed a population
size of 512 individuals (all generations have the same number of individuals), and
we varied the number of workers from 1 to 31. A real map of 110 x 110 m2 cells
of 1m2 was used in this case, and we tested the Calibration Stage for a unique
8 minutes interval time. Figure 3 shows the time reduction when we execute the
parallel Calibration Stage using computational steering method and no guided
GA. In vertical axis we can see time (in seconds) and horizontal axis shows the
number of workers used. The execution platform is a homogeneous PC cluster
composed by 32 nodes. This cluster uses a queue system in order to guarantee
exclusive access to the required resources.

484

M. Denham, A. Cort´es, and T. Margalef

Fig. 3. Execution time varying the number of workers from 1 to 31

The application described in this work deals with a real problem, and the
results provided by the proposed prediction scheme could be used for improving ﬁre ﬁghting actions. The ﬁnal users of this application may be institutions
such us civil protection and ﬁre ﬁghters, usually, can not directly access to big
computational resources during real time hazards. From the results shown in
ﬁgure 3, we can see that our application has an appropriate scalability when the
number of workers is increased. In the next section, we report the experiments
performed in order to evaluate the proposed steering methods.
4.2

Dynamic Data Driven GA Evaluation

In this section we are going to evaluate the beneﬁt of applying a dynamic data
driven GA for ﬁre spread prediction purposes. We are going to compare the analytical method with the computational method applying the prediction methodology without considering any external data. In this work, we present some
results using one real ﬁre and two synthetic ﬁres (simulation results). Figure 4
shows the ﬁre front evolution through time (2 minutes intervals) for the three
experiments.
In all cases, we had used a populations size of 50 individuals with random
values at the beginning. Each population was evolved 5 times (error reduction
is insigniﬁcant after the ﬁrst 3 or 4 evolutions). The depicted results are the
average of 5 diﬀerent executions for each case using diﬀerent initial populations.
The initial populations were created by random values but the remainder time
lapses previous evolved populations (at Calibration Stage) were used. Moreover,
we use the best individual obtained after executing the Calibration Stage as
input in the Prediction Stage.
Experiment 1: Synthetic Case. Experiment 1 concerns with the map shown
in ﬁgure 4(a) (109.0 x 89 m2 , cells of 1m2 ). The terrain had 18o slope and the

Computational Steering Strategy to Calibrate Input Variables in a DDDGA

485

Fig. 4. (a) Experiment 1: synthetic fire case. (b) Experiment 2: synthetic fire case. (c)
Experiment 3: real fire case.

Fig. 5. Experiment 1: (a) Calibration Stage and (b) Prediction Stage results

vegetation fuel model was set up to model 7 [2]. Figures 5(a) and (b) show the
Calibration and Prediction Stages results respectively.
For both stages (Calibration and Prediction), the error (diﬀerence between
the real ﬁre spread and the simulated ﬁre obtained) has been signiﬁcantly reduced whatever dynamic data driven methods was used. Since one of our goals
was to use the analytical method as a validation element of the computational
method, we have analyzed in more detail each method behavior. From an immediate analysis of graphics 5(a) and 5(b), we detect a clear similarity along all data
driven methods. However, it is also remarkable that analytical method provides
better results than the computational method as it was expected. Nevertheless,
the error diﬀerence between the two analytical methods and the computational
method keeps, on average, bounded by 25% for all interval times, therefore,
we can conclude that the analytical results validate the computational behavior.
Prediction Stage results show errors slightly higher than Calibration Stage, however this is an expected result because we are using the best individual obtained
at the Calibration Stage to obtain the prediction for a later time interval at the
Prediction Stage.
Experiment 2: Synthetic Case. Another synthetic map was used to carry
out the second test (ﬁgure 4(b)), 33,22 x 27,12 m2 size map, cells of 1 f 2 . In this
case, we consider 27o slope and the same vegetation as in the ﬁrst burning case.

486

M. Denham, A. Cort´es, and T. Margalef

Fig. 6. Experiment 2: (a) Calibration Stage and (b) Prediction Stage results

Figure 6 shows the second experiment results. At Calibration Stage
(ﬁgure 6 (a)) we can see that analytical method reduces the error in all cases.
However, computational method has an unexpected behavior in steps 2-4 and
4-6 at Calibration Stage and 4-6, 6-8 at Prediction Stage. In order to understand this unexpected behavior we analyze each individual execution for those
particular situations.
At Calibration Stage we observed that when computational method was used,
the resulting error values of each population were similar. However, when no
steering method were applied, some populations had generated high errors and
another ones had generated very small errors. Thus, total average was under
inﬂuence of high errors as well as small ones. Since the Prediction Stage results
depend on Calibration Stage best individual quality, the behavior observed in
the Calibration Stage was reﬂected in the Prediction Stage. Therefore, when
we apply any of the proposed methods, we are avoiding to depend on “lucky”
of choosing good random values. It is important to take into account that in
disasters problems having stable algorithms means an important improvement
if we can still guarantee good results.
In order to determine beneﬁts of applying any steering methods and taking into
account calibration stage (where steering methods are applied), we compare total
error for each method (no guiding total error means 100%). When computational
method was applied, error reduction was about 15,9% approximately, analytical
method (guided elitism option) error reduction was about 55,3% and analytical
method (guided mutation option) error reduction was about 52,1% approximately
(all lapses time average). For the same reasons of experiment 1, we note that computational method behavior is validated by analitical method behaviors.
Experiment 3: Real Case. The last experiment is a real ﬁre (ﬁgure 4(c)). The
ﬁre analyzed in this experiment corresponds to a plot of 89 x 109 m2 , 1 m2 cell
size. The terrain was 18o slope and fuel type was equal 7. This burn has been
extracted from a set of prescribe burns performed in the frame of an European
project called SPREAD (Gestosa, 2004).
The results obtained for this experiment are shown in ﬁgure 7. The ﬁrst 2
time intervals at Calibration Stage results were similar through all methods,

Computational Steering Strategy to Calibrate Input Variables in a DDDGA

487

Fig. 7. Experiment 3: (a) Calibration Stage results and (b) Prediction Stage results

there were not signiﬁcant diﬀerences between diﬀerent conﬁgurations, however,
this stable behavior changes from that point to the end. We can see that in
experiment 3, the errors were larger compared to the previous experiment errors.
This error improvement could be considered as an expected behavior because of
being dealing with a real ﬁre instead of a synthetic ﬁre. The spread behavior, in
this case, was not uniform because of vegetation, variable wind conditions, the
ﬁre itself, and so on. This non uniform environment is harder to be reproduced
by any ﬁre spread simulator. In this case, error reduction was, on average, for the
computational method 23,5%, for the analytical method (guided elitism option)
about 13,5% and, ﬁnally, for the analytical method when mutation was guided
is on 12,1%.

5

Conclusions and Future Work

A Parallel Dynamic Data Driven Genetic Algorithm was proposed for forest
ﬁre spread prediction. This application deals with response time restrictions
and prediction accuracy requirements. From the experimental results we could
determine that our master/worker scheme was appropriate to take advantages
of parallel computing in order to reduce the forest ﬁre prediction response time.
On the other hand, in order to improve prediction accuracy, a Dynamic Data
Driven GA was proposed where real ﬁre progress was used for adapting the
scenarios used by the method according to the observed real ﬁre spread. A
new steering method called Computational Steering method has been proposed,
which main feature is being independent on the underlying ﬁre simulator becoming an universal method for calibrating the input parameters of any ﬁre spread
simulator.
Three cases of study were presented and their results had shown that the inclusion of the dynamic data driven systems bases in the Calibration Stage improves
the quality of the propagation predictions. Furthermore, since the analytical and
the computational methods have a similar behavior that is bounded by a constant
diﬀerence (around 25%), we can conclude that the computational method behavior
does not exhibit unexpected characteristics. Thus, computational method development is validated by the analytical method results through our speciﬁc domain.

488

M. Denham, A. Cort´es, and T. Margalef

Although our main objectives are real burning maps, synthetic cases help us to
validate the proposed methods. These cases prove that dynamic data driven GA
improves the ﬁnal results by reducing search space and avoiding simulations with
individuals that because of their characteristics provide low quality simulations.

References
1. Abdalhaq, B.: A methodology to enhance the Prediction of Forest Fire Propagation. Ph.D Thesis. Universitat Aut`
onoma de Barcelona (Spain) (June 2004)
2. Anderson, H.E.: Aids to Determining Fuel Models For Estimating Fire Behavior.
Intermountain Forest and Range Experiment Station Ogden, UT 84401. General
Technical Report INT.122 (1982)
3. Bevins C. D.: FireLib User Manual & Technical Reference (1996),
http://www.fire.org (accessed, January 2006)
4. Darema, F.: Dynamic Data Driven Applications Systems: A New Paradigm for Application Simulations and Measurements. In: Bubak, M., van Albada, G.D., Sloot,
P.M.A., Dongarra, J. (eds.) ICCS 2004. LNCS, vol. 3038, pp. 662–669. Springer,
Heidelberg (2004)
5. Douglas, C.C.: Dynamic Data Driven Application Systems homepage,
http://www.dddas.org (accessed, October 2008)
6. Denham, M., Cort´es, A., Margalef, T., Luque, E.: Applying a Dynamic Data Driven
Genetic Algorithm to Improve Forest Fire Spread Prediction. In: Bubak, M., van
Albada, G.D., Dongarra, J., Sloot, P.M.A. (eds.) ICCS 2008, Part III. LNCS,
vol. 5103, pp. 36–45. Springer, Heidelberg (2008)
7. FIRE.ORG - Public Domain Software for the Wildland fire Community,
http://www.fire.org (accessed, May 2007)
8. Koza, J.: Genetic Programming. In: On the programming of computers by means
of natural selection, Massachusetts Institute of Technology. Cambridge, Massachusetts 02142. The MIT Press, Cambridge (1992)
9. Mandel, J., Beezley, J., Bennethm, L., Chakraborty, S., Coen, J., Douglas, C.,
Hatcher, J., Kim, M., Vodacek, A.: A Dynamic Data Driven Wildladnd Fire Model.
In: Shi, Y., van Albada, G.D., Dongarra, J., Sloot, P.M.A. (eds.) ICCS 2007. LNCS,
vol. 4487, pp. 1042–1049. Springer, Heidelberg (2007)
10. Rothermel, R.C.: A mathematical model for predicting fire spread in wildland fuels.
USDA FS, Ogden TU, Res. Pap. INT-115 (1972)

