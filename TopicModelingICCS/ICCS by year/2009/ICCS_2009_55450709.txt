Dynamic VO Establishment in Distributed
Heterogeneous Business Environments
Bartosz Kryza1 , Lukasz Dutka1 , Renata Slota2 , and Jacek Kitowski1,2
1

Academic Computer Centre CYFRONET-AGH, Cracow, Poland
2
Institute of Computer Science, AGH-UST, Cracow, Poland
{bkryza,dutka,rena,kito}@agh.edu.pl

Abstract. As modern SOA and Grid infrastructures are being moved
from academic and research environments to more challenging business
and commercial applications, such issue as control of resource sharing
become of crucial importance. In order to manage and share resources
within distributed environments the idea of Virtual Organizations (VO)
emerged, which enables sharing only subsets of resources among partners
of such a VO within potentially larger settings. This paper describes the
Framework for Intelligent Virtual Organizations (FiVO), focusing on its
functionality of enforcing security (Authentication and Authorization)
in dynamically deployed Virtual Organizations. The paper presents the
overall architecture of the framework along with diﬀerent security settings which FiVO can support within one Virtual Organization.

1

Introduction

Modern applications of Service Oriented Architectures or Grid computing are
oriented on allowing distinct heterogenous organizations to share their resources
in order to pursue some goal through advanced collaboration schemes supported
by their IT infrastructures. The Grid idea introduced the concept of Virtual
Organization, which abstracts the notion of organization into a virtual environment based on distributed computing infrastructures of organizations that want
to collaborate. The idea of Virtual Organization allows these partners to deﬁne
rules of cooperation in terms of authorization policies or SLA parameters which
specify how their resources can and should be shared. The major problem that
this idea is facing currently is the problem of very high administrative burden
which is required to create and maintain a VOusing available tools. Additionaly
no standard currently exists which would allow to actually specify the rules of
cooperation by these organizations in a uniﬁed manner which then could be used
to create the VO by means of conﬁguring proper middleware as well as monitoring the VO operation in order to ensure that the rules which were agreed
upon are properly respected. These issues are especially important in case of security focused dynamic environments where creation of VO cannot be delegated
to regular system administrators. In order to support creation and management
of such dynamic Virtual Organizations, the middleware must provide support
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 709–718, 2009.
c Springer-Verlag Berlin Heidelberg 2009

710

B. Kryza et al.

for several issues, including resource sharing policy deﬁnition and enforcement,
resource discovery and usage limited according to the VO policy and others.
In this paper we present our framework, called FiVO (Framework for intelligent Virtual Organization) that supports creation and management of dynamic
Virtual Organizations with special focus on dynamic VO creation through contract negotiation and authorization of access to resources. The main feature of
FiVO is the contract negotiation and management component, which enables
coordinated establishment of agreement among partners who want to create a
new Virtual Organization. The contract provides the information necessary for
conﬁguration of the VO in the system and allows for speciﬁcation of both functional and non-functional parameters of the envisioned VO collaborations. Many
problems related to ad-hoc creation of a VO are mostly related to heterogeneity
of resources shared by VO members. Not only computer equipment is diﬀerent,
but also data formats, service descriptions, knowledge repositories. These issues
require a method of mediation between VO members which is necessary to provide connectivity and make collaboration possible and eﬃcient. With respect to
VO deployment and contract enforcement we currently focus on security, i.e. authentication and authorization of requests to VO resources based on the contract
statements. Other aspects will be developed as the framework evolves further.

2

FiVO Architecture

The architecture of FiVO is based on several goals. The ﬁrst aim is to provide
a uniﬁed semantic interface at the service level for discovery and management
of all aspects relating to a Virtual Organization, including its members, agreements, goals, resources, data and services. This functionality is achieved through
uniﬁcation of metadata used to annotate these resources with the use of ontologies. FiVO is oriented strictly towards Service Oriented Architectures and Grid
computing, thus assuming certain requirements on the infrastructures of organizations willing to participate in Virtual Organizations. These requirements
however comply with the current trends in existing and emerging standards for
information systems integration. FiVO supports both static and dynamic creation and deployment of Virtual Organizations aiming to pursue some goal, e.g.
an emerging market opportunity. In order to enable using this solution in legacy
environments the framework supports legacy information systems by providing
adapters for existing middleware components. For instance MyProxy [1] and
VOMS (Virtual Organization Membership Service) [2] adapters allow to conﬁgure these components after successful VO negotiation in order to support GSI
based authentication according to the rules deﬁned in the negotiated contract.
Such features are of major importance, since legacy information systems and
middleware components provide functionality crucial to VO management, especially at the low level and should be reused it in order to make integration
between partners of a VO more feasible.
An important aspect of Virtual Organization lifecycle management supported
by our framework is contract negotiation, which is a process involving all

Dynamic VO Establishment in Distributed Heterogeneous Business

711

partners who want to participate in the emerging Virtual Organization. The
contract itself is a set of statements which deﬁne terms (statements) related to
the goal of the Virtual Organization on which all partners agree. Current FiVO
provides framework for manual contract negotiation through a collaborative environment (either Protege plug-in or web-based). Negotiated contract, which is
stored in the form of an ontology, is subsequently used to automatically conﬁgure the underlying security layer and QoS monitoring components in order
to ensure contract enforcement during Virtual Organization operation. This enables organizations to state their commitments and requirements in an abstract
way, while minimizing the burden on administrators who otherwise would have
to conﬁgure all these parameters manually.
The essential contribution of FiVO to existing Virtual Organization management systems is in provision of a uniﬁed semantic interface for discovery and
management of all aspects of a Virtual Organization (including its members,
agreements, resources, goals, SLA’s), allowing for dynamic inception through
contract negotiation and automatic conﬁguration of underlying middleware layer
for contract enforcement during Virtual Organization operation. Figure 1
presents a sample deployment of the FiVO framework in some distributed environment. Four organizations can be seen, sharing their resources within the
VO-1. FiVO component is deployed within each organization and is responsible

Fig. 1. Vision of the FiVO framework in a distributed environment

712

B. Kryza et al.

for managing this organizations assets, assuming they are described semantically. During the contract negotiation phase, the FiVO components provide for
the negotiators view on the resources of the participating organizations which
can be used to create proper statements in the contract. After the contract is
successfuly negotiated the semantic description of these resources along with the
statements from the contract are used to conﬁgure proper middleware components. These descriptions can include such aspects of organization as its structure
and business logic described in proper ontology as well as hardware, data and
service resources available and provided for sharing with other organizations.

3

Contract Negotiation

In order to support the contract negotiation functionality we have deﬁned a formal contract negotiation model and implemented it using Web Ontology Language (OWL) [3]. The vocabulary for the process of contract negotiation is
deﬁned by a set of ontologies providing common high-level terminology which
can be further instantiated by proper domain level ontologies describing the domain and resources of organization participating within the negotiations. The
negotiation process is controlled by a special Graphical User Interface developed
for this purpose as a Protege [7] plug-in, see Figures 2 and 3. The formal model
gives means to implement a negotiation framework which allows parties to deﬁne the rules of cooperation within a given VO. The formal model, as deﬁned

Fig. 2. Joining VO contract negotiations

Dynamic VO Establishment in Distributed Heterogeneous Business

713

Fig. 3. Negotiating a statement within a negotiation table

in our previous work [6], deﬁnes the contract negotiation process in terms of
messages exchanged between agents who control resources representing assets of
their respective organizations. The negotiation process allows the negotiation of
parts of the contract within negotiation tables, thus dividing the complete negotiation process into subnegotiations where only the parties which are directly
concerned with the resources that particular statements address need to discuss.
In the case of dynamic VO change, for instance when new resources should be
added to the VO, contract amendment can be achieved by performing a new
contract negotiation phase with the current contract as a starting point. In case
the change in resources provided by the partners to the VO is not planned but
is caused for instance by a service failure, the contract allows to detect that one
of the partners does not fulﬁll his obligation to the VO and proper steps can be
taken to deal with the problem.

4

Semantically Supported VO Security

The main motivation of supporting various security deployment conﬁgurations
is to enable integration of heterogeneous IT infrastructures within a single VO.
After the contract between the parties is negotiated, its rules are used to generate
proper entries in MyProxy and VOMS components (i.e. set of roles and their
mappings), and from then on FiVO login method uses these components in order
to generate a X.509 proxy certiﬁcate for a given user. This credential can be
then used anywhere within the Virtual Organization, e.g. presented to a Globus

714

B. Kryza et al.

Fig. 4. Globus container and FiVO authentication and authorization

container or Apache web server. These containers will then contact FiVO PDP
(Policy Decision Point) providing the role extracted from the proxy certiﬁcate
presented by the user and receive an access decision.
Currently, FiVO supports 3 basic security deployments with Grid or SOA
based environments, as depicted in Figures 4, 5 and 6. In the ﬁrst mode (Figure
4), when a Globus based WSRF service running in a Globus container is called
by a remote client, proper Globus interceptors retrieve the Attribute Certiﬁcate
from the users credential and send them to FiVO Authorization Service in order
to get a AccessGranted/AccessDenied decision. The next mode (Figure 5) allows
an Apache based web service (or any resource served by Apache server for that
matter), a special Apache module - mod authz ﬁvo - retrieves the credentials

Fig. 5. Apache with FiVO authentication and authorization

Dynamic VO Establishment in Distributed Heterogeneous Business

715

Fig. 6. Globus with FiVO authentication and PERMIS authorization

from the users certiﬁcate and contacts FiVO to get the authorization decision.
Then it either continues the request processing or returns to the user HTTP
Access Forbidden error. In the case of PERMIS (Figure 6), the situation is more
complex. PERMIS [8] provides a standalone authorization service (PERMIS
Policy Decision Point), however it depends on the LDAP service which contains
proper information in terms of Attribute Certiﬁcates and Policies. FiVO works
with PERMIS by feeding an LDAP service with proper policies, generated automatically from policies which are part of the VO contract. Currently there is
an ongoing eﬀort to integrate VOMS Attribute Certiﬁcates with PERMIS PDP
in the framework of EU-IST VPMan project, so full integration of this approach
will be possible as this project published their results. The authorization policies
are deﬁned as part of the ontology deﬁning the contract between the partners
of a VO, some sample policies are explained below. The ﬁrst example presents
a authorization rule allowing users with role BankManager to access a banking
service. The rule assumes that the user has a role stored in a X509 credential, the
action as reported by the Policy Enforcement Point (e.g. mod authz ﬁvo Apache
module) is Execute from a proper FiVO security ontology and the object is identiﬁed by the PEP as individual individual from the ontology describing the VO
resources.
<so:AccessGrant rdf:ID="AccessGrantPOPSOBankServices">
<so:hasAction
rdf:resource=".../SecurityOntology.owl#Execute"/>
<so:hasObject
rdf:resource=".../FiVO/EasyLoan#POPSOBankService1"/>
<so:hasSubject>

716

B. Kryza et al.

<so:X509AuthorizationSubject
rdf:ID="X509AuthorizationSubject_BankManagers">
<so:hasRole>
<j.2:Role rdf:about=".../FiVO/EasyLoan#BankManager"/>
</so:hasRole>
</so:X509AuthorizationSubject>
</so:hasSubject>
</so:AccessGrant>
The second example presents an authorization rule allowing users with the
role Editor to remove ﬁles from the system which have certain attributes, in this
case location is equal to Iraq. The PEP is the data location service which checks
with FiVO whether the user with role Editor can remove the ﬁles which have
certain metadata attributes.
<so:AccessGrant rdf:ID="AccessGrant1">
<rdfs:comment
rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
Grant access for Editors when file has
attribute location with value Iraq.
</rdfs:comment>
<so:hasSubject>
<so:X509AuthorizationSubject
rdf:ID="X509AuthorizationSubject_Editors">
<so:hasRole rdf:resource="#Editors"/>
</so:X509AuthorizationSubject>
</so:hasSubject>
<so:hasAction rdf:resource="#Removes"/>
<so:hasObject>
<so:RDLSFileMetadata rdf:ID="RDLSFileMetadata1">
<so:hasAttributeValue
rdf:datatype="http://www.w3.org/2001/XMLSchema#string">
location:Iraq</so:hasAttributeValue>
</so:RDLSFileMetadata>
</so:hasObject>
</so:AccessGrant>
As can be seen, the use of ontological deﬁnition of policies allows for very
ﬂexible integration of various types of subjects.

5

Related Work

The enforcement of the contractual agreement is assumed to be handled by the
underlying middleware, i.e. including both the security and SLA layers. Security aspects, especially with relation to dynamic Virtual Organization mainly

Dynamic VO Establishment in Distributed Heterogeneous Business

717

should revolve around handling heterogeneity of middleware available in such
distributed environments. Currently several solutions exist for both authentication and authorization issues which are essential to allow disparate organizations
to cooperate together by their resources within interconnected IT infrastructures.
The most common authentication systems include X.509 Public Key Infrastructure [9], Kerberos [10] and Shibboleth [11]. Additionally to authentication, the
most popular authorization infrastructures for the SOA and Grid based systems
include Virtual Organization Membership Service [2], Community Authorization
Service [12], Akenti [13] and PERMIS [14]. In [15] the authors describe integration of GSI and Shibboleth based security infrastructures within a VO based
on an abstraction approach. In [16] authors present web-Pilarcos J2EE based
agent framework for managing contract based Virtual Organizations. The contract itself is an object (J2EE EntityBean) and can be in several states, such
as In-negotiation, Terminated etc. The proposed solution is not based on ontologies, and the metadata reasoning is mentioned only brieﬂy. Unfortunately,
none of these tools allows suﬀciently rich resource description framework that
would allow to embrace the heterogeneity of infrastructures and environments
found in Virtual Organizations, and more importantly their interoperability is
very limited.

6

Conclusions and Future Work

In this paper we presented the motivation and architecture of the FiVO (Framework for Intelligent Virtual Organizations) which enables contract negotiation
and management for Virtual Organizations which can be applied in heterogenous IT infrastructures such as demanding business settings. We believe that
such functionality will foster the adoption of Virtual Organizations in commercial applications by simplifying the process of Virtual Organization inception
and management of agreements specifying how the resources of each participating organizations should be shared among partners of a VO. The future work
will be focused on provision of additional adapters allowing integration with
other popular existing middleware solutions, such as conﬁguring of monitoring
components or setting up legacy software for use in a VO, and implementation of automatic contract negotiation agents based on the FiVO framework
allowing fully autonomic VO deployment in case of emerging need for such
coolaboration.

Acknowledgments
This research has performed done within the framework of EU IST FP6-34363
Gredia project. The authors would like to thank the whole project consortium
for remarks and feedback. AGH University of Science and Technology grant nr
11.11.120.777 is also acknowledged.

718

B. Kryza et al.

References
1. Basney, J., Humphrey, M., Welch, V.: The MyProxy online credential repository.
Softw., Pract. Exper. 35(9), 801–816 (2005)
2. Alﬁeri, R., Cecchini, R., Ciaschini, V., dell’Agnello, L., Frohner, A., Lrentey, K.,
Spataro, F.: From gridmap-ﬁle to VOMS: managing authorization in a Grid environment. Future Generation Comp. Syst. 21(4), 549–558 (2005)
3. Antoniou, G., Van Harmelen, F.: Ontology Language: OWL. In: Handbook on
Ontologies: International Handbook on Information Systems, pp. 67–92 (2004)
4. Kryza, B., Majewska, M., Pieczykolan, J., Slota, R., Kitowski, J.: Grid organizational memory - provision of a high-level grid abstraction layer supported by
ontology alignment. Future Generation Comp. Syst., Grid Computing: Theory,
methods and Applications 23(3), 348–358 (2007)
5. Kryza, B., Pieczykolan, J., Kitowski, J.: Grid organizational memory: A versatile
solution for ontology management in the grid. In: Proc. of 2nd Intl. Conf. on eScience and Grid Computing, Amsterdam, Netherlands, December 4-6, 2006. IEEE
Computer Society Press, Los Alamitos (2006)
6. Zuzek, M., Talik, M., Swierczynski, T., Wisniewski, C., Kryza, B., Dutka, L., Kitowski, J.: Formal Model for Contract Negotiation in Knowledge-Based Virtual
Organizations. In: Bubak, M., et al. (eds.) ICCS 2008, Part III. LNCS, vol. 5103,
pp. 409–418. Springer, Heidelberg (2008)
7. Knublauch, H., Fergerson, R.W., Noy, N.F., Musen, M.A.: The Prot´eg´e OWL Plugin: An Open Development Environment for Semantic Web Applications. In: McIlraith, S.A., Plexousakis, D., van Harmelen, F. (eds.) ISWC 2004. LNCS, vol. 3298,
pp. 229–243. Springer, Heidelberg (2004)
8. Chadwick, D.W., Zhao, G., Otenko, S., Laborde, R., Su, L., Nguyen, T.: PERMIS:
a modular authorization infrastructure. Concurrency and Computation: Practice
and Experience 20(11), 1341–1357 (2008)
9. Landrock, P.: Public Key Infrastructure. In: van Tilborg, H. (ed.) Encyclopedia of
Cryptography and Security. Springer, Heidelberg (2005)
10. Steiner, J.G., Neuman, C.N., Schiller, J.I.: Kerberos: An Authentication Service
for Open Network Systems. In: Proc. of the Winter 1988 Usenix Conf., pp. 191–202
(1988)
11. Sinnot, R.O., Jiang, J., Watt, J.P., Ajayi, O.: Shibboleth-based Access to and Usage
of Grid Resources. In: GRID, pp. 136–143. IEEE, Los Alamitos (2006)
12. Pearlman, L., Welch, V., Foster, I., Kesselman, C., Tuecke, S.: A community authorization service for group collaboration. In: Proc. Of Third IEEE International
Workshop on Policies for Distributed Systems and Networks (POLICY 2002), pp.
50–59 (2002)
13. Johnston, W., Mudumbai, S., Thompson, M.: Authorization and Attribute Certiﬁcates for Widely Distributed Access Control. In: Proc. of IEEE 7th Int Workshops
on Enabling Technologies: Infrastructure for Collaborative Enterprises (WET
ICE), pp. 340–345 (1998)
14. Chadwick, D., Otenko, A., Ball, E.: Role-based access control with x.509 attribute
certiﬁcates. IEEE Internet Computing 7(2), 62–69 (2003)
15. Kirchler, W., Schiﬀers, M., Kranzlmuller, D.: Harmonizing the Management of
Virtual Organizations Despite Heterogeneous Grid Middleware: Assessment of Two
Diﬀerent Approaches. In: Proc. Cracow Grid Workshop, Krakow, Poland, October
2008 (March 2009) (in print)
16. Metso, J., Kutvonen, L.: Managing virtual organizations with contracts. In: Workshop on Contract Architectures and Languages, CoALa 2005 (2005)

