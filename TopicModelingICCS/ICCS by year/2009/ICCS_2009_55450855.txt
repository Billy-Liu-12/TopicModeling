Multi-agent Crisis Management in Transport
Domain
Michał Konieczny, Jarosław Koźlak, and Małgorzata Żabińska
Department of Computer Science,
AGH University of Science and Technology
Al. Mickiewicza 30, 30-059 Kraków, Poland
{kozlak,zabinska}@agh.edu.pl, michal.t.konieczny@gmail.com

Abstract. A multi-agent system that solves static and dynamic versions of transport problem (Pickup and Delivery Problem with Time
Windows) in presence of crises is shown here. Scenarios to serve diﬀerent kinds of crises (especially vehicle failures and traﬃc jams) by agents
are described. The results summarising system functioning for solving
classical PDPTW as well as inﬂuence of crises and applied algorithms of
serving them upon quality of obtained solutions have been presented.

1

Introduction

Eﬃcient transport of people and goods is an important issue with diﬀerent transport companies. For some branches of the industry costs of transport may reach
even 70 % of value of transported goods. Therefore it is justiﬁed to tend to
minimise transport costs which inﬂuence the ﬁnal price of goods and services.
Many transport problems may be treated as PDPTW, which is an extension
of the widely examined Vehicle Routing Problem. Solving the PDPTW consists
in ﬁnding routes which may be served by the minimal number of vehicles and
to minimise the distance travelled. The distance is the total distance vehicles
have to travel to serve the existing set of transport request between points of
pick up and delivery, on the assumption that each request will be served within
the time range deﬁned by the time window, whereby the maximum capacity of
vehicles is not exceeded. Since the problem has a large complexity (NP-problem),
the research on solution of PDPTW concentrates rather on working out proper
meta-heuristic methods than upon searching for exact solutions.
The purpose of the work carried out is to create the system which enables
solving PDPTW with more accurate reﬂection of real conditions. PDPTW will
be extended, among others, by a complex transport network, dynamics of transport requests as well as crises - unexpected events, which force changes of routes
of transport teams. Objects, existing at the logistic ﬁrm, such as dispatching of tasks, vehicles, or being responsible for crisis situations service, may be
intuitively implemented with the use of agents.
G. Allen et al. (Eds.): ICCS 2009, Part II, LNCS 5545, pp. 855–864, 2009.
c Springer-Verlag Berlin Heidelberg 2009

856

2
2.1

M. Konieczny, J. Koźlak, and M. Żabińska

State of the Art
Transport Problems and Their Solving

A frequently used approach to solve complex computational problems is to divide
the task into two phases. In the ﬁrst one, a relatively good primary solution is
generated, whereas in the second phase, it is optimised. the following are popular
construction heuristics which build primary solutions: Insertion Heuristic, Sweep
Heuristic and Partitioned Insertion Heuristic described in [8]. Methods which
improve the quality of obtained solution are based on multiple modiﬁcations of
a set of routes with the use of local changes consisting in moving requests from
the route (SPI - Single Paired Insertion), exchange of requests between routes
(SBR - Swapping Pairs Between Routes) and change of sequence of requests for
a given route (WRI - Within Route Insertion). The optimisation process may be
managed using algorithms like tabu search [9], simulated annealing, evolutionary
algorithms, Squeaky Wheel Optimisation [10] and Ant Colony optimisation [5].
2.2

Multi-agent Solutions

Agent systems which solve transport problems are based on two schemes: Contract Net [12] and simulated trading. An algorithm of iterative optimisation
(Simulated Trading) [3] is used to improve the primary feasible solution. It applies a stock exchange mechanism, where vehicles optimise their plans by subsequent purchase and selling of transport requests. MARS [6] is an multi–agent
system realising transport planning. Its purpose is to organise the cooperation
between some transport companies, so as to serve the set of transport tasks in
an optimal way.
TeleTruck is a system modelling process at the transport company. It is a
holonic multi-agent system created by the ﬁrm DFKI [4]. TeleTruck has a richer
functionality than MARS. It is a prototype of an application built with the
essential help of a transport company. It plans real requests with the use of
heterogenic agents modelling diﬀerent vehicle forms. The main goal of TeleTruck
is to model basic objects of the real world (drivers, trucks, trailers, containers)
with the use of basic agents. These agents have a task to merge themselves and
create holonic agents, cooperating together and performing tasks.
2.3

Crises in Transport Systems

The speciﬁc features of multi-agent systems, connected with decision making
based on local, partial knowledge and dynamic system reorganisation in response
to changes taking place, favour this approach when reacting to crisis situations.
Here, we will especially focus on applications in the transport domain. In [11]
a general idea of the model of such a system to react on crisis situations, prevent them and minimise consequences is given. The crisis situations analysed are
most often delays caused by uncertain travel times and traﬃc jams [7]. Furthermore, the presented MARS system was equipped with a module responsible for
modelling and predicting traﬃc jams while constructing routes.

Multi-agent Crisis Management in Transport Domain

3

857

Concept of Multi-agent System

The main task of the constructed system is to solve static and dynamic transport problems (PDPTW) and additionally recognising, serving and minimising
disadvantageous results of the chosen types of crises situations. In such a kind
of problem it is possible to distinguish units with diﬀerent degrees of autonomy of action (dispatcher, vehicles), which cooperate to realise some common
goals. This is the reason why an approach using multi-agent systems is applied.
The environment, where the agents act is either the Euclidean space or a graph
representing road connections.
3.1

Agents’ Description

In the constructed system the following main types of agents exist: Dispatcher
Agent, Execution Unit Agent (EUnit Agent) and Crisis Manager Agent.
3.2

Dispatcher Agent

Dispatcher Agent AD plays a role of manager in the system. It controls the work
and life cycle of Execution Unit agents, as well as it distributes transport requests
between them in the best possible way. In the system only one Dispatcher Agent
exists.
AD = (GD , KD , AD )

(1)

where:
GD - agent’s goal which is to minimise the function nv+TD, where v – number
of vehicles, TD –total distance, n – coeﬃcient.
KD - agent’s knowledge, KD = {Reqs, StatReqs, Env, EnvStat}, where Reqs
– information about requests, StatReqs – information about status of requests, which assigns to each of them a value from the set {received, rejected,
allocated, picked–up, delivered, wait_trainshipment}, Env — information
about transport network, EnvStat — information about the current status
of transport network,
AD – actions to be realised, AD = {AquireEU, AllocateReq}

3.3

Execution Unit Agent

The agent AEU manages the transport unit which realises transport requests.
Together with other units it participates in auctions of transport requests, and
then it realises the assigned requests.
AEU = (GEU , PEU , Loc, SEU , KEU , AEU )
where:

(2)

858

M. Konieczny, J. Koźlak, and M. Żabińska

GEU – agent’s goal which is to realise the maximal possible number of requests
as well as minimising of the total distance,
PEU – planned travel route,
Loc – current agent’s position,
SEU – agent’s status, information about allocated requests,
KEU – agent’s knowledge KEU = {Reqs, Env, EnvStatg} comprising Reqs —
set of requests, Env — information about environment (transport network),
EnvStat — information about status of environment taking into account
information concerning traﬃc jams as well as parts of a network totally
exluded from traﬃc,
AEU – actions of AE U = {ReqP art, P ickU p, Delivery, SendInf o}, where
ReqP art — participation in auctions of transport requests, P ickU p — loading, Delivery — unloading, SendInf o — transfer of information about discovered crisis situations to Crisis Manager Agent.
3.4

Crisis Manager Agent

Crisis Manager Agent ACM is dedicated to manage crisis situations originating
in the system. The agent is responsible for the detection of crisis situations as
well as handling them. Detection of the crisis situation may be done directly
by ACM, or indirectly by information from another agent. Handling of crisis
situations consists in such collaboration with other agents, so as to minimise all
negative results of the situation. Currently, only one Crisis Management Agent
exists in the system.

Fig. 1. Request allocation without crises handling

Multi-agent Crisis Management in Transport Domain

ACM = {KACM , RACM , AACM }

859

(3)

where:
KACM – knowledge about crisis situations
RACM – decision rules describing actions to be undertaken, for a given crisis
situation and situations occurring during its service
AACM – actions performed by an agent, AACM = {SendInf, RecStat, RReal},
SendInf — sending the information about crisis situation, ResStat — receiving information about the status of the crisis situation, RReal — proposal to reassign transport requests.
3.5

Request Allocation Protocol

In ﬁg. 1, the request allocation to vehicles without crises handling is shown.

4

Crises Handling

Crisis situations are deﬁned as any unpredictable events which have a signiﬁcant
impact on company activity. They include transport ﬂeet faults, delays of receiving or delivering goods by customer, as well as unpredictable changes in road
infrastructure, from intensive road traﬃc, which signiﬁcantly increase the travel
time, or faults of road sections. Occurrence of a crisis situation forces change of
transport plan or forces the use of a larger amount of transport units.
4.1

Types of Crises

Crisis situations may be distinguished into three groups: crisis situations in transport requests, transport ﬂeet and road infrastructure. The ﬁrst group includes
request withdrawal and delay in receiving commodity. The second group includes failures of the transport unit. The last group includes traﬃc jams and
road blocks.
4.2

Transport Unit Failure

The discussed crisis situation involves temporary or permanent exclusion of a
transport unit from use. Detection of this crisis situation involves Crisis Manager Agent “ﬁnding out” at ﬁrst about the occurrence of this crisis situation.
Next, Crisis Manager Agent informs transport unit about the situation occurred. In cases when the expected time of repair of the defective transport unit
is short enough to let all planned requests be realised in given time windows,
then the crisis situation does not signiﬁcantly aﬀect the course of simulation.
It only extends the total time of realising the whole transport plan. However,
if a failure of the transport ﬂeet unit is serious, it must be replaced with an
adequate vehicle, and transport requests in its transport plan must be passed
on to other transport units. Requests may be transferred on to other transport

860

M. Konieczny, J. Koźlak, and M. Żabińska

Fig. 2. Interactions: Handling of vehicle failure

Fig. 3. Interactions: Handling of traﬃc jam

Multi-agent Crisis Management in Transport Domain

861

units. The faulty unit must be transported to a point of repair, which increases
the cost of realising the transport plan. In cases when the transport set failure
is serious (long time of repair), it is necessary to put the next transport requests
in the transport plan up for auction, so that the time of realising them closes in
a deﬁnite time window.
4.3

Traﬃc Jam

Traﬃc jams have signiﬁcant inﬂuence on shipping agent activity. Long-lasting
jams contribute to delays in realising the transport requests in given time windows. Detection of a crisis situation such as a traﬃc jam may be performed in
two ways. (1) A transport set moving along a section of the transport network,
on which a traﬃc jam occurs, informs Crisis Manager Agent about this event.
(2) Crisis Manager Agent can receive information about this event directly from
the crisis situations generator. After the traﬃc jam has been detected, there are
three alternative scenarios presented in ﬁg. 3, depending on the certain situation. (1) If the delay resulting from a traﬃc jam has no inﬂuence on realising
the further transport plan by a transport unit, the unit should continue without
any changes. (2) If the delay results in a subsequent request in the transport
plan to be delayed, the transport plan should be changed, to avoid this kind of
situation. The change of the plan involves determining alternative routes, bypassing the section with traﬃc jam (3) If, despite determining an alternative
route, subsequent request realisations are delayed, they should be passed on to
other transport units.

5

Realisation

The system architecture scheme is presented in ﬁg. 4. JADE platform (Java
Agent Development Framework) version 3.3 [2] has been used. Fig. 4 presents all

Fig. 4. System architecture

862

M. Konieczny, J. Koźlak, and M. Żabińska

types of agents existing in the system and JADE platform range. It also presents
data stored by certain agents during the simulation. In Dispatcher Agent’s case,
it constitutes a set of transport request to be realised, as well as information
considering the status of their performance. Each agent of the Planning and
Executive Units, has a transport plan. A set of crisis situations to serve together
with their status, is stored by Crisis Manager Agent.
Transport network generator delivers environment for agents in the system.

6

Experiments and Results

The input data for the system may be distinguished into three categories. The
ﬁrst concerns transport requests, the second – road networks, connected points
of pickup or delivery and dispatch centre as well as connections between them,
and the third concerns crisis situations.
Evaluation of the algorithms applied to solve PDPTW was done on the basis
of benchmarks, which contain sets of transport requests [1], developed by Li and
Lim [9]. The published sets of tests belong to the three kinds of problems: C –
locations placed in clusters, R – locations placed randomly or RC – locations
placed either in clusters or randomly. Additionally, each kind of problems may
have small or large time windows and may have diﬀerent numbers of requests to
be served.
6.1

Solving of PDPTW Static Problems

In this section selected results of solving PDPTW for static and dynamic cases
are described. In ﬁg. 5 the average number of used vehicles and the average
total distances for selected groups of benchmarks are presented. The results
obtained by the created algorithm are not much worse than the best known
solutions [1].
The following experiments lead in the direction of using the maps of transport roads generated according to prepared algorithms considering requests
points from Li &Lim benchmarks and an analysis of the dynamic version of the
problem.
Total distance

Vehicles
16
14
12
10
8
6
4
2
0

2000
1750
1500
1250
1000
750
500
250
0
lc1xx

lc2xx

lr1xx
Best

lr2xx
Our solution

a)

lrc1xx

lrc2xx

lc1xx

lc2xx

lr1xx
Best

lr2xx

lrc1xx

lrc2xx

Our solution

b)

Fig. 5. Results: Static PDPTW: a)Vehicles needed b)Total travel distance

Multi-agent Crisis Management in Transport Domain

6.2

863

Crises

The results will be evaluated by the number of used vehicles and the total travel
distance as well their increase in comparison to the experiments without crisis
situations. In each of the performed tests 10 crises situations of each analysed
kind have been randomly generated. After performing the series of tests, numbers
of non-performed requests for the given kinds of crises situations are: 10 (19.4%)
for request withdrawal, 2.1 (4.1 %) for the delay of the delivery/receipt of the
package by customer, 13,7 (26.6%) for vehicle breakdown, 4.6 (8.9%) for the
increase of the travel time caused by traﬃc jams and 5.2 (10.1%) for closed
routes.
In ﬁg. 6a the number of used vehicles, the average for each group of request,
during the realisation of requests with diﬀerent kinds of crisis situations introduced are shown. In the vertical axis the number of vehicles used is presented
and in the additional vertical axis on the right the same value in comparison
to the number of vehicles used during the realisation of requests without crisis
situations is shown. In ﬁg. 6b the average distances travelled by all vehicles, for
each group of requests during the realisation of requests with diﬀerent kinds of
crisis situations introduced are presented. In the vertical axis the distance travelled by vehicles of the ﬂeet is presented and on the right side of the ﬁgure, the
same value in comparison to the distance travelled by the vehicles, during the
realisation without crisis situations is shown.
The largest decrease of the number of performed requests and the increase of
the used vehicles took place for the cases with vehicle failures and road closures.
The results for problems with crises such as customer delay and increase of travel
time are burdened by relatively low additional costs. The increase of travel times
and closing of routes especially lengthened the total distance because it forced
a search for other, longer routes.

Fig. 6. Results for the diﬀerent kinds of crises: a)Vehicles needed b)Total travel distance

864

7

M. Konieczny, J. Koźlak, and M. Żabińska

Conclusions

During this work, a multi-agent system for solving transport problem PDPTW
placed under the real conditions and with features of solving several kinds of
potential crisis situations has been realised.
Future work will focus on the improvement of the quality of optimisation algorithms, introduction of soft time windows and the applications of holons. The
soft time windows will make it possible to build plans which take into consideration fees dependent on the size of the delay. The application of holonic approach
makes it possible to take into consideration the transport units composed of
diﬀerent components so as to be best adjusted to needs.

References
1. Benchmarks - Vehicle Routing and Travelling Salesperson Problems,
http://www.sintef.no/static/am/opti/projects/top/
2. Java Agent DEvelopment Framework, http://jade.tilab.com/
3. Bachem, A., Hochstattler, W., Malich, M.: Simulated Trading A New Parallel Approach for Solving Vehicle Routing Problems. In: Proceedings of the International
Conference Parallel Computing: Trends and Applications (1994)
4. Burckert, H.-J., Fischer, K., Vierke, G.: Transportation scheduling with holonic
MAS - the TELETRUCK approach. In: Third International Conference on Practical Applications of Intelligent Agents and Multiagents, PAAM 1998 (1998)
5. Doerner, K., Hartl, R.F., Reimann, M.: Ant Colony Optimization applied to the
pickup and delivery problem. Technical Report Working Paper 76, Departament
of Managment Science, University of Vienna, Wien, Austria (November 2000)
6. Fischer, K., Muller, J., Pischel, M.: Cooperative Transportation Scheduling: an
Application Domain for DAI. In: Applied Artiﬁcial Intelligence, pp. 1–33 (1996)
7. Koźlak, J.: Learning in cooperating agents environment as a method of solving
transport problems and limiting the eﬀects of crisis situations. In: Shi, Y., van
Albada, G.D., Dongarra, J., Sloot, P.M.A. (eds.) ICCS 2007. LNCS, vol. 4488, pp.
872–879. Springer, Heidelberg (2007)
8. Lau, H., Liang, Z.: Pickup and Delivery with Time Windows: Algorithms and Test
Case Generation. In: Proceeedings of 13th IEEE International Conference on Tools
with Artiﬁcial Intelligence, ICTAI 2001 (2001)
9. Li, H., Lim, A.: A Metaheuristic for the Pickup and Delivery Problem with Time
Windows. In: Proceedings of 13th IEEE International Conference on Tools with
Artiﬁcial Intelligence (ICTAI 2001), Dallas, USA (2001)
10. Lim, H., Lim, A., Rodrigues, B.: Solving the Pick up and Delivery Problem using
“Squeaky Wheel” Optimization with Local Search. In: Proceedings of American
Conference on Information Systems, AMCIS 2002, USA (2002)
11. Nawarecki, E., Koźlak, J., Dobrowolski, G., Kisiel-Dorohinicki, M.: Discovery of
crises via agent-based simulation of a transportation system. In: Pěchouček, M.,
Petta, P., Varga, L.Z. (eds.) CEEMAS 2005. LNCS, vol. 3690, pp. 132–141.
Springer, Heidelberg (2005)
12. Smith, R.G.: The contract net protocol: high-level communication and control in a
distributed problem solver. IEEE Transactions on Computer, 1104–1113 (December 1980)

