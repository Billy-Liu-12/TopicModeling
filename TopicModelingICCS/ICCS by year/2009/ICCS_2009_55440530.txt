Second Derivative Approximation for
Origin-Based Algorithm
Feng Li
IBM China Research Laboratory,
Beijing 100193, P.R.China
lfeng@cn.ibm.com

Abstract. Origin-based algorithm(OBA) for traﬃc assignment problem has been demonstrated preferable to the widely accepted and used
Frank-Wolfe algorithm and path-based algorithms. Note that OBA can
not avoid path enumeration of concerned network, which will lead to
two disadvantages. One is the intensive memory requirements and the
other is the diﬃculties in manipulating and storing paths. In order to
solve these problems, we ﬁrst propose the lower and upper bounds of
the Hessian matrix, which can be calculated without path enumeration.
Then use the lower bound of Hessian matrix to approximate the direction
of the origin-based algorithm. According to our computational results,
the modiﬁed origin-based algorithm(MOBA) improves the convergence
performance greatly. The results indicate that MOBA can deliver better
and more reliable convergence than OBA and saves much more CPU
time especially when large-scale networks are being considered.
Keywords: Traﬃc Assignment, Origin-based Algorithm, Second Derivative, User Equilibrium.

1

Introduction

Traﬃc assignment problem (TAP) is the key problem for the long term planning
and evaluation of urban transportation network. It is to assign the traﬃc ﬂows
of each OD (Origin-Destination) pair to links of urban transportation network
in terms of certain principle, and count out all link traﬃc ﬂows. There are many
principles for TAP, but the most often used principles are the ﬁrst and second
principles of Wardrop, i.e. User Equilibrium principle and System Optimum
principle [1]. In order to ﬁnd a solution satisfying the User Equilibrium principle,
Beckmann et al. proposed a convex mathematical programming [2][3] which
became the main tool for solving traﬃc assignment problem. Since the work of
Beckmann et al, many algorithms have been suggested to solve it. All of them
can be broadly divided into three categories according to the solution space the
algorithm resides, i.e., the link- path- or origin-based algorithms.
The link-based algorithms, including Frank-Wolfe (FW) algorithm given by
LeBlanc et al. [4] and several modiﬁed FW algorithms [5][6][7][8][9], yield linkbased solutions. The path-based algorithms, including disaggregated simplicial
G. Allen et al. (Eds.): ICCS 2009, Part I, LNCS 5544, pp. 530–539, 2009.
c Springer-Verlag Berlin Heidelberg 2009

Second Derivative Approximation for Origin-Based Algorithm

531

decomposition (DSD) algorithm [10], gradient projection (GP) algorithm [11][12]
and conjugate gradient projection (CGP) algorithm [13] etc., can determine both
an aggregate link-based solution and an individual path-based solution which
is not available for link-based algorithms. The origin-based algorithm(OBA)[14]
can provide both an aggregate link-based solution and a constructive path-based
solution. In the past, path-based algorithms and origin-based algorithm were
not considered as a viable solution approach for large-scale network problems
because of intensive memory requirements and diﬃculties in manipulating and
storing paths. However, path-based algorithms and origin-based algorithm are
now made possible due to the dramatic advances in computing technology.
Recent researches [13][14] have shown and demonstrated that the origin-based
algorithm excels not only the FW algorithm but also some path-based algorithms
such as DSD, GP and CGP. Although OBA was designed for solutions with high
levels of accuracy, it also can not avoid manipulating and storing paths in each
iteration of the algorithm. Plentiful computational experiments of OBA also indicate that most of the CPU time of the OBA is to enumerate and manipulate paths
of the restricting subnetwork Ap (α)(see [14]).
Motivated by the problems discussed above, we give a second derivative approximation to modify the origin-based algorithm. By using this approximation,
the modiﬁed origin-based algorithm (MOBA) can avoid enumerating and manipulating paths of the restricting subnetworks and outperforms OBA in the speed of
convergence and memory requirements. The remaining sections of this paper are
organized as follows. Section 2 describes the traﬃc assignment problem and introduces the origin-based algorithm. The modiﬁed origin-based algorithm by using
second derivative approximation is then proposed in section 3. Section 4 describes
the computational results generated by OBA and MOBA from two real networks
including Sioux Falls and Barcelona network. Finally, a brief conclusion is given
in section 5.

2

User-Equilibrium Traﬃc Assignment and Origin-Based
Algorithm

Before introducing the user equilibrium traﬃc assignment model and the originbased algorithm, we give the following notations which are used in this paper.
G
N
A
O
D
a
at
ah
xa
ca

G = (N , A) represent an urban transportation network
N = (1,2,· · ·, N ) the set of nodes
the set of all directed links
the set of origin nodes
the set of destination nodes
a = [at , ah ] the directed link of the network
the tail node of link a
the head node of link a
the traﬃc ﬂow on link a
the traﬃc cost on link a

532

F. Li

ca
xpa
αpa
μpa
σip
νap
ρpi
gip
cr
Ap
B(i)
bpi
op (i)
lcnpi
Rij
Rij [Ap ]
r
fij
ra
δij
qij

the
the
the
the
the
the
the
the
the
the
the
the
the
the
the
the
the
the
the

2.1

ﬁrst-order derivative of the cost of link a
traﬃc ﬂow on link a from origin p
proportion of the traﬃc ﬂow from origin p that arrived at ah through link a
average cost of link a for origin p
average cost from origin p to node i
average ﬁrst-order derivative of the cost of link a for origin p
average ﬁrst-order derivative of the cost from origin p to node i
traﬃc ﬂow arrived at i from origin p
cost of path r, which is equal to total costs of all links on the paths
restricting subnetwork for origin p
set of all directed links whose head node is i
basic link of the links in B(i) for origin p
topological order of node i for Ap
last common node of all paths from origin p to node i
set of paths connecting i and j
set of paths in Ap connecting i and j
ﬂow on path r connecting i and j
path-link incidence matrix
total traﬃc demand between i and j, when i = j, qij = 0.

User Equilibrium Formulation

It is well known that TAP can be formulated as an optimization program with
a nonlinear objective function and linear constraints. Consider an urban transportation network represented by a directed graph G = (N , A). For convenience,
we suppose O = D = N . Using the above notes, the User Equilibrium (UE) trafﬁc assignment problem can be written as
xa (α)

ca ( )d

min Z =
s.t.

a∈A 0
αpa =
a∈B(i)
αpa ≥ 0,

(1)

1 ≤ i, p ≤ N, i = p

1,

∀a ∈ A, 1 ≤ p ≤ N

where α = (α1 , α2 , · · ·, αN ), αp = (· · ·, αpa , · · ·),a ∈ A is the variable of the
mathematical programming, and αpa is deﬁned as,
αpa =

xpa
b∈B(ah )

(2)

xpb

especially when the total traﬃc ﬂow from origin p that arrived at ah is zero, we
let any one of the proportions of those links with head node ah be one and the
others be zero. xa (α) is deﬁned as,
N

N

N

xia (α) =

xa (α) =
i=1

i=1 j=1 r∈Rij

r,a
fijr · δij
=

N

N

r,a
αib δij

qij
i=1 j=1 r∈Rij

(3)

b⊆r

For each origin p and every node j = p we choose one link bpj ∈ Ap : (bpj )h = j
as the basic link of the links with head node j for origin p, call all other links

Second Derivative Approximation for Origin-Based Algorithm

533

with head node j in the restricting subnetwork Ap (if there are any) the nonbasic links for origin p and denote them as NBpj = {a ∈ Ap : ah = j; a = bpj };
NBp = ∪j∈N ;j=p NBpj . Then α can be viewed as a function of αNB :
αpbp (αNB ) = 1 −
j

αpa NB , ∀j ∈ N \ {p}, ∀p ∈ N

(4a)

a∈NBp
j

αpa (αNB ) = αpa NB ,

∀a ∈ NBp , ∀p ∈ N

(4b)

αpa (αNB ) = αpa NB = 0,

∀a ∈ A\Ap , ∀p ∈ N

(4c)

Using (4), (1) can be simply changed into,
xa (αNB )

ca ( )d

min Z =
a∈A

(5)

0

s.t. αpa NB ≥ 0,

∀a ∈ A, 1 ≤ p ≤ N

It is simply to prove that (1) equals to the famous Beckmann’s transformation
[2]. Convergence algorithms for solving it have been studied since the 1960s.
2.2

Origin-Based Algorithm

The origin-based algorithm operates directly on the space of the traﬃc ﬂow
proportion. It makes successive moves as an approximate Newton direction at
each iteration. The main body of the algorithm can be found in [14].

3

Modiﬁed Origin-Based Algorithm

Our plentiful computational experiments and investigation of OBA indicate that
there is no eﬃcient and quick methods to ﬁnd the last common nodes of the
restricting subnetwork Ap (α) and we cannot but enumerate all paths of the
restricting subnetwork in the algorithm. We also found the last common nodes
were only used to calculate the approximation of the Hessian matrix. Hence if we
can propose a new Hessian matrix approximation without using the last common
nodes to replace that of the OBA, we will avoid path enumeration. Below the
lower bound and upper bound of the Hessian matrix will be calculated ﬁrstly,
then a novel Hessian matrix approximation is determined by these bounds. The
novel approximation will be used to modify the origin-based algorithm.
Before giving the bounds of the Hessian matrix, we need the following deﬁnitions and propositions.
Definition 1. For any origin p, and any two nodes i and j, we define the following formal expression as the proportion of the flow from origin p that arrives
at node j through node i.
χpi→j =

r∈Rij [Ap ]

1,

a⊆r

αpa , ∀p ∈ N , i = j
i=j

(6)

534

F. Li

Definition 2. For any origin p and node j, the following equation is defined as
the average cost from origin p to node j.
σjp =

αpa

cr ·

(7)

a⊆r

r∈Rpj [Ap ]:a⊆r

Definition 3. For any origin p and link a, the following equation is defined as
and the average cost of link a for origin p.
μpa =

αpa = ca + σapt

cr ·

(8)

a ⊆r: a =a

r∈Rpah [Ap ]: a⊆r

Definition 4. For any origin p, the topological order of all nodes in Ap is defined
as a one-to-one function o : N → {1, 2, · · ·, N } such that, ∀a = [i, j] ∈ Ap ⇒
op (i) < op (j), and particularly op (p) = 1.
Definition 5. The total flow arrived at node j from origin p is defined as,
gjp

N

N

=

αpa

qpi
i=1 r∈Rpi [Ap ];
j∈r

a⊆r

qpi ·χpp→j ·χpj→i

=

N

qpi ·χpj→i , ∀p ∈ N (9)

=

i=1

i=1

Using these deﬁnitions, the following equations can be easily gotten,
σjp =

αpa ·
a∈Ap : ah =j

αpa =

cr ·
r∈Rpj [Ap ]: a⊆r

a ⊆r: a =a

μpa = ca +

αpa · μpa

αpa

cr ·
a ⊆r

r∈Rpat [Ap ]: a⊆r

αpa ·

= ca +
r∈Rpat [Ap ]: a⊆r a ⊆r

ce
e⊆r

ca · χpp→a · αpa · χpa

= ca +

h →at

t

a ∈Ap

ca · αpa · χpa

= ca +
p

h

p

a ∈Ap ;o (ah )<o (ah )

∂xa
=
∂αpa

(10)

a∈Ap : ah =j

→at

(11)

N

αpe

qpi ·
i=1 r∈Rpi [Ap ];a ⊆r;a⊆r

e⊆r;e=a

⎧ N
⎪
⎪
⎪
qpi
αpe = gaph ,
⎪
⎪
⎪
⎨ i=1
r∈Rpi [Ap ];a⊆r;a =a e⊆r;e=a
= 0,
⎪
⎪
⎪
αpa · χpa →at · gaph ,
⎪
⎪
h
⎪
p
p
⎩ χp
ah →a · αa · ga ,
t

h

a =a
ah = ah , a = a (12)
op (ah ) < op (ah )
op (ah ) > op (ah )

Second Derivative Approximation for Origin-Based Algorithm

⎧ p
gah ,
a =a
⎪
⎪
⎪
p
⎪
−g
a
= bpah
⎨ ah
ah = ah , a = a, a = bpah
= 0,
p
p
p
⎪
p
p
p
⎪
⎪ αa · gah · (χah →at − χah →bpah t ), o (ah ) < o (ah )
⎪
⎩
0,
op (ah ) > op (ah )

∂xa
∂αpa

535

NB

(13)

Hence the ﬁrst-order and second-order derivatives of the variables αNB can be
describe as,
∂Z
∂Z
∂xa
∂xa
=
·
ca ·
NB =
NB
p NB
p
∂xa ∂αa
∂αa
∂αpa
a ∈A

= ca ·

gaph

a ∈A

− cbpa ·
h

gaph

ca · αpa · gaph · (χpa

+

h →at

a ∈Ap ;
op (ah )<op (ah )

= gaph (μpa − μpbpa )

− χpa

p
h →bah t

(14)

h

∂2Z
NB 2
∂αpa

=
a ∈A

= (ca + c

bp
ah

)·

∂2Z
∂xa
NB
2 ·
∂xa
∂αpa
gaph 2

)

2

+

∂Z
∂ 2 xa
·
NB 2
∂xa
∂αpa

ca ·

+

2
αpa

·

gaph 2

·

a ∈Ap ;
op (ah )<op (ah )

ca ·

=
a ∈A

(χpa →at
h

2

∂xa
NB
∂αpa

− χpa

p
h →bah t

)2 (15)

Notice that,
χpp→i · χpi→j =

= χpp→j

αpa ≤
r∈Rpj [Ap ]; a⊆r
i∈r

r∈Rpj [Ap ] a⊆r

and for any node j and any origin p, it is easy to prove χpp→j = 1 by Lemma 4
of [14], then,
0 ≤ χpi→j ≤ 1, ∀p ∈ N , 1 ≤ i, j, ≤ N
Hence the upper bound of the Hessian matrix will be,
∂2Z
NB 2
∂αpa

ca · αpa · gaph 2

≤ ca · gaph 2 + cbpa · gaph 2 +

2

h

(16)

a ∈Ap ;
op (ah )<op (ah )

Because,
∂ 2Z
NB 2
∂αpa

= ca · gaph 2 + cbpa · gaph 2
h

ca · αpa · gaph 2 · (χpa
2

+
a ∈Ap ;op (ah )<op (ah )

≥ ca · gaph 2 +

− χpa

p
h →bah t

)2

ca · αpa · gaph 2 · (1 − χpat →bpa )2
2

a ∈Ap ;a ∈B(at )

+cbpa · gaph 2 +
h

h →at

ht

ca · αpa · gaph 2 · (χpbpa
2

a ∈Ap ;a ∈B(bp
a

ht

)

ht

→at

− 1)2(17)

536

F. Li

and there is no loop for any restricting network Ap , hence
χpat →bpa

= αp[at ,bpa

χpbpa →at
ht

=

ht

]
ht
p
α[bpa ,at ]
ht

Therefore the lower bound of the Hessian matrix is
∂2Z
NB 2
∂αpa

≥ ca · gaph 2 +

ca · αpa · gaph 2 · (1 − αp[at ,bpa
2

a ∈Ap ;
a ∈B(at )

ht

+ cbpa · gaph 2 +
h

ca · αpa · gaph 2 · (αp[bpa

]

2

a ∈Ap ;
a ∈B(bp
)
a

ht

,at ]

)2

− 1)2

ht

≥ ca · gaph 2 + cbpa · gaph 2

(18)

h

Using the bounds of the Hessian matrix, we can get the following approximation
of Newton direction of the variables αNB ,
Δdna =

μnbna − μna
t

(ca + cbn ) · gant

, ∀a ∈ NBn , n ∈ D.

at

Thus for any origin p, we have,
⎧
μpp −μp
a
ba
⎨
p NB
h
,
λ
·
max
−α
p
NB
p NB
a
(c
+c
)·g
p
a
j (α )
Δαa =
ba
h
⎩
p NB
−αa ,
Δαpa NB = 0,

, gaph (αNB ) > 0
gaph (αNB )

, ∀a ∈ NBp (19a)

=0

∀a ∈ A\Ap

(19b)

where λ is a step size which will be determined by the following algorithm.
Modified Origin-based Algorithm
Initialization
For p from 1 to N
Ap = tree of minimum cost paths from origin p
xp = all-or-nothing assignment using Ap
Calculate αp by using (2)
End for
Main loop
While x does not satisfy the convergence condition do
For p from 1 to N
Update restricting subnetwork Ap
Update origin-based link ﬂows for origin p
End for
End while
Update restricting subnetwork for origin p

Second Derivative Approximation for Origin-Based Algorithm

537

Remove unused links from Ap
Compute maximum cost ui from p to i for all i ∈ N
For a = [at , ah ] in A
If uat < uah add link a to Ap
End for
Find topological order for new Ap
Update data structures
Update origin-based link flows for origin p
Using (14) and (18) to compute average costs and Hessian approximations
For step size λ = 2−k , k = 0, 1, 2, 3, · · ·
Using (19) to compute ﬂow shifts Δαp for λ
Projection and aggregate ﬂow shifts
If new value of objective function is less than the old then stop
End for
Apply ﬂow shifts
Update total link ﬂows and link costs.

4

Numerical Examples

Below we will illustrate both OBA and MOBA by the following networks whose
basic characteristics are presented in Table 1. All programs are coded in C and
executed on a microcomputer with P4 2.0G, 512M. For fair comparison, common
data structures for storing network topology and links and same convergence criterion are used in both OBA and the modiﬁed algorithm(MOBA). The following
steps are used for the comparison of algorithm performance.
Table 1. Basic Characteristics of Test Urban Networks
Netork Origin Destination Node Link OD Pair
Sioux Falls 24
24
24
76
528
Barcelona 97
108
930 2,522 7,922

Step 1. Solve TAP by LCFW (a modiﬁed Frank Wlofe algorithm)[8], with very
large number of iteration and highly strict convergence criterion. Tag
its ﬁnal solution as Ideal Optimal Solution(IOS) and denote it with
xI = (· · · , xIa , · · · ). The intuitive reason for choosing LCFW is that it
outperforms the other algorithms(including FW, GP etc.[8]) and it can
avoid path enumerations.
Step 2. Considering that there is only one ﬂow pattern that minimizes program (1)[3], we use the following convergence criterion in both OBA
and MOBA.
(xa (n) − xIa )2
ε = a∈A
(20)
I2
a∈A xa
where xa (n) is the link ﬂows of the n-th iteration of the algorithms. When
ε is less than a given small positive constant such as 1.0 × 10−n , n =
0, 1, 2, · · · , the algorithms will stop.

538

F. Li
6

45

x 10

1.235

MOBA
OBA

MOBA
OBA
1.234

44.5

Objective Function Value

Value of Objective Function

1.233

44

43.5

1.232

1.231

43
1.23

42.5

42

1.229

1.228

0

1

2

3
4
CPU Time(sec.)

5

6

7

Fig. 1. OFV-CPU Time for Sioux Falls

0

1

2

3
CPU Time(Sec.)

4

5

6
4

x 10

Fig. 2. OFV-CPU Time for Barselona
−1

0

MOBA
OBA

MOBA
OBA
−1.5

−2

x

Relative Precison(10x)

Relative Precison(10 )

−5
−2.5

−3

−3.5

−10
−4

−4.5

−15

−5
0

50

100

150
CPU Time(sec.)

200

250

300

Fig. 3. log ε-CPU Time for Sioux Falls

0

0.5

1

1.5

2
2.5
CPU Time(sec.)

3

3.5

4

4.5
4

x 10

Fig. 4. log ε-CPU Time for Barselona

Figure 1 and 2 show the relationship between the objective function value(OFV)
and CPU time of the two algorithms for Sioux Falls network and Barcelona network. Figure 3 and 4 show the convergence of the two algorithms as measured
by log ε vs. CPU time for those two real networks. From those four ﬁghts, we
knew the performance of the modiﬁed origin based algorithm is better than that
of origin-based algorithm. The modiﬁed algorithm is superior to the origin-basd
algorithm in convergence and calculation time. At the same precision, the CPU
time of the modiﬁed algorithm is only one third of the origin-based algorithm,
even less than that. And the modiﬁed algorithm can solve the traﬃc assignment
problem for large-scale network in an ideal time.

5

Conclusion

In this paper we provide a modiﬁfed origin-based algorithm based on esitimation
of the lower and upper bounds of the Hessian matrix for, which can be calculated
without path enumeration. In this algorithm we use the lower bound of Hessian
matrix to approximate the direction of the origin-based algorithm. According

Second Derivative Approximation for Origin-Based Algorithm

539

to our computational results, the modiﬁed origin-based algorithm(MOBA) improves the convergence performance greatly. The results indicate that MOBA
can deliver better and more reliable convergence than OBA and saves much more
CPU time especially when large-scale networks are being considered.

References
1. Wardrop, J.G.: Some theoretical aspects of road traﬃc research. In: Proceedings
of the institute of civil engineers, Part II, pp. 325–378 (1952)
2. Beckmann, M., Mcguire, C.B., Winster, C.B.: Studies in the economics of transportation. Yale University Press, New Heaven (1956)
3. Sheﬃ, Y.: Urban transportation networks: equilibrium analysis with mathematical
programming methods. Prentice Hall, Inc., Englewood Cliﬀs (1984)
4. Leblanc, L.J., Morlok, E.K., Pierskalla, W.: An eﬃcient approach to solving the
road network equilibrium traﬃc assignment problem. Transportation Research 9,
309–318 (1975)
5. Leblanc, L.J., Helgason, R.V., Boyce, D.E.: Improved eﬃciency of the FrankWolfe
algorithm for convex network problems. Transportation Science 19, 445–462 (1985)
6. Fukushima, M.: A modiﬁed frankwolfe algorithm for solving the traﬃc assignment
problem. Transportation Research Part B 18(2), 169–177 (1984)
7. Anders, W., Carmen, O.: Accelerating convergence of the frankwolfe algorithm.
Transportation Research Part B 19(2), 113–122 (1985)
8. Lee, D.H., Nie, Y.: Accelerating strategies and computational studies of the
FrankWolfe algorithm for the traﬃc assignment problem. Transportation Research
Record 1771, 97–105 (2001)
9. Gao, Z.Y., Lam, W.H.K., Wong, S.C., Yang, H.: The convergence of equilibrium
algorithms with non-monotone line search technique. Applied Mathematics and
Computation 148, 1–13 (2004)
10. Larsson, T., Patriksson, M.: Simplicial decomposition with disaggregated representation for the traﬃc assignment problem. Transportation Science 26(1), 4–17
(1992)
11. Bertsekas, D.: On the Goldstein-Levitin-Polyak gradient projection method. IEEE
Transaction on Automatic Control 21, 174–183 (1976)
12. Jayakrishnan, R., Tsai, W.K., Prashker, J.N.: Faster path-based algorithm for
traﬃc assignment. Transportation Research Record 1443, 75–83 (1994)
13. Lee, D.H., Nie, Y., Chen, A.: A conjugate gradient projection algorithm for the trafﬁc assignment problem. Mathematical and computer modeling 37, 863–878 (2003)
14. Bar-Gera, H.: Origin-based algorithm for the traﬃc assignment problem. Transportation Science 36(4), 398–417 (2002)

