Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 717 – 726

International Conference on Computational Science, ICCS 2012

Towards a Navier Stokes - Darcy Upscaling Based on Permeability
Tensor Computation
M. Lieba,, T. Neckela,, H.-J. Bungartza,, S. Sunb,
b Center

a Institut f¨
ur Informatik, Technische Universit¨at M¨unchen, Boltzmannstr. 3, 85748 Garching, Germany
for Subsurface Imaging and Fluid Modeling consortium, King Abdullah University, Thuwal 23955-6900, Kingdom of Saudi Arabia

Abstract
The micro scale simulation of CO2 sequestration involves complex, porous-like geometries. For the generation of
such geometries, we present two approaches: In 2D, we construct a fractured domain by channel networks. In 3D, we
approximate sand grain-like scenarios by dense sphere packings. The ﬂow through these structures is simulated with
the incompressible Navier-Stokes solver of the PDE framework Peano. Using an upscaling scheme, the results of the
micro scale are used as input data for a Darcy solver on the coarse scales. The coupling concept and the scenario
generators are presented together with ﬁrst simulation results showing the validity of the approach.
Keywords: Porous Media, CFD, Darcy, Incompressible Navier-Stokes, Upscaling

1. Introduction
Enhanced oil recovery by CO2 sequestration is a complex and challenging task. To understand the underlying
phenomena and optimise the design of the process, suﬃciently accurate numerical simulations of the sequestration
process are necessary. However, a full resolution of the microscopic scale within the complex geologic formations
is not aﬀordable as the computational domains are huge compared to the studied simulation scale. The domains of
interest are usually by a factor of about 105 –108 larger than the underlying micro structures; in a three-dimensional
setup, one would end up with about 1018 unknowns. As systems of this size can’t be solved directly, homogenisation
techniques are applied to downscale the problem’s cardinality. At this macro scale, one has to introduce further
assumptions and increase the complexity of the underlying model.
Diﬀerent approaches exist to realize the homogenisation. Fully coupled techniques resolve the overall domain by
a mixture of diﬀerent discretisation on one combined mesh of macro scale cells. Hence, mere porous media parts
of the domain are solved via Darcy’s law, e.g., while special non-porous areas of the domain—such as relatively
large channels or cavities—are considered as full ﬂow regions (see [1], e.g.). A diﬀerent approach are upscaling
techniques. Flow computations on smaller areas of reference allow to (considerably) improve the modelling on the
coarse scale. One example of such an upscaling approach is presented in [2]: A discrete ﬂow simulation on the micro
level is coupled to a Darcy solver on the macro scale. The 2D mirco-scale ﬂow is approximated by fracture network
Email addresses: liebm@in.tum.de (M. Lieb), neckel@in.tum.de (T. Neckel), bungartz@in.tum.de (H.-J. Bungartz),
shuyu.sun@kaust.edu.sa (S. Sun)

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.077

718

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

structures where Poiseuille’s law is applied to couple one-dimensional channels for the computation of the overall
ﬂow. Using these ﬂow values, the permeability tensor is computed applying the Delta-Y transformation and handled
to the Darcy solver.
In this paper, we follow the upscaling approach [2]. Instead of the fracture network structures for a whole Darcy
cell, we choose representative equivalent volumes (REV) and generate on them explicitly resolved porous media-like
geometries: fracture network-like structures via channels in 2D and sphere packings in 3D. Navier-Stokes ﬂow is
computed on these REVs and the real ﬂow values are used to get the corresponding permeability tensor values. Our
ﬂow solver is implemented in TUM’s PDE framework Peano. This HPC framework hides most of the eﬀort necessary
to parallelise complex PDE’s such that the developer can focus on the implementation of the physical model. The
Darcy solver we are using is the RST Darcy solver from CSIM/KAUST which supports the simulation of homogenized
single- and multi-phase ﬂows in porous media.
The remainder of this paper is organized as follows: In Sec. 2, we present the software packages used in our
approach. Details on the upscaling scheme are provided in Sec. 3. Sec. 4 holds numerical results concerning the
generation of various 2D and 3D scenarios as well as the ﬂow features of some two-dimensional fracture network-like
structures. A conclusion and outlook on future work in Sec. 5 close this contribution.
2. Software
In order to realise the approach described in the previous section we developed three diﬀerent software packages:
A scenario generator, the PDE framework Peano, and the Darcy solver RST.
2.1. Scenario Generator
The high number of geometric elements in a porous media structure makes a manual generation of such scenarios
practically impossible. Therefore, we developed a small programme to generate the corresponding conﬁgurations. It
comes with a Qt1 based graphical user interface (GUI) which simpliﬁes the setup and allows for a preview on the
generated settings2 .
Technically separated from the GUI, a number of algorithms for the generation of diﬀerent topologies are realized.
Each implementation of an algorithm to generate a certain geometric structure is called a Generator. All generators
have a number of conﬁgurable quantities, which are the parameters required by the algorithm to generate a scenario.
In the context of generation of porous media equivalent geometries one 2D and three 3D generators are available:
1.
2.
3.
4.

Regular sphere packing layer (3D)
Hexagonal close packing (3D)
Periodic random sphere packing (3D)
Fracture network (2D)

For the generation of 3D porous media equivalent geometries like sand grain structures we use sphere packings. The
ﬁrst one creates a stack of diﬀerent sphere packings. Each packing is speciﬁed by the radius of the spheres, the
thickness of the layer in the stack, and the volume fraction which should be covered by spheres. This way one can
quickly set up a multiple soil scenario, e. g. Fig. 1(a). In a hexagonal dense packing, the spheres are uniformly
distributed in the whole domain. The spheres are inserted in a precomputed manner. In contrast to this generator
the random packing stochastically adds spheres to a domain which is afterwards shaken or compressed. The narrow
ﬁssures resulting of the dense packing represent a benchmark geometry for our ﬂuid solver. The third algorithm
creates such a packing of randomly ordered with periodic boundary conditions. It is based on an approach presented
by Lubachevsky and Stillinger [3], which works only for homogenous sphere packings, e.g. all spheres have the same
radius. We extended it to create sphere packings with heterogeneous radii. In order to generate such a packing the
user can specify a grain size variance. This deﬁnes the allowed deviation of a sphere’s radius compared to a reference
radius. The original iterative scheme has the disadvantage that it does not always converge to a dense packing which
we want. As discussed in [3] it can happen that the algorithm ﬁnishes while there are spheres left with a spatial degree
1 http://qt.nokia.com/products/
2 For

synergy eﬀects, this GUI is used simultaneously for generating initial scenarios for molecular dynamics simulations.

719

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

(a)

(b)

Figure 1: 3D porous media equivalent structures. (a) Example of a multi layer scenario. (b) Artiﬁcially generated sphere packing with periodic
domain boundaries. The packing has been generated using a molecular-dynamics-like algorithm resulting in an average maximum density of
63.4%.

of freedom. In order to represent a sand grain packing we need fully dense packings. Thus, we have extended the LS
algorithm in a way such that it stops the classical LS-algorithm after some iterations and continues as follows:
1. Take randomly a sphere out of the pre-generated sparse sphere packing. Check if the sphere has a spatial degree
of freedom.
2. If the sphere has a spatial degree of freedom, detect the neighbouring spheres and set it into the centre of its
neighbors. Increase the radius such that
(a) it does not intersect with a neighbouring sphere, and
(b) the radius of the current sphere is smaller or equal to the currently maximum allowed radius.
The result is fully dense packing with no free spheres left. At the same time we could reduce the generation time by
a factor of eight to ten. The eﬀect is mainly caused by the reduced number of iterations the algorithm needs until the
dense packing is generated.
The screenshot depicted in Fig. 2 shows a fracture network scenario as used in this paper. The pane on the right
hand side shows the conﬁgurable input parameters of the fracture network generator:
• The number of channels to be inserted in the domain.
• The length of the channels.
• The width of the channels.
• The minimum and maximum orientation of the channels in the domain.
The number of parameters can be extended, if a higher complexity or irregularity is desired. The fracture network
generator is based on the model discussed in [2]. The channels of ﬁxed length l, ﬁxed width w, a random orientation
in the range of (−pi/2, pi/2), and a random centre point 0 ≤ x, y ≤ 1 are inserted into a unite square. In order to
generate meaningful scenarios, we have to make sure that a connection between the inﬂow and outﬂow boundary is
available to enable ﬂow. From the work of Robinson [4] we know that we can compute the corresponding percolation
in a certain direction (i. e. along the x-axis in our case). For this purpose, we calculate the dimensionless density N as
N = dl2 ,

(1)

720

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

Figure 2: Screen shot of the ScenarioGenerator GUI with the fracture network generator. The channels of length 0.3 and width 0.01 are randomly
π π
oriented in the range of (− 18
, 36 ) and embedded in the unit square in this example.

where d represents the number of lines per unit area and l the length scale (i.e. the length of the channels relative
to the size of the edge of our quadratic domain). Then, for the orientation range (π/2, pi), percolation occurs, if
N > Nc = 1.45. Given an orientation (α, β), |β| + |α| < pi/2 the critical density can be estimated as
Nc ≈ 1.45

π
.
|α| + |β|

(2)

In the setting depicted in Fig. 2, for example, we chose parameters that result in N = 36 > 2.61 = Nc allowing, hence,
for a throughput.
2.2. Peano and its NSE solver
To run the incompressible ﬂow simulations on the small-scale porous media-like geometries, we use the ﬂow
solver of the PDE framework Peano. The C++ framework Peano is implemented in a strictly object-oriented manner
relying on successful approaches of Software Engineering such as automated tests, design patterns, or continuous
integration (cf. [5, 6, 7]). It is addressing important challenges concerning performance and re-usability of code. The
framework oﬀers adaptive Cartesian grids via spacetrees (similar to octrees), space-ﬁlling curves and stack data structures for arbitrary dimensions. In order to eﬃciently and automatically generate a mesh, the geometry is embedded
into a hypercube root cell which is subdivided recursively by splitting up a cell into three parts along each coordinate
axis.
For an iteration over the grid, the underlying spacetree of cells is serialised using the so-called space-ﬁlling curves
([8]) which are recursively deﬁned and ﬁt perfectly to the construction of the spacetree and the grid. A 2D example
of an adaptive grid is shown in Figure 3(a) together with the corresponding discrete iterate of the Peano curve (a
space-ﬁlling curve which actually gave name to the framework).
For accessing vertex data, a very cache-eﬃcient mechanism has been developed using simple stack data structures
that allow push and pop operations. Investigating the data access order during a grid iteration along the Peano curve

721

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

pressure
5
3
1.5
0.5
-0.12
-0.5
-2
-4

(a)

(b)

Figure 3: (a) Example of a two-dimensional adaptive Cartesian grid and its corresponding discrete iteration of the Peano curve. (b) Pressure
distribution of the FSI benchmark CFD 2 (cf. [9]) at a Reynolds number of Re=200.

shows exactly such a linear “pile-up-pile-down” structure as allowed/needed for stacks. Using the Peano curve together with the stacks results in high temporal and spatial locality of data access enabling high cache-hit rates of 98
– 99%, independent of the architecture, the dimension, or the concrete type of application in use. Furthermore, no
neighbourhood information, in particular at boundaries between diﬀerent reﬁnement levels, has to be stored explicitly
because the operator evaluation is implemented in a strictly cell-wise manner, a fact that seems to be a restriction
but actually ﬁts perfectly to the scheme. Avoiding the storage of neighbourhood data leads, in particular, to a very
low memory footprint. Finally, the insertion or deletion of grid cells or vertices during reﬁnement or coarsening of
the mesh is straightforward to realise. Hence, the adaptive grids in Peano are capable of being adapted dynamically
whenever and wherever necessary in a simulation.
Peano’s approach to adaptive Cartesian grids does neither depend on the concrete PDE to be solved nor on the
discretisation scheme in use. Hence, Peano represents a framework for diﬀerent solvers, oﬀering grid generation,
data handling, an encapsulated parallelisation etc. Currently, several solvers exist in the framework, such as for the
Poisson equation, for heat equation simulations, for the continuity equation, and for the incompressible Navier-Stokes
equations (NSE) (cf. [10]).
The NSE ﬂow solver in Peano supports two- and three-dimensional spatial discretisation via low-order ﬁnite
elements (FEM) and higher-order interpolated diﬀerential operators (IDO, cf. [11, 12]). Among the various diﬀerent
explicit and implicit time integration methods available, the workhorse of the ﬂow solver is an explicit scheme (the
Chorin projection method, [13]). Various benchmark computations showed the successful combination of, on the one
hand, the various features necessary for a modern ﬂow solver, and, on the other hand, keeping good performance
results of Peano such as high cache-hit rates and low memory demands (cf. [6, 5, 10], e.g.). Furthermore, the ﬂow
solver has been used for partitioned ﬂuid-structure interaction simulations (such as proposed in [9], see Fig. 3(b))
where moving geometries and, hence, an eﬃcient realisation of dynamically changing adaptive grids play a crucial
role. Thus, Peano represents a powerful tool for eﬃcient CFD simulations.
2.3. The Darcy solver RST
For the coarse scale simulation of ﬂows in porous media, we use the RST package recently developed at CSIM.
RST is a Darcy ﬂow solver which supports single and multi-phase transport. The discretisation of the domain is based
on regular Cartesian grids. The speciﬁcation of a problem is realised by conﬁguration ﬁles following a syntax similar
to Matlab. In addition, the user has the possibility to specify problems in an interactive environment. The programme
is written in Fortran while it uses some C and C++ libraries as solver back-ends. For the solution of the resulting
systems of equations, an in-house direct solver and two external packages (PetSc, UMFPACK) are available. Explicit
and implicit time integration schemes are provided.
Most functionalities in RST support parallel execution and enable the simulation of more complicated setups
with a high number of unknowns. Currently, the grid is parallelised with MPI, while a parallelisation using PetSc’s
distributed arrays is currently under development.

722

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

3. Upscaling Concept
In this section we present the coupling of both solvers. The coupling we are presenting is not a full bidirectional
coupling, but a one way upscaling based on Darcy’s law. It states that the ﬂow through a volume of porous medium
can be computed based on the pressure diﬀerence p on the domain depending on the permeability of the porous
media k, the cross-sectional area to ﬂow A, and the ﬂuids viscosity μ:
Q=

−kA p
.
μ L

(3)

The RST Darcy solver uses a regular Cartesian grid as it is depicted in Fig. 4. For each cell of this grid we want to
compute the permeability k based on a fracture network in volume smaller than the Darcy cell but with an equivalent
crack structure. We call such a volume representative equivalent volume (REV), see Fig. 4. Given the REVs, we
explicitly resolve their geometry and simulate the ﬂow Q through them using incompressible Navier-Stokes. From
this ﬂow, one entry in the permeability tensor
k=

k xx
k xy

k xy
kyy

(4)

is computed using the continuum representation (3). The indices indicate the permeability along a certain axis. Along
the x-axis we get
Qx Lx
k xx = −μ
.
(5)
A px
For the computation of the other entries of k one can change the boundary conditions, or rotate the domain preserving
the boundary conditions. In our case the domain is rotated.
The ﬂow in our Navier-Stokes scenario is driven by a pressure diﬀerence p. From the steady-state solution we
compute the mass ﬂow Q through our REV by integrating the velocities at the outﬂow. The incompressibility implies
that the inﬂow equals the outﬂow. The goal is the computation of the ﬂow Q through the micro structures.

Figure 4: The left hand side represents a Darcy grid. For each Darcy cell we simulate several ﬂows through a representative volume (right) to
compute the entries of the permeability tensor.

Q=ρ

Γout

u·n=−

Γin

u·n

(6)

Our ﬂow solver uses Q1 Q0 FEM discretisation and in space a Cartesian grid. The computational domain is a unit
square. Assuming a single phase ﬂow of a ﬂuid with density ρ we can compute the discrete outﬂow as follows:
h−1

Q = ρh

uout,i
i=1

The outﬂow is depicted in Fig. 5(b).

(7)

723

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

(a)

(b)

Figure 5: Fluid simulation conﬁguration and discretisation details: Setup of the ﬂuid domain (a) and velocities at the outﬂow boundary (b).

4. Numerical Results
For the simulation presented in this Section we have used several equally equipped desktop computers. The
conﬁguration settings relevant for the computations are: Intel i7-870 Quad-core processors with two memory lanes,
8GB DDR3 RAM 1333 MHz, Ubuntu Linux 10.4.
4.1. Scenario Generation
The following tables shows the time required to generate random sphere packings using our modiﬁed LubachevskyStillinger algorithm. The radii of the spheres equally distributed between [rmax /2, rmax ]. As the generation starts with
points randomly generated in space the individual generation times vary up to 5%. The values in Tab. 1 are the mean
value of ﬁve executions: As the insertion of the channels is pure random insertion the scenario generation takes less
Table 1: Average generation times for sphere packings of diﬀerent size in seconds.

Number of Spheres

125

250

500

1000

Original Algorithm

2.4

4.9

12.9

27.4

Modiﬁed Algorithm

0.3

0.5

1.2

2.5

then a second for scenarios with ≤ 12, 800 channels. In any case the rendering of the preview may take some seconds,
if the scenario exceeds 1, 000 geometric elements. For a quick generation of the scenarios one can use the command
line version or link against the generators-library. At the current state of our project the scenario generator writes the
original and the rotated conﬁgurations for the simulation in Peano NSE. The control of the programme ﬂow is based
on Bash/Python scripts. This automatic and eﬃcient generation of porous-like geometries allows to create all kinds
of porosity setups without needing experimental/measured geometry data.
4.2. Simulation of Micro-Scale Flows
In order to investigate the relation between the discretisation and the throughput in 2D we used a fracture-networklike structure composed of 100 channels (depicted in Fig. 7(a)). The pressure boundary conditions prescribe a difference of p = 1. For the solution of the pressure Poisson equation we use a Jacobi preconditioned CG, max. 300
iterations, and a relative and absolute tolerance of 10−7 together with adaptive time stepping.
The relative throughput qrelative depicted in 7(b) is deﬁned as a function of the time step ts and the mesh width h:
qrelative (h, ts) =

q(h, ts)
q(hmin , tsmax )

(8)

The diﬀerent colours visualise the respective grid resolution in one dimension, ”400” represents a 400 × 400 regular
grid. The throughput clearly increases with the higher resolutions. The reason is the underlying discretisation. If a cell
is not fully inside a channel, it is regarded as outside of the ﬂuid domain. The ﬁner the grid is the less gets ’discretized

724

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

(a)

(b)

Figure 6: Screenshots of generated scenarios. Fracture network-like structure with 12,800 channel parts (a) and random sphere scenario with 1000
spheres (b).

away’; hence, the channel’s width increases which ampliﬁes the throughput. The dashed line in Fig. 7(b) represents an
extrapolated ﬂow for h → 0 computed by the data of the indicated resolutions. Details of the ﬂow through a channel
network are depicted in Fig. 8(a): circulating ﬂow is clearly visible in some areas as well as very high velocities in
speciﬁc regions. This represents a major diﬀerence to the former approach. The complete ﬂow ﬁeld is depicted in
Fig. 8.
5. Conclusion
We presented an upscaling approach to build a Navier-Stokes-Darcy multi-scale solver. All single components of
the coupled system are realized and tested. We have developed a GUI based generator to create 2D and 3D porous
media-like scenarios. The scenarios can be imported into our Navier-Stokes ﬂuid solver where we are able to compute
the throughput introduced by pressure boundary conditions. This throughput can be used for the computation of the
permeability tensor. Using Shell- and Python scripts we compute the tensors from the NSE solver’s output and
generate input ﬁles for the RST Darcy solver.
Current work is the setup of benchmark scenarios to test the full coupling in 2D, the extension to 3D, and the
investigation of the parallel performance of our software for the scenarios presented.
In the future, the coupling concept and the presented software packages will be enhanced for more sophisticated
applications such as CO2 sequestration (combining multiphase ﬂow with complex geometries).
6. Acknowledgements
The work presented in this paper has been supported by the International Graduate School of Science and Engineering (IGSSE) of the Technische Universit¨at M¨unchen. This support is gratefully acknowledged. Furthermore, this
publication is based on work supported by Award No. UK-c0020, made by the King Abdullah University of Science
and Technology (KAUST).

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

(a)

725

(b)

Figure 7: The channel scenario depicted in (a) is used to investigate the relative throughput. The development of the throughput over the number
of time steps (b) is normalised with respect to the coarsest resolution(400 × 400).

(a)

(b)

Figure 8: (a) Detail of a ﬂow through a fracture network domain (resolution 1200 × 1200). (b) The ﬂow through the complete fracture network.

726

M. Lieb et al. / Procedia Computer Science 9 (2012) 717 – 726

References
[1] K.-H. Hoﬀmann, N. Botkin, Multiphase ﬂows with phase transitions: models and numerics., JP Journal of Heat and Mass Transfer 6 (2)
(2012) 73–86.
[2] A. A. Rodriguez, H. Klie, S. Sun, X. Gai, M. F. Wheeler, H. Florez, U. S. Bolivar, Upscaling of hydraulic properties of fractured porous
media: Full permeability tensor and continuum scale simulations, in: Proceedings of the 2006 SPE Symposium on Improved Oil Recovery,
Oklahoma, USA, 2006.
[3] B. D. Lubachevsky, F. Stillinger, Geometric Properties of Random Disk Packings, Journal of Statistical Physics 60 (5,6) (1990) 561–583.
[4] P. C. Robinson, Connectivity of fracture systems - a percolation theory approach, J. Phys. A: Math. Gen 16 (3) (1983) 605–614.
doi:10.1088/0305-4470/16/3/020.
[5] H.-J. Bungartz, M. Mehl, T. Neckel, T. Weinzierl, The PDE framework Peano applied to ﬂuid dynamics: An eﬃcient implementation of a
parallel multiscale ﬂuid dynamics solver on octree-like adaptive Cartesian grids, Computational Mechanics 46 (1) (2010) 103–114, published
online.
URL http://www5.in.tum.de/pub/int/bungartzetal\_09\_compumech.pdf
[6] T. Neckel, The PDE Framework Peano: An Environment for Eﬃcient Flow Simulations, Verlag Dr. Hut, 2009.
[7] T. Weinzierl, A Framework for Parallel PDE Solvers on Multiscale Adaptive Cartesian Grids, Verlag Dr. Hut, 2009.
[8] H. Sagan, Space-ﬁlling curves, Springer-Verlag, New York, 1994.
[9] J. Hron, S. Turek, Numerical benchmarking of ﬂuid-structure interaction between elastic object and laminar incompressible ﬂow, in: H.-J.
Bungartz, M. Sch¨afer (Eds.), Fluid-Structure Interaction, Part II, Lecture Notes in Computational Science and Engineering, Springer-Verlag,
2010, to appear.
[10] H.-J. Bungartz, B. Gatzhammer, M. Lieb, M. Mehl, T. Neckel, Towards multi-phase ﬂow simulations in the pde framework peano, Computational Mechanics 48 (3) (2011) 365–376.
URL http://www5.in.tum.de/pub/int/compumech_mehletal_2011.pdf
[11] T. Aoki, Interpolated Diﬀerential Operator (IDO) scheme for solving partial diﬀerential equations, Comput. Phys. Comm. 102 (1997) 132–
146.
[12] Y. Imai, T. Aoki, K. Takizawa, Conservative form of interpolated diﬀerential operator scheme for compressible and incompressible ﬂuid
dynamics, Journal of Computational Physics 227 (2008) 2263–2285.
[13] A. J. Chorin, Numerical solution of the Navier-Stokes equations, Math. Comp. 22 (1968) 745–762.

