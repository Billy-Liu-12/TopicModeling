Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1630 – 1634

International Conference on Computational Science, ICCS 2012

Early Cloud Experiences with the Kepler Scientiﬁc Workﬂow
System
Jianwu Wang, Ilkay Altintas∗
San Diego Supercomputer Center, UCSD, 9500 Gilman Drive, MC 0505, La Jolla, CA 92093, U.S.A.

Abstract
With the increasing popularity of the Cloud computing, there are more and more requirements for scientiﬁc workﬂows to utilize Cloud resources. In this paper, we present our preliminary work and experiences on enabling the
interaction between the Kepler scientiﬁc workﬂow system and the Amazon Elastic Compute Cloud (EC2). A set of
EC2 actors and Kepler Amazon Machine Images are introduced with the discussion on their diﬀerent usage modes.
Through two bioinformatics usecases, we demonstrate the capability of our work for both Cloud resource coordination
and workﬂow execution on virtual Cloud resources.
Keywords: Scientiﬁc workﬂows, data-intensive, bioinformatics, Amazon EC2, Cloud computing

1. Introduction
Because of its virtualization, abundance and scalability characteristics, Cloud is becoming a popular environment for both scientiﬁc and business applications. For example, Amazon Elastic Compute Cloud (Amazon EC2)1
provides infrastructure as a service (IaaS), which includes virtualized hardware (including storage and network) and
pre-conﬁgured software stack. Users can start one or more virtual instances from one Amazon Machine Image (AMI),
and administrate them as their own machines. Users can also get storage service from Amazon Simple Storage Service
(S3)2 or Elastic Block Store (EBS)3 . Instead of making investments to purchase their own computing resources, users
can start using the available Cloud resources for compute and storage instantly via these services and pay as they go
based on their usage.
The popularity of the Cloud computing introduced new requirements for scientiﬁc workﬂows [1]. First, workﬂow
users should be able to utilize available Cloud resources and packages since more and more domain-speciﬁc toolkits
are available on the Cloud, especially on Amazon EC2. As a typical instance, Bio-Linux project4 provides an AMI
containing more than 500 bioinformatics programs. By initiating the Bio-Linux AMI on EC2, users can run these
∗ Corresponding

author. Tel.: +1-858-822-5453; fax: +1-858-822-3693
Email address: {jianwu, altintas}@sdsc.edu (Jianwu Wang, Ilkay Altintas)
EC2: http://aws.amazon.com/ec2/, 2012.
2 Amazon S3: http://aws.amazon.com/s3/, 2012.
3 Amazon EBS: http://aws.amazon.com/ebs/, 2012.
4 Bio-Linux Project: http://nebc.nerc.ac.uk/tools/bio-linux/, 2012.
1 Amazon

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.179

Jianwu Wang and Ilkay Altintas / Procedia Computer Science 9 (2012) 1630 – 1634

1631

programs directly without a separate installation. A complex application may have to execute toolkits on multiple
AMIs. Workﬂow systems could provide a way for scientists to utilize these available tools by scheduling tasks
with proper dependency control. The tasks include Cloud instance management (e.g., initiation and termination),
data transfer between Cloud instances, and program execution on Cloud instances. Another new requirement is dataintensive workﬂow application execution on the Cloud. For data-intensive applications, localities of data and programs
are important for the overall performance. With virtualization and other techniques, workﬂow applications could get
both data locality and program locality. We will discuss this in more detail in Section 3.
In this paper, we present our early work utilizing Amazon EC2 for the Kepler scientiﬁc workﬂow System5 [2, 3].
The rest of this paper is organized as follows. In Section 2, we describe our Kepler EC2 Actors and AMIs to to
interact with Amazon Cloud. Diﬀerent usage modes of these Actors and AMIs are discussed in Section 3. Two
workﬂow usecases in bioinformatics domain are demostrated in Section 4. In Section 5, we discuss our conclusions
and plans for future work.
2. Kepler Amazon EC2 Actors and Amazon Machine Images
Kepler EC2 Actors. We have implemented an EC2 module in Kepler which contains a set of EC2 actors. These
actors can be used to manage EC2 virtual instances in Amazon Cloud environment and attach EBS Volumes. Users
can use these actors to start, stop, run or terminate EC2 instances. Through these EC2 actors and other actors in
Kepler, users can easily build workﬂows to run their applications on EC2 Cloud resources. One EC2 workﬂow can
link a variety of applications residing on diﬀerent platforms by connecting multiple AMIs, e.g., Hadoop6 and Linux
AMIs. Furthermore, through the Kepler user interface, researchers could analyze bottlenecks of their processes and
accelerate their execution by switching to better AMI instance types or by activating multiple parallel AMI instances
for their tasks.

Figure 1: Conﬁgurations of the Kepler RunEC2Instance actor.

Figure 1 shows the conﬁguration parameters for the RunEC2Instance actor. To run an EC2 instance, users need
to provide account information including ’Access Key’, ’Secret Key’ and credential ’Key Pair’ ﬁle. ’Image ID’
parameter indicates the AMI ID for the instance. Users can also conﬁgure ’Instance Type’, ’Availability Zone’, and
’Minimal Instance Number’ for the instance they want to run. Using these conﬁguration parameter settings, the
RunEC2Instance actor interacts with Amazon EC2 Web service in order to get conﬁgured instances. If the actor can
successfully get an instance, the information of the instance, e.g., URL and ID, will be sent out through its output.
Otherwise, the actor will pop up error message dialogue explaining why it cannot run successfully.
Kepler Amazon Machine Images and EBS Volumes. We created a few demonstrative Amazon Machine Images
and EBS Volumes for Kepler. The Images and Volumes contain the Kepler system, demonstrative Kepler workﬂows
and third-party bioinformatics tools including the BLAST tool [4]. The diﬀerence between Kepler Images and Volumes is that Kepler Images can be used directly to run virtual instances, while Kepler Volumes have to be attached
5 Kepler

website: http://kepler-project.org/, 2012.
Project: http://hadoop.apache.org, 2012.

6 Hadoop

1632

Jianwu Wang and Ilkay Altintas / Procedia Computer Science 9 (2012) 1630 – 1634

to running instances. These Kepler Images and Volumes can be used to provide scalable and virtualized workﬂow
execution engine. For example, we discussed how to build a virtual Hadoop and Oracle Grid Engine7 cluster with an
attached Kepler Volume to accelerate certain Kepler workﬂow executions in [5]. Virtual cluster could also be built
directly based on a Kepler Image using toolkits like StarCluster8 .
3. Usage Modes
The Kepler EC2 actors and Images introduced in Section 2 could be used in diﬀerent usage modes. We explain
the requirements and capabilities of each usage mode based on example scenarios below.
1) Kepler EC2 Actors + Third Party AMIs : If users want to access tools on third party AMIs, such as the
Bio-Linux Image, they can build workﬂows to access the related AMIs using the EC2 actors. Some other actors,
e.g., SSHExecution and SSHFileCopier, are also needed to transfer data and call third party programs remotely.
Dependencies can be easily depicted in the workﬂow. An example for this usage mode is discussed as the ﬁrst usecase
in Section 4.
2) Kepler EC2 Actors + Kepler AMI: If users want to run their existing local workﬂows on EC2, they can
build an auxiliary workﬂow with EC2 actors to call their existing workﬂows on the virtual Kepler EC2 instance. For
example, a user might have a workﬂow working locally, and want to run it on a faster compute node. In this usage
mode, the user can ﬁnd a proper instance type provided by Amazon for the Kepler AMI and conﬁgure it in the EC2
actors of the auxiliary workﬂow. The auxiliary workﬂow will initiate a Kepler virtual instance for this instance type
from the Kepler AMI, upload his/her original workﬂows to the instance. Then the auxiliary workﬂow can remotely
call the Kepler execution engine to execute uploaded workﬂows on the instance. After the execution on the instance,
the results can be copied back to local machine.
3) Kepler EC2 Actors + Kepler AMI + Third Party AMIs: If users already have workﬂows for the ﬁrst usage
mode, they might want to run them via a virtualized Kepler execution engine. An auxiliary workﬂow can be built to
initiate a Kepler virtual instance from the Kepler AMI, upload the existing workﬂows and run them on the instance.
Then the uploaded workﬂows will use the EC2 actors in the workﬂows to launch other instances and run tools there.
This usage mode can be seen as a special combination of the above two. Particularly in this mode, user account
information needs to be uploaded to the Kepler virtual instance to launch other virtual instances. An example for this
usage mode is discussed as the second usecase in Section 4.
4) Virtual Cluster based on Kepler AMI: This mode is suitable for distributed parallel workﬂow execution on
the Cloud. Amazon EC2 provisions ’Cluster Compute Instance’ type and there are toolkits like StarCluster to help
setting up virtual clusters based on the Kepler Image. Using such toolkits, a virtual cluster can be generated with
Kepler installed on each node and fast inter-connection. This usage mode ﬁts well with the framework for distributed
data-parallel workﬂow execution in Kepler [6]. By utilizing distributed data-parallel execution engines like Hadoop,
data can be partitioned and distributed on the virtual cluster. So with both data and Kepler execution engine located
locally on each compute node, the program and data transfer among nodes could be minimized and better performance
could be achieved for data-intensive workﬂow applications.
Besides the above typically usage modes, there could be other usage modes based on particular requirements. For
instance, a user could launch Kepler virtual instances using the EC2 toolkit and directly login to the instances to run
workﬂows.
4. Bioinformatics Usecases
To validate the proposed work in scientiﬁc applications, two experimental bioinformatics workﬂows running the
BLAST tool [4] are shown in Figures 2 and 3. The BLAST tool detects the similarities between biological sequence
datasets, and is one of the most widely used tools in bioinformatics.
7 Oracle

Grid Engine System: http://www.oracle.com/technetwork/oem/grid-engine-166852.html, 2012
Toolkit: http://web.mit.edu/star/cluster/, 2012.

8 StarCluster

Jianwu Wang and Ilkay Altintas / Procedia Computer Science 9 (2012) 1630 – 1634

1633

Figure 2: A Kepler workﬂow running BLAST on a third-party virtual instance.

Figure 2 shows a Kepler workﬂow that runs BLAST on EC2 via the ﬁrst usage mode in Section 3. The workﬂow
ﬁrst runs a virtual instance from the Bio-Linux Image using the RunEC2Instance actor. Because EC2 virtual instance
might take a while to be ready for user access, the workﬂow uses a loop to monitor its accessibility. After the virtual
instance is accessible, two SSHFileCopier actors are employed to copy the reference database and query sequence ﬁle
to the Bio-Linux instance. Then BLAST tool is executed on the instance via a SSHExecute actor. After the execution
is done, its output is copied back to the local machine via another SSHFileCopier actor.

Figure 3: A Kepler workﬂow running BLAST on a Kepler virtual instance and a third-party virtual instance.

Figure 3 shows a Kepler workﬂow that runs BLAST on EC2 via the third usage mode in Section 3. First, this
workﬂow starts a virtual instance of a Kepler AMI. Then similar to the above workﬂow, it needs to wait until the
virtual instance is accessible. After the virtual instance is running, user credential ﬁle to use EC2 resources and the
workﬂow shown in Figure 2 are uploaded to the Kepler EC2 instance. The credential ﬁle copy is necessary to start
another virtual EC2 instance. Then the Kepler engine on the Kepler instance is run in batch mode to execute the

1634

Jianwu Wang and Ilkay Altintas / Procedia Computer Science 9 (2012) 1630 – 1634

uploaded workﬂow on another EC2 instance based on the Bio-Linux Image. After the execution, the uploaded user
credential ﬁle is deleted for account security. In the end, the output ﬁle is downloaded to the local machine.
We note that domain scientists do not have to build workﬂows from scratch like the workﬂows discussed above
for all their requirements. We can build generic workﬂow templates or compose the above workﬂows into composite
actors, only leaving parameters, such as program name and data path, for scientists to conﬁgure for their diﬀerent
requirements.
5. Conclusions and Future Work
Utilizing advantages of Cloud computing, scientiﬁc workﬂows could serve scientiﬁc application easier or more
eﬃciently. In this paper, we discuss our early Cloud experiments with the Kepler scientiﬁc workﬂow system, which
includes our EC2 actors, Kepler AMI and their usage discussion. Through bioinformatics usecases, we demonstrate
how to use our Kepler EC2 actors and Images to coordinate Cloud resources in a workﬂow and how to execute
workﬂows on virtual Cloud resources.
The Kepler EC2 actors are in a separate module in the Kepler repository. We will release this module in a new
Kepler suite. Along with the release, the Kepler Images and EBS Volumes will also be updated. We will publish the
information of the Images and Volumes in the Kepler project website.
With the promising results so far, we will improve our work in the future in several directions. First, we will
compare the diﬀerent usage modes in Section 3 through experiments. We also plan to study how to optimize dataintensive workﬂow execution on EC2.
6. Acknowledgments
The authors would like to thank the rest of Kepler and CAMERA teams for their collaboration. This work was
supported by NSF SDCI Award OCI-0722079 for Kepler/CORE, NSF ABI Award DBI-1062565 for bioKepler, the
Gordon and Betty Moore Foundation award to Calit2 at UCSD for CAMERA and an SDSC Triton Research Opportunities grant. We also thank the AWS in Education Research Grants from Amazon.com, Inc for EC2 usage credit.
References
[1] G. Juve, E. Deelman, Scientiﬁc workﬂows and clouds, Crossroads 16 (2010) 14–18. doi:http://doi.acm.org/10.1145/1734160.
1734166.
[2] I. Altintas, C. Berkley, E. Jaeger, M. Jones, B. Ludaescher, S. Mock, Kepler: An extensible system for design and execution of scientiﬁc
workﬂows, in: Proceedings of 16th International Conference on Scientiﬁc and Statistical Database Management (SSDBM 2004), Santorini
Island, Greece, 2004.
[3] B. Ludaescher, I. Altintas, C. Berkley, D. Higgins, E. Jaeger-Frank, M. Jones, E. A. Lee, J. Tao, Y. Zhao, Scientiﬁc workﬂow management and
the Kepler system, Concurrency and Computation: Practice & Experience, Special Issue on Scientiﬁc Workﬂows 18 (10) (2006) 1039–1065.
[4] S. F. Altschul, W. Gish, W. Miller, E. W. Myers, D. J. Lipman, Basic Local Alignment Search Tool, Journal of Molecular Biology 215 (3)
(1990) 403 – 410. doi:10.1016/S0022-2836(05)80360-2.
[5] J. Wang, P. Korambath, I. Altintas, A physical and virtual compute cluster resource load balancing approach to data-parallel scientiﬁc workﬂow
scheduling, in: Proceedings of 2011 IEEE World Congress on Services (SERVICES 2011), 2011, pp. 212 –215. doi:10.1109/SERVICES.
2011.50.
[6] J. Wang, D. Crawl, I. Altintas, A framework for distributed data-parallel execution in the Kepler scientiﬁc workﬂow system, in: Proceedings
of 1st International Workshop on Advances in the Kepler Scientiﬁc Workﬂow System and Its Applications, ICCS 2012, 2012.

