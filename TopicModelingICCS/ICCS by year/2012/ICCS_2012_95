Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 498 – 507

International Conference on Computational Science, ICCS 2012

Optimizing the trade-oﬀs between cost and performance in
Scientiﬁc Computing
Alberto N´un˜ ez, C´esar Andr´es and Mercedes G. Merayo
Departamento de Sistemas Inform´aticos y Computaci´on
Universidad Complutense de Madrid, Madrid, Spain
email: alberto.nunez@pdi.ucm.es, c.andres@fdi.ucm.es, mgmerayo@fdi.ucm.es

Abstract
Satisfying the global throughput targets of scientiﬁc applications is an important challenge in High Performance
Computing (HPC) systems. The main diﬃculty lies in the high number of parameters having an important impact on
the overall system performance. These include the number of storage servers, features of communication links, and
the number of CPU cores per node, among many others.
In this paper we present a model that computes a cost-per-performance metric using diﬀerent hardware conﬁgurations and focusing on scientiﬁc computing. The main goal of this approach is to balance the trade-oﬀ between cost
and performance using diﬀerent combinations of components for building the entire system. The main advantage of
our approach is that we simulate the diﬀerent conﬁgurations in a complex simulation platform. Therefore, it is not
necessary to make an investment until the system computes the diﬀerent alternatives and suggest good solutions. In
order to achieve this goal, both the system’s architecture and Map-Reduce applications are modeled. The proposed
model has been evaluated by building complex systems in a simulated environment using the SIMCAN simulation
platform.
Keywords: Scientiﬁc computing, scientiﬁc clusters, system performance evaluation.

1. Introduction
During the last years, most eﬀort in scientiﬁc applications has focused on supercomputers, grids, and commodity
clusters. Generally, scientiﬁc applications are both computation and data intensive. However, the execution time can
be reduced by exploiting parallelism in CPU and I/O, especially, in cluster systems. Due to its high cost eﬀectiveness,
commodity clusters have been the main resource for high performance computing (HPC). As an example, in the most
recent survey of the fastest 500 computers in the world [1], 82.0% are clusters.
Scientiﬁc high-performance applications have reached a turning point where computing power is no longer the
most important concern. Thus, the emphasis is shifting from focusing on the optimization of the computing system, to
optimizing other systems, such as the storage and the networking systems. In addition, new technologies increase the
complexity of the optimistic problems. In late 2007, a new dimension was added to the scientiﬁc community: cloud
computing. Although the concept of cloud computing emerged in 2007, there does not exist yet an accurate deﬁnition
for it. Cloud computing can be seen as is a paradigm that provides access to a ﬂexible and on-demand computing
infrastructure, by allowing the user to rent a number of virtual machines to solve a computational problem. The views
1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.053

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

499

of the diﬀerent relevant actors in the industry look irreconcilable concerning cloud computing. Hewlett-Packard’s
Vice President of European Software Sales, Andy Isherwood, quoted in ZDnet News: “A lot of people are jumping
on the [cloud] bandwagon, but I have not heard two people say the same thing about it. There are multiple deﬁnitions
out there of the cloud.” Richard Stallman, founder of the Free Software Foundation and creator of the GNU Operating
System, deﬁned cloud computing as a trap for users. He quoted in The Guardian: “It’s stupidity. It’s worse than
stupidity: it’s a marketing hype campaign. Somebody is saying this is inevitable – and whenever you hear somebody
saying that, it’s very likely to be a set of businesses campaigning to make it true.”
Cluster and cloud systems need a ﬂexible and scalable method for developing and executing high performance
scientiﬁc applications. Clearly, this common piece is the Map-Reduce scheme [2], a programming model for processing large datasets in distributed systems. Although the Map-Reduce model was originally developed in Google, it is
currently used by some important companies like Amazon, Facebook, Baidu, Yahoo!, Last.fm, New York Times and
AOL, becoming the de facto standard for large-scale data processing [3, 4]. From now on, the term scientiﬁc cluster
is used to refer to internal data centers not made available to the general public, and public cloud refers to services
that can be outsourced by paying each deployed virtual machine (in short, VM) per unit of time basis.
Users can choose to either execute their applications in a scientiﬁc cluster, or launch them in a public cloud. Public
cloud environments probably are the easiest and cheapest option because users pay only for the resources they use
(VMs and storage) and then upload their data for launching their applications via the Internet. Then, in the computing
research community, some questions arise: Can we save money/time by using public cloud computing systems instead
of buying our own scientiﬁc cluster? Is cloud computing a valid environment to run our tests? If I decide to purchase
a cluster, what are the features of such cluster that provide the best performance for my applications? The answer to
these questions is one of main goals reported in this paper.
First of all, it’s important to mention that cloud computing systems have not been designed for scientiﬁc workloads.
Consequently, there are some diﬀerences to take into account between scientiﬁc clusters and public clouds. First, while
cloud systems have been designed to replace small and medium-sized clusters, dedicated scientiﬁc clusters contain
hundreds of thousands of CPU Cores (see ﬁrst 10 systems in the Top500 list [1]). Second, there are some notable
diﬀerences in the job execution model. In a scientiﬁc cluster, each job has exclusive access to the resources usage.
On the contrary, cloud environments use virtualization to share resources, and therefore, increase the concurrency of
users at the cost of decreasing the overall system performance. Hence, some scientiﬁc applications are not suitable to
be executed on cloud environments, speciﬁcally, those ones that require exclusive access and very accurate measures
of the hardware [5]. Third, security is an issue In a scientiﬁc cluster, users have complete control over their own data
and resources, while in a cloud computing system they do not have the warranty that their data could not be accessed
by other users. In conclusion, cloud computing is a good solution for those scientiﬁc applications that do not require
a: high number of computing nodes, accurate measurements of the hardware, and additional security for the data and
results obtained.
Due to all these limitations, using a scientiﬁc cluster is the correct solution for a wide range of scientiﬁc applications. However, due to the high number of inter-related parameters that have a direct impact on the overall
performance, building a system that provides the maximum performance for a given application is a very diﬃcult
task. In this paper we present a model to automatically simulate scientiﬁc clusters using diﬀerent conﬁgurations. For
each simulated system, a cost-per-performance metric is computed with the purpose to balance the price of the entire
system and its provided performance. In such way, the obtained performance is based on the speciﬁc goals deﬁned by
the user. Due to this model is based on simulation techniques, it does not require a speciﬁc platform to be executed.
Let us emphasize the fact that since all the possibilities are simulated, the user of our framework doesn’t need to made
an investment until a (set of) solution(s) is provided.
The proposed model splits the cluster conﬁguration in four independent systems: CPU, storage, memory and
network. Basically, this model takes as input a list of components for each system and produces, as output, a costper-performance metric for each conﬁguration. Accordingly, a set of detailed parameters about the underlying characteristics (including cost) of each component must be speciﬁed. Thus, this model uses the information provided as
input by the user to generate automatically a combination of system models to simulate its underlying hardware features. This model has been implemented in a simulated environment using the SIMCAN simulation platform [6], an
open-source project for modeling and simulating distributed systems and applications. This platform also allows user
to develop parallel and distributed applications, which is a powerful tool for calculating the performance of scientiﬁc
computation using diﬀerent hardware conﬁgurations [7, 8].

500

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

In this paper we report on our results in using our methodology, supported with the SIMCAN simulation platform to optimize the balance and performance for scientiﬁc systems. The main contributions of this work can be
summarized as:
• In contrast with existing work, mainly focusing on both optimizations and performance evaluation of MapReduce based applications, our proposed model focuses on the relationship between the hardware cost, the
conﬁguration of the system, the overall application performance, and the user requirements. Accordingly, our
work presents the design and development of an accurate model for optimizing the trade-oﬀs between cost and
performance of scientiﬁc clusters based on the requirements deﬁned by the user.
• In order to show the accuracy of the proposed model, a big set of validation experiments has been exercised in
real environments.
• A complete performance evaluation model allows to compare diﬀerent hardware conﬁgurations. Thus, this
model computes the best choice of the possible hardware alternatives for the speciﬁed requirements.
The rest of the paper is structured as follows. Section 2 describes the design of the proposed model, which is
divided in three diﬀerent parts: modeling of the system architecture, modeling of the Map-Reduce application, and
the architecture of the complete model. Section 3 shows both validation and performance experiments using the
proposed model. Section 4 presents related work. Finally, Section 5 presents our conclusions and some directions for
future work.
2. Basic architecture of the proposed model
In this section we present a detailed description of the model proposed in this paper. This model is divided in three
parts: modeling of the scientiﬁc cluster architecture, modeling of the Map-Reduce application, and the architecture of
the complete model.
2.1. Modeling scientiﬁc clusters
The node is the most relevant component for any computing systems. Basically, a distributed environment consists
of nodes, communication devices like switches or routers, and communication networks. In our proposed model, a
node is simulated by conﬁguring the four basic systems: CPU, storage, memory and network. The basic schema for
modeling HPC environments consists of 6 elements (see Figure 1): Racks, used to ease the task of deploying largescale systems. Usually, racks contain a set of board nodes; Board node, used for the same purpose as racks. Each
board node contains a set of computing nodes and one switch; Switches, used to interconnect the set of nodes inside a
node board with the rest of the architecture; Nodes, used to perform processing; Storage nodes, used to manage data;
Switches, used to interconnect the elements of the HPC architecture; and Communication network, which deﬁne the
speed of each communication link of the architecture.
2.2. Modeling Map-Reduce
This section presents a brief overview of the Map-Reduce framework and also describes our approach for simulating Map-Reduce applications. Currently, the Map-Reduce framework is one of the most used parallel computing
platforms for processing data on terabyte and petabyte scales. Basically, it consists in the abstraction of computation
problems through two functions: map and reduce. Thus, when a problem is expressed in a map-reduce form, it can
be automatically parallelized. Accordingly, the map function receives a key/value pair as input and generates a list of
intermediate key/value pairs as output:
map (String key, String value) ⇒ list(key, value)
Similarly, the reduce function receives a key and a set of associated values, and generates a list of values, that is:
reduce (String key, Iterator values) ⇒ list(String value)

501

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

rack1

rack3

rack2

rackr-1 rackr

rack4

rack
node board

board1

node1 node2 node3

noden

board2
board3

switch

board4

boardb

switch0

switch1

switchs

network topology

storage
node0

storage
node2

storage
node1

storage
nodet

Figure 1: Basic schema of the modeled cluster architecture

Figure 2 shows the basic schema of the proposed model for simulating Map-Reduce applications, which is based
on the open-source implementation Hadoop [9]. For each set of pairs, the operations are split in three stages: the map
stage, the shuﬄe stage, and the reduce stage (see Figure 2(a)). The map function is stateless, that is, it operates on
one pair at a given time. Consequently, the parallelization of diﬀerent map inputs in several nodes can be successfully
achieved. During the shuﬄe stage, values associated with an individual key are moved to the same machine. Finally,
the output result is generated in the reduce stage. This result is a multi-set of (key, value) pairs sharing the same key.
Master

HDFS

Map
phase

Deliver data chunks

Data set (in MB)

W1

{

W2

Wn

Slave node

CPU

CPU

Core Core

Intermediate
files

Shuffle
phase

Slave node

If1

If2

Ifk-1

If1

If2

Ifk-1

If1

If2

Core

Ifk-1

W1

W2

Wn
Reduce
phase

Output files

Master

(a) Modeling of the Map-Reduce phases

Processes

Data chunk (in KB)

Core Core

Slave node
CPU

Core

Core Core

Core

Map
slots

Map
slots

Map
slots

Reduce
slots

Reduce
slots

Reduce
slots

1

2

3

4

5

6

7

8

m

Map
processes

1

2

3

4

5

6

7

8

r

Reduce
processes

(b) Modeling of the Map-Reduce processing schema

Figure 2: Basic schema of the modeled Map-Reduce framework

The global Map-Reduce approach is a mix of sequential and parallel computing. Therefore, while the reduce
phase is performed in parallel by processing diﬀerent keys simultaneously, it must wait to be executed until the map
phase is concluded. However, a Map-Reduce execution may consists of several rounds of map and reduce phases.
Figure 2(b) shows the execution schema for mapper and reducer processes. Each process (mapper and reducer)
must be executed in one slot in the system, being a slot any computing unit where a process can be allocated. Consequently, the number of slots will be deﬁned with the features of the underlying system, but taking into account that
the ratio of slots per CPU core in multi-core systems usually is 2:1.
In Figure 2(b) the number of mapper processes is m, while the number of reducer processes is r. Each map
process must manage a chunk of data. Although the size of this chunk is customizable, its default value in Hadoop
is 64 MB. Hence, the optimal case is when M chunks of data are processed by M mapper processes executed in M
slots. However, the process of large data-sets usually implies that the number of processes is greater than the number
of slots. In these cases, each phase must be performed in several rounds, being the number of rounds equal to M/m .

502

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

Table 1: Sub-parameter set used to model the behavior of Map-Reduce applications in SIMCAN
Parameter name
initDataSetSize
dataChunkSize
maxMappers
maxReducers
maxSlotMap
maxSlotReduce
hdfsBlockSize

Description
Size of the input data set (in MB)
Size of the chunk processed by each map process (in MB)
Maximum number of processes for executing the map phase
Maximum number of processes for executing the reduce phase
Maximum number of slots for map processes
Maximum number of slots for reduce processes
Size of the block used for both reads and writes in the ﬁle system

A typical setup of a Map-Reduce application may involve setting up hundreds of parameters. However, these
parameters that have a signiﬁcant impact in the overall application’s performance can be dramatically reduced. Due
to practical reasons, only the most relevant of these parameters have been modeled in the proposed schema. Table 1
shows some of these parameters.
2.3. Model design
The main goal of the model is to compute the best architectural conﬁguration of a system devoted to scientiﬁc
computing and for a given set of requirements such as cost and performance. The challenge is to maximize the
performance of a given application while maintaining the cost of the system between the budget bounds established
by the user. Thus, in order to accomplish this objective, the proposed model performs a search among the space of
all possible system designs and then it computes the system that provides the best cost-per-performance metric. The
basic architecture of the proposed model is shown in Figure 3. It consists of two main parts: information provided by
the user and the SIMCAN simulation core. Basically, this model receives as input three diﬀerent data-sets:
• Device collection: This data-set contains these devices used to build the system. These devices are classiﬁed in
ﬁve diﬀerent sets: CPU, storage, memory, network and switches. Basically, CPU consists of processors (singlecore, dual-core, quad-core, etc.), storage contains disk drives (general purpose disk drives, RAID systems, etc.),
memory contains RAM chips, network contains network interfaces for communication networking (Ethernet
gigabit, Ethernet 10-gbps, etc.) and, ﬁnally, switches contains elements connecting nodes. Hence, the devices
set is deﬁned as the disjoint union of those ﬁve sets:
Devices = CPU ∪ storage ∪ memory ∪ network ∪ switches
For each device, a detailed list of its underlying characteristics must be speciﬁed. Basically, this list contains a
speciﬁc set of pairs (parameter, value) deﬁning the behavior of each device. The SIMCAN Simulation Platform
provides the name of these parameters. Accordingly, the user only must specify the corresponding values for
each parameter.
• Budget and cost: This data-set contains two elements. First, the budget for the entire system is given by a
pair (minBound, maxBound), where minBound and maxBound represent the lower and the upper bounds of the
budget, respectively. Second, a list of pairs (device, price) represents the price (in $US) of each device per unit.
• Speciﬁcation of the Map-Reduce application: The user must provide a speciﬁcation of the Map-Reduce based
application to be executed in the cluster. Moreover, he/she must provide a list of pairs (parameter, value) that
models the underlying behavior of the application in the cluster.
The complete process of the model design phase, that is, from the moment the user speciﬁes the corresponding
input data-sets until the results are generated, is detailed in the steps described below:
1. Initially, the user must specify the corresponding three data-sets: devices, costs, and the speciﬁcation of the
Map-Reduce application.

503

Devices

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

Switches
Storage

Network

Memory

CPU

Network topology
Cluster builder

Budget and price list ($)

{

Cluster
Model

Simulation
execulable

Results
file

{

Application
Model

Specification
of Map-Reduce
Application
Information provided
by the user

The SIMCAN Simulation Platform

Figure 3: Design of the proposed model

2. A module called Cluster builder generates all possible hardware conﬁgurations using the components allocated
in the device set. The algorithm used in this module is based on the number of computing and storage nodes.
Thus, the number of suggested computing and storage nodes is based on the speciﬁcation of the Map-Reduce
application. Consequently, the resulting number of nodes is not a ﬁxed value, but a set of values. So that it is
easy to observe the behavior of the system by using diﬀerent number of nodes. Hence, let be numComNodes
the set of values representing the number of computing nodes in the system and numStoNodes the number of
storage nodes in the system, all hardware conﬁgurations generated by this module are given by:
C = computingNodes × storageNodes
computingNodes = CPU × storage × memory × network × switches × numComNodes
storageNodes = CPU × storage × memory × network × switches × numS toNodes
Although both computing and server nodes are deﬁned by conﬁguring the same devices, generally, server nodes
focus on improving storage throughput by using fast and high-capacity disks, while computing nodes focus on
computing power by using multi-core CPUs. Consequently, the devices used in the system are computed taking
into account the number of nodes used for building it. Thus, an arbitrary conﬁguration is deﬁned by:
Ci = ((cc , sc , mc , nc , xc , zc ), (c s , s s , m s , n s , x s , z s ))/Ci ∈ C
The total price of the generated system is computed by using the cost of each device involved in such system;
systems with a total cost outside the bounds of the speciﬁed budget are discarded. Accordingly, using the
function Φ(x) to denote the cost of an element x, the total cost of a given cluster conﬁguration is deﬁned by:
Φ(Ci ) = (zc · (Φ(cc ) + Φ(sc ) + Φ(mc ) + Φ(nc )) + Φ(xc ))+(z s · (Φ(c s ) + Φ(s s ) + Φ(m s ) + Φ(n s )) + Φ(x s )) /Ci ∈ C
3. The cluster builder module applies the function Ψ to generate a set of conﬁgurations that ﬁts within the speciﬁed
budget. Thus, the conﬁgurations in the set D = {Di ∈ C|Ψ(Di )}) are used to create a corresponding simulation
model. Basically, each model is generated by taking into account three diﬀerent elements: the conﬁguration
calculated by the Cluster builder, the topology of the network for this system, and the application to be launched
in this system. In this work, only the tree topology is presented, but diﬀerent topologies such as ring, and star
can be used for modeling distributed environments in SIMCAN. The Ψ function is deﬁned by:
ΨminBound,maxBound : C → Bool
Ψ(Di ) =

T rue if minBound ≤ Φ(Di ) ≤ maxBound
False Otherwise

4. The SIMCAN simulation platform produces an executable containing all modeled environments produced in
the previous step (cluster models). Therefore, each execution will simulate a speciﬁc system conﬁguration with
the speciﬁcation of the Map-Reduce application.

504

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

5. Once the simulation is done, a results ﬁle is created. This ﬁle allocates a list that contains the next information
of each simulated system: the deﬁnition of each system including the number and type of each device Ci , the
total cost of the simulated system Φ(Ci ), and the performance obtained ρ(Ci ). This performance is computed
by executing the Map-Reduce application model and measuring CPU, I/O, and Network throughput.
3. Validation and evaluation










	


	















In this section we present a strategy to validate our model using the SIMCAN simulation platform. The basic idea
of this strategy is to execute a well-known application in a real system using diﬀerent conﬁgurations and then compare
the obtained results with the corresponding simulated ones. The application used in the validation experiments is
TeraSort and the involved system is a cluster that consists of 17 computing nodes. Each node contains a Intel(R)
Xeon(R) CPU E5405@ 2.00GHz with 6MB of cache, 4 GB of RAM, and a Seagate Barracuda 7200.11 drive. These
nodes are interconnected through a Ethernet Gigabit network. Figure 4 shows the results of the validation process,
where Figure 4(a) presents the results of executing TeraSort in a Hadood cluster, and Figure 4(b) presents the results
of simulating the same system.
These experiments have been executed using a data-set of 500 MB, a diﬀerent number of slave nodes (4, 8, and
16), and diﬀerent ratio of mapper:reducer (8:4, 16:8, and 32:16). The average error ratio obtained is 11.3%, which
is an acceptable error for simulating distributed applications in parallel systems. It is important to remark that the
tendency of the simulation when diﬀerent conﬁgurations are used is the same that applying these changes to the real
system. This denotes that the simulation reﬂects the same behavior the real system.
In order to check the proposed model, a set of performance evaluation tests has been performed. In these experiments, a list of real devices and a Map-Reduce application has been provided. The complete list of devices used in
these tests is shown in Table 2. Both the complete list of features and the corresponding price of each device have been
gathered from Amazon [10]. The application used is BIPS3D, a 3-dimensional simulation of BJT and HBT bipolar
devices. This application has been modeled in previous works using MPI [11, 12]. In this paper, the same application
has been modeled using the Map-Reduce model (see Figure 2).
Once the list of devices (Table 2) and the speciﬁcation of the application (Map-Reduce BIPS3D) is to SIMCAN,
our proposed model automatically generates a set of simulated environments to execute the BIPS3D application in
each. Each system Di is evaluated using two factors: price (Φ(Di )) and performance (ρ(Di )). This performance is
measured in MB/s, which is calculated by the time required to process completely the corresponding data-set. The
goal is to create a sorted list of systems, and therefore, provide to the user the conﬁgurations that ﬁt better with the
initial requirements. Depending of the budget and the requirements of the user, the list of systems will be generated
accordingly. The criteria used to sort this list is based on distances to the equilibrium point P. Table 3 contains the
conﬁguration of each scenario.

(a) Real executions

(b) Simulation

Figure 4: Validation of Map-Reduce model using TeraSort

505

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

Table 2: List of devices used in the experiments, including features and prices
Device name
Intel Core i7-2600K
Intel Core i5-2500K
Intel Xeon DP X5690
AMD Athlon 64 X2 6000
AMD Athlon 64 X2 Dual-Core 4200+
Crucial 16GB
Crucial 4GB
Crucial Ballistix Sport 12GB
Corsair Vengeance Blue 8 GB (2X4 GB)
Corsair Vengeance Blue 16 GB
Ethernet Gigabit interface Intel
Ethernet 10-Gigabit interface AT2
Cisco SR2016T Switch
Cisco Catalyst 4948-10GE
Western Digital 1.5 TB Caviar Green
Western Digital Caviar Blue 500 GB
Seagate Barracuda 500 GB
Seagate Barracuda Green 2TB

Category
CPU
CPU
CPU
CPU
CPU
Memory
Memory
Memory
Memory
Memory
Network
Network
Switch
Switch
Disk
Disk
Disk
Disk

Features
Quad-core 3.4GHz, 8MB Cache
Quad-core 3.3GHz, 6MB Cache
Hexa-core 3.46GHZ, 12MB Cache
Dual-core 3Ghz 2MB Cache
Dual-core 2.2 GHz, 1MB Cache
DDR3 1333 MHz
DDR3 1333 MHz
DDR3 1600 MHz
DDR3 1600 MHz
DDR3 1600 MHz
1Gbps
10 Gbps
16-Port 1Gbps
48-Port, 10-Gbps
7200 RPM, 64MB Cache, SATA 3.0Gb/s
7200 RPM, 16MB Cache, SATA 6.0Gb/s
7200 RPM, 16MB Cache, SATA 6.0Gb/s
5400 RPM, 64MB Cache, SATA 6.0Gb/s

Price (in $US)
319.99
232.51
2,378.25
179.99
179.95
170.49
94.99
67.71
48.99
94.99
32.27
497.99
186.63
4,818
119.99
94.72
84.99
147.00

Table 3: Conﬁguration of experiments
Name
Scenario 1
Scenario 1
Scenario 1

Data-Set (in GB)
15 GB
25 GB
50 GB

slots:CPUs
2:1
4:1
8:1

mappers:slots
2:1
4:1
8:1

reducers:slots
1:1
1:1
2:1

Data-chunk
64 MB
64 MB
64 MB

Performance

Performance

Performance

Figures 5(a), 5(b) and 5(c) show dispersion charts of three diﬀerent scenarios. The x-axis represents cost, while
the y-axis represents performance. Each dot in the chart represents a system conﬁguration where the systems close to
P will be those systems with a relatively well-balanced cost-per-performance metric. In contrast, the systems that are
far from P have a not balanced cost-per-performance metric.
The system obtained in scenario 1 consists of: 16 computing nodes (AMD Athlon 64 X2 Dual-Core 4200, Corsair
Vengeance Blue 8 GB, Ethernet Gigabit, Seagate Barracuda 500 GB), 1 storage node (AMD Athlon 64 X2 Dual-Core
4200, Corsair Vengeance Blue 8 GB, Ethernet Gigabit, Seagate Barracuda 500 GB) and one Cisco SR2016T Switch.
This is one of the cheapest options, providing a good performance ratio due to the conﬁguration of BIPS3D. In this
case, the slot ratio is low and also the number of mappers and reducers, resulting in a poor exploitation of the CPU.
Thus, using a powerful system does not provide a signiﬁcant increasing of performance. The total price of this system
is $11,265.03.

Cost

Cost

(a) Scenario 1

(b) Scenario 2

Figure 5: Performance experiments

Cost

(c) Scenario 3

506

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

The system obtained in scenario 2 consists of: 32 computing nodes (AMD Athlon 64 X2 Dual-Core 6000, Crucial
Ballistix Sport 12GB, Ethernet Gigabit, Seagate Barracuda 500 GB), 1 storage node (AMD Athlon 64 X2 Dual-Core
4200, Corsair Vengeance Blue 8 GB, Ethernet Gigabit, Western Digital 1.5 TB Caviar Green) and one Cisco SR2016T
Switch. In this case, the data set is larger than in the previous scenario. Moreover, the ratio between processes per
CPU core is also higher. Thus, the level of parallelism can be increased. This system exploits CPU parallelization,
which it use Quad-Cores in computing nodes. Since this system is more expensive than the previous one, the number
of conﬁgurations is also greater (see quadrant [-y,x]). The total price of this system is $18,281.1.
Finally, the system obtained in scenario 3 consists of: 32 computing nodes (Intel Core i5-2500K, Crucial Ballistix
Sport 12GB, Ethernet Gigabit, Seagate Barracuda 500 GB), 2 storage nodes (AMD Athlon 64 X2 Dual-Core 4200,
Corsair Vengeance Blue 8 GB, Ethernet Gigabit, Western Digital 1.5 TB Caviar Green) and two Cisco SR2016T
Switch. This system requires more CPU power due to several reasons. First, the initial data-set is much bigger than
in the previous scenarios and, also, the number of processes per CPU core is also increased. Thus, this conﬁguration
totally exploits parallelism. The cost of the system is also increased because the increasing of performance obtained
is very signiﬁcative. The total price of this system is $21,051.32.
4. Related work
Myriad studies to analyze the performance of high performance computing systems can be found in the literature.
For example, the performance of the Columbia cluster has been evaluated for [13]. The results obtained from
this study demonstrate that several features concerning conﬁgurations have a direct impact on the overall system
performance for the same application. Other studies present similar results focused on analyzing the performance of
a given system by using a speciﬁc set of experiments [14, 15].
Other work focus on optimizing the performance of a given application, independently of the underlying system
where such application is executed. Due to its wide popularity and acceptance by the research community, most of
these approaches work on increasing the performance of Map-Reduce based applications. For instance, it is possible
to focus on optimizing the conﬁguration of Map-Reduce applications only by setting up the correct parameters for its
execution [16]. This does not require to modify the application’s source code.
On the contrary, other work concentrates on proposals to increase the performance of Map-Reduce by modifying
the behavior of the underlying application. First, an implementation of a map-reduce library supporting parallel ﬁeld
programmable gate arrays (FPGAs) and graphics processing units has been presented (GPUs) [17]. Similarly, a pattern
based annotation tool that can beneﬁt from Map-Reduce architecture to process large amount of text data has been
introduced [18]. A team from the Yahoo! research group made an extension on the Map-Reduce model by adding a
merge phase after reduce, called Map-Reduce-Merge [19], to perform join operations for multiple related datasets.
The previously commented work provides performance optimizations for cluster systems using Map-Reduce based
applications. However, they do not consider the cost as a factor. In contrast, due to the nature of cloud computing,
studies in this kind of systems mainly focus on optimizing cost instead of performance. In a speciﬁc cloud environment, the total cost of executing a given application depends of the computing power, storage, and memory. It is
possible to automate the task of choosing and managing the right set of cloud resources for a class of cloud applications [20]. A cost-based model where the providers advertise resource availability to the user has been also deﬁned
[21].
Although most of the eﬀort in optimizing cost in scientiﬁc applications focuses on cloud computing, these systems
are not a feasible solution for some scientiﬁc applications [22]. Actually, there are several studies that show that the
overhead in a virtualized environment is up to 5% for computing [23], up to 15% for networking [23], and up to
30% for I/O [24]. Our work presents new challenges that are not addressed by previous work, mainly concerning the
simultaneous balance of the cost of the underlying hardware, the architectural conﬁguration of the hardware system,
and the overall application’s performance.
5. Conclusions and Future works
In this paper we have proposed a model for automatically compute a cost-per-performance metric by simulating
scientiﬁc clusters using diﬀerent conﬁgurations. This model is platform-independent and does not require to make an

Alberto N˙Òez et al. / Procedia Computer Science 9 (2012) 498 – 507

507

investment before purchasing the ﬁnal system. In this paper we have presented both validation and evaluation tests.
Initially, the accuracy of our proposed model for simulating Map-Reduce applications in Hadoop cluster is presented.
Also, a set of experiments has been achieved by using a list of real devices and a real application called 3D. The results
obtained show that a speciﬁc system conﬁguration is required depending of the requirements speciﬁed for the user.
Future works will include adding a new module for using diﬀerent network topologies. Moreover, diﬀerent real
applications will be provided in the framework to increase the range of the experiments performed in each system.
Acknowledgment
This research was partially supported by the Spanish MEC project TESIS (TIN2009-14312-C02-01) and the
Santander-UCM Programme to fund research groups (GR35/10-A - group number 910606).
References
[1] H. Meuer, E. Strohmaier, J. Dongarra, H. D. Simon, Top500 Supercomputer sites, http://www.top500.org (2012).
[2] J. Dean, S. Ghemawat, MapReduce: simpliﬁed data processing on large clusters, Communications of the ACM 51 (1) (2008) 107–113.
[3] J. Ekanayake, S. Pallickara, G. Fox, Mapreduce for data intensive scientiﬁc analyses, in: ESCIENCE’08: Proceedings of the 4th IEEE
International Conference on eScience, IEEE Press, 2008, pp. 277–284.
[4] Amazon elasticmapreduce, http://aws.amazon.com/elasticmapreduce/ (2012).
[5] J. Schad, J. Dittrich, J.-A. Quian´e-Ruiz, Runtime measurements in the cloud: observing, analyzing, and reducing variance, Proceedings of
the VLDB Endowment 3 (2010) 460–471.
[6] A. N´un˜ ez, J. Fern´andez, J. Carretero, The SIMCAN simulation platform, http://www.arcos.inf.uc3m.es/∼simcan (2012).
[7] A. N´un˜ ez, J. Fern´andez, J. D. Garc´ıa, F. Garc´ıa, J. Carretero, SIMCAN: A ﬂexible, scalable and expandable simulation platform for modelling
and simulating distributed architectures and applications, Simulation Modelling Practice and Theory 20 (1) (2012) 12–32.
[8] A. N´un˜ ez, J. Fern´andez, J. D. Garc´ıa, F. Garc´ıa, J. Carretero, New techniques for simulating high performance MPI applications on large
storage networks, Journal of Supercomputing 51 (1) (2010) 40–57.
[9] Apache hadoop, http://hadoop.apache.org/ (2012).
[10] Amazon, http://amazon.com/ (Jan 2012).
[11] A. N´un˜ ez, J. Fern´andez, J. D. Garc´ıa, J. Carretero, New techniques for simulating high performance MPI applications on large storage
networks, in: IEEE Cluster 2008, Tsukuba, Japan, 2008, pp. 444–452.
[12] A. N´un˜ ez, J. Fern´andez, J. D. Garc´ıa, J. Carretero, Analyzing Scalable High-Performance I/O Architectures, in: PDPTA’08, The 2008
International Conference on Parallel and Distributed Processing Techniques and Applications, Las Vegas, Nevada (USA), 2008, pp. 631–637.
[13] R. Biswas, M. J. Djomehri, R. Hood, H. Jin, C. Kiris, S. Saini, An application-based performance characterization of the columbia supercluster, in: SC ’05: Proceedings of the 2005 ACM/IEEE conference on Supercomputing, IEEE Press, 2005, pp. 26–39.
[14] F. Petrini, G. Fossum, J. Fern´andez, A. L. Varbanescu, M. Kistler, M. Perrone, Multicore surprises: Lessons learned from optimizing sweep3d
on the cell broadband engine, in: IPDPS’07: 21th International Parallel and Distributed Processing Symposium, 2007, pp. 1–10.
[15] S. Williams, J. Shalf, L. Oliker, S. Kamil, P. Husbands, K. Yelick, The potential of the cell processor for scientiﬁc computing, in: CF ’06:
Proceedings of the 3rd conference on Computing frontiers, ACM, 2006, pp. 9–20.
[16] G. Wang, A. Butt, P. Pandey, K. Gupta, A simulation approach to evaluating design decisions in mapreduce setups, in: MASCOTS ’09: IEEE
International Symposium on Modeling, Analysis Simulation of Computer and Telecommunication Systems, 2009, pp. 1 –11.
[17] J. H. C. Yeung, C. C. Tsang, K. H. Tsoi, B. S. H. Kwan, C. C. C. Cheung, A. P. C. Chan, P. H. W. Leong, Map-reduce as a programming model
for custom computing machines, in: Proceedings of the 2008 16th International Symposium on Field-Programmable Custom Computing
Machines, IEEE Press, 2008, pp. 149–159.
[18] M. Laclavik, M. Seleng, L. Hluch, Towards Large Scale Semantic Annotation Built on MapReduce Architecture, in: ICCS’08: Proceedings
of the International Conference on Computational Science, Part III, LNCS 5103, 2008, pp. 331–338.
[19] H.-c. Yang, A. Dasdan, R.-L. Hsiao, D. S. Parker, Map-reduce-merge: simpliﬁed relational data processing on large clusters, in: SIGMOD
’07: Proceedings of the 2007 ACM SIGMOD international conference on Management of data, ACM, 2007, pp. 1029–1040.
[20] A. Wieder, P. Bhatotia, A. Post, R. Rodrigues, Conductor: orchestrating the clouds, in: LADIS ’10: Proceedings of the 4th International
Workshop on Large Scale Distributed Systems and Middleware, ACM, New York, NY, USA, 2010, pp. 44–48.
[21] G. Singh, C. Kesselman, E. Deelman, A provisioning model and its comparison with best-eﬀort for performance-cost optimization in grids,
in: HPDC ’07: Proceedings of the 16th international symposium on High performance distributed computing, ACM, 2007, pp. 117–126.
[22] D. Kondo, B. Javadi, P. Malecot, F. Cappello, D. P. Anderson, Cost-beneﬁt analysis of cloud computing versus desktop grids, in: IPDPS ’09:
Proceedings of the 2009 IEEE International Symposium on Parallel&Distributed Processing, IEEE Press, 2009, pp. 1–12.
[23] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, A. Warﬁeld, Xen and the art of virtualization, ACM
SIGOPS Operating Systems Review 37 (2003) 164–177.
[24] W. Yu, J. S. Vetter, Xen-based hpc: A parallel i/o perspective, in: Proceedings of the 2008 Eighth IEEE International Symposium on Cluster
Computing and the Grid, IEEE Press, Washington, DC, USA, 2008, pp. 154–161.

