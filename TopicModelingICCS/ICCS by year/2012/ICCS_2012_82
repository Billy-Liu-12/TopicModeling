Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 1494 – 1502

International Conference on Computational Science, ICCS 2012

Agent-based algorithm for spatial distribution of objects
Nathan Colliera,∗, Marcin Sieniekb
a Applied

Mathematics and Computational Science and Earth and Environmental Sciences and Engineering
King Abdullah University of Science and Technology
Thuwal, Saudi Arabia
b AGH University of Science and Technology
Krak´ow, Poland

Abstract
In this paper we present an agent-based algorithm for the spatial distribution of objects. The algorithm is a
generalization of the bubble mesh algorithm, initially created for the point insertion stage of the meshing process of
the ﬁnite element method. The bubble mesh algorithm treats objects in space as bubbles, which repel and attract
each other. The dynamics of each bubble are approximated by solving a series of ordinary diﬀerential equations. We
present numerical results for a meshing application as well as a graph visualization application.
Keywords: bubble mesh, meshing, graph visualization, agent-based

1. Introduction
This paper describes an agent-based algorithm for the even distribution of objects in a region. The technique is a
generalization of the ideas originally presented in the work of Shimada [1–4] for the meshing of domains for use in the
ﬁnite element method (FEM). The ﬁnite element method for solving partial diﬀerential equations [5–7] depends on
a partitioning of the domain into elements. The elements are usually polyhedra, commonly triangles, quadrilaterals,
tetrahedra, and hexahedra. This partitioning process is referred to as meshing in the ﬁnite element community.
In typical FEM simulations, the boundary of the domain of interest is originally speciﬁed. The task of meshing
is two-fold: (1) generate a set of vertices in the interior of the domain of interest and (2) determine the connectivity
of these vertices which will deﬁne the elements. The mesh generated has direct consequences on the quality of
approximation of the FEM. Elements which have high aspect ratios (so called sliver elements) are undesirable, leading
to a decrease in approximability of gradients of a ﬁnite element space. An evenly distributed set of vertices in the
domain interior is critical to generating a mesh suitable for the FEM. Shimada’s work, called bubble mesh, treats the
vertices of the discretization as bubbles, which repulse each other when too close. He then proposes the solution of
the bubble dynamics as a series of ordinary diﬀerential equations in time.
In this work we will generalize this idea as a method for even distribution of objects in space. Then we apply it to
the visualization of graphs using a force-directed approach [8, 9]. A drawback of force-directed approaches to graph
visualization is long run times. We will demonstrate that our approach is amenable to an agent-based implementation
and therefore is trivially parallelizable on shared memory architectures.
∗ Corresponding

author
Email address: nathaniel.collier@gmail.com (Nathan Collier)

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.164

Nathan Collier and Marcin Sieniek / Procedia Computer Science 9 (2012) 1494 – 1502

1495

2. Generalized Bubble Mesh Algorithm
We will represent N bubbles as a set of tuples containing the bubble center location and radius, {(xi , ri )}i=1,N . The
bubble dynamics are governed by a set of ordinary diﬀerential equations,
{M x¨ i + C x˙ i + Kxi = fi }i=1,N

(1)

subject to initial conditions and where x˙ i and x¨ i are the ﬁrst and second time derivative of the bubble centers, fi is
a force composed of inter-bubble interactions, and M, C, and K are constants. The system corresponds to a massspring-damper, well known from the ﬁeld of Newtonian physics. Although the systems are linked by the forcing,
we will solve them independently. The exact dynamics are not of interest in these applications, only that an even
distribution of objects in space is achieved.
We will solve these equations using standard ordinary diﬀerential equation techniques. We do not care about
accuracy in our solver, only for stability. To simplify the notation, we will consider the solution of one ODE system
and do the same for each system. We rewrite the second order ODE as a system of ﬁrst order ODEs by introducing a
dummy variable z = x˙ .
⎧
⎪
⎪
⎨x˙ i = zi
⎪
⎪
⎩z˙ i = 1 (fi − Czi − Kxi )
M
These expressions for the ﬁrst time derivatives are used to evolve the system discretely in time using a forward Euler
approach, detailed in algorithm 1. We will indicate the time step with the variable t in superscript. The algorithm
continues until the largest bubble velocity falls below a tolerance, Vrest .
Algorithm 1 Second order ODE solve algorithm for the ith system
1:
2:
3:
4:
5:
6:
7:
8:
9:

Set initial conditions x0i = xi (0), z0i = 0
t=1
while max {zt−1
i }i=1,N > Vrest do
Compute inter-bubble force fi
− Kxt−1
z˙ ti = M1 fi − Czt−1
i
i
t
t−1
t−1
zi = zi + Δt z˙ i
xti = xt−1
+ Δt zt−1
i
i
t =t+1
end while

2.1. Designing inter-bubble forces
When bubbles come close together, they exert a force on each other. It is useful to deﬁne ni j as the unit normal
vector pointing from the center of the ith bubble toward the center of the jth bubble. Similarly we deﬁne the distance
between bubble centers as di j .
When using the method for meshing, the radii of each bubble are used to deﬁne a region of inﬂuence around a
bubble center. If bubbles overlap, then they repel each other, if two bubbles come close to each other, they attract each
other, and if they are just touching, the bubbles are in perfect balance. We can deﬁne the forcing of the ith bubble with
respect to the jth bubble as
⎧
⎪
19 2
0
⎪
⎪ 5 2 r3 − 28r
r + 9r
if r < 32 r0
⎨
28 · ni j
14r0
0
fb (r) = ⎪
⎪
⎪
⎩0
otherwise
where r = di j and r0 = ri + r j . This function is plotted in ﬁgure 1a.
In other situations, it may be desirable to simply repel bubbles. In this case, we can deﬁne
⎧
2 2
⎪
⎪
⎪
· ni j if r < r0
⎨ 1 − rr0
fr (r) = ⎪
⎪
⎪
⎩0
otherwise

1496

Nathan Collier and Marcin Sieniek / Procedia Computer Science 9 (2012) 1494 – 1502

where r = di j and r0 = Ari . The constant A can be used to increase the area of inﬂuence around the bubble. This
function is plotted in ﬁgure 1b.

(a) fb (r), force function which repels overlapping bubbles and attracts those that are close.

(b) fr (r), force function which only repels.

Figure 1: Sample inter-bubble force functions
Finally, it may be desirable to attract certain bubbles, for example, in graph visualization we want related items to
be attracted to each other. In this case we add a force analogous to a spring,
f s (r) = k (r − r0 ) · ni j
where r0 is the undeﬂected length of the spring, in this case r0 = Bdi j and k is the spring constant and B is a constant
used to increase the undeﬂected length.
3. Agent-based Approach
The method presented in section 2 is particularly well-suited for distributed execution, due to some of its features:
• the task can be trivially decomposed to a set of subtasks,
• solving an equation based on inaccurate or incomplete knowledge about the rest of the system still leads to
improvement of the global state thanks to its stability,
• only limited communication is required to propagate changes in the system,
• the tasks are not tied to any speciﬁc resources, so they can be migrated between computational nodes as such
need arises.
In the following subsections we develop a formal description of the concurrency model using the agent-based methodology.
Agent architecture
The Multi-Agent System (MAS) is composed of a few elements:
• an agent platform, which abstracts the computation from the physical resources,
• a set of agents - intelligent, active objects,
• an environment, agents can interact with.
We associate an agent Ai with each bubble (xi , ri ). Since all bubbles are similar, the agents are homogeneous, have the
same set of goals and display the same capabilities. For a given agent, anything else it can observe (including other
agents) constitutes the environment.
Let us specify the MAS corresponding to the aforementioned problem in terms of Belief-Desire-Intent (BDI)
methodology. BDI is an established agent architecture, which formalizes agent’s knowledge, goals and strategies
([10], [11]). In this approach, beliefs donate an agent’s picture of the environment, desires stand for agent’s goals and
intents represent a set of possible actions an agent can take.

Nathan Collier and Marcin Sieniek / Procedia Computer Science 9 (2012) 1494 – 1502

1497

Agent’s beliefs
The exact solution of problem (1) would require each equation in the system to be solved based on the up-to-date
solutions of all other equations. In the language of agents, it would mean the continuous need to acquire a global
view of the whole system. Not only would this break the assumption of agent’s incomplete knowledge, imposed by
the majority of the agent research community ([12], [13]), but it would also result in an ineﬃcient program, due to
repetitive global barriers.
Instead, based on the observation that the actual bubble dynamics is irrelevant in this application, we equip the
agent solely with the partial, presumably out-dated knowledge of its surroundings i.e. its belief on what the environment looks like.
Agent’s desires
Agent’s goals are three-fold. Primarily, it desires to determine its equilibrium position in space, optimizing the
distances to neighboring bubbles. As a secondary goal, an agent prefers that its bubble stay close to the bubbles it is
incident with in the corresponding graph (i.e. there exists an edge between them). Finally, when not necessary, an
agent would better not move its bubble.
Agent’s intents
This part of an agent’s deﬁnition reduces to only two possibilities. To achieve its objectives, at each stage an agent
can make its bubble attract or repel the neighboring bubbles.
It is important to note that we do not impose the above bahavior as a chain of conditional expressions. Rather than
that, the above reasoning is realized with a set of self-adjusting formulae, which originate from the word of physics.
This way, agent’s ’intelligence’ is donated in an elegant, ’fuzzy’ way, making the agent’s software code clean and
concise.
Communication
An agent Ai needs to communicate with the environment in order to:
• notify other agents about the changes to xi ,
• collect from other agents the changes to {(x j , r j )} j i ,
• determine whether the stop condition is met.
This can be realized in several ways. For example agents can pass the updates according to a predeﬁned tree-shape
scheme or update A j with the position xi whenever they need x j for further computing.
In case of an underlying shared-memory architecture, a more straightforward approach can be taken: Bubbles’
positions can be stored in the shared memory and updated disregarding the potential race conditions, when bubble’s
position is determined based on yet-to-be-updated information about the position of its neighbors. As we show in
section 4 such a ’negligent’ behavior is not only well justiﬁed by the computational cost, but it also degrades the
results in an acceptable manner.
4. Numerical Results
In this section we present some results which demonstrate the eﬃcacy of the algorithm proposed. Furthermore we
will demonstrate that the results are qualitatively insensitive to parallelization.
Meshing
The bubble mesh algorithm was originally intended to be used in the point insertion process for meshing. Given
the boundary data for the country of France, we use the bubble mesh algorithm to smoothly insert points into the
domain. The boundary nodes of the representation were obtained from the CountryData function in Mathematica
[14]. We used Triangle [15] to triangulate this boundary data set to obtain a triangulation of the interior. We then
create bubbles for each node in the mesh, where the radius of each bubble is chosen to be the length of the longest
edge connected to the node. This initial conﬁguration is shown in ﬁgure 2a, where each bubble had its radius drawn
to scale and colored based on its size. The algorithm is then run only using the inter-bubble force labeled, fb (r). The
result after smoothing can be seen in ﬁgure 2b.

1498

Nathan Collier and Marcin Sieniek / Procedia Computer Science 9 (2012) 1494 – 1502

Graph Visualization
The ﬁrst author of this paper contributes to an area of computational mechanics known as isogeometric analysis.
To create a realistic test case, we took a community bibliographic ﬁle for publications in isogeometric analysis and
cross-referenced coauthors of papers. An author is represented by a bubble whose radius corresponds to the number
of publications the author has in the ﬁeld. Two authors are linked if they publish a paper together.
All bubbles repel each other, using the force function fr (r) as deﬁned previously in this paper. The area of inﬂuence
has been increased substantially to keep the bubbles apart such that the text may be legible. For bubbles whose
corresponding authors have published a paper together, we add a spring force, f s (r) which attract the two bubble
centers. The global mass constant M is chosen uniformly for each bubble. The dampening coeﬃcient C is chosen
such that the system is over-damped. A global stiﬀness coeﬃcient K is added such that all bubbles tend to remain
anchored to the center of the image.
We initialize the graph by placing all bubble centers in a circle as shown in ﬁgure 3. We then solve for the bubble
centers using the system of ODEs deﬁned previously. We continue solving until the velocity of the bubble centers
slows to a speciﬁed resting velocity, Vrest . A sample ﬁnal conﬁguration is shown in ﬁgure 4a.
An implementation of the algorithm was evaluated on the above problem. A sample conﬁguration is shown for
the parallel version using eight agents in ﬁgure 4b, where each agent here is in charge of a collection of bubbles.
Qualitatively, the solution is unaﬀected by the parallelization even though the total simulation time is diﬀerent for
each thread.

1502

Nathan Collier and Marcin Sieniek / Procedia Computer Science 9 (2012) 1494 – 1502

5. Conclusions
We have presented an extension of the bubble mesh algorithm as a generic algorithm for the arrangement of
objects in space. We further demonstrate that the algorithm is well-suited to an agent based approach. We present
numerical results which demonstrate the algorithm’s usefulness. Furthermore these numerical tests show that while
speciﬁc dynamics may vary when using the agent-based approach, the outcome is qualitatively the same.
Acknowledgements
The work reported in this paper was funded by Polish National Science Center grant no. NN 519447739.
References
[1] K. Shimada, D. Gossard, Bubble mesh: Automated triangular meshing of non-manifold geometry by sphere packing, in: ACM Third Symposium on Solid Modeling and Applications, 1995, pp. 409–419.
[2] A. Y. Shimada, K., T. Itoh, Anisotropic triangular meshing of parametric surfaces via close packing of ellipsoidal bubbles, in: The 6th
International Meshing Roundtable, 1997, pp. 375–390.
[3] S. Yamakawa, K. Shimada, High quality anisotropic tetrahedral mesh generation via packing ellipsoidal bubbles, in: The 9th International
Meshing Roundtable, 2000, pp. 263–273.
[4] S. Yamakawa, K. Shimada, Anisotropic tetrahedral meshing via bubble packing and advancing front, in: First M.I.T. Conference on Computational Fluid and Solid Mechanics, 2001.
[5] T. Hughes, The ﬁnite element method: linear static and dynamic ﬁnite element analysis, Dover, 1987.
[6] L. F. Demkowicz, Computing with hp-ADAPTIVE FINITE ELEMENTS: Volume 1 One and Two Dimensional Elliptic and Maxwell problems, CRC Press, United States of America, 2007.
[7] G. Strang, G. Fix, An analysis of the ﬁnite element method, Wellesley Cambridge Press, 2008.
[8] T. M. J. Fruchterman, Edward, E. M. Reingold, Graph drawing by force-directed placement (1991).
[9] P. Eades, Graph drawing by force-directed placement, Congressus Numerantium (1984) 149–160.
[10] M. Rao, A.S. Georgeeﬀ, Modelling rational agents within a BDI architecture, in: Proceedings of the Second International Conference on
Principles of Knowledge Representation and Reasoning, KR & R, Cambridge, USA, 1991, pp. 473–484.
[11] M. Rao, A.S. Georgeeﬀ, BDI agents: From theory to practice, in: L. V. (Ed.), Proceedings of the First Internation Conference on Multiagent
Szstems, AAAI Press Menlo Park, Cambridge, USA, 1995, pp. 312–319.
[12] G. Dobrowolski, Technologie agentowe w zdecentralizowanych systemach informacyjno-decyzyjnych, Uczelniane wydawnictwa NaukowoDydaktyczne, 2002.
[13] K. Cetnarowicz, Problemy projektowania i realizacji system´ow wieloagentowych, Uczelniane wydawnictwa Naukowo-Dydaktyczne, 1999.
[14] I. Wolfram Research, Mathematica 8.0, Wolfram Research, Inc., 2010.
[15] J. R. Shewchuk, Triangle: Engineering a 2D Quality Mesh Generator and Delaunay Triangulator, in: M. C. Lin, D. Manocha (Eds.), Applied
Computational Geometry: Towards Geometric Engineering, Vol. 1148 of Lecture Notes in Computer Science, Springer-Verlag, 1996, pp.
203–222, from the First ACM Workshop on Applied Computational Geometry.

