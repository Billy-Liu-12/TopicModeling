Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 286 – 291

International Conference on Computational Science, ICCS 2012

Physically accurate granular ﬂow simulation
S. Oliveiraa,, D.E. Stewartb,
a Department

of Computer Science, University of Iowa, Iowa City, IA 52242
of Mathematics, University of Iowa, Iowa City, IA 52242

b Department

Abstract
Discrete element simulation models large collections of solid bodies as individual bodies, rather than attempt to
approximate the system via continuum models and partial diﬀerential equations. However, standard models for rigid
bodies are inadequate as they do not incorporate elastic vibrations. An alternative to both rigid body models and ﬁnite
element simulations is presented that is highly parallelizable. These models are the basis for GPU implementations of
discrete element simulation.
Keywords: discrete element simulation, elastic bodies, parallel simulation

1. Introduction
Discrete element simulation is used to model ﬂow and movement of granular materials, such as gravel, grains,
sand and powders. Important applications of granular ﬂow include rock slides, size sorting by shaking, and various
manufacturing processes involving many parts such as boxing nails or screws. Solid bodies are typically modeled as
rigid bodies , which is generally a good approximation to reality. However, impact models for rigid bodies [1, 2] are
problematic as they require a “coeﬃcient of restitution” which measures how elastically a body bounces.
While it is natural to assume that this coeﬃcient of restitution is a material property (since rubber balls bounce
well, but soft clay balls do not), this is not in fact the case. For example, the experiments of Stoianivici & Hurmuzlu
[3] with thick rods of diﬀerent aspect ratios showed a very strong dependence of the kinematic coeﬃcient of restitution
on the angle of impact. Further diﬃculties were found by [4, 5] with various impact models. The resolution of the
diﬃculties lies not with more sophisticated impact models based on rigid bodies. Rather the fundamental issue is that
elasticity must be incorporated into the model. One-dimensional models of rods going back to Routh [6] (1860) show
that elastic rods in impact have elastic waves traversing the rod which explains their coeﬃcient of restitution.
Incorporating elasticity into the models of impact typically involve partial diﬀerential equations, which are computationally very expensive in both time and memory, especially when we are dealing with thousands of bodies in
contact or collision. In addition, because of the tight coupling between nodes in a ﬁnite element model, it is harder
to parallelize these methods. A further computational diﬃculty is the Courant–Friedrichs–Levy (CFL) limit on the
time step used for solving the equations of elasticity [7]. This essentially limits the time step to be no more than the
time an elastic wave takes to traverse the smallest element of the ﬁnite element model. Even though this limit is a
necessary condition only for explicit methods for solving the diﬀerential equations in time, if implicit methods are
used, violating the CFL limit by a wide margin results in poor numerical simulations.
In this paper we propose a new approach based on convolution complementarity problems [8] which is highly
parallelizable, incorporates elastic waves and vibrations, and is less computationally intensive that full ﬁnite element
modeling. It is thus a much better way of simulating large numbers of contacting and impacting bodies.

1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.030

S. Oliveira and D.E. Stewart / Procedia Computer Science 9 (2012) 286 – 291

287

n 1(x)
x
N1(x 1)
x1

x2
N2(x 2)

ϕ (x 1 , x 2 )
Figure 1: Geometry of bodies near contact

2. Convolution complementarity models of impact
2.1. Contact conditions
For frictionless contact between rigid bodies, there is a natural complementarity relationship between the contact
force acting between them [1]:
0 ≤ separation ⊥ contact force ≥ 0.
That is, both the separation and the contact force are non-negative, the (dot) product of the two is zero. In other words,
both the separation and contact force are non-negative, and if one is positive the other is zero.
For elastic bodies, there are inﬁnitely many points of possible contact, and the contact force can act at each and
every point of contact. At each point of potential contact, this complementarity relationship must hold. To formalize
this relationship we introduce some notation. Let u(t, x) be the displacement or deformation of the point x of an elastic
body Ω ⊂ R3 at time t. At every point x on the boundary ∂Ω of Ω we have the outward normal vector n(x). Assuming
small deformations, the separation between between x and a rigid obstacle is given by
separation = ϕ(x) − n(x) · u(t, x)
where ϕ(x) is the separation of the undeformed body from the obstacle.
For a pair of elastic bodies, Ω1 and Ω2 , a similar formula can be used to determine the separation between the
bodies at points x1 ∈ ∂Ω1 close to ∂Ω1 . Fix a mapping x1 → π1,2 (x1 ) = x2 ∈ ∂Ω2 ; we could take x2 to be the nearest
point in ∂Ω2 , but need not be. Then the separation between x1 and x2 is given approximately for x1 ≈ x2 by:
separation
≈ ϕ(x1 , x2 ) − n1 (x1 ) · [u1 (t, x1 ) − u2 (t, x2 )]
≈ ϕ(x1 , x2 ) − n2 (x2 ) · [u2 (t, x1 ) − u1 (t, x2 )]
since n1 (x1 ) ≈ −n2 (x2 ). Here ϕ(x1 , x2 ) is the separation between x1 and x2 with zero displacement or deformation.
Ignoring the geometric nonlinearities if x1 and x2 are close, we can take these approximations to be equalities, and
n1 (x1 ) = −n2 (x2 ). Then the normal contact forces on Ω1 at x1 is −N1 (x1 ) n1 (x1 ), and similarly on Ω2 at x2 is
−N2 (x2 ) n2 (x2 ); by Newton’s third law of motion, these are negatives of each other, so we take N1 (x1 ) = N2 (x2 ).
These relationships are illustrated in Figure 1.
The complementarity conditions that we want to solve for are then
0 ≤ ϕ(x1 , x2 ) − n1 (x1 ) · [u1 (t, x1 ) − u2 (t, x2 )]
⊥ N1 (t, x1 ) = N2 (t, x2 ) ≥ 0
for all x1 ∈ ∂Ω1 in potential contact with Ω2 , and x2 = π1,2 (x1 ).

(1)

288

S. Oliveira and D.E. Stewart / Procedia Computer Science 9 (2012) 286 – 291

2.2. Equations of elasticity
It should be understood that in each body, both the displacement ﬁeld ui (t, x) and the contact forces Ni (t, x) are
unknowns to be determined. Connecting them are the equations of elasticity. For frictionless linear elasticity these
can be given for body i as:
∂2 ui
∂t2
σi [ui ] (t, x) · ni (x)
ρi (x)

=

div σi [ui ] + fi (t, x),

(2)

=

−Ni (t, x) ni (x).

(3)

Equation (2) holds inside Ωi , while (3) holds on the boundary ∂Ωi . The quantity fi (t, x) is the external or non-elastic
forces acting on body Ωi at time t and at position x ∈ Ωi . The quantity σi [ui ] (t, x) is the stress tensor, which is a
symmetric rank two tensor or matrix. It can be determined from the linearized strain tensor
1
∇u + ∇uT
2

ε [u] =
for linear elasticity, by means of the constitutive relations

a(i)
jkpq ε pq [u]

σi [u] jk =
p,q

where a(i)
k jpq are the material parameters for body Ωi .
For this paper, the important point is that the equations of elasticity are linear, and independent of time. This
means that the solution depends in a linear way on the external forces (fi (t, x)), initial displacement (ui (0, x)) and
velocity (∂ui /∂t(0, x)), and contact forces (Ni (t, x)). Furthermore, because the equations are independent of time, we
can write the solution in terms of a convolution in time:
ui (t, x) = u(0)
i (t, x) +

t
0

wi (t − τ, x; y) Ni (τ, y) dS (y) dτ.

∂Ωi

(4)

Here u(0)
i (t, x) is the displacement ﬁeld assuming zero contact forces Ni .
2.3. Convolution complementarity problems
We now need to combine the representation of the displacement ﬁeld solutions (4) with the complementarity
condition (1). This gives the complementarity conditions for N1 :
t

0 ≤ N1 (t, x) ⊥ ϕ(0) (t, x) +
0

∂Ω1

n1 (x) · w1 (t − τ, x; y) N1 (τ, y) dS (y) dτ ≥ 0

where ϕ(0) (t, x) is the separation between x ∈ ∂Ω1 and Ω2 that would have occurred if the contact forces were zero.
This is still a complementarity condition that involves inﬁnitely many points x1 ∈ ∂Ω1 . To create a computationally
feasible problem, we represent
m

N1 (t, x) =

ψ1, j (x) N1, j (t)
j=1

where ψ1, j are smooth non-negative functions on ∂Ω1 , and require complementarity between N1, j (t) and
ψ (x) separation(t, x) dS (x). This gives a ﬁnite dimensional convolution complementarity problem (CCP) [8] of
∂Ω1 1, j
the following form:
0 ≤ N1, j (t)

⊥

ϕ(0)
1, j (t) +

t m

μ jk (t − τ) N1,k (τ) dτ ≥ 0,

0 k=1

j = 1, 2, . . . , m. The kernel function of this convolution μ(t) = μ jk (t) is a m × m matrix-valued function that captures
the elastic behavior of the body. In matrix-vector form, it can be written as
0 ≤ N1 (t) ⊥ ϕ(0)
1 (t) +

t
0

μ(t − τ) N1 (τ) dτ ≥ 0.

S. Oliveira and D.E. Stewart / Procedia Computer Science 9 (2012) 286 – 291

289

Careful analysis of the partial diﬀerential equations involved lead to the result that μ jk (0) = const ∂Ω ψ1, j (y)ψ1,k (y) dS (y),
1
and from this, μ(0) is a positive deﬁnite matrix. By using a time discretization approach, these problems can be solved
numerically [8].
3. GPU and multicore programming
The best computing performance in recent years in terms of Gﬂops per dollar have come from general purpose
Graphical Processing Units (GPUs). GPUs provide an economical path to super computer performance, which today
is measured in Teraﬂops (1012 ﬂops) and Petaﬂops (1015 ﬂops). In spite of the recent advances in support for developing software for GPUs (e.g., CUDAT M and OpenCLT M ), the programming model for GPUs is somewhat limited,
especially if the programmer aims for near optimal performance. While GPUs have support for hundreds of threads,
features such as recursion are not available. Certain operations, such as parallel summation, must be programmed
“by hand”, taking into account the various levels of granularity of the GPU. For example, programming the optimal O(log n) parallel summation algorithm in CUDA requires separate kernel routines to handle within-thread-block
summation, and another to handle within-grid summation.
As with any high-performance algorithm, it is important wherever possible to match the hardware data transfer
rate to the rate at which the algorithm “consumes” data. This has the ironic result that many fast algorithms are hard
to parallelize.
4. Implementation
The numerical methods developed in [8] for convolution complementarity problems lead to a sequence of complementarity problems [9, 10]:
l

μ(l− j) N(1j) ≥ 0,

(l)
0 ≤ N(l)
1 ⊥ ϕ1 +

(5)

j=0

for l = 0, 1, . . .. The value μ(0) ≈ μ(0), and is symmetric positive deﬁnite. This will form the main computational
kernel of the method for simulating systems of elastic bodies. There are two parts to this computational kernel. One
l−1 (l− j) ( j)
N1 . The second is to solve the complementarity problem
is computing the discrete convolution ν(l)
j=0 μ
1 :=
(l)
(l)
(0) (l)
0 ≤ N(l)
1 ⊥ ϕ1 + ν1 + μ N 1 ≥ 0.

There are several ways to solve linear complementarity problems of this form. The oldest still commonly used
is Lemke’s method [11, 12], which is based on the simplex method for linear programming [13]. On the other hand,
there are iterative methods [14, 15, 16] which can be separated into two diﬀerent types. The older iterative methods for
linear complementarity problems perform a nonlinear version of the Gauss–Seidel method with an iteration consisting
of solving a sequence of simple scalar complementarity problems [14, 17]. A number of newer methods have been
developed based on representing the linear complementarity problem in terms of (non-smooth) nonlinear functions,
and then applying a version of Newton’s method to the resulting system.
To explain more precisely how these methods work, consider the following linear complementarity problem: Find
z ∈ Rn satisfying
0 ≤ z ⊥ M z + q ≥ 0.
(6)
The older methods were similar to the following Gauss–Seidel method for :
for iter = 1, 2, . . .
for i = 1, 2, . . . , n
wi ← nj=1; j i mi j z j + qi
solve 0 ≤ zi ⊥ mii zi + wi ≥ 0 for zi

290

S. Oliveira and D.E. Stewart / Procedia Computer Science 9 (2012) 286 – 291

Ω3
Ω2
ψ2,1
ψ1,1

ψ3,2

ψ

5,1

ψ

2,3

ψ3,1

ψ2,2

Ω5

Ω4

Ω1

ψ4,1

Figure 2: Interactions between contact regions and bodies

Solving a scalar linear complementarity problem 0 ≤ z ⊥ az + b ≥ 0 with a > 0 is easy: it is z = max(−b/a, 0). These
methods converge rapidly if the matrix M is strongly diagonally dominant.
The newer methods instead represent the complementarity problem (6) as an equation, such as min(z, M z + q) = 0
where the minimum is taken componentwise. A version of Newton’s method is used to solve this system of equations.
We use the older Gauss–Seidel based methods for solving the linear complementarity problems that arise in this
model. The main reasons are that it is very straightforward to implement, and the matrix involved μ(0) ≈ μ(0) is both
sparse and strongly diagonally dominant for reasonable choices of the ψ1, j (x) functions. The interactions that appear
in the linear complementarity problem for each step are illustrated in Figure 2 for the situation where the time step is a
fraction of the time needed for elastic waves to traverse one body. The contour lines represent the elastic waves due to
each patch ψi, j (patch j on body i) and interactions can only occur between patches ψi, j and ψ p,q if these contour lines
of one patch (say ψi, j ) overlap the other patch (ψ p,q ). Note that this is a symmetric relationship as μ(0) is a symmetric
matrix. For contacting bodies, we have, for example, N5,1 = N3,2 from Newton’s second law. Thus in body Ω2 there
are direct interactions between patches ψ2,1 and ψ2,2 , and between ψ2,2 and ψ2,3 . However, there are no interactions
between patches ψ3,1 and ψ3,2 in body Ω3 . In contrast, in rigid body dynamics, there are interactions between all the
patches (and their forces) shown in Figure 2.
The matrix kernel function μ(t) for each body can be determined numerically via detailed ﬁnite element simulation.
This simulation only needs to be done once for each patch, and can be done using a much smaller step size than the
CCP computations. For symmetric bodies, such as balls, this can be further reduced as we only need to carry out one
simulation for each class of symmetrically equivalent patches. (For example, we could use an icosahedral arrangement
of patches on a ball, and we only need one ﬁnite element simulation to obtain the entire matrix kernel function μ(t).)
4.1. Implementation on GPUs
(l− j) ( j)
For GPU implementation, the convolution operation involves computing l−1
Ni where μ(k)
≈ μi (hk), μi
j=0 μi
i
the matrix kernel function for body Ωi . This involves matrix-vector multiplication together with parallel summation.
The matrices involved are relatively small (for example, 20 × 20 using an icosahedral arrangement of patches on a
ball), but this should signiﬁcantly reduce the memory bandwidth needed between global device memory and shared
memory.
Implementing the Gauss–Seidel iteration for the linear complementarity problem
(l)
(l)
(0) (l)
0 ≤ N(l)
i ⊥ ϕi + νi + μ N i ≥ 0

should exploit the sparsity of μ(0) . For example, if the bodies involved are balls and an icosahedral arrangement of the
patches is used, μ(0) should only have 6 non-zero entries per row out of 20 columns. It may be worthwhile hard-wiring
(at least in some simulations) this sparsity pattern to avoid the many if...then... branches that would occur in
navigating a general sparse matrix data structure.

S. Oliveira and D.E. Stewart / Procedia Computer Science 9 (2012) 286 – 291

291

5. Conclusions
GPUs oﬀer a path to supercomputing performance without the expense. CCPs oﬀer a path to simulating granular
ﬂows which keep the elastic behavior without the computational cost of ﬁnite element methods. The two together
should provide an economical and eﬀective way of accurately simulating large numbers of bodies that can impact and
contact each other.
There are still a number of issues that need to be resolved. The ﬁrst is that CCPs are based on a linearization which
is valid for small displacements. Over time, bodies make large displacements. However, these displacements can be
split into a rigid motion part and a truly elastic part:
ui (t, x) = xi (t) + Qi (t) x − xi (0) + u(e)
i (t, x)
where xi (t) is the center of mass of body Ωi at time t, Qi (t) is the orientation of the body at time t (represented as a
3 × 3 orthogonal matrix), and u(e)
i (t, x) is the elastic part of the displacement. The other issue is frictional contact.
This complicates the solution of the problem, especially as the matrix used in the linear complementarity problem is
no longer symmetric. These are issues for future work.
References
[1] D. E. Stewart, Rigid-body dynamics with friction and impact, SIAM Review 42 (1) (2000) 3–39.
[2] W. J. Stronge, Impact Mechanics, 1st Edition, Cambridge Univesity Press, Cambridge, UK, 2000.
[3] D. Stoianovici, Y. Hurmuzlu, A critical study of the applicability of rigid-body collision theory, ASME J. Applied Mech. 63 (2) (1996)
307–316.
[4] A. Chatterjee, On the realism of complementarity conditions in rigid-body collisions, Nonlinear Dynamics 20 (2) (1999) 159–168.
[5] W. J. Stronge, Rigid body collisions with friction, Proc. Roy. Soc. London Ser. A 431 (1881) (1990) 169–181.
[6] E. J. Routh, A Treatise on the Dynamics of a System of Rigid Bodies, MacMillan, London, 1860.
[7] L. C. Evans, Partial diﬀerential equations, 2nd Edition, Vol. 19 of Graduate Studies in Mathematics, American Mathematical Society, Providence, RI, 2010.
[8] D. E. Stewart, Convolution complementarity problems with application to impact problems, IMA J. Applied Math. 71 (1) (2006) 92–119,
ﬁrst published Advance Access May 2005; DOI 10.1093/imamat/hxh087.
[9] R. W. Cottle, J.-S. Pang, R. E. Stone, The Linear Complementarity Problem, Academic Press, Boston, San Diego, New York, 1992, series on
Computer Science and Scientiﬁc Computing.
[10] K. G. Murty, Linear and Combinatorial Programming, J. Wiley and Sons, 1976.
[11] C. G. Broyden, Lemke’s method — a recursive approach, Lin. Alg. Appl. 136 (1990) 257–272.
[12] C. E. Lemke, J. J. T. Howson, Equilibrium points of bimatrix games, J. SIAM 12 (1964) 413–423.
[13] G. B. Dantzig, Linear Programming and Extensions, Princetn Uni. Press, Princeton, NJ, 1963.
[14] A. Brandt, C. W. Cryer, Multigrid algorithms for the solution of linear complementarity problems arising from free boundary problems,
SIAM J. Sci. Statist. Comput. 4 (4) (1983) 655–684.
[15] A. Fischer, C. Kanzow, On ﬁnite termination of an iterative method for linear complementarity problems, Math. Programming 74 (3, Ser. A)
(1996) 279–292.
[16] Y. Lin, C. W. Cryer, An alternating direction implicit algorithm for the solution of linear complementarity problems arising from free boundary
problems, Appl. Math. Optim. 13 (1) (1985) 1–17.
[17] Y. Lin, C. W. Cryer, An alternating direction implicit algorithm for the solution of linear complementarity problems arising from free boundary
problems, Appl. Math. Optim. 13 (1) (1985) 1–17.

