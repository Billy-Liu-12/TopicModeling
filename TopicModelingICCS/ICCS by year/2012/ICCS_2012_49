Available online at www.sciencedirect.com

Procedia Computer Science 9 (2012) 727 – 736

International Conference on Computational Science, ICCS 2012

A Mass Conservation Algorithm For Adaptive Unreﬁnement
Meshes Used By Finite Element Methods
Hung V. Nguyen∗1 , Jing-Ru C. Cheng1 , Charlie R. Berger2 , and Gaurav Savant2
1 U.S.

2 U.S.

Army Engineer Research and Development Center (ERDC) Information Technology Laboratory (ITL), Vicksburg, MS 39180
email: hung.v.nguyen, ruth.c.cheng@usace.army.mil
Army Engineer Research and Development Center (ERDC) Coastal and Hydraulics Laboratory (CHL), Vicksburg, MS 39180
email: charlie.r.berger, gaurav.savant@usace.army.mil

Abstract
The Adaptive Hydraulics (ADH) model is an adaptive ﬁnite element method to simulate three-dimensional NavierStokes ﬂow, unsaturated and saturated groundwater ﬂow, overland ﬂow, and two- or three-dimensional shallow-water
ﬂow and transport. In the shallow-water ﬂow and transport, especially involving multispecies transport, the water
depth (h), the product of water depth and velocities (uh and vh), as well as water depth and chemical concentration
(hc) are dependent variables of ﬂuid-motion simulations and are often solved at various times. It is important for
the numerical model to predict accurate water depth, velocity ﬁelds, and chemical distribution, as well as conserve
mass, especially for water quality applications. Solution accuracy depends highly on mesh resolution. Adaptive mesh
reﬁnement (AMR), particularly the h-reﬁnement, is often used to add new nodes in the region where they are needed
and to remove others where they are no longer required during the simulation. The AMR is proven to optimize the
performance of a computed solution. However, mass with gain or loss can occur when elements are merged due
to removing a node at mesh coarsening. Therefore, we develop and implement the mass-conservative unreﬁnement
algorithm to ensure the mass conserved in a merged element in which a node has been removed.
This study describes the use of the Galerkin ﬁnite element method to redistribute mass to nodes comprising a
merged element. The algorithm was incorporated into the ADH code. This algorithm minimizes mass error during the
unreﬁnement process to conserve mass during the simulation for two-dimensional shallow-water ﬂow and transport.
The implementation neither signiﬁcantly increases the computational time nor memory usage. The simulation was
run with various numbers of processors. The results showed good scaling of solution time as the number of processors
increases.
Keywords: Adaptive mesh, ﬁnite element method, mass conservative, shallow-water ﬂow, and ADH model

1. Introduction
Accurate solutions are often sought when we solve partial diﬀerential equations (PDE) for scientiﬁc problems. A
variety of numerical errors (e.g., spurious oscillation, numerical spreading, grid orientation, and peak clipping/valley
elevating) [1, 2, 3] often exist when we use numerical methods to discretize the PDE system. These errors can
be partially mitigated through the implementation of higher order ﬁnite element or ﬁnite diﬀerence discretizations,
for example, TVD and ENO methods [4, 5], with the increase of spatial and temporal resolution throughout the
1877-0509 © 2012 Published by Elsevier Ltd. Open access under CC BY-NC-ND license.
doi:10.1016/j.procs.2012.04.078

728

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

entire domain to avoid oscillation. But uniformly reﬁning the computational mesh throughout the domain is way too
expensive. An adaptive mesh reﬁnement (AMR) approach, which is also called h-reﬁnement, can be more eﬀective in
its use of computer resources for large-scale applications. The AMR improves the mesh resolution in regions where
the numerical error is large, while keeping the mesh coarse elsewhere. However, the AMR technique is more complex
to implement but beneﬁts many applications exhibiting discontinuties, shock waves, or phase changes [6], etc. A wide
variety of AMR approaches have been explored in the literature [7, 8, 9, 10, 11, 12], including serial and parallel
approaches [13, 14, 15].
Mass conservation is the primary requirement when AMR takes place. In fact, AMR includes two parts: mesh
reﬁnement and unreﬁnement. During the reﬁnement step, it is straightforward to add these nodes and elements in a
manner that preserves mass, such as linear interpolation in a linear element. For unreﬁnement, the nodes are deleted
and elements are merged in some regions where a ﬁne mesh resolution has become useless for transient problems. The
unreﬁnement step is necessary to avoid memory and computation overkill. Without special care of transferring data
from the unreﬁned node to its parents, the result often brings up mass conservation issues. Yamoah [16] investigated
this problem and proposed three algorithms to restore mass conservation for unreﬁnement when solving 1-D variably
saturated groundwater ﬂow using MATLAB code. These methods are based on either a weighted average approach
or the L2 projection approach. He concluded that the mass cannot be preserved, and the mass lost may be signiﬁcant
for a long simulation if a mass-conservative unreﬁnement algorithm is not used.
We extended the L2 projection algorithm onto 2-D unstructured meshes. We developed the mathematical formulation and implemented the algorithm in the ADaptive Hydraulics (ADH) modeling system—a parallelized numerical
model with the following components: saturated and unsaturated groundwater ﬂow, three-dimensional Navier-Stokes
ﬂow, two- or three-dimensional shallow-water ﬂow, and the associated transport. When reﬁnement is on the ADH, the
element is split if the solution error on the element exceeds the reﬁnement error tolerance. At the added node the data
such as water head or chemical concentration are linear interpolation in the element. When the solution error on the element is below the unreﬁnement error tolerance then the elements are recombined. The node is simply deleted without
special care of transferring data from the unreﬁned node to its parents. In this paper, we ﬁrst discuss the shallow-water
ﬂow application including the governing equations and discretized formulation, numerical methods, and numerical
diﬃculties. We then present the mathematical formulation of the mass-conservative unreﬁnement algorithm, followed
by its implementation. Experimental results are then presented to demonstrate the mass conservation throughout the
entire simulation. Finally, we summarize and discuss these results and also present plans for future works.
2. ADaptive Hydraulics (ADH)
ADH is a modular, parallel, adaptive ﬁnite element model for one-, two-, and three-dimensional ﬂow and transport.
ADH simulates saturated-unsaturated groundwater ﬂow, internal ﬂow, and open-channel ﬂow. The groundwater module includes solving 3-D variably saturated groundwater ﬂow and constituent transport. The groundwater ﬂow may be
coupled to 2-D diﬀusive wave or dynamic wave surface water ﬂow and can be loosely coupled to 3-D subsurface heat
transport. The internal ﬂow module is used to solve 3-D Navier-Stokes equations. This module is nonhydrostatic and
includes a κ − turbulence model. There are two approaches for open-channel ﬂows: nonhydrostatic and hydrostatic
pressure methods. The nonhydrostatic approach is more appropriate for domains near structures where the vertical
inertial terms are signiﬁcant. This approach is the same as that used for the 3-D internal ﬂow, though the free surface
is updated dynamically. The hydrostatic approach is to solve the shallow-water ﬂow equations, including 2-D and
3-D variable density ﬂow (baroclinic). The 2-D module includes the capability for wetting-drying, dam-break, supercritical and subcritical ﬂow, sediment transport, and bed change, and also has the capability to include the long-wave
vessel eﬀects.
The 2-D shallow-water ﬂow equations are obtained by vertically integrating the mass and momentum under the
assumptions of incompressible ﬂow and hydrostatic pressure [17]. Assuming negligible free surface shear and negligible ﬂuid pressure at the free surface, the 2-D shallow-water equations are written as the following partial diﬀerential
equation (PDE).
∂Q ∂Fx ∂Fx
+
+
+H=0
(1)
∂t
∂x
∂y
where Q = {h, uh, vh}T , t is time, Fx = {uh, u2 h +

gh2
2

− h σρxx , uvh − h

σyx T
ρ } ,

Fy = {vh, uvh − h

σ xy 2
ρ ,v h

+

gh2
2

−h

σyy T
ρ } ,

729

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736
√

√

n u u +v
n v u +v T
b
b
H = {0, gh ∂z
, gh ∂z
} , ρ is the ﬂuid density, u and v are the ﬂow velocity in the x- and
∂x + gh
∂y + gh
h1/3
h1/3
y-direction, respectively, h is the water depth, g is the gravitational acceleration, zb is the riverbed elevation, n is the
Manning’s roughness coeﬃcient, and σi j is the Reynolds stress due to turbulence, where the ﬁrst subscript indicates
the direction and the second, the face on which the stress acts. The Reynolds stresses are determined by the gradient
in the mean currents using the Boussinesq approach
2

2

2

2

σ xx = 2ρνt

2

2

∂u
∂v
∂u ∂v
, σyy = 2ρνt
, σ xy = σyx = 2ρνt
+
,
∂x
∂y
∂y ∂x

(2)

where νt is the kinematic eddy viscosity, which varies spatially.
The PDE system in (1) can be solved using the ﬁnite element method with the approach of Petrov-Galerkin that
incorporates a combination of Galerkin test function and a non-Galerkin component to control oscillations caused by
convection [18]. The variational forms of (1) in integral form and in ﬁnite element form are given as follows:

e

∂Q ∂Fx ∂Fy
+
+
+ H dΩ = 0,
∂x
∂y
Ω ∂t
∂Q ∂Fx ∂Fy
Ψi ·
+
+
+ H dΩe = 0,
∂t
∂x
∂y
Ωe

(3)
(4)

where Ω is the domain, the subscript e indicates a particular element, the subscript i indicates a particular test function,
and Ψi is the test function. The weak form of the equation is
⎧
⎫
i
i
⎪
⎪
⎪
− ∂Ψ
Fx − ∂Ψ
Fy + ⎪
Ψi ∂Q
⎪
⎪
∂t
∂x
∂y
⎪
⎪
Ω
⎪
⎪
⎨ e
⎬
∂Q ∂Q
= 0,
(5)
)
A
B
+
Ψ
H
dΩ
+
ϕ
⎪
⎪
i
i
e
⎪
⎪
∂x
∂x
⎪
⎪
⎪
⎪
⎪
e ⎪
⎩
⎭
φi Fx n x + Fy ny dΓe
Γe

∂φi ˆ
i ˆ
where φi is the Galerkin test function, ϕi is the non-Galerkin part of test function, i.e., β · Δx ∂φ
∂x A + Δy ∂y B , Δx and
∂F

y
x
Δy are the grid interval in the x- and y-direction, respectively, A = ∂F
∂Q , B = ∂Q , Γe is the boundary, and n x and ny are,
respectively, the x- and y-component of the unit outward vector normal to the boundary. A description of Aˆ and Bˆ can
be found in [19]. The temporal derivatives are expressed using a ﬁnite diﬀerence expression as

∂Q k+1
∂t j

=α·

( 32 Qk+1 − 12 Qk )−( 32 Qk − 12 Qk−1 )
δtk

j

+

(1 − α) ·

Qk+1 −Qk
δtk
j

,

(6)

where the subscript j is the node index, k is the time-step index, and α is the temporal relaxation factor. A complete
description of the time-stepping methods employed in ADH can be found in [20].
3. Mathematical Formulation for Mass-Conservative Unreﬁned Element
In this section, we present the mathematical formulation of the mass-conservative unreﬁnement algorithm. The
derivation is based on the backward Euler time scheme. The time derivative term in (4) can be formulated using the
Galerkin ﬁnite element method based on a set of linear basis functions spanning a ﬁnite dimensional space. Selecting
a test function Ψ =

N
i=1

˜ =
pi Ψi and ﬁnding a set of qi for the trial function, we can approximate Q

N
i=1

qi Qi and then

make

Ω

˜
∂Q
ΨdΩ = 0.
∂t

(7)

For AMR problems, the mesh may vary from time to time resulting in the set of basis functions qn ∈ Ωn and
q ∈ Ωn+1 at time tn and tn+1 , respectively. The associated ﬁnite dimensional space functions are denoted by Vhn and
Vhn+1 at two consecutive time-steps. Given Qnh ∈ Vhn , we need to ﬁnd Qn+1
∈ Vhn+1 such that the backward Euler time
h
diﬀerence of (7) becomes
n+1

730

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

Ωn+1

Qh n+1 Ψh n+1 dΩ −

Ωn+1

Qh n Ψh n+1 dΩ = 0

(8)

for all Ψh n+1 ∈ Vh n+1 . The second term
Ωn+1

Qh n Ψh n+1 dΩ

(9)

introduces problems. The function Qh n is deﬁned on the mesh at previous time tn , but the test function is deﬁned on
the domain Ωn+1 at time tn+1 . In the case of unreﬁnement, Vh n+1 ⊂ Vh n and Qh n cannot be expressed on Ωn+1 exactly.
3.1. Mass-conservative merged element using local approach
The goal of the mass conservation scheme is to preserve the mass in a merged element, in which a node has
been removed. In Figure 1, elements e1 and e2 are merged to element e∗ due to unreﬁning the node (x4 , y4 ). The
local approach to accurately calculate (9) allows a temporary and possibly discontinuous solution Q∗ for the merged
element only. Therefore, compute the {Q∗1 , Q∗2 , Q∗3 } values using the basis functions {N} such that
Ωe∗

Q1 ∗ N1 n+1 + Q2 ∗ N2 n+1 + Q3 ∗ N3 n+1 Ψi n+1 dA =
Ωe1

(Q1 n N1 n + Q4 n N2 n + Q3 n N3 n ) Ψi n+1 dA +

Ωe2

(Q4 n N1 n + Q2 n N2 n + Q3 n N3 n ) Ψi n+1 dA



(10)











Figure 1: Element with a unreﬁned node

3.2. Local linear system to solve
3.2.1. LHS
On the left-hand side of (10), the formulation can be rewritten as shown in (11), and the integration is as shown as
(12), where Ae∗ is the area of element e∗ .
LHS =

Ωe∗

⎡
⎢⎢⎢ N1 n+1
⎢⎢⎢
n+1
⎢⎢⎣ N2
N3 n+1

⎤
⎧ ∗ ⎫
⎪
⎥⎥⎥
Q ⎪
⎪
⎪
⎪
⎨ 1∗ ⎪
⎬
⎥⎥⎥
n+1
n+1
n+1
Q
N
N
N
dA
(11)
⎪
⎪
⎥⎥⎦ 1
2
3
2
⎪
⎪
⎪
⎩ Q∗ ⎪
⎭
3

⎡
⎢ 2
A ⎢⎢⎢⎢
⎢⎢ 1
LHS =
12 ⎢⎣ 1

3.2.2. RHS
On the right-hand side of (10), the formulation can be rewritten to
⎡
⎤
⎡
⎛
⎢⎢⎢ N1 n N1 n+1 0 N3 n N1 n+1 N2 n N1 n+1 ⎥⎥⎥
⎢⎢⎢ 0 N2 n N1 n+1
⎜⎜⎜
⎢⎢⎢
⎢⎢⎢
⎜⎜⎜
n
n+1
n
n+1
n
n+1 ⎥
n
n+1
⎥⎥⎥ dA+
0 N3 N2
N2 N2
⎜⎜⎝ Ωe ⎢⎢⎣ N1 N2
⎥
⎢⎣ 0 N2 n N2 n+1
Ωe2 ⎢
1
n
n+1
n
n+1
n
n+1 ⎦
N1 N3
0 N3 N3
N2 N3
0 N2 N3

e∗

N3 n N1 n+1
N3 n N2 n+1
N3 n N3 n+1

1
2
1

1
1
2

⎤⎧ ∗ ⎫
⎥⎥⎥ ⎪
⎪
⎪
⎪
⎪ Q1∗ ⎪
⎬
⎥⎥⎥⎥ ⎨
Q2 ⎪
.
⎪
⎥⎦ ⎪
⎪
⎪
⎭
⎩ Q∗ ⎪
3

N1 n N1 n+1
N1 n N2 n+1
N1 n N3 n+1

(12)

⎤ ⎞
⎥⎥⎥ ⎟⎟⎟
⎥⎥⎥ ⎟⎟⎟
⎥⎥⎦ dA⎟⎟⎠ {Q} ,

(13)

where {Q} = [Qn1 Qn2 Qn3 Qn4 ]T .
Once the mathematical form of (13) is obtained, the solution of {Q∗ } can then be solved using a direct solver from
Equations (12) and (13).

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

731

4. Software implementation
The data structure is designed as in the following box on the left to store the merged element number, the edge
number that the unreﬁned node sits on, the unreﬁned nodal coordinate, the quantities stored on the unreﬁned node,
and the {Q∗ } values solved by the UNR algorithm described in the previous section. Each merged element needs 152
bytes of memory to store information for computation in order to conserve water mass for ﬂow simulations.
The following box on the right depicts the implementation of solving the shallow-water equations with AMR
and mass-conservative unreﬁnement algorithm implementation. The function adpt main is the main driver for AMR
comprising (1) mesh unreﬁnement (adpt unref), (2) sweeps of mesh reﬁnement (adpt ref), and (3) repartition
if needed. At the end of each of these two functions, node renumber and elem renumber are called to renumber nodes and elements. The UNREF elem data structure starts to ﬁll in for each merged element in the function
adpt unref, though ustar is computed later in the function UNRcompute. Note that element merge is not allowed
if this is a partial wet and dry element. If the merged element is split again in the function adpt ref, the data structure for this element needs to deactivate by setting the ﬁeld ielem to -1. The data structure also needs to keep up
with the new element number assigned in elem renumber. If the merged element is sent to another processor, the
UNREF elem data must be packed for the send and unpacked after the receive on the receiving processor. The algorithm for the mass-conservative unreﬁned element described in the previous section is implemented in UNRcompute.
typedef s t r u c t
UNREF elem {
int
ielem ;
/ ∗ ∗ elem number ∗ ∗ /
/ ∗ ∗ e d g e num t h a t t h e
i n t edge num ;
u n r e f i n e d node s i t s on ∗ ∗ /
VECT u n r e f n o d e ; / ∗ ∗ u n r e f i n e d n o d a l
coordinate ∗∗/
/∗∗ 1 + 3 +
double ∗ u n r e f v a l u e ;
ntransport ∗∗/
d o u b l e ∗ ( u s t a r [NDPRFC ] ) ;
/∗∗ Ditto ∗∗/
} UNREF elem ;

/∗ read the input f i l e ∗/
i n i t I /O
/∗ i n i t of computation ∗/
init compute
/ ∗ p a r t i t i o n t h e domain ∗ /
init partition
/ ∗ i n i t t h e c o m p u t a t i o n o f t o t a l mass ∗ /
init volMass
/ ∗ r e n u m b e r n o d e s and e l e m e n t s ∗ /
node renumber
elem renumber
/∗ time loop ∗/
F o r e a c h t i m e − s t e p do
/∗ n o n l i n e a r loop ∗/
Foreach n o n l i n e a r i t e r a t i o n
Solve to o b t a i n Q values
Endfor
/ ∗ c h e c k mass b a l a n c e o f t h e s o l u t i o n ∗ /
compute volMass
/ ∗ mesh a d a p t i o n i n c l u d i n g u n r e f , r e f ,
p a r t i t i o n ∗/
adpt main
/ ∗ UNR c o m p u t a t i o n t o o b t a i n Q∗ v a l u e s ∗ /
UNRcompute
Endfor

5. Experimental Results
Two ADH models, with and without a mass-conservative unreﬁnement algorithm (UNR), were built for investigating mass errors. The results of the volume mass obtained from running applications using these two models are
compared at each simulation time-step. Two 2-D test cases are selected: (1) tidal ﬂow with only water ﬂow and (2) a
closed pond system with water ﬂow and conservative constituent transport.
5.1. Tidal ﬂow test
Figure 2 shows the initial unstructured mesh containing 1843 nodes, each with three degrees of freedom described
in (1), and 3424 triangular elements. Water ﬂowed in at the top and out through the left. The right side of the bottom
boundary is a dead end. The time-step size is 600 seconds throughout the entire simulation for 240 hours. The
convergence tolerance for nonlinear iterations is set to 10−6 , and the maximum number of nonlinear iterations is set
to 10.
We ﬁrst run the application with no reﬁnement. The initial volume mass is 8.560000000000000 × 108 m3 .
The water mass error is almost close to zero at each simulation time-step as expected. The maximum error is

732

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

Figure 2: Tidal ﬂow test domain and its discretized unstructured mesh

5.125999450683594 × 10−6 m3 , which is close to the machine error, i.e., the order of 10−6 out of hundreds million. We then run the same case but with adaption. The reﬁnement tolerance ( ) is 1 m3 /s, and the unreﬁnement
tolerance is 0.001 m3 /s. At each time-step, the model performs adaptive reﬁnement if the error indicator is above 1.0
m3/s and unreﬁnement if the error indicator is below 0.001m3/s. Figures 3(a) and 3(b) show the number of merged
elements and number of total elements at each time-step. They are changed only at the early and late stages of simulation. Figure 4 plots water mass error from the runs with or without the UNR implementation. The mass error
without the UNR algorithm ranges from -48.2196 m3 to 101.2599 m3 , while with the UNR algorithm, it ranges from
−7.1525 × 10−6 m3 to 8.9406 × 10−6 m3 . From the result, the UNR algorithm does sustain the same order of mass
error from the no-adaption case. We can also observe that the more merged the elements, the worse the mass error is
if UNR is not implemented. That also explains why the same mass error is maintained as the simulation approaches
to the end. Note that the setup of this test is an easy physics problem to solve so that the mass error is small even
without mesh adaption.
5.2. Pond test
The pond shown in Fig. 5 contains 1408 nodes, each with three degrees of freedom described in (1) and 2664
triangles initially. No inﬂow and outﬂow occur across the closed system. In addition to the ﬂow simulation, one
chemical constituent is involved in the transport process. The time-step size is 10 seconds for the entire simulation
of 6000 seconds. The convergence tolerance for nonlinear iterations is 10−8 , and the maximum number of nonlinear
iterations is set to 10.
The initial water volume is 5.4298776489890 × 106 m3 . With AMR turned oﬀ, Figures 6(a) and 6(b) display the
water mass error and the chemical mass error vs simulation time. The water mass error ranges from −2.14204192 ×
10−8 m3 to 2.51457095×10−8 m3 , while the chemical mass error ranges from −3.35276136×10−8 m3 to 3.35276126×
10−8 m3 . With mesh adaption turned on, the simulations are run with and without the UNR algorithm. For both runs,
the reﬁnement tolerance is 1 m3 /s, and unreﬁnement tolerance is 0.001 m3 /s. Figure 7 shows the number of total
elements and the number of merged elements. During the early simulation, the total number of elements increases
quickly to the maximum and then gradually reduces to the initial value, while a large amount of merged elements can
be found between 1000 and 3000 seconds of simulation time.

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

(a) Number of merged elements.

733

(b) Number of total elements.
Figure 3: (a) and (b)

Figure 4: Water mass error with and without the UNR algorithm

Figures 8(a) and 8(b) show water mass error and chemical mass error from the run using AMR with and without
the UNR algorithm. The water mass error without the UNR algorithm ranges from -14.0923 m3 to 0.2799 m3 , while
with the UNR algorithm it ranges from −3.4458 × 10−8 m3 to 3.1664 × 10−8 m3 . For the chemical constituent, the
chemical mass error without the UNR algoritm ranges -177.8483 g to 708.6960 g, while it ranges from −4.0978×10−8
g to 2.2383 × 10−8 g with the UNR algorithm. Therefore, the UNR algorithm can reduce the water and chemical mass
error to the same order of magnitude as that obtained by running the case without adaptation. Similar to the previous
test case, the pond case is an easy system to solve because the water mass error is within the range of the machine
truncation error even without mesh adaption. The UNR algorithm is used to maintain the mass conservation for AMR
cases, which cause mass loss or mass gain if just simply deleting a node during unreﬁnement.
Table 1 shows the total wall clock time in seconds vs. the number of processors. The application was run with
1, 2, 4, and 8 processors on the Cray XT4 system. The application only ran with less than 8 processors because of
the limit of the small total number of elements. The result depicts the overhead of using the UNR algorithm is small.

734

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

Figure 5: Domain of the pond and its initial discretized unstructured mesh

(a) Water mass error without adaptation

(b) Chemical mass error without adaptation
Figure 6: (a) and (b)

Some computational operations are executed in the UNR routine and increase the total wall clock time compared with
the case without the UNR algorithm. However, the overhead resulting from the UNR algorithm is small and can be
oﬀset by the reduced number of nonlinear iterations. This is achieved by computing more accurate solutions each
time.
Table 1: Total wall clock time

number of processors
1
2
4
8

Total wall clock time (secs)
with UNR without UNR
1185.4990
1175.0420
677.4126
676.9971
351.0934
352.3615
177.9629
173.1149

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

735

Figure 7: Total number of elements at each time from the pond case

(a) Water mass error with and without the UNR algorithm

(b) Chemical mass error with and without the UNR algorithm

Figure 8: (a) and (b)

6. Conclusions and future works
The UNR algorithm is developed and implemented successfully in the ADH model for two-dimensional shallowwater applications. It is known that there is mass error when merging elements in the common implementation of the
AMR procedure. We demonstrate that the UNR algorithm can reduce water and chemical mass error to the same order
of magnitude as the mass error obtained by running without mesh adaptation. In addition, the overhead incurred in
the UNR algorithm is considered small. The implementation requires a small amount of memory to store and transfer
information on merged elements when running on multiple processors. This research currently is presented for the
backward Euler time scheme. The mass error is actually a good indicator for the setup of mesh resolution, nonlinear

736

Hung V. Nguyen et al. / Procedia Computer Science 9 (2012) 727 – 736

tolerance, and other parameters in order to obtain accurate solutions.
We are planning to implement the UNR algorithm with the higher order time scheme in the ADH model for twodimensional shallow-water ﬂow. Although all the demonstration cases are small-scale problems, the extension to large
scale is without limits and only requires data set generation. The application could also be extended to other modules
available in ADH such as 3-D variably saturated groundwater ﬂow. Mathematical formulation for 3-D applications
will soon be discussed.
References
[1] Cheng, J.R., Cheng, H.P., Yeh, G.T.: A Lagrangian-Eulerian method with adaptively local zooming and peak/valley capturing approach
to solve two-dimensional advection-diﬀusion transport equations. International Journal for Numerical Methods in Engineering 39 (1996)
987–1016
[2] Yeh, G.T., Cheng, J.R., Short, T.E.: An exact peak capturing and essentially oscillation-free scheme to solve advection-dispersion-reactive
transport equations. Water Resources Research 28 (1992) 2937–2951
[3] Yeh, G.T., Cheng, J.R., Cheng, H.P., Sung, C.H.: An adaptive local grid reﬁnement based on the exact peak capturing and oscillation free
scheme to solve transport equations. International Journal of Computational Fluids Dynamics 24 (1995) 293–332
[4] Harten, A.: Eno schemes with subcell resolution. Journal of Computational Physics 83 (1989) 148–184
[5] Yee, H.C., Warming, R.F., Harten, A.: Implicit total variation diminishing (TVD) schemes for steady-state calculations. Journal of Computational Physics 57 (1985) 327–360
[6] Hannoun, N., Alexiades, V.: Issues in adaptive mesh reﬁnement implementation. Electronic Journal of Diﬀerential Equations 15 (2007)
141–151
[7] Chew, L.: Guaranteed-quality triangular meshes. Technical Report TR-89–983, Computer Science Department, Cornell University (1989)
[8] Ruppert, J.: A new and simple algorithm for quality 2-dimensional mesh generation. In: Proc. 4th ACM-SIAM Symp. on Disc. Algorithms.
(1993) 83–92
[9] Weatherill, N., Hassan, O., Marcum, D., Marchant, M.: Grid generation by the Delaunay triangulation. Von Karman Institute for Fluid
Dynamics, 1993-1994 Lecture Series, NASA Ames Research Center (1994)
[10] Demkowicz, L., Oden, J., Rachowicz, W., Hardy, O.: Toward a universal h-p adaptive ﬁnite element strategy, part 1. Constrained approximation and data structures. Computer Methods in Applied Mechanics and Engineering 77 (1989) 79–112
[11] Oden, J., Demkowicz, L., Rachowicz, W., Westermann, T.: Toward a universal h-p adaptive ﬁnite element strategy, part 2. A posterior error
estimation. Computer Methods in Applied Mechanics and Engineering 77 (1989) 113–180
[12] Rachowicz, W., Oden, J., Demkowicz, L.: Toward a universal h-p adaptive ﬁnite element strategy, part 3. Design of h-p meshes. Computer
Methods in Applied Mechanics and Engineering 77 (1989) 181–212
[13] Flaherty, J.E., Paslow, P.J., Shephard, M.S., Vasilakis, J.D.: Adaptive Methods for Partial Diﬀerential Equations. Society for Industrial and
Applied Mathematics, Philadelphia (1989)
[14] Jones, M.T., Plassmann, P.E.: Adaptive reﬁnement of unstructured ﬁnite-element meshes. Finite Elements in Analysis and Design 25 (1997)
41–60
[15] Kirk, B.S., Peterson, J.W., STronger, R.H., Carey, G.F.: libmesh: a c++ library for parallel adaptive mesh reﬁnement/ coasening simulations.
Engineering with Computers 22 (2006) 237–254
[16] Yamoah, G.S.: Conservative temporal and spatial adaptive methods for groundwater ﬂow: a dissertation. PhD thesis, Clarkson University,
Potsdam, NY, USA (2009)
[17] Smith, D.S., Cerco, C.F., Berger, C.R., Savant, G., Cheng, H.P., Cheng, J.R.C., Hung, H.V., Gerald, T.K., Ai, J., Dalyander, P.A., Curtis,
W.R., Davis, J.E.: Two-dimensional ADH-ICM users’ manual. ERD/LAB TR-11-X, Engineer Research and Development Center, U. S.
Army Corps of Engineers (2011)
[18] Berger, R.C.: HIVEL 2D v2.0 users’ manual. Technical report, Waterways Experiment Station, U. S. Army Corps of Engineers (1997)
[19] Berger, R.C.: A ﬁnite element scheme for shock capturing. Technical Report HL-93-12, Waterways Experiment Station, U. S. Army Corps
of Engineers (1993)
[20] Berger, R.C., Tate, J.N., Brown, G.L., Savant, G.: Adaptive hydraulics: Guidelines for solving two-dimensional shallow water problems with
the adaptive hydraulics modeling system. Technical report, Engineer Research and Development Center, U. S. Army Corps of Engineers
(2010)
[21] Berger, R.C., Stockstill, R.L.: Finite element model in high velocity channels. Journal of Hydraulic Engineering (1995) 710–716
[22] Berger, R.C., Tate, J.N., Brown, G.L., Savant, G.: ADaptive hydraulics quick reference: AdH version 4.01. Technical report, Engineer Research and Development Center, U. S. Army Corps of Engineers (2011) http://chl.erdc.usace.army.mil/Media/1/2/2/6/AdH QuickReference4.01.pdf.

