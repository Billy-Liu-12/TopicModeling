Extraction of Ridges-Valleys for
Feature-Preserving
Simpliﬁcation of Polygonal Models
Soo-Kyun Kim1 , Sun-Jeong Kim2 , and Chang-Hun Kim3,
1

Samsung Electronics
nicesk@gmail.com
2
Div. of Info. Eng. and Telecom, Hallym University
sunkim@hallym.ac.kr
3
Dept. of Computer Science and Engineering, Korea University
chkim@korea.ac.kr
Tel.: +82-2-3290-3199; Fax: +82-2-953-0771

Abstract. We propose a new method for simplifying polygonal models
while retaining salient features. We extract ridge and valley features deﬁned by means of curvature derivatives on the model surface. We combine
this extraction with a simpliﬁcation technique so as to construct coarse
models with features preserved. Experimental results have better quality
and smaller geometric error than these of previous methods.

1

Introduction

Over the last decade, many simpliﬁcation algorithms have been developed that
transform a 3D polygonal model into a simpler version, while preserving its
original shape and appearance. Although existing techniques produce plausible
results in many cases, the semantic or high-level meaning of the detail of models
are often disregarded, because perception of these features is subjective. For
example, in the dragon model of Figure 3, regions such as the sharp backbone
can be semantically crucial, although they have which will aﬀect small geometric
errors any attempt to simplify them.
Some approaches [10, 13] allow users to guide the simpliﬁcation of semantic
features; but such methods require users to select a threshold, which cannot be
found intuitively, and users have to discover the threshold value which allow a
reasonable set of semantic features to be found. This tedious process requires a
lot of skill and time.
We believe that it is possible to get a better result by using a new featureextraction technique to ﬁnd semantic features in dense polygonal models. This
technique identiﬁes well-connected ridges and valleys that represent salient features. Then we compute a simplifying criterion based on quadric and feature
quadric error. Finally, a new quadric error metric is generated by combining
these two metrics.
The Corresponding author.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 279–286, 2006.
c Springer-Verlag Berlin Heidelberg 2006

280

2

S.-K. Kim, S.-J. Kim, and C.-H. Kim

Previous Work

Many successful mesh-simpliﬁcation algorithms [14, 16] are based on iterative edge
contraction [4, 5]. They allow vertices to be moved so as to be controlled to preserve the shape or appearance of the original model. Garland [5] and Hoppe [6] use
an extended error metric that combines geometric and surface attributes such as
normals, colors and texture coordinates. This extended method produces a more
accurate and a higher-quality mesh than geometric information alone. Olano et
al.[3] use a texture error measurement algorithm to control simpliﬁcation.
Kho and Garland [10] introduced a user-guided simpliﬁcation technique and
Pojar et al. [13] have presented a method for the user-controlled creation of
multiresolution meshes. But these methods still require the user to select regions
of geometry to be preserved.
Avioding the need for user-guided features, Watanabe and Belyaev [17] introduced a method for the stable detection of salient curvature extrema on surfaces
approximated by dense meshes, which preserves triangles of signiﬁcant curvature
using the Garland-Heckbert method [4]. Hubeli et al. [7] proposed a method to
ﬁnd feature edges in 3D meshes that gives weights to edges based on the diﬀerence between two normals, and then ﬁts polynomials to the lines of intersection
between a parameter plane and a mesh. A drawback of this method is that users
must select a threshold value that cannot be found intuitively. Besides, neither
method eliminates the necessity of extracting feature points from the 3D mesh.
Yoshizawa et al. [19] have extracted feature lines by using local polynomial ﬁtting
of triangulated meshes, which they combined with a quadric-based simpliﬁcation
technique. Kim et al. [8] showed that discrete curvature can be a good criterion
for a simpliﬁcation that preserves the shape of an original model. Walter and
Healey [18] have proposed applying feature-preserving mesh simpliﬁcation to a
multidimensional dataset.

3

Feature Extraction

Our approach to ﬁnding line-type features is based on the method of extracting
ridges and valleys due to Kim et al. [9]. As a foundation for feature extraction, we
will brieﬂy discuss the basics of ﬁnding ridge and valley lines, which are curves
on a surface formed by the set of loci of points at which the principal curvature
has an extremum along its curvature line.
Consider a dense smooth oriented surface. Let κmax and κmin be the maximal
and minimal curvatures respectively (κmax > κmin ), with tmax and tmin as
the corresponding principal directions. The derivatives of κmax and κmin in
directions tmax and tmin are given by the zero-crossing of emax = ∇κmax · tmax
and emin = ∇κmin · tmin . Note that we exclude umbilical points, at which κmax
= κmin . The extrema of principal curvatures along their curvature directions
can be used to deﬁne ridges and valleys. The ridges are given by
∇emax · tmax < 0,

κmax > |κmin |

Extraction of Ridges-Valleys for Feature-Preserving Simpliﬁcation

281

and valleys by
∇emin · tmin > 0,

κmin < −|κmax |.

We aim to detect ridges and valleys from an input polygonal mesh, not a
smooth surface. First we estimate the curvatures and their derivatives directly
from the mesh by employing a local MLS (moving-least-squares) approximation
technique to ﬁt the discrete surface. MLS approximations to surfaces usually
involve two phases: determining the local tangent plane and then computing a
local polynomial over that plane. But our modiﬁed technique uses a substitute
for the tangent plane, with a corresponding reduction in time-complexity. We
quickly estimate curvatures and their derivatives at each vertex using a local
polynomial that moves over the plane. Then, we detect ridge and valley vertices
by checking for zero-crossings of the extrema of principal curvatures at mesh
edges. Finally, the ridge and valley vertices that we have found are connected in
the direction of principal curvature.
We shall omit speciﬁc references to valleys in this paper, since the methods
for detecting ridges and valleys are essentially duals of one another.

4

New Quadric Error Metric

It is hard to measure an accurate feature edge on a highly curved surface using
only a quadric error metric. We therefore introduce a new quadric error metric
(NQEM), which is a combination of a basic error metric with a feature quadric
error metric. It preserves features which are removed by a basic error metric.
4.1

Basic Quadric Error Metric

The quadric error metric uses a quadric form [4] as its distance error metric which
is computed as the weighted sum of squared distances. On each face f of the
original mesh, a quadric Qf (p) is deﬁned, which equal to the squared distance
from a point p ∈ R3 to the plane containing the face f . Each vertex v of the
original mesh is assigned the sum of quadrics on its adjacent faces weighted by
face area:
area(f ) · Qf (p).

Qv (p) =
v∈f

Let us now derive Qf (p) for a given face f = (v1 , v2 , v3 ). The signed distance
of p to the plane containing f is nT p+ d, where the face normal n = (p2 − p1 )×
(p3 − p1 )/ (p2 − p1 ) × (p3 − p1 ) and the scalar d = −nT p1 . These parameters
can be obtained by solving the linear system,
⎛ ⎞
⎛ T ⎞
0
p1 1
n
⎝ pT2 1 ⎠
= ⎝0⎠
d
pT3 1
0
with the additional constraint that n = 1.

282

S.-K. Kim, S.-J. Kim, and C.-H. Kim

Therefore, the squared distance between point p and the plane containing f is
Qf (p) = (nT p + d)2 = pT (nnT )p + 2dnT p + d2 ,
which can be represented as a quadric functional pT Ap + 2bT p + c, where A is
a symmetric 3 × 3 matrix, b is a column vector of size 3, and c is a scalar. Thus,
Qf = (A, b, c) = (nnT , dn, d2 )
which can be stored using 10 coeﬃcients (6+3+1). The advantage of this representation is that the quadric is obtained as a simple linear combination of these
coeﬃcient vectors.
Finally, a quadric for the distance error metric of a new vertex v after an edge
collapse (v1 , v2 ) → v is formulated as the sum of the quadrics on its adjacent
faces, weighted by face area for vertex v1 and v2 :
area(f ) · Qf +

Qv =
v1 ∈f

4.2

area(f ) · Qf .

(1)

v2 ∈f

Feature Edge Error Metric

We extend Lindstrom’s approach [11] to reconstructing the feature lines of an
original model by preserving surface boundaries. A feature error metric is deﬁned
to be the distance between the plane of the associated feature edge ef e and a
point. We deﬁne the normal to the feature edge ef e by averaging the normals
of two neighboring triangles that share that edge. We then construct a plane
me1 which is close to orthogonal to the edge. This plane is spanned by the edge
en1 = (nf1 + nf2 )/2, and me1 = e1 × en1 , where en1 is the computed normal at the
edge e1 (see Fig. 1).
Using these estimates, we deﬁne the feature edge error metric for feature edge
ef e of a vertex as the sum of the squared distances from a point v to the planes
containing the neighboring feature edges:
Qf e =

(me )(me )T .
e∈f e(v)

Fig. 1. Computation of feature edge error metric

(2)

Extraction of Ridges-Valleys for Feature-Preserving Simpliﬁcation

5

283

Simpliﬁcation Algorithm

Our simpliﬁcation algorithm is based on iterative edge collapses using an error
metric which is a combination of the surface error and the feature edge error, based
on geometric correspondence in 3D. The error metric is deﬁned as the sum:
Qv =

Qvn +
vn ∈ngbh(v)

Qf en .

(3)

f en ∈f e(v)

where the geometric error Qvn is the squared distance from a vertex on the plane
v ⊂ R3 containing the incident triangle, and the feature edge error Qf en is the
distance between a point and orthogonal vector calculated from edge ef e . We
start with a polygonal model and perform a simpliﬁcation algorithm. For each
edge collapse (v1 , v2 ) → v¯, the simpliﬁcation algorithm determines the error
of v and then moves v to a new position that minimizes the error. The edge
collapse with the lowest error is chosen and carried out. The algorithm can be
summarized as follows:
Algorithm: The simpliﬁcation algorithm.
Step 1 Extract ridge and valley lines.
Step 2 Compute the new quadrics for the initial polygonal model using Eq. (3).
Step 3 Compute the new vertex position for each edge collapse (v1 , v2 ) → v¯. The error
metric in the portion of the vertex v represents the cost of that collapse.
Step 4 Place all the edge collapses in a heap with the minimum-cost edge at the top.
Step 5 Iteratively remove the edge collapse of least cost from the heap, collapse this
edge, and update the costs of all edge collapses involving v1 and v2 .

6

Implementation and Results

All models were simpliﬁed on a PC with a Pentium IV 3.0Ghz processor and 1GB
of main memory. We simpliﬁed a number of models, and used MeshDev [12, 15]
to measure the surface deviation after simpliﬁcation. The MeshDev software [1]
compares two triangular meshes according to geometrical data or appearance
attributes. It returns visual and numerical results. The method is based on the
geometric error used by Metro tool [2].
Figs. 2 show the mean geometric deviations between the original and the simpliﬁed models. There is the comparison with four graphs representing geometric
errors of simpliﬁed models using with feature edge and without it. It can be
seen from these graphs that the simpliﬁed meshes generated using our algorithm
have smaller mean geometric errors than meshes produced using without feature
error metrics. In Figs. 3 and 4, our method preserves the silhouettes of the back
and teeth more accurately.
Fig. 5 shows various degrees of simpliﬁcation. When simpliﬁed to 700 faces
without feature error quadrics, the model lost one propeller. But our simpliﬁed
result did not lose a propeller until the model was simpliﬁed to 536 faces.

284

S.-K. Kim, S.-J. Kim, and C.-H. Kim

Fig. 2. Mean geometric error measured by MeshDev [1]: (a) Cessna, (b) Dragon and
(c) Dinosaur model. w/:with feature edge error metric, w/o: without feature edge error
metric.

Fig. 3. Simpliﬁed results for the Dragon model. (a) original model (320,000 faces), (b)
red ridges and blue valleys, c) with feature edge error metric, (d) without feature edge
error metric.

Fig. 4. Simpliﬁed results for the Dinosaur model. (a) original model (112,623 faces),
(b) red ridges and blue valleys, c) with feature edge error metric, (d) without feature
edge error metric.

Extraction of Ridges-Valleys for Feature-Preserving Simpliﬁcation

285

Fig. 5. Simpliﬁed results of the Cessna model. (a) original model (13,546 faces), (b)
red ridges and blue valleys, (c) and (d) are each simpliﬁed to 4332, 1217, 702, and 536
faces.

7

Conclusion and Future Work

We have proposed a method of simplifying polyhedral models which extracts
and preserves salient features. Simpliﬁcation is controlled by a feature error
metric combined with a basic error metric. The new error metric overcomes the
drawback of a basic error metric which is inaccurate on highly curved regions,
and preserves sharp or prominent regions despite a drastic simpliﬁcation.
In future work, it would be desirable to measure the error metrics of attributes
for surface simpliﬁcation and provide a more theoretical analysis.
Acknowledgments. This work was supported by grant No.(R01-2005-00010120-0) from Korea Science and Engineering Foundation in Ministry of Science
& Technology, and Three-Dimensional Digital Real Object Duplication System
(RODS) Development Project from the ministry of commerce, industry and energy. This research was also supported by University IT Research Center Project.

References
1. http://meshdev.sourceforge.net/
2. Cignoni P., Rocchini C., and Scopigno R.: Metro: measuring error on simpliﬁcation
surfaces. Computer Graphics Forum, 17(2):167-174, 1998.
3. Cohen J., Olano M., and Manocha D.: Appearance-Preserving Simpliﬁcation. In
Proceedings of SIGGRAPH 98, pp.115-122, 1998.

286

S.-K. Kim, S.-J. Kim, and C.-H. Kim

4. Garland M. and Heckbert P. S.: Surface simpliﬁcation using quadric error metrics.
In Proceedings of SIGGRAPH 97, pp.209-216, 1991.
5. Garland M. and Heckbert P. S.: Simplifying surfaces with color and texture using
quadric error metrics. In Proceedings of IEEE Visualization 98, pp.263-269, 1998.
6. Hoppe H.: New Quadric Metric for simplifying Meshes with Appearance Attributes.
In Proceedings of IEEE Visualization, pp.59-66, 1999.
7. Hubeli A. and Gross M.: Multiresolution Feature Extraction from Unstructured
Meshes. In Proceedings of IEEE Visualization 01, 2001.
8. Kim S.-J., Kim S.-K. and Kim C.-H.: Discrete Diﬀerential Error Metric For Surface
Simpliﬁcation. In Proceedings of Paciﬁc Graphics 2002, pp.276-283, October 2002.
9. Kim S.-K. and Kim C.-H.: Finding Ridges and Valleys in a Discrete Surface Using
a Modiﬁed MLS Approximation. Computer-Aided Design, 37(14):1533-1542, 2005.
10. Kho Y. and Garland M.: User-Guided Simpliﬁcation. In Proceedings of ACM Symposium on Interactive 3D Graphics. 2003.
11. Lindstrom P. and Silva C. T.: A Memory Insensitive Technique for Large Model
Simpliﬁcation. In Proceedings of IEEE Visualization, pp.121-126, 2001.
12. Luebke D., Reddy M., Cohen J., Varshney A., Watson B., and R. Huebner: Level
of Detail for 3D Graphics. Morgan Kaufmann, 2003.
13. Pojar E. and Schmalstieg D.: User-controlled creation of multiresolution meshes.
In Proceedings of ACM Symposium on Interactive 3D Graphics, pp.127-130, 2003.
14. Rossignac J. and Borrel P.: Multi-resolution 3D approximations for rendering complex scenes. Modeling in Computer Graphics: Methods and Application, pp.455465, 1993.
15. Roy, M., Foufou, S., and Truchetet, F. Mesh Comparison using Attribute Deviation
Metric. International Journal of Image and Graphics (IJIG), 4(1):127-140, 2004.
16. Schroeder, W. J., Zarge, J. A, and Lorensen, W. E. Decimation of Triangle Meshes.
Computer Graphics (In Proceedings of SIGGRAPH 92), 26(2):65-70, 1992.
17. Watanabe, K., and Belyaev, A. G. Detection of Salient Curvature Features on
Polygonal Surfaces. Computer Graphics Forum (In Proceedings of Eurographics
01), 20(3):385-392, 2001.
18. Walter, J. D., and Healey, C. G. Attribute Preserving Dataset Simpliﬁcation. In
Proceedings of IEEE Visualization 01, pp.113-120, 2001.
19. Yoshizawa, S., Belyaev, A. G., and Seidel, H.-P. Fast and robust detection of crest
lines on meshes. In Proceedings of ACM Symposium on Solid and Physical Modeling, pp.227-232, 2005.

