Metric 3D Surface Mesh Generation Using
Delaunay Criteria
Tomasz Jurczyk and Barbara Glut
AGH University of Science and Technology, Krak´
ow, Poland
{jurczyk, glut}@agh.edu.pl

Abstract. This paper presents a technique of incorporating anisotropic
metric into the Delaunay triangulation algorithm for unstructured mesh
generation on 3D parametric surfaces. Both empty circumcircle and inner angles criteria of Delaunay retriangulation can be successfully used
with the developed method of coordinate transformation with little adjustments. We investigate the eﬃciency of mesh generation process for
diﬀerent criteria and the quality of obtained meshes.

1

Introduction

The concept of a non-Euclidean metric is commonly used for generation of unstructured anisotropic meshes on 3D surfaces [1, 2, 3, 4]. In typical approach the
metric tensor is used for evaluation of edge length, which is the main geometrical
calculation governing the meshing process.
We consider parametric 3D surfaces which can be treated as two-dimensional
domains with additional distortion introduced by the parameterization. The triangulation process is performed entirely in this parametric space basing on the
Delaunay incremental insertion algorithm[1] with elements evaluation and nodes
placement governed by metric. The metric description is stored in a control space
(covering the whole domain), which can have various structure (e.g. background
mesh or quadtree grid) depending on the source of the sizing data[6].
The method of mesh generation is based on Delaunay triangulation which can
be obtained using criteria of empty circumcircle or inner angles [1]. In this paper
we present a technique of adaptation of these criteria for generation of meshes
with anisotropic metric using coordinate transformation. Utilization of both criteria is investigated with respect to the inﬂuence on triangulation eﬃciency and
quality of obtained meshes.

2

Metric Deﬁnition

The metric is usually deﬁned as a metric tensor M = RΛR−1 , where R is the
eigenvector matrix (responsible for deﬁning main directions) and Λ = diag(λi )
is the eigenvalue matrix, deﬁning the required length of element edges along the
main directions, and M is a symmetric positive-deﬁnite matrix.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 302–309, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Metric 3D Surface Mesh Generation Using Delaunay Criteria

303

Another method which was used in this work, is to introduce the non-Euclidean
metric through an appropriate transformation of the coordinates of points within
the domain, using the transformation matrix Mt :
Pi = Mt (Pi )Pi .

(1)

Similar approach was presented in [5] where authors use transformation of coordinates in a diﬀerent algorithm of constrained Delaunay triangulation.
The relation between the metric tensor and the transformation matrix is
given by formula
(2)
M(P ) = Mt (P )MTt (P ) .
Equation (2) deﬁnes a family of matrices, but the symmetric one is the most
desirable, being much better ﬁtted for metric-related operations[7]. For two(sym)
dimensional parametric space such symmetric matrix Mt
can be calculated
as:
(sym)

Mt

=

m11 m12
=
m12 m22

2
1
1
2
h1 cos α + h2 sin α
1
1
( h1 − h2 ) sin α cos α

( h11 − h12 ) sin α cos α
2
1
1
2
h1 sin α + h2 cos α

, (3)

where α denotes the direction of element stretching, h1 and h2 are the required
lengths of element along the base directions.
During meshing process all geometrical formulas are calculated in metric space
(i.e. basing on points coordinates transformed using the transformation matrix).
The optimal ﬁnal mesh should have all edges of unit length in local metric space
(so called unit mesh[3]).
In order to account for distortion introduced by an arbitrary parameterization
of the given surface patch p : (u, v) → (x, y, z), we use the matrix G of the ﬁrst
fundamental form:
G=

g11 g12
=
g12 g22

pu , pu
pu , pv

pu , pv
pv , pv

.

(4)

However, instead of using it directly, the symmetric parameterization matrix
MP , where MP MTP = G, has to be calculated. Then, the ﬁnal matrix used for
transformation of coordinates is calculated as a product of sizing and parameterization matrices:
(sym)
MP .
(5)
Mt = Mt

3

Metric in Meshing Algorithms

Introducing the metric into the meshing process requires small changes in all
procedures which use geometrical properties. In most cases the only requirement
is to calculate the local transformation matrix and to translate the coordinates
of vertices used in the geometrical equations. The algorithms using the mesh
topology information only may remain unchanged.
The coordinate transformation technique depends on the metric to be locally
constant (or close to) in the neighborhood from which the points are being

304

T. Jurczyk and B. Glut

taken for calculation in any given meshing step. Usually this condition of small
local variation is fulﬁlled. However, there are situations which can pose problems, mostly at the beginning of the meshing process (when the single mesh
transformations cover large areas) or when the control space has (incorrectly)
large metric variations. In order to avoid errors, an additional check for metric
invariance has to be performed in some algorithms.
The workﬂow of used procedure of 3D surface mesh generation:
1. For discretization of contours of surface patches, an iterative placement of
nodes for creating edges of unitary length in local metric is used. Procedure
runs in parametric space of selected patch, and obtained discretization may
be further reﬁned according to control space deﬁned in other patches incident
to the given contour.
2. Triangulation of boundary vertices is created separately for each surface
patch. Boundary nodes are being inserted one by one with local retriangulation of the mesh in order to maintain the Delaunay property. The retriangulation procedure adjusts the connectivity in the neighborhood of the
node inserted into the mesh in order to reinstate the property of Delaunay
triangulation. Both empty circumcircle and inner angles criteria[1] can be
successfully adapted to produce proper results with metric introduced via
the technique of coordinate transformation. Finally, the missing edges are
recovered and obsolete triangles are removed.
3. The mesh is reﬁned according to the prescribed sizing map by introducing
new nodes. The selection of triangles to improve is performed basing on theirs
metric quality coeﬃcient. The new node is being inserted in the middle of
the circumcircle and local retriangulation is performed.
4. Several iterations of mesh smoothing procedures are used (e.g. Laplacian
smoothing).
5. If required, the triangular mesh can be further converted to quadrilateral, using one of the implemented algorithms of advancing front triangle merging[8],
adapted for the developed technique of coordinate transformation.
3.1

Empty Circumcircle Criterion

The introduction of new node into the existing mesh can be accomplished using
the empty circumcircle criterion, which requires locating and removing of all triangles having this node in theirs circumcircle and adding new triangles incident
to the new node. Procedure starts with locating the triangle containing the new
node. Adjacent triangles are iteratively checked for containing the new node in
theirs circumcircles (Fig. 1). Selected elements are removed, and the vertices of
the created empty cavity are being connected with the new node.
For each inserted node local metric is retrieved from control space once. The
coordinates of new node and vertices of triangles being checked for empty circumcircle test have to be transformed into metric space (on average 7 triangles
are checked and 16 vertices are transformed). If this procedure is used during
the phase of insertion of inner nodes, the quality of all new triangles (on average

Metric 3D Surface Mesh Generation Using Delaunay Criteria

(a) insertion of new node

305

(b) metric space

Fig. 1. Insertion of new node using empty circumcircle criterion

6) has to be recalculated which requires additional calls to control space and
transformation of vertices coordinates (in total about 24 calls and 18 transformations).
3.2

Inner Angles Criterion

Procedure starts with locating the triangle containing the new node. This triangle is then substituted by three new triangles (Fig. 2). If the node is located at
some edge, two triangles have to be removed and four new elements are inserted
instead. Then the edges in the adjacent elements are swapped according to inner
angles criterion. The swapping procedure starts with checking the new triangles
and theirs neighbors for fulﬁllment of the criterion, then in case of swap further
pairs of triangles have to be checked iteratively.
For each inserted node local metric is retrieved from control space once. The
coordinates of new node and vertices of each pair of adjacent triangles being
checked for inner angles test have to be transformed into metric space (on average 13–16 pairs of triangles are checked and 2–4 edges are swapped which
requires about 9–12 transformation of coordinates). If this procedure is used
during the phase of insertion of inner nodes, the quality of all modiﬁed triangles
(on average 6) has to be recalculated which requires additional calls to control
space and transformation of vertices coordinates (in total about 24 calls and 18
transformations).
3.3

Insertion of Inner Nodes

This phase starts with reorganizing the triangles into heap-list which requires
calculation of quality (proper size and shape) of all elements. Then, in each step

(a) insertion of new node

(b) metric space

Fig. 2. Insertion of new node using inner angles criterion

306

T. Jurczyk and B. Glut

of the main loop the worst triangle is taken from the heap and an additional node
is inserted in its circumcenter. The mesh is locally retriangulated and quality
(and position in the heap) of aﬀected elements is updated.
The local metric is retrieved from the control space for barycenter of the
triangle selected for reﬁnement. This metric is used for transformation of triangle
vertices for calculation of new node and for reverse-transformation of this node
before insertion into mesh.
Introduction of new nodes in circumcenter of triangle allows to obtain good
quality of elements, but may be unacceptable in some cases (e.g. if the new node
lies too close to boundary or outside of it). Using metric approach, additional
conditions have to be checked. First, the new node can’t be too close to one
of vertices of the containing triangle. Then it must be checked whether the
insertion of the node and retriangulation according to the metric deﬁned in this
node would at all aﬀect the improved triangle. In order to reduce number of
canceled insertions, at the beginning phase of this procedure inner nodes are
inserted in the middle of the longest edge of triangle.
The quality of triangle is calculated basing on the the area (in metric space) of
the circle circumscribed on the given triangle, which controls both size and shape
of created triangles. All vertices of the evaluated triangle have to be transformed
to the metric space. The transformation matrix is calculated as intersection[7] of
metric matrices retrieved from the control space for each vertex of the triangle
and for its barycenter.

4

Examples

Several meshes with diﬀerent size and structure are presented. Meshes AN0
(Fig. 3(a)) and AN1 were generated on a plane with rectangular boundary
i
: (u, v) → (α, h1 , h2 ):
u ∈ [0, 2], v ∈ [0, 1] and metric deﬁned by functions fm
0
fm
= (π/6, 0.01, 0.11 − 0.05u)
1
fm
= (π/6, 0.01, 0.0101 − 0.005u)

(6)

Meshes SUR0 (Fig. 3(b)), SUR1 and SUR2 were created on surface patch
p : (u, v) → (u, v, 2.5e−0.1(u

2

+v 2 )) sin(2u) cos(2v)

)

(7)

where u, v ∈ [−6, 6]. The metric was automatically recognized from the curvature
of the surface and boundary[6] (maximum anisotropy ratio dmax = 10, lengths
of elements are proportional to radii of curvature with factors respectively c0 =
0.1, c1 = 0.025) and was stored in the control space with structure of regular
grid. Mesh SUR2 was created as isotropic (dmax = 1) with factor c2 = 0.1.
4.1

Results

Table 1 presents metric utilization statistics for all tested meshes. As can be
seen in columns N c , N pm and N mp the average number of control space calls

Metric 3D Surface Mesh Generation Using Delaunay Criteria

(a) planar mesh AN0

307

(b) surface mesh SUR0

Fig. 3. Anisotropic meshes
Table 1. Utilization of control space and metric during mesh generation using (c)
– empty circumcircle and (a) – inner angles criteria. NP is number of points in the
ﬁnal mesh, Nc – number of calls to control space, Npm – number of transformation of
coordinates to metric space, Nmp – reverse transformations. N c , N pm and N mp are
additionally divided by number of points.

AN0 (c)
(a)
AN1 (c)
(a)
SUR0 (c)
(a)
SUR1 (c)
(a)
SUR2 (c)
(a)

NP
5069
5139
104447
105013
23854
23707
250031
249628
53404
53265

Nc
115321
117899
2475058
2543917
580469
599628
5773210
5874957
1225174
1244957

Npm
217728
183426
4661639
3934650
1136499
974884
11052111
9324457
2350930
1982100

Nmp
4099
4174
81994
82994
20674
21039
214788
215831
45785
45580

Nc
22.8
22.9
23.7
24.2
24.3
25.3
23.1
23.5
22.9
23.4

N pm N mp
42.95 0.8
35.69 0.8
44.63 0.8
37.47 0.8
47.64 0.9
41.12 0.9
44.20 0.9
37.35 0.9
44.02 0.9
37.21 0.9

and metric transformations per point of the ﬁnal mesh is fairly constant for all
meshes.
Using empty circumcenter criterion tends to require lower number of control
space calls, while for inner angles there are noticeably less transformation of
coordinates. However, it must be noted that the operation of control space call
for local metric retrieving is much more costly, especially for structures like
background mesh.
Meshing times (2.6GHz Intel P4) for created meshes are presented in Table 2.
The triangulation speed is close to linear for larger meshes and the triangulation
process with empty circumcircle criterion is consistently faster, although the
diﬀerence is not that large.
Table 3 presents quality evaluation of generated meshes (with two iterations
of Laplacian smoothing in metric space). All presented coeﬃcients (μEL , μT and
μα ) should be equal to 1 for ideal mesh, μT evaluates only size and μα only shape
of created triangles.
Both criteria of retriangulation allow to produce meshes with comparably
good quality. In case of example SUR0 the metric variation supposedly is too
large in comparison with the prescribed sizes of element, which results in creation
smaller elements than expected.

308

T. Jurczyk and B. Glut

Table 2. Meshing time (NT – number of triangles in ﬁnal mesh, tb – time of triangulation of boundary nodes, ti – insertion of inner nodes, ts – two iterations of Laplacian
smoothing, τt – speed of triangulation (boundary and inner nodes) and τts – speed of
triangulation with smoothing)

AN0 (c)
(a)
AN1 (c)
(a)
SUR0 (c)
(a)
SUR1 (c)
(a)
SUR2 (c)
(a)

NT [103 ]
11.6
11.7
237.6
238.9
53.5
53.6
589.6
589.8
126.6
126.9

tb [s]
0.02
0.02
5.64
6.09
1.49
1.49
0.95
0.97
1.49
1.49

ti [s]
0.17
0.19
4.81
4.91
1.81
1.91
20.27
20.52
3.47
3.56

ts [s] τt [103 /s] τts [103 /s]
0.03 61.5
52.8
0.05 57.7
46.9
0.89 22.7
20.9
0.89 21.7
20.1
0.39 16.2
14.5
0.39 15.8
14.2
4.45 27.8
23.0
4.42 27.5
22.8
0.91 25.6
21.6
0.89 25.1
21.4

Table 3. Mesh quality (μEL , σEL – average length and standard deviation of edges
length in metric space, NEL [%] – number of edges shorter than 0.5 or longer than 2, μT
and σT – triangle size quality (ratio of optimal area to current one, in metric space),
μα and σα – alpha criterion[9] of triangle shape quality in metric space)

AN0 (c)
(a)
AN1 (c)
(a)
SUR0 (c)
(a)
SUR1 (c)
(a)
SUR2 (c)
(a)

5

μEL
1.079
1.072
1.042
1.039
0.802
0.806
0.989
0.990
0.999
1.000

σEL NEL [%]
0.165 0.03
0.167 0.03
0.175 0.14
0.175 0.14
0.255 16.66
0.255 16.39
0.195 1.69
0.195 1.68
0.173 0.22
0.173 0.22

μT
0.912
0.927
0.969
0.974
1.577
1.568
1.045
1.046
0.982
0.979

σT
0.244
0.252
0.325
0.326
1.275
2.151
0.503
0.659
0.292
0.293

μα
0.961
0.959
0.952
0.952
0.913
0.913
0.953
0.952
0.957
0.958

σα
0.042
0.042
0.054
0.054
0.098
0.101
0.054
0.055
0.042
0.042

Conclusion

In this paper there were described details of the developed technique of metric
introduction into meshing process via coordinate transformation. The presented
examples show potential of this method to generate unstructured, possibly anisotropic meshes on 3D parametric surfaces. The running time is close to linear
which allows to create meshes with very large number of elements. The quality of
meshes in most cases is good with respect to both size and shape of elements, although results for the mesh SUR0 suggest that additional processing of control
space would be advisable to adjust its variation to prescribed size of elements.
Acknowledgments. The partial support of the Polish Ministry of Scientiﬁc Research and Information Technology (MNII) Grant No. 3T11F00828 is gratefully
acknowledged.

Metric 3D Surface Mesh Generation Using Delaunay Criteria

309

References
1. George, P.L., Borouchaki, H.: Delaunay Triangulation and Meshing. Applications
to Finite Elements. Herm`es, Paris (1998)
2. Dolejsi, V.: Anisotropic mesh adaptation for ﬁnite volume and element methods on
triangular meshes. Comput. Visual Sci. 1 (1998) 165–178
3. Frey, P.: Anisotropic metrics for mesh adaptation. In: Proc. ECCOMAS 2004,
Jyvaskyla, Finland (24–28 July 2004)
4. Bottasso, C.: Anisotropic mesh adaptation by metric-driven optimization. Int. J.
Numer. Meth. Engng. 60 (2004) 597–639
5. Vigo, M., Pla, N.: Computing directional constrained Delaunay triangulations. Computers & Graphics 24 (2000) 181-190
6. Glut, B., Jurczyk, T.: Deﬁnition and interpolation of discrete metric for mesh
generation on 3d surfaces. Computer Science, Annual of University of Mining and
Metallurgy (2005) in press.
7. Jurczyk, T., Glut, B.: Metric 3D surface mesh generation using coordinate transformation method. In: Proc. of CMS’05 Conference on Computer Methods and
Systems. Volume 1., Krak´
ow, Poland (2005) 395–405
8. Jurczyk, T., Glut, B.: Generation of good quality quadrilateral elements for anisotropic surface meshes. In: Proc. of ADMOS2003 Conference on Adaptive Modeling
and Simulation, Goeteborg, Sweden (2003)
9. Lo, S., Lee, C.: Generation of gradation meshes by the background grid technique.
Computers & Structures 50(1) (1994) 21–32

