Agent-Based Mobile Robots Navigation
Framework
Wojciech Turek, Robert Marcjan, and Krzysztof Cetnarowicz
Institute of Computer Science
AGH University of Science and Technology
al. Mickiewicza 30, Krakow, Poland
wojciech.turek@agh.edu.pl, marcjan@agh.edu.pl, cetnar@agh.edu.pl

Abstract. The problem of mobile robot navigation has received a noticeable attention over last few years. Several diﬀerent approaches were
presented, each having major limitations. In this paper a new, agentbased solution the problem of mobile robots navigation is proposed. It is
based on a novel representation of the environment, that divides it into
a number of distinct regions, and assigns autonomous software Space
Agents to supervise it. Space Agents create a graph, that represents a
high-level structure of the entire environment. The graph is used as a
virtual space, that robot controlling agents work in. The most important
features of the approach are: path planning for multiple robots based on
most recent data available in the system, automated collision avoidance,
simple localization of a ”lost robot” and unrestricted scalability.

1

Introduction

The most crucial features, that a mobile robot must possess, are ability of reaching desired position and determining current location in the environment. Moreover, the robot must be able to adopt to changes that take place in the environment, and to cooperate with other robots of the same or diﬀerent type to avoid
collisions or deadlocks. A number of approaches to this type of problems have
been described, but each has some signiﬁcant drawbacks or limitations.
Single robot navigation problems are known in literature as the ”Simultaneous Localization and Map Building” (SLAM [1] ) problem and the ”Kidnapped
Robot Problem”. In the Kidnapped Robot Problem a robot ”wakes up” in previously analysed environment; the task is to quickly estimate robot’s position. In
the SLAM problem a mobile robot is situated in an unknown environment, and is
supposed to build a map of the environment basing only on own sensors readings.
The map is simultaneously used for position estimation and path planning. Most
popular approach to the SLAM problem[2][5][4] is based on determining position
of a number of distinguishable landmarks (artiﬁcial or natural) and assumption
of Gaussian distributions of observed landmarks locations errors - Kalman ﬁlters
[3] are used. These solutions allow single robot to determine own location and
This work was partially supported by the grant MEiN Nr 3 T11C 038 29.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 775–782, 2006.
c Springer-Verlag Berlin Heidelberg 2006

776

W. Turek, R. Marcjan, and K. Cetnarowicz

to maneuver in a limited and usually invariable environment. Dynamic environments problem has also received a noticeable attention - Janglov [7] proposed a
neural networks approach, in [8] Hahnel et al. presented a method of building a
dynamic map with probabilistic model of obstacle presence certainty.
These solutions show, that abilities of a single robot are strongly restricted
- its computational power, memory or eﬀectors abilities may be insuﬃcient, it
cannot observe dynamic changes of whole large environment. Most of these problems can be theoretically overcame by a group of cooperating robots - memory
and computations can be distributed, a few robots can perform one task. However, some new problems with navigation appear, mostly concerning movement
coordination, group path planning and collision avoidance.
Several approaches were proposed. In [6] Arras et al. present a solution, that
uses a graph for navigation in EXPO exhibition centre. The graph must be
created manually, therefore the solution is not universal. A reactive collision
avoidance method, where robots detect collision situation and modify their velocity to avoid it, is described in [9]. The method does not solve the problems of
localization and multirobots path planning.
Lack of universal solutions to the problems of multirobot path planning and
localization in dynamic environments makes it diﬃcult to perform research into
advanced applications of multorobots systems. Tasks like automated guarding,
cleaning, transportation or manufacturing require reliable solutions of robots
mobility problems.
Most research into navigation problems situates an autonomous robot in an
unknown, hostile environment, and makes the robot responsible for gathering
and processing data, that describe the terrain. The Framework proposed in this
paper is based on a diﬀerent assumption: fragments of environment, as well as
robots, are given some consciousness and autonomy - they are considered to
be software agents [10]. This approach makes it possible to apply global and
local path planning algorithms that operate on a distributed and up-to-date
knowledge about the environment. The solution supports robots with ability
of reaching desired position at desired time, using optimal path and without
causing collisions with other robots or obstacles.

2

Navigation System Architecture

The physical space, that robots operate in, is divided into relatively small rooms.
Each room is supervised by a single Space Agent (SA), that is responsible for
gathering and processing information about assigned terrain. Every Space Agent
is supposed to know its direct SA neighbours - these connections create SA graph,
which represents a high-level structure of the entire environment. The SA graph
is also considered a virtual space, that mobile Robot Agents work in.
A Robot Agent (RA) is closely associated with a single physical robot. It
controls robot’s movements, receives sensor readings, and can perform typespeciﬁc operations. At any moment every RA is registered in one SA, depending
on its robots location. When it needs to relocate, it informs the SA about desired

Agent-Based Mobile Robots Navigation Framework

777

destination, and receives precise movement information. Simultaneously it sends
to SA robot’s sensors readings - this can be the only source of environment
describing data. Due to autonomy and ability of communication, SAs are able
to plan optimal, non-colliding paths for multiply robots, basing on most recent
data available in the system.
This abstract architecture can be implemented in many diﬀerent ways; two of
them are described below.
2.1

Virtual Agents Scenario

More eﬃcient and more demanding approach places software agents in a space,
that is physically separated from the robots. The RAs and SAs are performing
computations on computers in a network and control robots using radio connections. A communication infrastructure must cover entire environment, but
processing can be faster and more complex when performed remotely. The architecture is presented in Figure 1.
There are many practical applications of this scenario, mostly concerning robots systems, that perform tasks like cleaning or guarding in the same place for
a long time. An additional infrastructure is required, but also additional advantages appear. Devices like electric automated doors or elevators can be easily
integrated with a corresponding SAs in order to increase robots functionalities.

Fig. 1. Comparison of two implementations of the Navigation System: in an environment with communication infrastructure and external agent framework (on the left),
and in an unknown environment with fully autonomous multirobot system (on the
right)

778

W. Turek, R. Marcjan, and K. Cetnarowicz

Moreover, the situation does not restrict a size of the environment - neither
memory nor computational power, that is required to navigate in a huge space,
are limited by robots capabilities.
2.2

Hardware Agents Scenario

Described Navigation Framework can also be successfully implemented, when
no external infrastructure is available in the environment. There are some additional requirements though. A set of robots is required to build a physical
graph of Space Agents. The number and location of those robots is determined
by communication ranges and environment properties - the SA graph must be
consistent, every pair of neighbour SAs should establish a direct connection.
Unlike the previous scenario, the robots must oﬀer a signiﬁcant computational
performance, because all data storing and processing must be performed them.
An example is shown in Figure 1.

3

Terrain Description Grid

Each Space Agent is responsible for a given part of the environment. It must gather
data that describes the terrain from robots, that are passing through, and support
these robots with information, that will help them to move fast and safely. The
problem, that must be solved by an SA is very similar to a typical SLAM, except
multiple sources of data are available. The solution presented below is a novel approach that can be used with any set of sensors, that can support suﬃcient amount
of information. The assumption is made, that every robot has almost the same
sensor readings, when situated in almost the same location.
A Space Agent applies a kind of graph, called a description grid, on the
assigned space, as shown in Figure 2. Each node of the grid has unique location,
and is connected with up to eight neighbours. Distance between nodes should
be greater than a diameter of the smallest robot’s bounding circle, so that two
robots situated in adjacent nodes would not collide.

Fig. 2. Example of a terrain description grid, applied on a fragment of environment.
Paths planned for two robots are not considered colliding.

Agent-Based Mobile Robots Navigation Framework

779

Nodes are used for storing a vector of values returned by sensors of a robot,
when situated in the node. Depending on types of sensors used, size of the vector
will vary. General rules concerning selection of sensors are:
– two description nodes, that have very similar sensor readings vector should
never be adjacent
– perfect (complete) set of sensors ensures that there are no two nodes in the
environment that have the same sensor readings vector
– size of the vector should not be large, therefore sensor readings should be
possibly uncorrelated
– a method for determining which nodes are physically accessible is required
(e.g. directional range measurement).
The paradox of the SLAM problem is, that a map is built from robot’s sensors readings gathered at a particular location, which are simultaneously used
for determining this location. This issue does not cause problems as long as the
environment (or at least landmarks set) remains static. If dynamic changes can
occur, a robot may report a sensor reading vector, that is signiﬁcantly diﬀerent
than the previously stored one. The SA must then decide, whether the environment has changed rapidly or the RA estimated wrong location of the robot.
Each RA knows an approximate position of controlled robot. The approximation accuracy is deﬁned by a certainty factor CR ∈ [0, 1], which is reduced, as
robot moves. When the robot reaches a node, its position is conﬁrmed with SA,
using stored sensor readings vectors, and robot’s CR is increased. Each sensor
readings vector value that is stored at a node is also connected with a certainty
factor CN ∈ [0, 1]. If the readings vector is unknown: CN = 0, just after a robot
reports current vector: CN = 1. The value is reduced as time passes, but once
reported, never goes below 0.5.
If a conﬂict between stored and sensed readings occurs, the value with a higher
certainty factor is considered real. When a robot ”is right”, node’s data is updated, when all robots’s readings are signiﬁcantly diﬀerent from the stored ones,
so that its position cannot be conﬁrmed, CR is not increased. When CR reaches
0, the robot is considered ”lost” and kidnapped robot procedure is started.
There are two functions deﬁned for each value in the sensor readings vector: inverted interpolation and propagation. The inverted interpolation function
deﬁnes a method to calculate accurate robot’s position basing on its sensor readings. If the description grid is dense enough, linear function can be used. The
propagation function is used to update data in the nodes adjacent with the one
the robot is located in - it is performed with reduced CR value. The function
depends on sensor type, and usually can be deﬁned only for selected directions
of adjacency.

4

Features of the Framework

The framework described in this paper solves several problems concerning mobile
robots navigation:

780

W. Turek, R. Marcjan, and K. Cetnarowicz

Kidnapped robot problem. If a new RA is introduced to the system, it
does not know its robot’s location - the robot is considered ”lost”. Every SA
in the system is then requested to ﬁnd possible location, using robot’s sensor
readings vector. Provided, that the area, the robot is situated in, has already
been covered by a SA’s grid, location of the robot is estimated and robot’s CR
is set to a value just above 0. If the location estimation is correct, the CR factor
will rise, otherwise the robot will soon become ”lost” again.
SLAM problem. Starting with one RA with a robot at (0, 0) and CR = 1, and
one SA, the map will be incrementally built, without any additional methods
needed. The only requirement is, that SA should be able to grow its grid, and to
divide if necessary. New robots can be added to the system, with a ”lost” status,
as soon as a part of the environment is covered by SA’s grid.
Multiply robots navigation with collision avoidance. Navigation algorithm is divided into two stages:
– Global route planning - current SA searches the SA graph to ﬁnd every
possible route to a desired location. Each route is then split and analysed the ﬁrst, that meets given time requirements is selected.
– Local path ﬁnding - each SA in a particular route must plan robot’s movements, so that it reaches the destination or moves to another SA. The SA
receives initial location of the robot, time of reaching it, robot’s size and
maximum velocity, and desired destination coordinates. It is supposed to
return guaranteed time of reaching the destination. If a SA has a complete
information about assigned terrain, the local path ﬁnding can be considered
a simple graph searching problem with constraints. Two types of constraints
are possible: constant, when a node is physically inaccessible, and temporary, which occurs when a previously created path uses a particular node.
Restricted nodes can be either omitted, or a robot may wait for node to
become free.
After choosing the best route, a movement cycle begins:
– RA receives information about next location that should be reached by a
robot
– robot moves, basing on previous location and some method of estimating
covered distance (e.g. odometers readings, time and velocity calculations)
– sensor readings are sent to the SA in order to conﬁrm current location and
get next target coordinates
– SA veriﬁes robots position and simultaneously updates information about
the environment
Scalability. The environment description data is fully distributed, therefore
scalability of the system is hardly restricted. If SA’s memory or computational
abilities turn out to be insuﬃcient, it can always be divided, and each SA can
work on a diﬀerent computer in a network. The only restriction could be SAs

Agent-Based Mobile Robots Navigation Framework

781

graph searching algorithm, but in most typical applications the number of SAs
will not be greater than a hundred, which is few.
Up-to-date knowledge availability. One of the most important advantages
of the approach is, that all navigation is based on complete and most recent
knowledge, that is available in the system. Therefore planned paths are always
most optimal.

5

Example of Implementation

First implementation of the Navigation Framework was tested with RoBOSS
Simulation System [11]. A precise model of small soccer-playing robot is used;
equipped with eight range ﬁnding sensors, an odometer and a compass. Nodes of
the grid store readings from rangeﬁnders; the data is used both for localization
and for determining, which nodes are physically accessible. Manual methods for
SA division are used; algorithms of path ﬁnding and lost robot localization are
implemented.
The propagation function, started in a particular node, assigns an estimated
values in nodes along rangeﬁngers directions, with CN reduced by 10% each
node. The inverted interpolation function uses readings from nine nodes (3x3
square) to calculate eight lines, the robot should be situated on. Intersection
points should be almost identical, indicating robot’s accurate location; sum of
distances between them is used for selecting best location of a ”lost” robot.
Figure 3 shows a description grid and a SA graph generated for a simple
maze. Three robots were able to reach randomly assigned locations without any
problems, ”lost” robot was also localized properly. Tests showed, that used set
of sensors causes problems with accuracy, because even a very small error of
compass readings causes large changes in values returned by rangeﬁnders.

Fig. 3. Example of a simple environment with three FIRA MiroSot robots. A description grid, shown in the middle, is divided among four Space Agents.

782

6

W. Turek, R. Marcjan, and K. Cetnarowicz

Conclusions and Further Work

The Navigation Framework proposed in this paper solves several problems concerning multirobot navigation. The idea of Space Agents graph distributes the
data that describes the environment, solving scalability problems. Path planning
algorithm based on up-to-date information, guarantees optimal and collision-free
solutions.
The example showed, that use of range ﬁnding sensors only, may be insuﬃcient
in some cases, therefore further research into types of sensors is required. Tests
with real robots are also planned to verify the approach.

References
1. Clark S., Dissanayake G., Newman P., Durrant-Whyte H.F.: A Solution to the
Simultaneous Localization and Map Building (SLAM) Problem IEEE Transaction.
on Robotics and Automation, vol. 17, no 3, 229-241, 2001
2. Guivant J., Nebot E. Optimization of the simultaneous localization and map building algorithm for real time implementation. IEEE Transaction on Robotics and
Automation, vol. 17, no 3, 242-256, 2001
3. Glielmo L., Setola R., Vasca F.: An interlaced extended Kalman Filter. IEEE
Transaction on Automatic Control, vol. 44, no 8, 1999.
4. Montemerlo M., Thrun S., Koller D., Wegbreit B.: FastSLAM: A Factored Solution
to the Simultaneous Localization and Mapping Problem. In Proc. of the AAAI
National Conference on Artiﬁcial Intelligence, Edmonton, Canada, 2002.
5. Se S., Lowe D., Little J.: Local and Global Localization for Mobile Robots using Visual Landmarks. In Proc. of the IEEE/RSJ International Conference on Intelligent
Robots and Systems, Maui, Hawaii, USA, 2001.
6. Arras K. O., Philippsen R., de Battista M., Schilt M., Siegwart R.: A navigation
framework for multiple mobile robots and its application at the Expo.02 exhibition.
In Proc. of the IEEE/RSJ IROS, Lausanne, Switzerland, 2002.
7. Janglov D. Neural Networks in Mobile Robot Motion.: International Journal of
Advanced Robotic Systems, vol. 1, no 1, 2004.
8. Hahnel D., Triebel R., Burgard W., Thrun S.: Map building with mobile robots in
dynamic environments. In Proc. of the IEEE International Conference on Robotics
and Automation, 1557-1563, 2003
9. Madhava Krishna K., Hexmoor H.: Reactive Collision Avoidance of Multiple Moving Agents by Cooperation and Conﬂict Propagation. In Proc. of the IEEE International Conference on Robotics and Automation, NewOrleans, 2004
10. Cetnarowicz K.: M-Agent Architecture Based Method of Development of Multiagent Systems In Proc. of 8th Joint EPS-APS International Conference on Physics
Computing, Krakow, Poland, 591–596, 1996
11. Turek W., Czyrnek D., Marcjan R., Cetnarowicz K.: RoBOSS - an universal tool
for robots modelling and simulation. In Proc. of Computer Methods and Systems,
Krakow, Poland, 347–354, 2005

