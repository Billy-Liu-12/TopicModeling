A General Data Grid: Framework and Implementation
Wu Zhang, Jian Mei, and Jiang Xie
Department of Computer Science and Technology, Shanghai University,
Shanghai, 200072, China
zhang@mail.shu.edu.cn, meijian_2003@yahoo.com.cn

Abstract. Today, data grids have become an important emerging platform for
managing and processing a very large amount of data distributed across
multiple grid nodes and stored in relational databases. However, there are still
obstacles for potential grid users to be involved into the trend and the data grid
application development is far from the data grids. While the traditional
established data grid architectures are not particularly suitable for the some grid
service, such as data replica services, user authentication services, and the
Optimal Path selection services. Our project aims to exploit a novel architecture
named General Data Grid, which integrates the metadata services, data replica
services, java message services, and the Optimal Path selection on Data Grid
environment. At the end of this paper, we describe the key implement on the
GDGrid and present a simple example application concerning finding the
optimal route. Our experiment of GDGrid shows the algorithm of the route
selection (Heart-Beat algorithm) is effectively, improve the performance
greatly, and afford fault-tolerance management to the great extent.

1 Introduction and Relate Work
With the emergence of the massive data collections of terabyte scale and the highperformance computers, how to utilize these huge data sets and the high-performance
computing capacity becomes a great challenge.
Under the circumstances, “Grid” is appearing as are an approach for building
dynamically constructed problem-solving environments using geographically and
organizationally dispersed high-performance computing and data-handling resources
[1]. Thus today can be used as effective tools for distributed computing and data
processing in many domains such as astronomy, geography, and earthquake, etc. In
all the Grid applications, Data Grid plays an important role in the data handling. It is a
dynamic logical namespace that enables coordinated sharing of heterogeneous
distributed storage resources and digital entities based on local and global policies
across administrative domains in a virtual enterprise[2].
In the Architecture, European Data Grid Project [3] is the development of a new
environment to support globally distributed scientific exploration involving terabytes
datasets. And the GriPhyN Project [4] provides a new degree of transparency in how
data-handling and processing capabilities are integrated to deliver data products to
end-users or applications. These two projects are strongly related to grid services
architecture, but they do not address more sophisticated planners, which can take into
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 669 – 676, 2006.
© Springer-Verlag Berlin Heidelberg 2006

670

W. Zhang, J. Mei, and J. Xie

account performance and reliability as well as provide feedback to the user, so that the
user can decide whether to go ahead with a request. In the data replicas management,
a simulation framework— OptorSim was introduced in [5] where data replication was
combined with job scheduling. They uses a prediction function based on spatial and
time locality regardless of the overall data access cost on the Data Grid.
In this paper we propose a novel framework for access control, message services,
data replicas services and the selection of the OP (Optimal Path) in Data Grid
environment. Our key contributions include the following aspects: (1) JMS (Java
Message Service) is employed on subscribe/cancel service, replicas service, and
Heart-Beat service. Through the combine of the GridFTP and JMS, we can ensure the
replicas’ consistency and validity. (2) In the access control management, we
introduce the mechanism of inspection certificates. This module is responsible for
verifying the certificates when the users visit the specified access binaries. (3) In the
selection of the OP (Optimal Path), we employ the Heart-Beat algorithm. By means of
this algorithm, we can find the temporal OP with a little expense.
The rest of the paper is organized as follows. In Section 2, we describe the related
work. We describe the general data grid framework in detail in Section 3. In Section
4, we show the key implementation status of the general data grid and Section 5
concludes the paper and discusses future work.

2 The General Data Grid Framework
The GDGrid (General Data Grid) is built on the OGSA-DAI [6]. We present a
framework of GDGrid as Fig.1 shows. The GDGrid is composed of three Layers,
which are the SRL (Service Requesting Layer), the SML (Service Managing Layer)
and the SPL (Service Providing Layer) [7].
2.1 SRL (Service Requesting Layer)
In the SRL, the SC (Service Client) can visit the SWP (Service Web Portal) of the
GDGrid. Through the SWP, the SC can register the own data services into the GDGrid
and become a SP (Service Provider). The SC can attain the service provided by the
GDGrid without the protected data resources in the SWP. In case that the SC wants to
get the services of the protected data resources, it must log on the AM (Access
Management) module and get the relevant certificates of the protected data resources.
In the GDGrid, once the SC would like to become a SP, it must download the
Middleware of the SPL (Service Providing Layer) and perform other operations what
we will discuss in the following sections. In this layer, the SC will interact with the SM
(Scheduling Management) module. The SC advances a request, and then the SM will
offer the temporal optimal route according to the heart-beat algorithm to the SC.
2.2 SML (Service Managing Layer)
The Service Managing Layer is the core of the GDGrid. Its main goals are to furnish
the data grid interface to the SCs, integrate the heterogeneous data, offer a secure
environment and find the Optimal Path of the request execution. Moreover, this layer

A General Data Grid: Framework and Implementation

671

Fig. 1. The GDGrid Architecture

coordinates the application execution by attempting to fulfill the application
requirements and the available data resources. On the whole, this layer consists of six
main services.
The WPS (Web Portal Service) builds the relationship between the SRL and the
SPL. In the GDGrid, the WPS is responsible for maintaining a description of the
GDGrid. In the other words, we can think it as an interface of the GDGrid. To be the
SC, it can log in the Data Grid, obtain the GDGrid’s services freely and register its
services to be a SP. To be the SP, it can register or deregister its services and the
descriptions, change its service, obtain the GDGrid’s services, request a certificate of
its own, and authorize its own certificate replicas to the other dependable SP, etc.
The MDS (Meta Data Service) offer all the metadata describing features of data
sources, and maintain the catalogue of the original data and the catalogue of replicas
data. The ACS (Access Control Service) focuses are on managing the certificates,
empowering the users to utilize the data resources and presenting the monitoring of
the logged users. In the monitoring management, we make use of a web based
monitoring tool (Map Center [8]) which provides access to status information.
The JMS (Java Message Service) offer three kinds of service. One service aims to
send the real-time messages to any other nodes, and the second service is used to
customize the some services, such as getting the latest public information, the state of
the original data and so on. The last service is the Heart-Beat message service.
The DRS (Data Replicas Service) is used to coordinate data resources replication
across the GDGrid from one node to another. There are including three parts:
Replicas Catalog, Replicas States and Replicas Descriptions.

672

W. Zhang, J. Mei, and J. Xie

In the TSS(Task Scheduling Service), we propose an algorithm called Heart-Beat,
which is the SPs (Service Providers) send some key own information [11] (such as
processor speed, memory size, and I/O performance, available bandwidth) to the TSS
module at regular intervals.
We make an assumption that the job is divided into N subjobs, and at that time M
nodes are available. In the GDGrid, we calculate the job execution time through the
Formula 1. Pj is the performance of computer j. TimeExec_ij is the expected execution
time of the subjob i on the Node j. SInput_j, SApplication_j and Soutput_j represent the size of
the input data , the application code and the output data of the subjob j respectively.
Wj is the bandwidth of the Node j. Pj is the performance parameters of the Node j. and
Tj refer to the available system resource of Node j such as the throughput of I/O.

TimeRe sponse _ j = Timearrived _ j − Timesend _ j
TimeExec _ ij = (

S Input _ i + S Application _ i
W j × Pj × T j

+

SOutput _ i
W j × Pj

) × TimeRe sponse _ j

(1)

The results obtained from the Formula 1 can be used for the construction of an
M×N matrix. Through the following algorithm, we can find the optimal quickly and
accurately.
for(i=1,i<=n,i++){
for(j=1,j<=m,j++){
Node=Min() /*select the node of the minimize
executing time*/
}
if(SearchNodes(Node)==False) //check this Node
AddNodes(Node) //add this Node to the path
else
NodeA=Compare(Node) /**Compare the total
runtime in this Node to the value in
column i, then return the node of the
minimize executing time **/
AddNodes(NodeA) //add this Node to the path
}
return Path
//return the optimal path
2.3 SPL (Service Providing Layer)
The SRL is basically used for organizing the SPs (Service Providers) orderly, utilizing
the SPs’ resource efficiently and administering the certificates securely. In the SRL,
the OGSA-DAI are applied to integrate various heterogeneous data resources
seamlessly and to build the relationship between the SPs and the SML.
As for a SP, JMSLM (Java Message Service Local Module) is used to receive the
input JM issued by other SPs and to send the output JM to the destination. In this
GDGrid, the input JM can be considered a manner which the other SPs notify the
current SP. We assume that a current SP holds a replica of a remote SP’s data resource.
Once the remote SP’s data resource is changed, the remote SP will send a notice of the
changes to the JMS of the SML through the JMSLM, the JMS will distribute the notice

A General Data Grid: Framework and Implementation

673

to all the nodes which possess the replicas, and finally the JMSLM will proceed with
the notice in the SP. As for the remote SP the notice is an output JM, while as for the
current SP the notice is an input JM. In addition, the Heart-Beat is considered as an
output JM for a SP and send through the JMSLM in the same way.
In the SP, there is another module named OAM (Own Authentication Module)
which is adopted with the purpose of recording the own and other certificates
information.

3 The General Data Grid Key Implementation
3.1 Java Message Service
Java message service is implemented based on the JMS of the SML and the JMSLM
of the SPL. It includes three major message services: the subscribe/cancel service, the
replicas service, and the Heart-Beat service.
During the course of designing the JMS, the advanced EJB technology and the
design patterns are employed to the GDGrid. If the SCs have interest in some SPs,
they can subscribe the latest information of some SPs by the Subscribe Message
service. In case that the SPs accept the subscribe request, the SPs will send to the realtime latest information to the SCs timely. If the SCs have no interest in the SPs any
more, they can cancel the order by the Cancel Message service.
The Replicas Message service associating with the GridFTP makes it possible that
the data replicas can keep the consistency and validity. Once a SP’s data resource is
modified, the SP will send a notice of the changes to the Replicas Message service, it
will distribute the notice to all the nodes possessing the replicas. If a node possessing
a replica is closed when the original data are changed, the Replicas Message service
will put the notice to the massage cache area. Once the node is available, the Replicas
Message service will resend the notice to the node. In the management of the massage
cache area, GDGrid provides the service mechanism called Least Recently Used
(LRU). That is the node which is accessible in the first time owns the headmost
services and receives the message about itself.
As for the Heart-Beat message service, it plays a vital role to the selection of the
optimal path. Through the service, the GDGrid can attain the correct real-time
information about the usable nodes.
3.2 Authorization Service
About the authorization service, we can explain through the Fig.2.
Step 1: The user A sends a request for owning an own unique certificate in order to
protect some protected data resources.
Step 2: The ACS module assigns a unique certificate (For example CTF001, X509)
for the protected data resources of user A. Once other users want to visit those
data resources, they should own the CTF001.
Step 3: User B sends a request for visiting the protected data resources of user A.

674

W. Zhang, J. Mei, and J. Xie

Step 4: The ACS module transmits the request to the User A. The request consists of
the information of the demander (User B) username, IP address, the position
etc.

Fig. 2. Procedure In Authorization

Step 5: The User A confirms the request and returns a message (yes or no). If the
message is no, the ACS module will refuse the request which is send by the
demander. In the Fig.2, the User A sends the message which is yes.
Step 6: The ACS module receives the message form User B, checks the certificates
management sub module, and sends a replica of the User A’s certificate to the
User B.
Step 7: Once the User B owns the replica of the User A’s certificate, he can use the
User A data resources directly without through the ACS module certification.
By this means, we not only save the authentication time and the bandwidth, but
also make utmost use of the data resources in the safe situation.
3.3 The Optimal Path Discovery
Experiments are taken to analyze the process of finding the optimal path. The job is
divided into four subjobs and there are six accessible and available nodes at the
experiments. The parameters used in the experiments are list as follows: <CPU,
Memory, Bandwidth, Available_Resouce, Response_Time>， { Node_1<1G, 256M,
1.85M, 80%, 50S>, Node_2<2G, 512M, 1.7M, 100%, 45S>,Node_3<2G, 512M,
1.6M, 80%, 45S >,Node_4<2.5G, 512M, 17M, 70%, 45S >,Node_5<2G 2G, 1G,
1.8M, 55%, 45S >,Node_6<2.6G, 512M, 1.74M, 60%, 50S>}.
Table 1. The forcase of executing subjob. the Zero means the node has the subjob’s input data.
Nodes
Node_1
Node_2
Node_3
Node_4
Node_5
Node_6

Forecast Subjob1
S_in S_ap S_ou
30M 10M 12M
30M 10M 12M
0M
10M 12M
30M 10M 12M
30M 10M 12M
30M 10M 12M

Forecast Subjob2
S_in S_ap S_ou
25M 15M 10M
25M 15M 10M
25M 15M 10M
25M 15M 10M
0M
15M 10M
25M 15M 10M

Forecast Subjob3
S_in S_ap S_ou
0M
8M
8M
15M 8M
8M
15M 8M
8M
15M 8M
8M
15M 8M
8M
15M 8M
8M

Forecast Subjob4
S_in S_ap S_ou
12M 10M 10M
12M 10M 10M
0M
10M 10M
12M 10M 10M
12M 10M 10M
12M 10M 10M

A General Data Grid: Framework and Implementation

675

According to calculating these parameters through the Formula 1, the 6×4 matrix is
shown as follows:

Fig. 3. The Execution Time. Left matrix is without data replicas, and the right is with replicas.

When choosing the optimal path, the SM will use the Heart-Beat algorithm. In this
experiment without data replicas, the optimal path is Node_3→Node_5→Node_2→Node_4. Also another experiment is done during the period of executing
this job, we shut down the Node_2. The SM will process with the adaptive executing
path choice. That is in this experiment the subjob_3 executed on the Node_2. When
the Node_2 is inaccessible, the Heart-Beat algorithm will select the optimal node to
execute the subjob_3 expect the Node_2. So the optimal path is changed to be
Node_3→Node_5→Node_1→Node_4 in this experiment. Through this experiment, it
proves that the Heart-Beat algorithm is effectively, improve the performance greatly,
and afford fault-tolerance management to some extent.
For the purpose of finding the data replicas’ effect on the scheduling, we make
some data replicas on the different nodes (in this experiment, the time of the replicas’
transfer is not considered.): employ the subjob1’s data on the Node_2 and Node_3;
the subjob2’s data on Node_2, Node_3 and Node_5; the subjob3’s data on Node_1
and Node_6; the subjob4’s data on Node_2 and Node_3. By using the Formula 1, the
execution time with data replicas 6×4 matrix is gotten, and the optimal path is:
Node_2→Node_5→Node_6→Node_3.
From the two 6×4 matrixes, we can figure out the probable total runtime. One with
no data replica is 389.9s, and the other with some data replicas is 316.4s. Obviously,
the data replicas must short the runtime of the task.

4 Conclusion and Future Work
The GDGrid facilitates the usability of the distributed heterogeneous data resources
on the Grid. It integrates Metadata services, Data Replica services, Java Message
services, Replicas management services and route selection within its framework. In
this paper, we have described the three level of the GDGrid in detail and introduce the
functions of different sub-modules briefly. We present the key implementations and
do some experiments that validate the efficiency of our Heart-Beat algorithms.
Additional future work of this project will be to integrate and classify data
resources. In addition, to extend the performance of data transfers, we intend to
investigate protocols based on Quality of Service concerning the transformation of
large quantities of data. Further, since in our GDGrid the dynamic transfer of the data

676

W. Zhang, J. Mei, and J. Xie

replicas is considered in the optimal path selection, we plan to add this consideration
into the Heart-Beat algorithm and improve the algorithm in the efficiency and speed.

References
1. I.Foster and C.Kesselman (Eds): The Grid: Blueprint for a New Computing Infrastructure.
http://www.mkp.com/books_catalog/1-55860-475-8.asp, Morgan Kanfmann, Los Altos,
CA,1988.
2. Reagan.Moore, Arcot rajasekar, and Michal Wan, MEMBER, IEEE: Data Grids, Digital
Libraries, and Persistent Archives: An Integrated Approach to Sharing, Publishing, and
Archiving Data. Proceedings of the IEEE, VOL. 93, NO. 3, 578-588, March 2005.
3. Segal, B.; Robertson, L.; Gagliardi, F.; Carminati, F.: Grid computing: the European Data
Grid Project. Nuclear Science Symposium Conference Record, 2000 IEEE Volume 1, 1520 Oct. 2000 Page(s):2/1 vol.1
4. Deelman, E., Kesselman, C., Mehta, G., Meshkat, L.: GriPhyN and LIGO, building a
virtual data Grid for gravitational wave scientists. High Performance Distributed
Computing, 2002. HPDC-11 2002. Proceedings. 11th IEEE International Symposium on
Page(s):225 - 234
5. William H. Bell, David G. Cameron, Luigi Capozza, A. Paul Millar, Kurt Stockinger,
Floriano Zini: Simulation of Dynamic Grid Replication Strategies in OptorSim. Proc. Of
the 3rd Int’l IEEE workshop on Grid Computing (Grid 2002), Baltimore, USA.
6. Open Grid Services Architecture – Data Access and Integration Project:
http://www.ogsadai.org.uk.
7. Nong Xiao, Dongsheng Li, Wei Fu, Bin Huang, Xicheng Lu: GridDaen: A Data Grid
Engine. Second International Workshop,GCC2003, Shanghai, China, Page(s):519-528
8. Map Center Home Page: Http://mapcenter.in2p3.fr
9. G. Aloisio, M. Cafaro, I. Epicoco: Early experiences with the GridFTP protocol using the
GRB-GSIFTP library. Future Generation Computer Systems, Volume 18, Number 8
(2002), pp. 1053-1059, Special Issue on Grid Computing: Towards a New Computing
Infrastructure, North-Holland.
10. Ann Chervenak, Ian Foster, Carl Kesselman, Charles Salisbury and Steven Tuecke: The
Data Grid: Towards an Architecture for the distributed Management and Analysis of Large
Scientific Datasets. Journal of Network and Computer Applications, 23:187-200, 2001.
11. Sang-Min Park, Jai-Hoon Kim: Chameleon: A Resource Scheduler in A Data Grid
Environment*. Cluster Computing and the Grid, 2003. Proceedings. CCGrid 2003.3rd
IEEE/ACM International Symposium on12-15 May 2003 Page(s):258 - 265.

