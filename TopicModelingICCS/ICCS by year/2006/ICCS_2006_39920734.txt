Towards Detecting Protein Complexes from
Protein Interaction Data
Pengjun Pei and Aidong Zhang
Department of Computer Science and Engineering,
State University of New York at Buﬀalo,
Buﬀalo NY 14260, USA

Abstract. High-throughput methods for detecting protein-protein interactions (PPI) have given researchers an initial global picture of protein
interactions on a genomic scale. These interactions connect proteins into
a large protein interaction network (PIN). However, both the size of the
data sets and the noise in the data pose big challenges in eﬀectively analyzing the data. In this paper, we investigate the problem of protein
complex detection, i.e., ﬁnding biologically meaningful subsets of proteins, from the noisy protein interaction data. We identify the diﬃculties
and propose a “seed-reﬁne” approach, including a novel subgraph quality measure, an appropriate heuristics for ﬁnding good seeds and a novel
subgraph reﬁnement method. Our method considers the properties of
protein complexes and the noisy interaction data. Experiments show the
eﬀectiveness of our method.

1

Introduction

Proteins must interact with other molecular units to execute their function.
Discovering proteins that interact in a cell is key to elucidate its functional
networks. Recent advances in biotechnology have made it possible to detect
protein interactions on a global scale [10, 17, 7, 9]. We can construct a protein
interaction network (PIN) [7] from existing protein-protein interaction data by
connecting each pair of vertices (proteins) involved in an interaction.
Proteins are likely to form closely-coupled protein complexes as functional
units to participate in a certain biological process. Detecting the protein complexes from protein interaction network will help ﬁnd the building modules of
the protein network. These complexes can be roughly considered as dense subgraphs of the protein interaction network. However, protein complexes are likely
to overlap and the interaction data are very noisy. Therefore, intelligent methods
are in great demand to eﬀectively detect protein complexes.
This paper identiﬁes the diﬃculties of this problem and proposes some favorable properties of the methods for this purpose. Then we propose a ‘seed-reﬁne’
This research was partially supported by National Science Foundation Grants DBI0234895, IIS-0308001 and National Institutes of Health Grant 1 P20 GM06765001A1.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 734–741, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Towards Detecting Protein Complexes from Protein Interaction Data

735

approach, including a novel subgraph quality measure, a heuristic to ﬁnd good
seeds, and a novel method to control subgraph overlapping. Experiments show
the eﬀectiveness of our method. Finally, we conclude the paper and propose some
future work.

2

Challenges in Protein Complex Detection

Though the problem of detecting protein complexes from interaction data shares
some commonality with clustering problem, there are some additional diﬃculties:
– Protein complexes may overlap with each other. Therefore, the traditional
paradigm for clustering of putting each protein into one single cluster [14]
does not suit our problem well. Instead, we would prefer ﬁnding ‘dense’
subgraphs.
– Protein complexes generally correspond to small but dense subgraphs. Divisive hierarchical clustering approaches like [4] are more useful in ﬁnding large
protein clusters representing biological processes. For small dense subgraphs,
we would prefer using extensive local search and optimization.
– Protein interaction data are very noisy. How to deﬁne the quality of a subgraph in the presence of noisy edges is a non-trivial task. Normal quality
measurement of subgraphs either considers only the worst connected vertices or the averaged overall density.
To sum up, we need a seed-reﬁne approach for protein complex detection. Specifically, we need to generate some promising seed subgraphs, followed by reﬁning
these seed subgraphs based on some quality measure. We can stop the reﬁning
process when either the quality is smaller than a predeﬁned value, or preferably,
the quality achieves a local maximum. The latter is much more preferred because
it will not require a predeﬁned threshold.

3

A Seed-Reﬁne Approach for Finding Protein
Complexes

Throughout the paper, we use an unweighted, undirected graph G = (V, E) to
represent the protein interaction network where V represents the set of vertices
(proteins) and E represents the set of edges (interactions). An induced subgraph
is a subset of the vertices of the graph together with all the edges of the graph
between the vertices of this subset. As we only consider an induced subgraph
of the original graph, we abbreviate the term and simply call it a subgraph. We
denote the set of neighbors of a vertex v in graph G as N (v) = {u|(u, v) ∈ E}.
3.1

Subgraph Quality Deﬁnition

As observed in [13, 8], topology features can provide some insight on the biological signiﬁcance of the interactions. For proteins that interact with a lot of

736

P. Pei and A. Zhang

other proteins, the biological signiﬁcance of these interactions might be questionable. Therefore, the degree of a vertex should be taken into consideration when
evaluating the strength of an edge. Correspondingly, the quality of a subgraph
G = (V , E ) is related to not only |V | and number of inside links |E | but
also outside links |Eout = {(u, v)|u ∈ V , v ∈
/ V }|. Previous quality deﬁnitions
like density (Density = 2 ∗ |E |/(|V | ∗ (|V | − 1))) [15], k-core [1, 2] and cliques
disregard outside links.
Meanwhile, we would prefer a subgraph in which each vertex contributes similarly to the quality of the subgraph so that every vertex is likely to be an
authentic part. Comparatively, the density considers only the average quality.
Cliques and ‘k-core’ deﬁne the subgraph quality by the worst-connected vertex.
Theses deﬁnitions are too stringent and therefore will miss a lot of potentially
biologically meaningful subgraphs.
We ﬁrst deﬁne the quality of a vertex in a subgraph, denoted as Q(v, G ):
For a vertex v ∈ V , the number of edges within the subgraph G = (V , E ) is
|N (v) ∩ V |. Under the null hypothesis that the set of neighbors of v is chosen
randomly from the vertices of the graph, i.e., V , the probability of observing at
least |N (v) ∩ V | neighbors within the subgraph G can be expressed as:
min(|N(v)|,|V |)

P Vv,G =
i=|N(v)∩V |

|N (v)|
i

×

|V | − |N (v)|
|V | − i

/

|V |
|V |

.

We deﬁne Q(v, G ) as the minus log of this probability, i.e., Q(v, G ) = − log
(P Vv,G ).
Then we seek to combine Q(v, G ) values for all v ∈ V . Since we prefer a subgraph in which each vertex contributes similarly to the quality of the subgraph,
we treat the logs of Q(v, G ) for all v ∈ V as a random sample from a Normally
distributed population with mean μ. 1 We estimate the sample mean, denoted as
log(Q(v,G ))
(log Q(v,G )−¯
x)2
¯ = v∈V |V |
, s2 = v∈V |V |−1
.
x
¯ and variance, denoted as s2 : x
x
¯−μ
√
Then the sampling distribution of
follows Student’s t distribution with
2
s /|V |

|V | − 1 degrees of freedom [3]. We use the lower boundary of the 95% conﬁdence
interval of the population mean as our subgraph quality measure:
√2
Q(G ) = ex¯−t|V |−1 ∗ s /|V | ,
where t|V |−1 is the cut-oﬀ value of the t distribution for 95% conﬁdence interval with |V | − 1 degrees of freedom. This quality measure gives a boundary
of the underlying population mean, and therefore, is a statistically meaningful
combination of the quality of each vertex.
3.2

The Seed-Reﬁne Algorithm

Our algorithm iteratively ﬁnds an initial seed graph centered on an edge (u, v),
(0)
denoted as G(u,v) and reﬁnes it until no quality improvement can be achieved.
1

The log transformation of the quality values is used to stabilize variance and thus
to make the sample satisfy the Normal distribution requirement.

Towards Detecting Protein Complexes from Protein Interaction Data

737

We call this optimized subgraph a reﬁned subgraph, denoted as G(u,v) . The
set of reﬁned subgraphs, denoted as GS, represents our predicted complexes.
We use V isited to represent the set of edges that have been covered by reﬁned
subgraphs. The “seed-reﬁne” algorithm is illustrated in Algorithm 1 in Figure 1.
After we get GS, a simple postprocessing can be applied to ﬁlter out those
subgraphs with quality less than a threshold.
3.3

Finding Seed Subgraphs

We deﬁne two layer seeds: we use an edge (u, v) not in previously reﬁned subgraphs as the seeding edge and ﬁnd corresponding seeding vertices, denoted
as SV(u,v) : SV(u,v) = {w|(u, w) ∈ E \ V isited, (v, w) ∈ E \ V isited}.
The seed subgraph is the subgraph induced by SV(u,v) ∪{u, v}. This deﬁnition
guarantees that those edges in V isited can not be used as part of the seed graph.
Since each of the seeding vertices is connected to both vertices of the seeding
edge, the seed subgraph can be regarded as centered on the seeding edge (u, v).
(0)
Therefore, we denote it as G(u,v) . Given all candidate seed subgraphs with at
least 3 vertices, we choose the most promising one: the one with the largest
number of vertices. If there is a tie, we choose the one with highest quality, i.e.,
we deﬁne the function isM oreP romising(G1, G2) = true iﬀ
(|V (G1)| > |V (G2)|) or ((|V (G1)| = |V (G2)|) and (Q(G1) > Q(G2))).
The subroutine is described in Algorithm 2 in Figure 1.
3.4

Reﬁning Subgraphs

Given a seed subgraph, the subroutine ref ineSubGraph tries all possible actions
of adding one vertex to or removing one vertex from the subgraph and takes the
action that achieves highest quality improvement. In this process, we require that
(i) the subgraph contains the seeding edge (u, v), and (ii) the subgraph remains
connected. This process is repeated until no quality improvement action can be
found. The pseudocode is listed in Algorithm 3 in Figure 1.
3.5

Analysis of the Algorithm

Since the subgraph quality improves monotonously in the ref ineSubGraph subroutine, the reﬁnement recursion can end. Also, since we increase the set V isited
after ﬁnding one reﬁned subgraph, the algorithm will end after visiting all edges.
For computational complexity, notice that we are ﬁnding dense but small
subgraphs and we require that the subgraph always contains the seeding edge.
Therefore the reﬁned subgraph will be still close to the seeding edge, suggesting
that the ref ineSubGraph recursion will not take too much time. Also, considering the sparsity of the PIN, computational time is not a serious issue here.
Notice that our objective is to predict a ‘reasonable’ number of protein complexes without excessive overlapping. The control of subgraph overlapping is

738

P. Pei and A. Zhang

Algorithm 1. SRA: Seed-Reﬁne Algorithm for Protein Complex Detection
Input: G = (V, E): protein interaction network
Output: GS: the set of predicted protein complexes
1. Initialization: GS ← φ, V isited ← φ
(0)
2. G(u,v) ← f indSeedSubgraph(G, V isited)
(0)
3. while G(u,v) = empty do
(0)
4.
G(u,v) ← ref ineSubGraph(G(u,v) )
5.
GS ← GS ∪ {G(u,v) }
6.
V isited ← V isited ∪ E(G(u,v) )
(0)
7.
G(u,v) ← f indSeedSubgraph(G, V isited)
8. end while
9. return GS

Algorithm 2. f indSeedSubgraph: Find a Seed Subgraph
Input: G = (V, E): protein interaction network, V isited
(0)
Output: G(u,v) : a seed subgraph centered on (u, v)
(0)
1. Initialization: G(u,v) ← empty, Candidate ← E \ V isited
2. for all edge (i, j) ∈ Candidate do
(0)
3.
Construct the seed subgraph centered on (i, j): G(i,j)
(0)
(0)
(0)
4.
if |V (G(i,j) )| ≥ 3 and isM oreP romising(G(i,j) , G(u,v) ) then
(0)
(0)
5.
G(u,v) ← G(i,j)
6.
end if
7. end for
(0)
8. return G(u,v)

Algorithm 3. ref ineSubGraph: Reﬁne a subgraph
(i)

Input: G(u,v) : a subgraph centered on (u, v)
Output: G(u,v) : a reﬁned subgraph centered on (u, v)
(i)
1. Generate graphs {G(u,v) } by adding a vertex to/deleting a vertex from G(u,v)
2. for all graph G(u,v) do
(i+1)
3.
G(u,v) ← argmax(Q(G(u,v) ))
G(u,v)

4. end for
(i+1)
(i)
5. if Q(G(u,v) ) > Q(G(u,v) ) then
(i+1)

6.
return ref ineSubGraph(G(u,v) )
7. else
(i)
8.
return G(u,v)
9. end if

Fig. 1. A seed-reﬁne algorithm for protein complex detection

Towards Detecting Protein Complexes from Protein Interaction Data

739

achieved by the two layer seeds: the seeding edge is used as the center of the
seed subgraph. It is ﬁxed in each reﬁnement iteration to prevent the subgraph
from being attracted towards another dense area far from the original seed.
The seeding vertices give the preliminary shape of the seed subgraph for further
reﬁnement. After ﬁnding one reﬁned subgraph, we prevent the edges in the subgraph from existing in later seed subgraphs. Therefore, the next seed subgraph
tends to be a bit far from already discovered reﬁned subgraphs. Also notice
that we do not prohibit the inclusion of edges in previously reﬁned subgraphs in
the reﬁnement process. This gives the possibility of overlapping subgraphs. Our
choice of isM oreP romsing function is more likely to select larger subgraphs as
seeds and thus less likely to branch out into dense regions of the graph that
have already been discovered. To conclude, we design an algorithm that allows
outputting overlapping subgraphs but methodologically makes it possible only
when there is strong evidence to do so.

4

Experiments

Due to space limit, we only report the performance of our algorithm for two
data sets: PreHTMS includes all yeast interactions except high-throughput mass
spectrometry studies. HTP data set includes purely large scale studies.
To assess our predictions, we use the curated protein complexes in MIPS [11]
(including 267 complexes with at least two proteins) and manually curated Gavin
complexes [7] (including 221 complexes) as the ground truth. Similar to [2], for a
predicted complex G = (V , E ), we ﬁnd the best-match complex in the ground
truth complex set, denoted as GT = (GT V , GT E ) and use M atchRatio =
|V ∩GT V |
∩GT V |
∗ |V|GT
to evaluate the match. We consider a predicted complex
|V |
V |
matches a ground truth complex if M atchRatio > 0.2. For a total number of
N predicted complexes and M ground truth complexes, suppose CN predicted
complexes match CM ground truth complexes, we deﬁne precision = CN
N and
2
recall = CM
.
We
report
the
precision
and
recall
of
our
method
in
Figure
2. For
M
reference, we also list the result from [2].
Figure 2(a) shows that our method outperforms MCODE method. Also notice
that our quality threshold is used in the postprocessing step and therefore, we
only need to run the main algorithm once and can choose diﬀerent thresholds on
the unﬁltered results afterwards. Though MCODE scores each vertex only once,
its complex-ﬁnding subroutine still needs to run for diﬀerent parameter choices.
Comparing our results in Figure 2 (a) and (b), we notice that the performance
of the PreHTMS data set is higher than that of HTP data set when assessed by
MIPS protein complexes. This is because PreHTMS includes more reliable interactions. However, HTP data set has higher performance when assessed by Gavin
protein complexes. This is because the HTP data itself includes the interaction
data inferred from the Gavin raw puriﬁcations.
2

Our deﬁnition of the precision equals the speciﬁcity in [2]. However, their sensitivity
CN
. In our experiments, the diﬀerence has little eﬀect on the
is deﬁned as CN+M
−CM
ﬁnal performance comparison or parameter selection.

740

P. Pei and A. Zhang
0.8

0.8
MCODE/PreHTMS
our method/PreHTMS
MCODE/HTP
our method/HTP

0.7
0.6

0.6
0.5

Recall

0.5

Recall

our method/PreHTMS
our method/HTP

0.7

0.4

0.4

0.3

0.3

0.2

0.2

0.1

0.1

0

0
0

0.1

0.2

0.3
0.4
Precision

0.5

0.6

0.7

(a) Assessed with Gavin complexes

0

0.1

0.2

0.3
Precision

0.4

0.5

0.6

(b) Assessed with MIPS complexes

Fig. 2. Algorithm Performance. PreHTMS (9049 interactions among 4325 proteins)
includes several large scale studies [10, 17, 16, 12, 5, 6] and the small scale studies in DIP
[18]. HTP includes 12243 interactions among 4554 proteins from [10, 17, 5, 6, 9, 7, 16] .
We use the spoke model [1] to extract binary interactions from the raw puriﬁcations in
[9, 7]. For our approach, we choose the postprocessing quality threshold over the range
from 6 to 10 in 0.5 increments and report the results. In (a), we use Gavin protein
complexes for the assessment. We list reported results from [2] for MCODE using its
most optimized parameter settings. In (b), we use MIPS protein complexes for the
assessment. Since we use a later version of MIPS complexes, the performance of our
method and MCODE is not directly comparable, thus we omit the MCODE result.

Table 1. STE5-MAPK complex correctly predicted by our method
Protein
FUS3
KSS1
STE5
STE7
STE11

Neighbors in the Subgraph Total Degree P Vv,G Score
STE5, STE7, STE11
12
14.9
STE5, STE7, STE11
10
15.5
FUS3, KSS1, STE7, STE11
11
21.2
FUS3, KSS1, STE5
5
18.0
FUS3, KSS1, STE5
13
14.6

Table 1 gives the details of a correctly predicted protein complex using PreHTMS data set. The P Vv,G scores for these ﬁve vertices in the subgraph, as
listed in the table, are all very high and similar. The ﬁnal quality of the subgraph
is 13.7. This subgraph corresponds to the ‘STE5-MAPK complex’ in MIPS.

5

Conclusion and Future Work

In this paper, we have investigated the problem of ﬁnding protein complexes
from protein interaction network and proposed a novel method. Experiments
have shown the eﬀectiveness of our method.
Similar to [2], our method can be used in a directed mode to ﬁnd the complex
that a speciﬁed protein is part of. This directed mode enables researchers to
focus on the proteins of interest. Our method for generating seeds and subgraph
reﬁnement may also alleviate the problem of seed subgraph branching out into

Towards Detecting Protein Complexes from Protein Interaction Data

741

denser regions in the graph in [2]. We plan to investigate this usage of the
algorithm in the future.

References
1. G. D. Bader and C. W. Hogue. Analyzing yeast protein-protein interaction data
obtained from diﬀerent sources. Nat Biotechnol, 20:991–997, 2002.
2. G. D. Bader and C. W. Hogue. An automated method for ﬁnding molecular
complexes in large protein interaction networks. BMC Bioinformatics, 4:2, 2003.
3. M. Bland. An Introduction to Medical Statistics. Oxford University Press, USA,
2000.
4. C. Ding et al. A uniﬁed representation of multiprotein complex data for modeling
interaction networks. Proteins, 57:99–108, 2004.
5. B. L. Drees et al. A protein interaction map for cell polarity development. J Cell
Biol, 154:549–571, 2001.
6. M. Fromont-Racine et al. Genome-wide protein interaction screens reveal functional networks involving sm-like proteins. Yeast, 17:95–110, 2000.
7. A. C. Gavin et al. Functional organization of the yeast proteome by systematic
analysis of protein complexes. Nature, 415:141–147, 2002.
8. D. S. Goldberg and F. P. Roth. Assessing experimentally derived interactions in a
small world. Proc. Natl. Acad. Sci. USA, 100:4372–4376, 2003.
9. Y. Ho et al. Systematic identiﬁcation of protein complexes in saccharomyces cerevisiae by mass spectrometry. Nature, 415:180–183, 2002.
10. T. Ito et al. Toward a protein-protein interaction map of the budding yeast: A comprehensive system to examine two-hybrid interactions in all possible combinations
between the yeast proteins. Proc. Natl. Acad. Sci. USA, 93(3):1143–7, 2000.
11. H. W. Mewes et al. Mips: a database for genomes and protein sequences. Nucleic
Acids Res, 30:31–34, 2002.
12. J. R. Newman, E. Wolf, and P. S. Kim. A computationally directed screen identifying interacting coiled coils from saccharomyces cerevisiae. Proc Natl Acad Sci U
S A, 97:13203–13208, 2000.
13. R. Saito et al. Interaction generality, a measurement to assess the reliability of a
protein-protein interaction. Nucleic Acids Res, 30:1163–1168, 2002.
14. M. P. Samanta and S. Liang. Predicting protein functions from redundancies in
large-scale protein interaction networks. Proc Natl Acad Sci U S A, 100:12579–
12583, 2003.
15. V. Spirin and L. A. Mirny. Protein complexes and functional modules in molecular
networks. Proc Natl Acad Sci U S A., 100:12123–12128, 2003.
16. A. H. Tong et al. A combined experimental and computational strategy to deﬁne
protein interaction networks for peptide recognition modules. Science, 295:321–
324, 2002.
17. P. Uetz et al. A comprehensive analysis of protein-protein interactions in saccharomyces cerevisiae. Nature, 403:623–627, 2000.
18. I. Xenarios et al. Dip, the database of interacting proteins: a research tool for
studying cellular networks of protein interactions. Nucleic Acids Res, 30:303–305,
2002.

