Modular Monadic Slicing in the Presence of Pointers∗
Zhongqiang Wu1, Yingzhou Zhang2, and Baowen Xu1
1

Dep. of Computer Science and Engineering, Southeast Univ.,
Nanjing 210096, China
2
College of Computer, Nanjing Univ. of Posts and Telecommunications,
Nanjing 210003, China
bwxu@seu.edu.cn, zhangyz@njupt.edu.cn

Abstract. Program slicing is a family of program decomposition techniques. For
traditional slicing methods lack modularity and flexibility, we have proposed a new
formal method for program slicing—modular monadic slicing. This paper presents an approach to extend the modular monadic slicing for handling pointers.
With the inspiration of forward program slicing, our approach obtains the point-to
information through the data-flow iteration. By combining the forward monad
slicing with data-flow iteration, our method computes the point-to information
and slices the program in the same phase. So our approach has the same precision
as traditional data-flow iteration methods, but needs less space. In addition, our approach also inherits the properties of language independence and reusability from
the original monadic slicing method.

1 Introduction
Program slicing is a family of program decomposition techniques proposed by M.
Weiser [1], which is widely applied to program debugging, program integration, reverse engineering and so on [2]. For the traditional slicing methods lack modularity,
we have proposed a novel formal slicing method, called modular monadic slicing [4].
This paper extends the original monadic slicing method to handle the pointers. With
the inspiration of forward program slicing [3], our approach obtains the point-to information through the data-flow iteration that can make the point-to information and
slicing be computed in the same phase. As a result, instead of recording point-to information for every statement, we only need to record the information for several
current statements. So our method saves space without losing precision.
The rest of the paper is organized as follows: In Section 2, we briefly introduce the
concepts of monad and monad transformers. We discuss original modular monadic
slicing algorithm in Section 3. The extended slicing algorithm is presented in more
detail in section 4 and 5, including the chief difficulty in dealing with pointers, the
extended algorithm, and complexity analysis. A case study is shown in sections 6. In
Section 7, we conclude this paper.
∗

This work was supported in part by the NSFC (60425206, 60373066, 90412003), National
Grand Fundamental Research 973 Program of China (2002CB312000), Advanced Armament
Research Project (51406020105JB8103), and Natural Science Research Plan for Jiang Su
High School (05KJD520151).

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 748 – 756, 2006.
© Springer-Verlag Berlin Heidelberg 2006

Modular Monadic Slicing in the Presence of Pointers

749

2 Preliminaries
A monad is a triple (m, reAbstract Syntax:
turnm, bindm) which must
S :: = ide := l.e | S1; S2 | skip | read ide | write l.e
satisfy three laws: Left unit,
| if l.e then S1 else S2 endif | while l.e do S endwhile
Right unit and Associativity
[7], where m is a type conFig. 1. Abstract syntax of language W
structor; returnm and bindm are
two primitive operators. A
monad transformer consists of a type constructor t and an associated function liftt,
where t maps any given monad (m, returnm, bindm) to a new monad (t m, returnt m,
bindt m). In [4], we have presented the slice monad transformer SliceT as shown below
(where L denotes a set of labels of expressions that were required to compute the
current expression), to uniformly describe the slicing computation.
type SliceT L m a = L → m (a, L)
returnSliceT L m x = λL. returnm (x, L)
m ‘bindSliceT L m’ f = λL. {(a, L′) ← m L ; f a L′}m
liftSliceT L m
= λL. {a ← m ; returnm (a, L)}m
updateSlice f
= λL. returnm (f L, L)
In modular monadic semantics, the monad definition is a combination of some monad transformers that are applied to a base monad. In this paper, we use the identity
monad Id as the base monad. We apply some monad transformers, such as EnvT,
StateT [5], to the monad Id, and obtain the resulting monad ComptM: ComptM ≡
(StateT ⋅ EnvT) Id. With the ComptM, the semantics functions are shown below:
C :: Cmd → ComptM (),

E :: Exp → ComptM Value

For the convenience of discussion, in [4], we consider an example language W,
and define Syn(s, L) where s is a W-program analyzed. The language W contains
assignment, branch statement, loop block and I/O statement, its abstract syntax is
provided in Figure 1.

3 Modular Monadic Static Slicing Algorithm
In [4], the data structure of slices was shown as follows:
type Var = String
type Labels = [Int]
type Slices = [(Var, Labels)]
getSli :: ComptM Slices, setSli :: Slices → ComptM Slices
lkpSli :: Var → Slices → ComptM Labels
updSli :: (Var, ComptM Labels) → Slices → ComptM ()
mrgSli :: Slices → Slices → ComptM Slices
The main idea of static slicing algorithm can be briefly stated as follows: we firstly
apply the slice transformer SliceT to semantic building blocks, which makes the resulting semantic description include program slice semantic feature. According to the
semantic description, we then compute static slices of each statement in sequence.

750

Z. Wu, Y. Zhang, and B. Xu

Finally we will obtain the static slices of all single variables in the program. The concrete steps are shown in Figure 2.
In the algorithm, the underlying monad ComptM in semantic building blocks is:
ComptM ≡ (SliceT ⋅ StateT ⋅ EnvT) Id. Meanwhile, if a computation of a labeled expression l.e is included during applying bindSliceTLm, the intermediate set L′ should be reified
as following:
L′ = {l} ∪ L ∪

U lkpSli ( r , getSli )

r∈ Re fs ( l.e )

where Refs(l.e) denotes the set of variables occurred in expression l.e. The relation
above reflects when and how to change the set L.
Since we finally obtain
the slices of all variables
Input: Slicing criterion <p, v>
after the last statement is
Output: Static slice
1. Initialize the set L and the table Slices.
analyzed, the program slice
2. Add semantic feature of program slicing into seof each variable, on the avermantic building blocks in a modular way, through
age, costs O(n + m), where m
slice transformer SliceT.
and n refer to the number of
3. Compute static slices of each statement in selabeled expressions in the
quence basing on the semantic description in Step
program and the number of
2, obtaining the final Slices.
all labeled expressions ap4. Returning the final static slicing result according
peared (perhaps repeatedly)
to Slices and Syn(s, L).
in the sequence of analyzing
Fig. 2. Static slicing algorithm
the program, respectively.
The total space cost is O(v ×
m), which is unrelated to n,
where v refers to the number of single variables. For n is no less than m, the time
complexity is O(n). When considering special loop [2], the worst time complexity can
reach O(m2).

4 Static Analysis in the Presence of Pointers
In the presence of pointers, program analysis has three problems. Firstly, with the
pointers, the unbounded data structures such as linked list can be built, which need to
be represented in a finite way. Secondly, we should give a new definition of data
dependence to fit the new circumstance. Finally, for a variable may point to a set of
locations in the presence of pointers, point-to analysis is needed. The solution to the
first problem is helpful to the new data dependence definition and point-to analysis,
which is a base. The second problem provides a goal by giving a new definition; and
the solution to the third problem helps to implement the goal.
Many researchers have proposed solutions to the first problem [9, 10]. Generally,
these methods use some approximation to deal with the unbounded data structures. A
sort of rough approximation is to consider the heap as a whole. To be more precise, it
needs shape analysis. Chase [10] distinguished the variables in the heap by the pointer
variables, and obtained the Storage Shape Graph (SSG) for every statement. This

Modular Monadic Slicing in the Presence of Pointers

751

paper uses a method whose precision is between the two methods mentioned above. It
considers all the heap space allocated in the same statement as an array, and implements the array as a whole.
The second problem is new definition of data dependence. Because the solution to
the first problem gives a finite way to represent the variables in the program, in this
case we can define the data dependence in terms of potential definitions and uses of
abstract memory locations [9]. In our extended slicing algorithm, this new definition
is implemented by point-to analysis, redefining the Refs(l.e) and considering the reference through the left-value expression of assignments.
The third problem is point-to analysis. According to whether using control-flow information, there are two classes of point-to analysis—flow-sensitivity and flowinsensitivity. Flow-sensitive analysis considers the control-flow information. It is
lower in efficiency and needs more space, but has high precision. However, flowinsensitive analysis suggests that the statements in the program can be executed in any
order. It can only obtain the point-to information for the whole program (or for a
certain area). For example, [6] obtains some point-to sets of every variable for every
function. So the flow-insensitive analysis isn’t very precise, but has high efficiency.
Especially, with the use of Union-find, its efficiency is nearly linear [8]. With the
inspiration of forward program slicing, our approach obtains the point-to information
by the data-flow iteration which is a flow-sensitive analysis. After integrating with
original slicing algorithm, the point-to relation and slicing are computed in the same
phase. Then instead of recording point-to information for every statement, we only
need to record the information for some current statements. So our method needs less
space compared with the traditional flow-sensitive analysis.

5 Modular Monadic Slicing Algorithm in the Presence of Pointers
5.1 Data Structure
With the pointers, we may need to update the slices of some variables at the same
time, so we extend the operator updSli of the abstract datatype Slices as follows:
updSli :: [Var] → Labels → Slices → ComptM ()
We also need to design the abstract datatype PT for point-to analysis:
type Var = String
type PT = [(Var, [Var])]
getPT :: ComptM PT, setPT :: PT → ComptM PT
lkpPT :: Var → PT → ComptM [Var], mrgPT :: PT → PT → ComptM PT
updPT :: [Var] → [Var] → PT → ComptM ()
The abstract datatype PT is a table of pairs of a single variable and its associated
point-to set (a set of variables). It has five operators getPT, setPT, lkpPT, updPT and
mrgPT, which return and set the current table of point-to sets, lookup a point-to set
corresponding to a variable in a given table of point-to sets, update some point-to sets
corresponding to a list of variables in a given table of point-to sets, and merge two
table of point-to sets into one table, respectively.

752

Z. Wu, Y. Zhang, and B. Xu

5.2 The Operations of the Expressions
In the premise of only considering simple dereference (Multi-dereference can be divided
into some simple dereferences), the assignments in language W can be divided into
eight classes, as shown below (the syntax is similar with C language):
(1) x := l.e′
(5) *x := l.e′

(2) x := l.y
(6) *x := l.y

(3) x := l.*y
(7) *x := l.*y

(4) x := l.&y
(8) *x := l.&y

And the fourth kind x := l.&y can be used to represent the statements that allocate
heap memory (y is considered as an array to address as a whole).
Table 1. The operations of the two classes of left-value expressions

Class of expressions

Variables to update

Updating method

Reference

X

x

Strong update

φ

*x

lkpPT(x, getPT)

Weak update

{x}

Table 2. The operations of the four classes of right-value expressions

Expression

e′
y
*y
&y

Point-to set

φ
lkpPT(y, getPT)
U lkpPT ( v , getPT )

v∈lkpPT ( y , getPT )

{y}

Reference

Refs(l.e′)
{y}

{y}∪ lkpPT(y, getPT)

φ

Among the eight classes of assignments, there are two classes of left-value expressions (x and *x) and four classes of right-value expressions (e′, y, *y, &y). The rightvalue expression e′ represents pure value computation (this paper doesn’t consider the
pointer arithmetic). For example, we suggest that the expression ‘x + 2’ won’t return
an address. And the expression y either returns a value or returns an address. To deal
with the two situations in the same way, we associate every variable with a point-to
set which initially is null [8]. For the assignments can be divided into left-, and rightvalue expressions to consider respectively, the operations of the six classes of expressions can be seen as atoms.
Before discussing these atomic operations, we need to redefine Refs(l.e). The variables appeared in the expression e can be divided into three classes. The first class
includes the reference variables. The second class includes the dereference variables.
The third class includes the variables whose address is obtained. Refs(l.e) includes the
first two classes of variables and the variables that may be referred after derefer the
variables in the second class. The formal definition is shown below:
Refs(l.e) = {x | x is in the first class}∪{y | y is in the second class}
∪ {z | z ∈ lkpPT(y, getPT), y is in the second class}

Modular Monadic Slicing in the Presence of Pointers

753

The extended algorithm also needs to update the information of a variable. The
process that uses new information to cover original information is called strong update. And the process that adds new information to the origin is called weak update.
Now, we show the six atomic operations. The operation for the left-value expression mainly relates to deciding which variable’s information need to be updated and
which variable is referred by the analyzed expression. As presented in table 1, the
solution to the left-value expression x is: strongly updating the slice and point-to set
of variable x because we only update one variable; this left-value expression doesn’t
refer any variables. As presented in table 1, the solution to the left-value expression
*x is: weakly updating the information of variables in lkpPT(x, getPT) because we
update a list of variables; this left-value expression refers to variable x.
The operation for the right-value expression mainly relates to deciding which variable is referred by the analyzed expression and obtaining the point-to set. The variables that is referred by the analyzed expression can be obtained by Refs(l.e), so we
focus on the way to obtain the point-to set. As presented in table 2, the expression e′
doesn’t give a point-to set; the expression y gives the point-to set—lkpPT(y, getPT),
which is the point-to set of variable y; the expression *y gives the point-to set—

U lkpPT

v ∈ lkpPT ( y , getPT )

( v , getPT ) , which is the union of the point-to sets of the variables

in lkpPT(y, getPT); the expression &y gives a simple point-to set {y}.
5.3 The Solution to the Statements
With the combination of the operations of left- and right- value expression, we can
address the assignments. And we pick four classes of operations to show below:
(1) x := l.*y =λL.{L′←{l}∪L ∪

U lkpSli ( r , getSli ) ;updSli([x], L′, getSli);

r∈ Re fs ( l.* y )

V′←

U lkpPT

( v , getPT ) ;updPT([x],V′,getPT)}

v∈lkpPT ( y , getPT )

(2) x := l.&y = λL.{L′ ← {l} ∪ L ∪

U lkpSli ( r , getSli ) ; V′ ← [y];

r∈ Re fs ( l.y )

updSli([x], L′, getSli);updPT ([x], V′, getPT )}
(3) *x := l.e′ = λL.{L′ ← {l} ∪ L ∪
lkpSli ( r , getSli ) ;T ← getSli;

U

r∈ Re fs ( l.e' ) ∪ {x }

updSli(lkpPT(x, getPT), L′, getSli);T′ ← getSli; mrgSli(T, T′)}
(4) *x := l.y = λL.{L′ ← {l} ∪ L ∪
lkpSli ( r , getSli ) ;T ← getSli;

U

r∈ Re fs ( l.y ) ∪ {x }

updSli(lkpPT(x, getPT), L′, getSli);T′ ← getSli;
mrgSli(T, T′);V′ ← lkpPT(y, getPT) ; P ← getPT;
updPT(lkpPT(x,getPT),V′,getPT);P′←getPT; mrgPT(P,P′)}
Because of the similarity of forward slicing and dataflow iteration, we can simply
add the point-to analysis to original implementation of the branch statement and loop
block as shown below:

754

Z. Wu, Y. Zhang, and B. Xu

if l.e′ then S1 else S2 endif =λL.{L′←{l}∪L∪

U lkpSli ( r , getSli ) ;

r∈ Re fs ( l.e' )

T ← getSli; P←getPT; S1 L′;T1←getSli;P1←getPT; setSli(T);
setPT(P); S2 L′; T2←getSli;P2←getPT; mrgSli(T1,T2);mrgPT(P1, P2)}
while l.e′ do S endwhile = Fix (λf. λL.{L′ ← {l} ∪ L ∪
lkpSli ( r , getSli ) ;

U

r∈ Re fs ( l.e' )

T←getSli; P←getPT; fL′{ S L′;T′ ←getSli;P′ ←getPT;
mrgSli(T,T′); mrgPT(P, P′)} } )
5.4 The Complexity of the Extended Algorithm
Based on the slicing algorithm shown in section 3, the extended algorithm augments the
point-to analysis. For the cost of point-to analysis is less than the cost of slicing, we can
only consider the cost of slicing. The extended
algorithm may need to update the slices of all vari1
flag := 1;
ables, so the operation of one statement may cost
2
if flag < 5 then
O(v), where v is the number of variables. Further3
s = &a
else
more, our extended algorithm will cost O(n × v),
4
s = &b
where n refer to the number of all labeled expresendif;
sions appeared (perhaps repeatedly) in the se5
c = 1;
quence of analyzing the program. Since we finally
6
while flag < 5 do
obtain the slices of all variables, the program slice
7
t = &c;
of each variable, on the average, costs O(n),
8
*s = *t;
which is the same as the worst complexity of the
9
flag = flag + 1
algorithm in [4]. So our extended algorithm doesn’t
endwhile;
add complexity.
10
write a
About the space complexity, we pay attention
Fig. 3. A sample program
to the constructions Refs(l.e), Slices, L′, L and
point-to sets. We can use space O(v × m) to store
Refs(l.e) and Slices, where m is the number of
labeled expressions. The label set L′ and L will cost O(m). And the point-to sets may
cost O(v × v). For v isn’t larger than m, our extended algorithm cost O(v × m), which
is the same as the original algorithm.

6 A Case Study
To clearly explain our extended algorithm, we analyze a concrete program (shown in
figure 3). Each expression is uniquely labeled (marked in source program). For example the second expression is flag < 5. We suppose S(v) and P(v) represent the slice
and point-to set of variable v, respectively. Initially, the slices and point-to sets of all
the variables are null. Below, we only give the variant part of the point-to set and
slice. After the first expression is executed, the slice of variable flag is: S(flag) = {1}.
The second to fourth expressions combine a branch statement, it assignment the
variable s. After executing this statement, the point-to set and slice of variable s is:
S(s) = {1, 2, 3, 4}

P(s) = {a, b}

Modular Monadic Slicing in the Presence of Pointers

755

Similarly, after executing the fifth expression, the slice of variable c is: S(c) = {5}.
The next four expressions combine a loop block, which needs iteration to obtain the
slices and point-to sets. After the first loop, the variant part is:
S(flag)={1, 6, 9} S(t)={7} S(a)={1, 2, 3, 4, 5, 6, 7}
S(b) = {1, 2, 3, 4, 5, 6, 7} P(t) = {c}
At this time, the computation hasn’t been convergent. After the second loop, the information of variable a and b is:
S(a) = {1, 2, 3, 4, 5, 6, 7, 9}

S(b) = {1, 2, 3, 4, 5, 6, 7, 9}

The slices and point-to sets hasn’t been convergent yet. After the third loop, the iteration is convergent, so the computing is end.
The tenth expression has no influence on the information, so the final result is:
S(flag) = {1, 6, 9}, S(s) = {1, 2, 3, 4}, S(c) = {5}, S(t) = {7},
S(a) = {1, 2, 3, 4, 5, 6, 7, 9}, S(b) = {1, 2, 3, 4, 5, 6, 7, 9};
P(flag) = φ, P(s) = {a, b}, P(c) = φ, P(t) = {c}, P(a) = φ, P(b) = φ
From the above information, we can get the final result of slices by Syn(s, L) [4].
For example, the final result of slice criterion <10, a > is {1, 2, 3, 4, 5, 6, 7, 9, 10},
where 10 is included because of the rule of write statement in Syn(s, L) [4].

7 Conclusions
For the traditional slicing methods lack modularity and flexibility, we have proposed
a novel formal slicing algorithm, called Modular monadic slicing algorithm [4]. To
addressing the pointers, this paper combines the point-to analysis with the original
monadic slicing algorithm. The feature of this algorithm is: our approach uses the
data-flow iteration which is a precise flow-sensitive method to obtain the point-to
information, but needs less space compared with the traditional data-flow iteration. In
addition, our approach also inherits the properties of language independence and
reusability from the original monadic slicing method.

References
1. Weiser, M.: Program slicing, IEEE Transactions on Software Engineering, 1984, 16(5), pp.
498-509
2. Binkley, D., Gallagher, K. B.: Program slicing, Advances in Computers, 1996, 43, pp. 150
3. Song, Y., Huynh, D.: Forward dynamic object-oriented program slicing, ApplicationSpecific Systems and Software Engineering and Technology (ASSET '99). IEEE CS Press,
1999, pp. 230-237
4. Yingzhou. Zhang, Baowen. Xu, etc: Modular Monadic Program Slicing, COMPSAC 2004,
Hong Kong, China, 2004, pp. 66-71
5. Liang, S., Hudak, P., Jones, M.: Monad transformers and modular interpreters, The 22nd
ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages,
POPL’95, ACM Press, New York, 1995, pp. 333-343

756

Z. Wu, Y. Zhang, and B. Xu

6. Michael Burke, Paul Carini, Jong-Deok Choi and Michael Hind: Flow-insensitive interprocedural alias analysis in the presence of pointers, In Proceedings of the Seventh International Workshop on Languages and Compilers for Parallel Computing, Aug 1994
7. Wadler, P.: Comprehending monads, ACM Conference on Lisp and Functional Programming, 1990, pp. 61-78
8. Bjarne Steensgaard: Points-to analysis in almost linear time, In 23rd Annual ACM
SIGACT-SIGPLAN POPL, Jan 1996, pp. 32-41
9. Susan Horwitz, Phil Pfeiffer and Thomas Reps: Dependence analysis for pointer variables,
In Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation, Jun 1989, pp. 28-40
10. David R. Chase, Mark Wegman and F. kenneth Zadek: Analysis of pointers and structures,
Proceedings of the SIGPLAN '90 Conference on Program Language Design and Implementation, White Plains, NY, Jun 1990, pp. 296-310

