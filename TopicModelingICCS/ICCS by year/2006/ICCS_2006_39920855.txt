DigitalTree: A Tool for Displaying Biological
Data in Tree Structure
Robin Kramer1, Victor Olman2 , Ying Xu2 , and Dong Xu1
1

Computer Science Department and Christopher S. Bond Life Sciences Center,
University of Missouri-Columbia, Columbia MO 65211-2060, USA
kramer@mizzou.edu, xudong@missouri.edu
2
Department of Biochemistry and Molecular Biology and Institute of Bioinformatics,
University of Georgia-Athens, Athens, GA 30602-7229, USA
olman@csbl.bmb.uga.edu, xyn@bmb.uga.edu

Abstract. We developed a computational tool, DigitalTree, for displaying a two-dimensional weighted tree of biological data. Existing methods, Radial Layout, Hyperbolic Layout, Phyllotactic Placement, and
Force-Directing were integrated into DigitalTree. DigitalTree preserves
the distances between nodes in the tree and the trees topology. The tool
has been applied in analyzing microarray data and phylogenetic trees.
DigitalTree is available for download at http://digbio.missouri.edu/~
digtree.

1

Introduction

Weighted trees, representing biological data, have been widely used. Phylogenetic
trees can represent biological species and genes in a tree structure. Biological
data can be organized in a Minimum Spanning Tree (MST) for clustering [9].
Most of these biological data are complex and have high dimensions. Visualizing
the tree structure for the biological data on a two-dimensional (2D) plane is
useful in terms of understanding the relationships among the vertices in the
tree. Various techniques have been developed for displaying trees or graphs,
including Force-Directed[4], Radial Layout[7], Hyperbolic Layout[3], Phyllotactic
Layout[1], and Information Visualization [5]. Although some distortion in the
weight relationship among vertices is expected due to the projection from high
dimension to 2D, existing methods typically do not preserve the ratios among
edges of the displayed tree. In addition, these tools generally lack utilities for
handling standardized biological data, such as the widely used phylogenetic tree
format.
We developed an algorithm for laying out general weighted, both rooted and
unrooted, trees on a 2D plane. This algorithm was implemented as a tool for
displaying speciﬁc biological data on a personal computer. A weighted tree contains a set of weighted edges such that no vertex can be its own ancestor. A
layout is a set of abstract coordinates that can be displayed, with only simple
transformations (rotation, translation, scaling, and shearing) being performed.
Computer visualization preprocesses for the eye and as such adheres to aesthetic
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 855–862, 2006.
c Springer-Verlag Berlin Heidelberg 2006

856

R. Kramer et al.

principles. Conﬂicting aesthetic principles like spreading every vertex away from
each other vertex and preventing edge crossings are balanced by DigitalTree,
while maintaining the integrity and quantity of information being displayed.

2

Algorithm and Methods

In this section, we will discuss various techniques that we used for tree display,
including choosing a root, calculating angles, placing vertices, optimizing layouts,
adjusting angles, and choosing orderings of the children. The layout includes
two parts: (1) placing an initial 2D layout based on certain angles of children
around their parent vertex, while ratios among the edge weights are preserved;
(2) optimizing the placement through an objective function using the steepest
descent optimization.
2.1

Choosing a Root

From a tree T = {V, E}, with the set V of vertices with parents P (v) or children
C(v) and a set E of edges with weights w(e) where e ∈ E, v ∈ V , DigitalTree
ﬁrst chooses a root that balances the tree. For this purpose, we deﬁne a path γ
between two vertices i and j as γi,j containing edges e ∈ γi,j . A path’s length is
the sum of the weights of edges on the path. The root quality of the i-th vertex
is calculated as follows.
⎧
⎫
⎨
⎬
w(e)
Δi =
⎩e∈γ
⎭
j=i

i,j

Root is a vertex with index, such that
iroot = arg min Δi .
i

2.2

Calculating Angles

Once the root is determined, all descendants are placed on a 2D plane at angles relative to the ﬁrst child placed, with the lengths of edges proportional to
corresponding edge weights. Then the ﬁrst grandchild of each child is placed
relative to the boundary between the child and its closest sibling, and the rest
of the children for a vertex are placed relative to the previously placed sibling,
and so on and so forth. Although the placement algorithm for the edges is different, the angles themselves are chosen in a similar manner to the algorithm in
Nicheworks [7].
For a sub-branch of T rooted at a vertex v, L(v) is the number of vertices
that are leaves. Note that L(v) for a parent vertex is equal to the sum of the
L(v) values of its children. Therefore, L(v) of the root has as many leaves as the
entire tree, and a leaf has L(v) = 1, i.e.,
L(v) =

1

if v a leaf,
u∈C(v) L(u) otherwise.

DigitalTree: A Tool for Displaying Biological Data in Tree Structure

βP (0)

857

β1

β0

Fig. 1. A drawing of the edges and boundaries for a tree layout. The solid straight lines
represent the edges of the tree. The dashed lines extending from the vertex represent the
boundaries on the portion of the drawing surface which is allotted for drawing an edge
and its descendant edges. The βs represent the angles between the two dashed lines.

As shown in Figure 1, we deﬁne the boundaries between the siblings and
the parents, relative to the ﬁrst boundary of the ﬁrst child of the root. The
children of a vertex are ordered v = 0, 1 . . . vn . The angle βv at each child vertex
is proportional to its parent angle βP (v) and its leaf count L(v), and inversely
proportional to the parent leaf count L(P (v)). In the case of the root vertex the
angle is 2π, i.e.,
βv =

2π
βP (v)

if v is the root,
L(v)
L(P (v))

otherwise.

(1)

We align the ﬁrst child of the root relative to the horizontal axis of the 2D plane.
Then the angle of a boundary relative to the horizontal axis is
⎧
⎪
for the ﬁrst child of the root,
⎨0
θv = θP (v)
(2)
for the ﬁrst child of a parent,
⎪
⎩
θ(v−1) + β(v−1) for every consecutive child with the same parent.
(0)

Then the initial layout of the angles αv between an edge and the horizontal
axis can be calculated as
βv
+ θv .
α(0)
v =
2

858

R. Kramer et al.

As a result, for each vertex v and its vertex (xv , yv ) = V (αv ), we place the
coordinates of the root vertex at (0, 0), and the coordinates for every other
vertex (xv , yv ) according to αv , with preserved edge weight ωv , i.e.,
V (αv ) =

(cos(αv )ωv + xP (v) , sin(αv )ωv + yP (v) ) v = root,
(0, 0)
v = root.

We can prove that an initial placement of the vertices has no crossing between
edges.
proof: For a child vertex v and the corresponding angles αv and θv , an edge
can be represented by
tcos(αv ) + xP (v) , tsin(αv ) + yP (v) , 0 < t < ωv ,
θv < αv < θv+1 .

(3)
(4)

The boundaries of the edge can be represented by
tcos(θv ) + xP (v) , tsin(θv ) + yP (v) , 0 ≤ t,

(5)

tcos(θv+1 ) + xP (v) , tsin(θv+1 ) + yP (v) , 0 ≤ t.

(6)

By Equations (3-6) the above edge will not intersect the boundaries of its siblings
or its parent given Equation (2):
θP (v) ≤ θv ,

(7)

θv+1 ≤ θP (v)+1 .

(8)

with the boundaries of the parent of this edge represented as
tcos(θP (v) ) + xP (P (v)) , tsin(θP (v) ) + yP (P (v)) , 0 ≤ t,

(9)

tcos(θP (v)+1 ) + xP (P (v)) , tsin(θP (P (v))+1 ) + yP (P (v)) , 0 ≤ t.

(10)

Therefore, given that a vertex (xP (v) , yP (v) ) is chosen within its own bounding
area according to Equations (9,10), the edges of its children cannot intersect
their own bounding areas.
2.3

Optimizing the Layout

Based on force-directed methods for creating MST layouts [4], the initial set
of angles are reﬁned. The coordinates of vertices are then evaluated with an
objective function f (xv , yv ) given by:
n

f (xv , yv ) =
i=1

1
.
1 + e−(xi −xv )2 −(yi −yv )2

DigitalTree: A Tool for Displaying Biological Data in Tree Structure

859

where n is the total number of vertices on the tree. The set of angles α and
coordinates (xv , yv ) = V (αv ) can be found through minimizing f (xv , yv ), i.e.,
α = arg

min
α

f (V (αi )) .
i

A step size of δ equal to one half of the smallest β between any of the boundaries
was chosen for calculating the next set of angles α = α + δ(−1)n . Each vertex
was updated as its gradient was calculated (rather than after all the gradients
had been calculated). This way each edge responds to the updated position of the
previous edge, and will not accidentally try to occupy the same location. Also,
as one branch is updated all descendants are updated by that same amount.
Hence, the gradient algorithm would be less likely to make edge crossings. The
next α was calculated according to
= δ {f (xv , yv ) − f (xv , yv )} + α(l)
α(l+1)
v
v ,
where l is the optimization iteration step.
To take advantage of the space introduced by displacing the child vertex from
the parent, and to facilitate the gradient optimization, the angle βi is enlarged
proportional to the distance from the parent ωi , i.e.,
cωv
,
βv = βv +
log(n)
where βv is from Equation (1), n is the number of vertices in the tree, and c is a
constant, which was empirically found c ≈ 0.1 for good results. The adjustment
improves initial appearance and convergence time for both large and small trees.
2.4

Ordering the Children: Phyllotaxis

Phyllotaxis is the placement of new leaves, branches, petals, etc. based on ordering of the children for improving the quality of the tree layout. The idea of
Phyllotaxis came from plants. Although plants with limited surface areas are uncertain about the ﬁnal shape of their branches, plants know that earlier branches
are likely to be larger with more sub-branches than later branches. The Golden
1
for placing the
Ratio φ ≈ 1.618 is used to derive the Golden Angle χ = 2π 1+φ
new petal of a ﬂower, i.e., ρ(i+1) relative to the last ρi satisﬁes the phylotactic
angles (ρi = ρ(i+1) + χ). Analogously, the ﬁnal shape of each DigitalTree branch
is uncertain, and placing the longer branches away from each other, takes better
advantage of space. In particular, at a vertex in tree with N children and N
phyllotactic angles, we have
ck : k = (1 . . . N ), βk > β(k+1) ,
ρi : ρi ∈ (0, 2π), i = (1 . . . N ), ρi < ρ(i+1) .
The phyllotactic arcs are ρˆi = 12 ρ(i−1) − ρ(i+1) , i0 = iN . With the ordering
ρˆk : ρˆk > ρˆ(k+1) , the order of the children ck is mapped to the phyllotactic
order ci . This ensures that the longest branches are placed where the most space
in the phyllotaxis would be.

860

2.5

R. Kramer et al.

Complexity Analysis

Picking the root vertex is O(n2 ), and is a small portion of the time involved
in calculating the layout. Breadth ﬁrst traversals can be used to calculate both
{θ, β, V (α(0) )} and V (α(l) ). These are linear in the number of vertices in the
data set O(n). At each gradient step and with m gradient steps, the objective
function is evaluated n times. The objective function for general unweighted
force-directed methods is O(n) [6], because there is only one vertex moving at
a time. Hence, with the average number of descendants from a vertex approximated by O(log(n)), the objective function is on average O(n log(n)) as only the
vertex and its descendants need to measure its distance from each other. This
makes DigitalTree’s total computational complexity O(mn2 log(n)).

3

Implementation and Features

The algorithm was implemented in the C programming language for speed, while
the graphical user interface (GUI) was implemented in Java which called the C
code through native interfaces. The algorithm makes use of breadth ﬁrst and
depth ﬁrst searches in a number of places, these are all coded in while loops for
eﬃciency, rather than with recursive function calls. DigitalTree can handle more
than 10,000 vertices including optimization and display in 10 minutes on a typical

Fig. 2. A screen shot of DigitalTree interface

DigitalTree: A Tool for Displaying Biological Data in Tree Structure

861

desktop PC with 1 GB memory. There is a DigitalTree ﬁle format output from
the C package, which the GUI reads and writes. This format stores the parentchild relationships, weights, vertex numbers, vertex names, and coordinates and
colors of the vertices.
DigitalTree is a standalone package and it is also incorporated into EXCAVATOR [8], a MST-based clustering package. To produce even better displays,
there are several editing features, which allow the user to rotate, zoom, re-center
the tree (see Figure 2). DigitalTree also allows the user to move branches of the
tree. DigitalTree can parse a number of input formats, in particular the most
common phylogenetic tree ﬁle format, Newick. The Newick ﬁle parser was written using spirit++. The outputs of common phylogenetic tree construction tools
Phylip, ClustalW and PAUP* can be used. In Phylip there is no need to change
formats. In ClustalW, the result can be saved into the Phylip format. In PAUP*,
one can use the command (with the ﬁle extension .dnd):
savetrees file=BestMLtree.phy brlens format=phylip;

4

Discussion

In summary, we developed a package DigitalTree for displaying a weighted tree
on a 2D plane with preserving the ratios among edges. It incorporates and improves various existing algorithms. DigitalTree can handle large-scale biological
data and support various existing formats (e.g., the Newick and EXCAVATOR
ﬁle formats). It facilitates pattern discovery and visualization with interactive
features, such as editable vertices, a scale key, and vertex search.
DigitalTree provides a nice layout for weighted tree structures. The layout is
especially useful when the underlying measure of distance behaves according to
the properties of norms, such as Euclidean distance or Manhattan distance, because inferences about vertices which are connected through other vertices can be
made. DigitalTree is also useful for displaying trees with correlation coeﬃcients
and phylogenetic distances, which do not satisfy the properties of norms. With
correlation coeﬃcients it is useful to recognize which vertices are highly correlated with many other vertices. With phylogenetic trees it is especially useful to
see what the evolutionary distance might be.
DigitalTree ﬁlls a unique niche which has not been covered by previous layout algorithms. Force directed methods with random layouts, performing well
on cyclic graph structures, converge with edge crossings on large tree structures.
While edge crossings are admissible or necessary in large cyclic graph structures,
they are not in tree structures. Although Rradial Layouts are linear in the number of nodes for tree structures and have no edge crossings, they do not take
full advantage of the screen space. Hyperbolic Radial Layouts provide a user
with a method to zoom in on parts of the graph at the expense of distorting the
relative sizes of the tree. DigitalTree provides a method which preserves the ratios among the lengths of edges, while minimizing edge crossings and optimizing
screen usage.

862

R. Kramer et al.

Acknowledgments
This project is supported by a National Science Foundation grant NSF/ITRIIS0407204. RK was also supported by a short-term fellowship sponsored by National Library of Medicine, National Institute of Health during the summer of
2005. VO and YX’s work is also supported in part by the U.S. Department
of Energys Genomes to Life program under project Carbon Sequestration in
Synechococcus sp: From Molecular Machines to Hierarchical Modeling, National
Science Foundation Grants NSF/DBI-0354771, and a ”distinguished scholar”
grant from Georgia Cancer Coalition.

References
1. Carpendale, S., Agarawala, A.: PhylloTrees: Harnessing Nature’s Phyllotactic Patterns for Tree Layout. InfoVis. (2004).
2. Chen, C., Morris, S.: Visualizing Evolving Networks: Minimum Spanning Trees versus Pathﬁnder Networks. InfoVis. (2003) 9.
3. Lamping, J., Rao, R., Pirolli: A focus+context technique based on hyperbolic geometry for visualizing large hierarchies. Conference on Human Factors in Computing
Systems. (1995) 401-408.
4. Noel, S., Chu, C.H., Raghavan, V.V.: Visualization of document co-citation counts.
In Proceedings of the Intl. Conf. on Data Mining. (2002) 691-696.
5. Plaisant, C.: The challenge of information visualization evaluation. In Proceedings
of the Working Conference on Advanced Visual interfaces. (2004) 109-116.
6. Pulo, K.J.: Recursive space decompositions in force-directed graph drawing algorithms. In Australian Symposium on Information Visualisation. 9 (2001) 95-102.
7. Wills, G.J.: NicheWorks-Interactive Visualization of Very Large Graphs. Journal of
Computational and Graphical Statistics. 8 No. 2 (1999) 190-212.
8. Xu, D., Olman, V., Wang, L., Xu, Y.: EXCAVATOR: a computer program for gene
expression data analysis. Nucleic Acid Research. 31 (2003) 5582-5589.
9. Xu, Y., Olman, V., Xu, D.: Clustering Gene Expression Data Using a GraphTheoretic Approach: An Application of Minimum Spanning Trees. Bioinformatics.
18 (2002) 526-535.

