Combined Method for Nonlinear Systems of Equations∗
Peng Jiang1, Geng Yang2, and Chunming Rong3
1,2

School of Computer Science and Technology, P.O.Box 43,
Nanjing University of Posts and Telecommunications, 210003, Nanjing, China
alice20006@hotmail.com,
angg@njupt.edu.cn
3
Department of Electrical and Computer Engineering, University of Stavanger, Norway
chunming.rong@uis.no

Abstract. This paper proposes Block Broyden Method combined with SSOR
preconditioning technique for solving nonlinear systems of equations. The implementation process is described in detail and the time complexity is analyzed.
This method has faster solving speed and better performance than the unpreconditioned one, which is shown by several numerical tests arising from the
Bratu problem. Therefore, it can be used in the large-scale problems arising
from scientific and engineering computing.

1 Introduction
[1]

The Block Broyden Method is an effective iterative algorithm for solving nonlinear
equations. It parallelizes very well and gives good CPU time savings. However,
the iterative matrix in the Block Broyden Algorithm is a block diagonal matrix so
that partial relevant information among the nodes is lost, therefore affecting the
convergence speed of the algorithm to some extent. Hence, seeking for proper pre[2, 3]
is one of the effective ways to solve this problem. Some
conditioning methods
preconditioners are proposed and analyzed in paper [4, 5].
In this article, we combine SSOR preconditioner with the Block Broyden Method.
We organize our article as follows. Section 2 introduces SSOR preconditioner.
Section 3 gives general remarks on SSOR Preconditioner based on Block Broyden
Algorithm, and it also shows the implementation details and analyzes the time complexity. Some numerical results and interpretation of these results are included in
Section 4. Section 5 contains the summary remarks.

2 SSOR Preconditioner
We suppose there are large sparse linear systems of the form as (1)

Ax = b .
∗

(1)

This work was supported in part by the Natural Science Foundation of Jiangsu Province under
Grant No 05KJD520144 and the Foundation of the QingLan Project KZ0040704006).

（

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 693 – 699, 2006.
© Springer-Verlag Berlin Heidelberg 2006

694

where

P. Jiang, G. Yang, and C. Rong

A = [ai , j ] is an n × n matrix and b a given right-hand-side vector. If the

original, symmetric, matrix is decomposed as A = D + L + L in its diagonal, lower
and upper triangular part, the SSOR matrix is defined as
T

M = ( D + L) D −1 ( D + L)T .

(2)

Then we can calculate the inverse of the preconditioner and get the transformed
linear system

M −1 Ax = M −1b which has the same solution as (1).

3 SSOR Preconditioner Based on Broyden Algorithm
3.1 General Remarks
In the following discussion, we are concerned with the problem of solving the large
system of nonlinear equations as (3):

F ( x) = 0 .

(3)

where F ( x ) = ( f1 ,L. f n ) is a nonlinear operator from R to R , and x ∈ R
is an exact solution. Suppose that the components of x and F are divided into q
blocks:
T

n

⎛ F1 ⎞
⎜ ⎟
F =⎜ M ⎟
⎜ ⎟
⎝ Fq ⎠

n

*

n

⎛ x1 ⎞
⎜ ⎟
x=⎜ M ⎟
⎜ ⎟
⎝ xq ⎠

We consider generalization of the Block Broyden algorithm with Preconditioning
method (BBP) as follows:
Algorithm 3.1.1. BBP Method
0

*

0

1. Let x be an initial guess of x , and B an initial block diagonal approximation
of J ( x ) . Calculate r = F ( x ) .
2. For k = 0, 1…until convergence:
0

0

0

2.1 Solve B s = − r :
2.1.1 Calculate SSOR preconditioner according to (2) and get the preconditioned equation.
2.1.2 Solve the preconditioned equation by Jacobi method.
k

k

k

2.2 Update the solution x

= xk + sk .
k +1

= F ( x k +1 ) . If r is small enough, stop.
k T k
k +1
2.4 Calculate ( s ) s and update B by
2.3 Calculate r

k +1

k +1

Combined Method for Nonlinear Systems of Equations

Bik +1 = Bik +
Then set k

ri k +1 ( sik )T
.
( s k )T s k

695

(4)

= k + 1 , and go to step 2.

3.2 Implementation
The first step in Algorithm 3.1.1 is the preparation stage. The second step is an iterative process. We update the solution x k + 1 according to step 2.2, and calculate the
residual according to step 2.3. If the residual is smaller than a given value or the number of iterations is larger than an upper bound value, the iteration process is stopped.
Otherwise, the inner product of s k is calculated and B k + 1 is updated to repeat the
iteration. Fig.1 describes the computing flow.
Begin

Calculate

B0 , x0 , r 0

Using preconditioning technique to get s k ,
calculate

x k +1 , r k +1 and the inner product of s k

|| r k +1 || 2 < ε

Stop

Or iter > m

Calculate B

k +1

, set k: =k+1

Fig. 1. The computing flow of BBP method

3.3 Time Complexity
In Algorithm 3.1.1, let

L(ni ) be the complexity of solving each block linear equations
q

B s = − ri , then the complexity of step 2.1 is L(n) = ∑ L(ni ) . Step 2.2 needs
k k
i i

k

i =1

q

n additions and the complexity is

n = ∑ ni . The residual is calculated in step 2.3,
i =1

696

P. Jiang, G. Yang, and C. Rong

and let R(n) be the corresponding calculative cost. The complexity of step 2.4 is
q

∑ (3n − 1 + 2n

2
i

i

) . Therefore the total complexity of Algorithm 3.1.1 is:

i =1

q

q

i=1

i=1

U = ∑(L(ni ) + ni + 3ni −1 + 2ni2 ) + R(n) = ∑(4ni −1 + 2ni2 ) + L(n) + R(n) .

(5)

We can know that from (5) that the total complexity U differs in L(n) , which means

s = − ri k . We will calculate

k k
i

the complexity of solving q block linear equations Bi

L(n) for unpreconditioned method and SSOR preconditioning method respectively.
For unpreconditioned method, we simply use Jacobi method to solve each block
linear system. So L( ni ) is the complexity of jacobi, which is (number of steps) ×
(cost per step) = k i

× J n . It can be easily known that
3

2

J n = ( 2n + n + n ) .

(6)

So we can calculate L(n) as follows:
q

Ln (n) = ∑ k i × (2n + n + n) = k n × J n .
3

2

(7)

i =1

q

where

k n = ∑ ki refers to the addition of number of iterations in each block using
i =1

unpreconditioned method.
For SSOR preconditioner combined with Jacobi method,

L(ni ) is the computa-

tional cost of construct the preconditioner plus the complexity of Jacobi, then we can
get L(n) as follows:
q

q

i =1

i =1

L p (n) = ∑ L(ni ) =∑ ( M i + ki × J n ) = q × M + k p × J n .

(8)

q

where

k p = ∑ ki refers to the addition of number of iterations in each block for
i =1

SSOR method, and

M means the complexity of constructing SSOR Preconditioner.

M can be easily known as follows:
4

2

3
n
n
n
+ 5n +
+ .
M=
3
6 2

(9)

Now the performance of each method can be compared exactly according to (7)
and (8).

Combined Method for Nonlinear Systems of Equations

697

4 Numerical Experiments
In the numerical experiments, we compare the convergence speed and efficiency of
SSOR preconditioning method with the unpreconditioned one for solving a Bratu
problem in computational physics. The programming language is C++, using double
float variables to calculate the problem.
The nonlinear partial differential equation can be written as

⎧− Δ u + u x + λe u = f ,
( x, y ) ∈ Ω = [0,1] × [0,1] .
⎨
u
|
0
=
⎩ ∂Ω

(10)

2

on the unit square Ω of R with zero Dirichlet boundary conditions. It is known as
the Bratu problem and has been used as a test problem by Yang in [1] and Jiang in
[4]. The function f is chosen such that the solution of the discretized problem is unity.
Using a linear element P, a standard finite element approximation gives a large system of nonlinear equations of size N . Forλ≥0， the system has a unique solution. In
the following tests, we suppose f=e， λ=1 and N=50, 80 and 110, giving three grids,
M1, M2 and M3, with 2500, 6400 and 12100 unknowns, respectively.
2

Let r be the nonlinear discretized function of dimension

n = N 2 obtained from

k

(10), so the residual vector norm is || r || 2 , where k is the number of nonlinear iterations. We also set an upper bound value m=5000. The stopping criterion used in the
following tests is either

|| r k ||2 < 10−5 or m>5000. From boundary condition we can
0

get the initial solution x = 0 and the initial block jacobi matrix B .
When the grid is M1, we set the block number as q1=800. When the grid is M2, we
set q2=1600. When the grid is M3, we set q3=1000 and q4=2000 respectively. Table
1, 2, 3, and 4 show the number of nonlinear iterations, which is denoted by “k”, and
the sum of numbers of iterations for solving each linear block during the i-th nonlinear iteration, which is denoted by “k[i]”.
0

Table 1. Comparison of the total number of iterations in M1, q1

k
k[145]
k[440]

SSOR
983
1467
880

No Preconditioner
1289
5618
3173

Table 2. Comparison of the total number of iterations in M2, q2

k
k[675]
k[1100]

SSOR
3526
2941
2356

No Preconditioner
4003
7597
7032

698

P. Jiang, G. Yang, and C. Rong
Table 3. Comparison of the total number of iterations in M3, q3

SSOR
3987
1369
528

k
k[790]
k[2420]

No Preconditioner
4479
5839
5010

Table 4. Comparison of the total number of iterations in M3, q4

SSOR
4013
2417
1100

k
k[1200]
k[2400]

No Preconditioner
4499
8919
7661

From Table 1 to Table 4, the following observations can be made: The number of
nonlinear iterations is almost the same, but the number of iterations in each block is
much smaller for SSOR method. This is because we do not apply any preconditioning
technique to solve the nonlinear system (3)， but combine it with Block Broyden Algorithm to solve each linear block, as described in step 2.1 of Algorithm 3.1.1.
However, the performance of each method should not be determined by the numbers of iterations, but be judged according to formulas given in Section 3.3. Data
shown in Table 4 is used as an example. During the 2400–th iteration, the following
can be known:

k p = 1100 , k n = 7661 , q4 = 2000 , n = M 3 / q4 = 12100 / 2000 = 6
Thus we can calculate

M according to (9):

4

2

3
n
n
n 64
62 6
M=
+ 5n +
+ =
+ 5 × 63 + + = 1521
6 2
3
6 2 3

J n is calculated according to (6):
3

2

J n = 2n + n + n = 2 × 6 3 + 6 2 + 6 = 474
The value of

Ln (n) for the unpreconditioned method can be calculated according

to (7):

Ln (n) = k n × J n = 7661 × 474 = 3631314
The value of

L p (n) for SSOR method can be calculated according to (8):

L p (n) = q × M + k p × J n = 2000 × 1521 + 1100 × 474 = 3563400
We find that

L p (n) < Ln (n) , which can be verified by other experimental data, so

the performance of SSOR method is much better than the unpreconditioned one.

Combined Method for Nonlinear Systems of Equations

699

5 Conclusions
We have proposed Block Broyden Method combined with SSOR preconditioner for
solving nonlinear systems arising from scientific and engineering computing. This
method has faster solving speed and better performance than the unpreconditioned
one. One of the reasons is that a proper preconditioner is used to transform the system, so the spectral properties of the broyden matrix is improved and quick convergence speed is gained. On the other hand, as the iterative matrix is block diagonal, the
algorithm only needs to store the diagonal matrix, thus largely reduces memory space.
In future work, we expect to develop more effective preconditioning methods
combined with Block Broyden Algorithm so that the preconditioned system can converge quickly and meanwhile can be constructed as easily as possible.

References
1. Yang G, Dutto L, Fortin M: Inexact block Jacobi Broyden methods for solving nonlinear
systems of equations. SIAM J on Scientific Computing (1997) 1367-1392
2. Y. Saad, H. A. van der Vorst: Iterative solution of linear systems in the 20th century. J
Comput Appl Math (2000) 1-33
3. Von Hagen. J, Wiesbeck.W: Physics-based preconditioner for iterative algorithms in MoMproblems. IEEE Trans on Antennas and Propagation (2002) 1315-1316
4. Peng Jiang, Geng Yang: Performance Analysis of Preconditioners based on Broyden
Method. Applied Mathematics and Computation (Accepted for publication)
5. Peng Jiang, Geng Yang: A Preconditioning Method based on Broyden Algorithm.
Journal of Nanjing University of Posts and Telecommunications (in Chinese)
(Accepted for Publication)

