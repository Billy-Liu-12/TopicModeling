Rearrangement of Noisy Genomes
Chunfang Zheng1 and David Sankoﬀ2

2

1
Department of Biology,
University of Ottawa, Canada K1N 6N5
Department of Mathematics and Statistics,
University of Ottawa, Canada K1N 6N5
{czhen033, sankoff}@uottawa.ca

Abstract. Measures of distance between genomic maps are inﬂated by
high levels of noise due to incorrectly resolved paralogy and error at
the mapping, sequencing and alignment levels. Comparison is also hampered by lack of information on gene orientation and lack gene order. We
suggest a suite of algorithms for genome rearrangement analysis in the
presence of noise and incomplete information, and test its robustness as
noise levels increase.

1

Introduction

The comparison of genomic maps is susceptible to high levels of noise that
threaten the accuracy and signiﬁcance of the results. This noise is due to error
at the mapping, sequencing and alignment levels, and to incorrect assignment of
orthology due to gene, segment or genome duplication. Comparison is also sometimes hampered by lack of gene orientation information and poor resolution of
gene order [7]. We suggest an approach to genome rearrangement analysis in the
presence of noise and estimate its robustness as simulated noise levels increase.
Our method, designed particularly for unsigned genes (unknown DNA strand)
in multichromosomal contexts, is focused on the combinatorial search for the
optimal set of compatible “pre-strips”. A pre-strip is a set of two or more genes,
not necessarily contiguous, on a single chromosome in one genome matched with
genes in the same order (or reversed) on any single chromosome in the other
genome, i.e., a non-trivial common subsequence of the two chromosomes (one of
them possibly reversed). Any set of compatible pre-strips, when all other genes
have been deleted from the genomes, becomes a set of “strips”; a strip [5, 4] is a
pre-strip with all terms contiguous on the chromosome.
The compilation of pre-strips for our analysis proceeds by an initial identiﬁcation of all maximal, or inextensible, pre-strips, i.e., pre-strips not contained
in another pre-strip, followed by the addition of certain non-maximal pre-strips
contained in each maximal pre-strip. We then deﬁne a compatibility relation
among all these pre-strips, namely whether or nor they can coexist in the same
chromosome. This is submitted to a search for a maximum-weight clique (MWC),
using the algorithm in [6], where the weights are just the number of genes in the
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 791–798, 2006.
c Springer-Verlag Berlin Heidelberg 2006

792

C. Zheng and D. Sankoﬀ

pre-strip. Though of course this algorithm may not execute in polynomial time, it
is relatively eﬃcient for dense graphs [1], such as the one representing pre-strips
for multichromosomal genomes: here, a given pre-strip will not usually involve
the same two chromosomes as another pre-strip, and hence will necessarily be
compatible with it.
Once the maximal compatible set of pre-strips cum strips is output from the
MWC routine, these can be signed by the method in [4], and then submitted to
standard rearrangement (GR) algorithms [3, 8, 9].
A large proportion of singletons, i.e., genes not in any pre-strip and hence not
considered in the MWC analysis, are nonetheless usually compatible with the
output of the MWC and can be reincorporated into the solution, but this must
be done judiciously, depending on the origins of the original data.
We test our method on genomes with 100 genes partitioned among four chromosomes, subjecting them to a ﬁxed series of random translocations and inversions before the addition of various levels of noise. Under conditions of moderate
noise, the method can assign almost all genes to strips and recover the rearrangements. With increasing noise levels, the distance calculation remains surprisingly
stable, though the original rearrangements can no longer be inferred.
In the succeeding sections, we will describe each step as follows:
i) Compile set of all maximal (inextensible) pre-strips. Augment set by adding
certain non-maximal pre-strips (Section 2).
ii) Apply MWC [6], with weight = number of genes in a strip (Section 3).
iii) Assign gene orientation according to strip analysis [5, 4] (Section 4).
iv) Input into standard genome rearrangement (GR) algorithm (Section 5).
v) Restoration of singletons (Section 6).
vi) Simulations (Section 7).
Steps i - iii are exact for the problem of maximum weight strip analysis when
singletons are disregarded. Step i is NP-hard, but is tractable for a ﬁxed number
of pre-strips, and is very rapid for realistic data. Step ii is NP-hard and is the
rate-limiting step in our analysis. Step iii takes polynomial time and is linear if
there are no two-term strips in the output of Step ii. Step iv is polynomial. There
are several options for Step v. We present exact solutions for three of them.

2

The Pre-strips

Because mapping and other errors are likely to result in singleton genes in discordant genomic contexts in the two species being compared, our strategy is to rely
entirely on strips to decide which data are erroneous and which are meaningful.
But we have to start with structures that are more general than strips in two
ways. Intervening error singletons may disrupt a strip, destroying contiguity, or
a gene that should be in a strip may be itself erroneously mapped out of the
strip, leaving its left and right neighbours adjacent in one of the genomes.
The common order (or its reverse) of the terms of a strip in the two genomes
is the only aspect of its structure we have access to. Thus we search for common

Rearrangement of Noisy Genomes
A1

A2

B3

B2

Genome 1

a1 a2 a3 a4 a5 a6 a7 a8 a9

Genome 2

a1 a3 b10 b9 b8 a4 a5 b6 a6 b3 b4 b5 a9 a7 a8

B1

a1 a3 A1 a6 a9
a1 a3 A1 a6 A2
a9 a7
a9 a8

a1 a3
a1 a3 A1
a1 a3 A1 a6
a3 A1
a3 A1 a6
a3 A1 a6 a9
A1
A1 a6
A1 a6 a9
a6 a9

A1

793

B1

b1 b2 b3 b4 b5 b6 b7 b8 b9 b10

B2

A2

b1 b2 a2 b7

B3

Maximal Pre-strips
B1 b6 b3
B1 b6 b4
B1 b6 b5
B2
B3 b7
Additional Pre-strips
B1 b6
b6 b3
b6 b4
b6 b5
B1
a3 A1 a6 A2
A2
B3
A1 a6 A2
a6 A2

Fig. 1. Example of maximal pre-strips and additional pre-strips to be tested for compatibility. Genomes 1 and 2 both contain two chromosomes. Groups of contiguous genes
in both genomes labeled with capital letters. All maximal pre-strips containing A1 intersect with all those containing B1, and are hence incompatible with them. Similarly,
the three maximal pre-strips containing a9 are incompatible with each other.

subsequences in the two genomes as potential strips – pre-strips – relying on the
subsequent analyses to eliminate the singletons and thus reveal the underlying
strips. As a ﬁrst step then we identify all maximal pre-strips by ﬁnding all
inextensible common subsequences (and reversed order common subsequences)
of the genes in all pairs of chromosomes, one chromosome from each genome.
This is easily programmed to run in polynomial time, as long as the number
of maximal pre-strips is a ﬁxed parameter, or even when the number of such
pre-strips is allowed to grow polynomially as a function of the number of genes.
Our goal is to ﬁnd strips, i.e., to reduce the pre-strips to strips by eliminating
extraneous genes from the chromosome that interrupt the contiguity of pre-strip
genes. As shown in Figure 1, two maximal pre-strips may intersect, so that both
cannot be present in a solution. However all or part of one and part of the other
may be present, so that some non-maximal pre-strips must be considered in our
search strategy. It suﬃces to use all contiguous fragments of a maximal pre-strip,

794

C. Zheng and D. Sankoﬀ

as illustrated in Figure 1. (One singleton does not count as a pre-strip, but two
singletons, successive terms of a pre-strip, do count.)
We need not consider any other subsequences of maximal pre-strips. To understand this, consider a1 a3 and a6 a9 from maximal pre-strip a1 a3 A1 a6 a9 in
Figure 1. If anything intervenes to prevent A1 from forming a strip together with
a1 a3 and a6 a9, it will necessarily also prevent a1 a3 and a6 a9 from forming a
strip together. Our construction thus establishes the following:
Proposition 1: All possible strips that can be formed by the deletion of genes
from two genomes, are contiguous subsequences, containing at least two genes,
of inextensible common subsequences (or their reverse) of two chromosomes, one
from each genome.

3

Maximum Weight Cliques

Once we have a set of pre-strips from which to construct our strips, we next need
to construct a matrix of compatibilities among these pre-strips. Two pre-strips
are incompatible if they share at least one gene or if either one contains a gene
that destroys the contiguity of the genes in the other one. This deﬁnition entails:
Proposition 2: Given any set C of pairwise compatible pre-strips. Consider the
reduced genomes produced by deleting all genes that are in none of the pre-strips
in C. In these genomes all of the genes in each pre-strip in C appear as strip.
From the two original n-gene genomes, we wish to ﬁnd a reduction, composed
completely of strips, that minimizes the number d of genes deleted. From the
compatibility matrix we construct a graph G with the pre-strips as the vertices
and with compatible vertices joined by an edge.
Proposition 3: The solution C of the maximum weighted clique problem on G,
where the weight w(i) on a pre-strip i is simply the number of genes it contains,
induces a reduction of the original genomes so that they are composed completely
of strips and so that the number of genes deleted is minimized.
Proof: Let W =
2 and

i∈C

w(i). Then the statement follows from Propositions 1 and
d = n − W.

(1)

Kumlander’s algorithm [6] is based on a heuristic vertex colouring of sets of
independent vertices, followed by two sorts of pruning of the clique search tree,
one based on colour classes and the other a backtrack search. Empirically, it
was demonstrated to work better than competing algorithms on denser graphs.
In the case of genome comparison, we would expect G to become dense, in the
sense of [1], as the number of chromosomes increases, as explained in Section 1.
In a preliminary implementation of this algorithm, it worked well with hundreds
of pre-strips but ran into computing time problems with thousands of vertices.
For the example in Figure 1, the algorithm gives the solution in Figure 2.

Rearrangement of Noisy Genomes

A1

A2

a1 a2 a3 a4 a5 a6 a7 a8 a9

B3

B2

A1

B1

b1 b2 b3 b4 b5 b6 b7 b8 b9 b10

a1 a3 b10 b9 b8 a4 a5 b6 a6 b3 b4 b5 a9 a7 a8

B1

795

B2

A2

b1 b2 a2 b7

B3

Pre-strips in Solution
a1 a3
A1 a6
A2

B1
B2
B3

Fig. 2. MWC solution of problem in Figure 1. Rejected singletons a2, a9, b6 and b7
crossed out. Weight =15 (out of 19 genes), number of discarded singletons d = 4.

4

Sorting Unsigned Genomes

The problem of adding signs to an unsigned genome so as to a achieve a minimal
reversal distance to the identity permutation 1, · · · , n is equivalent to the problem
of sorting an unsigned permutation, known to be NP-hard [2].
However, as conjectured in [5] and proved in [4], for all segments of the permutation consisting of three or more consecutive integers (strips) in increasing
order, plus signs can be given to all these integers, and for all decreasing strips,
such as B1 in the example of Figures 1 and 2, minus signs can be given, and
this assignment is consistent with a solution. In [4], it is also shown how to give
signs to 2-strips in polynomial time. The algorithm these authors develop is exponential only in s, the number of singletons, and is polynomial if s is O(log n).
In our case, however, s = 0, so sign assignment can be done in polynomial time.

5

Genome Rearrangement

To try to infer the rearrangements we used to generate the original data, we
constructed all the cycles in the breakpoint graph of the two genomes [3, 9]. A
, the reuse rate, where b is the number
summary statistic is provided by r = 2(b−c)
b
of breakpoints in the comparison of the two genomes, and c is the number of
cycles in their breakpoint graph. The addition of noise generally causes r to
increase by adding proportionately more breakpoints than cycles and increasing
the sizes of cycles. In the example, b = 5, c = 1, d = 4 and r = 1.6.

796

6

C. Zheng and D. Sankoﬀ

Restoration of Singletons

There are at least three strategies that can be followed.
1) Restore all singletons that do not conﬂict with the strips in the MWC.
This has the advantages that it is easy to identify these singletons, it includes a
maximal amount of the original data in the ﬁnal analysis and in contexts where
the “noise” is due primarily to paralogy or lack of orientation information rather
than error, it may help determine relations of orthology and strandedness.
At the same time, it has the disadvantage that in contexts where the “noise”
is due primarily to mapping error, it does not reduce this noise to the full extent
possible. Moreover, it requires testing all MWCs, which may be numerous in
some examples, and for each such clique to check all 2s combinations of signs on
the s eligible singletons.
With this method, once the singletons are restored, the GR algorithm may
return an analysis that diﬀers substantially from that based on the strips only.
For example, in Figure 2, genes a2 and b6 conﬂict with the strips in the solution,
and hence cannot be restored to the genomes. At the other extreme, the singleton
b7 may be restored without materially aﬀecting the rearrangement inference of
three inversions and one translocation. The singleton a9 does not conﬂict with
any strips in the solution, but its inclusion in the GR arrangement changes
the solution, requiring an additional inversion. This is a disadvantage only if
a9 represents erroneous information. If its singleton status is due to genomic
processes, lack of information, or simply insuﬃcient data, the GR analysis may
give a more accurate result when such singletons are included.
2) Restore all singletons that do not substantially change the analysis based
on the strips only, such as b7. This has the advantage that it only includes items
that are maximally compatible with the strip-based analysis, so it should be
more eﬀective in excluding noise, while helping resolve lack of orientation. It
does increase the amount of the original data included in the ﬁnal analysis, but
this may represent only a small proportion of the singletons. A clear diﬃculty
with this approach is that it requires some operationalization of the notion that
two GR analysis based on two diﬀerent data sets, one subsumed in the other, are
substantially the same. For example, we could ask that some optimal GR scenario
for the larger set of genes, reduced by omitting all genes absent from the smaller
set, also be optimal for the smaller set, taking into account rearrangements that
disappear, such as inversions containing genes only in the larger set.
3) Restore no singletons. While this reduces noise maximally, it has the clear
disadvantage that it takes into account none of the potentially informative singletons, especially when the noise is not simply mapping error. However, for our
artiﬁcial (simulated) data, this is the most appropriate method.
We have implemented a program that permits any of these three options, but
we present here simulations that test only the ﬁnal option, generating data that
are randomly noisy, without any attempt to model biological or methodological
sources of error. Note that a global solution, treating singletons as if they were
strips would require a diﬀerent weighting system for MWC to avoid a trivial
solution, and would also have to confront the NP-hardness of GR in this context.

Rearrangement of Noisy Genomes

7

797

Simulations

1.6

50
40

1.5

singletons

30

Reuse

Distance and number of singletons

Prior to our simulations, we divided 100 genes approximately equally among
four chromosomes, subjected them to four translocations and 13 inversions, with
randomly chosen breakpoints.
For each simulation trial, we add noise by randomly choosing one gene and
moving it to a new, random, position in the genome. This models errors such as
the mistaken identiﬁcation of a gene in one genome to be orthologous to one in
the other, when it is only a paralog of the true ortholog. We repeat this process,
eventually moving a total of 50 genes in a trial. We do 50 such trials in all.
In each trial, we apply our method after each of the 50 random changes and
calculate the number of genes in the MWC solution and the distance between the
genomes. On the left of Figure 3 we show how the distance remains remarkably
stable, despite the loss of over 40 % of the genome to noise. More telling, we
calculate the reuse rate (2 x distance / number of breakpoints), a measure of
how random one genome is with respect to the other, and thus how much doubt
should be thrown on the genome rearrangement analysis. The right side of Figure
3 shows a steady increase in reuse, eventually approaching 2.0, the maximum
value, indicative of complete randomness. Although the distance remains more
or less constant, the rearrangements inferred between the two genomes change
drastically as noise is added. Thus while our method seems to infer genome
distance in a robust way, the details of the rearrangement scenario are obscured
by increased noise levels.

distance

20

1.4
1.3

10

1.2

0
0

10

20

30

Noise level

40

50

0

10

20

30

40

50

Noise level

Fig. 3. Left: stability of genome distance (inversions plus translocations) despite the
loss of large numbers of singletons. Right: increase in reuse as a result of noise.

8

Conclusions

The main contribution of this work is the conversion of the maximal weight
strip problem to the MWC problem, based on the induced elimination of as

798

C. Zheng and D. Sankoﬀ

few genes as possible from the genomes being compared. Our method recovers
the underlying rearrangements while the noise level is low, but is degraded by
higher levels. In our simulations, the total genomic distance, though not the
actual rearrangements, remain fairly constant despite high levels of noise.
Though our pre-strip computation is not worst-case polynomial-time, in real
problems it is not the bottleneck. Nevertheless, we are now implementing a
polynomial time algorithm for producing only 2- and 3- strips. Applying the
MWC algorithm to these small strips, followed by piecing all overlapping ones
together, gives the same solution as the present method.
The MWC itself which is the bottleneck. Since our compatibility graph is
dense, methods such as those introduced in [1] might speed up the MWC search.
It might be thought that with the advent of genome sequencing, comparative
mapping without strandedness would become obsolete. In fact, the trend towards
low-coverage sequencing without ﬁnishing, leaving many gene order ambiguities,
makes it likely that physical and genetic mapping methods will continue to
predominate, aside from very few model organisms.

Acknowledgements
Research supported in part by grants from the NSERC (Canada). DS holds
the Canada Research Chair in Mathematical Genomics and is a Fellow of the
Evolutionary Biology Program of the Canadian Institute for Advanced Research.

References
1. Arora, S., Karger, D. and and Karpinski, M. 1999. Polynomial time approximation
schemes for dense instances of NP-hard problems. JCCS 58:193–210.
2. Caprara, A. 1997. Sorting by reversals is diﬃcult. RECOMB ‘97. 75–83.
3. Hannenhalli, S. and Pevzner, P.A. 1995. Transforming cabbage into turnip (polynomial algorithm for sorting signed permutations by reversals). STOC 27. 178–189.
4. Hannenhalli, S. and Pevzner, P.A. 1996. To cut or not to cut (applications of comparative physical maps in molecular evolution). SODA 7. 304–313.
5. Kececioglu, J. and Sankoﬀ, D. 1993. Exact and approximation algorithms for the
inversion distance between two permutations. CPM 4, LNCS 684. 87–105.
6. Kumlander, D. 2005 A new exact algorithm for the maximum-weight clique problem based on a heuristic vertex-coloring and a backtrack search. Fourth European
Congress of Mathematics. Poster and manuscript.
7. Sankoﬀ, D., Lenert, A. and Zheng, C. 2005. Reversals of fortune. RECOMB 2005
Ws on Comparative Genomics, LNBI 3678. 131–141.
8. Tesler, G. 2002. Eﬃcient algorithms for multichromosomal genome rearrangements.
JCSS 65:587–609.
9. Yancopoulos, S., Attie, O. and Friedberg, R. 2005. Eﬃcient sorting of genomic
permutations by translocation, inversion and block interchange. Bioinformatics 21:
3340 – 3346.

