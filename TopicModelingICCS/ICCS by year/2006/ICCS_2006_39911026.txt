An Efficient Key-Update Scheme for Wireless Sensor
Networks
Chien-Lung Wang1, Gwoboa Horng1, Yu-Sheng Chen1, and Tzung-Pei Hong2
1

Department of Computer Science, National Chung-Hsing University
Taichung 40227, Taiwan, R.O.C.
{phd9004, gbhorng, s9356047}@cs.nchu.edu.tw
2
Department of Electrical Engineering, National University of Kaohsiung
Kaohsiung 811, Taiwan, R.O.C.
tphong@nuk.edu.tw

Abstract. A novel key-update scheme is proposed for wireless sensor networks.
The center server in a wireless sensor network first broadcasts a series of randomly generated code slices to sensor nodes. Upon receiving all the code slices,
the sensor nodes find their neighboring coordinators to generate a permutation
of slice numbers and send this permutation back to the center server. The center
server and the sensor nodes can thus assemble a common program based on the
permutation to derive their common key. Subsequent key-updates can then be
done by this program based on the previous keys. The proposed scheme is simple, efficient, and is secure if the sensor nodes cannot be compromised within a
short bound of time.

1 Introduction
Sensor networks are a kind of ad-hoc networks [3] and widely used in real
applications. In a sensor network, each sensor node is deployed in a different location
and is in charge of perceiving local information and reporting to the center server. A
sensor node is usually limited by its computing power, memory, and battery power.
These constraints make public-key algorithms infeasible for sensor nodes. In the past
two decades, a lot of researches about security protocols [1] were proposed, including
several key pre-distribution schemes [2][4][5].
In real applications, sensor nodes are usually deployed in a large number in order
to cover a sufficiently large area. For instance, a military aircraft may scatter a lot of
tiny sensor nodes over a certain terrain to gather information. Tens of thousands of
sensor nodes may be required in this case. Since the amount of sensor nodes used in
an application is usually large, it is better for them to be provided as cheaply as
possible. If all sensor nodes used in an application are the same, they can be
manufactured uniformly and the production costs can thus be reduced. Specifically,
“uniform” means that each sensor node is equipped with the same hardware, software,
and initial settings. It may be criticized that each sensor node with the same keys are
dangerous. This thus causes a trade-off issue between security and production cost.
An efficient key-update scheme is necessary if all sensor nodes are initially
equipped with the same keys. The keys should be updated immediately after the
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 1026 – 1029, 2006.
© Springer-Verlag Berlin Heidelberg 2006

An Efficient Key-Update Scheme for Wireless Sensor Networks

1027

deployment of sensor nodes since a compromise of the initial key of a sensor node
may crash the entire sensor network. Besides, a good key-update scheme should be
prompt and efficient. In this paper, a key-update scheme is thus proposed for wireless
sensor networks.

2 The Proposed Key-Update Scheme
The proposed key-update scheme is divided into two parts: server part and sensor
part. In this paper, all sensor nodes are assumed the same except for their IDs. The
center server and all sensor nodes initially share a key Kc. This key is only used to
initialize encryption keys and should be annihilated as soon as the deployment is
done. To prevent the catastrophic consequence of compromising a sensor node, a
short time bound t is set for the key-update phase. Each sensor node will begin a timer
immediately after its physical deployment. If a sensor node does not finish its keyupdate phase within time t, it should sacrifice himself. That is, it will annihilate its
initial key and stop its functionalities for keeping the security of the whole sensor
network. The initial key can thus be protected in this way. The proposed scheme
needs to estimate the time required to compromise a sensor node and chooses t as
small as possible. The proposed key-update scheme executed respectively in the
center server and sensor nodes is described below.

3 Execution on the Center Server - Broadcasting Code Slices
The center server first prepares some operators to generate random code slices. These
operators are pairwise non-commutative. A code slice is composed of an operand and
an operator. An operand can be any integer and an operator can be one of the
following operators: addition, multiplication, division, exponentiation, logarithm,
shift, etc. For example, +2, *4, ^3 are possible code slices and six possible
combinations can be derived from the three code slices without repetition. Six
possible programs can thus be assembled in the example. In general, if there are m
code slices, then m! possible programs can be obtained. Finally, the center server
broadcasts these code slices to the wireless sensor network.

4 Execution on the Sensor Nodes – Coordinating and Assembling
In a sensor network, a sensor node can only communicate directly with its neighbors
within a short range. A header is usually chosen from a subnet of sensor nodes as a
relay. In the proposed scheme, the one with the most neighbors is elected as the
header. In the dark, frogs cry to locate and identify other frogs. Similarly, each sensor
node can send out its own ID to notify its neighbors. At the first stage, each sensor
node sends out its ID and counts the number of its neighbors. At the second stage,
each sensor node announces this number. Based on this information, headers can be
elected and located by their neighbors (see Fig. 1). This method is called an echo
algorithm.

1028

C.-L. Wang et al.

Center
server

Routing to the
center server

Wireless
communications

Sensor node
Header node

Sacrificed node

Fig. 1. System architecture: a center server and randomly distributed sensor nodes in a wireless
sensor network. A solid circle represents the subnet of a certain header elected by its neighbor
nodes. When a node needs to send a message to the center server, the message is first sent to
the header of its subnet, then the header routes the message to the center server.

After headers are elected from sensor nodes, the next step is to form a secret
program. Let the subnet of a header be defined as the network formed from the header
itself and all its neighbors. Thus, there are many subnets in a wireless sensor network.
Some subnets may overlap.
Each header will generate a random permutation of m objects, denoted by a string
rm, upon receiving code slices P1 to Pm from the center server. It then deliveries rm to
its subnet and routes a path to the center server. With the permutation rm, the code
slices can then be assembled together to get a common program P. rm should also be
encrypted with the key Kc before it is sent out to prevent eavesdropping.
After an agreement of the program P has been made between the center server and
the subnet of a certain header, subsequent key-updates can be done by executing the
program P on the previous key of the subnet, i.e. kj = P(kj-1). Initially, the key of all
subnets is kc=k0. But after the key-update procedure, each subnet should have its own
key agreed with the center server.

5 Security Analysis
In the proposed scheme, an attacker may tape all the code slices P1, …, Pm and try to
recover a secret program P of a certain subnet by rearranging the slices. But lacking
the permutation information rm, the attacker can only guess possible ones. Since each
permutation of the code slices can result in an executable program, the probability for
a guessed program to equal the program P is only 1/m!. This is why the m code slices
are required to be pairwise non-commutative; otherwise, the probability may be larger
than 1/m!. The security of the proposed protocol thus depends on the size of m. m may

An Efficient Key-Update Scheme for Wireless Sensor Networks

1029

be increased for better security at the cost of program-assembling time. For instance,
m!>264 for a choice of m=21, and m!>2128 for a choice of m=35.
Suppose that the average number of neighbor nodes is k. Each node in a subnet
then needs 2*(1+k) operations. Each header node needs an extra encryption. Each
node can thus easily assemble the program P from the m code slices. The choice for
the size of m provides the flexibility between security and efficiency.

6 Conclusion
A novel key-update scheme has been proposed for wireless sensor networks. The
proposed scheme is simple, efficient and secure if the sensor nodes are assumed not to
be compromised within a short time bound t. It is thus feasible for the proposed
scheme to be applied to a resource-constrained wireless sensor network. In the future,
we will attempt to improve the proposed scheme with other constraint considerations.

Acknowledgement
This research was supported by the National Science Council of the Republic of
China under contract NSC- 94- 2213- E- 005- 028.

References
1. Perrig, A., Szewczyk, R., Wen, V., Culler, D., Tygar, J.D.: SPINS: Security Protocols for
Sensor Networks. The Seventh ACM Annual International Conference on Mobile
Computing and Networking (2001) 189–199
2. Price, A., Kosaka, K. and Chatterjee, S.: A Key Pre-distribution Scheme for Wireless
Sensor Networks. Wireless Telecommunications Symposium (2005) 253–260
3. Stajano, E., Anderson, R.: The Resurrecting Duckling: Security Issues in Ad-Hoc Wireless
Networks. The Seventh International Workshop on Security Protocols (1999)
4. Ramkumar, M., Memon, N., Simha, R.: Pre-Loaded Key Based Multicast and Broadcast
Authentication in Mobile Ad-Hoc Networks. Globecom, San Fransisco, CA, (2003)
5. Ramkumar, M., Memon, N.: On the Security of Random Key Predistribution Schemes. The
Fifth Annual IEEE Information Assurance Workshop, NY (2004)

