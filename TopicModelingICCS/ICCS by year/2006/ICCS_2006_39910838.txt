Massive Data Oriented Replication Algorithms for
Consistency Maintenance in Data Grids
Changqin Huang, Fuyin Xu, and Xiaoyong Hu
College of Educational Information Technology, South China Normal University,
Guangzhou, 510631, P.R. China
cqhuang@zju.edu.cn, xufy@scnu.edu.cn, huxiaoy@hotmail.com
Abstract. Based on the Grid Community (GC) for data usage, differentiated
replication algorithms are proposed, by which the replica node is selected according to key replica node (SHN) and the other. First, The replicas are passed
into SHN; second, if certain nodes in a GC often access the data resource, it or
its nearby nodes become an optional replica node based on the storage and
bandwidth. A consistency maintenance algorithm is presented to facilitate the
coherence function in a differentiated manner: a pessimistic manner or an optimistic manner, and to update according to the context. The simulation results
show that the differentiated mechanism can improve grid access performance.

1 Introduction
In Data Grids, the management of massive data is one of the major scientific challenges. Data replication is an important enabling technology as grid services. Replication improves availability and performance, and increase throughput. However, Data
replication also brings a few hard-solved issues, such as consistency maintenance. To
do well the trade-offs among performance and consistency, we present a differentiated replication approach including Optimistic replication [1].

2 The Differentiated Replication Algorithms
Because any large amount of data is produced by a single resource, we think that
there is only a steady original data, named home data that resides in a certain Home
Node (HN). Replicas exchange updates in a peer-to-peer fashion. The replicas have
loosely synchronized clocks. Generally, the whole grid system consists of few Grid
Communities (GC), which are perhaps a WAN or a group of nearby LANs. The GC is
an important network entity, in which there exists a key node for performance as to
replication, and its network connecting with the HN is better. The key node should
store a Secondary Home Replica (SHR), and the node is called SHN, Except the SHN,
The other nodes where the common replicas exist are not special to impact on each
other’s performance. The replica distribution is structured as Figure 1.
Due to the topology fact, our algorithms are to put replicas in a differentiated manner. First, pass replicas into key nodes, SHN. Second, if a certain node in a GC often
accesses home replica or replica and its storage (or its nearby node) permission, a
replica is stored into the node (or the nearby node). We assume the bandwidth of each
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 838 – 841, 2006.
© Springer-Verlag Berlin Heidelberg 2006

Massive Data Oriented Replication Algorithms for Consistency Maintenance

839

node is available in advance, and each node knows its nearby nodes. The AN denotes
the number of access to home replica or replica. T indicates a threshold value of AN.
If the AN exceeds T, the system should put a replica locally to improve performance.
At present, the SHN and T are given in advance. Re.NodeID denotes the node ID,
which produces a request for replica. The algorithm is described in Figure 2.
Re p l i c a

G

C

H N
H o me
d a t a

n

G

C

1

Re p l i c a

Re p l i c a
Re p l i c a

Re p l i c a

G

C

S H R

3
Re p l i c a

S H N 1

Re p l i c a

S H N 2

S H R

Re p l i c a

Re p l i c a

G

C

2

Fig. 1. The topology of replica distribution under the differentiated replication algorithms
P u tR e p lic a s (R )
//F o r h o m e r e p lic a
W h ile f in d o u t a S H N f o r e a c h g rid c o m m u n ity o n th e b a s is o f s ta tis tic a n a ly s e s d o
P a s s a r e p lic a in to th e S H N // F r o m th e H N
A d d a n u p d a te a n d re c o rd th e H N 'IP a n d tim e in to its L o g - R e p lic a
F o r e a c h G r id C o m m u n ity
I f a n o d e 's A N > th e th r e s h o ld v a lu e T , it is n o t th e S H N
I f its s to ra g e c a p a c ity is a d e q u a te th e n
P a s s a re p lic a in to th e n o d e // T h e s o u rc e is d e c id e d b y th e n e x t A lg o r ith m
A d d a n u p d a te a n d r e c o rd th e s o u r c e n o d e 'IP a n d tim e in to its L o g - R e p lic a
E ls e fin d o u t a ll its n e a rb y n o d e s th a t a r e r u n n in g a t p re s e n t.
S o r t th e s e n o d e s in th e b a n d w id th d e s c e n d in g o r d e r a n d fo r m a te m p q u e u e Q U N
W h ile ta k e o u t a n o d e fro m th e Q U N a c c o r d in g to th e e x is tin g o r d e r d o
I f its s to r a g e c a p a c ity is a d e q u a te t h e n
P a s s a re p lic a in to th e n o d e
// T h e s o u rc e is d e c id e d b y th e F in d H o m e R e p lic a A lg o rith m
A d d a n u p d a te a n d re c o r d th e s o u rc e n o d e 'I P
a n d tim e in to its L o g - R e p lic a
E x it
END

E ls e N e x t
// R e tu rn L o g -R e p lic a

Fig. 2. The differentiated replication algorithm
F indH om eR eplicas(R e)
//For each request for replica source
If Re.N odeID is the SH N in the associated grid com m unity then
R eturn SH N (The hom e data is stored here)
E lse find out all node s near Re.N odeID if these nodes are running at present.
Sort these nodes in the bandw idth descending order and form a tem p queue Q U N
W hile take out a node TaN from the Q U N according to the existing order do
If a certain Log-Replica exists in the TaN then

R eturn TaN
E xit
E lse N ext
E nd // R eturn TaN

Fig. 3. The find home replicas algorithm of the differentiated replication

840

C. Huang, F. Xu, and X. Hu

The system introduces a XML log file for replica, called Log-Replica, which is a
key basis of replica updating and update tracing. Its existence indicates the replica
existence in a hosting node. Because the Log-Replica is XML format, it is common to
be applied in many aspects. And X-Diff [2] is applied to produce an analysis data, and
to give the information of newly updates.

3 The Consistency Maintenance Algorithm
If the diff is not available during updating, we directly transfer the whole copy of the
home. The system also facilities the function in a differentiated manner: a pessimistic
manner and an optimistic manner. As to these SHNs, A notification mechanisms enforced. When a home replica is copied into a SHN, the SHN completes the update
subscription. The HN performs an update-based publication. The action is based on
message mechanisms. As for the other grid nodes of replica, an optimistic update is
invoked: the system visit the metadata to get the “time” of the home and that replica,
then compare these two values to decide to take relevant actions.
MaintainConsistency(Access)
// For each update of home data
If a home data in HN updates then
Send an update message to all relevant SHNs
For each relevant SHN
// update its replica (second home replica)
If the diff is available then
Copy the diff to the replica node and the replica is updated
Else copy the whole data of the home to the replica node and the replica is updated
Add an update and record the HN'IP and time into its Log-Replica
// For each access to home data by a replica node ReN
If ReN.Log-Replica.lastUpdate.time=SHN.Log-Replica. lastUpdate.time then
Directly access to the replica
Else If SHN.Log-Replica.lastUpdate.time is greater than ReN.Log-Replica.lastUpdate.time then
If the diff is available then
Copy the diff to the replica and the replica is updated
Else copy the whole data of the home to the replica and the replica is updated
Add an update and record the source node'IP and time into its Log-Replica
Directly access to the replica

Fig. 4. The consistency maintenance algorithm

4 Simulations
We adopt OptorSim [3] to simulate these applications. In our simulation, parameters
are set as follows: The size of each data object is 0.5 GB and each update is 50MB.
The time required to send a message from one replica to another is assumed to be
negligible compared to the time between anti-entropy sessions. Experiments are described as follows: Case 1: The grid nodes of replica are identical to make replica and
consistency maintenance; Case 2: Making replica and consistency maintenance applies our algorithms.

Massive Data Oriented Replication Algorithms for Consistency Maintenance
30

30

em20
iT
10
0

841

Case 1
Case 2
5

8

10

12

The number of r epl i cas

(a)

15

em20
iT
10
0

Case 1
Case 2
5

8

10

12

15

The number of r epl i cas

(b)

Fig. 5. (a) The time that an update has been received by all replicas for varying numbers of
replicas. (b) The latency required from the time when an update is issued to the time when
acknowledgments are received by each replica.

As shown in these figures, whether the first concerning time or the second,
different manners for replication and updates have different performance scenarios.
The Case 2 brings a better show than the Case 1, i.e. it improves data access performance that making replica and consistency maintenance applies our differentiated
algorithms.

5 Conclusions
We present a suit of replication and consistency maintenance algorithms to meet the
data grid requirements. A differentiated replication algorithm is proposed, by which
the replica node is selected according two types: key replica node (SHN) and the other
replica nodes. Firstly, The replicas are passed into SHN; Secondly, if a certain node in
a GC often accesses the data resource, it or its nearby nodes become an optional
replica node based on bandwidth etc. Lastly, we apply a consistency maintenance
algorithm to facilitate coherence function in a two manner: a pessimistic manner, an
optimistic manner. The simulation results suggest that replication algorithms are fit
for consistency maintenance, and can improve grid performance of data access.
Acknowledgement. The authors wish to thank the Scientific Research Fund of Hunan
Provincial Education Department(Grant No. 04A037), by which the research project
has been supported.

References
1. T. W. Page, Jr., R. G. Guy, J. S. Heidemann, et al: Perspectives on optimistically replicated,
peer-to-peer filing. Software --Practice and Experience, vol. 28(2): 155-180, 1998.
2. Y. Wang, D. J. DeWitt, J.Y. Cai: X-Diff: An Effective Change Detection Algorithm for
XML Documents, Proc. of the 19th International Conference on Data Engineering
(ICDE'03), 519-530, 2003.
3. W. H. Bell, D. G. Cameron, L. Capozza, et al: Optorsim: a Grid Simulator for Studying
Dynamic Data Replication Strategies. International Journal of High Performance Computing Applications, Vol. 17(4): 403-416, 2003.

