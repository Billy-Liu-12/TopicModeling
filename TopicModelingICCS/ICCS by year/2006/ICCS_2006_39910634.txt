Low Complexity Systolic Architecture
for Modular Multiplication over GF(2m)
Hyun-Sung Kim1 and Sung-Woon Lee2
1

Kyungil University, School of Computer Engineering,
712-701, Kyungsansi, Kyungpook Province, Korea
2 Tongmyong University, Dept. of Information Security,
Busan, Korea

Abstract. The modular multiplication is known as an efficient basic operation
for public key cryptosystems over GF(2m). Various systolic architectures for
performing the modular multiplication have already been proposed based on a
standard basis representation. However, they have high hardware complexity
and long latency. Thereby, this paper presents a new algorithm and architecture
for the modular multiplication in GF(2m). First, a new algorithm is proposed
based on the LSB-first scheme using a standard basis representation. Then, bit
serial systolic multiplier is derived with a low hardware complexity and small
latency. Since the proposed architecture incorporates simplicity, regularity, and
modularity, it is well suited to VLSI implementation and can be easily applied
to modular exponentiation architecture. Furthermore, the architecture will be
utilized for the basic architecture of crypto-processor.

1 Introduction
The arithmetic operations in the finite field have several applications in errorcorrecting codes[1], cryptography[2, 3], digital signal processing[4], and so on. Information processing in such areas usually requires performing multiplication, inverse/division, and exponentiation. Among these operations, the modular multiplication is known as the basic operation for public key cryptosystems over GF(2m) [2- 4].
Exponentiation is computed efficiently by the sequences of modular multiplications.
And division and inverse can be regarded as a special case of exponentiation because
m
B-1 = B 2 − 2 [5, 6].
Recently, three types of multipliers over GF(2m) have been proposed that are easily
realized using VLSI techniques. These are normal, dual, and standard basis multipliers, which have their own distinct features. The normal and dual basis multipliers
need basis conversion, while the standard does not. In the following, we restrict our
attention to the standard basis multiplier.
Numerous architectures for modular multiplication in GF(2m) have been proposed
in [7-10] over the standard basis. In 1984, Yeh et al. proposed two systolic array architectures with the LSB-first modular multiplication [7]. Wang et al. in [8] proposed
two systolic architectures with the MSB-first fashion with less control problems as
compared to [6]. Jain et al. proposed another multiplier architecture [9]. Its latency is
smaller than those of other standard-basis multipliers, but there are broadcast lines in
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 634 – 640, 2006.
© Springer-Verlag Berlin Heidelberg 2006

Low Complexity Systolic Architecture for Modular Multiplication over GF(2m)

635

the circuit. Wu et al. in [10] proposed bit-level systolic arrays with a simple hardware
complexity with the MSB-first modular multiplication.
This paper proposes a new algorithm and its architecture for the modular multiplication with a bit-serial systolic architecture. The proposed algorithm supports the
LSB-first scheme and the proposed architecture has a good time and area complexity
compared to the previous multipliers.

2 Modular Multiplication
A finite field GF(2m) has 2m elements and it is assumed that all the (2m-1) non-zero
elements of GF(2m) are represented using the standard basis. Let A(x) and B(x) be two
elements in GF(2m) and F(x) be the primitive polynomial, where A(x) = am-1xm-1 + amm-2
+ ⋅⋅⋅⋅ + a1x + a0, and B(x) = bm-1xm-1 + bm-2xm-2 + ⋅⋅⋅⋅ + b1x + b0 , where ai and bi, ∈
2x
GF(2) (0 ≤ i ≤ m-1). A finite field of GF(2m) elements is generated by a primitive
polynomial of degree m over GF(2). Let F(x) be an irreducible polynomial that generates the field and is expressed as F(x) = xm + fm-1xm-1 + ⋅⋅⋅⋅ + f1x + f0. If α is the root of
F(x), then F(α) = 0, and F(α) ≡ αm = fm-1αm-1 + ⋅⋅⋅⋅ + f1α + f0, where fi ∈ GF(2) (0 ≤ i ≤
m-1). To compute the AB operation, the following equation is the common LSB-first
algorithm
P = AB mod F(x)
= b0[Aα0 mod F(x)]+b1[Aα mod F(x)] + b2[Aα2 mod F(x)] + ⋅⋅⋅
+ bm-1[Aαm-1 mod F(x)]

(1)

A new algorithm for the modular multiplication is derived from the equation 1 that
is suitable for systolic array implementation. The modular reduction is necessary
because of the operation [Aαi mod F(x)] on the i-th step. We just try to concentrate on
the modular reduction from the first term of the above equation, b0A mod F(x). The
subsequent terms in the above equation are accumulated until reaching the end. The
procedure of the new algorithm is as follows:
First,
P1 = b0[Aα0 mod F(x)]
=[

m −1

∑a b

k m −1α

k

]α0 mod F(x)

(2)

k =0

However, in this step we can overlap the modular multiplication of [Aα mod F(x)]
for the next step operations. For the better understanding, we will use the symbol A(i)
for the i-th snapshot for A, which has the value of Aαi mod F(x) . Thereby, our algorithm computes two operations as follows
m −1

P(1) = b0A(0) = [ ∑ a ( 0) k bm−1α k ];
k =0

A

(1)

(3)
m −1

m −1

k =0

k =0

= A α mod F(x) =[ ∑ a ( 0) k α k ]α mod F(x)=[ ∑ a (1) k α k ];
(0)

636

H.-S. Kim and S.-W. Lee

where

pk(1) = ak( 0 )bm−1 (k = 0, ⋅⋅⋅ , m-1);
ak(1) = am( 0−)1 f k + ak( 0−)1 (k = 1, ⋅⋅⋅ , m-1);
a

(1}
0

=a

(0)
m−1 0

f

(4)

;

In the general case,
m −1

P(i)= P(i-1) +bi-1A(i-1) = [ ∑ ( p ( i −1) k + a (i −1) k bm−1 )α k ];
(i)

A =A

(i-1)

k =0
m −1

m −1

k =0

k =0

α mod F(x) =[ ∑ a (i −1) kα k ]α mod F(x)=[ ∑ a (i ) kα k ] ;

(5)

where

pk( i ) = pk(i−1) + ak(i −1)bm−1 (k = 0, ⋅⋅⋅ , m-1);
ak(i ) = am(i−−11) f k + ak( i−−11) (k = 1, ⋅⋅⋅ , m-1);

(6)

a0( i} = am( i−−11) f 0 ;

Finally,
m −1

P(m)= P(m-1) +bm-1A(m-1) = [ ∑ a (i −1) k bm−1α k ];

(7)

k =0

where pk( m ) = pk( m−1) + ak( m−1)bm−1 (k = 0, ⋅⋅⋅ , m-1).
Thus the multiplication of two elements A and B in GF(2m) can be computed using
the above new recursive algorithm. From the algorithm, we can derive an efficient
systolic multiplier by following the procedures in [8-9].

3 Systolic Modular Multiplier
This section proposes a serial systolic multiplier. Fig.1 shows the dependence graph
for our new multiplication over GF(24). The inputs A and F enter the array in parallel
from the top row, while B is from the leftmost column. The output P is transmitted
from the bottom row of the array in parallel.
Fig 2 (a) shows a basic cell in Fig. 1 for the general case where the circuit function
is primarily governed by the following recurrence equation:

pk( i ) = pk(i−1) + ak(i −1)bm−1 (k = 0, ⋅⋅⋅ , m-1);
ak(i ) = am(i−−11) f k + ak( i−−11) (k = 1, ⋅⋅⋅ , m-1);
a

( i}
0

=a

( i −1)
m −1

(8)

f0 ;

where the k-th bit ( pk(i ) ) of Pi is the intermediate result of the product. Fig. 2 (b)
shows a processing element for the case that the cell is located in the last row.

Low Complexity Systolic Architecture for Modular Multiplication over GF(2m)
k

p3( 0) ≡ 0

a3( 0) ≡ a3

i

b0

f3

a3( 0)

p3(1) a3(1)

(1)
p2( 0) ≡ 0
≡ a3

f 2 a ( 0)
2

p2(1) a2(1)

(2)
p1(0) ≡ 0
≡ a2

(3)
p0( 0) ≡ 0
f1

f0

a1( 0) ≡ a1

p1(1) a1(1)

(4)
(5)
a0( 0) ≡ a0
(6)

p0(1) a0(1)
a0(1) ≡ 0

b1

p3( 2) a3( 2)

p2( 2) a2( 2)

p1( 2) a1( 2)

(8)

p0( 2) a0( 2)
a0( 0) ≡ 0

b2

p3(3) a3(3)

p2(3) a2(3)

p1(3) a1(3)

p2(4 )

p1( 4)

p2( 5)

p1( 5)

p0(3) a0(3)

(7)

(9)

(10)

(11)
b3

( 4)
3

p

p3(5)

( 4)
0

p

p0( 5)

Fig. 1. Dependence graph in GF(24)
pk( i −1)

fk

am(i−) 1

am(i−) 1 a

bi

ak(i+)1

ak(i−−11)

bi

pk(i )

fk

(a) PE1
pk( i −1)

fk

am(i−) 1

ak(i−−11)
am(i−) 1

bi

bi

pk(i )

fk

(b) PE2
Fig. 2. Processing elements

637

638

H.-S. Kim and S.-W. Lee

pk( m ) = pk( m−1) + ak( m−1)bm−1 (k = 0, ⋅⋅⋅ , m-1) ;

(9)

Note that the processing element in the bottom row, Fig. 2 (b), is very simple and
reduces the total cell complexity compared to previous architectures.

ctl
f(x)
B
A
P

PE3

PE3

PE3

PE4
P

Fig. 3. Proposed systolic multiplier in GF(2m)

ctl
f(x)
B
1 0
MUX

A
1 0
MUX

P

(a) PE3
ctl
f(x)
B
1 0
MUX

A

P

(b) PE4
Fig. 4. Processing elements

Low Complexity Systolic Architecture for Modular Multiplication over GF(2m)

639

An optimal systolic array among the several systolic arrays is derived by the projection vector [1,0]T and schedule vector [2,1]T from the dependency graph in Fig. 1.
Fig. 3 shows the proposed bit-serial systolic multiplier. The dot (“•”) on the data flow
means the buffer for one time step delay. Let I = ( Ictl , If(x), IB, IA, IP ) denote the layout
of input values for the systolic array. Ictl, If(x), IB, IA, and IP are data sequences of control signals, f(x), B, A, and P, respectively. Each sequence is as follows:
Ictl = {1, 0, 0, … , 0}
If(x) = {h, fm-1, fm-2, …, f0}
IB = { bm-1, bm-2, …, b0}
IA = { am-1, am-1, am-2, …, a0}
IP = {0, 0, 0, … , 0}
The “h” of the digit sequences means a time delay of input data. Only the first bit
among m bits of the control signal has the value 1 as the values of a and b should be
held for m clock times.
Fig 4 (a) shows a basic cell in Fig. 3 for the general case where the circuit function
is primarily governed by the equation 8. Fig. 4 (b) shows a processing element for the
case that the cell is located in the last row using the equation 9.
The structure of a systolic array is similar to Yeh et al. in [4] except the input scheduling and the structure of the last processing element. Since the horizontal path of each
cell only requires two delay elements, except for the last cell, the latency is 3m-2.
Table 1. Comparison of the bit-serial systolic architectures in GF(2m)

Circuit
Item
No. of cells

Proposed

m

Wang et al.
[8]
m

AB+C

AB+C

AB+C

Throughput

1/ m

1/ m

1/ m

Latency

3m

3m

3m-2

Critical path

TAND +TXOR-2

TAND +TXOR-3

TAND +TXOR-2

Cell
complexity

2 AND
2 XOR
7 latches
2 MUX

2 AND
1 XOR3
7 latches
2 MUX

Function

Yeh et al. [7]

m

PE3

PE4

Algorithm
fashion

LSB

MSB

2 AND
2 XOR
7 latches
2 MUX
1 AND
1 XOR
2 latches
1 MUX
LSB

640

H.-S. Kim and S.-W. Lee

4 Analysis

Ⅱ

Our multiplier was simulated and verified using the ALTERA MAX+PLUS simulator. Table 1 shows comparisions between the proposed architecture and the related
circuits. We will give a comparison of systolic architectures with Yeh et al.’s in [7]
and Wang et al.’s in [8].
Before the comparison, it was assumed that AND and XORi denote a 2-input AND
gate and i-input XOR, respectively. TAND and TXORi are the propagation delay of a 2input AND gate and i-input XOR gate, respectively. Latches are 1-bit latch and MUX
is a 2-input 1-output switch. Table 1 shows that our multiplier has a good area and
time complexity compared with the previous architectures.

5 Conclusion
This paper has explored a new algorithm for computing the modular multiplication
into a low-complexity systolic architecture in GF(2m). A comparison between related
systolic architectures reveals that the new systolic architecture has lower property
than the conventional architectures for the hardware complexity and the latency. Furthermore, it can be used as the basic architecture for computing an inverse/division
operation. Moreover, the architecture has a simplicity, regularity, and modularity.
Thereby, it is well suited to VLSI implementation and it can be easily utilized for the
crypto-processor chip design.

References
1. W.W.Peterson and E.J.Weldon, Error-correcting codes, MIT Press, MA, 1972.
2. D.E.R.Denning, Cryptography and data security, Addison-Wesley, MA, 1983.
3. A.Menezes, Elliptic Curve Public Key Cryptosystems, Kluwer Academic Publishers, Boston, 1993.
4. I.S.Reed and T.K.Truong, “The use of finite fields to compute convolutions,” IEEE Trans.
Inform. Theory, 21, 1975, pp.208-213.
5. H.S.Kim, Bit-Serial AOP Arithmetic Architecture for Modular Exponentiation, PhD. Thesis, Kyungpook National University, 2002.
6. S.W.Wei, “VLSI architectures for computing exponentiations, multiplicative inverses, and
divisions in GF(2m),” IEEE Trans. Circuits and Systems, 44, 1997, pp.847-855.
7. C.S.Yeh, S.Reed, and T.K.Truong, “Systolic multipliers for finite fields GF(2m),” IEEE
Trans. Comput., vol.C-33, Apr. 1984, pp.357-360.
8. C.L.Wang and J.L.Lin, “Systolic Array Implementation of Multipliers for Finite Fields
GF(2m),” IEEE Trans. Circuits and Systems, vol.38, July 1991, pp796-800.
9. S. K. Jain and L. Song, “Efficient Semisystolic Architectures for finite field Arithmetic,”
IEEE Trans. on VLSI Systems, vol. 6, no. 1, Mar. 1998.
10. C.W.Wu and M.K.Chang, “Bit-Level Systolic Arrays for Finite-Field Multiplications,”
Journal of VLSI Signal Processing, vol. 10, pp.85-92, 1995.
11. S.Y.Kung : ‘VLSI Array Processors,’ Prentice-Hall, 1987.
12. K.Y.Yoo : ‘A Systolic Array Design Methodology for Sequential Loop Algorithms,’ PhD.
thesis, Rensselaer Polytechnic Institute, New York, 1992.

