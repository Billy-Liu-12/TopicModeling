A Mechanism to Make Authorization Decisions
in Open Distributed Environments Without
Complete Policy Information
Chiu-Man Yu and Kam-Wing Ng
Department of Computer Science and Engineering,
The Chinese University of Hong Kong
{cmyu, kwng}@cse.cuhk.edu.hk

Abstract. To enable an open Grid environment to support organized
resource sharing between multiple heterogeneous Virtual Organizations
(VOs), we need to tackle the challenges of dynamic membership of VOs
and trust relationships between the VOs. We propose a Dynamic Policy Management Framework (DPMF), a Conﬂict Analysis with Partial
Information (CAPI) mechanism, and a heterogeneous authorization policy management mechanism to resolve the problems. DPMF groups VOs
deploying the same model of authorization systems together to form a
virtual cluster. Policy management is divided into inter-cluster heterogeneous policy management, and intra-cluster homogeneous policy management. In an open Grid environment, some VOs may prefer to keep
their policy information private. The Conﬂict Analysis with Partial Information (CAPI) mechanism is developed to provide an approach of
policy conﬂict analysis in open environments without complete policy
information. The basis of CAPI is to generate substitution policies to
replace the unknown policy information.

1

Introduction

Traditional security policy frameworks [1][2][4][5] deal with security policy management inside a VO. There is still little research on policy management for
multiple heterogeneous VOs. We have proposed an authorization policy management framework, Dynamic Policy Management Framework (DPMF) [6], to
handle this problem. DPMF is a hierarchical framework which aims to support
dynamic, distributive, and heterogeneous authorization policy management for
Grid environments of multiple VOs. Each VO consists of a number of nodes
which can be service providers, or service requesters. Each VO has a policy
server (or an agent which can access the policy repository of the VO). The policy server is a PDP (Policy Decision Point). The service providers and service
requesters on the VOs are PEPs (Policy Enforcement Points) [3].
Figure 1 illustrates the DPMF’s hierarchical architecture. There are three
kinds of agents in the framework: Policy Agents (PA), Policy Processing Units
(PPU), and Principal Policy Processing Unit (P-PPU). In DPMF, each VO
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 1007–1014, 2006.
c Springer-Verlag Berlin Heidelberg 2006

1008

C.-M. Yu and K.-W. Ng
Virtual cluster

Request for heterogeneous
authorization information

PPU
(PDP)

Service authorization request
/ Policy update notification
Authorization decision
/ Policy update notification

PA
(PDP)

PA
(PDP)

Heterogeneous authorization information

P-PPU
(Grid Operator)
PPU
(PDP)

PA
(PDP)

PA
(PDP)

PA
(PDP)

Virtual cluster

VO

Service
Providers
(PEP)

Policy
Policy
repository
repository

Service
requesters

Fig. 1. DPMF architecture

needs to have a PA. The Grid Operator has a P-PPU. The DPMF groups VOs
of same model of authorization system (in terms of access control model and
policy model) to form a virtual cluster. Inside a virtual cluster, the workloads of
policy management can be distributed among the VOs according to their trust
relationships. The Conﬂict Analysis with Partial Information (CAPI) mechanism
is developed to provide an approach to make authorization decisions in open
environments without complete policy information. Section 2 and Section 3 will
present the CAPI mechanism and its performance resulting from simulation.

2

Conﬂict Analysis with Partial Information (CAPI)

In an open environment, some VOs may prefer to keep their policy information private. In DPMF, a trust relationship between VOs (representing by PAs)
means the willingness of disclosing their authorization policies. Since a trust relationship is not compulsory in DPMF, some PAs may not be trusted by some
other PAs. During the manipulation of service authorization requests, if some of
the involved PAs do not trust the PPU, the PPU is not able to retrieve certain
policy information from the PAs. For example, a user from a VO plans to perform a task which involves inter-operation with service providers on several other
VOs. So the user requests the PPU for authorization for the task. If some of the
target service providers’ PAs trust the PPU but some do not, then the PPU
cannot retrieve the policy information from the untrustful PA(s). The PPU can
only perform policy conﬂict analysis and make authorization decision with policy
information from the trustful PAs. To handle the problem, we have developed a
conﬂict analysis mechanism which requires only partial policy information. It is
called ”Conﬂict Analysis with Partial Information” (CAPI).
The main idea of our current approach of CAPI is that the PPU performs a
conﬂict analysis with the known authorization policies, generates substitutions
for unknown policies, ﬁnds out a set of conditions which can cause conﬂicts, then
sends the set of conditions to the untrustful VO for its checking.

A Mechanism to Make Authorization Decisions

1009

A policy template consists of a Condition Set, an Action Set, a Target Identity,
an Extension Set, an Evaluation Element Set, and a corresponding Priority
Set. The Condition Set, Action Set, Target Identity and Extension Set are learnt
from policy information provided by trustful PAs. The Evaluation Element
Set stores evaluation elements which are attributes of the policy owner. The
attributes are deﬁned by the PPU. They probably include the type of service
providers, the type of Virtual Organizations, security levels, etc. The Priority
Set stores the weights of importance of the evaluation elements.
(P olicy)A →← (P olicy)B
if (Condition)A ∩ (Condition)B = Ø
and (Action)A is: [Permit] to access resource for (Target Identity)
and (Action)B is: [Deny] to access resource for (Target Identity)
The above expression shows a generic conﬂict model for policy conﬂict between two policies. The symbol →← represents the conﬂict relationship, which
is symmetric. The expression states that (P olicy)A and (P olicy)B conﬂict if
they have an intersection of conditions which results in opposite authorization action on the resource (target services) for the Target Identity (service
requester).
During conﬂict detection in DPMF, the PPU (or delegated PA) also needs
to conclude permission conditions. An authoirzation is granted if only if there
exists a permission condition set for the task in the authorization request. The
permission conditions will be listed in an authorization token if the authorization
for the request is positive. The method of concluding permission conditions is
to intersect (i.e., AND operation) the conditions of the policies of the target
services, where the action of the policies is to permit the service authorization
requester to access the services. Therefore, the concluded conditions are the
largest condition set which allows the requester to access the multiple target
services simultaneously. The requester can then perform its task by making an
access to the target services under the conditions.
2.1

Conﬂict Analysis with Partial Information (CAPI) Mechanism

The CAPI mechanism is divided into three phases. The Pre-detection phase is
to prepare the ”policy template database”. The Detection phase is to generate
substitution policies to perform conﬂict detection and to conclude permission
conditions. The Post-detection phase is to communicate with untrustful hosts to
check the conﬂict detection results, and ﬁnally to make authorization decisions.
In the Pre-detection phase, the PPU collects policy information from trustful PAs to generate policy templates. The policy templates are used for generation of substitution policies during the CAPI detection phase.
Regarding the selection of a policy template, the PPU deﬁnes two control
factors: a similarity value threshold, and the maximum number of selected policy
templates. A similarity value is the similarity of attributes of the policy owner
of the policy template to that of the unknown policies.

1010

C.-M. Yu and K.-W. Ng

Service similarity value = P r1 Ev1 + P r2 Ev2 + P r3 Ev3 + . . . + P rn Evn
where P r: priority value; Ev: distance of evaluation element
values of the policy template to untrustful PA.
A lower service similarity value (SS value) means higher similarity of policy
owners in terms of the evaluation elements. A PPU would deﬁne a similarity
value threshold and a maximum number of substitution policies for generation of
substitution policies in the CAPI detection phase. A policy template would be
selected if its similarity value is smaller than the similarity value threshold.
In the CAPI pre-detection phase, after generating policy templates, the PPU
searches for the dynamically optimal Priority values. The PPU uses policy similarity value for the calculation. The policy similarity value (P S value)
measures the similarity of two sets of policies:
Policy similarity value =

Number of matched policies
Total number of policies of target policy owner

The optimal Priority values result into the highest correlation of SS value
and P S value, i.e.: the lower the SS value is, the higher the P S value is. The
searching method may be a complete search or a genetic algorithm [7]. The
evaluation function of the searching can be the weighed P S value of a number
of policy template pairs with lowest SS values.
After receiving an authorization request which requires CAPI (i.e., some of
the involved PAs are keeping their policy information private), the PPU will
enter the Detection phase. To substitute policies for an untrustful PA, the
PPU generates substitution policies by selecting from the policy templates. The
PPU would then use the substitution policies with the policies from trustful PAs
to perform conﬂict detection. During conﬂict detection, when a conﬂict occurs,
the corresponding substitution policy would be added into a ”Conﬂict Policy
Set”. The ”Conﬂict Policy Set” will be used in the CAPI post-detection phase.
After generating the ”Conﬂict Policy Set”, the PPU will enter the Postdetection phase. The Conﬂict Policy Set stores the substitution policies which
result into conﬂicts during the CAPI detection phase. The untrustful PA needs
to traverse the policies related to target service to see if any of them is a subset
of a policy in the Conﬂict Policy Set.
For a policy (P olicy)untrust in the untrustful PA compared to a policy
(P olicy)conf lict in the Conﬂict Policy Set, (P olicy)original and (P olicy)conf lict
are considered to be matched if the following three criteria are satisﬁed:
1. (Condition)conf lict is a subset of (Condition)untrust
2. (Action)conf lict is a subset of (Action)untrust
3. (Identity)conf lict is a subset of (Identity)untrust
The PA sends the checking result to the PPU to state the number of ”certiﬁed
conﬂict policies”. The PPU ﬁnally makes an authorization decision according to
the result. The decision can be based on whether the number of matched conﬂict
policies is within a threshold value which depends on the Grid environment.

A Mechanism to Make Authorization Decisions

3

1011

Performance of CAPI

Since the detection results of CAPI are obtained through estimation, we would
like to look into the accuracy of CAPI regarding several diﬀerent factors. We
have done simulation of CAPI based on the following environmental factors:
1. “Correlation of service similarity and policy similarity” (CoSP ):
It is a real value between 0 and 1. CoSP represents the likeliness of the
statement that ”the more similar the two services are (in terms of evaluation
element set), the more similar their policy sets are”. It is an objective factor
to the Grid environment. CoSP can be expressed in the following expression:
d(Policy similarity)
CoSP = d(Service
similarity)
2. “Maximum number of substitution policies” and ”Similarity value
threshold”: They are used in the selection of substitution policies. They
are conﬁgurable by the PPU. The similarity value threshold is represented
by a percentage value to the range of service evaluation values.
3. “Occurrence rate of opposite policy”: It represents the occurrence probability of an opposite policy in the Grid environment. An opposite policy is
a policy in conﬂict to the target policy. This is also an objective factor to
the Grid environment.
To evaluate the accuracy of CAPI, we deploy three performance indexes: “Average P S” measures the accuracy of CAPI regarding conﬂict detection results.

Fig. 2. Simulation results of diﬀerent maximum number of substitution policies: (a)10;
(b)20; (c)30; (d)40

1012

C.-M. Yu and K.-W. Ng

Fig. 3. Simulation results of diﬀerent similarity value threshold: (a)0%; (b)1%; (c)2%;
(d)3%

“Average P M ” and ”Average N M ” measure the quality of generated substitution policies.
of matched policies
1. P S = Total number ofNumber
policies of the untrustful
of matched policies
2. P M = Total Number
number of substitution policies
of opposite policies
3. N M = TotalNumber
number of substitution policies

service owner

From a single diagram in Figure 2 (e.g., Figure 2b) we can see the eﬀect of
”Correlation of service similarity and policy similarity” (CoSP ) to the accuracy.
When CoSP increases:
Average P S increases; Average positive match (P M ) increases;
Average negative match (N M ) decreases.
Obviously, CoSP is a signiﬁcant factor to the accuracy of CAPI. The higher
the CoSP is, the higher the accuracy of CAPI is.
Figure 2 illustrates the eﬀect of ”maximum number of substitution policies” to
the accuracy of CAPI. Number of policies for each service is 10. The ”maximum
number of substitution policies” in Figure 2 ranges from 10 to 40.
When ‘‘maximum number of substitution policies" increases:
Average PS increases; Average positive match (P M ) does not
change; Average negative match (N M ) does not change
significantly.
We can see that a larger “maximum number of substitution policies” can
slightly increase the accuracy of the conﬂict detection result.

A Mechanism to Make Authorization Decisions

1013

Fig. 4. Simulation results of diﬀerent occurrence rate of opposite policy: (a)2%; (b)3%;
(c)4%; (d)5%

Figure 3 illustrates the eﬀect of ”similarity value threshold” to the accuracy
of CAPI. The ”similarity value threshold” in Figure 3 ranges from 0% to 3%.
When ‘‘similarity value threshold" increases:
Average PS decreases; Average positive match (P M ) decreases;
Average negative match (N M ) increases.
We can see that the “similarity value threshold” is a signiﬁcant factor to the
accuracy of CAPI. The higher the ”similarity value threshold” is, the lower the
accuracy of CAPI is.
According to Figure 4, a higher ”occurrence rate of opposite policy” results in
a higher average negative match (N M ) but does not signiﬁcantly aﬀect average
P S and average positive match (P M ). Therefore the ”occurrence rate of opposite
policy” aﬀects the error rate of conﬂict detection result in CAPI.
A PPU can learn the values of the environment factors during the predetection phase of CAPI. By knowing the environment factors, the PPU can set
the threshold value for decision making in the post-detection phase. The PPU
makes service authorization decision according to: number of ”certiﬁed conﬂict
policies” (CCP), negative match (N M ) value, positive match (P M ) value, and
number of substitution policies. Positive authorization would be made if:
Number of CCP ≤ (1 − P M ) × (Number of substitution policies)

1014

C.-M. Yu and K.-W. Ng

This is because the value (1 − P M ) represents the error rate of CAPI. Here
we assume that the value (1 − P M ) is larger than the N M value; otherwise, we
use N M to replace (1 − P M ) instead.

4

Conclusions

In this paper, we present the Conﬂict Analysis with Partial Information (CAPI)
mechanism. In an open collaboration of VOs, some VOs may want to keep their
policy information private. The CAPI mechanism can manipulate service authorization requests when the requests may involve private or unknown policies.
CAPI estimates the policies in the unknown policy set, generates substitutions
for unknown policies, ﬁnds out the ones which can cause conﬂict, then sends the
set of conditions to the untrustful VO for its checking. Simulation results show
that CAPI is more suitable to environments where there is a high correlation
between the similarity of policy owners’ properties and the similarity of their
policy sets. Policy decision point can learn the values of environment factors to
improve the eﬀectiveness of CAPI.

Acknowledgments
The work described in this paper was partially supported by a grant from the Research Grants Council of the Hong Kong Special Administrative Region (Project
no. CUHK4220/04E).

References
1. B.E. Carpenter, and P. A. Janson. Abstract Interdomain Security Assertions: A
Basis for extra-grid virtual organizations, IBM Systems Journal, Vol. 43, No. 4,
2004, pp. 689-701.
2. Gary N. Stone, Bert Lundy, and Geoﬀery G. Xie, U.S Department of Defense. Network Policy Languages: A Survey and a New Approach, in IEEE Network, Jan/Feb
2001.
3. J. Strassner and E. Ellesson. Terminology for Describing Network Policy and Services, Internet draft draft-strasner-policy-terms-01.txt, 1998.
4. Dinesh Verma, Sambit Sahu, Seraphin Calo, Manid Beigi, and Isabella Chang: A
Policy Service for GRID Computing, M. Parashar(Ed.): GRID 2002, LNCS 2536,
pp. 243-255.
5. Von Welch, Frank SiebenSet, Ian Foster, John Bresnahan, Karl Czajkowski, Jarek
Gawor, Carl Kesselman, Sam Meder, Laura Pearlman, and Steven Tuecke. Security
for Grid Services, in Proceedings of the 12th IEEE International Symposium on
High Performance Distributed Computing (HPDC’03).
6. Chiu-Man Yu and Kam-Wing Ng. Dynamic Policy Management Framework for Partial Policy Information, Advances in Grid Computing - EGC 2005. European Grid
Conference, Amsterdam, The Netherlands, February 14-16, 2005, Revised Selected
Papers, Lecture Notes in Computer Science, vol. 3470, pages 578-588, Springer, June
2005.
7. M. Srinivas and L.M. Patnaik. Genetic Algorithms: A Survey, in IEEE Computer,
vol. 27, Issue 6, June 1994, pp. 17-26.

