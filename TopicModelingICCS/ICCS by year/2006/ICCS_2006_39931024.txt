Local Information Based Algorithms for Packet
Transport in Complex Networks
Bernard Kujawski1 , G.J. Rodgers1 , and Bosiljka Tadi´c2
1

2

Department of Mathematical Sciences, Brunel University, Uxbridge,
Middlesex UB8 3PH, UK
{bernard.kujawski, g.j.rodgers}@brunel.ac.uk
Department for Theoretical Physics, Joˇzef Stefan Institute, P.O. Box 3000,
SI-1001 Ljubljana, Slovenia
bosiljka.tadic@ijs.si
Abstract. We introduce four algorithms for packet transport in complex networks. These algorithms use deterministic rules which depend, in
diﬀerent ways, on the degree of the node, the number of packets posted
down each edge, the mean delivery time of packets sent down each edge to
each destination and the time since an edge last transmitted a packet. On
scale-free networks all our algorithms are considerably more eﬃcient and
can handle a larger load than the random walk algorithm. We consider in
detail various attributes of our algorithms, for instance we show that an
algorithm that bases its decisions on the mean delivery time jams unless
it incorporates information about the degree of the destination node.

1

Introduction

Complex networks can be used to model a wide range of physical and technological systems. One of the most interesting dynamical problems on network is
transport, which can give us some insight into the transport of information in
technology based communication networks like the internet [1], the World Wide
Web [2],[3] or phone call networks [4]. Here we use the term transport to mean
transport of particles, which are packets in a network. Thus our model falls within
the Network Layer of the OSI Reference Model and the algorithms described in
section 3 are routing algorithms that belong to the Network Layer of the OSI
Reference Model. Of particular interest is the phenomenon of load in a network,
as a function of the rate of packet creation R, which has been investigated for
models of communication networks [5, 6],[7],[8] and in real networks [9].
Typically the problem of transport is investigated using either a random walk
algorithm [6], or the shortest path algorithm used by most internet protocols. The
diﬃculty with these approaches is that random walk algorithm is very ineﬃcient
for transport in technology based communication networks and shortest path
algorithm requires, for its implementation, information about all connections in
network. In this paper we focus on algorithms that use local information about
the topology, along with information about the ﬂux of packets between neighbors,
the link load and the time taken to deliver packets. We propose four algorithms
that use some or all of these properties to deliver packets in a network.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 1024–1031, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Local Information Based Algorithms

1025

In section 2 we describe the algorithm that we use to perform numerical
simulations of our models. In section 3 we discuss the algorithms that packets
use to ﬁnd their destinations and in section 4 we show our results. In section 5
we summarise our results.

2

The Program

A program was written to simulate packet transport on a network that does
not depend on the size of the network or its topology. At the beginning of the
program an external ﬁle with the adjacency matrix of the network is read in.
We focus on the internet and consequently we treat nodes in our network as if
they were routers. The connections between the routers have the same capacity
for all networks. Such a model can not only be used to model internet packet
transport but also for a range of transport networks in which the nodes have
local routing information.
Each Node
– Generates a new packet with probability r = R/N and with a randomly
chosen destination, where R is a ﬁxed rate for the whole network, and N is
the number of nodes in network.
– Stores packets in a queue, which has maximum length is L = 1000. Packets
are despatched from the queue in a ﬁrst in ﬁrst out (FIFO) order.
– Sends packets to its neighbours.
Each Node Has Information About
– The address of all its neighbours (they have unique indices j).
– The degree of its neighbours - k(i).
– Flow through all its neighbours, which is measured by
• The number of packets posted down each edge to neighbour i - the Link
Load - C(i).
• The number of packets sends through neighbour i, which have reached
their destination - NP (i).
• The sum of the delivery times of all the packets sent through neighbour
i that have reached their destination - TP (i).
• The time interval since an edge last transmitted a packet to neighbour i
and current time step - ΔT (i).
The index i enumerates each neighbour of node k and each node keeps all the
statistics about its neighbours. Quantities C(i), NP (i), TP (i) and ΔT (i) describe
node i from the perspective of node k. Each node is described by its neighbours
and all properties can be diﬀerent for all neighbours that describe node i.
The initialization part of the program sets up the network topology, the nodes
and all the tables used by them. Inside the main loop a time step is incremented,
and within that a loop over all nodes calculates and updates the statistics. The
loop over all nodes includes three basics routines, which are run for each node;

1026

B. Kujawski, G.J. Rodgers, and B. Tadi´c

generating new packets, checking its queue for packets with its address and
sending packets to its neighbours. Each node generates a packet with a randomly chosen destination with probability R/N . The node checks its own queue
for packets addressed to itself. When it ﬁnds one of these it deletes it from
the queue and updates the statistics NP (i) and TP (i) for all the nodes on the
packet’s path. Each packet keeps track of its own path. The node sends packets
to its neighbours by taking the ﬁrst packet in its queue and checking the packet
destination address. If the packet is addressed to one of its neighbour, the node
will send it to the neighbour. If it is not, the node will use the algorithm to
ﬁnd where to send the packet. During this posting step the C(i) property is
updated. When node k sends packets to node i, the number of sent packets C(i)
increases. After this loop over all the nodes is completed the quantities ΔT (i)
and the mean delivery time of packets sent down each edge NP (i)/TP (i) are
updated for all nodes.

3

Algorithms

The most important element in transport is the rule that determines the direction
in which a packet is sent. A transport network without a rule is a random
walk network. We call this rule the algorithm. It describes how nodes deal with
packets and should help packets to get to their destination. Not all algorithms
help packets to reach destinations, poor algorithms can easily be worse than
the random walk algorithm. All algorithms considered in this paper work with
deterministic rules.
The shortest time (ST) algorithm is our basic algorithm that uses information
about the mean delivery time TP (i)/NP (i) and the time interval between the
last packet that came to node i and actual time step. The ST algorithm ﬁnds
the minimum value
TP (i) 1
(1)
Sk = min
NP (i) ΔT (i) i=1...n
in order to determine which node to send the packet to. The idea of this algorithm
is to try and ﬁnd the minimum travel time for each packet between source and
destination. At the start of the simulation S is equal to 0 for all neighbours.
Because the update of TP (i)/NP (i) only occurs when a packet arrives at its
destination, it can take a number of time steps before TP (i)/NP (i) becomes nonzero. The inclusion of the reciprocal of ΔT (i) in S ensures that the algorithm
does not get into a state where it never sends a packet down certain links which
have a large mean delivery time. This state is particularly likely to occur at the
start of the simulation. The inclusion of the reciprocal of ΔT (i) in S also prevents
overcrowding when a node ﬁnds a node which is clearly better than all its other
neighbours. Hence, because of the inclusion of ΔT (i) more nodes take part in the
transport and in this way the large node do not become overcrowded. Because the
algorithm with TP (i)/NP (i) is looking for minimum delivery time we call it the
shortest time (ST) algorithm. To start this algorithm, and the STD algorithm,
which we will introduce shortly, we use the random walk algorithm. We only use

Local Information Based Algorithms

1027

the deterministic algorithms at a node when all the values of S of its neighbours
are greater than 0. Without this initial random walk procedure both the ST
and the STD algorithms would jam almost immediately. The shortest time and
degree (STD) algorithm is a modiﬁcation of the ST algorithm. It uses information
about the local topology, the degree. This helps packets avoid the nodes with
the largest degree, which are mostly overcrowded. The idea of incorporating
information about the degree of nodes in the transport algorithm was discussed
in [10] and [11]. In these papers models were introduced in which nodes were
selected at a rate proportional to a power of their degree. It was found that the
most eﬃcient algorithm was one in which the probability of selecting a node of
degree k was proportional to 1/k [10] and [11]. The STD algorithm is deﬁned by
Sk = min

TP (i) 1
k(i)
NP (i) ΔT (i)

(2)
i=1...n

where k(i) is a degree of node i and k(i) > 1. This last assumption allows the
algorithm to avoid dead-end nodes. A node with degree k = 1 can only receive
a packet that is addressed to itself. The STD algorithm uses both temporal
properties and also information about the local connectivity. For transport in a
scale-free network the most important nodes are those with the largest degree.
But because their neighbours send these nodes a large number of packets the
queues at these nodes can become overcrowded. Information about the degree
helps the algorithm to avoid these nodes, but it does not mean than they are
not used.
The connections and degree (CD) algorithm and the connections, degree and
shortest time (CDT) algorithm use information about the link load C(i). Because
of this the random walk starting procedure used in the ST and STD algorithms
is not required for the CD and CDT algorithms. The CD algorithm uses only
information about the link load and the degree. The CD algorithm is deﬁned by
Sk = min[C(i)k(i)]i=1...n

(3)

where C(i) is a number of packets that node k sends to node i.
For this algorithm S equals 0 at the start, but C(i) is updated almost immediately. When node k sends a packet then it automatically increases the value
of C(i). There is no need to wait for information from the destination about
the delivery time like in the ST and STD algorithms. In this way CD algorithm improves very quickly and the random walk is not needed. The link load,
C(i), quantity helps the algorithm to deliver packets and ensures that almost
all nodes take part in the transport. The degree quantity helps to prevent the
largest nodes from becoming overcrowded. In this algorithm there is no property
that can be optimised, unlike in the ST and STD algorithms where the delivery
time is optimised.
The CDT algorithm is intermediate between the CD and the ST algorithms.
It optimises the delivery time and does not need the random walk starting procedure because it includes a dependance on the link load, C(i). The dependence
on degree prevents large nodes becoming overcrowded. For the CDT algorithm,

1028

B. Kujawski, G.J. Rodgers, and B. Tadi´c

the starting procedure is the same as for the CD algorithm except that we set
the ratio
TP (i) 1
;
(4)
R≡
NP (i) ΔT (i)
equals to 1 at the start to avoid 0 value. This means that we do not need to
start oﬀ with a random walk algorithm as in the ST and STD algorithms. The
CDT algorithm is deﬁned by
Sk = min

TP (i) 1
C(i)k(i)
NP (i) ΔT (i)

with k(i) > 1.

(5)

i=1...n

We use the learning property to describe behavior of an algorithm in the
beginning. By learning we mean the proportion of links whose value of S has
changed since t = 0. The CD and CDT algorithms learn the most quickly.
After 5000 time steps they tried 95% of links. This is because the link load,
C(i), changes when a packet is sent down it whereas TP (i)/NP (i), used by the
ST and STD algorithms, only changes when a packet sent down it gets to its
destination. That is way the ST and STD algorithms need the random walk
starting procedure. With this procedure after 5000 time steps 35% of links were
tried. For the ST algorithm without the random walk starting procedure it was
5%. The speed of learning is important because when a network learns slowly,
the network only uses a small proportion of its links for transport over a long
period of time, which means that the network is easily jammed when a region
of the network becomes overcrowded.

4

Results

We consider transport on the scale-free network [12] with N = 1000 nodes and
m = 2 outgoing links per node. This is an example of uncorrelated network with
a power-law distribution of incoming links P (k) ∼ k −3 for large k. When m = 2
the network includes loops and has relatively small number of connections. Our
research show that this network jams for lower values of the posting rate than
networks with m = 1 or m = 3 and higher. In this work we use a posting rate
of R = 0.1. This means that each node creates a packet with probability R/N .
The number of time steps for all our simulations is 500, 000. We present results
for the STD, CD and CDT algorithms. We do not consider the ST algorithm
any further because it isn’t stable and always jams.
In ﬁgure 1a we show the load in the network, the number of packets that
are still in the network. All three algorithms are stable (exhibiting stationary
ﬂow). We compared the level of load by ﬁnding the mean value of the number
of packets in the network. The best algorithm with smallest mean value is the
STD algorithm. For the CD and CDT the values are almost the same.
The number of packets in network can be treated as a noise in the network.
Measuring the power spectrum of the noise shows that there are correlations
in the number of packets on the network. For all three algorithms the power

Local Information Based Algorithms

1029

Fig. 1. The load properties. a) Load in the network against time for the STD, CD and
CDT algorithms. b) The power spectrum of the load time series.

spectrum (Fig. 1b) has the slope 1/f −φ with φ = −2, indicating short-range
correlations.
Further we measured the time interval ΔT (i), the time that a node waits for
next packet. The results for the distribution of ΔT (i) are shown in ﬁgure 2 for
all three algorithms. This quantity is important for the improved navigation in
the STD and CDT algorithms. We found that without the ΔT (i) in Eqs ( 2, 5)
the networks easily jam.
For the STD algorithm the distribution of ΔT (i) has a tail and on a double
logarithmic scale has a slope b = −3/2. The cut-oﬀ comes from the ﬁnite time
of the simulation. The ﬁrst part of the distribution for all algorithms is ﬂat. For
the CDT algorithm the function falls faster than for the STD. This is connected
with the inclusion of the link load in the CDT algorithm, which means that more
links are used and long time intervals of ΔT (i) do not occur as frequently as
in the STD algorithm. The CD algorithm does not make use of ΔT (i) but we
measured it for comparison.

Fig. 2. Distribution of time interval ΔT (i) for three navigation algorithms

The distribution of packet delivery time T are given in ﬁgure 3a. At long
times these distributions appear to be similar for all three algorithms. However
the number of packets delivered in a short time diﬀers between the algorithms.

1030

B. Kujawski, G.J. Rodgers, and B. Tadi´c

In particular, for the STD algorithm the probability that a packet is delivered
quickly is much higher compared to the CD and CDT algorithms. This is reasonable, because STD algorithm ﬁnds the paths with the shortest delivery time.
Whereas, the CD and CDT algorithms are distributing the transport across the
network making use of the link load C(i) condition. The distribution P (T ) for
the CDT algorithm interpolated between the STD and CD algorithms reﬂects
its dependence on both the link load C(i) and the shortest time statistics.

Fig. 3. The time delivery quantities. The distribution of delivery times of packets (a)
and the average delivery time (b) for the STD, CD and CDT algorithms.

The time series for the overall mean delivery time of packets (Fig. 3b) show
further diﬀerences between the navigation algorithms. The algorithms involving
the delivery time statistics for TP (i)/NP (i) reach a stable (optimal) level of the
average delivery time and maintain it almost constant. On the other hand, the
mean delivery time in the CD algorithm increases slowly, suggesting that in
this case no optimisation is taking part since none of the involved quantities is
requested to be optimized.
The observed result for the STD and CDT algorithms arise through two effects: First, inserting the ΔT (i) condition in the search rule, nodes intend to send
packets through rarely used links. Often these are not the best choices for the
transport, however, this mechanisms prevent the network from jamming. Second, including the degree rule in the navigation, nodes preferably send packets
to neighbours with a small degree, which potentially makes the delivery times
longer on the scale-free network.

5

Conclusions

We have introduced several navigation algorithms that are capable to improve
the packet transport by optimizing the average delivery times of packets and preventing the network from jamming. We have demonstrated comparatively how
these algorithms work in traﬃc on an uncorrelated scale-free network, which is
known to be very prone for jamming [5]. These are the algorithms STD and
CDT, which are based on the updated statistics of the travel times of packets (global information) and (local) information on the degree of their nearest

Local Information Based Algorithms

1031

neighbour nodes. For comparison, we have also shown how the traﬃc behavior
changes when parts of these informations are missing, as in the CD and ST algorithms, respectively. In the absence of local rule, the ST navigation leads to
traﬃc jamming relatively quickly, although it is better compared to the random
diﬀusion for the same posting rate. Whereas, in the case of navigation with the
CD algorithm (no global information), the traﬃc seems to be stationary and the
results comparable with the other two methods. When the shortest time property is used it needs to be balanced by the degree rule on scale-free networks.
The existence of hubs causes traﬃc congestion for the shortest time algorithm,
similarly to the traﬃc along the topologically shortest paths.
On the technical level, implementation of the STD and CDT algorithms the
problem is in ﬁnding the accurate value for the edge dependent properties. A
node needs a lot of traﬃc through a given link in order to ﬁnd its proper time
statistics. Because the mean delivery time is very long, it takes a lot of time to
set up the edges dependent properties for all nodes. In particular, the algorithms
that depend on the time ΔT (i) and the degree k(i) do not jam but the costs
is in learning phase and therefore increased mean delivery time. Using the local
property ΔT (i) in the navigation rule helps in preventing the jamming but at
the same time deteriorates the feedback eﬀects from the travel time statistics.
The degree property helps the algorithm to avoid nodes with large degree, but it
also results in long delivery times. Our results show that in scale free networks
we cannot avoid using nodes with large degree.
In the future work the methods developed here can be used for determining the
optimal transport path for packets. Some of the related subjects are applications
of these algorithms to diﬀerent or more realistic network geometries, varying
posting modes, and increased traﬃc “bandwidths” at large node.

References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.

Faloutsos, M., Faloutsos, P. and Faloutsos, C.: Comp. Comm. Rev. 29 (1999) 251
Albert, R., Jeong, H. and Barabasi, A.-L.: Nature 401 (1999) 130
Huberman, B. and Adamic, L.: Nature 401 (1999) 131
Adamic, L. A. , Lukose, R. M., Puniyani, A. R. and Huberman, B. A.: Phys. Rev.
E 64 (2001) 046135
Tadi´c, B. and Thurner, S.: Physica A 332 (2004) 566
Tadi´c, B. Thurner, S. and Rodgers, G.J.: Phys. Rev. E 69 (2004) 036102
Arenas, A., Diaz-Guilera, A. and Guimera, R.: Phys. Rev. Lett. 86(2001) 3196
Sole, R. and Valverde, S.: Physica A 289 (2001) 595
Jacobson, V.: in Proceedings of SIGCOMM ’88 (ACM, Standford, CA, 1988)
Yan, G., Zhuo, T., Hu, B., Fu, Z.-Q. and Wang, B.-H.: cond-mat/0505366 (2005)
Yin, C.-Y., Wang, B.-H., Wang, W.-X., Zhou, T. and Yang, H.-J.: condmat/0506204 (2005)
Albert, R. and Barabasi, A.-L.: Rev. Mod. Phys. 74 (2002) 47

