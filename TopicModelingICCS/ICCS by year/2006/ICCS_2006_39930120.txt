Forward, Tangent Linear, and Adjoint
Runge-Kutta Methods in KPP–2.2
Philipp Miehe and Adrian Sandu
Department of Computer Science, Virginia Polytechnic Institute and State
University, Blacksburg, VA 24061
{pmiehe, asandu}@cs.vt.edu
Abstract. This paper presents the new stiﬀ solvers of the new version
2.2 of the Kinetic PreProcessor (KPP). Taking a set of chemical reactions
and their rate coeﬃcients as input, KPP generates Fortran90, Fortran77,
Matlab, or C code for the temporal integration of the kinetic system.
Eﬃciency is obtained by carefully exploiting the sparsity structures of
the Jacobian and of the Hessian. A set of integration methods was added
to the comprehensive suite of stiﬀ numerical integrators. Moreover, KPP
is now ready do be used to generate the tangent linear model, as well as
the continuous and discrete adjoint models of the chemical system to do
sensitivity analysis.

1

Introduction

The application of computer modeling in atmospheric chemistry requires eﬃcient
tools for simulation and analysis of chemical reaction mechanisms. Due to the
side by side existence of very stable (e.g., CH4 ) and very reactive (e.g., O1D )
species numerically challenging software has been developed to integrate stiﬀ
ordinary diﬀerential equations (ODEs), e.g., Facsimile [6], AutoChem [19], Spack
[7], Chemkin [20], Odepack [21] , and KPP [1].
Many academic, research, and industry groups in diﬀerent countries are currently using KPP [8, 9, 11, 12, 10]. The Master Chemical Mechanism (MCM [22])
now provides the option for output in KPP syntax. In this paper we focus on
new integrators introduced in version 2.2 of KPP. These integrators allow for
high accuracy in eﬃcient simulation of chemical kinetic systems in Fortran90
and Matlab.
The paper is organized as follows. A short overview of usage for KPP is given.
The new integrators are presented in Sec. 3. Here we show the mathematical
background and mention implementation details. Section 4 shows results from
applying the solvers to a chemical system. The conclusion ﬁnally is presented in
Sec. 5.

2

The Kinetic PreProcessor KPP

The Kinetic PreProcessor KPP [1, 2, 3] is a software tool that assists the computer simulation of chemical kinetic systems. The concentrations of a chemical
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 120–127, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Forward, Tangent Linear, and Adjoint Runge-Kutta Methods in KPP–2.2

121

system evolve in time according to the diﬀerential law of mass action kinetics. A numerical simulation requires an implementation of the diﬀerential laws
and a numerical integration in time. KPP is currently being used by many academic, research, and industry groups in several countries [8, 9, 11, 12, 10]. The
well-established Master Chemical Mechanism (MCM [22]) has also recently been
modiﬁed to add the option of producing output in KPP syntax.
KPP translates a speciﬁcation of the chemical mechanism into Fortran77, Fortran90, C, or Matlab simulation code that implements the concentration time
derivative function, its Jacobian, and it Hessian, together with a suitable numerical integration scheme. Sparsity in Jacobian/Hessian is carefully exploited in order to obtain computational eﬃciency. Fortran90 is the programming language of
choice for the vast majority of scientiﬁc applications. Matlab [25] provides a highlevel programming environment for algorithm development, numerical computations, and data analysis and visualization. The Matlab code produced by KPP
allows a rapid implementation and analysis of a speciﬁc chemical mechanism.
KPP incorporates a library with several widely used atmospheric chemistry
mechanisms; the users can add their own chemical mechanisms to the library.
KPP also includes a comprehensive suite of stiﬀ numerical integrators. The KPP
development environment is designed in a modular fashion and allows for rapid
prototyping of new chemical kinetic schemes as well as new numerical integration
methods.
A summary of KPP generated routines is given below:
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.

3

Fun: the time derivative of concentrations;
Jac, Jac SP: Jacobian of Fun in full or in sparse format;
KppDecomp: sparse LU decomposition for the Jacobian;
KppSolve, KppSolveTR: solve sparse system with the Jacobian matrix and
its transpose;
Jac SP Vec, JacTR SP Vec: sparse Jacobian (transposed or not) times vector;
The stoichiometric matrix STOICM;
ReactantProd: vector of reaction rates;
JacReactantProd: the Jacobian of the above;
dFun dRcoeﬀ: derivatives of Fun with respect to reaction coeﬃcients (in
sparse format);
dJac dRcoeﬀ: derivatives of Jac with respect to reaction coeﬃcients times
user vector;
Hess: the Hessian of Fun; this 3-tensor is represented in sparse format;
Hess Vec, HessTR Vec: Hessian (or its transpose) times user vectors; same
as the derivative of Jacobian (transposed) vector product times vector.

The Numerical Integrators

The new numerical integrators expand the original set of stiﬀ solvers for ODEs
for chemical kinetic systems. The KPP numerical library provides implementations of several stiﬀ numerical solvers. Eﬃciency is obtained through the use

122

P. Miehe and A. Sandu

of sparse linear algebra routines generated by KPP. Several Rosenbrock methods of various orders are implemented in KPP [4]. These methods have proved
to be very eﬃcient on many applications, and especially in atmospheric chemistry. The variable order stiﬀ extrapolation code SEULEX [14] is able to produce
highly accurate solutions. The Livermore ODE solver (LSODE, LSODES [16])
implements backward diﬀerentiation formula (BDF) methods for stiﬀ problems.
The solver VODE [17] uses a diﬀerent formulation of backward diﬀerentiation
formulas. The BDF-based direct-decoupled sensitivity integrator ODESSA [15]
has been modiﬁed to use the KPP sparse linear algebra routines.
In this paper we focus on the new implementations of stiﬀ Runge-Kutta methods which have been added to the KPP library. A general s-stage Runge-Kutta
method is deﬁned as [13]
y n+1 = y n + h

s

bi ki ,

T i = tn + c i h ,

Yi = y n + h

i=1

s

aij kj ,
j=1

ki = f ( Ti , Yi ) ,

(1)

where the coeﬃcients aij , bi and ci are prescribed for the desired accuracy and
stability properties. The stage derivative values ki are deﬁned implicitly, and
require solving a (set of) nonlinear system(s). Singly diagonally-implicit RungeKutta (SDIRK) methods [13] are deﬁned by (1) with the coeﬃcients aii = γ and
ai,j = 0 for all i and j > i.
Two families of solvers have been added to the KPP library, with multiples
methods within each family. These methods are discussed next.
Fully implicit Runge-Kutta methods. The three stage Radau-2A is a RungeKutta method of order 5 based on Radau-IIA quadrature and stiﬄy accurate.
While Radau-2A is relatively expensive (when compared to the Rosenbrock
methods), it is more robust and is useful to obtain accurate reference solutions.
The discrete adjoint of Radau-2A methods are the Radau-1A methods with the
same number of stages; therefore the discrete adjoints of Radau-2A methods
are not stiﬄy accurate. The three stage Lobatto-3C method of order 4 is another stiﬄy accurate method, whose discrete adjoint is the Lobatto-3C method
Table 1. The coeﬃcients of Radau-2A method (left) of order 5 and of the Lobatto-3C
method (right) of order 4
√
4− 6
10

√
88−7 6
360

√
88+7 6
360

√
−2−3 6
225

√
16− 6
36

√
16+ 6
36

1
9

√
16− 6
36

√
16+ 6
36

1
9

√
√
4+ 6 296+169 6
10
1800

1

√
√
296−169 6 −2+3 6
1800
225

1
6

− 31

1
6

1 1
2 6

5
12

1
− 12

1
6

2
3

1
6

1
6

2
3

1
6

0

1

Forward, Tangent Linear, and Adjoint Runge-Kutta Methods in KPP–2.2

123

Table 2. The coeﬃcients of Sdirk-2a (left), Sdirk-2b (middle), and Sdirk-3a (right)
methods. All methods have order 2.
√

√

2− 2 2− 2
2
2
√

1

2
2

√
2+ 2 2+ 2
2
2

√
3− 3
6

√

0
√

2− 2
2

1

0

√
√
− 22 2+2 2

1−
1

√

2
2

√
2− 2
2

−

√
√
2 2+ 2
2
2

√
3− 3
6

0

√
√
3 3− 3 3− 3
3
6
6

0

√

0

√
3− 3
6

√
3
3

√
3− 3
6

√
3− 3
6

√
3
3

√
3− 3
6

itself. Thus the discrete adjoint is stiﬄy accurate. The Butcher tableaus for these
methods are presented in table 1.
Singly-diagonally-implicit Runge-Kutta methods. Sdirk-2
√ are 2-stage, L-stable,
stiﬄy accurate methods of order 2.√The choice γ = 1 − 2/2 (Sdirk-2a) is more
accurate, while the choice γ = 1 + 2/2 (Sdirk-2b) may be advantageous when
a non-negative numerical solution (concentrations) are needed.
Sdirk-3a is a 3-stage, second order, stiﬄy accurate method. Its coeﬃcients are
chosen such that the discrete adjoint is also stiﬄy accurate.
The methods Sdirk-4 are the fourth order L-stable singly-diagonally-implicit
Runge-Kutta methods developed by Hairer and Wanner [14]. Speciﬁcally, Sdirk4a is the method with γ = 4/15 and Sdirk-4b the method with γ = 1/4. The
coeﬃcients of these methods are given in [14] and not reproduced here.
Implementation Aspects. Following [14, Section IV.8], for implementation purposes (1) is written in terms of the variables Zi = Yi − y n . Replacing the nonlinear system in ki by a nonlinear system in Zi has numerical advantages for stiﬀ
systems where f has a large Lipschitz constant. With the compact notation
Z = Z1 · · · Zs

T

,

F (Z) = f ( T1 , y n + Z1 ) · · · f ( Ts , y n + Zs )

T

,

the nonlinear system (1) in Z is
Z = (hA ⊗ In ) · F (Z) ,

(2)

where ⊗ denotes the Kronecker product. This system can be solved by simpliﬁed
Newton iterations of the form
[Ins − hA ⊗ J ( tn , y n )] · ΔZ [m] = Z [m] − (hA ⊗ I) F [m]
Z [m+1] = Z [m] − ΔZ [m]

(3)

with J the Jacobian of the ODE function. The linear systems in (3) have dimension ns × ns. For SDIRK methods (3) is a sequence of s nonlinear systems of
dimension n × n. For fully implicit methods a transformation of the system (3)
to complex form is used following [14].

124

P. Miehe and A. Sandu

Using the implementations of the forward routines, integrators for the tangent
linear model (TLM) and adjoint model (ADJ) were developed. Each family of forward methods (implicit Runge-Kutta, singly-diagonally-implicit Runge-Kutta,
and Rosenbrock methods) was extended to calculate the TLM, the generated
result is the sensitivity matrix.
Small perturbations of the solution (due to small changes δy 0 in the initial
conditions) propagate forward in time according to the tangent linear model.
The variation of (1) is equivalent to applying the Runge-Kutta to the sensitivity
equation to get the tangent linear Runge-Kutta methods:
y n+1 = y n + h
Yi = y n + h

s

bi ki , δy n+1 = δy n + h

i=1
s

aij kj ,

δYi = δy n + h

j=1

s

bi

i

,

i=1
s

aij

j

,

(4)

j=1

ki = f ( Ti , Yi ) ,

i

= J (Ti , Yi ) · δYi .

The system (4) is linear and does not require an iterative procedure. However,
even for a SDIRK method (aij = 0 for i > j and aii = γ) each stage requires
the LU factorization of a diﬀerent matrix. To avoid repeated factorizations our
implementation solves the linear system (4) by iterations of the form (3), re-using
the LU decomposition of the matrix based on J(tn , y n ).
The adjoint methods present the ﬁnal additions to the library of integrators.
By solving the system in forward mode and using checkpoints to save the states
at each step of the computation the sensitivity matrix is calculated in backward
mode on these checkpoints.
The discrete adjoint of the Runge-Kutta method (1) is
⎞
⎛
ui = h J T (Ti , Yi ) · ⎝bi λn+1 +

s

aj,i uj ⎠ ,

i = s, · · · , 1

(5)

j=1

λn = λn+1 +

s

uj .
j=1

For bi = 0 the RK adjoint can be rewritten as another Runge-Kutta method. To
avoid repeated factorizations our implementation solves the linear system (5) by
iterations of the form (3), re-using the LU decomposition of the matrix based
on J(tn , y n ). The forward backward substitutions correspond to the transpose
of the system (3).

4

Application and Results

In this section we illustrate the behavior of the new integrators applied to a
chemical model. The computations were tested against an independent code:
Fortran77 SEULEX stiﬀ diﬀerential equations solver by Hairer and Wanner [14].

Forward, Tangent Linear, and Adjoint Runge-Kutta Methods in KPP–2.2

4.1

125

The Chemical Model

The chemical model chosen is the SAPRC99 model [18]. It includes 74 species
and 211 chemical reaction equations on these species. The tests were performed
on data after a 24 hour stabilizing period. The integrators were applied on a 24
hour interval. Emissions have been included in the computations.
4.2

Forward Methods

All new solvers have been tested thoroughly. The forward integrators were tested
on the full range of relative error tolerances of 10−1 up to 10−8 . The absolute
error tolerances were adjusted accordingly (103 · rel tol). Results can be seen
in Fig. 1. While the implicit Runge-Kutta methods Radau-2A and Lobatto-3C
are still very time eﬃcient at high accuracy, the Rosenbrock and Sdirk methods
are very eﬃcient in lower accuracy areas. The Rodas-4 integrator shows very
powerful and fast performance in our application.

Error norm (RMS)

Error norm (RMS)

−4

10

−6

10

−8

−4

10

−6

10

1

10
CPU time

2

10

−6

10

10

−10

0

10

−4

10

−8

10

−10

Sdirk−2A
Sdirk−2B
Sdirk−3A
Sdirk−4A
Sdirk−4B

−2

10

−8

10

10

Ros−2
Ros−3
Ros−4
Rodas−3
Rodas−4

−2

10

Error norm (RMS)

Radau−2A
Lobatto−3C

−2

10

−10

10

0

10

1

10
CPU time

2

10

10

0

10

1

10
CPU time

2

10

Fig. 1. Comparison of time eﬃciency and accuracy of forward Runge-Kutta, Rosenbrock and Sdirk methods

4.3

Tangent Linear Methods

Main feature of the new implementation are the sensitivity calculations. The
Tangent Linear Model provides the background for the TLM-solvers. The tested
relative error tolerances were 10−3 , 10−6 , 10−9 , and 10−12 . The default settings
of Radau-2A stopped the calculations when applying the tolerance of 10−12
- to many steps were used, here we didn’t report a result. Figure 2 presents
four exemplary results when using the newly implemented integrators. Timeeﬃciency of Sdirk-4B is the best for any lower accuracy in our model.
4.4

Adjoint Methods

The adjoint methods also provide the sensitivity matrix. The backward scheme
requires a large amount of memory storage for results of the forward computation. In order to obtain higher accuracy, even more memory will be used. We
have tested our code on error tolerances of 10−3 , 10−6 , and 10−9 . Here, Rodas4 outperformed Sdirk-4B. In the future we will also implement adjoints based
on Radau-2A and Lobatto-3C, because they may achieve higher eﬃciency on
increased accuracy.

126

P. Miehe and A. Sandu
0

10

Radau−2A−TLM
Lobatto−3C−TLM
Rodas−4−TLM
Sdirk−4B−TLM

−2

−4

10

−6

10

−8

Rodas−4−ADJ
Sdirk−4B−ADJ

0

10

−2

Error norm (RMS)

Error norm (RMS)

10

10

−4

10

−6

10

−8

10

10
0

10

1

2

10

10
CPU time

3

10

0

10

1

10
CPU time

2

10

Fig. 2. Comparison of time eﬃciency and accuracy of tangent linear model (left) and
adjoint model (right)

5

Conclusion

State-of-the-art and high-order stiﬀ ODE integrators were added to the library
of the widely-used software environment KPP. The new forward methods can
achieve a high accuracy. The stability matrix of the species can be computed by
using the newly implemented tangent linear model methods as well as adjoint
methods. Researchers will now be enabled to easily include stability considerations into their model.
The KPP-2.2 source code is distributed under the provisions of the GNU
public license [23] and is available on the web [24].

Acknowledgments
This work was supported by the National Science Foundation through the awards
NSF ITR AP&IM 0205198, NSF CAREER ACI0413872, and NSF CCF0515170,
by the National Oceanic and Atmospheric Administration (NOAA) and by the
Texas Environmental Research Consortium (TERC).

References
1. V. Damian, A. Sandu, M. Damian, F. Potra, and G.R. Carmichael: “The Kinetic
PreProcessor KPP – A Software Environment for Solving Chemical Kinetics”,
Computers and Chemical Engineering, Vol. 26, No. 11, p. 1567–1579, 2002.
2. A. Sandu, D. Daescu, and G.R. Carmichael: “Direct and Adjoint Sensitivity Analysis of Chemical Kinetic Systems with KPP: I – Theory and Software Tools”,
Atmospheric Environment, Vol. 37, p. 5083–5096, 2003.
3. D. Daescu, A. Sandu, and G.R. Carmichael: “Direct and Adjoint Sensitivity Analysis of Chemical Kinetic Systems with KPP: II – Validation and Numerical Experiments”, Atmospheric Environment, Vol. 37, p. 5097–5114, 2003.
4. A. Sandu and R. Sander: “KPP – User’s Manual”, http://www.cs.vt.
edu/∼asandu/Software/Kpp.
5. A. Sandu, J.G. Verwer, J.G. Blom, E.J. Spee, G.R. Carmichael, and F.A. Potra:
“ Benchmarking stiﬀ ODE solvers for atmospheric chemistry problems II: Rosenbrock methods”, Atmospheric Environment, 31:3459–3472, 1997.

Forward, Tangent Linear, and Adjoint Runge-Kutta Methods in KPP–2.2

127

6. A. R. Curtis and W. P. Sweetenham: “Facsimile/Chekmat User’s Manual”, Computer Science and Systems Division, Harwell Lab., Oxfordshire, Great Britain,
Aug. 1987
7. R. Djouad and B. Sportisse and N. Audiﬀren: “Reduction of multiphase atmospheric chemistry”, Journal of Atmospheric Chemistry, 46:131-157, 2003.
8. R. von Glasow and R. Sander and A. Bott and P. J. Crutzen: “Modeling halogen
chemistry in the marine boundary layer. 1. Cloud-free MBL”,Journal of Geophysical Research, 107(D), EID:4341, DOI:10.1029/2001JD000942, 2002.
9. R. von Kuhlmann and M. G. Lawrence and P. J. Crutzen and P. J. Rasch:
“A model for studies of tropospheric ozone and nonmethane hydrocarbons:
Model description and ozone results”, Journal of Geophysical Research, 108(D),
DOI:10.1029/2002JD002893, 2003.
10. R. Sander and A. Kerkweg and P. J¨
ockel and J. Lelieveld: “Technical Note: The new
comprehensive atmospheric chemistry module MECCA”, Atmospheric Chemistry
and Physics, 5:445-450, 2005.
11. J. Trentmann and M. O. Andreae and H.-F. Graf: “Chemical processes in
a young biomass-burning plume”, Journal of Geophysical Research, 108(D),
DOI:10.1029/2003JD003732, 2003.
12. Y. Tang and G. R. Carmichael and I. Uno and J.-H. Woo and G. Kurata and B.
Lefer and R. E. Shetter and H. Huang and B. E. Anderson and M. A. Avery and
A. D. Clarke and D. R. Blake: “Impacts of aerosols and clouds on photolysis frequencies and photochemistry during TRACE-P: 2. Three-dimensional study using
a regional chemical transport model”, Journal of Geophysical Research, 108(D),
DOI:10.1029/2002JD003100, 2003.
13. E. Hairer and G. Wanner: “Solving Ordinary Diﬀerential Equations I. Nonstiﬀ
Problems”, Springer Series in Computational Mathematics, 1991.
14. E. Hairer and G. Wanner. Solving Ordinary Diﬀerential Equations II. Stiﬀ and
Diﬀerential-Algebraic Problems. Springer Series in Computational Mathematics,
1996.
15. J.R. Leis and M.A. Kramer: “ODESSA - An Ordinary Diﬀerential Equation Solver
with Explicit Simultaneous Sensitivity Analysis”, ACM Transactions on Mathematical Software, Vol. 14, 1:61, 1986.
16. K. Radhakrishnan and A. Hindmarsh: “Description and use of LSODE, the Livermore solver for diﬀerential equations”, Lawrence Livermore National laboratory
Report UCRL-ID-113855, 1993.
17. P.N. Brown and G.D. Byrne and A.C. Hindmarsh: “VODE: A Variable Step
ODE Solver”, SIAM J. Sci. Stat. Comput., 10:1038–1051, 1989.
18. W.P.L. Carter: “Documentation of the SAPRC-99 Chemical Mechanism for VOC
Reactivity Assessment”, California Air Resources Board Contract, 92–329, 2000.
19. http://pdfcentral.shriver.umbc.edu/AutoChem/
20. http://www.reactiondesign.com/products/open/chemkin.html
21. http://www.llnl.gov/CASC/odepack/
22. http://mcm.leeds.ac.uk/MCM/
23. http://www.gnu.org/copyleft/gpl.html
24. http://www.cs.vt.edu/$\sim$asandu/Software/Kpp
25. http://www.mathworks.com/products/matlab/

