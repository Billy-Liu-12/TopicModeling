A Sharing and Delivery Scheme for Monitoring
TMO-Based Real-Time Systems*
Yoon-Seok Jeong, Tae-Wan Kim**, and Chun-Hyon Chang
Konkuk University,
Seoul 143-701, Korea
{ysjeong, twkim, chchang}@konkuk.ac.kr

Abstract. Devices and systems used in distributed environments, such as on
trains or in power plants, should be able to respond to external changes in realtime. Real-time middleware such as one based on the TMO (Time-Triggered
Message-Triggered Object) model is considered recently as a choice to adapt
real-time properties to distributed systems. TMO middleware guarantees that
systems in distributed environments operate in a reliable manner. This
middleware does not have an adequate monitoring infrastructure or supporting
tools used in distributed environments, however. As such, this paper proposes
TSDS (TMO-based Sharing and Delivery Scheme) as a part of the monitoring
infrastructure. This is configured within the TMO middleware to share and
deliver monitoring data among TMO-based real-time systems. The results of
experiments show that the TSDS instrumentation overhead is less than 1ms.
This means that TSDS has little effect on the operation of the middleware.

1 Introduction
A real-time system aims to ensure a specific service is provided within a given period
of time [1]. The performance of a real-time system depends on how accurately timing
constraints are met through the use of real-time monitoring. Monitoring is essential
for maintaining real-time systems in a stable manner, and many monitoring tools are
being developed to support real-time systems. As well, tools that monitor the TMO
(Time-Triggered Message-Triggered Object)-based real-time systems (hereinafter
referred to as “TMO system”) were developed [2, 8, 9]. However, existing tools that
focus on single system-based monitoring cannot enable the sharing and delivery of
data among systems, which is required to monitor distributed TMO systems. In
addition, all or part of the monitoring function is executed at the application layer,
requiring developer intervention, and eventually causing difficulty in automating
monitoring.
In order to address such problems, this paper presents a TMO-based Sharing and
Delivery Scheme (TSDS), which is a scheme for sharing and delivering monitoring
data among TMO systems. This configures an infrastructure for monitoring within the
*

This research was supported by the MIC (Ministry of Information and Communication),
Korea, under the ITRC (Information Technology Research Center) support program
supervised by the IITA (Institute of Information Technology Assessment).
** Corresponding author.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 280 – 288, 2006.
© Springer-Verlag Berlin Heidelberg 2006

A Sharing and Delivery Scheme for Monitoring TMO-Based Real-Time Systems

281

TMO middleware, an essential part of the TMO system, thereby allowing for the
sharing and delivery of monitoring data.
The paper is structured as follows. Chapter 2 describes the TMO model and the
problems in existing monitoring architectures. Chapter 3 provides a detailed
description of the proposed TSDS. The results of the experiments on the TSDS
instrumentation overhead are shown in Chapter 4. Finally, chapter 5 presents the
direction for future research.

2 Backgrounds
2.1 TMO Model
The proposed scheme in this paper is modeled in such a way as to utilize the proven
functions provided by the TMO model. The TMO structuring scheme was
established in the early 1990’s with a concrete syntactic structure and execution
semantics for economical and reliable design along with an implementation of realtime systems [6, 7]. TMO is a syntactically minor and semantically powerful
extension of the conventional object(s). As depicted in Fig. 1, the basic TMO
structure consists of four parts.

Fig. 1. The Basic Structure of TMO
• Spontaneous Method (SpM): A new type of method. A SpM is triggered when the
real-time clock reaches specific values determined at design time. The SpM has an
AAC (Autonomous Activation Condition), which is a specification of the timewindows for execution of the SpM.
• Service Method (SvM): A conventional service method. A SvM is triggered by service
request messages from clients.
• Object Data Store (ODS): The basic units of storage which can be exclusively
accessed by a certain TMO method at any given time or shared among TMO
methods (SpMs or SvMs).
• Environment Access Capability (EAC): The list of entry points to remote object
methods, logical communication channels, and I/O device interfaces.

282

Y.-S. Jeong, T.-W. Kim, and C.-H. Chang

2.2 Existing Monitoring Architecture
Some studies related to monitoring TMO systems have used architecture at the
application layer to implement monitoring functions as shown in Fig. 1(a) [1, 8, 9]. A
monitoring sensor positioned within a TMO application, an essential part of the
monitor, gathers data on the corresponding object in the TMO application, and keeps
them in a data store. This architecture has no direct effect on the operation of the
middleware because monitoring TMO systems is conducted at the application layer.
The drawback of this architecture is that a developer has to make monitoring elements
such as a data store, sensors and a communication link for the sharing and delivery of
monitoring data.
The other architecture used to implement monitoring functions is depicted in Fig.
2(b) [2]. A dedicated monitoring thread is added in the middleware and called up
according to the middleware scheduling. While this architecture reduces developer
intervention to make a store data and a sensor, the data stored in the data store can be
accessed only by TMO objects in a single TMO system because the data store in this
architecture is dependent on the middleware.

Fig. 2. The Monitoring Architecture by Layer

In summary, the existing architectures for monitoring TMO systems do not have
supported the sharing and delivery of monitoring data in distributed environments.
Given that the TMO middleware supports distributed environments, it is difficult for
both monitoring architectures, which are considering a stand-alone system
environment, to be used for monitoring several TMO systems in distributed
environments. Thus, a structure which supports data sharing and data delivery in
distributed environments should be designed for monitoring TMO systems.

3 TMO-Based Sharing and Delivery Scheme (TSDS)
3.1 Revised TMO Model for Monitoring
The various types of middleware to realize the TMO model have been implemented
in distributed environments [3, 4, 6, 10]. Each middleware has referred to the TMO
model in Fig. 1 as a functional architecture. The TMO model does not include
essential functions in distributed environments such as real-time monitoring,

A Sharing and Delivery Scheme for Monitoring TMO-Based Real-Time Systems

283

dynamic analysis, and fault-tolerance, however. As such, this paper has considered
a monitoring concept from the outset of modeling in order to allow monitoring
functions to be included as an infrastructure within the TMO-based middleware.
Fig. 3 shows the proposed TMO model that supports monitoring functions. Some
elements are added to this model in order for the monitoring concept to be applied
to the TMO model.

Fig. 3. The Structure of the TMO Model that Supports Monitoring Functions
• Monitoring ODS (MODS): Refers to the storage for sharing the results of monitoring
TMO objects. It is the extended type of ODS that is assigned to each TMO object by
a unit of MODS Segment (MODSS).
• Monitoring Dedicated Method (MDM): Refers to the dedicated SpM method for
monitoring that is activated periodically in the same manner as general SpMs and
transfers monitoring data in the data store.
• Monitoring Dedicated Channel (MDC): Refers to the dedicated channel used for the
transfer of monitoring data among TMO systems.
• Control Dedicated Channel (CDC): Refers to the dedicated channel used for receiving
control and feedback data from external systems or applications.

Our focus in this paper is the MODS, MDC, and CDC among abovementioned
elements and the detailed elements in the middleware related to sharing and
delivering the monitoring data. These elements are based on Linux TMO System
(LTMOS) out of various types of the middleware as the basic platform for designing
and implementing the sharing and delivery scheme. For more details of LTMOS, refer
to [4, 10].
3.2 Monitoring Object Data Store (MODS)
The existing ODS was proposed as a storage to share data among TMO objects [6,
7]. On the other hand, the proposed MODS is designed to store monitoring data.

284

Y.-S. Jeong, T.-W. Kim, and C.-H. Chang

Fig. 4 shows the monitoring architecture proposed in this paper. Compared with
ODS, MODS as a data store is positioned between the middleware and the
application layer. This means that all the work related to defining and generating
MODS is managed by the middleware. Thus, developers do not have to do MODS
related work. This is caused by the type of data stored in the data stores. MODS
keeps the formalized data such as execution time while ODS stores the various
types of data that developers need. Therefore, it doesn’t need additional information
from the developers to define MODS.
MODS can support data sharing because it is designed to face the application layer.
MODS is the hybrid of the two data stores used in the legacy monitoring schemes. In
other words, MODS is designed in such a way as to be defined and created by the
middleware, thereby preventing developer intervention and supporting automated
monitoring. The data stored in MODS can be accessed by all the applications because
it is designed to be independent of the middleware. Therefore, MODS is a data store
that can overcome the drawbacks of the existing data stores and is suitable for
distributed real-time monitoring.

Fig. 4. The Revised Monitoring Architecture

3.3 Delivery Structure for Monitoring Data
Existing monitoring tools do not provide a special way to transfer monitoring data
among TMO systems. Given that TMO systems operate in distributed environments,
tools should be able to basically monitor each TMO system and deliver the gathered
data to the server for analysis or other systems. As such, this paper presents a TMObased delivery structure, which is a structure for delivery of monitoring data among
TMO systems.
This structure is designed to have two separate layers that make functions of the
data manipulation and data delivery independent of each other. This functional
independency allows that a function for data manipulation can be used in all the TMO
systems with different communication environments. The layer for data manipulation
contains functions related to gathering, storing, and analyzing monitoring data.
EMCB (Extended Method Control Block) as an internal data store, sensors which

A Sharing and Delivery Scheme for Monitoring TMO-Based Real-Time Systems

285

gather monitoring data, and MODS, which supports data sharing, are monitoring
elements for data manipulation. This paper focuses only on MODS out of these
monitoring elements. The layer for data delivery consists of logical and physical links
that support data delivery among TMO systems. TCP/IP or Serial for physical data
delivery will be selected depending on the implemented communication
environments. Also, a general channel or RMMC (Real-time Multicast Memory
replication Channel) as a logical link, which establishes connection among TMO
systems and manages communication sessions, can be used [5].

Fig. 5. A Delivery Structure for Monitoring Data

In this paper, the MDC and CDC are used as a logical link. The TMO model
basically provides a logical communication link--channel--for connection among
methods. Each channel is assigned a channel number, and data can be transferred via
a channel that is opened with the same number. The MDC and CDC presented in this
paper are designed based on such TMO model channels. Unlike RMMC and a general
channel, the MDC and CDC are generated and managed by the middleware, which
prevents the need for developer intervention for the delivery of monitoring data and
allows automating monitoring.
(a) Monitoring Dedicated Channel (MDC): Refers to the dedicated channel for
delivery of monitoring data. The middleware delivers monitoring data stored in
MODS to other systems through MDC. To prevent collision with common channels,
the MDC uses a specific reserved channel number.
(b) Control Dedicated Channel (CDC): Refers to the feedback channel that is
designed to receive control and feedback information from external systems. Like
MDC, it uses a specific reserved channel number.

4 Experiments
4.1 Purpose and Method
For the purpose of our experiment, the legacy middleware (hereinafter referred to as
“Pure Middleware”) and the middleware in which TSDS is applied (hereinafter
referred to as “Monitoring Middleware”) are experimented with under the same

286

Y.-S. Jeong, T.-W. Kim, and C.-H. Chang

condition. Basically, the Monitoring Middleware is configured to share monitoring
data with the other system in a periodic manner. Then, actual activation intervals were
measured for OMMT (Outgoing Message Management Thread) and IMMT
(Incoming Message Management Thread) which are middleware threads related to the
sharing and delivery of monitoring data and should be activated at every 10ms. By
conducting a comprehensive comparison between these intervals by the thread, the
magnitude of loads generated by monitoring using TSDS was identified.
4.2 Experimental Results
Figs. 6(a) and 6(b) show the activation intervals of the IMMT thread in the Pure
Middleware and Monitoring Middleware. As illustrated in the two figures, activation
intervals increase on a regular basis. This is because the amount of time needed to
occupy the IMMT thread to process data input by channels has increased. For IMMT
thread, the activation interval increases every 1000ms. This corresponds to the
interval at which the TMO method used in this experiment transfers data. Fig. 6(b)
shows the interval at which the IMMT thread is activated in the Monitoring
Middleware. The activation interval pattern is similar to that seen in the Pure
Middleware. With the exception of the initial phase where monitoring functions are
set, the activation interval varies at μs levels. In short, TSDS has little effect on
IMMT thread, which operates within the millisecond time frame.

(a) Pure Middleware

(b) Monitoring Middleware

Fig. 6. A Comparison of Activation Intervals of IMMT

Figs. 7(a) and 7(b) show the interval at which the OMMT thread is activated in the
Pure Middleware and Monitoring Middleware. As in IMMT, the amount of time
needed to occupy the OMMT thread to process data has increases. In the case of the
Monitoring Middleware, as shown in Fig. 7(b), the activation interval pattern is
similar to that seen in the Pure Middleware. The OMMT thread in the Monitoring
Middleware varies at μs levels within 1ms. In short, TSDS has little effect on OMMT
which operates within the millisecond time frame.

A Sharing and Delivery Scheme for Monitoring TMO-Based Real-Time Systems

(a) Pure Middleware

287

(b) Monitoring Middleware

Fig. 7. A Comparison of Activation Intervals of OMMT
Table 1. Results of t-test by Thread

Thread

t

significance
probability (
Both)

t-test
An average confidence interval of 9
9%
Lower Limits
Upper Limits

IMMT

-.048

.962

-.00006

.00006

OMMT

.048

.962

-.00006

.00006

Finally, under the hypothesis that “the Pure Middleware and Monitoring
Middleware have similarity in activation intervals,” the t-test with the significance
level α=.01 was conducted to identify the statistical similarity in activation interval
among different threads. Table 1 shows the results of analyzing different threads. The
significance probability of the IMMT and OMMT is .962. Since .962 > α=.01,
hypothesis cannot be rejected, as well. This shows that the activation interval of the
IMMT and OMMT threads within the two sets of middleware is statistically identical.
Overall, the proposed TSDS shows little or no effect on the middleware.

5 Conclusions and Future Work
In this paper, TSDS, including both the MODS as a data store for sharing monitoring
data among TMO systems and a delivery structure for monitoring data, was proposed.
TSDS form a monitoring infrastructure within the middleware, supporting the sharing
and delivery of monitoring data for TMO systems. This prevents developer
intervention, allowing for automated monitoring functions. The overhead generated
by TSDS during experiments are less than 1ms, having little or no effect on the
execution of the middleware. In short, TSDS serves as an infrastructure for providing
monitoring functions such as data sharing and data delivery to the middleware,
making it ideally suited for monitoring TMO systems.

288

Y.-S. Jeong, T.-W. Kim, and C.-H. Chang

Research is currently being conducted to mount TSDS to desktops, embedded
systems, and other hardware devices, and is being considered for various system
environments in industrial areas such as shipbuilding and power plants.

References
1. B.A. Schroeder, “On-line Monitoring: A Tutorial,” IEEE Computer, 1995
2. B.J. Min, et al., “Implementation of a Run-time Monitor for TMO Programs on Windows
NT,” IEEE Computer, 2000
3. Hyun-Jun Kim, et al., “TMO-Linux: a Linux-based Real-time Operating System
Supporting Execution of TMOs,” Proceedings of the 15th IEEE International Symposium
on Object-Oriented Real-Time Distributed Computing, 2002
4. J. G Kim, and Cho, S. Y., “LTMOS: An Execution engine for TMO-Based Real-Time
Distributed Objects,” Proceedings of the PDPTA, 2000
5. Kim, K.H., “APIs for Real-Time Distributed Object Programming,” IEEE Computer, 2000
6. Kane Kim, et al., “A Timeliness-Guaranteed Kernel Model: DREAM Kernel and
Implementation Techniques,” RTCSA, 1995
7. K.H. Kim, and Kopetz, H., “A Real-Time Object Model RTO.k and an Experimental
Investigation of Its Potentials,” Proceedings of the 18th IEEE Computer Software &
Applications Conference, 1994
8. Yoon-Seok Jeong, Tae Wan Kim, Chun Hyon Chang, “Design and Implementation of a
Run-time TMO Monitor on LTMOS,” Proceedings of the Embedded Systems and
Applications, 2003
9. Yoon-Seok Jeong, Tae Wan Kim, Chun Hyon Chang, “Design of an Architecture for Runtime Process Monitor,” Proc. of the 19th KIPS Spring Conference, Vol. 10-1, 2003.
10. S.H. Park, “LTMOS(LinuxTMO System)'s Manual,” HUFS, 2000

