A New Smoothing Algorithm for Quadrilateral
and Hexahedral Meshes
Sanjay Kumar Khattri
Department of Mathematics, University of Bergen, Norway
sanjay@mi.uib.no
http://www.mi.uib.no/∼ sanjay

Abstract. Mesh smoothing (or r-reﬁnement) are used in computer aided
design, interpolation, numerical solution of partial diﬀerential equations,
etc. We derive a new smoothing called parallelogram smoothing. The new
smoothing tries to ﬁt a given domain by the parallelograms. We present
several numerical examples and compare our results against the traditional
Laplacian smoothing. Presented numerical work shows that the new approach is superior to the Laplacian smoothing.

1

Introduction

Mesh smoothing such as the Laplacian smoothing [13] and the Winslow smoothing [14] has many applications. For example, computer graphics [7, 8, 9, and
references therein], interpolation [10, and references therein], numerical solution
of partial diﬀerential equations [11, 12, 13, 14, 17, and references therein], Arbitrary Lagrangian Eulerian Methods [1] and mesh generation [3, 4, 5]. It is known
(see [2, 13, 17]) that mesh smoothing improves accuracy of the solution and also
reduces the overall computational eﬀort. Smoothing is eﬀective in improving
distorted and inverted elements in automatically generated meshes [13]. Mesh
smoothing adjusts the positions of the interior vertices in the mesh while preserving its topology [13, 17]. Due to simplicity and computationally eﬃciency, the
Laplace smoothing is the most popular method for improving mesh quality. It
repositions the vertices of the mesh by moving each interior node to the geometric center of its neighbours [13]. However, the Laplacian smoothing can produce
inverted elements (See the Section 2) and such meshes cannot be used in applications. We present a new mesh smoothing algorithm called the parallelogram
smoothing. Numerical work shows that the new smoothing is performing better than the Laplacian smoothing. Parallelogram smoothing tries to ﬁt a given
domain with parallelograms in 2D and parallelopipeds in 3D.
Let us mention advantages of the parallelogram smoothing. The error of the
Streamline Methods on parallelogram and parallelopiped mesh is minimum (see
the Figures 7, 11 and 15 in [15]). Many discretization methods such as the Multi
Point Flux Approximation (MPFA) results in a symmetric discrete system on a
parallelogram or parallelopiped mesh [16]. So, eﬃcient solvers such as the Conjugate Gradient can be used. Quadrilateral and hexahedral elements are expressed
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 239–246, 2006.
c Springer-Verlag Berlin Heidelberg 2006

240

S.K. Khattri

by bi-linear and tri-linear mappings from a reference square and cube respectively. These mappings are widely used with discretization techniques such as
Finite Element Methods, Finite Volume Methods [16] and Streamline Methods
[15]. One of the major problem in numerical computations is ensuring the invertibility of the bi-linear and tri-linear mappings. Since these mappings are not
linear, the positivity of the Jacobian at the vertices does not ensure the global
invertibility of the mappings (or ensuring the invertibility of the mapping is
computationally intensive). One encouraging fact is that for parallelograms and
parallelepipeds elements these mappings become linear.
An outline of the article is as follows. In the Section 2, a measure of parallelogram property of quadrilateral and hexahedral elements, and a quadratic
parallelogram functional for quadrilateral and hexahedral meshes are presented.
Optimization of the functional leads to a new smoothing algorithm. Section 2
presents numerical work and comparison with the Laplacian smoothing. Finally
Section 2 concludes the article.

2

Measure of Parallelogramness and Parallelogram
Functional

Figure 1(a) shows a quadrilateral element with vertices v1 , v2 , v3 and v4 . The
midpoints of the diagonals v1 v3 and v2 v4 are d1 and d2 respectively. Lets call
this quadrilateral element k. Euclidean distance between the midpoints d1 and
d2 is
v1 + v3
v2 + v4
−
.
(1)
Q(k) =
2
2
L2
Here k means that we are referring to the quadrilateral element named k. Since
the mid points of two diagonals of a parallelogram co-incide; i.e., v1 + v3 = v2
+ v4 . If Q(k) approaches zero than the element k approaches a parallelogram

V3

v8
v4

v7
v3

V4

d1

v5

d2
V1

v6

v1
v2

V2

(a) Quadrilateral element. Here d1 and d2 are
the midpoints of the diagonals.

(b) Hexahedral element with six
quadrilateral faces

Fig. 1. Quadrilateral and Hexahedral Elements

A New Smoothing Algorithm for Quadrilateral and Hexahedral Meshes

241

and for Q(k) equal to zero the element k will be a parallelogram. Q(k) will be
called a measure of the parallelogramness of the quadrilateral element k.
Figure 1(b) shows a planar hexahedral element (a hexahedra with planar
surfaces) with vertices v1 , v2 , v3 , v4 , v5 , v6 , v7 and v8 . Lets call this hexahedra k. Let us further denote quadrilateral surfaces of the hexahedra k by si
where i = 1 . . . 6. The surface si will be a parallelogram if Q(si ) is equal to zero.
Parallelogramness of the hexahedral element k can be expressed as a sum of
parallelogramness of the six quadrilateral faces
6

Q(si )

Q(k) =

L2

.

(2)

i=1

A hexahedral element is a parallelogram if the six surfaces are parallelograms.
Thus the hexahedral element k will be a parallelogram if Q(k) is equal to zero.
Figure 2 shows a structured 2 × 2 quadrilateral mesh. The mesh shown in the
Figure 2 consists of four quadrilateral elements lets call them ki , i = 1 . . . 4.
For the 2 × 2 mesh shown in the Figure, 2 r14 , r1 , r12 , r2 , r23 , r3 , r34 , r4 are
the boundary nodes and these nodes are ﬁxed during smoothing process. Let the
coordinates of the node ri be (xi ,yi ). The Laplacian smoothing moves grid points
to the geometric center of incident vertices. The Laplacian smoothed position of
the node r0 = (x0 , y0 ) is
r0 =

r1 + r2 + r3 + r4
.
4.0

(3)

For deriving an alternative smoothing, let us ﬁrst deﬁne a functional f for a
mesh shown in the Figure 2 as
4

Q(ki )2 .

f (x0 , y0 ) =

(4)

i=1

Here, index i is for the four surrounding quadrilaterals around the node 0 and
Q(ki ) is the measurement of the parallelogramness of the quadrilateral element
named ki in the mesh. Similar functional can also be deﬁned for unstructured
quadrilateral meshes. It should be noted that f(x0 , y0 ) will be zero if (x0 , y0 )
r23
r3
r34

K3

K4
r4

K1
r14

r2

r0
K2
r1

r12

Fig. 2. A 2 × 2 structured quadrilateral mesh

242

S.K. Khattri
3

2

1

10

y
8
0
0

0.5

1

1.5

2

2.5

3
6

x
-1

3
2.5
2
1.5 x

4

3

-2

2

1
0.5
1
y

(a) Contours of the functional f

0

-1

0
-2

(b) Surface plot the functional f

Fig. 3. Convex nature of the functional f

is situated such that the four surrounding quadrilaterals are parallelograms.
Functional f is quadratic in nature and it can be easily shown that it is convex;
i.e., the Hessian of the functional f is positive deﬁnite. Figure 3(a) shows the
elliptic contours of this functional for a quadrilateral mesh and Figure 3(b) shows
the surface plot of the functional f. Since functional f is convex so it has a unique
minimum. The minimization of this functional f will provide the proper nodal
position for the node r0 and the newly formed surrounding cells around this
node will be the best parallelogram ﬁt (if squares or rectangles can be ﬁt, the
minimization will provide the nodal position for squares or rectangles ﬁt since
square and rectangle are a special kind of parallelograms). It can be shown that
the independent variables x0 and y0 (r0 ) that minimizes the functional f given
by the equation (4) are
r0 =

r1 + r2 + r3 + r4
r14 + r12 + r23 + r34
−
.
4.0
2.0

(5)

Our new smoothing approach for a structured quadrilateral mesh is given by
the equation (5). Thus, our new approach will move internal nodes according to
the equation (5). In the next Section several interesting numerical examples are
explored for verifying the robustness of the new smoothing given by equation (5)
compared to the Laplacian smoothing given by equations (3). Similar smoothing
can be derived for structured or unstructured hexahedral meshes.
Figure 4 shows a structured 2 × 2 × 2 hexahedral mesh. The mesh 4 consists
of eight hexahedral elements lets call them ki with i = 1, . . . , 8. For the mesh 4,
14 is the internal node while 1, . . . , 13 and 15, . . . , 27 are the boundary nodes.
Boundary nodes are kept ﬁxed during smoothing process. Let the coordinate of
a node i is given as ri = (xi , yi ). The Laplacian smoothing moves grid points to
the geometric center of the incident vertices. The Laplacian smoothed position
of the node 14 is given as
r14 =

r11 + r15 + r17 + r13 + r5 + r23
,
6.0

(6)

A New Smoothing Algorithm for Quadrilateral and Hexahedral Meshes

4

7
5

1

1

3
5

9

6
3

7
16

17
15

11

12

8
25

6

26

22
19

(a) Central node is surrounded by 8
hexahedrals

18

14

10

2

8

2

13

4

243

27

23
20

24
21

(b) Mesh consists of eight hexahedrals

Fig. 4. A 2 × 2 × 2 structured hexahedral mesh

(a) Folded Mesh by the Laplacian
Smoothing

(b) Unfolded Mesh by the New
Method

Fig. 5. Comparison of Laplacian and New Method

For deriving an alternative smoothed position for the node 14 shown in Figure 4,
we deﬁne a functional f as follows
8

f (x14 , y14 , z14 ) =

Q(ki ) .

(7)

i=1

Here index i runs over eight surrounding hexahedral elements around the node 14
and Q(ki ) is measurement of the parallelogramness of the ith hexahedra deﬁned
by equation (2). Similar functional can also be deﬁned for unstructured hexahedral meshes. It can be seen that f(x14 ,y14 ,z14 ) will be zero if the coordinates
(x14 ,y14 ,z14 ) of the node 14 are situated such that the surrounding hexahedrals
are parallelepiped. Again the functional f is quadratic and convex with a positive
deﬁnite Hessian. It can be shown that independent variables (x14 ,y14 ,z14 ) that
minimizes (7) are given as (solution of the equations ∂f /∂x14 = 0, ∂f /∂y14 = 0
and ∂f /∂z14 = 0).

244

S.K. Khattri

(a) Folded Mesh by the Laplacian
Smoothing

(b) Unfolded Mesh by the New
Method

(c) Folded Mesh by the Laplacian
Smoothing

(d) Unfolded Mesh by the New
Method

(e) Folded Mesh by the Laplacian
Smoothing

(f) Unfolded Mesh by the New
Method

Fig. 6. Comparison of Laplacian and New Method

r14 =

r11 + r15 + r17 + r13 + r5 + r23
−
3.0
r10 + r12 + r18 + r16
−
24.0
r24 + r26 + r2 + r6 + r8 + r4
. (8)
48.0

Equation (8) forms a new smoothing algorithm for structured hexahedral mesh.
Similar formulas can be derived for unstructured hexahedral meshes.

A New Smoothing Algorithm for Quadrilateral and Hexahedral Meshes

3

245

Numerical Experiments

We are using both the new approach and the Laplacian method for quadrilateral
mesh smoothing. Figures 6 and 5 report outcome of our numerical experiments.
Initial grids are generated by Transﬁnite Interpolation. It is clear from the Figures that for 2-D geometries the Laplacian smoothing can generate folded grids
and the resulting mesh can not be used in numerical simulations. It can be seen
in the Figures 6 and 5 that the Laplacian smoothing move nodes outside the
boundary and it results in inverted elements. Numerical experiments demonstrate robust nature of the new approach.

4

Conclusions

A simple alternative to the traditional Laplacian smoothing is presented. Reported numerical work shows that the new approach is superior to the Laplacian smoothing. This method is simple to understand and can be implemented
in an existing mesh generation package. Smoothing is derived for the structured
quadrilaterals and hexahedral meshes. The real use of this approach can be in
the area of hexahedral mesh generation where many meshing algorithms are
capable of generating inverted elements.

References
1. Hermansson, J. and Hansbo, P. : A variable diﬀusion method for mesh smoothing,
Comm. Numer. Methods Engrg., 19, (2003), 897-908.
2. Daniel, W. and Garry, R. : Improved vector FEM solutions of Maxwell’s equations
using grid pre-conditioning, Internat. J. Numer. Methods Engrg., 40, (1997), 3815–
3837.
3. Ding, Y., Xia, J., Wang, Y. and Xiao, J. : Fully automatic generation of ﬁnite
element mesh, Progr. Natur. Sci. (English Ed.), 5, (1995), 93–98.
4. O’Sullivan, F. : Discretized Laplacian smoothing by Fourier methods, J. Amer.
Statist. Assoc., 86, (1991), 634–642.
5. Hansbo, P. : Generalized Laplacian smoothing of unstructured grids. Communications in Numerical Methods in Engineering, 11, (1995), 455-464.
6. Field, D.A. : Laplacian smoothing and Delaunay triangulations. Communications
in Applied Numerical Methods. 4, (1998), 709–712.
7. Floater, M.S. : Mean value coordinates. Computer Aided Geometric Design. 20,
(2003), 19–27.
8. Khodakovsky, A., Litke, N., and Schr¨
oder, P. : Globally smooth parameterizations
with low distortion. ACM Transactions on Graphics (TOG). 22, (2003).
9. Sheﬀer, A. and Sturler, E.D. : Smoothing an overlay grid to minimize linear distortion in texture mapping. ACM Transactions on Graphics (TOG). 21, (2002),
874–890.
10. Mallet, J.L. : Discrete smooth interpolation. ACM Transactions on Graphics
(TOG). 8, (1998), 121–144.
11. Bank, R.E. and Smith, R.K. : Mesh smoothing using a posteriori error estimates.
SIAM J. Numer. Anal. 34, (1997), 979–997.

246

S.K. Khattri

12. Frey, W.H. and Field, D.A. : Mesh relaxation: a new technique for improving
triangulations. Internat. J. Numer. Methods Engrg. 31, (1991), 1121–1133.
13. Shontz, S.M. and Vavasis, S.A. : A linear weighted laplacian smoothing framework for warping tetrahedral meshes. Submitted to SIAM Journal on Scientiﬁc Computing on July 17, 2004 for publication. Available on line at http://
arxiv.org/abs/cs.NA/0410045.
14. Knupp, P.M. : Winslow smoothing on two-dimensional unstructured meshes. Proceedings, 7th International Meshing Roundtable, Sandia National Lab. (1998),
449-457.
15. Hægland, H., Dahle, H.K., Eigestad, G.T., Lie, K.A. and Aavatsmark, I. : Improved Streamlines and Time of Flight for Streamline Simulation on Irregular
Grids. Submitted in Journal. Available on line at http://heim.iﬁ.uio.no/˜kalie/
papers/cvi-sl.pdf. October (2005).
16. Khattri, S.K. : Analyzing Finite Volume for Single Phase Flow in Porous Media.
Journal of Porous Media. Accepted for Publication, (2006).
17. Persson, P.-O. and Strang, G. : A Simple Mesh Generator in MATLAB. SIAM
Review, 46 (2), (2004), 329-345.

