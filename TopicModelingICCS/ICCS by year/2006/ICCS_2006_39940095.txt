Secure OWL Query∗
Baowen Xu1,2, Yanhui Li1,2, Jianjiang Lu1,2,3, and Dazhou Kang1,2
1

Department of Computer Science and Engineering,
Southeast University, Nanjing 210096, P.R. China
2
Jiangsu Institute of Software Quality, Nanjing 210096, P.R. China
3
Institute of Command Automation,
PLA University of Science and Technology, Nanjing 210007, P.R. China
bwxu@seu.edu.cn

Abstract. With the development of the Semantic Web, the issue on Semantic
Web security has received a considerable attention. OWL security is a burgeoning and challengeable sub-area of Semantic Web security. We propose a novel
approach about OWL security, especially about inference control in OWL retrieval. We define OWL inference control rules (ICRs) to present the aim of inference control. To achieve ICRs, our approach introduces a novel concept
“semantic related view” (SRView) w.r.t an OWL knowledge base, which describes semantic relations in it. We present a construction process of SRViews
from OWL knowledge bases and define pruning operations to rewrite them.
Based on pruned SRViews, a query framework to achieve inference control is
proposed, followed by analysis of correctness and complexity.

1 Introduction
The Semantic Web is an extension of the current Web, which supports machineunderstandable semantics to enable intelligent information management. With the
increasing efficiency of utilizing data in the Semantic Web, there is a considerable
attention for security issues. Thuraisingham pointed out security standards for the
Semantic Web, in which security of the whole Semantic Web was divided into security of its components: XML, RDF and OWL security etc. [1].
Various research efforts have been done on XML security, especially about access
control in the context of XML. Fan et al. introduced a novel approach that the security
restrictions were annotated on the schema structure (DTDs) and queries were corresponding rewritten and optimized [2]. Compared with XML security, RDF security
just begins. Reddivari et al. proposed a simple RDF access policy framework (RAP),
which contained a policy based access control model to achieve control over various
actions possible on an RDF store [3]. Largely dissimilar to XML and RDF cases,
OWL security contains a great part of inference control that prevents users from infer∗

This work was supported in part by the NSFC (60373066, 60425206 and 90412003), National
Grand Fundamental Research 973 Program of China (2002CB312000), National Research
Foundation for the Doctoral Program of Higher Education of China (20020286004), Excellent Ph.D. Thesis Fund of Southeast University, Advanced Armament Research Project
(51406020105JB8103) and Advanced Research Fund of Southeast University (XJ0609233).

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 95 – 103, 2006.
© Springer-Verlag Berlin Heidelberg 2006

96

B. Xu et al.

ring blocked or unallowable information. How to present inference control restrictions
and achieve them is still an open problem, and to the best of our knowledge, no published paper is known for it.
In this paper, we will give a novel approach about OWL inference control. Firstly
we give a brief introduction to OWL knowledge base (KB) in section 2. Then we
define OWL inference control rules (ICRs) to formally present OWL inference control restrictions in section 3. In section 4, a new term “semantic related view”
(SRView) is introduced to describe whole semantic relation in an OWL KB. We also
give a construction process and pruning operations of SRViews. With pruned
SRViews, a query framework to achieve inference control is proposed in section 5,
followed by conclusion and future work in section 6.

2 A Brief Introduction to OWL Knowledge Base
The proposed OWL recommendation consists of three languages with increasing
expressive power: OWL Lite, OWL DL and OWL Full. For inference in OWL Full is
undecidable [4], we focus on inference control in OWL DL. In the following, we use
“OWL” instead of “OWL DL”. We adopt description logic form to compactly express
OWL KB, for OWL DL is description logic SHOIN(D) with RDF syntax.
Definition 1. Let RA, RD, CA, CD, IA and ID be pairwise disjoint sets of atomic abstract
roles, atomic concrete roles, atomic concepts, data types, individuals and data values.
Let R ∈ RA, a SHOIN(D) abstract role is either an atomic abstract role R or its inverse
role R − . The set of SHOIN(D) role is defined as { R − | R ∈ RA} U RA U RD. And
SHOIN(D) concept constructors are given in Table 1.
Table 1. Syntax and semantics of concept constructors in SHOIN(D)
Syntax

Semantics

Syntax

Semantics

A ∈ CA
D ∈ CD

AI ⊆ Δ I
D I = DD ⊆ ΔD

C1
C1

(C1
(C1

C2
C2

R ∈ RA

RI ⊆ ΔI × ΔI

¬C

U ∈ RD
i ∈ IA

U I ⊆ ΔI × ΔD
iI ∈ ΔI

{w1 ,L , wn }

v ∈ ID

v = v ∈Δ

−

R
F
⊥

I

D

− I

∀P.E

D

( R ) = {( d , d ') | ( d ', d ) ∈ R }
I

F =Δ
⊥I = ∅
I

I

∃P.E
≥nP
≤nP

C2 ) I = C1I I C2 I
C2 ) I = C1I U C2 I

(¬C ) I = Δ I \ C I

{w1 ,L , wn }I = {w1I , L , wn I }

(∀P.E ) I = {d | ∀d ', (d , d ') ∈ P I → y ∈ E I }
(∃P.E ) I = {d | ∃d ', ( d , d ') ∈ P I ∧ y ∈ E I }
(≥ n P) I = {d | #({d ' | ( d , d ') ∈ P I }) ≥ n}
(≤ n P) I = {d | #({d ' | ( d , d ') ∈ P I }) ≤ n}

In table 1, Δ I and Δ D are two nonempty sets standing for abstract and concrete domains. F and ⊥ are considered as the top and bottom concepts. { w1 ,L, wn } is a sub
set of IA or ID; C1 and C2 are abstract concepts; P is a SHOIN(D) role; the expressions
∀P.E and ∃P.E satisfy that if P ∈ RD, E ∈ CD; if P ∈ { R − | R ∈ RA} U RA, E is an
abstract concept.

Secure OWL Query

97

Definition 2. A SHOIN(D) KB ∑ ( TΣ , RΣ , AΣ ) consists of three finite axiom boxes:
TBox TΣ , RBox RΣ and ABox AΣ , whose axioms’ syntax and semantics are given in
table 2.
Table 2. Axioms in a SHOIN(D) KB

TBox axiom

RBox axiom

ABox axiom

Syntax

Semantics

C1

C2

C1I ⊆ C2 I

R1

R2

R1I ⊆ R2 I

Trans( R1 )

R1I = ( R1I ) +

U1

U1 I ⊆ U 2 I

U2

i: C

iI ∈ C I

i1 = i2

i1I = i2 I

i1 ≠ i2

i1I ≠ i2 I

An interpretation I (Δ I , ⋅I ) satisfies an axiom if it satisfies corresponding semantics
restriction given in table 2. I satisfies a TBox (RBox and ABox respectively), if I
satisfies any axiom in it. I satisfies a SHOIN(D) KB ∑ , if I satisfies its TBox, ABox
and RBox. Such interpretation I is called a model of KB ∑ .

3 OWL Inference Control Rule
Before discussing OWL ICR, we will give a short introduction of OWL query mechanism. Answers of OWL queries are a collection of logical entailed axioms of the
OWL KB. Using semantics discussed in section 2, we define “logical entail”: for any
axiom α , a KB ∑ logical entails α , denoted as ∑ |= α , if for any model I (Δ I , ⋅I )
of ∑ , I satisfies α . With “rolling-up” technique [5], OWL query problems can be
simplified to be instance retrievals Retrieval(C) of singleton concepts C:

Retrieval(C)= {i | Σ |= i : C }
Now we give the definition of OWL ICR.
Definition 3. An OWL ICR is a triple (subject, axioms set, sign), where subject is an
identification of user, axioms set is a given set of logical entailed ABox axioms of the
OWL KB ∑ , and sign ∈ {+(positive), -(negative), ?(unknown)}.
For a positive OWL ICR (s, { α1 ,...,α n }, +), it means when the query presenter s
give a query: Retrieval(C), if α i = i : C and i∈ Retrieval(C), i must be returned to s.
Negative or unknown ICRs have similar meanings with replacing “must” with “must
not” or “maybe”. For the set of logical entailed axioms of ∑ may be infinite, it is
impossible to sign all axioms with +, - or ?. Therefore we set ? as the default value.
Definition 4. For a given OWL ICR set SR, let S(s,+)= U Sa for any (s, Sa, +) ∈ SR and
S(s,-)= U Sa for any (s, Sa, -) ∈ SR. SR is consistent w.r.t an OWL KB ∑ , if for any
subject s, there is a OWL KB ∑ * , where ∑ |= ∑ * and ∑ * |=Sa(s,+) and for any
axioms α in Sa(s,-), ∑ * |≠ α . We call such KB ∑ * as a suitable sub-KB of ∑ .

98

B. Xu et al.

For any consistent OWL ICR set SR w.r.t ∑ , perfect inference control aims to find
the most general suitable sub-KB ∑ * of ∑ for a given subject s, where no other
suitable sub-KB ∑ ' satisfying ∑ ' |= ∑ * . In OWL retrieval, ∑ * will replace ∑ as a
special view for the subject s. However, this problem is as hard as finding most general consistent sub-ontology in an inconsistent big ontology [6], and there is no efficient method to deal with such problem. In this paper, we give a primitive approach to
find a biggish suitable sub-KB. The creation of the biggish suitable sub-KB is considered as pruning KB ∑ . We use SRView as an abstraction of ∑ and define pruning
operations for SRView. A pruned SRView will play a role as a suitable sub-KB in
OWL query.

4 Semantic Related View of OWL Knowledge Base
Before turning our attention towards SRView, we introduce some common notions.
We define the set sub(C) of sub-concepts of a SHOIN(D) concept C:
⎧
⎪
⎪
sub(C ) = {C} U ⎨
⎪
⎪⎩

∅
sub(C1 )
sub(C1 ) U sub(C2 )
sub( E )

if C = A | ≥ n P | ≤ n P | {w1 ,L , wn }

if C = ¬C1
if C = C1

C2 | C1

C2

if C = ∃P.E | ∀P.E

Let S Σ be the set of concepts appearing in an OWL KB ∑ , and sub(S Σ )= U sub(C )
for any C in S Σ . After talking about these notions, we present a formal structure of a
SRView.
Definition 5. A SRView is a graph G(V, E), where V is a set of labels and E is a set of
edges with connectives. Every edge can be denoted as a triple (l, coni , l1), where l,
l1 ∈ V, coni ∈ { ∃P , ∀P , ¬ , , , ≥ n P , ≤ n P , }. For any label l in V, let
Eout(l)={(l, coni, l1)| (l, coni, l1) ∈ E }, Ein(l)={(l1, coni, l)| (l1, coni, l) ∈ E }.
Additionally, we define a label function L: sub(S Σ ) → V and it satisfies that for any
two concepts (or data types) C1 and C2 in sub(S Σ ), L(C1) ≠ L(C2).
Now we will give the detailed creation of a SRView from an OWL KB ∑ . At the
beginning, we initialize V={L( F ), L( ⊥ )}, E= ∅ , and following creation consists of
three ordinal steps:

Developing step: for any concept C in S Σ , we add a concept tree Tree(C) in G. The
addition process AddTree(C) is described in Figure 1. Obviously, Tree(C) is a syntax
tree to denote the structure of concept C.
Connection step: for any axiom C1 C2 in the TBox of ∑ , we connect Tree(C1)
and Tree(C2) by adding (L(C1), , L(C2)) in E.
Merging step: if two trees have the same structure, we will merge the two trees
into one. For any label l in V, let Cout(l)={(coni, l1)| (l, coni, l1) ∈ Eout(l) and
coni ≠ } An merging rule is presented as follows: for any two labels l and l*, if
Cout(l)=Cout(l*), then merge two labels into one label l and add a set of new edges

Secure OWL Query

99

{(l, coni, l1)|(l*, coni, l1) ∈ Eout(l*)} U {(l1, coni, l)| (l1 coni, l*) ∈ Ein(l*)} in E. When no
merging rule can be applied to G, we call G is a SRView of KB ∑ and denote it as
G=SRV( ∑ ).
Obviously, a SRView G(V, E) expresses syntax structures of concepts by concept tree
and “subsumption” relationships by “ ” edge. For any edge in E can be seen as a
production rule, a SRView explicitly creates a production system to explain complex
concepts by containing all restrictions on these concepts.
Procedure AddTree(C) begin
If L(C) is not defined
{add a new label l in V and let L(C)=l;
Switch (C) {
Case ¬C1 : AddTree (C1); add a new edge (L(C), ¬ ,L(C1)) in E;
Case C1 C2 : AddTree(C1); AddTree(C2); add (L(C), ,L(C1)) and (L(C),
Case C1 C2 : AddTree(C1); AddTree(C2); add (L(C), ,L(C1)) and (L(C),
Case ∃P.E : AddTree(E); add (L(C), ∃P , L(E)) in E;
Case ∀P.E : AddTree(E); add (L(C), ∀P , L(E)) in E;
Case ≥ n P : add (L(C), ≥ n P , L( F )) in E;
Case ≤ n P : add (L(C), ≤ n P , L( F )) in E; }
}
end

,L(C2)) in E;
,L(C2)) in E;

Fig. 1. AddTree( ) procedure

After talking about creating SRView, we will go into pruning it. The eight pruning
operations are defined as triples (operation, old edge, substituted edge) in table 3.
Table 3. Pruning operations
Operation

Old Edge

Del

(l, coni, l1)

¬

(l, ¬ , l1)

Substituted Edge

(l,

, l1),(l,

, l2)

(L( ⊥ ), , l), (L( ⊥ ),
(l, , l1), (l, , l2)

(l,

, l1),(l,

, l2)

(l1,

, l),(l2,

, l1)

, l)

∃P
∀P

(l, ∃P , l1)

(l*, ∃P * , l1), (l*,

,l), where P*

P

(l, ∀P , l1)

(l*, ∀P * , l1), (l*,

,l), where P

P*

≥nP

(l, ≥ n P , l1)

(l*, ≥ m P , l1), (l*,

, l), where m>n

≤nP

(l, ≤ n P , l1)

(l*, ≤ m P , l1),(l*,

, l), where n>m

In table 1, l* is a new label added by pruning operations and “P* P” means P* is a
sub-role of P. A pruning operation will replace old edges with substituted ones in E.
Pruning operations rewrite SRView to release some restrictions and such rewriting
will affect reasoning so that some blocked axioms will not be inferred by the pruned
SRView.

100

B. Xu et al.

Definition 6. An SRView G*(V*, E*) is a pruned view of G(V, E) w.r.t a operation
set SO={O1, …, On}, if G*(V*, E*) is the new graph after applying all operations to G.

5 Inference Control with Pruned SRView
Now we give an overview of our query framework (figure 2), which describes data
exchange between subject and knowledge base system. The knowledge base system
consists of four processors (rectangles) and two stores (rounded rectangles). We will
detailedly discuss how knowledge base system deals with a query.
1) When the knowledge base system receives a query Q=Retrieval(C) from subject
s, Parser parses C into its concept tree Tree(C) and labels C as L(C).
2) Connector connect Tree(C)=GC(VC, EC) and SRV( Σ )=GKB(VKB, EKB) into a
mixed SRView G, where V=VC U VKB and E=EC U EKB. After exhaustively applying
merging rules to G, Connector sends G as the final result.
3) Pruner gets G from Connector, and a pruning operation set So(s) from Pruner
store. Pruner applies So(s) to prune G and return a pruned SRView G* w.r.t So(s).
4) Reasoner provides three sub-processors: SRView interpreter, ABox rewriter and
RBox preprocessor (Figure 3). SRView interpreter sends an direct production
DP(Cout(l)) and sup-label set Lsup(l) of any label l to Tableau Reasoner.

⎧
⎪
⎪
DP(Cout(l))= ⎨
⎪
⎪⎩
Lsup(l)=

¬ l*

if #Cout(l)=1 and ( ¬ , l*) ∈ Cout(l)

coni.l*

if #Cout(l)=1, (coni, l*) ∈ Cout(l) and coni ≠ ¬

l1 l2

if #Cout(l)=2 and ( , l1), ( , l2) ∈ Cout(l)

l1 l2
{l*|( l,

if #Cout(l)=2 and ( , l1), ( , l2) ∈ Cout(l)
, l*) ∈ E}

ABox rewriter replaces any concept C with its label L(C) in ABox A Σ and new ABox
is denoted as L(A Σ ). For a RBox R Σ , we introduce R as the transitive-reflexive
closure of on RΣ U {S − R − | S R ∈ RΣ } . RBox preprocessor computes “ R” relations that are repeatedly used in reasoning process. Finally Tableau Reasoner will
return Retrieval(L(C)) as an answer set of the query to subject s.
Now we will prove that any answer in Retrieval(L(C)) is a validate answer to
Q=Retrieval(C), that means Retrieval(L(C)) ⊆ Retrieval(C).
Definition 7. For a SRView G=(V, E) and any l in V, let TBox(l)={DP(Cout(l))
DP(Cout(l))} U {l l*| l* ∈ Lsup(l)}, TBox(G)= U l∈V (TBox (l )) .

l, l

Lemma 1. For a query Retrieval(C), a KB Σ (T, R, A) and its SRView GKB, let
G=Merge(GKB, Tree(C)), we can get that Σ (T, R, A)|=i: C ⇔ Σ * (TBox(G), R, L(A)
|=i: L(C).

Secure OWL Query

101

Suject s
surpport a query Q=Retrieval(C)

Parser
Parse C into Tree(C) and
label C as L(C)

Knowledge Base System

Connector
connect Tree(C) and
SRV( ) into G

Knowledge Base Store
Knowledge Base and
its SRView SRV( )

Pruner
Creat A Pruned SRView
G* w.r.t So(s)

Pruner Store
A pruning operation set
So(s) w.r.t suject s

Reasoner
Returen Retrieval(L(C))
w.r.t G*

Fig. 2. A query framework with pruned SRViews
Knowledge base
Store

Pruner
Pruned
SRView

Preprocess
Level

Reasoning
Level

SRView Interpreter

ABox

ABox Rewriter

RBox

RBox Preprocessor

Tableaxu Reasoner
Retrieval
(L(C))

Subject

Fig. 3. Level structure of Reasoner

Lemma 2. For a subject s and corresponding pruning operation set SO(s) and a
SRView G=(V, E), let G*=(V*, E*) be a pruned SRView of G w.r.t SO(s), we have
TBox(G)|=TBox(G*).
For any pruning operation, it relaxes constraint of complex concepts. The pruned
SRView can be inferred by original SRView. For example, ≥ n P rule adds a new
label l* by replacing n with a larger number m and states l* is subsumed by l, directly
l= ≥ n P . F l*= ≥ m P . F can infer that l* l. Therefore, lemma 2 holds.
Lemma 3. For a query Retrieval(C), a KB Σ (T, R, A), a pruned SRView G*=(V*,
E*) and its label function L(), Retrieval(L(C)) w.r.t G* is the set {i| Σ * (TBox(G*), R,
L(A)|=i: L(C)}.

This Lemma obviously holds, for Tableau Reasoner considers G*, R and L(A) as
TBox, RBox and ABox of new KB respectively. From above three lemmas, we will
have the following theorem.

102

B. Xu et al.

Theorem 1. Let s be a subject, SO(s) a pruning operation set, Retrieval(C) a query,
Σ (T, R, A) a KB and GKB a SRView of Σ . G=Merge(GKB, Tree(C)) and G* is the
pruned SRView of G w.r.t SO(s). We can get that if Σ * (TBox(G*), R, L(A))|=i: L(C),
Σ (T, R, A) |=i: C. That also means Retrieval(L(C)) ⊆ Retrieval(C).
After proving the correctness of our framework, we will go into complexity issue.
Lemma 4. For any Σ (T, R, A), the creation process of its SRView GKB=(VKB, EKB)
can be performed in polynomial time of (|sub(S Σ )|+#T).
In developing step: for any concept C in S Σ , its concept tree Tree(C) can be performed in polynomial of sub(C). In connection step: for the number of edges with
connective “ ” in EKB is the number #T of axioms in T, this step can be performed in
polynomial time of #T. Finally in merging step, merging rule can at most be applied
polynomial times of (|sub(S Σ )|+#T). Lemma 4 also guarantees that GKB can be stored

in polynomial space of (|sub(S Σ )|+#T).
Lemma 5. For a SRView GKB and Tree(C), G=Merge(GKB, Tree(C)), the creation of
G can performed in polynomial time of (|sub(S Σ )|+#T+sub(C)).
Lemma 6. For any SRView G=(V, E) and its pruned SRView G*=(V*, E*) w.r.t
So(s), let |G|=|V|+|E|, |G*| is a linear function of |G|.
Based on the definition of pruning operations, any operation replaces one or two
old edges with at most one new label and two edges. This guarantees that |G*| ≤ 3|G|.
Theorem 2. All procedures to deal with SRView in our framework can be performed
in polynomial time of (|sub(S Σ )|+#T+sub(C)) and all SRViews can be stored in polynomial space of (|sub(S Σ )|+#T+sub(C)).

From Lemma 4-6, theorem 2 holds. For inference problem in SHOIN(D) is
NEXPTIME-complete [4], the additional time and space spent on SRView will not be
a bottleneck of a knowledge base system.

6 Conclusion and Further Work
In this paper, we define OWL ICR to formally present OWL inference control restrictions. To achieve ICRs, a new concept “SRView” is proposed to describe the whole
semantic relation in an OWL KB. We also present a construction process of SRView
and define pruning operations of them. Based on pruned SRView, we construct a
query framework to achieve inference control and prove the correctness and complexity of it. Creating pruning operation sets w.r.t OWL ICRs is still a manual work in our
framework. Future work includes designing some assistant method to semiautomatic
or automatic create them, which will make our framework less manually interfered.

References
[1] Thuraisingham, B.: Security standards for the Semantic Web. Computer Standards & Interfaces, vol. 27 (2005) 257-268
[2] Fan, W., Chan, C., Garofalakis, M.: Secure XML Querying with Security Views. In: Proceedings of SIGMOD 2004, (2004) 587-598

Secure OWL Query

103

[3] Reddivari, P., Finin, T., Joshi, A.: Policy based Access Control for a RDF Store. In: Proceedings of Policy Management for the Web workshop (position paper), 14th Int. World
Wide Web Conf, Chiba, (2005) 78-81
[4] Horrocks, I., Patel-Schneider, P.F.: Reducing OWL entailment to description logic satisfiability. In: Proceedings of the 2003 Description Logic Workshop, (2003) 1-8
[5] Horrocks, I., Tessaris, S.: Querying the Semantic Web: a formal approach. In: Proceedings
of 2002 Semantic Web Conf. (ISWC 2002), (2002) 177-191
[6] Haase, P., van Harmelen F., Huang Z., Stuckenschmidt, H., Sure Y.: A Framework for
Handling Inconsistency in Changing Ontologies. In: Proceedings of the Fourth International Semantic Web Conference (ISWC2005), (2005) 353-367

