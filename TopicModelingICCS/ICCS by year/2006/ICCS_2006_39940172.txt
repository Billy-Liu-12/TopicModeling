A Decision Maker for Transport
Protocol Conﬁguration
Jae-Hyun Hwang, Jin-Hee Choi, and Chuck Yoo
Department of Computer Science and Engineering, Korea University
{jhhwang, jhchoi, hxy}@os.korea.ac.kr

Abstract. This paper proposes an approach, called Protocol Conﬁguration Decision Maker, for TCP to dynamically adapt to a network
environment. The proposed mechanism monitors the network condition
with parameters like loss rate. Then it consults a knowledge database to
see whether a better performance can be achieved and replaces a relevant
TCP module with the one instructed by the database. Through simulation studies, we show that our mechanism helps TCP achieve better
throughput than normal TCP Reno, up to 80∼194%.

1

Introduction

Flexibility and extensibility of network protocol software are getting more important as new networking technologies keep coming up. The conﬁgurable and
extensible network systems have been proposed in TIP, ADAPTIVE, F-CSS
projects[1]. Their goals include: 1) make the extension of new service and protocol easy, and 2) conﬁgure the protocol stack based on the application requirements. That is, when an application requests some QoS(Quality of Service)attributes like performance, reliability, timeliness, security and so forth, the system conﬁgures the protocol stack that consists of ﬁne-grained conﬁgurable modules in order to satisfy such requirements. However, if the system cannot adapt to
dynamically changing environment, the performance degradation would come to
be inevitable even though the application requirements are taken into account.
The problem is that the design of existing network systems has never considered network environments as protocol conﬁguration criteria, up to our knowledge. To address the conﬁguration criteria for network environments, this paper proposes a mechanism called Protocol Conﬁguration Decision Maker that
chooses the adequate functional module based on network environments. The
proposed mechanism classiﬁes the scope of conﬁguration into Slow Start, Congestion Avoidance, Error Recovery like TCP and decides the dominant protocol module aﬀecting the improvement of protocol performance. We evaluate our
mechanism through simulation studies, and show that our mechanism helps TCP
achieve better throughput than normal TCP Reno signiﬁcantly.
This work was supported by grant No.R01-2004-000-10588-0 from the Basic Research
Program of the Korea Science & Engineering Foundation and a Korea University
grant.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 172–175, 2006.
c Springer-Verlag Berlin Heidelberg 2006

A Decision Maker for Transport Protocol Conﬁguration

2

173

Decision Making for Protocol Conﬁguration

The goal of Protocol Conﬁguration Decision Maker is to dynamically adapt TCP
to time-varying networks when the information about network environments is
inferred. For the purpose of inferring the network conditions, we use four network parameters: round-trip delay, asymmetric ratio1 , loss rate and loss pattern.
Because most of the estimation schemes already have been thoroughly evaluated
in the literature, we do not compare or argue the accuracy of them but assume
that the network parameters can be estimated precisely.
Now, we explain the process of making the protocol knowledge database for
each protocol module. First of all, the throughput of all protocols the system has
should be estimated for various network environments. This could be measured
by simulations or with experiments in real Internet. Then, we represent the
estimated throughput to Expected Throughput as follows.
Expected T hroughput(SS i,CA j,ER k) (RD, AR, LR, LP ),
where SS i stands for i-th Slow Start instance, CA j for j-th Congestion Avoidance instance and ER k for k-th Error Recovery instance, and RD, AR, LR,
LP stand for Round-trip Delay, Asymmetric Ratio, Loss Rate, and Loss Pattern
respectively.
Second, we calculate the impact degree of each protocol module on the expected throughput using ANOVA[5]. Let us assume that a system has two different versions of each protocol module. Then we can deﬁne three variables xSS ,
xCA and xER as follows.
xSS =

−1 f or SS 1
, xCA =
1 f or SS 2

−1 f or CA 1
, xER =
1 f or CA 2

−1 f or ER 1
1 f or ER 2

y, expected throughput, is regressed to xSS , xCA and xER . q0 is the mean
performance of y, and qSS is the eﬀect of xSS .
y = q0 + qSS xSS + qCA xCA + qER xER
We obtain the following four combinations of equation using the above model.
thru 1 = q0 − qSS − qCA − qER
thru 2 = q0 + qSS − qCA − qER
thru 3 = q0 − qSS + qCA − qER
thru 4 = q0 − qSS − qCA + qER
By solving the equations, we can get q0 , qSS , qCA and qER . Finally, the impact
rate of each protocol module can be calculated as follows.
1

The asymmetric ratio is deﬁned as a ratio between forward delay and reverse delay
in this paper.

174

J.-H. Hwang, J.-H. Choi, and C. Yoo

xSS s impact =
xCA s impact =
xER s impact =

2
qSS

2
qSS
2
2
+ qCA
+ qER

2
qSS

2
qCA
2
2
+ qCA
+ qER

2
qSS

2
qER
2
2
+ qCA + qER

If the system uses [SS 1, CA 1, ER 1] and each protocol module impacts on the
throughput improvement by 80%, 15% and 5% respectively, it could get better
throughput up to 80% with reconﬁguring SS 1 to SS 2.

3

Simulation Result

In this section, we validate our decision maker using NS-2 simulator version
2.26[6]. Assuming that the network system supports partial reconﬁguration of
Table 1. TCP variants used in simulation
TCP Variant
Reno
Westwood[2]
BI[3]
SACK[4]

Slow Start
Heuristic
BW Estimate
Heuristic
Heuristic

Congestion
Error Recovery
AIMD
Duplicate ACK
AIMD
Duplicate ACK
Binary Search Duplicate ACK
AIMD
Selective ACK

7000

2200
2000

TCP Reno
with decision maker

1800

Average throughput (Kbps)

Average throughput (Kbps)

6000

5000

4000

3000

2000

1600

TCP Reno
with decision maker

1400
1200
1000
800
600
400

1000
200
0
0

50

100

150

200

250

300

350

400

450

0
0.01

500

0.1

Round-trip propagation delay (ms)

1

(a) RD: 20∼500(ms)

100

(b) AR: 0.01∼100
10000

10000

TCP Reno
with decision maker

Average throughput (Kbps)

TCP Reno
with decision maker

Average throughput (Kbps)

10

Delay asymmetric ratio

1000

1000

100
100
0.00

0.02

0.04

0.06

0.08

Loss rate (uniform error model)

(c) LR: 0.001∼0.1

0.10

0.00

0.02

0.04

0.06

0.08

0.10

Loss rate (2-state Markov error model)

(d) LP: 2 state Markov

Fig. 1. Average throughput graphs: TCP Reno vs TCP with our decision maker

A Decision Maker for Transport Protocol Conﬁguration

175

the transport protocols, we performed the experiment using TCP variants simply
to get same results instead of implementing such system. Table 1 shows TCP
variants used in our simulation. According to Table 1, we could emulate the
partial reconﬁguration of protocol modules in the network system that contains
two diﬀerent instances for each protocol module. Each simulation time is 100
seconds and the throughput of each TCP is averaged by results of 100 iterations
for the same environment. The default bandwidth, round-propagation delay,
asymmetric ratio and loss rate are 10(Mbps), 20(ms), 1.0 and 0.001 respectively.
Through simulation studies, we estimated the average throughput of all TCP
variants and calculated the impact rate of each protocol module changing RD,
AR, LR and LP. With the impact rate, we could ﬁnd out the dominant module
for throughput improvement. Then, we compared the throughput of 1) the case
only using Reno and 2) the case with applied reconﬁguration of the protocol
modules properly using our decision maker. The average throughput graphs of
both cases with various network parameters are shown in Figure 1. As we know
from the results, there are always protocol modules that can take the place of
Reno’s for an improvement of the throughput.

4

Conclusion

In this paper, we proposed Protocol Conﬁguration Decision Maker for TCP
to dynamically adapt to time-varying network environments. While the existing
ﬂexible and extensible network systems conﬁgure the protocol stack based on application requirements, the proposed mechanism is based on network parameters
like loss rate. Through simulation studies, we could show that our mechanism
helps TCP achieve better throughput than normal TCP Reno, up to 80∼194%.

References
1. Stenfan B¨
ocking, “Object-Oriented Network Protocols,” In Proceedings of IEEE
INFOCOM, 1997.
2. M. Gerla, M. Y. Sanadidi, R. Wang, A. Zanella, C. Casetti, S. Mascolo, “TCP Westwood: Congestion Window Control Using Bandwidth Estimation,” In Proceedings
of IEEE GLOBECOM, Nov. 2001.
3. L. Xu, K. Harfoush and I. Rhee, “Binary increase congestion control for fast longdistance networks,” In Proceedings of IEEE INFOCOM, 2004.
4. S. Floyd, M. Mahdavi, M. Mathis and J. Widmer, “An Extension to the Selective
Acknowledgement(SACK) option for TCP,” IETF, RFC 2883, 2000.
5. George W. Cobb, “Introduction to Design and Analysis of Experiments,” Springer,
Mar. 1998.
6. ns2 Network Simulator version 2.26, http://www.isi.edu/nsnam/ns, 2003.

