A Timestamp Tree-Based Cache Invalidation
Report Scheme in Mobile Computing
Environments
Hakjoo Lee1 , Jonghyun Suh2 , Sungwon Jung2 ,
Sooyoung Lee3 , and Junguck Lee3
1

3

DTV Lab. AIM Gr., LG Electronics, San 4-1,
Bongcheon 7, Gwanak-gu, Seoul, Korea
or4nge@lge.com
2
Department of Computer Science, Sogang University, Seoul, Korea
{joe77, jungsung}@sogang.ac.kr
R&D Division, Advanced Power&IT Research Center, KATECH, Korea

Abstract. In mobile computing environments, cache invalidation techiniques are widely accepted. However, theses techniques require a large
size of the invalidation report and show low cache utilization under high
server update rate. We propose a new cache-level cache invalidation technique called TTCI(Timestamp Tree-based Cache Invalidation technique)
to overcome the above problems. TTCI also supports selective tuning for
a cache-level cache invalidation. We verify the eﬀectiveness of our TTCI
schemes through in-depth simulation experiments.

1

Introduction

In mobile computing environments, cache invalidation techiniques are widely accepted. But it is very diﬃcult due to frequent disconnections and relatively unreliable wireless links. There have been many research eﬀorts to develop eﬃcient
cache-level cache invalidation report schemes for mobile clients [3, 4]. However,
under high update rate, invalidation report size increases proportionally and false
invalidation will occur more often which causes low cache utilization. And none
of the above schemes support selective tuning, which is very important for mobile
clients to conserve the scarce battery resources. There have been other eﬀorts
like [2]. However, it lacks scalability and consumes more bandwidth including
uplink. To cope with the above problems, we propose a new cache invalidation
report scheme called Timestamp Tree-based Cache Invalidation(TTCI) without
using any uplink. Also unlike group-based IR and BS-based IR schemes, TTCI
doesn’t require any priori knowledge.
This research was supported in part by grant No.10016775 under the supervision of
Korea Automotive Technology Institute from the next-generation new growth engine
program of Ministry Of Commerce and Industry and Energy in Korea and in part
by grant No.R01-2003-000-10197-0 from the Basic Research Program of the Korea
Science&Engineering Foundation.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 1065–1068, 2006.
c Springer-Verlag Berlin Heidelberg 2006

1066

H. Lee et al.

The rest of the paper is organized as follows. In Section 2 and 3, we describe our TTCI scheme and give performance analysis through simulation experiments. Finally, Section 4 provides concluding remarks.

2
2.1

Timestamp Tree-Based Cache Invalidation(TTCI)
TTCI Algorithm

In this subsection, we introduce the TTCI algorithm using an example. Basically,
TTCI is composed of TT(Timestamp Tree) and IS(ID liSt). TT is a timestampbased tree and works like an index helping clients to ﬁnd a proper location of
the updated information. IS is a list of the updated data IDs. Clients listen to
the updated data from the position where TT points till the end of IS.
Suppose there are 20 updated data with N T = 16 non-identical timestamps,
F A = 3 fanout of TT, and N T S = 8 the number of timestamps that TT uses.
TTCI works in four steps as follows: First, build OLIST, a list of the updated
data IDs sorted by timestamps in ascending order with no duplications, as shown
in Table 1. Second, using timestamps from OLIST, build TT. A node in TT is
composed of pointers(Pi ) and timestamps(T Si ), like <P1 , T S1 , P2 , T S2 , P3 ,
T S3 , ..., T SF A−1 , PF A >. This step is described in Algorithm 1. Third, build
IS, which is a list of the updated data IDs in order of timestamps. We simply
sort OLIST by timestamps. Finally, combine IS and TT. Pointers in the internal
nodes are set pointing to another node and pointers in the leaf nodes are set
pointing to a proper location in IS. After TTCI is built as shown in Figure 1, as
an invalidation report, server broadcasts TT and IS.
2.2

Client-Side Algorithm

When a client receives an invalidation report, it checks whether the cache’s most
recent timestamp is within the history window. If it is not within the history
window, the entire cache is dropped. Otherwise, the client starts the look-up
process from the root node in TT to reach the updated data IDs. Finally, the
client validates its cache with the updated information in IS.
In this example, let the last time it was validated be T C = 17, the timestamp
of the current TTCI be T = 32, invalidation broadcast window be w = 2, and the
Table 1. Sample Data and OLIST
(a) Updated Data with Timestamps
Data ID d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20
Timestamp 24 16 10 6 22 18 26 32 2 20 14 30 8 4 12 28 8 14 24 20
(b) OLIST
Timestamp 2 4 6
8
10 12
14
16 18
20
22 24 26 28 30 32
Data ID d9 d14 d4 d13,d17 d3 d15 d11,d18 d2 d6 d10,d26 d5 d1,d19 d7 d16 d12 d8

A Timestamp Tree-Based Cache Invalidation Report Scheme

1067

Fig. 1. TTCI

IR broadcast interval be L = 5. Then it is within the history window. Starting
from root node a, the client reaches position c in IS via node b. Figure 1 shows
the TTCI for this example while the client uses only the shaded nodes.

3

Performance Analysis

We present analysis of our scheme by comparing to DRCI[3] and TS[1]. We
address the invalidation report size as a performance metric, becuase it directly
aﬀects the consumption of scarce bandwidth and limited resources of mobile
devices. The other is the cache usage ratio. Invalidation reports aim to maximize
the cache utilization. Thus the number of valid data in cache after the validation
reﬂects the eﬀectiveness of an invalidation report. We deﬁne the cache usage ratio
as the following equation 1, where N umOf CachedData denote the entire size of
the cache, and N umOf V alidData denote the number of currently cached data.
CacheU sageRatio =

N umOf V alidData
× 100(%)
N umOf CachedData

(1)

As the update rate increases, the IR size of DRCI and TTCI increases because
they should contain more updated information. In all ranges, TTCI outperforms
DRCI with an average improvement of more than 25%. Additionally, we can
predict that TTCI will also perform better on tuning time, because it uses smaller
IRs and supports selective tuning. Cache usage ratio degrades with increasing
update rate. However, even under 50% of the update rate, TTCI substantially
outperforms DRCI and TS, proving that it is less sensitive to the update rate.
Thus, as expected, TTCI eﬃciently copes with various update rate.

Algorithm 1. TTCI Algorithm Step 2: Building TT
level = 1; gap = N T ; DE = logF A N T S ;
while level ≤ DE do
node = 1; tmax = gap; tmin = 1; cluster = gap;
while node ≤ F A(level−1) do
tmax −tmin
;
gap =
FA
for i = 1; i < F A; i + + do
T Si =(gap × i + tmin )th Timestamp in OLIST;
tmin = tmax + 1; tmax = tmax + cluster − 1;
if (tmax > N T ) then
tmax = N T ;
end if
end for
node + +;
end while
level + +;
end while

1068

H. Lee et al.

1.2e+07

30
TTCI
DRCI
TS

TTCI
DRCI
TS

28

1e+07

Cache Usage Ratio X 100 (%)

26

IR Size (bits)

8e+06

6e+06

4e+06

24
22
20
18
16
14

2e+06
12
0

10
0

5

10

15

20

25

30

35

40

45

50

0

5

10

Update Ratio X 100 (%)

15

20

25

30

35

40

45

50

Update Ratio X 100 (%)

(a) Eﬀect on the invalidation report size

(b) Eﬀect on the cache usage ratio

Fig. 2. Simualtion Results

4

Conclusion

In this paper, we have explored the problems of existing cache invalidation
schemes. As the update rate increases, existing cache invalidation schemes suﬀer
from a large invalidation report size and low cache utilizations. Furthermore,
most cache-level cache invalidation schemes do not support selective tuning,
which is important for the battery power conservation. We have proposed a new
cache invalidation report scheme, called TTCI to cope with the above problems.
TTCI dynamically organizes the updated data IDs into groups using a timestamp tree. As a result, the invalidation report size of TTCI becomes less sensitive
to increasing update rate. TTCI also supports selective tuning while it performs
cache-level invalidation. We have analyzed the performance of our TTCI scheme
against existing schemes. We have veriﬁed the eﬀectiveness of our TTCI scheme
through in-depth simulation experiments.

References
1. D. Barbara and T. Imielinski, “Sleepers and Workaholics: Caching in Mobile Distributed Environments”,Proc. ACM SIGMOD Int. Conf. on Management of Data,
pp. 1-12, 1994.
2. S-Y. Yi, W. Song, S. Jung, and S. Park, “A Cost Eﬀective Cache Consistency
Method for Mobile Clients in Wireless Environment”,DASFAA 2004, pp. 908-915,
2004.
3. K-L. Tan, B.C. Ooi, “An Evaluation of Cache Invalidation Strategies in Wireless
Environments”,IEEE Transactions on parallel and Distributed systems, vol.12, no.8,
pp. 789-807, 2001.
4. A. Elmagarmid, J. Jing, A. (Sumi) Helal, And C. Lee, “Scalable Cache Invalidation
Algorithms for Mobile Data Access”,IEEE Transactions on knowledge and data
engineering, vol 15, no 6, pp. 1498-1511 2003.

