Modeling Eﬃcient XOR-Based Hash Functions
for Cache Memories
Sung-Jin Cho1 , Un-Sook Choi2 , Yoon-Hee Hwang3 , and Han-Doo Kim4
1

2

Division of Mathematical Sciences,
Pukyong National University, Busan 608-737, Korea
sjcho@pknu.ac.kr
Department of Multimedia Engineering, Tongmyoung University
Busan 608-711, Korea
choies@pknu.ac.kr
3
Department of Information Security, Graduate School,
Pukyong National University, Busan 608-737, Korea
yhhwang@pknu.ac.kr
4
School of Computer Aided Science, Inje University
Gimhae 621-749, Korea
mathkhd@inje.ac.kr

Abstract. In this paper, we design new XOR-based hash functions,
which compute each set index bit as XOR of a subset of the bits in the
address. These are conﬂict-free hash functions which are diﬀerent types
according to m is even or odd.

1

Introduction

Hash functions are used in processors to augment the bandwidth of an interleaved
multibank memory or to enhance the utilization of a prediction table or a cache
[1]. Bank conﬂicts can severely reduce the bandwidth of an interleaved multibank memory and conﬂict misses increase the miss rate of a cache. Therefore
it is important that a hash function has to succeed in spreading the most frequently occurring patterns over all indices. Vandierendonck et al.[2] constructed
XOR-based hash functions which provided conﬂict-free mapping for a number of
patterns for multibank memories and skewed-associative caches. Their functions
map 2m bits to m(= 2k) bits which are conﬂict free. But they didn’t construct
hash functions which are conﬂict free when m is odd. Also they constructed
two XOR-based hash functions for skewed-associative caches. But the degree of
interbank dispersion between two hash functions is less than 2m, which is the
maximum degree between them. So they changed the basis of one hash function
to overcome this problem.
In this paper, we design new XOR-based hash functions, which compute each
set index bit as XOR of a subset of the bits in the address by using the concepts
of rank and null space ([3], [4]). These are conﬂict-free hash functions which are
This work was supported by KOSEF:R01-2006-000-10260-0.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 1067–1070, 2006.
c Springer-Verlag Berlin Heidelberg 2006

1068

S.-J. Cho et al.

diﬀerent types according to m is even or odd. To apply the constructed hash
functions to the skewed-associative cache, we show that the degree of interbank
dispersion between two hash functions is maximal.

2

Modeling Eﬃcient XOR-Based Hash Functions

A hash function is a function from {0, · · · , 2n − 1}(:= A) of n-bit addresses to
{0, · · · , 2m −1}(:= S) of m-bit indices (m < n). An n-bit address a is represented
by a bit vector a1 , · · · , an . A hash function mapping n bits to m bits is represented as a binary matrix H with n rows and m columns. Since H is surjective,
the image of A is S. Therefore rank(H) = dim(S) = m, where dim(S) is the dimension of S. The bit on the i-th row and the j-th column is 1 when address bit
ai is an input to the XOR-gate computing the j-th set index bit. Consequently,
the computation of the set index s can be expressed as the vector-matrix multiplication over GF (2), where addition is computed as XOR and multiplication
is computed as logical AND, denoted by s = aH.
Since matrices are considered as linear transformations, they can be characterized by their null spaces. The null space of a matrix H is the set of all
addresses which map to index 0, namely N (H) = {x : xH = 0}.
In this section we model eﬃcient XOR-based hash functions when the number
of address bits is 2m, where m is even or odd. We propose the new model of
XOR-based hash functions for two cases. We give XOR-based hash functions by
the following.
Deﬁnition 2.1. We deﬁne XOR-based hash functions of four types as the
following:
(i) m = 2k − 1 (k ∈ N), where N is the set of all positive integers.
H1 = (T1 , I2k−1 )t , H3 = (T3 , I2k−1 )t , where I2k−1 is the identity matrix,
T1 = (tij )(2k−1)×(2k−1) ,

T3 = (tij )(2k−1)×(2k−1) ,
(ii)

m = 2k

1,
1,
0,
⎧
1,
⎪
⎨
1,
tij =
⎪
⎩ 1,
0,
tij =

if 1 ≤ i ≤ k, 1 ≤ j ≤ k − i + 1,
if 1 ≤ i ≤ 2k − 1, j = 2k − i,
otherwise .
if i = j = 1,
if 1 ≤ i ≤ 2k − 1, j = 2k − i,
if k ≤ i ≤ 2k − 1, 3k − i − 1 ≤ j ≤ 2k − 1,
otherwise .

(k ∈ N)

H2 = (T2 , I2k )t , H4 = (T4 , I2k )t
1,
T2 = (tij )(2k)×(2k) , tij = 1,
0,
1,
T4 = (tij )(2k)×(2k) , tij = 1,
0,

, where I2k is the identity matrix,
if 1 ≤ i ≤ k, i ≤ j ≤ k,
if 1 ≤ i ≤ 2k − 1, j = 2k − i,
otherwise .
if k + 1 ≤ i ≤ 2k, k + 1 ≤ j ≤ i,
if 1 ≤ i ≤ 2k − 1, j = 2k − i,
otherwise .

Modeling Eﬃcient XOR-Based Hash Functions for Cache Memories

1069

Theorem 2.2. (i) All m × m matrices Ti s in Deﬁnition 2.1 are nonsingular,
where i = 1, 2, 3, 4.
(ii) Each Ti ⊕ I is nonsingular, where Ti is in Deﬁnition 2.1.
Theorem 2.3. Let H = (T, Im )t be the hash function in Deﬁnition 2.1, where
T = (t1 , t2 , · · · , tm )t and Im = (e1 , e2 , · · · , em )t . And let
Mij = (tm+1−i , · · · , tm−1 , tm , em+1−j , · · · , em )t
where i + j = m. Here At is the transpose of A. Then rank(Mij ) = m.
By Theorems 2.2 and 2.3, the modeled XOR-based hash functions such as the functions deﬁned in Deﬁnition 2.1 map the patterns(rows, columns, (anti)diagonal,
and rectangles) without conﬂicting.

3

Conﬂict-Free Mapping in 2-Way Skewed-Associative
Caches

In this section, we construct XOR-based hash functions for a 2-way skewedassociative cache of the same size that maps the same patterns conﬂict-free.
Deﬁnition 3.1. We deﬁne the degree of interbank dispersion(DID) between two
XOR-based hash functions H1 , H3 by 2m × m
DID(H1 , H3 ) = rank[H1 H3 ]

Fig. 1. Illustration of H1 and H3 and interbank dispersion

The hash functions of a 2-way skewed-associative cache should be designed
such that the DID is maximal for every pair of hash functions. Vandierendonck
et al.[2] deﬁned the DID between two hash functions H1 and H3 by using the
concepts of supremum(inﬁmum) of two functions and the concept of the dimension of column space. But we deﬁned the DID by using only the concept of
the rank of the augmented matrix [H1 H3 ]. Every address in main memory is
mapped to a set in bank 1 by H1 and to a set in bank 2 by H3 . These functions

1070

S.-J. Cho et al.

are illustrated in a two-dimensional plot(Fig. 1). Each axis is labeled with the
possible set indices for that bank. Every address is displayed in the grid in a
position that corresponds to its set indices in each bank. For two vectors x and
y in the same row, xH3 = yH3 but xH1 = yH1 . Similarly, for two vectors u
and v in the same column, uH1 = vH1 but uH3 = vH3 . Therefore this skewedassociative cache can avoid conﬂict by H1 and H3 . Fig. 1 shows that the DID of
H1 and H3 is maximal. Also the element (5 : 3) represents (101 011).
The following theorem characterize the maximality of the DID of H1 and H3 .
Theorem 3.3. The degree of interbank dispersion between H1 and H3 is maximal if and only if N ([H1 H3 ]) = {0}.
Lemma 3.4. Let T1 and T3 be matrices in Deﬁnition 3.1, where m = 2k−1(k ≥ 3).
Then rank[T1 ⊕ T3 ] = m.
The following theorem shows that the DID between the proposed hash functions
H1 and H3 is maximal. We can see that these functions map 2m-bit address to
m-bit set index without conﬂict for a 2-way skewed-associative cache.
Theorem 3.5. Let H1 = (T1 , Im )t and H3 = (T3 , Im )t for T1 and T3 are matrices
in Deﬁnition 2.1, where m = 2k − 1(k ≥ 3). Then rank[H1 H3 ] = 2m.
Corollary 3.6. Let H1 = (T1 , Im )t and H3 = (T3 , Im )t for T1 and T3 are matrices in Deﬁnition 2.1, where m = 2k − 1(k ≥ 3). Then N ([H1 H3 ]) = {0}.
We can show that Theorem 3.5 and Corollary 3.6 hold for H2 and H4 , where
m = 2k.

4

Conclusion

In this paper we designed new XOR-based hash functions by using the concepts
of rank and null space. We constructed conﬂict-free hash functions which are
diﬀerent types according to m is even or odd. We showed that the DID between
the proposed hash functions is maximal. By the result we showed that these
functions map without conﬂict for a 2-way skewed-associative cache.

References
1. A. Seznec, A New Case for Skewed-Associativity, Technical Report PI-1114, IRISH
(1997)
2. Hans Vandierendonck and Koen De Bosschere, XOR-Based Hash Functions, IEEE
Trans. Computers 54 (2005) 800-812
3. S.J. Cho, U.S. Choi, Y.H. Hwang, Y.S. Pyo, H.D. Kim and S.H. Heo, Computing
Phase Shifts of Maximum-Length 90/150 Cellular Automata Sequences, Lecture
Notes in Computer Science 3305 (2004) 31-39
4. S.J. Cho, U.S. Choi and H.D. Kim, Behavior of Complemented CA whose Complement Vector is Acyclic in a Linear TPMACA, Mathematical and Computer Modelling 36 (2002) 979-986

