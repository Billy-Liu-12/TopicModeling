Generating Test Data for Speciﬁcation-Based
Tests Via Quasirandom Sequences
Hongmei Chi1,2 , Edward L. Jones2 , Deidre W. Evans2 , and Martin Brown2
1

School of Computational Science,
Florida State University, Tallahassee, FL 32306-4120
chi@csit.fsu.edu
2
Department of Computer and Information Sciences,
Florida A& M University, Tallahassee, FL 32307-5100

Abstract. This paper presents work on generation of speciﬁcationdriven test data, by introducing techniques based on a subset of quasirandom sequences (completely uniformly distributed sequences) to generate test data. This approach is novel in software testing. This enhanced
uniformity of quasirandom sequences leads to faster generation of test
data covering all possibilities. We demonstrate by examples that welldistributed sequences can be a viable alternative to pseudorandom numbers in generating test data. In this paper, we present a method that
can generate test data from a decision table speciﬁcation more eﬀectively via quasirandom numbers. Analysis of a simple problem in this
paper shows that quasirandom sequences achieve better data than pseudorandom numbers, and have the potential to converge faster and so
reduce the computational burden. Functional test coverage, an objective
criteria, evaluates the quality of a test set to ensure that all speciﬁed
behaviors will be exercised by the test data.
Keywords: automatic test case generation, speciﬁcation-driven test,
functional test coverage, quasirandom numbers, well-distributed
sequences.

1

Introduction

Software testing [14] is a costly process that is critical for accessing system
behavior. The two common strategies are black-box testing, driven by speciﬁcation of software [22], and white box testing, driven by the software structure
[16]. Speciﬁcation-based testing, whose inputs are derived from a speciﬁcation, is
black-box testing. Speciﬁcation-based testing of software is to increase the eﬀectiveness of software testing [13]. A formal software speciﬁcation is one of the most
useful documents to have when testing software, since it is a concise and precise
description of functionality. Speciﬁcation-based testing focuses on obtaining test
data from speciﬁcation [19]. Generating test data to cover all speciﬁcation is a
challenge for a complex system [6, 21].
We are developing an approach to deriving test data from quasirandom sequences [20] instead of pseudorandom sequences. Quasirandom sequences are
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part IV, LNCS 3994, pp. 773–780, 2006.
c Springer-Verlag Berlin Heidelberg 2006

774

H. Chi et al.

constructed to minimize the discrepancy, a measure of the deviation from uniformity and therefore quasirandom sequences are more uniformly distributed
than pseudorandom sequences. In the past, pseudorandom number generators,
such as linear congruential generators [9] have been used in the implementation
of random testing. Recently, it has been recognized that the convergence rate
of Monte Carlo approaches based on pseudorandom numbers is slow and that
an important improvement of the convergence rate can be achieved by using
quasi-Monte Carlo methods [12, 15]. This observation is the motivation for the
investigation described in this paper.
We will explore the use of completely uniformly distributed sequences in generating test data. The organization of this paper is following. An overview of
completely uniformly sequences (quasirandom sequences) is given in § 2. An
overview for speciﬁcation-based tests and test data generation is presented in §
3. In § 4, we analyze a simple speciﬁcation-based test problem using completely
uniformly sequences and numerical results are shown. A discussion of results and
conclusion are presented in § 5.

2

Quasirandom Sequences

Pseudorandom numbers are constructed to mimic the behavior of truly random
numbers, whereas highly uniform numbers, called quasirandom numbers, are
constructed to be as evenly distributed as is mathematically possible. Pseudorandom numbers are scrutinized via batteries of statistical tests that check for
statistical independence in a variety of ways, and are also checked for uniformity of distribution, but not with excessively stringent requirements. Thus, one
can think of computational random numbers as either those that possess considerable independence, such as pseudorandom numbers; or those that possess
considerable uniformity, such as quasirandom numbers [15].
From Fig. 1, we can see the diﬀerence between pseudorandom and quasirandom sequences. Pseudorandom numbers are only a subsitute for true random
numbers and tend to show clustering eﬀects; while quasirandom numbers tends
to more uniformly distributed. There are many applications that do not really
require randomness, but instead require numbers that uniformly cover the sample space. Quasirandom sequences are more suitable for such applications. In
particular, fewer quasi-random samples are needed to achieve a similar level of
accuracy as obtained by using pseudo-random sequences [11, 18].
The original construction of quasirandom sequences is related to the Weyl
sequence [10] and the van der Corput sequence. Weyl sequence is based on irrational numbers while the van der Corput sequence is a one-dimension quasirandom sequence based on digital inversion. This digital inversion method is the
central idea behind the construction of current quasirandom sequences, such as
Halton, Faure and Sob´l sequences. Niederreiter [15] extended this method to
arbitrary bases and dimensions. Weyl sequences is used this paper for numerical
experiments in § 4. The deﬁnition of Weyl sequence is as follows:

Generating Test Data for Speciﬁcation-Based Tests

775

Deﬁnition 1. If θ is an irrational number, then the Weyl sequence n ∗ θ
(mod 1), n=1,2,3,...., is uniformly distributed.
Here (mod 1) is operation of keeping the fraction part of any number, for example 2.345 (mod 1) = 0.345. The Weyl sequence is easy to implement and
well-distributed. For diﬀerent θ, the diﬀerent dimensions of the Weyl sequence
can be generated.

1

A

1

0.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0.2

0.4

0.6

0.8

1

0

B

0.2

0.4

0.6

0.8

1

Fig. 1. Comparison of pseudorandom numbers and quasirandom numbers in two dimensions. A: 2000 pseudorandom numbers (linear congruential generator); B: 2000
quasirandom numbers (Weyl sequence).

3

Speciﬁcation-Based Tests

Although a formal software speciﬁcation is one of the most useful document to
have when testing software, most of software speciﬁcations are stated informally
in practice and that leaves a lot of ambiguities. Additional speciﬁcation notations
are needed to clarify these statements. A decision table is a rule-based speciﬁcation in which responses are speciﬁed in terms of combinations of conditions met
by input data. The decision table is a speciﬁcation technique that can be used
as the basis for test case design [3] [5] [8]. In this section we show by an example
how a decision table can provide the basis for deﬁning speciﬁcation-based tests.
We also show that how quasirandom sequences produce the test data based on
the decision table.
One measure for test case eﬀectiveness is deﬁned as functional coverage, which
measures the thoroughness of testing based on the speciﬁcation. This is a ratio
of the number of rules triggered by the set of test data to the number of rules
in the decision table.
Deﬁnition 2. Functional coverage =

#rules−satisf ied
#rules−in−the−decision−table .

776

H. Chi et al.
hours

overtime
Pay

rate

pay

Fig. 2. Black-box schematic speciﬁcation for Pay
CONDITIONS
| DECISION RULES
------------------------------------------------- -------------hours>40
| N Y N Y
rate<10
| Y Y N N
------------------------------------------------- -------------ACTIONS
| ACTION RULES
------------------------------------------------- -------------pay = hours * rate; pay = pay;
| X - - pay = 1.5 * rate * (hours - 40) + 40 * rate;
| - X - pay = 40 * rate;
| - - X X
overtime = 0;
| X - X X
overtime = 1.5 * rate * (hours - 40);
| - X - ------------------------------------------------- --------------

Fig. 3. Payroll Decision Table (DT1) based on the Narrative Speciﬁcation in Table 1

Consider the narrative speciﬁcation in Table 1 [7], which speciﬁes software to
compute the weekly pay of employees. The ﬁrst step in transforming this narrative speciﬁcation is to identify the stimuli and responses. From the speciﬁcation,
we can deduce that the necessary stimuli (input data) are the hours worked
and the hourly salary rate. The responses are the amount of the pay and the
resulting overtime paid as shown in Figure 2. According to the speciﬁcation, the
software must determine whether an employee is hourly (rate ≤10) or salaried,
and whether the employee has exceeded 40 hours of work (hours ≥ 40). Figure
3 is a summary of all rules and actions for Pay Speciﬁcation in Table 1.
Table 1. Payroll Speciﬁcation
Calculate employee pay, including overtime paid at 1.5 times the hourly
rate of hourly employees for time in excess of 40 hours. Salaried employees
are not paid overtime, nor do they lose pay when they work less than the
normal work week of 40 hours. Hourly employees earn less than 10 per hour.

When testing complicated software with a static speciﬁcation, it is diﬃcult to
determine manually whether each rule has been covered and if there are anomalies in the decision table speciﬁcation [4]. Jones [7] [8] has developed a tool that
uses test data to identify speciﬁcation anomalies, while using the speciﬁcation to
determine adequacy of the test data. We use quasirandom sequences to provide
the test data, and functional coverage as the criterion for measuring the test
data. The procedure is simple: according Figure 2, we generate two-dimension

Generating Test Data for Speciﬁcation-Based Tests

777

Table 2. Payroll Speciﬁcation (Extended from Table 1)
Calculate employee pay, including overtime paid at x times the hourly rate.
Salaried employees are paid overtime only if they work more than 50 hours,
but they do not lose pay when they work less than the normal work week of
40 hours. Hourly employees earn less than $30 per hour. Employees who
work more than 50 hours receive 1.5 times the hourly rate for each overtime
hour. Employees who work more than 60 hours are paid 1.5 times the hourly
rate for hours up to 60, and 1.6 times the hourly rate for each hour after 60.
Employees who work more than 70 hours are paid 1.5 times the hourly rate
for hours up to 60, 1.6 times the hourly rate for hours between 60 and 70,
and 1.7 times the hourly rate for each hour after 70. Those who work more
than 80 hours receive 1.5 times the hourly rate for hours up to 60, 1.6 times
the hourly rate for hours between 60 and 70, 1.7 times the hourly rate for
hours between 70 and 80, plus a bonus of $100.

Conditions
hours > 40
hours > 50
hours > 60
hours > 70
hours > 80
rate >= 30
Actions
regular_pay = hours * rate

N

over_pay = 1.5 * rate * (hours – 40)
over_pay = 1.5 * rate * (20) + 1.6 *
rate * (hours – 60)
over_pay = 1.5 * rate * (20) + 1.6 *
rate * (10) + 1.7 * rate * (hours –
70)

Y

Decision Rules
Y
Y
Y
Y

N

Y

N

X

X

Y
Y
Action Rules

Y

Y

Y
Y

X

X

X

X

regular_pay = 40 * rate
over_pay = 0

N

X

X

X

X
X

X
X
X

over_pay = 1.5 * rate * (20) + 1.6 *
rate * (10) + 1.7 * rate * (10) + 100

X

Fig. 4. Payroll Decision Table 2 (DT2) based on the Narrative Speciﬁcation in Table2

Table 3. Test Results for Decision Tables (#test data for full funtional coverage)
Generator

Decision Table DT1
Decision Table DT 2
———————————- ————————————–
#rules
#test data pairs #rules
#test data pairs
PRNG
4
6
8
29
QRNG
4
5
8
11

778

H. Chi et al.

Table 4. Test data Generated by a QRNG for Decision Tables DT 1 and DT 2
Test Data for DT 1
Test Data DT
# DT rules
4
8
# test pairs
5
11
hours
48 58 25 29 70 88 76 43 110 36 62 67
rate
15 13 8 19 6 16 40 32 52 40 56 40
rule
2 2 3 4 1
3 5 7 4 2 6 6
Uncovered rules
none
none

2

51 15 78 1
51 31 38 13
7 2 5 1

Table 5. Test data Generated by a PRNG for DecisionTables DT 1 and DT 2

# DT rules
#Test pairs
hours
rate
rule
Uncovered rules

Test Data for DT 1
Test Data for DT 2
4
8
6
11
4 53 54 56 34 37
6 79 81 84 52 56 14 103 67 26 100
6 5 11 3 1 13 19 15 33 10 3 41 20 55 22 3 41
3 1 2 1 3 4
1 3 4 3
3 7 1
4
3 1 4
none
2, 5, 6, 8

test data sets (hour, rate), and check functional coverage to see how many decision table rules are satisiﬁed (covered) by one or more test data pairs. The
measure of interest for comparing pseudo-random and quasirandom generation
of data sets is the number of test data needed to reach functional coverage of 1.
The numerical results are shown in Section 4.

4

Numerical Experiments

We need a more complicated decision table for generating test data. Therefore,
we extend the decision table ( in Table 1 and Figure 3) and make more rules.
The new speciﬁcation narrative and decision table are shown in Table 2 and
Figure 4, respectively.
In order to compare the eﬀectiveness of quasirandom numbers, we use quasirandom sequences and pseudorandom sequences to produce the test data. The
numerical results are shown in Table 2. The pseudorandom number generator(PRNG) we used in this paper is one of linear congruential generators (LCGs)
in Numerical Recipe in C [17]. This LCG is deﬁned as following:
Deﬁnition 3. The LCG determined by xn = axn−1 (mod m) with a = 16807
and m = 231 − 1 has a period of 231 − 2.
The quasirandom number generator is Weyl sequences and we used the same
implementation in [2]. The Weyl sequence we used in this paper with θ = 2. The
results in Table 3 show that quasirandom number generator(QRNG) signiﬁcantly
converges faster, i.e., covers all rules with fewer test data. The quasirandom test

Generating Test Data for Speciﬁcation-Based Tests

779

data are presented in Table 4, the pseudorandom test data in Table 5. The faster
convergence is more marked for the large decision table.

5

Conclusions and Future Work

A new scheme for generating test data via quasirandom sequences is proposed.
The advantage of this scheme is that we can provide test data based on a speciﬁcation automatically. This scheme is an alternative to generate test data manually or from pseudorandom numbers. Our numerical results, though preliminary
, are promising. Should our observations about faster convergence (full coverage
with fewer test data) hold, quasirandom test generation may oﬀer economical
advantages over pseudo-random testing. A broader question is whether quasirandom testing is superior to pseudo-random testing, in terms of eﬃciency and
eﬀectiveness. Addressing this question may require a replication of past studies
such as in Abdurazik [1].
In the future, we will extend the study given in this paper to support the
test-driven speciﬁcation paradigm of Jones [7, 8] when applied to more complex
problems requiring large, complex decision table speciﬁcations. Ongoing work
includes the development of a library of quasirandom generation routines to
support speciﬁcation-based test generation.
One of the limitations of this scheme may occur when input is extremely
distributed instead of uniformly distributed. On the other hand, because many
of the accepted software testing practices are based on partitioning and sampling,
the impact of non-uniform distributions may be negligible.

References
1. A. Abdurazik, P. Ammann, W. Ding, and J. Oﬀutt. Evaluation of three
speciﬁcation-based testing criteria. Sixth IEEE International Conference on Complex Computer Systems (ICECCS’00), pages 179–187, 2000.
2. P. Beerli, H. Chi, and E. Jones. Quasi-monte carlo method in population genetics
parameter estimation. Mathematics and Computers in Simulation, In press, 2006.
3. R. V. Binder. Testing Object-oriented systems: models, patterns and tools. AddisonWesley, Reading, Massachusetts, 1999.
4. K. H. Chang, S. Liao, and R. Chapman. Test scenario geneneration based on
formal speciﬁcation and usage. International Journal of Software Engineering and
Knowledge Engineering, 10(2):1–17, 2000.
5. N. Glora, H. Pu, and W. O. Rom. Evaluation of process tools in systems analysis.
Information and Technology, 37:1191–1126, 1995.
6. J. B. Goodenough and S. L. Gerhart. Toward a theory of test data selection. In
Proceedings of the international conference on Reliable software, pages 493–510,
1975.
7. E. L. Jones. Automated support for test-driven speciﬁcation. In Proceedings of the
9th IASTED International Conference on Software Engineering and Applications,
pages 218–223, 2005.
8. E. L. Jones. Test-driven speciﬁcation: Paradigm and automation. In 44th ACM
Southeast Conference, March 10-12, 2006.

780

H. Chi et al.

9. D. E. Knuth. The Art of Computer Programming, vol. 2: Seminumerical Algorithms. Cambridge University Press, New York, 1997.
10. L. Kuipers and H. Niederreiter. Uniform Distribution of Sequences. John Wiley
and Sons, New York, 1974.
11. W. L. Loh. On the asymptotic distribution of scrambled net quadrature. Annals
of Statistics, 31:1282–1324, 2003.
12. W.J. Morokoﬀ and R.E. Caﬂish. Quasirandom sequences and their discrepancy.
SIAM Journal on Scientiﬁc Computing, 15:1251–1279, 1994.
13. H. Muccini, A. Bertolino, and P. Inverardi. Using software architecture for code
testing. IEEE Trans. on Software Engineering, 30(3):160–171, 2004.
14. G. Myers, C. Sandler, T. Badgett, and T. Thomas. The Art of Software Testing.
John Wiley and Sons, New Jersey, 2004.
15. H. Niederreiter. Random Number Generations and Quasi-Monte Carlo Methods.
SIAM, Philadelphia, 1992.
16. S. Ntafos. A comparison of some structural testing strategies. IEEE Trans. on
Software Engineering, 14(6):868—874, 1988.
17. W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B.P. Flannery. Numerical
Recipes in C. Addison-Wesley, Reading, Massachusetts, 1992.
18. J. Spanier and E. Maize. Quasirandom methods for estimating integrals using
relatively small sampling. SIAM Review, 36:18–44, 1994.
19. P. Stocks and D. Carrington. Test template framework: A speciﬁcation-based
testing case study. In Proceedings of Int. Symp. Software Testing and Analysis,
pages 11–18, 1993.
20. S. Tezuka. Uniform Random Numbers, Theory and Practice. Kluwer Academic
Publishers, IBM Japan, 1995.
21. P. Variyam. Speciﬁcation-driven test generation for analog circuits. IEEE Trans.
on Computer-aided Design, 19(10):1189—1201, 2000.
22. G. Wimmel, H. Ltzbeyer, A. Pretschner, and O. Slotosch. Speciﬁcation based test
sequence generation with propositional logic. Software Testing, Veriﬁcation and
Reliability, 10(4):229–248, 2000.

