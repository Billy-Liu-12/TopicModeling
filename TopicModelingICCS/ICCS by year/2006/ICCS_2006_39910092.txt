A Treecode for Accurate Force Calculations
Kasthuri Srinivasan

and Vivek Sarin

Department of Computer Science, Texas A&M University,
College Station, TX, USA
{kasthuri, sarin}@cs.tamu.edu

Abstract. A novel algorithm for computing forces in N-body simulations is presented. This algorithm constructs a hierarchical tree data
structure and uses multipole expansions for the inverse square law. It can
be considered as a multipole-based variant of Barnes-Hut algorithm [2].
The key idea here is the representation of forces (gravitational or electrostatic) through a multipole series by using the relationship between
ultraspherical and Legendre polynomials. The primary advantage of this
algorithm is the accuracy it oﬀers along with the ease of coding. This
method can be used in the simulation of star clusters in astrophysical
applications in which higher order moments are expensive and diﬃcult to
construct. This method can also be used in molecular dynamics simulations as an alternative to particle-mesh and Ewald Summation methods
which suﬀer from large errors due to various diﬀerentiation schemes.
Our algorithm has O(p3 N log N ) complexity where p is typically a small
constant.

1

Introduction

N-body simulations have become very important in theoretical and experimental
analysis of complex physical systems. A typical N-body problem models physical
domains where there is a system of N particles (or bodies), each of which is inﬂuenced by gravitational forces or electrostatic forces of all other particles. The
naive brute force algorithm to compute the forces acting on each particle based
on particle-particle interaction is an O(N 2 ) algorithm. There are various approximation algorithms with lower complexity that have been proposed for these
simulations. In the simulation of gravitational forces in astrophysics, BarnesHut algorithm [2] and its variants are used. For electrostatic force simulations
occurring in molecular dynamics (MD), Fast Multipole algorithm (FMM) [5],
particle-mesh methods like P3M [8] and Ewald Summation techniques [7] are
widely applied.
For two particles of strengths q1 and q2 , the force acting on q1 due to q2 , is
given by the inverse square law,
q1 q2
r12
(1)
F =
2 · |r | ,
12
|r12 |
This work has been supported in part by NSF under the grants NSF-CCR0113668
and NSF-CCR0431068.
Corresponding author.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 92–99, 2006.
c Springer-Verlag Berlin Heidelberg 2006

A Treecode for Accurate Force Calculations

93

where |r12 | is the distance between the particles. In this paper, the constant of
proportionality (like the gravitational constant) is assumed to be 1. Even though
the above law is applicable to both gravitational and electrostatic interactions,
the required accuracy determines the algorithms to be used. The Barnes-Hut
algorithm is an easy-to-code algorithm used in most astrophysical simulations
where lower accuracy is often preferred (around 1%) over reduced execution
time. In astrophysical simulations, the force is approximated by a multipole series expansion with respect to the center of mass. The ﬁrst moments are large
enough (since the masses are all positive) to approximate the forces. Therefore,
the monopole moment and the ﬁrst two moments in the multipole series provide enough accuracy. On the other hand, in MD simulations, higher accuracy
is needed because the distance and time scales involved are very diﬀerent from
astrophysical problems. The Barnes-Hut scheme can be adapted to MD simulations by adding more terms to the multipole series. For electrostatic force
simulations, however, the distribution of positive and negative charges impedes
the numerical robustness of the Barnes-Hut algorithm [6]. Methods like Ewald
Summation, particle-mesh based approaches like P3M, and FMM are preferred
over Barnes-Hut algorithm for electrostatic problems.
In contrast, in the investigation of collisional astrophysical systems, namely
star clusters and galactic nuclei, there is a need for high accuracy. Such applications require |δE/E|
0.04N −1t/tcr where t and tcr are time parameters,
|δE/E| is the relative energy accuracy and N is the number of stars in the
system [4]. For a system of 103 stars, this means an upper bound of 10−5 on
the error. In order to achieve such high accuracy, McMillan and Aarseth [3]
use octupole terms in the multipole expansion which are quite cumbersome to
construct. Moreover, increased accuracy is needed for larger systems in order
to limit the cumulative errors on core-collapse time scales to acceptable levels.
To our knowledge there is no prior work that uses higher order moments than
octupoles.
In the case of electrostatic force interactions, particle-mesh algorithms like
P3M and Ewald Summation techniques compete with FMM [9, 10]. Despite the
superior asymptotic scaling of FMM when compared to earlier methods [O(N )
versus O(N log N )], FMM has some disadvantages. Apart from the obvious difﬁculty in coding, FMM suﬀers from lack of energy conservation unless very high
accuracy is employed [11]. In addition, special considerations regarding the degree of force interpolation must be taken into account to conserve momentum.
Pollock and Glosi [10] discuss other advantages of P3M over FMM. Even in force
interpolation methods used in particle-mesh algorithms and Ewald Summation
methods, a general statement of accuracy seems to be diﬃcult. The error analysis
of force calculations in these methods are quite involved and they provide a fair
comparison only if done at the same level of accuracy. The discretization methods
introduce new sources of errors in addition to the ones originating from real and
reciprocal space cutoﬀs. Furthermore, investigation of errors during force evaluation depends on several parameters such as mesh-size, interpolation orders and

94

K. Srinivasan and V. Sarin

diﬀerentiation schemes. Deserno and Holm [12] illustrated remarkable diﬀerences
in accuracy for these methods.
In this paper, we present a novel algorithm for accurate force calculations in
N-body problems. This algorithm combines the ease of the Barnes-Hut method
with a very high accuracy. Instead of using higher order moments, the algorithm
uses additional terms of a multipole series to increase the accuracy. Our method
can be used eﬀectively in the calculation of star cluster interactions in which accuracy has been limited by octupole moments. Unlike particle-mesh and Ewald
Summation based methods, our algorithm does not involve diﬀerentiation (either diﬀerentiation in Fourier space, analytic diﬀerentiation or discrete diﬀerentiation) to calculate the forces. Forces are directly computed through the series.
This is especially useful where force interpolation is aﬀected by conservation
laws. Further, it may be of interest to note that the complexity of this algorithm
is O(p3 N log N ), which is comparable to that of particle-mesh algorithms that
use Fast Fourier Transforms.
The paper is organized as follows: Section 2 discusses the multipole expansions for forces calculations. Section 3 describes the algorithm, analyzes its complexity and discusses implementation issues. Section 4 presents numerical experiments. Conclusions are presented in Section 5.

2

Multipole Expansion for Forces

A multipole based tree code for computing potentials of the form r−λ , λ ≥ 1,
was introduced in [1]. In this paper, we extend the result to evaluate the forces.
The reader is advised to refer [1] for some of the discussions in this section. The
key idea in computing the potentials of the form r−λ is the use of ultraspherical
polynomials in a manner analogous to the use of Legendre polynomials for the
expansion of the Coulomb potential r−1 . Ultraspherical polynomials (or Gegenbauer polynomials) are generalizations of the Legendre polynomials in terms of
the underlying generating function. That is, if x, y ∈ , then
∞

1
=
Cnλ (x)y n ,
(1 − 2xy + y 2 )λ/2
n=0

(2)

where Cnλ (x) is an ultraspherical polynomial of degree n. They are also higher
dimensional generalizations of Legendre polynomials [14, 15] in the sense that ultraspherical polynomials are eigenfunctions of the generalized angular momentum operator just as Legendre polynomials are eigenfunctions of the angular
momentum operator in three dimensions. One can refer to [14] for a list of similarities between them. The above generating function can be used to expand r−λ .
In [1] we derived the following multipole expansion theorem for r−λ potentials.
Theorem 1 (Multipole Expansion for Potentials) [1]. Suppose that k
charges of strengths {qi ,i = 1, . . . k} are located at the points {Qi = (ρi , αi , βi ), i =
1, . . . , k}, with |ρi | < a. Then, for any point P = (r, θ, φ) with r > a, the potential
Φ(P ) is given by

A Treecode for Accurate Force Calculations
∞

n/2

Φ(P ) =
n=0 m=0

where

1
rn+λ

Mm
n · Yn,m (θ, φ),

95

(3)

k
λ
qi ρni Bn,m
Yn,m (αi , βi ),

Mm
n =
i=1
−(n−2m)

T
Yn,m
(x, y) = Yn−2m

−(n−2m)+1

(x, y), Yn−2m

(n−2m)

(x, y), . . . , Yn−2m (x, y)

is a vector of spherical harmonics of degree n − 2m and
λ
=
Bn,s

(λ)n−s (λ − 1/2)s
(2n − 4s + 1).
(3/2)n−s s!

(4)

Furthermore, for any p ≥ 1,
p

n/2

Φ(P ) −
n=0 m=0

where A =

k
i=1

AB
Mm
n
· Yn,m (θ, φ) ≤ λ−1
rn+λ
r
(r − a)
n/2
m=0

|qi | and B =

a
r

p+1

,

(5)

λ
Bn,m
.

The multipole expansion for force computations can now be deduced as a corollary to the above theorem.
Corollary 1 (Multipole Expansion for Forces). Suppose that k particles
of strengths {qi , i = 1, . . . k} are located at points whose position vectors are
{ρi , i = 1, . . . , k} and let {Qi = (|ρi | , αi , βi ), i = 1, . . . , k} denote their spherical
coordinates with |ρi | < a. Then, for any vector r with coordinates P = (|r| , θ, φ)
and |r| > a, the cth component of the force, Fc (P ), is given by
∞

n/2

Fc (P ) =

1
n+3

n=0 m=0

|r|

m
[(r c )Mm
n − c Vn ] · Yn,m (θ, φ)

(6)

where
k

k
n

3
qi |ρi | Bn,m
Yn,m (αi , βi ),

Mm
n=

n

3
ρci qi |ρi | Bn,m
Yn,m (αi , βi ) .

m
c Vn =

i=1

i=1

Here rc and ρci are the cth component of r and ρi , respectively. Furthermore,
for any p ≥ 1, the approximation Fˆcp (P ) obtained by truncating the expression
in (6) after p terms, satisﬁes
Fc (P ) − Fˆcp (P )
where A =

k
i=1

|qi | and B =

2

≤

AB
2

|r| (|r| − a)

n/2
m=0

λ
Bn,m
.

a
|r|

p+1

(|r| + a),

96

K. Srinivasan and V. Sarin

Proof. We note that r12 = r − ρ1 , and therefore, (1) can be written as
F (P ) =

q1

3r

|r12 |

−

q1
|r12 |3

ρ1 .

Using λ = 3 in (3) for 1/|r12 |3 , the proof follows through the superposition of
particles at {ρi , i = 1, . . . , k}. The error bound can be obtained from (5) by
using the triangle inequality |r12 | ≤ |r| + |ρ1 | ≤ |r| + a.

3

Treecode for Force Calculations

The treecode to compute the forces can be viewed as a variant of Barnes-Hut
scheme that uses only particle-cluster multipole evaluations. The method works
in two phases: the tree construction phase and the force computation phase.
In the tree construction phase, a spatial tree representation of the domain is
computed. At each step of this phase, if the domain contains more than one
particle, it is recursively divided into eight equal sub-domains. This process
continues until each sub-domain has at most one particle.
Each internal node in the tree computes and stores multipole series representation of the particles within its sub-domain. Note that we don’t have the means
to compute translations of multipole coeﬃcients from child to parent nodes. We
must compute the multipole coeﬃcients at every internal node directly from
the particles contained in the node. These coeﬃcients are obtained using Corollary 1. Once the tree has been constructed, force at a point is computed using the
multipole coeﬃcients of a subset of the nodes in the tree, which are suﬃciently
far away from the point. A speciﬁc constant α is used to check if a node is far
enough from the evaluation point. Given the distance of a point from the center
of the sub-domain, d, and the side of the box, r, a point is considered to be far
away from a node if the multipole acceptance criterion (M AC) deﬁned as, d/r,
is greater than α. For each particle, the algorithm proceeds by applying M AC
to the root of the tree to determine whether an interaction can be computed;
if not, the node is expanded and the process is repeated for each of its eight
children. If the node happens to be a leaf, then the force is calculated directly by
using the particles in the node. In order to improve the computational eﬃciency
of the algorithm, the minimum number of particles in any leaf box can be set to
a constant s. The pseudo-code for this method can be found in [1].
It can be seen from Corollary 1 that the complexity of computing the multipole coeﬃcients at each level of the tree is O(p3 N ), where N is the number of
particles in the system and p is the multipole degree. Since there are log N levels
in the tree for a uniform particle distribution, the total cost of computing the
multipole coeﬃcients is O(p3 N log N ). Similarly, it can be seen that the complexity of the force evaluation phase is O(p3 N log N ). Thus, the overall complexity
for the algorithm is O(p3 N log N ).
The algorithm has been implemented in C++ programming language. The
code ﬁrst constructs the oct-tree and the multipole coeﬃcients are calculated

A Treecode for Accurate Force Calculations

97

along with the tree construction. Standard Template Library (STL) data structures were used for the dynamically adaptive tree construction phase. The spherical symmetry of r−3 potentials, when expressed in spherical coordinates, leads
to eﬃcient computations. For example, spherical harmonics for r−1 potential is
computed instead of computing the vector of spherical harmonics given in Theorem 1. Thus, computing O(p2 ) spherical harmonics for each particle is enough to
compute O(p3 ) multipole coeﬃcients, which results in signiﬁcant time reduction
for large systems. The constants deﬁned in (4) are also precomputed and used
in the force evaluation phase to reduce the overall computation time.

4

Experiments

In this section, we present results of numerical experiments performed on a
2.4 GHz, 512 MB Intel P4 PC running Red Hat 9.0. Due to space constraints
we discuss two experiments only. In these tests, a direct summation code is
the benchmark for comparing errors and execution time. For star-cluster applications, Mcmillan and Aarseth [3] compare accuracies for a problem with
N = 103 . They target median force error below 10−4 and achieve it using octupole moments for M AC < 0.5. Fig 1 shows the error in the force F incurred by
truncating expression (6) after p terms. The relative error δF/F is deﬁned by
δF
F

2

1
=
N

N

i=1

|Ftree − Fdirect |
Fscale

2

,

where Fdirect is the force determined by direct summation, Ftree is the value
returned by the tree algorithm and Fscale = ij mi /(rij )2 is a characteristic
scale against which accuracy is measured. Here mi ’s are the masses and the
sums are taken over all particles in the system. Fig 1(a) illustrates the eﬀect of
M AC on error for a uniform distribution of 103 particles with random masses
in the range [0, 1]. The maximum number of particles in leaf boxes were ﬁxed at
10. For M AC = 0.9 we see that an accuracy of 10−5 is reached using multipole
degree 2. Also, as M AC decreases, the error reduces proportionally. For a typical
M AC between 0.6 and 0.7 used in the Barnes-Hut algorithm, we have an order
of magnitude reduction in the error by increasing the multipole degree. In [3],
for M AC < 0.3 the accuracy of the octupole component of the force deteriorates
markedly. In our case, we see that dramatic reduction in the error is obtained
as we increase the multipole degree. Also, Mcmillan et al. require M AC < 0.5
for accurate computations. Since the amount of direct computation is inversely
proportional to M AC, it may be expensive to select such small M AC for large
systems.
Fig 1(b) and Fig 2 demonstrate the eﬀect of M AC on accuracy and execution
time for 104 particles in random uniform distribution. Each particle carries a random positive or a negative charge. This test is carried out to verify the numerical
robustness and consistency of our approach for electrostatic force interactions. As
before, the multipole degree was allowed to vary between 2 and 4, and the number

98

K. Srinivasan and V. Sarin
Error Vs MAC

−4

Error Vs MAC

−5

10

10

Multipole Degree 2
Multipole Degree 3
Multipole Degree 4

−5

−6

Error

10

Error

10

−6

−7

10

10

Multipole Degree 2
Multipole Degree 3
Multipole Degree 4
−7

10

0.4

−8

0.5

0.6

0.7

0.8

10

0.9

0.4

0.5

0.6

0.7

MAC

MAC

(a)

(b)

0.8

0.9

Fig. 1. Error Vs MAC with multipole degrees p = 2, 3 and 4 for (a) 1000 particles with
positive masses (b) 10000 particles with positive and negative charges
Execution time

2

10

Time (Secs)

Multipole Degree 2
Multipole Degree 3
Multipole Degree 4

1

10

0

10
0.4

0.5

0.6

0.7

0.8

0.9

MAC

Fig. 2. Execution time for 10000 particles of positive and negative strengths

of particles per leaf box was ﬁxed at 10. In Fig 2, we see a rapid increase in the
execution time as we increase the multipole degree whereas the growth is smaller
with respect to the MAC. In order to improve the accuracy for a small system, it
is better to reduce the MAC than increase the multipole degree. However, treebased force evaluation schemes are quite ineﬃcient for small number of particles
because the overhead involved in manipulating and traversing the tree data structure is fairly large. For N > 104 , the treecode presented in this paper is expected
to outperform the direct summation algorithm in execution time.

5

Conclusion

This paper presents an eﬃcient algorithm for accurate calculation of forces using
spherical coordinates. The proposed algorithm is superior to existing methods in
which accuracy is limited by the choice of octupole moments and diﬀerentiation

A Treecode for Accurate Force Calculations

99

schemes. Our algorithm combines the ease of the Barnes-Hut algorithm with
accurate force calculation, and can be used to compute gravitational forces in
astrophysical simulations and electrostatic forces in molecular dynamics.

References
1. K. Kasthuri Srinivasan, H. Mahawar and V. Sarin. A Multipole Based Treecode
Using Spherical Harmonics for the Potentials of the Form r −λ . Proceedings of
the International Conference on Computational Science (ICCS), Lecture Notes
in Computer Science, Springer-Verlag, Vol. 3514, pp. 107-114, Atlanta, GA, May
2005.
2. J. Barnes and P. Hut. A Hierarchical O(n log n) Force Calculation Algorithm.
Nature, Vol. 324:446–449, (1986).
3. S.L.W. Mcmillan and S.J. Aarseth. An O(N log N ) Integration Scheme for Collisional Stellar Systems. The Astrophysical Journal, Vol. 414, 200-212 (1993).
4. S. Pfalzner and P. Gibbon. Many-Body Tree Methods in Physics. The Cambridge
University Press, Cambridge, Massachusetts (1996).
5. L. Greengard. The Rapid Evaluation of Potential Fields in Particle Systems. The
MIT Press, Cambridge, Massachusetts (1988).
6. J. Board and K. Schulten. The Fast Multipole Algorithm. IEEE, Computing in
Science and Engineering, Vol. 2, No. 1, January/February (2000).
7. P. Ewald. Die Berechnung Optischer und Elektrostatischer Gitterpotentiale. Ann.
Phys., Vol.64, 253-287 (1921).
8. R.W. Hockney J.W. Eastwood. Computer Simulation Using Particles, New York:
McGraw-Hill (1981)
9. C. Sagui and T. Darden. Molecular Dynamics Simulation of Biomolecules: LongRange Electrostatic Eﬀects . Annu. Rev. Biophys. Biomol. Struct Vol. 28, 155-179
(1999).
10. E. Pollock and J. Glosli. Comments on PPPM, FMM and Ewald Method for Large
Periodic Coulombic Syatems. In Comp. Phys. Comm., Vol. 95, 93-110 (1996).
11. T. Bishop, R. Skeel and K. Schulten. Diﬃculties with Multiple Time Stepping
and Fast Multipole Algorithm in Molecular Dynamics. J. Comp. Chem., Vol. 18
1785-1791 (1997).
12. M. Deserno and C. Holm. How to Mesh up Ewald Sums: A Theoretical and
Numerical Comparison of Various Particle Mesh Routines . J.Comp.Phys, Vol. 109
7678-7692 (1998).
13. E.J. Weniger. Addition Theorems as Three-Dimensional Taylor Expansions. International Journal of Quantum Chemistry, Vol.76, 280-295 (2000).
14. John Avery. Hyperspherical Harmonics, Kluwer Academic Publishers (1989)
15. Claus M¨
uller. Analysis of Spherical Symmetries in Euclidean Spaces, SpringerVerlag (1991)

