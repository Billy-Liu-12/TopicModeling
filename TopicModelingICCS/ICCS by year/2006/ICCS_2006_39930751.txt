The Application of Agents to Parallel Mesh
Refinements in Domain Decomposition Based
Parallel Fully Automatic hp Adaptive Finite
Element Codes
Maciej Paszynski
AGH University of Science and Technology,
Al. Mickiewicza 30, 30-059 Cracow, Poland
paszynsk@agh.edu.pl
http://home.agh.edu.pl/~paszynsk
Abstract. In the hp adaptive Finite Element Method (FEM) applications, the computational mesh consists in ﬁnite elements with varying
size h, and varying polynomial order of approximation p on ﬁnite element edges, faces and interiors. The parallel hp adaptive codes work on
the computational domain partitioned into sub-domains with each of the
sub-domains delegated to a single processor. The algorithm of parallel
mesh reﬁnements on such a distributed FE must enforce global mesh
regularity rules. The paper presents the applications of multiple agents
to implement the parallel mesh reﬁnements algorithm. Agents work on
distributed data structure storing FE mesh where dynamic mesh reﬁnements are recorded by growing trees of initial mesh elements nodes.
Agents located on separated sub-domains communicate in order to establish necessary actions on the distributed mesh.

1

Introduction

Parallelization of h or hp adaptive codes is diﬃcult. Most implementations for
distributed memory parallel computers are based on Domain Decomposition
(DD) paradigm. The computational domain is partitioned into sub-domains with
each of the sub-domains assigned to a single processor.
Among major undertakings to develop a general infrastructure to support
DD based parallelization of PDE solvers, one has to list ﬁrst of all the Sierra
Environment [6] developed by Sandia National Labs, supporting h-adaptivity
with polynomial order of approximation p = 2. The Sierra environment allows
for an arbitrary domain partitioning of a current mesh but it does not support
anisotropic mesh reﬁnements. General environments to support local mesh reﬁnements have been developed by [3], [7] and, more recently, [13]. None of them,
unfortunately, turned out to be applicable directly to our hp codes. The only
parallel hp codes that we are aware of, have been developed by [12], [9], [2] and
[1]. None of them are fully automatic hp adaptive codes. The parallel fully automatic hp adaptive 2D and 3D FE codes were ﬁnally implemented by the group
of Demkowicz [11, 10], based on the data structures described in [5].
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 751–758, 2006.
c Springer-Verlag Berlin Heidelberg 2006

752

M. Paszynski

The paper describes applications of agents to parallel mesh reﬁnements performed during iterations of automatic hp adaptive 2D and 3D FE codes. Agents
work on distributed data structure storing FE mesh where dynamic mesh reﬁnements are recorded by growing trees of initial mesh elements nodes. Agents
located on separated nodes communicate to enforce global mesh regularity rules
which must be fulﬁlled during reﬁnements on distributed mesh.

2

The Parallel Fully Automatic hp Adaptive Algorithm

Let us focus on the 3D Fichera model problem, presented in Figure 1, described
in [10]. The problem consists in solving the Laplace equation on the 3D cube with
1/8 smaller cube removed, see picture (a). The Neumann boundary conditions
based on the known exact solution is applied on the external boundary of the
cube, denoted by the red color. Zero Dirichlet boundary condition is applied on
the internal boundary, denoted by the blue color. There are strong singularities
in the middle point of the cube, as well as along edges of removed smaller cube.
Those singularities produce large numerical error of the solution. To reduce the
error, automatic hp adaptive strategy enforces optimal mesh reﬁnements in those
areas.
The parallel strategy starts from the coarse mesh, redistributed into processors, as it is presented in picture (b). In the example 7 processors were utilized.
The coarse mesh is then globally hp reﬁned. Each element from the coarse mesh
is broken into 8 sons in 3D, and the order of approximation is uniformly risen by
one, see picture (c). The problem is solved twice, on the coarse and on the ﬁne
mesh. For each ﬁnite element from the coarse mesh we consider various reﬁnement strategies, and evaluate error decrease rate based on comparison of coarse
and ﬁne grid solutions. Optimal reﬁnement is selected for each ﬁnite element
from the coarse mesh. The optimal mesh after the ﬁrst iteration is obtained by
performing optimal mesh reﬁnements on the coarse mesh by the parallel mesh
reﬁnements algorithm, see picture (d). The mesh must be globally consistent,
which requires involving of mesh reconciliation algorithms in the parallel mesh
reﬁnements algorithm. The computational load over the optimal mesh is not
well balanced, since the reﬁnements are not uniform. There is a need to balance
load, by removing some ﬁnite elements from some processors and sending them
to some neighboring processors. The ZOLTAN load balancing library [14] is utilized to obtain optimal load distribution. The optimal mesh redistributed onto 7
processors becomes the coarse mesh for the second iteration, see picture (e). The
mesh is again globally hp reﬁned, see picture (f). The problem is again solved
twice on the coarse and ﬁne mesh, and the optimal reﬁnements are selected for
the coarse mesh, based on relative error estimations over each ﬁnite element
from the coarse mesh. Finally optimal mesh reﬁnements are executed by parallel
mesh reﬁnements algorithms, see picture (g). The iterations are performed as
long as the estimated error is large. Optimal mesh obtained after 5 iterations
providing solution to the Fichera problem with 1 % relative error in energy norm
is presented in pictures (h) and (i).

The Application of Agents to Parallel Mesh Reﬁnements

3

753

Distributed Data Structure for Finite Element Mesh
Supporting hp Adaptivity

In the data structure for distributed storage of FE mesh [5] only initial mesh
elements are stored. When a ﬁnite element is broken into new son elements, reﬁnement trees grows from initial mesh elements nodes, and newly created nodes
and vertices are stored on these trees, see Figure 2. Each initial mesh element
in 3D consists in 8 vertices, 12 mid-edge nodes, 6 mid-face nodes and 1 middle
node. The element structure keeps pointers to all its vertices and nodes, pointers
to 6 neighbors (initial mesh elements), orientation and boundary condition data.
All of the vertices have polynomial order of approximation ﬁxed to one. A ﬁnite
element can be broken into 2, 4 or 8 new son elements. A face of an element is
broken only if all neighboring elements are broken, including elements located
on adjacent sub-domains. An edge of an element is broken only if all faces neighboring the edge are broken, including faces located on neighboring sub-domains.
An element interior can be always broken. Newly created ﬁnite elements are not
stored in the data structure.
To break an edge means to create 2 new mid-edge nodes and 1 new vertex
and attached them as sons of the original mid-edge node. The reﬁnement tree
grows down from the mid-edge node. A face can be broken into 2 or 4 faces.
To break a face into 2 new faces means to create 2 new mid-face nodes and 1
new mid-edge node. To break a face into 4 new faces means to create 4 new
mid-face nodes, 4 new mid-edge nodes and 1 new vertex node. A middle node
representing an element interior can be broken into 2, 4 or 8 sons. To break an
element interior into 2 sons means to create 2 new middle nodes and one new
mid-face node. To break an element interior into 4 sons means to create 4 new
middle nodes, 4 new mid-face nodes and one new mid-edge node. To break an
element into 8 sons means to create 8 new middle nodes, 12 new mid-face nodes,
6 new mid edge nodes and one new vertex node.
Each node keeps its polynomial order of approximation, type (mid-edge, midface or middle node), ﬁnite element degrees of freedom data, and the reﬁnement
tree data, involving: lists of sons, reﬁnement type of the node, and a pointer to
the father. Number and type of sons on the list depends on the node reﬁnement
type. Finite element method computations are performed on active elements.
Their nodes and vertices are found dynamically by browsing the reﬁnement
trees from the level initial mesh elements.

4

Agent Based Algorithm for Parallel Mesh Refinements

In the parallel mesh reﬁnement algorithm some ﬁnite elements are divided into
multiple (new) elements (each rectangular element is divided into 2 or 4 sons in
2D and 2, 4 or 8 sons in 3D), new nodes are created, and new orders of approximation are set. The parallel version of the algorithm requires an enforcement of
a global mesh regularity rules:

754

M. Paszynski

Fig. 1. Parallel fully automatic hp adaptive iterations

Fig. 2. Breaking an element into 2 sons, followed by breaking of one son element into
4 new son elements. The blue color denotes all reﬁnement trees created during the
ﬁrst reﬁnement, and the red color denotes reﬁnement trees created during the second
reﬁnement. We assume that all aﬀected element’s faces and edges can be broken.

The Application of Agents to Parallel Mesh Reﬁnements

755

– The 1-irregularity rule: Edges of a given element can be broken only once,
without breaking neighboring elements. It is necessary to check the conﬁguration of elements adjacent on neighboring sub-domains to the element
requested to be broken.
– When an interface edge is broken, then the polynomial order of newly created
nodes must be established. The selection of optimal order for a node is done
based on error estimations performed over the ﬁnite elements having that
node. But some of the elements neighboring the interface edge are present
in adjacent sub-domains. It is necessary to ask the neighboring sub-domains
for the error estimation over those elements.
– The minimum rules: Order of approximation of an element interior cannot
be larger then orders of approximation of the element faces, and order of
approximation of a face cannot be larger then orders of approximation of
faces adjacent to the edge. To enforce the minimum rule, we need to exchange orders of approximation for interface faces and edges with adjacent
sub-domains.
We will discuss now the applications of agents to particular problems appearing
during reﬁnements on distributed mesh. The agents work on distributed data
structure storing the mesh with reﬁnements coded as growing trees of initial
mesh elements nodes.
Enforcing 1-irregularity rule
The 1-irregularity rule requires breaking of neighboring elements if the current
element must be broken for the second time. There is a need to send a request
to adjacent sub-domains to break neighboring elements. The way of breaking
the neighboring elements depends on the conﬁguration of the current and the
neighboring elements.
The reﬁnement on current sub-domain is performed by an agent, that is responsible for enforcing mesh regularity rules. If the element was previously broken, the
agent responsible for managing breaking the element on current sub-domain packs
the information about the previous reﬁnement of the element. The current element could be previously broken in one of many possible ways: the element could
be broken into 2 sons in one of 3 possible directions, the element could be broken
into 4 sons in one of 3 possible directions, or the element could be broken into 8
sons. The reﬁnement trees have diﬀerent syntax in all those cases. The agent must
communicate with the agent located in other location, and request necessary reﬁnements on the neighboring elements. The agent must pack the reﬁnement tree
and send it to agents located in adjacent sub-domains. The reﬁnement trees are
then unpacked by the agents located on adjacent sub-domains, and the decision
about kind of necessary reﬁnements of the adjacent elements are made by the remote agents by comparing received and local reﬁnement trees.
Breaking of an element neighboring the interface
Breaking of an element involves the following steps: breaking the element interior,
breaking the element faces and breaking the element edges. The element interior
can be always broken. The element face can be broken only if interior of the

756

M. Paszynski

element neighboring current element possibly on adjacent sub-domain is broken,
or the element is adjacent to the boundary of the domain. The element edge
can be broken only if all faces adjacent to the edge are broken, including faces
located on current and adjacent sub-domains.
Breaking of an interface face
It is necessary to ask elements located on adjacent sub-domain if its interior
is broken. The agent responsible for breaking an interface face must send the
question to remote agent located on adjacent sub-domain. The remote agent
locates the initial mesh element containing the neighboring element on adjacent
sub-domain by using the connectivity information stored in the initial mesh
elements. The neighboring element is found by traveling down the reﬁnement
tree in the neighboring initial mesh element.
Breaking of an interface edge
It is necessary to locate all elements neighboring the edge located on adjacent
sub-domains, and check if faces of these elements adjacent to the edge are broken.
The agent responsible for breaking an interface edge must communicate with all
agents located in adjacent sub-domains and request a check of state of their faces.
The location of neighboring elements can be found by using the connectivity
information stored in the initial mesh elements.
Setting orders of approximation for nodes located on the interface
In the ﬁrst step of the fully automatic hp adaptive algorithm, optimal h reﬁnements are performed, by breaking appropriate middle nodes, mid-face nodes
and mid-edge nodes. In the next step of the algorithm, decisions about optimal
orders of approximation are made. In the ﬁrst version of the automatic hp adaptivity [4, 5, 11], decisions about optimal orders of approximations were made for
edges, faces and interiors. Those decisions were made based on error estimations
computed on current and neighboring elements. It was necessary to exchange
information about error estimations on neighboring elements located on adjacent sub-domains. In the new version of the algorithm [8, 10], decisions about
optimal order of approximation are made only for element interiors. The error
estimation for the element is computed by using only local information contained
in the element under consideration. The operation is fully parallel. The orders
of approximation for faces and edges are computed by enforcing minimum rule.
Enforcing the minimum rule for interface edges and faces
In its ﬁrst step, the minimum rule requires to adjust orders of approximation
of faces as a minimum of orders of approximation of interiors of neighboring
elements, possibly located on adjacent sub-domains. The agents exchange information about the orders of approximation of interiors of elements neighboring
the interface between adjacent sub-domains. Then, the orders of faces located on
the interface can be set by agents based on the obtained orders of approximations
of elements interiors from adjacent sub-domains. The neighboring elements can
be found by using connectivity information stored in the initial mesh elements.
In its second step, the minimum rule requires to adjust orders of approximation

The Application of Agents to Parallel Mesh Reﬁnements

757

Fig. 3. Measurements of times of execution of mesh reﬁnements versus communication

of mid-edge nodes as a minimum of orders of neighboring faces, possibly located
on adjacent sub-domains. The agents exchange information about the orders of
approximation of faces of elements neighboring the interface. Then, the orders of
edges located on the interface can be set by agents based on the obtained orders
of approximations of faces from adjacent sub-domains.
Performance test
In the parallel fully automatic hp adaptive codes [11], [10] there is a module
responsible for execution of mesh reﬁnements on the distributed data structure.
It is like copies of identical agents, assigned one to each sub-domain, working in
concurrent with the rest of the parallel code. Each agent executes on its subdomain all mesh reﬁnements that can be performed without communication with
adjacent agents, and collects data about reﬁnements on the interface that need
to be exchanged with adjacent agents. Then, all agents exchange data according
to coloring of edges of created communication graph. The algorithm is repeated
unless no exchange of data with neighboring sub-domains is needed (unless the
interface is not aﬀected). It follows that the communication takes less time than
execution of mesh reﬁnements, see Figure 3. The mesh reﬁnements execution
time can be reduced by increasing number of agents working in cuncurrent on
each sub-domain. Thus, the application of many concurrently working agents
may improve the scalability of the code.

5

Conclusions

The parallel mesh reﬁnements algorithm can be eﬃciently performed on the
distributed data structure where the reﬁnements are recorder by growing trees
of initial mesh elements nodes. The algorithm can be realized by a set of agents
working on the distributed data structure. There are two possible solutions. In
the ﬁrst approach each agent can be assigned to one sub-domain, and it can
share its work to perform its own tasks with tasks requested by neighboring
agents. This is the solution we use in our parallel codes. In the second solution,
each agent can remotely invoke agents in other locations to execute its tasks on
remote piece of the mesh. In such a case many agents can perform their tasks
in concurrent on each sub-domain. The second solution may be more eﬃcient,
however it requires to implement synchronization mechanisms to ensure that the
data structure won’t be damaged by many concurrently working agents.

758

M. Paszynski

Acknowledgement
The support of this work under MEiN grant no. 3 T08B 055 29 is gratefully
acknowledged.

References
1. Bana´s K.: A Model for Parallel Adaptive Finite Element Software, Proceedings of
15th International Conference on Domain Decomposition Methods, Freie Universitat Berlin, July 21-25 (2003)
2. Bastian P., Birken K., Johannsen K., Lang S., Neuss N., Rentz-Reichert H., and
Wieners C.: UG - a ﬂexible software toolbox for solving partial diﬀerential equations. Computing and Visualization in Science, 1, 1, (1997) 27-40
3. Das R., Hwang Y.-S., Uysal M., Saltz J., Sussman A.: Applying the
CHAOS/PARTI Library to Irregular Problems in Computational Chemistry and
Computational Aerodynamics. Proceedings of the Scalable Parallel Libraries Conference. Mississippi State University, Starkville, (1993) 45-46
4. Demkowicz L.: 2D hp-Adaptive Finite Element Package (2Dhp90) Version 2.0.
TICAM Report 02-06 (2002)
5. Demkowicz L., Pardo D., Rachowicz W.: 3D hp-Adaptive Finite Element Package
(3Dhp90) Version 2.0, The Ultimate (?) Data Structure for Three-Dimensionsl,
Anisotropic hp Reﬁnements, TICAM Report 02-24. (2002)
6. Edwards H. C.: Sierra Framework for Parallel Adaptive Multiphisics Computational Mechanics Applications. VIII US National Congress on Computational Mechanics, Austin, TX. (2005)
7. Fink S.J., Kohn S.R., Baden S.B.: Eﬃcient run-time support for irregular blockstructured applications. J. Parallel Distrib. Comput., 50, 1-2, (1998) 61-82
8. Kurtz J.: Fully Automatic hp-Adaptivity for Acoustic and Electromagnetic Scattering in Three Dimensions. Dissertation Proposal. The University of Texas at
Austin. (2005)
9. Laszloﬀy A., Long J., Patra A. K.: Simple data management, scheduling and solution strategies for managing the irregularities in parallel adaptive hp ﬁnite element
simulations. Parallel Computing, 26, (2000) 1765-1788
10. Paszy´
nski M., Demkowicz L.: Parallel Fully Automatic hp-Adaptive 3D Finite Element Package. ICES Report 05-33. VIIIth U.S. National Congress on Computational Mechanics, Austin, Texas. submitted to Engineering with Computers (2005)
11. Paszy´
nski M., Kurtz J., Demkowicz L.: Parallel Fully Automatic hp-Adaptive 2D
Finite Element Package. ICES Report 04-07. Computer Methods in Applied Mechanics and Engineering, 195, 7-8, (2006) 711-741
12. Remacle J. F., Xiangrong Li, Shephard M. S., Flaherty J. E.: Anisotropic Adaptive Simulations of Transient Flows using Discontinuous Galerkin Methods. Int. J.
Numer. Meth. Engng. 62, 7, (2005) 899-923
13. Yelick K. et al.: Titanium: A High-Performance Java Dialect. ACM 1998 Workshop
on Java for High-Performance Network Computing, Stanford, California, February
(1998)
14. ZOLTAN:
Data
Management
Services
for
Parallel
Applications,
http://www.cs.sandia.gov/zoltan

