Rendering of Unorganized Points with
Octagonal Splats
Sun-Jeong Kim and Chang-Geun Song
Hallym University,
Division of Information Engineering and Telecommunications,
Chuncheon-si, Gangwon-do 200-702 Korea

Abstract. Point sets from range scanners are noisy and do not contain
additional data such as normals, which makes it diﬃcult to create a mesh
for rendering. We use the moving least-squares (MLS) approximation to
get normals and diﬀerential information, and approximate the surface
near each point by an MLS surface. From this we obtain a splat of a new
octagonal shape which approximates the local curvature at a point and
allows fast and high-quality rendering. We show several results which
demonstrate the practicality and beneﬁts of our algorithm.

1

Introduction

Recent advances in scanning technology have led to a rapid increase in the availability and size of geometric data sets. Some consist of hundreds of millions of
points. Point data are usually considered by generating and simplifying a triangular mesh. However some of the meshes obtained from scan data are too large to
be displayed in real time, and the running-time and space requirements of mesh
reduction and progressive display algorithms are impractical at this scale.
Point-based rendering schemes have evolved as an alternative to the use of
intermediate triangle-based representations. Their major advantage is that point
sets do not require any connectivity information, and no topological consistency
conditions have to be satisﬁed. Moreover these schemes involve a hierarchical
data structure which allows the eﬃcient control of frame rates and visual quality.
Most point rendering algorithms handle points sampled from a large mesh,
which means that the normals of points can be easily obtained from the input
mesh. Grossman and Dally [4] converted geometric models into point-sampled
data sets and then rendered them. They addressed the issues of sampling rate and
gaps in the rendered images. The Surfel concept [8] follows from this work. This
technique uses an octree-based structure and forward warping. A signiﬁcant challenge for point rendering techniques is to reconstruct continuous surfaces from
irregularly spaced point samples. In order to eliminate any gaps in the displayed
objects, splat-based schemes are used. QSplat [9] replaces points by ellipses or
rectangles in image space and uses a hierarchy of bounding spheres. Sphere radii
and normal cones are saved to perform time-critical rendering. Surface splatting
[11] is an object-space technique and focuses on texture ﬁltering. Point rendering with Gaussian resampling kernels, also called EWA splatting, has provided
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 326–333, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Rendering of Unorganized Points with Octagonal Splats

327

the highest image quality so far, with antialiasing capabilities. This technique
has been applied to interactive shape design [12]. To reduce the computational
complexity of EWA splatting, Botsch et al. [3] proposed an approximation using
look-up tables. The above point rendering schemes store a limited amount of information derived from the point primitives, such as normals, bounding spheres,
and tangent plane disks. But Kalaiah and Varshney [5] store local diﬀerential
geometric information with every point. Their approach renders a surface as a
collection of local neighborhoods, consisting of a rectangle for each point, with
per-pixel shading. Although the rendering quality is very high but their scheme
cannot be applied to an irregular point set because they sample points uniformly
in the parametric domain of a NURBS surface. Wu and Kobbelt [10] presented
sub-sampling technique for dense point sets. They compute a minimal set of
splats that covers a point set within a given error tolerance. To reduce the splat
count, point simpliﬁcation [7] is applied.
Levin [6] has recently introduced a new point-based surface representation
called moving least-squares (MLS) surfaces. Based on this representation, Alexa
et al. [1] have proposed new modeling and rendering techniques, and Amenta
and Kil [2] have developed a new explicit deﬁnition of point-set surfaces and
variants of the MLS surface.
In this paper, we propose a new algorithm to render completely unorganized
points which have been obtained from a range scanning system. For each point,
the normal vector is computed by the eigen-analysis of the covariance matrix
and then with this normal an MLS surface is generated to approximate the
points in a small neighborhood around it. After approximation, we construct a
splat of an octagonal shape by extracting the positions and normals of vertices
of octagon from an MLS surface. At last the points are rendered using these
octagonal splats. Our contributions are the follows:
– We handle point sets straight from a range scanning system. Previous rendering algorithms make use of sampling order or other pre-existing information
such as normals and diﬀerential information. But our technique allows the
display of point sets that are genuinely unorganized.
– We render points with octagonal splats which allow for the curvatures at
a point. The two orthogonal axes and normals of each octagon correspond
to the estimated principal curvature directions and normals on an approximated smooth surface. And an octagon is faster to draw than a circle or
ellipse.

2

Normal Estimation

Normal vectors are estimated by analyzing the local neighborhood of each point.
Our computation is similar to [1]. Since there is no connectivity information in a
point set, the local neighborhood of each point is constructed by k-nearest neighbors. Let r be a point and {r0 , . . . , rk−1 } its k-nearest neighbors. The matrix of
weighted covariances be deﬁned by

328

S.-J. Kim and C.-G. Song
k−1

θi (ri − r)(ri − r)T ∈ R3×3 ,

C :=

(1)

i=0

with the weights θi = θ( ri − r ). θ is a non-negative weight function, usually a
Gaussian of the form:
d2

θ(d) = e− h2 ,
where h is a ﬁxed parameter reﬂected the anticipated spacing between neighboring points. Finding a global value of h is diﬃcult for non-uniformly distributed
point clouds. Similar to [7], for each point we choose diﬀerent h value as the
distance to the seventh closest neighbor point from it.
The eigenvector of C corresponding to the smallest eigenvalue gives an estimate for the normal direction. Since there is no consistent orientation over all
points, we correct the normal directions by propagation along a minimal spanning tree. We also use the other two eigenvectors for computing a splat shape
because they are approximately equal to the principal curvature directions κ1
and κ2 .

3

MLS Approximation

We begin with the brief review of the deﬁnition of MLS surfaces [6]. An MLS surface is implicitly deﬁned as points that project on to themselves under the MLS
projection. The procedure to approximate this surface involves two steps: the
approximation of a local reference plane and ﬁtting a local bivariate polynomial
to points projected on to the reference plane.
Let {ri }i∈I be points on a surface S in R3 (possibly subject to noise). Given a
point r, we ﬁrst ﬁnd a local reference plane H = {x| n, x − d = 0, x ∈ R3 }, n ∈
R3 , n = 1 in R3 , and a point q on H (i.e. n, q = d – see Figure 1) such that
the following quantity is minimized:
( n, ri − d)2 θ( ri − q ),

(2)

i∈I

where ·, · is the standard inner product in R3 , · is the Euclidean distance
in R3 .
Now we compute a local bivariate polynomial approximation of S over the
reference plane. Let {xi }i∈I be the orthogonal projections of the points {ri }i∈I
on to H, represented in a speciﬁc orthonormal coordinate system on H, and let
fi = n, ri − d, i ∈ I be the heights of the points {ri }i∈I over H. We will choose
the origin of the orthonormal coordinate system on H to be at q. We deﬁne a
local approximation to S of degree m as a bivariate polynomial p that minimizes
the weighted least-squares error:
(p(xi ) − fi )2 θ( ri − q ).
i∈I

(3)

Rendering of Unorganized Points with Octagonal Splats

329

Fig. 1. The MLS projection. Given a point r, a local reference plane H and a point
q on H are computed. An MLS surface is deﬁned implicitly by the MLS projection as
the set of points that project on to themselves.

(a)

(b)

Fig. 2. Splat shapes with (a) the wrong-estimated normals on the top of a point-set
by eigen-anlaysis and (b) the corrected normals by minimizing the MLS error

In this paper, we use a third-degree polynomial, because it produces a good ﬁt,
does not oscillate, and is quick to compute.
To obtain an MLS approximation surface, we should solve non-linear minimization problem. However, for simplifying this computation, we use an estimated normal as n and set t = 0 (i.e. q = r), since in our experiments an
estimated normal is reliable and the position of a reference plane is not important after the normal direction is ﬁxed. Even if an estimated normal is wrong,
it can be corrected by choosing the one to minimize the MLS error among three
eigenvectors (see Figure 2).

4

Octagonal Splat

After the MLS approximation, we construct an octagonal splat shape and its
normal vectors for each point. The two orthogonal axes and normals of each
octagonal splat correspond to the estimated principal curvature directions and
normals on an approximated MLS surface. The octagonal shape is faster to
render than the elliptical shape which many previous schemes constructed. For
hole-free rendering, the Voronoi diagram is used. Because an octagonal splat
covers the Voronoi cell which includes the point, there is no gap between splats.
On the reference plane H of a point r (Figure 3(a)), the Voronoi diagram of
orthogonal projected points is computed (Figure 3(b)). A bounding square is

330

S.-J. Kim and C.-G. Song

(a)

(b)

(c)

(d)

Fig. 3. Construction of an octagonal splat shape: (a) the orthogonal projections of neighbor vertices for each point r on to H, (b) the Voronoi diagram, (c) a bounding square which
is constructed covering the Voronoi cell, (d) four parameters ω1 , ω2 , ω3 , and ω4

constructed covering the Voronoi cell which includes the point r (Figure 3(c)),
and then an octagon is constructed covering this square (Figure 3(d)). Now
we decide the parameters ω1 , ω2 , ω3 , and ω4 by measuring the distance from
the point r to the octagon in the direction of principal axes κ1 , κ2 , −κ1 , and
−κ2 respectively. These parameters make an octagon whose width is ω1 + ω3
and whose height is ω2 + ω4 . The center of an octagonal splat is the point
O(0, 0) in the orthogonal coordinate system on H and its eight end-points
are xi = {(ω1 , −sω4 ), (ω1 , sω2 ), (sω1 , ω√
2 ), (−sω3 , ω2 ), (−ω3 , sω2 ), (−ω3 , −sω4 ),
(−sω3 , −ω4 ), (sω1 , −ω4 )}, where s = 2 − 1. Therefore the vertices vi of the
octagon for each point r in R3 are computed as follows:
vi = r + αi κ1 + βi κ2 + γi n,

(4)

where xi = (αi , βi ) and γi = p(xi ) − p(O).
The octagon is not planar, but distorted to correspond to the estimated curvature at the point. In the last step, we compute the normals of vertices of
the octagon. Because we have already an MLS polynomial function, in order to
obtain the normals we just diﬀerentiate the polynomial partially and then transform them into the global coordinate system. The normals ni of the vertices vi
in the local coordinate system is
ni =

5

−

p(xi )
,
∂κ1

−

p(xi )
,
∂κ2

1 .

(5)

Implementation and Results

All our tests were run on a PC with a Pentium IV 2.4 GHz processor and 2GB
of main memory. Figure 4 shows the pictures produced by our point rendering
algorithm. These ﬁgures show how our octagonal splat shape avoids gaps in the
rendered image.
We have compared our rendering results with those of QSplat [9] and Pointshop
3D [12] (Figure 5 and 6). QSplat uses ﬂat splats such as circles, ellipses, or

Rendering of Unorganized Points with Octagonal Splats

(a)

(b)

(c)

(d)

331

Fig. 4. Diﬀerential rendering of various point-sets: (a) the “Chinese Scimitar” (441,113
points) (b) the “Stanford Bunny” (34,834 points), (c) the “Teeth” (116,604 points),
(d) the “Rabbit” (67,039 points)

(a) Our method

(b) Qsplat

(c) Pointshop 3D

Fig. 5. Comparison of our technique with QSplat [9], and Pointshop 3D [12]: the “Igea”
model (134,345 points)

332

S.-J. Kim and C.-G. Song

(a) Our method

(b) Qsplat

(c) Pointshop 3D

Fig. 6. Close-up of Figure 5

rectangles, while ours is a curved octagon. Consequently, the visual quality of our
results is higher than these of QSplat. Pointshop 3D samples the image on a regular grid based on Surfels. Therefore, the sampling technique may lead to aliasing.
The close-ups in Figure 6 show that our rendering quality is higher than others.

6

Conclusion and Discussion

We have proposed a new scheme to render unorganized points. While previous
schemes render sampled-point data, ours can handle scanned data which have no
additional pre-existing information such as normals. To construct the splat shape
and obtain the diﬀerential information, we made use of the MLS approximation.
Also we built up octagonal splats for each point which reﬂected the curvature
at each point.
During MLS approximation, it is very diﬃcult to determine the nearestneighbors distance in an irregular point-set. We used adaptive MLS surfaces
that approximate the k nearest neighbors, but the best value of k remains undetermined. We believe that a preprocessing step to thin out over-dense data or ﬁll
holes would improve the robustness of our algorithm, and improve the quality
of the resulting image. Many point rendering algorithms construct a hierarchical
structure for real-time display. But the eﬃciency of this structure depends on
the size of the dataset: it may actually slow down the display of small datasets.
We need to pursue an eﬃcient compromise.

Acknowledgments
This research was supported by Hallym University Research Fund, 2005 (HRF2005 - 31) and the project for developing innovative local industries which was
conducted by Regional Innovation Division in the Ministry of Commerce Industry and Energy of the Korean Government.

Rendering of Unorganized Points with Octagonal Splats

333

References
1. Alexa, M., Behr, J., Fleishman, S., Cohen-Or, D., Levin, D., and Silva, C. T.
Computing and rendering point set surfaces. IEEE Transactions on Visualization
and Computer Graphics 9, 1 (2003), pp. 3–15.
2. Amenta, N. and Kil, Y. J. Deﬁning point-set surfaces. ACM Transactions on
Graphics 23, 3 (SIGGRAPH 2004), pp. 264–270.
3. Botsch, M., Wiratanaya, A., and Kobbelt, L. Eﬃcient high quality rendering of
point sampled geometry. Proceedings of 13th Eurographics Workshop on Rendering
(2002), pp. 53–64.
4. Grossman, J. P. and Dally, W. J. Point sample rendering. In Proceedings of the 9th
Eurographics Workshop on Rendering (1998), pp. 181–192.
5. Kalaiah, A. and Varshney, A. Diﬀerential point rendering. In Proceedings of the
12th Eurographics Workshop on Rendering (2001), pp. 139–150.
6. Levin, D. Mesh-independent surface interpolation. Geometric Modeling for Scientiﬁc Visualization (2004), Brunnett, G., Hamann, B., Muller, H., and Linsen, L.
(eds.), Springer-Verlag, pp. 37–50.
7. Pauly, M., Gross, M., Kobbelt, L. Eﬃcient simpliﬁcation of point-sampled surfaces.
In Proceedings of IEEE Visualization 2002 (2002), pp. 163–170.
8. Pﬁster, H., Zwicker, M., Baar, J. V., and Gross, M. Surfels: surface elements as
rendering primitives. In Proceedings of SIGGRAPH 2000 (2000), pp. 335–342.
9. Rusinkiewicz, S. and Levoy, M. QSplat: a multiresolution point rendering system
for large meshes. In Proceedings of SIGGRAPH 2000 (2000), pp. 343-352.
10. Wu, J. and Kobbelt, L. Optimized sub-sampling of point sets for surface splatting.
Computer Graphics Forum 23, 3 (Eurographics 2004), to appear.
11. Zwicker, M., Pﬁster, H., Baar, J. V., and Gross M. Surface splatting. In Proceedings
of SIGGRAPH 2001 (2001), pp. 371–378.
12. Zwicker, M., Pauly, M., Knoll, O., and Gross M. Pointshop 3D: An interactive
system for point-based surface editing. ACM Transactions on Graphics 21, 3 (SIGGRAPH 2002), pp. 322–329.

