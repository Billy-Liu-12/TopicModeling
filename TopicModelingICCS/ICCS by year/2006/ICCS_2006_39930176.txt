Modelling, Analyzing and Control of
Interactions Among Agents in MAS
ˇ
Frantiˇsek Capkoviˇ
c
Institute of Informatics, Slovak Academy of Sciences
D´
ubravsk´
a cesta 9, 845 07 Bratislava, Slovak Republic
Frantisek.Capkovic@savba.sk, utrrcapk@savba.sk
http://www.ui.sav.sk/home/capkovic/capkhome.htm

Abstract. An alternative approach to modelling and analysis of interactions among agents in multiagent systems (MAS) and their control
is presented in analytical terms. The reachability graph of the Petri net
(PN)-based model of MAS is found as well as the space of feasible states.
Trajectories representing the interaction processes among agents in MAS
are computed by means of the mutual intersection of both the straightlined reachability tree (from a given initial state towards the terminal
one) and the backtracking reachability tree (from the desired terminal state towards the initial one however, oriented towards the terminal
state). Control interferences are obtained on base of the most suitable
trajectory chosen from the set of feasible ones.

1

Introduction

MAS are used in intelligent control, especially for a cooperative problem-solving
[14]. To analyze complicated interactions among agents modelling of them is
often used. The negotiation belongs to the most important interactions. It is the
process of multilateral bargaining for mutual proﬁt. In other words [13], [1], the
negotiation is a decision process where two or more participants make individual
decisions and interact with each other in order to reach a compromise. In [9] PN
are used for e-negotiations activities. PN were chosen to model MAS too [12],
[11]. On the base of previous experience [3], [4], [7] with PN-based modelling and
control synthesis of the discrete event dynamic systems (DEDS) and the agent
cooperation [5], [6] a new approach to modelling, analysis and control of the
negotiation process is proposed here. The negotiation process is understood to be
DEDS. The approach consists of: 1. creating the PN-based mathematical model
of the negotiation process; 2. generating the space of feasible states which are
reachable from the given initial state; 3. utilizing the reachability graph (RG) in
order to ﬁnd the feasible state trajectories to a prescribed feasible terminal state.
After a thorough analyzing the set of possibilities, the most suitable strategy (the
control trajectory) can be chosen.
Partially supported by the Slovak Grant Agency for Science (VEGA) under grant
# 2/6102/26.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 176–183, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Modelling, Analyzing and Control of Interactions Among Agents in MAS

2

177

The PN-Based Mathematical Model of DEDS

The analytical model of DEDS has the form
xk+1 = xk + B.uk
B = GT − F

,

k = 0, ..., N

F.uk ≤ xk

(1)
(2)
(3)

where k is the discrete step of the dynamics development; xk = (σpk1 , ..., σpkn )T
is the n-dimensional state vector of DEDS in the step k; σpki ∈ {0, 1, ..., cpi },
i = 1, ..., n express the states of the DEDS elementary subprocesses or operations by 0 (passivity) or by 0 < σpi ≤ cpi (activity); cpi is the capacity of the
DEDS subprocess pi as to its activities; uk = (γtk1 , ..., γtkm )T is the m-dimensional
control vector of the system in the step k; its components γtkj ∈ {0, 1}, j =
1, ..., m represent occurring of the DEDS elementary discrete events (e.g. starting or ending the elementary subprocesses or their activities, failures, etc.) by
1 (presence of the corresponding discrete event) or by 0 (absence of the event);
B, F, G are structural matrices of constant elements; F = {fij }n×m , fij ∈
{0, Mfij }, i = 1, ..., n , j = 1, ..., m expresses the causal relations among the
states of the DEDS (in the role of causes) and the discrete events occuring during the DEDS operation (in the role of consequences) by 0 (nonexistence of
the corresponding relation) or by Mfij > 0 (existence and multiplicity of the
relation); G = {gij }m×n , gij ∈ {0, Mgij }, i = 1, ..., m, j = 1, ..., n expresses
very analogically the causal relations among the discrete events (causes) and the
DEDS states (consequences); the structural matrix B is given by means of the
arcs incidence matrices F and G according to (2); (.)T symbolizes the matrix
or vector transposition. PN marking was denoted here by the letter x usually
denoting the state in system theory. Fuzzy PN [10] can be modelled analogically
- see [2]. Higher-level PN models usually cannot be expressed in such a pure analytical form although they are advantageous as to the smaller dimensionality.
2.1

The PN-Based Model of the Negotiation Process Principle

The negotiation process itself consists of several principle activities [9]. Especially,
the following ones are most important: deﬁning the negotiation environment,
initial contact of agents, oﬀer(s) and counter oﬀer(s) among them, evaluation of
proposals, and outcomes of the negotiation process. The coordination plan of the
negotiation process can be formally described by DEDS modelled by PN as it can
be seen on the left in Fig. 1. The PN places represent the activities and the PN
transitions represent the discrete events. The interpretation of the places and transitions is the following: p1 = start; p2 = deﬁne negotiation environment; p3 = initial contact; p4 = oﬀer(s) and counter oﬀer(s); p5 = evaluation; p6 = outcomes;
p7 = end; t1 = starting negotiation process; t2 = negotiation plan(s); t3 = ”hand
shake”; t4 = proposal(s); t5 = revised proposal(s); t6 = agreement or quit; t7 =
ending negotiation process. However, the reality is more complicated. To illustrate
it in details, let us introduce the PN-based model of the agent in general as well
as that of more agents working in frame of MAS.

ˇ
F. Capkoviˇ
c

178

✬
p1

✲❢ ✲

t1

t2

❢✛
p7

p2

q ✲
❢

t7

p3

✲❢
❄

t3

❄
❢
p4
  ❅
✠
 
❘
❅
t4
t
❅
  5
t6 ❅
✠
❢✛ ✛❘ ❢ 

✛
p6

p5

❣p2
❣
p12
❆❅ t1
❣ t3
p
 
❘ ✠3
❆❅
✸
t6 ✑✑
❆
✡ 
❪
✒ ❏
✒ ❅
 
t5 ❏
✡   ❏   ❆❆❯ ❅
✢
✡
❪❣
✲
✛ ❣p4
❣
❣✛ ✛
t
p11
p10 ✟4 ✟
✙✟p1
t2
✁
✟ ✂✍
❄
✁
❣
✟✟
✂
✁
✟
✙
❣✟
❣
p5
p9
p8
✁☛✁
❣

✩

p6

❄t7

Agent
✫

❄
❣
p7

✪

Fig. 1. The PN-based model of the coordination plan of the negotiation process in
general (on the left) and the PN-based model of a general agent (on the right)

2.2

The PN-Based Model of Agents in MAS

The general structure of a general agent from the collaboration/negotiation point
of view is given on the right in Figure 1 representing the PN-based model of the
agent. To interpret the sense of the PN places and transitions, it is necessary
to introduce: p1 = the agent (A1 ) is free; p2 = a problem has to be solved by
A1 ; p3 = A1 is able to solve the problem (PA1 ); p4 = A1 is not able to solve
PA1 ; p5 = PA1 is solved; p6 = PA1 cannot be solved by A1 and another agent(s)
should be contacted; p7 = A1 asks another agent(s) to help him to solve PA1 ;
p8 = A1 is asked by another agent(s) to solve a problem PB ; p9 = A1 refuses
the help; p10 = A1 accepts the request of another agent(s) for help; p11 = A1 is
not able to solve PB ; p12 = A1 is able to solve PB . In such a case parameters of
the PN-based model are the following
⎛
⎞
⎛
⎞
1 1 1 0 0 0 0 0 0 0 0 0
0 0 0 0 1 0 0 0 0 0 0 0
⎜1 1 0 1 0 0 0 0 0 0 0 0⎟
⎜0 0 0 0 0 1 0 0 0 0 0 0⎟
⎜
⎟
⎜
⎟
⎜1 0 0 0 0 0 0 1 0 0 0 0⎟
⎜0 0 0 0 0 0 0 0 0 1 0 0⎟
⎜
⎟
⎜
⎟
⎟
⎜
⎟
FT = ⎜
⎜1 0 0 0 0 0 0 1 0 0 0 0⎟; G = ⎜0 0 0 0 0 0 0 0 1 0 0 0⎟
⎜0 0 0 0 0 0 0 0 0 1 0 0⎟
⎜0 0 0 0 0 0 0 0 0 0 1 0⎟
⎜
⎟
⎜
⎟
⎝0 0 0 0 0 0 0 0 0 1 0 0⎠
⎝0 0 0 0 0 0 0 0 0 0 0 1⎠
0 0 0 0 0 1 0 0 0 0 0 0
0 0 0 0 0 0 1 0 0 0 0 0
Analyse e.g. the situation when x0 = (1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0)T , i.e. the
situation when the agent A1 is free and it is asked by the agent A2 to solve the
problem PB = PA2 . Using the algorithm introduced in [4] we have the following
quasi-adjacency matrix A (its elements are the indices of the PN transitions) of
the PN reachability tree and the matrix Xreach with columns beeing the feasible
states (the initial state and all states reachable from this initial state)

Modelling, Analyzing and Control of Interactions Among Agents in MAS

⎛

0
⎜0
⎜
A=⎜
⎜0
⎝0
0

3
0
0
0
0

4
0
0
0
0

0
5
0
0
0

⎞
0
6⎟
⎟
0⎟
⎟;
0⎠
0

⎛

XTreach

1
⎜0
⎜
=⎜
⎜0
⎝0
0

0
0
0
0
0

0
0
0
0
0

0
0
0
0
0

0
0
0
0
0

0
0
0
0
0

0
0
0
0
0

1
0
0
0
0

0
0
1
0
0

0
1
0
0
0

0
0
0
1
0

179

⎞
0
0⎟
⎟
0⎟
⎟
0⎠
1

The reachability graph of such a PN-based model is given in Fig. 2. Such a
x0

❢

t3   ❅ t4

 

✠
x1 ❢ 
x3

❅
❘ ❢ x2
❅

t5   ❅ t6
 
❅
 
✠
❅❢
❘
❢
x4

Fig. 2. The reachability graph of the agent situation

PN-based model of the agent is universal and it can be used for modelling other
agents of MAS too. Namely, the same interpretation of places (however with
shifted numbering pi+12 , i = 1, ..., 12) can be used e.g for the agent A2 . Having
two agents A1 , A2 the collaboration/negotiation of them is given in Figure 3. In
case of more agents - e.g. NA - the places numbering of the agent k = 1, ..., NA
is pi+12.j , i = 1, ..., 12, j = k − 1 = 0, ..., NA − 1. In case of several agents both
the PN model and the RG will be more complex. While the model size depends
on modules and their interface, the RG size depends on x0 and on the structure
of model blocks.
As we can see we have n = 24 places and m = 20 transitions in the PN model
of the two agents cooperation. However, the number of transitions is higher than
a simple sum being m = 14. Namely, some transitions have to be added as an
interface in order to connect both of the agents. Consequently, for two agents
A1 , A2 the matrices of the MAS parameters will have the form as follows, where
the structure of the actual contact interface between the agents is given by the
(n × 6)-dimensional matrix Fc and (6 × n)-dimensional matrix Gc
⎞
⎛
G1 0
F1 0 Fc1
G1 ⎠
F=
; G = ⎝0
0 F2 Fc2
Gc1 Gc2
⎞
⎛
0 0 0 0 0 0 0 0 0 0 0 0| 0 0 0 0 0 0 1 0 0 0 0 0
⎜0 0 0 0 0 0 0 0 0 0 0 1| 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎟
⎜
⎜0 0 0 0 0 0 0 0 0 0 0 0| 0 0 0 0 0 0 0 0 0 0 0 1⎟
T
T
⎟
FTc = ⎜
⎜ 0 0 0 0 0 0 1 0 0 0 0 0 | 0 0 0 0 0 0 0 0 0 0 0 0 ⎟ = Fc1 | Fc2
⎟
⎜
⎝0 0 0 0 0 0 0 0 0 0 0 0| 0 0 0 0 0 0 0 0 0 1 0 0⎠
0 0 0 0 0 0 0 0 0 1 0 0| 0 0 0 0 0 0 0 0 0 0 0 0

180

ˇ
F. Capkoviˇ
c

✲
t20
✲
t16
t17

p2

p14

p24
❆❅ t1
❆❅ t8
✛
t3
t10
❅
❘  
❘  
✠p3
✠p15
❆
❆❅
✸
✸
t6 ✑
t13 ✑
✑ ✡
✑ ✡
I
❆
❆
❪
❪
 
✒ ❏
✒ ❏
 
✒ ❅
 
 
✒ ❅
n
t5 ❏
t12 ❏
✡   ❏   ❆❆❯ ❅
✡   ❏   ❆❆❯ ❅ p16
✢
✡
❪ ✡
❪ ✢
t
✛ ✛
✲
✛
✛
✛
✲
✛
t
t
p4
e p23
p10 ✟4 ✟
p22 ✟11✟
p13
✙✟p1
✙✟
t9
p11
✁t2
✁
r
✟ ✂✍
✟ ✂✍
❄✛
❄
 
✁
✁
✟
✟
 
✠
✛
f
✟
✟
✂
✂
a
✁
✁
✟
✟
✙
✟
✟
✙
✛
p
p
5
17
p8
c p21
❏❏
❆ ❪
p20
p9
✁☛✁
✁☛✁
✻
e
❆ ❏
p6
p18
❄t7
❄
❆ ❏ ✲
t14
❆ ❏ t18 ✛
 
❄
❄
t
19
❆
✛
p 
p
p12

t15

7

19

Fig. 3. The Petri net-based model of the two agents cooperation and/or negotiation
by means of the interface

⎛

0
⎜0
⎜
⎜0
Gc = ⎜
⎜0
⎜
⎝0
0

0
0
0
0
0
0

0
0
0
0
0
0

0
0
0
0
0
0

0
0
1
0
1
0

0
0
0
0
0
0

0
0
0
0
0
0

1
0
0
0
0
0

0
0
0
0
0
0

0
0
0
0
0
0

0
0
0
0
0
0

0|
0|
0|
0|
0|
0|

0
0
0
0
0
0

0
0
0
0
0
0

0
0
0
0
0
0

0
0
0
0
0
0

0
1
0
0
0
1

0
0
0
0
0
0

0
0
0
0
0
0

0
0
0
1
0
0

0
0
0
0
0
0

0
0
0
0
0
0

0
0
0
0
0
0

⎞
0
0⎟
⎟
0⎟
⎟ = Gc1 | Gc2
0⎟
⎟
0⎠
0

In general, for agents i = 1, 2, ..., NA the structure of matrices is the following
⎞
⎛
0
G1 0 . . . 0
⎛
⎞
⎟
⎜ 0 G2 . . . 0
0
| Fc1
F1 0 . . . 0
0
⎟
⎜
⎟
⎜ 0 F2 . . . 0
⎟
⎜
.
.
.
.
.
0
|
F
c2
. . ..
..
..
⎟
⎜
⎟
⎜ ..
⎟
⎜ .. .. . . ..
⎟
⎜
..
..
F = ⎜. .
;
G
=
⎟
⎟
⎜
..
.
|.
⎟
⎜
⎟
⎜ 0 0 . . . GNA −1 0
⎜
⎝ 0 0 . . . FNA −1 0
| FcNA −1 ⎠
GNA ⎟
⎟
⎜0 0 ... 0
⎠
⎝
0 0 ... 0
FNA | FcNA
Gc1 Gc2 . . . GcNA −1 GcNA
⎛

B1
⎜0
⎜
⎜.
B = ⎜ ..
⎜
⎝0
0

0
B2
..
.

... 0
... 0
. . ..
..

0
0
..
.

| Bc 1
| Bc 2
.
| ..

0 . . . BNA −1 0
| Bc N A
0 ... 0
BN A | Bc N A

⎞

⎟
⎟
⎟
⎟ = blockdiag(Bi )i=1,NA | Bc
⎟
⎠
−1

Bi = GTi − Fi ; Bci = GTci − Fci ; i = 1, 2 ..., NA ; Fc = (FTc1 , FTc2 , ..., FTcN )T
A

Gc = (Gc1 , Gc2 , ..., GcNA ); Bc =

(BTc1 ,

BTc2 ,

...,

BTcN )T
A

Modelling, Analyzing and Control of Interactions Among Agents in MAS

181

with Fi , Gi , Bi , i = 1, 2, ..., NA , representing the parameters of the PN-based
model of the agent Ai , and with Fc , Gc , Bc representing the structure of the
actual contact interface between the agents cooperating in MAS. Using the own
graphical tool (developed during last years by master students) for drawing the
model by means of icons the properties of the model can be tested. The reachability tree (RT) being the most important instrument on this way can be developed in the graphical form. Starting from the initial state x0 = (σp1 , ..., σpn )T =
(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0)T , i.e. from the state where
only six places have nonzero marking, namely σp1 = 1, σp2 = 1, σp3 = 1,
σp13 = 1, σp14 = 1, σp16 = 1, we can draw the reachability graph of the PNbased model of two agents cooperation given in Figure 4. It has N = 13 nodes
representing the feasible states {x0 , x1 , ..., x12 } of the system state space.
⎛

⎞
0190 0 0 0 0 0000 0
⎜0 0 0 9 0 0 0 0 0 0 0 0 0 ⎟
⎟
⎜
⎜ 0 0 0 1 14 0 0 0 0 0 0 0 0 ⎟
⎟
⎜
⎜ 0 0 0 0 0 14 0 0 0 0 0 0 0 ⎟
⎟
⎜
⎜ 0 0 0 0 0 1 15 0 0 0 0 0 0 ⎟
⎟
⎜
⎜ 0 0 0 0 0 0 0 15 0 0 0 0 0 ⎟
⎟
⎜
⎟
A=⎜
⎜ 0 0 0 0 0 0 0 1 3 4 0 0 0 ⎟ ; Xreach
⎜0 0 0 0 0 0 0 0 0 0 0 0 0 ⎟
⎟
⎜
⎜ 0 0 0 0 0 0 0 0 0 0 5 6 20 ⎟
⎟
⎜
⎜0 0 0 0 0 0 0 0 0 0 0 0 0 ⎟
⎟
⎜
⎜0 0 0 0 0 0 0 0 0 0 0 0 0 ⎟
⎟
⎜
⎝ 0 0 0 0 0 0 0 0 0 0 0 0 16 ⎠
0000 0 0 0 0 0000 0
⎛

⎞
1010101000000
⎜1 0 1 0 1 0 1 0 1 1 1 1 1⎟
⎜
⎟
⎜1 0 1 0 1 0 1 0 1 1 1 1 1⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 1 0 1 0 1 0 1 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 1 1 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 1 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 1 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 1 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 1 0⎟
⎜
⎟
⎟
=⎜
⎜
⎟
⎜1 1 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜1 1 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜1 1 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 1⎟
⎜
⎟
⎜0 0 1 1 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 1 1 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎜0 0 0 0 0 0 0 0 0 0 0 0 0⎟
⎜
⎟
⎝0 0 0 0 0 0 0 0 0 0 0 0 0⎠
0000000000000

The edges express feasible paths (trajectories) among the corresponding states.
Such an approach to analysing DEDS is very comfortable and user friendly.
However, from the ergonomy point of view, the observed area as well as the
number of variables which the human operator is able to recognize are limited.
Hence, more formal approaches are found for DEDS analysis and control. Thus,
large-scale mathematical models can be handled too (e.g. by means of Matlab).

182

ˇ
F. Capkoviˇ
c

t1  

 

❢x
t9

0

✠ ❢
 
x1 ❢
x2
t9 t1   t14
 

✠
 
❄
x3 ❢
t14 t1  

❄
❢
x4

x5
t15

t3 t4
x8
❄
❢
✲ ❢ x12
t20
❅
✻
t16
t

x7
x10

 
✠
❄
❢ 
t1  
 
✠
 
❄
❢
t5  
 
✠
 
❢

t15

x6
❄
❢
✲ ❢x9

6

❅
❘ ❢
❅
x11

Fig. 4. The reachability graph of the two agents cooperation

3

Analyzing the Model and the Control Synthesis

In [8] the Matlab procedure enumerating the (nRT × nRT )-dimensional quasifunctional adjacency matrix A of the RG and the space of the reachable states in
the form of the (n×nRT )-dimensional matrix Xreach was presented. The matrices
fully characterize the RG. The Xreach columns (the RG nodes) are the PN state
vectors x0 , x1 , x2 , ..., xnRT −1 reachable from the initial state x0 . The inputs of
the procedure are the matrices F, GT and the initial state vector x0 . The DEDS
control synthesis based on the simple idea was also presented in [8]: (i) developing
the straight-lined reachability tree (SLRT) from the given initial state x0 towards
the prescribed terminal state xt ; (ii) developing the backtracking reachability
tree (BTRT) from xt towards x0 however, directed to xt ; (iii) intersecting both
the SLRT and BTRT. All of the steps are performed numerically in Matlab. To
compute SLRT the graph-based model X(k + 1) = ATk .X(k), k = 0, 1, ..., N − 1
is used while for computing BTRT the model X(k−1) = Ak−1 .X(k), k = N, ...1,
with N ≤ nRT − 1, is used. Ak is the functional (k-variant) adjacency matrix,
X(k), k = 0, 1, ..., nRT − 1 are the hyperstate vectors - the unit vectors with
only one nonzero element equal to 1 on the position corresponding to the index
of the Xreach column. The hyperstate vector X(0) corresponding to x0 has 1
in its ﬁrst position while the hyperstate vector corresponding to the terminal
state xt appearing e.g. in the column j of Xreach will have 1 in the position j i.e. it will be the hyperstate vector X(j). After intersection of both SLRT and
BTRT the feasible trajectory (or several ones) starting from x0 and ﬁnishing
in xt is (are) obtained. Having the set of feasible trajectories, the most suitable
one (satisfying imposed control task speciﬁcations) can be chosen. More details
about the procedure can be found in [5], [8]. The graphical tool GraSim was
developed for DEDS modelling, analyzing and the control synthesis. The input
of the tool is the RG of the PN model. It is created by means of clicking (by the
mouse) on icons representing the RG nodes and edges as well as the marks for
designating the initial and terminal states. On its output the tool yields (in the

Modelling, Analyzing and Control of Interactions Among Agents in MAS

183

graphical form) the system trajectories from a given initial state to a prescribed
terminal one. The trajectories can be analyzed one after another.

4

Conclusions

The alternative PN-based approach to modelling, analysis and control of the
agent interactions in MAS was presented in this paper. It yields the results in
analytical terms as well as graphically. The PN-based model of the interaction
proces is created in analytical terms, the RG and the space of reachable states
are generated. Feasible state trajectories are found by means of the mutual intersection of both the SLRT and BTRT. The graphical tool GraSim was developed
to automate the control synthesis.

References
1. Brams, S.J., Kilgour, D.M.: Fallback bargaining. Group Decision and Negotiation
10 (2001) 287–316
ˇ
2. Capkoviˇ
c, F.: Modelling and Control of Discrete Event Dynamic Systems. BRICS
Report Series, RS-00-26, University of Aarhus, Denmark (2000) 58 p.
ˇ
3. Capkoviˇ
c, F.: Control synthesis of a class of DEDS. Kybernetes. The Int. Journ.
of Sys. and Cybern. 31 No 9/10 (2002) 1274–1281
ˇ
4. Capkoviˇ
c, F.: The generalised method for solving problems of DEDS control synthesis. Lecture Notes in Artificial Intelligence 2718 (2003) 702–711
ˇ
5. Capkoviˇ
c, F.: An application of the DEDS control synthesis method. Lecture Notes
in Computer Science 3038 Part III (2004a) 528–536
ˇ
6. Capkoviˇ
c, F.: DEDS control synthesis problem solving. In: Proc. 2nd IEEE Conf.
on Intelligent Systems, Varna, Bulgaria. IEEE Press (2004b) 299–304
ˇ
ˇ
7. Capkoviˇ
c, F., Capkoviˇ
c, P.: Petri net-based automated control synthesis for a class
of DEDS. In: Proc. 2003 IEEE Conf. on Emerging Technologies and Factory Automation. Lisbon, Portugal. IEEE Press (2003) 297–304
ˇ
8. Capkoviˇ
c, F.: An application of the DEDS control synthesis method. Journal of
Universal Computer Science 11 No 2 (2005) 303–326
9. Hung, P.C.K., Mao, J.Y.: Modeling e-negotiation activities with Petri nets. In:
Proc. 35th Hawaii Int. Conf. on System Sciences. Big Island, Hawaii, Vol. 1. IEEE
Computer Society Press (CD/ROM) (2002) 10 p.
10. Looney, C.G.: Fuzzy Petri nets for rule-based decision-making. IEEE Trans. Syst.
Man Cybern. 18 No 1 (1988) 178–183
11. Nowostawski, M., Purvis, M., Cranefield, S.: A layered approach for modelling
agent conversations. In: Proc. 2nd Int. Workshop on Infrastructure for Agents,
MAS, and Scalable MAS, Montreal, Canada (2001) 163–170.
12. Purvis, M., Cranefield, S., Nowostawski, M., Ward, R., Carter, D., Oliveira, M.A.:
Agentcities interaction using the opal platform. In: Proc. Workshop on Agentcities: Research in Large-Scale Open Agents Environments, 1st Int. Joint Conf. on
Autonomous Agents and Multi-Agent. Bologna, Italy. CD/ROM. (2002) 5 p.
13. Thompson, L.: The Mind and Heart of the Negotiator. Prentice-Hall Inc. (1998)
14. Yen, J., Yin, J., Ioerger, T.R., Miller, M.S., Xu, E., Volz, R.A.: Cast: Collaborative agents for simulating teamwork. In: Proc. 17th Int. Joint Conf. on Artificial
Intelligence - IJCAI’2001, Seatle, USA (2001) 1135–1142.

