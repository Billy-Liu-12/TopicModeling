Cellular Automata Preimages: Count and List
Algorithm
Iztok Jeras1 and Andrej Dobnikar2
1

2

iztok.jeras@rattus.info
http://www.rattus.info/al/al.html
University of Ljubljana, Faculty of Computer and Information Science,
Trzaska cesta 25, SI-1001 Ljubljana, Slovenia
andrej.dobnikar@fri.uni-lj.si

Abstract. Preimages of cellular automata are observed. Their number
is computed using simple matrix operations. Three algorithms for making
a list of preimages are graphically presented using the de Bruijn diagram
and its concatenated form: the preimage network.

1

Introduction

Counting of preimages of one-dimensional cellular automata (CA) has been studied by Jen [1] in around 1989, Woorhees [2] in 1993, and McIntosh [7, 8] in 1993.
This paper is build on slightly modiﬁed methods deﬁned by McIntosh.
The de Bruijn diagram describes the overlapping of strings. It is the main tool
for observing CA preimages, but it can graphically represent only preimages of
a single cell. In this paper the de Bruijn diagram is ﬁrstly redrawn into the
preimage diagram, which is then concatenated into the preimage network. This
network graphically represents preimages of whole conﬁguration strings.
The listing of preimages is less studied than their counting. In 1992 Wuensche
[3, 4, 5] informally described the ﬁrst algorithm; in this paper it is called the Trace
and Backtrack (TB) algorithm. In 2004 Mora, Ju´
arez and McIntosh [6] described
a diﬀerent algorithm that uses the subset diagram (SD) of the de Bruijn diagram.
This paper introduces a third method; the Count and List (CL) algorithm. All
algorithms are described graphically using the preimage network.
This paper provides only a few speciﬁc examples. Documentation and software
for a more general and detailed approach can be found in [9].

2

Formal CA Deﬁnition

All examples in this paper are based on the rule 110 elementary (2,1) CA (Wolfram notation for closest neighbor boolean CA), so the formal deﬁnition focuses
on this special case. Only ﬁnite CA are observed, since inﬁnite CA may have an
inﬁnite number of preimages.
One-dimensional CA are arrays of cells. The value of each cell cx at position x is either 0 or 1. The state of an array of cells is represented by a string
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 345–352, 2006.
c Springer-Verlag Berlin Heidelberg 2006

346

I. Jeras and A. Dobnikar

α = . . . cx−1 cx cx+1 . . .. The string of states of all cells of a ﬁnite CA of length N
is a conﬁguration C = c0 c1 . . . cN −1 . The state of the CA at time t is represented
by the conﬁguration C t . In all examples in this paper the so called ether conﬁguration α = 000100110111112 is used (the most common background pattern in
rule 110). The subscribed number 2 is used to denote binary strings.
The neighborhood nx = cx−1 cx cx+1 of the observed cell is composed of the
observed cell and its two closest neighbors (Fig. 1). Neighborhoods of any pair of
adjacent cells cx−1 cx overlap for the length of 2 cells. The overlap ox = cx−1 cx
uses the position index x from the right cell in the adjacent pair (Fig. 1). Another
way to think about overlaps is to observe a cell cx ; then the left overlap is
ox = cx−1 cx and the right overlap is ox+1 = cx cx+1 . Both the left and the right
overlap are parts of the neighborhood nx = ox cx+1 = cx−1 ox+1 . Overlaps are
used to represent the boundaries between adjacent segments in cell strings.
At each CA evolution step all cells from the current conﬁguration C t
synchronously evolve into the future conﬁguration C t+1 . The evolution of every
single cell cx into its future value ct+1
is deﬁned as the output of the local transix
tion function (f), that takes as input the present neighborhood ntx of the observed
cell at position x. The local transition function is commonly called the rule.
= f(ntx ) = f(ctx−1 ctx ctx+1 )
ct+1
x
The evolution step of the whole CA is deﬁned as the global transition function
C t+1 = F(C t ). It is the application of the local transition function to all cells in
the conﬁguration simultaneously (Fig. 2).
F(c0 c1 . . . cN −1 ) = f(n0 )f(n1 ) . . . f(nN −1 )
For rule 110 (011011102) the local transition function is deﬁned by the next table.
1112

1102

1012

1002

0112

0102

0012

0002

0

1

1

0

1

1

1

0

A cyclic conﬁguration is created by joining the left and the right boundary of
a ﬁnite conﬁguration length N . The position index x = x mod N becomes a
cyclic group of length N . The cyclic boundary condition is commonly used since
it avoids the explicit deﬁnition of the boundary.
A bounded conﬁguration is created by cutting a ﬁnite conﬁguration length N
from an inﬁnite CA. At the left and the right boundary neighborhoods overstep

Fig. 1. Neighborhood and overlaps of the observed cell

Cellular Automata Preimages: Count and List Algorithm

347

Fig. 2. Conﬁguration boundaries

the conﬁguration by one cell (Fig. 2). To calculate a future conﬁguration C t+1
this overstepping cells at both boundaries must be deﬁned. The same problem
occurs when calculating preimages, so the preimage C t−1 is 2 cells longer than
the present conﬁguration C t . Boundaries are deﬁned by overlaps o0 = oL for the
left boundary and oN = oR for the right boundary.

3

Observing the Past

The preimages of a single cell ctx are locally valid neighborhoods nt−1
that are
x
mapped into the observed cell value by the local transition function (Fig. 1).
The inverse of the local transition function is deﬁned as:
t
f −1 (ctx ) = {nt−1
∈ {0, 1}3 | f(nt−1
x
x ) = cx } .

Preimages C t−1 of the present conﬁguration C t are past conﬁgurations that are
mapped into the present conﬁguration by the global transition function (Fig. 2).
The inverse of the global transition function is:
F−1 (C t ) = {C t−1 ∈ {0, 1}N | F(C t−1 ) = C t }

, for cyclic conﬁgurations, and

F−1 (C t ) = {C t−1 ∈ {0, 1}N +2 | F(C t−1 ) = C t } , for bounded conﬁgurations.
Local preimages must overlap correctly to form global preimages. The de
Bruijn diagram and the preimage network are graphical representations of overlapping neighborhoods. The ﬁrst represents preimages of single cells the second
preimages of cell strings.
3.1

The de Bruijn Diagram

The de Bruijn diagram represents preimages of a single present cell ct , which are
past neighborhoods nt−1 (Fig. 3). It is composed of 4 nodes, one for each of the
distinct overlaps, and 8 directed links, one for each of the distinct neighborhoods.
Nodes are drawn twice and arranged into two identical columns (from overlap
002 at the top to overlap 112 at the bottom). The two columns can be seen
as overlaps (boundaries) at the left and right side of an observed cell (Fig. 1).
Directed links connect source nodes ot−1
(left overlaps) to drain nodes ot−1
(right
s
d
t−1 t−1
cd = ct−1
ot−1
that can
overlaps). Links represent neighborhoods nt−1
s
sd = os
d
be decomposed into the source or the drain overlap. Links are labeled with the
pair nt−1 /ct , where ct = f(nt−1 ) is deﬁned by the local transition function.

348

I. Jeras and A. Dobnikar

Fig. 3. The de Bruijn diagram (left) and two derived preimage diagrams (right)

The de Bruijn diagram is decomposed into two preimage diagrams, one for
each of the available cell values. Only locally valid neighborhoods (those that are
mapped into the observed cell by the local transition function ct = f(nt−1 )) are
allowed to appear in the preimage diagram. All invalid links are removed.
Example: The neighborhood nt−1 = 1012 (link) is decomposed into the left overlap 102 (source node) and right overlap 012 (drain node). Since the neighborhood
is translated into ct = 0 its link is labeled 1012 /0. After the decomposition into
preimage diagrams this link becomes part of the diagram for c = 0.
The topological matrix of preimage diagrams is used for counting preimages.
Deﬁnition 1. The single cell preimage matrix D (c) represents preimages of an
observed single present cell with value c. It is a square of 4 × 4 elements, one for
each source-drain overlap pair (os , od ). The matrix element dos ,od is 1 if ﬁrst: a
past neighborhood n = os cd = cs od exists that can be constructed as a link from
the source overlap os to the drain overlap od ; and second: n is a locally valid
neighborhood f(n) = c. Else the matrix element is 0.
⎡

⎤
1000
⎢0 0 0 0⎥
⎥
D (0) = ⎢
⎣1 0 0 0⎦
0001

⎡
⎤
0100
⎢0 0 1 1⎥
⎥
D (1) = ⎢
⎣0 1 0 0⎦
0010

The deﬁnition of the single cell preimage matrix is a special case of the deﬁnition
of the cell string preimage matrix, where |α| = 1.
3.2

Preimage Network

Present cells are aligned into a string α = c0 c1 . . . cN −1 (Fig. 4 bottom). The
preimage network of α (Fig. 4 top) is constructed by aligning preimage diagrams
for each of the cells in the string side by side in the same order as in the string.
Touching node pairs at the same height from two adjacent diagrams are merged
into single nodes combining the diagrams into a network. Nodes at the extreme
left and extreme right represent the boundaries of the preimage network.
Distinct preimages have distinct representations as paths in the network. Each
preimage C t−1 of a present conﬁguration C t is a globally valid path that must
begin at the left boundary, pass a single link for each present cell, and end at

Cellular Automata Preimages: Count and List Algorithm

349

Fig. 4. Preimage network for the bounded ether conf. (globally valid paths are bold)

the right boundary. For cyclic conﬁgurations the boundaries are connected, so
paths must begin and end at the same overlap oL = oR . A preimage matrix can
be deﬁned to describe the preimage network.
Deﬁnition 2. D (α) is the cell string preimage matrix of the observed present
string α of length |α| = N ≥ 0. Elements doL ,oR in the preimage matrix represent
the number of preimages (distinct paths in the network) that begin at an overlap
oL at the left and end at an overlap oR at the right boundary (Fig. 2 and 4).
The matrix of an empty string α = ε, |α| = 0, is an identity matrix D (ε) = I.
Theorem 1. The cell string preimage matrix D (α) of the string α = c0 c1 . . . cN −1
is the product of the chain of single cell preimage matrices D (cx ).
N −1

D (c1 ) · · · D (cN −1 )
D (cx ) = D (c0 )D

D (α) =
x=0

The theorem’s proof is a simple induction on the length of the string. The following preimage matrix describes the ether conﬁguration string.
⎡
⎤
0000
⎢0 0 0 0⎥
⎥
D (α = 000100110111112) = ⎢
⎣0 0 0 0⎦ .
0232

4

Counting Preimages

The number of preimages for bounded conﬁgurations pL↔R is computed by applying boundary vectors b L and b R (unrestricted boundaries in the example) to
the preimage matrix of the observed string D (α).
pL↔R (α = 000100110111112) = b L D (α) b T
R = 1 1 1 1 D(α) 1 1 1 1

T

=7

The number of preimages for cyclic conﬁgurations p is the sum of diagonal
elements in D (α). This are preimages that begin and end with the same overlap.
p (α = 000100110111112) = 2

350

5

I. Jeras and A. Dobnikar

Listing Preimages

5.1

Trace and Backtrack Algorithm

The TB algorithm traces the preimage network in the same way as the wall
follower algorithm [10] for solving mazes (Fig. 5). The algorithm starts tracing at left boundary nodes (start-points). At each fork the leftmost (uppermost) path is taken ﬁrst. If the algorithm reaches a dead-end, it backtracks
the traced path to the last fork. Each time the right boundary is reached, the
traced path is written into the preimage stack. When all the start-points are exhausted, the algorithm ends, and the stack contains the list of all globally valid
preimages.

Fig. 5. Tracing and backtracking path on the network of the bounded ether conf.

5.2

Subset Diagram Algorithm

The idea is to trace only paths that do not lead to dead-ends, this are exactly
the paths that can be reached from the right boundary (Fig. 6). The network
is analyzed (searched for traceable paths) from the right and then traced from
the left. Network analysis methods are the same as in the CL algorithm (described next), with the diﬀerence, that boolean multiplication (AND operator)
is used.
Globally valid paths connect both boundaries (Fig. 4), they are composed of
links that can be reached from both the left and the right boundary (links bold
on both Fig. 5 and Fig. 6).

Fig. 6. Paths reachable from the right boundary

Cellular Automata Preimages: Count and List Algorithm

5.3

351

Count and List Algorithm

A further modiﬁcation to the algorithm is to count paths that can be traced from
the right boundary instead of only checking if there are any. Path counters (Table
1) are computed iteratively for all position indexes, starting from counters at the
right boundary. For bounded conﬁgurations counters are vectors b x , starting with
the right boundary vector b R (unrestricted boundary in the example). For cyclic
conﬁgurations counters must be matrices D x , starting with an identity matrix.
Bounded conﬁgurations:
b N = b R = [1, 1, 1, 1]
b x = D (cx . . . cN −1 ) b R = D (cx ) b x+1

Cyclic conﬁgurations:
DN = I
D x = D (cx . . . cN −1 ) = D (cx ) D x+1

b0 = D (α) b R

D 0 = D (α)

Table 1. Counter vectors for the bounded ether conﬁguration
o
00
01
10
11
α
x

0
0
0
7
0
0

0
0
0
7
0
1

0
0
0
7
0
2

0
7
0
7
1
3

7
0
7
0
0
4

7
0
7
0
0
5

counter vectors
7
0
4
4
7
0
7
0
4
0
4
3
1
1
0
6
7
8

bx
4
5
4
3
1
9

3
4
3
2
1
10

2
3
2
2
1
11

2
2
2
1
1
12

1
2
1
1
1
13

1
1
1
1
14

Fig. 7. CL algorithm on the preimage network of the bounded ether conf.

Fig. 8. The list of preimages of the bounded ether conf. as produced by the CL alg.

352

I. Jeras and A. Dobnikar

The computed counters can be presented on the preimage network as link
widths (Fig. 7). Logarithmic widths can be used if counters become large.
In the CL algorithm all preimages can be listed quasi simultaneously. The
preimage path starts at the left boundary as a wide root, it forks into thiner
branches (Fig. 8) and ends as single preimage leaves at the right boundary.

6

Conclusion

The purpose of the research described in the paper was to ﬁnd a quantitative and
qualitative measurement for information looses in irreversible CA. The research
is not ﬁnished yet, but the logarithm of the number of preimages could be used as
a quantitative measurement, and the preimage network could be used to observe
how are looses spread in space. The source code for the TB an CL algorithms
can be found at http://www.rattus.info/al/al.html.

References
1. Jen, E.: Enumeration of Preimages in Cellular Automata. Complex Systems 3
(1989) 421-456
2. Voorhees, B.: Predecessors of cellular automata states II. Pre-images of ﬁnite sequences. Physica D 73 (1993) 136-151
3. Wuensche, A., Lesser, M.: The Global Dynamics of Cellular Automata. AddisonWesley (1992)
http://www.cogs.susx.ac.uk/users/andywu/gdca.html
4. Wuensche, A.: Attractor Basins of Discrete Networks. Cognitive Science Research
Paper 461. Univ. of Sussex. D.Phil thesis (1997)
ftp://ftp.cogs.susx.ac.uk/pub/users/andywu/papers/aw thesis.pdf
5. Wuensche, A.: Classifying Cellular Automata Automatically: Finding gliders, ﬁltering, and relating space-time patterns, ... COMPLEXITY 4 (1999) 47-66
ftp://ftp.cogs.susx.ac.uk/pub/users/andywu/papers/cplex.pdf
6. Mora, J. C. S. T., Ju´
arez, G., McIntosh, H. V.: Calculating ancestors in onedimensional cellular automata. International Journal of Modern Physics C 15
(2004) 1151-1169
7. McIntosh, H. V.: Linear Cellular Automata Via de Bruijn Diagrams (1994)
http://delta.cs.cinvestav.mx/∼ mcintosh/newweb/marcodebruijn.html
8. McIntosh, H. V.: Ancestors: Commentaries on The Global Dynamics of Cellular
Automata by Andrew Wuensche and Mike Lesser (1993)
http://delta.cs.cinvestav.mx/∼ mcintosh/oldweb/wandl/wandl.html
9. Jeras, I., Dobnikar, A.: Algorithms for Computing Preimages of Cellular Automata
Conﬁgurations. Submited for publication to Physica D (2005)
http://www.rattus.info/al/al.html
10. Pullen W. D.: Maze Algorithms.
www.astrolog.org/labyrnth/algrithm.htm

