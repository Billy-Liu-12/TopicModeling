Statistical Based Vectorization for Standard
Vector Graphics
Sebastiano Battiato, Giovanni Maria Farinella, and Giovanni Puglisi
Dipartimento di Matematica e Informatica, University of Catania, Italy
Image Processing Laboratory
{battiato, gfarinella, puglisi}@dmi.unict.it
http://www.dmi.unict.it/∼iplab

Abstract. In this paper a novel algorithm for raster to vector conversion is presented. The technique is mainly devoted to vectorize digital
picture maintaining an high degree of photorealistic appearance specifically addressed to the human visual system. The algorithm makes use
of an advanced segmentation strategy based on statistical region analysis together with a few ad-hoc heuristics devoted to track boundaries
of segmented regions. The ﬁnal output is rendered by Standard Vector
Graphics. Experimental results conﬁrm the eﬀectiveness of the proposed
approach both in terms of perceived and measured quality. Moreover, the
ﬁnal overall size of the vectorized images outperforms existing methods.

1

Introduction

The vectorial format is useful for describing complex graphical scenes using a
collection of graphic vectorial primitives, oﬀering the typical advantages of vectorial world: scalability, resolution independence, etc. In this paper we propose
a novel technique to cover the gap between the graphical vectorial world and
the raster real world typical of digital photography. Standard Vector Graphics (SVG) is a standard language for describing two-dimensional graphics in
XML ([1]). This format could be very useful in the world of mobile imaging
device where the typical capability of a camera needs to match with limited
colour/dimension resolutions display. Another potential application is presented
in [2] where an ad-hoc method for icon vectorization is applied emphasizing the
good performances in terms of resolution scalability.
Recently, some commercial and free software have been developed using some
solution to the ”raster to SVG” problem (Vector Eye [3], Autotrace [4], Kvec
[5]). Almost all of them are devoted to SVG rendering of graphic images (e.g.
clip art, etc.) showing in such case good performances but also several perceptual
drawbacks when applied to digital pictures.
Considering photorealistic vectorization, a few advanced approaches are described in SWaterG [6], SVGenie and SVGWave [7], where ad-hoc segmentation
strategies, making use respectively of watershed decomposition and adaptive
triangulation, allow to obtain good performances both in terms of perceptual
accuracy and overall compression size. An useful review is presented in [8]. We
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 334–341, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Statistical Based Vectorization for Standard Vector Graphics

335

also mention the work presented in [9] where a region-contour segmentation
scheme that takes into account contours resulting from colour gradients in an
image, as well as their interrelationships in terms of bounding a common region,
is described. One of the main drawback of almost all cited approaches is the
parameters tuning with respect to the ﬁnal application. The correct trade-oﬀ
between ﬁnal perceived quality, scalability and the corresponding ﬁle size is a
very challenging task, mainly for user that doesn’t know the algorithmic details
of each solution. Our proposed technique is based on a single input parameter,
that ﬁxes the degree of ”coarseness” to be used in the segmentation step. An efﬁcient algorithm has been used for the preliminary analysis of input raster data:
Statistical Region Merging (SRM) [10]. Such segmentation algorithm is able to
capture the main structural components of a digital image using a simple but
eﬀective statistical analysis.
Our technique consists of two main steps: the image is partitioned in polygonal
regions using SRM; the borders of segmented regions are properly tracked and
described by SVG primitives making also use of some smart tips.
The ﬁnal results show how the proposed strategy outperforms state-of-art
techniques in terms of visual perception, measured image quality and compression size. The overall performances are described in terms of Rate-Distortion
plots, by varying the unique involved quality parameter.
The rest of the paper is organized as follows. In Section 2 we brieﬂy review the
main details of SRM. The successive Section describes how boundary representation is computed while Section 4 reports the generation of SVG representation
by using suitable mapping strategies. In Section 5 several experimental results
together with some comparisons with other techniques are reported. A ﬁnal Section closes the paper tracking also direction for future works.

2

Statistical Region Merging

Segmentation is the process of partitioning an image into disjoint and homogeneous regions. A more formal deﬁnition can be given in the following way [11]:
let I denote an image and let H deﬁne a certain homogeneity predicate; the
segmentation of I is a partition P of I into a set of N regions R1 ,R2 ,...,RN ,
N
such that: n=1 Rn = I with Rn ∩ Rm = ∅, n = m; H(Rn ) = true ∀n;
H(Rn ∪ Rm ) = f alse ∀Rn and Rm adjacent.
Recently, thanks to the increasing speed and decreasing cost of computation,
many advanced techniques have been developed for segmentation of colour images. In particular we used the Statistical Region Merging [10] algorithm that
belongs to the family of region growing techniques with statistical test for region
fusion. SRM is based on the follow model of image: I is an image with |I | pixels
each containing three values (R, G, B) belonging to the set {1, 2, ..., g}. The
model considers image I as an observation of perfect unknown scene I* in which
pixels are represented by a family of distributions from which each colour level
is sampled. In particular, every colour level of each pixel of I* is described by a
set of Q independent random variables with values in [0, g/Q]. In I* the optimal

336

S. Battiato, G.M. Farinella, and G. Puglisi

regions satisfy the following homogeneity properties: inside any statistical region
and for any colour channel, statistical pixels have the same expectation value for
this colour channel; the expectation value of adjacent regions is diﬀerent for at
least one colour channel. From this model a suitable merging predicate is applied
as described in [10].
The order in which the tests of merging were done follows a simple invariant
A: when any test between two true regions occurs, that means that all tests
inside each region have previously occurred.
In the experiments, A is approximated by a simple algorithm based on gradient of nearby pixels. In particular Nielsen and Nock consider a function f deﬁned
as follow:
(1)
f (p, p ) = max fa (p, p ) .
a∈R,G,B

A simple choice for fa is:
fa (p, p ) = |pa − pa | .

(2)

More complex function that extends classical edge detection convolution kernels
could be used to deﬁne fa . In our case we used the Sobel gradient mask.
The pseudo-code of algorithm is the following:
INPUT: an image I
Let SI the set of the 4-connexity couples of adjacent pixels in image I
SI =orderIncreasing(SI , f );
for i = 1 to |SI | do
if((R(pi ) = R(pi )) and P (R(pi ), R(pi )) == true) then
merge(R(pi ), R(pi ));

The set of the pairs of adjacent pixel (SI ) is sorted according to the value of
(1). Afterwards the algorithm takes every couple of pixels (p, p ) of SI and if the
regions to which they belong (R(p) and R(p )) were not the same and satisfactory
the merging predicate, it merges the two regions. SRM algorithm gives, for each
segmented region, the list of pixel belonging to it and the related mean colour.
We use this output as starting point to create a vectorial representation of image.

3

Contouring

To obtain a vectorial representation we have to ﬁnd the border of segmented
regions. This could be done more easily if we consider the pixels belonging to
several groups (Fig. 1(a)). First of all pixels are divided in:
– internal pixels: pixels with all neighbours (in a 4-connexity scheme) belonging to the same region;
– border pixels: remaining pixels.
Due to the overall complexity of border regions a further setting into two groups
is required:
– close pixels: pixels with at least an internal pixel as neighbour (in a 8connexity scheme);
– open pixels: remaining pixels.

Statistical Based Vectorization for Standard Vector Graphics

337

After having assigned each pixel to the corresponding category we describe
regions in vectorial form. In particular there are two types of curves: close curves
and open curves. In both cases we could approximate their boundaries through
segments with eight possible directions (Fig. 1(d)).
A close curve is a curve made up of only close pixels. Initially we consider a
simple conﬁguration (Fig. 1(b)) to explain how segments could be found from
close pixels list. The pseudo-code that describes the algorithm is the following:
initialPixel = findFirstPixel();
currentPixel = findNextPixel(initialPixel);
direction = findDirection(initialPixel, currentPixel);
segment = createNewSegment(initialPixel, direction);
while (currentPixel != initialPixel){
oldCurrentPixel = currentPixel;
oldDirection = Direction;
currentPixel = findNextPixel(oldCurrentPixel);
direction = findDirection(oldCurrentPixel, currentPixel);
if (direction != oldDirection){
setFinalCoordinate(segment, oldCurrentPixel);
insertInSegmentsList(segment);
segment = createNewSegment(oldCurrentPixel, direction);}}
setFinalCoordinate(segment, currentPixel);
insertInSegmentsList(segment);

The functions are:
– findFirstPixel(): it chooses the top-left pixel as initial pixel.
– findNextPixel(currentPixel): it looks for the next pixel in the neighbourhood following a counter clockwise direction.
– createNewSegment(oldCurrentPixel, direction): it creates a new segment with ﬁrst coordinate oldCurrentPixel and direction direction.
– setFinalCoordinate(segment, oldCurrentPixel): it sets the ﬁnal coordinate of segment segment at oldCurrentPixel.
– insertInSegmentList(segment): it adds segment in the list of segments
that describes the close curve.
Our algorithm chooses the top-left pixel of curve as initial pixel and following
the boundary in counter clockwise direction creates the segments necessary for
a vectorial description. There are a series of complex conﬁguration: regions with
internal curve; ambiguity in the choice of next currentPixel; several close curve
belonging to the same region.
To properly consider these cases it is needed to slightly modify the algorithm
described above. The full description and details are reported at http://www.dmi.unict.it/∼iplab.
3.1

Open Curve

Even if a good segmentation algorithm should create regions with simple boundaries and not ragged this is not always the case. For this reason we have divided
border pixels into two groups: close pixels and open pixels. The last are the pixels devoted to describe the ragged above mentioned. For simple conﬁgurations
(Fig. 1(c)) we could use the following algorithm:

338

S. Battiato, G.M. Farinella, and G. Puglisi

(a)

(b)

(c)

(d)

Fig. 1. An example of diﬀerent kind of pixels: internal (blue), close (red), and open
(green) (a). Example of simple close (b) and open curve (c). Possible directions of
segments that approximate the boundaries of regions (d).

initialPixel = findFirstPixel();
currentPixel = findNextPixel(initialPixel);
direction = findDirection(initialPixel, currentPixel);
segment = createNewSegment(initialPixel, direction);
while (it is possible to find new nearby pixels){
oldCurrentPixel = currentPixel;
oldDirection = direction;
currentPixel = findNextPixel(oldCurrentPixel);
direction = findDirection(oldCurrentPixel, currentPixel);
if (direction != oldDirection){
setFinalCoordinate(segment, oldCurrentPixel);
insertInSegmentsList(segment);
segment = createNewSegment(oldCurrentPixel, direction);}}
setFinalCoordinate(segment, currentPixel);
insertInSegmentsList(segment);

It is very similar to the one described for the close curve, but the following
function has a diﬀerent behaviour:
– findFirstPixel(): it choices a pixel with only a neighbour as initial pixel.
Moreover when a pixel is chosen it is deleted from the list of open pixels.
For complex conﬁguration we used a more sophisticated algorithm. Full description with more details are available at the following web address http://
www.dmi.unict.it/∼iplab.

4

SVG Generation Code

After tracking the curve boundaries is necessary to map the data by SVG primitives. In particular a generic close curve could be represented in the following
way:
<path d="M x1,x1 L x2,y2 Lx3,y3 Z" stroke ="#RRGGBB" fill"#RRGGBB" />

where x1,y1,x2,y2,x3,y3 are the vertexes coordinates and RR, GG, BB are
respectively the hex representation of red, green, blue mean value of the region
that close curve belong to. An open curve could be represented in the following
way:
<path d="M x1,x1 L x2,y2 Lx3,y3" stroke ="#RRGGBB" fill="none" />

Statistical Based Vectorization for Standard Vector Graphics

339

Open curves are no ﬁlled (fill = "none") and start point is not equal to ﬁnal
point (Z parameter is absent). In order to obtain small ﬁle size some optimization
could be done [12]:
– path element permits to eliminate some separator characters, to use relative
coordinate (m, l command) and h, v command for horizontal and vertical
lines respectively;
– <g> elements is used to properly ensemble common graphic properties of
various primitives.

5

Experimental Results

We have done several experiments in order to study the behaviour of our solution
as the Q parameter increases. In particular we used two indexes of performance:
PSNR and bit per pixel. The ﬁrst index is tied with the quality of the image,
the second with the ﬁle size.
We use ”Lena” image to show the relation between Q parameter and some indexes of performance (PSNR, bpp). Analogous results have been found for other
images. Figures (2(a)) and (2(b)) show that both quality and image size grow
as the Q parameter increases. In fact increasing Q, SRM produces more regions
and more details need to be represented. Moreover it is not useful increasing the
Q parameter over a certain threshold (see Fig. 2(c)).
For sake of comparison SVG images obtained with our algorithm have been
compared with other techniques such as Vector Eye [3], SWaterG [6], SVGenie
and SVGWave [7]. The set of images used for comparison are of diﬀerent kinds:
graphics, textual, colours and grey levels. The parameters of diﬀerent techniques
have been set in order to obtain images visually agreeable. Figure (3(a)) shows

(a) Relation between PSNR and Q.

(b) Relation between bpp and Q.

(c) Relation between PSNR and bpp.
Fig. 2. Relation between Q parameter and some indexes of performance (PSNR, bpp)
for Lena image

340

S. Battiato, G.M. Farinella, and G. Puglisi

(a) PSNR comparison of dataset images (b) Bit per pixels comparison of dataset
outputs.
images outputs.

(c) Bit per pixels comparison of dataset (d) PSNR comparison of our solution
images compressed outputs (SVGZ em- with respect to VISTA dataset images
bedded coding).
outputs.
Fig. 3. Comparison between diﬀerent techniques

Fig. 4. Visual comparison between tiger image vectorized with our solution (left) (99
KB, PSNR=26,51) and VISTA SVG image (right) (94 KB, PSNR=19,69). The ﬁle
size is almost the same but the quality of image produced with our technique is clearly
better.

similar PSNR values for all the techniques. Fixing the quality, the ﬁle size produced by diﬀerent techniques changes. In particular our algorithm outperforms
the others (see Fig. 3(b) and 3(c)) producing ﬁles of lower size.
A diﬀerent kind of experiment has been done with the recent VISTA
technique [9]. In particular we have used for suitable comparison the data (original, SVG code) downloadable from http://www.svgopen.org/2005/papers/Prasad Abstract R2V4SVG. For sake of comparison we ﬁx the overall bit size
of each image in order to properly tune our Q parameter. The ﬁnal quality,
measured (PSNR) and perceptual, is clearly better then corresponding VISTA
images as showed in Fig. (3(d)) and (4). It is useful to consider that our algorithm has only a parameter (Q) that is easily tuneable to obtain the desired
quality-size trade-oﬀ. Further experiments can be found at the following web
address: http://www.dmi.unict.it/∼iplab.

Statistical Based Vectorization for Standard Vector Graphics

6

341

Conclusion and Future Works

In this paper we have proposed a novel technique able to convert raster images in
a SVG format. Moreover, we have carried out several experiments showing that
our algorithm outperforms other similar techniques. Future researches will be
devoted to studying advanced region merging heuristics, to use of Bezier curves
and ﬁlter enhancement.

References
1. Duce, D., Herman, I., Hopgood, B.: Web 2D Graphics File Format. Computer
Graphics forum 21(1) (2002) 43–64
2. Rabaud, V., Belongie, S.: Big Little Icons. In: CVAVI, San Diego CA (2005)
3. Vantighem, C., Laurent, N., Deckeur, D., Plantinet, V.: Vector eye 1.0.7.6 (2003)
Copyright SIAME e Celinea, http://www.siame.com, http://www.celinea.com.
4. Weber, M.: Autotrace 0.31 (2002) GNU General Public License, http://www.
autotrace.sourceforge.net.
5. Kuhl, K.: Kvec 2.99 (2003) Copyright KK-Software, http://www.kvec.de.
6. Battiato, S., Costanzo, A., Di Blasi, G., Nicotra, S.: SVG Rendering by Watershed
Decomposition. In: Proceeding of SPIE Electronic Imaging-Internet Imaging VI-.
Volume 5670.3. (2005)
7. Battiato, S., Barbera, G., Di Blasi, G., Gallo, G., Messina, G.: Advanced SVG Triangulation Polygonalization of Digital Images. In: Proceeding of SPIE Electronic
Imaging-Internet Imaging VI-. Volume 5670.1. (2005)
8. Battiato, S., Di Blasi, G., Gallo, G., Messina, G., Nicotra, S.: SVG Rendering for
Internet Imaging. In: Proceeding of IEEE CAMP’05, International Workshop on
Computer Architecture for Machine Perception, Palermo(Italy) (2005) 333–338
9. Prasad, L., Skourikhine, A.: Raster to Vector Conversion of Images for Eﬃcient
SVG Representation. In: Proceedings of SVGOpen’05, NL (2005)
10. Nock, R., Nielsen, F.: Statistical Region Merging. IEEE Transaction on Pattern
Analysis and Machine Intelligence 26(11) (2004) 1452–1458
11. Lucchese, L., Mitra, S.: Color Image Segmentation: A State-of-the-Art Survey.
In: Proc. of the Indian National Science Academy(INSA-A). Volume 67 A. (2001)
207–221
12. World Wide Web Consortium: Scalable Vector Graphics (SVG) 1.1 Speciﬁcation.
(2003) http://www.w3.org/TR/2003/REC-SVG11-20030114/.

