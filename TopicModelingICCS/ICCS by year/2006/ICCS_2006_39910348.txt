A Parallel Solution of Hermitian
Toeplitz Linear Systems ,
Pedro Alonso1 , Miguel O. Bernabeu1 , and Antonio M. Vidal1
Universidad Polit´ecnica de Valencia, cno. Vera s/n, 46022 Valencia, Spain
{palonso, mbernabeu, avidal}@dsic.upv.es

Abstract. A parallel algorithm for solving complex hermitian Toeplitz
linear systems is presented. The parallel algorithm exploits the special
structure of Toeplitz matrices to obtain the solution in a quadratic asymptotical cost. Our parallel algorithm transfors the Toeplitz matrix
into a Cauchy–like matrix. Working on a Cauchy–like system lets to
work with real arithmetic. The parallel algorithm for the solution of a
Cauchy–like matrix has a low amount of communication cost regarding
other parallel algorithms that work directly on the Toeplitz system. We
use a message–passing programming model. The experimental tests are
obtained in a cluster of personal computers.

1

Introduction

In this work we propose a parallel algorithm for the solution of
Tx = b ,

(1)

with T = (tij ) = (t|i−j| )0≤i,j<n ∈ Cn×n hermitian and being b, x ∈ Cn the
independent and the solution vectors, respectively.
There exist the so called fast algorithms to obtain the solution to this problem
with an order of magnitude lower than the classical algorithms. These algorithms
are based on the displacement rank property of the structured matrices. Nevertheless, there are two main drawbacks. Firstly, if the Toeplitz matrix is not
strongly regular, fast algorithms can break down or can produce poor results
regarding the accuracy of the solution. The other one deals with its parallelization because due to the dependency between operations causes a large number
of point–to–point and broadcast–type communications when a message passing
model programming is used [1].
The parallel algorithm presented in this paper transforms the Toeplitz matrix into a another type of structured matrix called Cauchy–like. This reduces
signiﬁcantly the execution time with the number of processors thanks to the
use of just only one broadcast–type communication per iteration. In addition,
Supported by Spanish MCYT and FEDER under Grant TIC 2003-08238-C02-02.
Funded by Secretar´ıa de Estado de Universidades e Investigaci´
on del Ministerio de
Educaci´
on y Cultura of Spain.
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 348–355, 2006.
c Springer-Verlag Berlin Heidelberg 2006

A Parallel Solution of Hermitian Toeplitz Linear Systems

349

working on Cauchy–like matrices avoids the algorithm to break down although
it can still produce inaccuracy results. However, a reﬁnement technique can be
incorporated to improve the precision of the solution like it is done in [2] for
the real non–symmetric case. Furthermore, we have used a blocking factor that
minimizes the execution time overlapping computational and communication
operations.
The parallel algorithm constitutes a particular improvement for hermitian
matrices. The more general non–hermitian case can be found in [3]. Other related
works based on the same idea applied to the real symmetric case was presented
in [4].
Standard libraries like LAPACK [5] and ScaLAPACK [6] are used to achieve
a more easy and portable implementation. The fftpack library [7, 8] is also used
together with our own implementation by using the Chirp-z factorization [9].
The next two sections includes a brief revision of the mathematical background and the sequential algorithm. Afterward, Sect. 4 and Sect. 5 shows the
parallel algorithm and the experimental results, respectively.

2

Rank Displacement and Cauchy–Like Matrices

The concept of rank displacement [10] describes the special structure of structured matrices. The deﬁnition uses the displacement equation of a given n × n
matrix. If the rank r of the displacement equation is considerably lower than n
(r
n), it is said that the matrix is structured.
Given the Toeplitz matrix of (1) its displacement equation can be deﬁned in
several ways. A useful form for our purposes is
F T − T F = G H G∗ ,

(2)

where F = Z + Z T , being Z the one position down shift matrix, and being
G ∈ Cn×4 and H ∈ C4×4 the so called generator pair.
It is said that matrix C = (cij )1≤i,j≤n is a hermitian Cauchy matrix, if for a
complex vector λ = (λi )n1 , the matrix
∇λ C = ((λi − λj )cij )n1 , (λi − λj )cij = 1 ,

(3)

has a very low rank with respect to n. If (λi − λj )cij = 1, matrix ∇λ C is said
to be a Cauchy–like matrix.
Both Toeplitz and Cauchy–like matrices as deﬁned in (1) and (3), respectively,
are structured matrices. Furthermore, there exists a direct relation between both
classes of matrices by means of linear transformations. However, it is possible to
avoid working in the complex plane in the hermitian case as follows.
Let S be the normalized Discrete Sine Transform (DST-I) [11, 12] matrix
S=

2
n+1

sin

ijπ
n+1

, i, j = 1, . . . , n ,

(4)

350

P. Alonso, M.O. Bernabeu, and A.M. Vidal

where S = S T and SS T = S T S = I, being I the identity matrix, and let P be
a odd–even permutation matrix so P x1 x2 x3 x4 . . . = x1 x3 . . . x2 x4 . . . .
Let (T ) and (T ) be the real and imaginary part of T , then
P S (T )SP T =

M1 0
0 M2

and P S (T )SP T =

,

0 −M3T
M3 0

,

where M1 , M2 and M3 are all real symmetric Cauchy–like matrices of size n/2 ×
n/2 , n/2 × n/2 and n/2 × n/2 , respectively.
Being matrix D deﬁned as
D=

I

n/2

iI

,
n/2

√
where i = −1, the following transformation allows to convert a hermitian
Toeplitz matrix into a real symmetric Cauchy–like matrix
C = DP ST SP T D∗ =

M1 −M3T
M3 M2

.

(5)

Applying the previous transformation to the displacement equation (2) the displacement equation of the real Cauchy–like matrix in (5) is obtained
ˆHG
ˆT ,
ΛC −C Λ=G

(6)

where
ˆ=
G

(G)

1
(G) and G = √
DP SG:,1:2 .
n+1

(7)

Thus, the solution of a hermitian Toeplitz linear system (1) is approached by
solving the real symmetric Cauchy–like system
Cx
ˆ = ˆb ,

(8)

where ˆb = DP Sb and x
ˆ = DP Sx so the solution of (1) is x = D∗ P T S x
ˆ.
The Cauchy–like linear system (8) is solved performing the factorization C =
LDLT with L lower triangular and D diagonal. This factorization can be done
in a “fast” way due to the displacement rank property of structured matrices.

3

Triangular Factorization of Cauchy–Like Matrices

Gohberg, Kailath and Olshevsky [13] proposed an algorithm (GKO) to factorize
non–hermitian Cauchy–like matrices. Following the same idea is not hard to
derive a fast algorithm for the triangular factorization of real symmetric Cauchy–
like matrices that exploits its displacement rank property.

A Parallel Solution of Hermitian Toeplitz Linear Systems

351

Given the following partitions of matrices C and Λ (6),
C=
where d lT

T

d lT
l C1

,Λ=

λ1 0
0 Λ1

,

is a one dimensional array, and being X =

transformation X −1 (.)X −T is applied to (6), we have

1 0
l/d In−1

, if the

(X −1 ΛX)(X −1 CX −T ) − (X −1 CX −T )(X T ΛX −T ) =
λ1
Λ1 l−λ1 l
d

0
Λ1

d 0
0 Csc

−

d 0
0 Csc

λ1
0

lT Λ1 −λ1 lT
d
Λ1

−1 ˆ T
ˆ
G) .
= (X −1 G)H(X

Equating element (2, 2) of the previous expression it is obtained
ˆ1 H G
ˆT ,
Λ1 Csc − Csc Λ1 = G
1
that is, the displacement equation of the Schur complement Csc of C with respect
ˆ is the generator of Csc . This property
ˆ 1 = X −1 G
to its ﬁrst element d. Matrix G
about that the Schur complements of a structured matrix are also structured is
used to derive a triangular factorization fast algorithm.
ˆ 1 deﬁnes
The computation of the ﬁrst column of C and the computation of G
the ﬁrst step of the algorithm. The LDLT factorization of C is obtained repeating
this process n iterations on the successive arising Schur complements (Alg. 1).
Algorithm 1 (LDLT factorization of a real symmetric Cauchy–like maˆ H, Λ (6) and diagonal entries of C, this algorithm returns the
trix): Given G,
unit lower triangular factor L and the diagonal matrix D such that C = LDLT .
for j = 1, . . . , n
Dj,j = Cj,j
for i = j + 1, . . . , n
ˆ i,: H G
ˆ T )/(Dj,j (λi − λj ))
1. Li,j = (G
j,:
2. Ci,i ← Ci,i − Dj,j L2i,j
ˆ j,:
ˆ i,: ← G
ˆ i,: − Li,j G
3. G
end for
end for
All elements of each Schur complement of C can be computed by solving the
Lyapunov equation shown in step 1 of Alg. 1 except diagonal entries. That
is why these elements must be computed a priori before calling Alg. 1. There
exist several fast algorithms to do that like the one in [14]. However, we have
developed a new one that lets to obtain diagonal entries of the Cauchy–like
matrix arising from C = STL S where TL is lower triangular Toeplitz. This is
useful to obtain diagonal entries of diﬀerent symmetric Cauchy–like matrices of
the form C = SM S where M can be either symmetric or non–symmetric or even
the product of two Toeplitz matrices. Furthermore, the algorithm uses a minimal
amount of memory avoiding to use of some vectors arising in the description of
the algorithm by other authors.

352

P. Alonso, M.O. Bernabeu, and A.M. Vidal

ˆ 0 L0,0
P0 G
ˆ 1 L1,0 L1,1
P1 G
ˆ 2 L2,0 L2,1 L2,2
P2 G
ˆ 3 L3,0 L3,1 L3,2 L3,3
P0 G
ˆ 4 L4,0 L4,1 L4,2 L4,3 L4,4
P1 G
..
..
..
..
..
..
.. . .
.
.
.
.
.
.
.
.
Fig. 1. Example of data distribution with 3 processors

4

The Parallel Algorithm

The central part of the parallel algorithm falls in the factorization of C. The
ˆ is partitioned in n/η blocks of size η × 4 and distributed using
generator G
the BLACS model. Under this model a logical unidimensional mesh with p × 1
ˆ are cyclically distributed among the p processors
processors is built. Blocks of G
ˆ
such that block Gk , k = 0, . . . , n/η − 1, belongs to processor Pj mod p . The
ˆ belongs to block G
ˆ i/η . Matrix Λ and the diagonal of C are both
ith row of G
partitioned and distributed in the same way. Alg. 2 is the parallel version of
ˆ and L with 3 processors can be seen in
Alg. 1. An example of distribution of G
Fig. 1.
Algorithm 2 (Parallel LDLT factorization of a symmetric Cauchy–like
ˆ H, Λ (6) and the diagonal of C cyclically distributed for a
matrix): Given G,
given block size η ≥ 1, this algorithm returns the unit lower triangular factor L
and the diagonal matrix D such that C = LDLT both partitioned in blocks of η
rows cyclically distributed as the argument matrices.
Each processor Pj , j = 0, . . . , p − 1, performs:
for k = 0, . . . , n/η − 1
C1 C3T
k
=
Let Csc
, C1 ∈ IRη×η , be the Schur complement of C
C3 C2
with respect to the leading submatrix of order kη.
ˆ k ∈ Pj )
if (G
ˆ k and Λk .
Compute C1 = Lkk Dk LTkk by using Alg. 1 and broadcast G
ˆ
else Receive Gk and Λk .
end if
for i = k + 1, . . . , n/η − 1
ˆ i ∈ Pj )
if (G
ˆ i and the diagonal entries of Cii .
Compute Lik and update G
end if
end for
end for

A Parallel Solution of Hermitian Toeplitz Linear Systems

353

ˆ i and diagonal entries of Cii , k < i < n/η, can be easily derive
Updating blocks G
from the operations described in Alg. 1 if only η iterations are applied. In each
step of Alg. 2 the following factorization is obtained
k
Csc
=

Lk,k
Lk+1:n/η−1,k

Dk,k 0
0 0

LTk,k LTk+1:n/η−1,k

+

0 0
k+1
0 Csc

,

k+1
being Csc
implicitly known throughout the generator.
The main advantage of Alg. 2 is that it performs only one broadcast per iteration on the contrary that other parallel algorithms for the solution of the
same problem. The size and the number of messages are both a function of η.
Diﬀerent values of η changes the overlapping between communications and computations and also the weight of both factors in the total cost of the algorithm.
The optimum value of η depends on the machine and is experimentally tuned.
The complete parallel algorithm is summarized in Alg. 3.

Algorithm 3 (Parallel solution of a hermitian Toeplitz linear system):
Given a hermitian Toeplitz matrix T ∈ Cn×n and a right hand side vector b ∈ Cn ,
this algorithm returns the solution vector x of the linear system T x = b.
On each processor Pj , for j = 0, . . . , p − 1:
ˆ (7), Λ (6) and vector ˆb (8), and
1. Every processor computes matrices G
distribute them cyclically by blocks of size η × 4.
2. Apply Alg. 2 to obtain C = LDLT .
3. Solve LDLT x
ˆ = ˆb in parallel by using PBLAS routines.
ˆ from the rest of processors and computes x = D∗ P T S x
ˆ.
P0 gathers x
Another improvement used is the eﬃcient computation of the DST (4). The time
used by the fftpack routine to apply a DST to a vector highly depends on the
value of the prime numbers in which n + 1 is factorised. This routine is faster as
these prime numbers are small. We have implement a DST routine based on the
Chirp–z factorization used in the computation of DFT’s whose computational
cost is independent of the size of these prime numbers (Table 1).

5

Experimental Results

The experimental results have been obtained in a cluster of 10 two–processor
boards with two Intel Xeon at 2 GHz. and with 1 Gb. of RAM. The
ˆ with and without using the Chirp–z factorization
Table 1. Excution time of G
n 6998
p. d. 3 · 2333
fftpack 0.64
0.36
Chirp–z

7498 7998
8498
7499 19 · 421 3 · 2833
2.93
0.33
0.96
0.38
0.41
0.60

8998
9998
10498 10998
8999 32 · 11 · 101 10499 17 · 647
4.25
0.45
5.76
0.64
0.64
0.72
0.77
0.81

354

P. Alonso, M.O. Bernabeu, and A.M. Vidal

2.4

p=2

sec.

2.2

p=3

2

p=4

1.8

p=5

1.6

p=6

1.4

p=7

1.2

p=8

1
0.8
0.6
24
Fig. 2. Time versus diﬀerent values of η and number of processors for n = 12000

5.5
n = 8000
n = 9000
n = 10000
n = 11000

5
4.5
4
sec.

3.5
3
2.5
2
1.5
1
0.5
1

2

3

4

5
6
procs.

7

8

9

10

Fig. 3. Time for diﬀerent size problems and diﬀerent number of processors.

interconnection network is a SCI with a 2D torus topology. In the experiments,
each MPI process is mapped onto only one processor of each node.
ˆ
The ﬁrst test consists of tuning the block size η used in the partition of G.
Fig. 2 shows the execution time of Alg. 2, that is the second step of Alg. 3, so
it can be concluded that there exists a range of values for η that can be used to
get the best performance. We have chosen a size of η = 24 independently of the
number of processors in our target machine. A more detailed study with other
problem sizes shows that this is always the best choice despite of some a very
slight variation of time in the diﬀerent values of η.

A Parallel Solution of Hermitian Toeplitz Linear Systems

355

Once the optimal value of η is ﬁxed, the next experiment deal with the total
cost of the parallel algorithm with diﬀerent problem sizes. Figure 3 shows a large
reduction in time achieved with the increment in the number of processors. This
is specially signiﬁcant because this result means the parallel algorithm can be
useful in applications with real time constraints.

6

Conclusions

We have presented a parallel algorithm that exploits the displacement structure of Toeplitz and Cauchy–like matrices as the sequential algorithms do. The
algorithm does not break down if the Toeplitz matrix is not strongly regular,
uses real arithmetic and reduces the execution time with the use of up to 10
processors. This is a challenge taking into account how diﬃcult it is to improve
the performance of this type of fast algorithms due to the operation dependency
and the large cost of a message communication regarding the time of a ﬂop.

References
1. Alonso, P., Bad´ıa, J.M., Vidal, A.M.: Parallel algorithms for the solution of toeplitz
systems of linear equations. LNCS 3019 (2004) 969–976
2. Alonso, P., Bad´ıa, J.M., Vidal, A.M.: An eﬃcient and stable parallel solution for
non–symmetric Toeplitz linear systems. LNCS 3402 (2005) 685–692
3. Alonso, P., Vidal, A.M.: An eﬃcient parallel solution of complex toeplitz linear
systems. Lecture Notes in Computer Science (to appear in 2006)
4. Alonso, P., Vidal, A.M.: The symmetric–toeplitz linear system problem in parallel.
LNCS 3514 (2005) 220–228
5. Anderson, E., Bai, Z., Bischof, C., Demmel, J., Dongarra, J., Croz, J.D., Greenbaum, A., Hammarling, S., McKenney, A., Ostrouchov, S., Sorensen, D.: LAPACK
Users’ Guide. Second edn. SIAM, Philadelphia (1995)
6. Blackford, L., et al.: ScaLAPACK Users’ Guide. SIAM, Philadelphia (1997)
7. Swarztrauber, P.: Vectorizing the FFT’s. Academic Press, New York (1982)
8. Swarztrauber, P.: FFT algorithms for vector computers. Parallel Computing 1
(1984) 45–63
9. Loan, C.V.: Computational Frameworks for the Fast Fourier Transform. SIAM
Press, Philadelphia (1992)
10. Kailath, T., Sayed, A.H.: Displacement structure: Theory and applications. SIAM
Review 37 (1995) 297–386
11. Bojanczyk, A.W., Heinig, G.: Transformation techniques for toeplitz and toeplitzplus-hankel matrices part I. transformations. Technical Report 96-250, Cornell
Theory Center (1996)
12. Bojanczyk, A.W., Heinig, G.: Transformation techniques for toeplitz and toeplitzplus-hankel matrices part II. algorithms. Technical Report 96-251, Cornell Theory
Center (1996)
13. Gohberg, I., Kailath, T., Olshevsky, V.: Fast Gaussian elimination with partial
pivoting for matrices with displacement structure. Mathematics of Computation
64 (1995) 1557–1576
14. Thirumalai, S.: High performance algorithms to solve Toeplitz and block Toeplitz
systems. Ph.d. thesis, Graduate College of the University of Illinois at UrbanaChampaign (1996)

