Exemplar Longest Common Subsequence
Paola Bonizzoni1 , Gianluca Della Vedova2 , Riccardo Dondi1 ,
Guillaume Fertin3 , and St´ephane Vialette4
1

Dipartimento di Informatica, Sistemistica e Comunicazione, Universit`
a degli Studi
di Milano-Bicocca Milano - Italy
2
Dipartimento di Statistica, Universit`
a degli Studi di Milano-Bicocca Milano - Italy
3
LINA - FRE CNRS 2729 Universit´e de Nantes, Nantes Cedex 3, France
4
LRI - UMR CNRS 8623 Facult´e des Sciences d’Orsay, Universit´e Paris-Sud Bˆ
at 490,
Orsay Cedex, France

Abstract. In the paper we investigate the computational and approximation complexity of the Exemplar Longest Common Subsequence of a
set of sequences (ELCS problem), a generalization of the Longest Common Subsequence problem, where the input sequences are over the union
of two disjoint sets of symbols, a set of mandatory symbols and a set of
optional symbols. We show that diﬀerent versions of the problem are
APX-hard even for instances with two sequences. Moreover, we show
that the related problem of determining the existence of a feasible solution of the Exemplar Longest Common Subsequence of two sequences is
NP-hard. On the positive side, eﬃcient algorithms for the ELCS problem over instances of two sequences where each mandatory symbol can
appear totally at most three times or the number of mandatory symbols
is bounded by a constant are given.

1

Introduction

Algorithmic studies in comparative genomics have produced powerful tools for
the analysis of genomic data which has been successfully applied in several
contexts, from gene functional annotation to phylogenomics and whole genome
comparison. A main goal in this research ﬁeld is to explain diﬀerences in gene
order in two (or more) genomes in terms of a limited number of rearrangement
operations.
When there are no duplicates in the considered genomes, the computation
of the similarity measure is usually polynomial-time solvable, e.g., number of
breakpoints, reversal distance for signed genomes, number of conserved intervals, number of common intervals, maximum adjacency disruption, summed adjacency disruption. However, aside a few exceptions, several copies of the same
gene or several highly homologous genes are usually scattered across the genome,
and hence it is major problem to handle those duplicates when computing the
similarity between two genomes. One approach to overcoming this diﬃculty is
based on the concept of exemplar: for each genome, an exemplar sequence is
constructed by deleting all but one occurrence of each gene family. Another approach is based on matching: in this two-step procedure, the two genomes are
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 622–629, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Exemplar Longest Common Subsequence

623

ﬁrst made balanced (the number of occurrences of each gene from the same family
must be the same in both genomes) by removing a minimum number of genes
and next a one-to-one correspondence (among genes of each family) between
genes of the genomes is computed.
Unfortunately, in the presence of duplicates, most similarity measures turn
out to be NP-hard to compute for both the exemplar and the matching models, so that we generally have to rely on approximation algorithms or heuristic
approaches. We discuss here one such general purpose heuristic approach (the
Exemplar LCS problem) which is basically a constrained string alignment
problem. The basic idea of the general framework we propose here is based on
the observation that, for most similarity measures and for both the exemplar and
the matching models, speciﬁc common subsequences may correspond to highly
conserved sets of genes. This suggests the following greedy heuristic algorithm:
ﬁnd a common subsequence of signiﬁcant length – but compact enough – between the two genomes, replace in the two genomes the substring that contains
the common subsequence (the substring that starts at the ﬁrst character of the
common subsequence and ends at the last character of the common subsequence)
by a new letter and continue in a similar way.
At each iteration of this simple heuristic algorithm, one however has to be
cautious in how to choose the common subsequence, as bad choices may have
a disastrous impact for the rest of the algorithm. Let us take the exemplar
model as a very simple explanatory example, and suppose that we are searching
for a common subsequence between two precise substrings of the two genomes.
For one, if one gene family has occurrences elsewhere in the two genomes, then
taking or not one occurrence of this particular gene family in the common subsequence is thus not based on necessity but on the length of the obtained solution. For another, if there do not exist any other occurrences of one gene
family except one in the two considered substrings, deﬁnitively one has to take
this occurrence in the common subsequence (observe that in this case the obtained common subsequence may not be the longest one). This simple example
suggests to consider a LCS-like problem that deals with two types of letters
(mandatory and optional symbols) to allow greater ﬂexibility in the searching
process.
In this paper we will formally deﬁne such framework with a simple combinatorial problem that generalizes the well-known LCS problem and we will study its
computational and approximation complexity. We show that diﬀerent versions
of the problem are APX-hard even for instances with two sequences and that
even determining if a feasible solution exists or not is NP-hard. On a positive
side the hardness of the problem can be limited in some cases, in fact we show
that it is possible to determine eﬃciently a feasible solution, provided that each
symbol appears at most three times totally in the input sequence. Finally we
give a polynomial-time algorithm in case the number of mandatory symbols is a
constant.

624

2

P. Bonizzoni et al.

The Problems

The Longest Common Subsequence problem (shortly LCS) is a well-known
problem in Computational Biology. Let s = s[1], s[2], . . . , s[m] and t = t[1], t[2],
. . . , t[l] be two sequences, s is a subsequence of t if for some j1 < j2 < . . . < jm
s[h] = t[jh ]. Let s1 , s2 be two sequences, a longest common subsequence of s1
and s2 is a sequence s of maximum length, such that s is a subsequence of both
s1 and s2 . Let S be a set of sequences, then a longest common subsequence of S
is a longest possible sequence s that is a subsequence of each sequence in S.
Given a set of sequences S,
Table 1. Versions of Exemplar LCS
the LCS problem asks for a
Problem name Occurrences Occurrences
longest common subsequences
mandatory
optional
of S. The complexity of LCS
symbols
symbols
problem has been deeply studied in the past. In [7] it is
ELCS(1, ≤ 1) exactly 1
at most 1
shown that the problem is NPELCS(1)
exactly 1
unrestricted
hard even for sequences over
ELCS(≥ 1, ≤ 1) at least 1
at most 1
an alphabet of size 2. However,
ELCS(≥ 1)
at least 1
unrestricted
when the instance of the problem consists of a ﬁxed number of sequences, the LCS can be solved in polynomial
time via dynamic programming algorithms [5, 4]. The input of the Exemplar
LCS problem (ELCS) consists of a set S of sequences over alphabet Ao ∪ Am ,
Ao ∩Am = ∅, where Ao is the set of optional symbols and Am is the set of mandatory symbols. The output of the problem is a longest common subsequence of
all sequences in S and containing all mandatory symbols.
Given an instance S of ELCS, by exemplar common subsequence we mean
a feasible solution of ELCS over S. It is possible to deﬁne diﬀerent versions
of the problem, according to the number of occurrences of each symbol in the
solution, as represented in Table 1. In this paper we will deal with such diﬀerent
versions of ELCS. First notice that ELCS(1) and ELCS(≥ 1) are generalizations
of the LCS problem, where no mandatory symbols are present. Therefore all the
hardness results for LCS apply to ELCS(1) and ELCS(≥ 1). Moreover, we will
show that the above problems are hard also on instances of only two sequences
(while the LCS problem can be solved in polynomial time for any ﬁxed number
of sequences). When dealing with the restriction of ELCS containing only a
ﬁxed number of sequences, we will denote such restriction preﬁxing the problem
name with the number of sequences, e.g. 2-ELCS(1, ≤ 1) is the restriction of
ELCS(1, ≤ 1) to instances of two sequences.

3

The Results

Theorem 1. The 2-ELCS(1, ≤ 1) problem is APX-hard even when each symbol
appears at most twice in each input sequence.
Proof. We prove the theorem describing an L-reduction from Max Independent Set on Cubic Graph to 2-ELCS(1, ≤ 1), since the latter problem is

Exemplar Longest Common Subsequence

625

known to be APX-hard[1]. Let G = (V, E) be a cubic graph. Then for each
vertex vi there are three edges e1 (vi ), e2 (vi ), e3 (vi ) incident on it. In the reduction each vertex vi is associated with a symbol vi of Ao and a symbol xi
in Am . Each edge is associated with a distinct symbol of Am . Deﬁne a block
associated with a vertex vi , as a string consisting of a vertex symbol vi , the
symbols associated with edges incident to vi in G and the symbols xi . There
are two possible blocks associated with vi , one contained in s1 and deﬁned
as b1 (vi ) = vi e1 (vi )e2 (vi )e3 (vi )xi , the second contained in s2 and deﬁned as
b2 (vi ) = e1 (vi )e2 (vi )e3 (vi )vi xi . The instance of 2-ELCS(1, ≤ 1) consists of the
following two sequences: s1 = b1 (v1 )b1 (v2 ) · · · b1 (vn ), s2 = b2 (v1 )b2 (v2 ) · · · b2 (vn ).
Observe that since each symbol xi is mandatory and it occurs only in blocks
b1 (vi ), b2 (vi ) of s1 , s2 respectively, any symbol xi in a feasible solution of 2ELCS(1, ≤ 1) over s1 and s2 must be taken from b1 (vi ) and b2 (vi ). It follows
that if vi is in an exemplar common subsequence, then the exemplar common subsequence does not contain any symbol of e1 (vi )e2 (vi )e3 (vi ) of b1 (vi )
and b2 (vi ). Let s be a feasible solution of 2-ELCS(1, ≤ 1) over s1 , s2 , then s
consists of f1 x1 . . . fi xi . . . fn xn , where each fi is either vi or a subsequence of
e1 (vi )e2 (vi )e3 (vi ). Observe that each edge symbol is mandatory, which means
that it must appear exactly once in a common subsequence. Moreover, an edge
symbol encoding edge (vi , vj ) appears in blocks b1 (vi ) and b1 (vj ) of s1 and in
blocks b2 (vi ) and b2 (vj ) of s2 . Thus a common subsequence takes such edge
symbol either from b1 (vi ) and b2 (vi ) or from b1 (vj ) and b2 (vj ).
Let I be the set of verC
v1
v2
tices appearing in s, we
will show that I is an independent set of G. Assume
E
that symbols vi , vj ∈ I.
Then
(vi , vj ) is not an edge
B
A
of
G,
otherwise
s in fi and
F
fj contains symbols vi and
vj respectively. It follows
D
that the edge symbol asv3
v4
sociated with (vi , vj ), that
can appear only in fi and
fj , is not contained in s.
s1 = v1 CAEx1 v2 CF Bx2v3 AF Dx3 v4 EBDx4
Since each edge symbol is
s2 = CAEv1 x1 CF Bv2 x2AF Dv3 x3 EBDv4 x4
mandatory, it must appear
in any feasible solution of
Fig. 1. Reducing the graph K4
2-ELCS(1, ≤ 1), which is a
contradiction. Observe that the length of a feasible solution of 2-ELCS(1, ≤ 1)
over s1 , s2 is |V | + |E| + |I|, where I is an independent set of G. On the other
side, let I be an independent set of G, it is easy to compute a feasible solution
of 2-ELCS(1, ≤ 1) over s1 , s2 of size |V | + |E| + |I|, retaining in the exemplar
common subsequence only the symbols associated with vertices in I.
A similar proof can be given also for 2-ELCS(≥ 1, ≤ 1).

626

P. Bonizzoni et al.

Theorem 2. The 2-ELCS(≥ 1, ≤ 1) problem is APX-hard even when each
symbol appears at most twice in each input sequence.
Proof. The reduction is similar to the previous one, but for each vertex vi of the
graph, we have four symbols via vib vic vid and the blocks b1 (vi ) and b2 (vi ) associated
with vi in sequences s1 and s2 respectively are deﬁned as follows: b1 (vi ) =
via vib vic vid e1 (vi )e2 (vi )e3 (vi )xi ; b2 (vi ) = e1 (vi )e2 (vi )e3 (vi )via vib vic vid xi .
Again the symbols xi are mandatory. Since each xi appears in blocks b1 (vi )
and b2 (vi ) of s1 and s2 respectively, it follows that any symbol xi in an exemplar
common subsequence must be taken from the blocks of s1 , s2 associated with
vi , that is b1 (vi ) and b2 (vi ). Since each mandatory edge symbols appears twice
in each input sequence, it must appear once or twice in a common subsequence.
Clearly if sequence via vib vic vid is in a feasible solution of 2-ELCS(≥ 1, ≤ 1) over
s1 , s2 , then this solution does not contain occurrence of symbols of sequence
e1 (v1 )e2 (v1 )e3 (v1 ) in b1 (vi ) and b2 (vi ). This means that a feasible solution s
of 2-ELCS(≥ 1, ≤ 1) over s1 , s2 consists of g1 x1 . . . gi xi . . . gn xn , where each
gi is either a subsequence of via vib vic vid or a subsequence of e1 (vi )e2 (vi )e3 (vi ).
Observe that each edge symbol is mandatory, which means that it must appear
exactly once in an exemplar common subsequence. Thus an exemplar common
subsequence takes each edge symbol from one of the two blocks where it appears.
Let I be an independent set of G, then s = g1 x1 . . . gi xi . . . gn xn , where each
gi = via vib vic vid if vi ∈ I and gi = e1 (vi )e2 (vi )e3 (vi ) otherwise. It is immediate to
note that s is a common subsequence of s1 and s2 of length |V | + 3|V | + |I| and
that all mandatory symbols encoding an edge are included in s.
Assume now that there exists a feasible solution s of 2-ELCS(≥ 1, ≤ 1) over
s1 , s2 with length |V | + 3|V | + |I|. We can assume that, for each block in s1 , s2,
either via vib vic vid or e1 (vi )e2 (vi )e3 (vi ) appears as a substring of s. Let Y be the
set of blocks for which via vib vic vid is part of s. Hence the vertices corresponding
to Y are an independent set of G. By a trivial counting argument, it is easy to
show that for |I| blocks s includes via vib vic vid . We claim that such blocks encode
an independent set. W.l.o.g. assume that v1a v1b v1c v1d and v2a v2b v2c v2d are included in
s, then there is no edge (v1 , v2 ) in G, otherwise the mandatory symbol encoding
such edge would not be in s.
A related problem is that, given an instance of 2-ELCS, of determining if a
feasible solution exists. In what follows we will consider a general version of the
2-ELCS problem. Notice that both reductions described above hold for instances
that are known to admit a feasible solution, therefore they are not suﬃcient for
dealing with the problem. Observe that we can assume that both input sequences
consist only of mandatory symbols, since only mandatory symbols are relevant
for the existence of a solution.
Theorem 3. The problem of determining if a feasible solution exists for an
instance of 2-ELCS where each mandatory symbol appears totally at most three
times in the input sequences, can be solved in polynomial time.

Exemplar Longest Common Subsequence

627

Proof. We prove the theorem reducing an instance of 2-ELCS where each mandatory symbol appears totally at most three times in the input sequences to an
instance of 2SAT. Notice that 2SAT can be solved in polynomial time [2].
For each symbol s, let occ1 (s) (respectively occ2 (s)) be the set of positions of
the input sequence s1 (resp. s2 ) where the s appears. Clearly both occ1 (s) and
occ2 (s) are not empty and |occ1 (s)|+|occ2 (s)| ≤ 3. For each symbol s there are at
most two pairs in occ1 (s) × occ2 (s), for otherwise |occ1 (s)| + |occ2 (s)| > 3, let us
associate with each of such pairs a variable xs,i , where i ∈ {1, 2} if there are two
pairs in occ1 (s) × occ2 (s) and i = 1 if there is only one pair in occ1 (s) × occ2 (s).
Graphically the possible variables are
represented in Fig. 2 with a line connecting two identical symbols belonging to
diﬀerent sequences. The case |occ1 (s)| +
|occ2 (s)| = 3 is represented by the two
leftmost lines and the variables xs,1 , xs,2 ,
while the case |occ1 (s)| + |occ2 (s)| = 2 is
represented by the rightmost line and the
Fig. 2. Reducing 2-ELCS to 2SAT
variable xt,1 . Each truth assignment to
the variables can be viewed as picking the lines corresponding to true variables.
Let C be the set of clauses of the instance of 2SAT that we are constructing.
For each pair xs,1 , xs,2 of variables, the clauses ¬xs,1 ∨ ¬xs,2 and xs,1 ∨ xs,2
are added to C. Moreover, for each symbol s such that there is only one pair
in occ1 (s) × occ2 (s), add the clause xs,1 to C (this corresponds to forcing the
variable xs,1 to be true). The fact that all these clauses are satisﬁed in any feasible solution of 2SAT, corresponds to pick exactly one of the lines associated
with each symbol. Two lines (or two variables) are called crossing if they cross
in the drawing built as in Fig. 2. More formally, notice that each variable xs,i is
associated with an occurrence of s in s1 (denoted as s1 (s, i)) and one occurrence
of s in s2 (denoted as s2 (s, i)). A pair xs,i , xt,j of variables is crossing if in s1 the
symbol s1 (s, i) precedes s1 (t, j) and in s2 the symbol s2 (s, i) does not precede
s2 (t, j) or, symmetrically, if in s1 the symbol s1 (s, i) does not precede s1 (t, j)
and in s2 the symbol s2 (s, i) precedes s2 (t, j). For each pair xs,i , xt,j of crossing
variables, the clause ¬xs,i ∨ ¬xt,j is added to C. We can prove that the original
instance of 2-ELCS has a feasible solution if and only if the instance of 2SAT
is satisﬁable, that is there is a truth assignment for all variables such that all
clauses in C are evaluated true. Assume that there is a feasible solution z of
the instance of 2-ELCS then, for each symbol s, we pick the lines connecting
the symbols retained in z. By deﬁnition of common subsequence there cannot
be two crossing lines, and exactly one of the lines associated with each symbol
must be picked as |occ1 (s)| + |occ2 (s)| ≤ 3, therefore we have constructed a feasible solution of 2SAT. Conversely given a truth assignment for all variables that
satisﬁes all clauses in C, it is immediate to note that there are not two crossing
lines, and that there is exactly one line for each symbol, therefore it is immediate
to construct a feasible solution of 2-ELCS that contains all symbols.

628

P. Bonizzoni et al.

Notice that the above result holds for all the restrictions of 2-ELCS considered
here, as no symbol appears twice in both input sequences, therefore it can appear
at most once in any solution. We will show in the following theorem that slightly
relaxing this constraint makes the problem NP-hard.
Theorem 4. The problem of determining if a feasible solution exists for an
instance of 2-ELCS where each mandatory symbol appears at most three times
in each input sequence, is NP-hard.
Proof. We will prove the theorem reducing 3SAT to 2-ELCS, with a reduction
very similar to the one shown before. Let C = {C1 , . . . , Ck } be a set of clauses,
each one consisting of at most three (possibly negated) literals. We construct an
instance of 2-ELCS associating a block with each variable. The block of s1 associated with variable xi is deﬁned as the symbol xi , followed by the sequence of
clauses containing xi , followed by the sequence of clauses containing ¬xi , where
in each sequence the clauses are ordered according to the index in {C1 , . . . , Ck }.
In s2 the block associated with variable xi is deﬁned as the symbol xi , followed by
the sequence of clauses containing ¬xi , followed by the sequence of clauses containing xi (again the clauses are ordered according to the index in {C1 , . . . , Ck }).
Both sequences s1 and s2 consist of the sequence of all blocks associated with
the variables of the original instance of 3SAT. All symbols are mandatory, also
notice that each symbol appear at most three times in each sequence as each
clause contains at most three literals.
Each symbol xi appears exactly once in each sequence, hence there is no
ambiguity on which occurrence is retained in any exemplar common subsequence.
Consequently each symbol retained must correspond to occurrences taken from
the same block. Inside the block associated with xi , retaining the clauses where xi
appears as a positive literal is mutually exclusive with retaining the clauses where
xi appears as a negative literal, by deﬁnition of exemplar common subsequence.
The ﬁrst case corresponds to setting xi to true, while the second case corresponds
to setting xi to false. In both case the clauses retained are satisﬁed by the
assignment of variables xi . It is immediate to note that any feasible solution
must contain all clauses, therefore we have computed a truth assignment of the
variables that satisﬁes all clauses in C, completing the proof.
The above results have a deﬁnitive consequence on the approximability of the
2-ELCS problem where each mandatory symbol appears at most three times in
both input sequences, as they rule out any possible polynomial-time approximation algorithm. Since the problem can be extended to instances consisting of a set
of sequences, it is interesting to know if the above results can be made stronger.
In fact, the well-known inapproximability results in [6] for the LCS problem,
immediately apply also to the ELCS(≥ 1) problem, since ELCS(≥ 1) is more
general than LCS. A closer inspection of their proofs shows that their results also
apply to all versions of ELCS, as the optimal solutions in their reductions contain
at most one occurrence of each symbol, excluding any O(n1− ) ratio polynomialtime approximation algorithm unless ZPP=NP, even if no mandatory symbol
is allowed and all symbols appear at most twice in each sequence.

Exemplar Longest Common Subsequence

4

629

Restricting the Problem

In this section we consider the restriction of 2-ELCS(1) where the number of
mandatory symbols is at most a constant. We describe a polynomial time algorithm for this restriction based on two phases: the ﬁrst step consists of guessing
the exact ordering of all mandatory symbols in the optimal solution, the second
step basically ﬁlls in the gaps between each pair of mandatory symbol. Since each
mandatory symbol appears exactly once in a feasible solution, the correct ordering of the mandatory symbol is a permutation of Am , which can be computed
in constant time, since |Am | is a constant.
Let s be a permutation of mandatory symbol, the second phase consists of
computing a longest common subsequence s∗ of {s1 , s2 } such that s is a subsequence of s∗ . Let us denote by s[i] the i-th character of the sequence s and by
s[i . . . j] the substring of s starting with s[i] and ending with s[j]. The recurrence
equation for EL[i, j, k], that is the length of an optimal solution over s1 [1 . . . i],
s2 [1 . . . j] that is a supersequence of the sequence s[1] · · · s[k] is:
⎧
EL[i − 1, j − 1, k] + 1 if s1 [i] = s2 [j], s1 [i] ∈ Ao
⎪
⎪
⎨
EL[i − 1, j − 1, k − 1] + 1 if s1 [i] = s2 [j] = s[k]
EL[i, j, k] = max
EL[i − 1, j, k], EL[i, j − 1, k] if s1 [i] = s2 [j] = s[k], s1 [i] ∈ Am
⎪
⎪
⎩
EL[i − 1, j, k], EL[i, j − 1, k] if s1 [i] = s2 [j]
The boundary conditions are EL[0, j, 0] = 0 and EL[i, 0, 0] = 0 for 0 ≤ i ≤ |s1 |
and 0 ≤ j ≤ |s2 |. The value of the optimal solution can be read in EL[|s1 |, |s2 |, |s|].
Once the matrix EL has been completely ﬁlled in the actual optimal subsequence
can be constructed with standard backtracking techniques [3]. The recurrence
equation described above can be easily modiﬁed for the 2-ELCS(≥ 1), by removing the requirement s1 [i] ∈ Ao in the ﬁrst condition of the equation.

References
1. P. Alimonti and V. Kann. Some APX-completeness results for cubic graphs. Theoretical Computer Science, 237(1–2):123–134, 2000.
2. B. Aspvall, M. F. Plass, and R. E. Tarjan. A linear-time algorithm for testing
the truth of certain quantiﬁed boolean formulas. Information Processing Letters,
8(3):121–123, 1979.
3. T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms. MIT Press, 2nd edition, 2001.
4. K. Hakata and H. Imai. The longest common subsequence problem for small alphabet size between many strings. In Proc. 3rd International Symp. on Algorithms and
Computation (ISAAC), pages 469–478, 1992.
5. W. Hsu and M. Du. New algorithms for the LCS problem. Journal of Computer
and System Sciences, 19:133–152, 1984.
6. T. Jiang and M. Li. On the approximation of shortest common supersequences
and longest common subsequences. SIAM Journal on Computing, 24(5):1122–1139,
1995.
7. D. Maier. The complexity of some problems on subsequences and supersequences.
Journal of the ACM, 25:322–336, 1978.

