Computation of the Adjoint Matrix
Alkiviadis Akritas1 and Gennadi Malaschonok2
1

University of Thessaly, Department of Computer and Communication Engineering,
GR-38221 Volos, Greece
akritas@uth.gr
2
Tambov State University, Laboratory for Algebraic Computations,
Internatsionalnaya 33, 392622 Tambov, Russia
malaschonok@math-iu.tstu.ru

Abstract. The best method for computing the adjoint matrix of an
order n matrix in an arbitrary commutative ring requires O(nβ+1/3
log n log log n) operations, provided that the complexity of the algorithm
for multiplying two matrices is γnβ + o(nβ ). For a commutative domain
– and under the same assumptions – the complexity of the best method
is 6γnβ /(2β − 2) + o(nβ ). In the present work a new method is presented
for the computation of the adjoint matrix in a commutative domain. Despite the fact that the number of operations required is now 1.5 times
more, than that of the best method, this new method permits a better parallelization of the computational process and may be successfully
employed for computations in parallel computational systems.

1

Statement of the Problem

The adjoint matrix is a transposed matrix of algebraic complements. If the determinant of the matrix is nonzero, then the inverse matrix may be computed
as the adjoint matrix divided by the determinant. The adjoint matrix of a given
matrix A will be denoted by A∗ : A∗ = det(A)A−1 .
The best method for computing the adjoint matrix of an order n matrix
in an arbitrary commutative ring requires O(nβ+1/3 log n log log n) operations
(see [1] and [2]). For a commutative domain the complexity of the best method
is 6γnβ /(2β − 2) + o(nβ ) (see [3]). It is asssumed that the complexity of the
algorithm for multiplying two matrices is γnβ + o(nβ ).
In a commutative domain the algorithm is based on applications of determinant identities [3]. It generalizes in a commutative domain the following formula
for the inverse matrix A−1 :
A−1 =

I −A−1 C
0
I

I
0
0 (D − BA−1 C)−1

I 0
−B I

A−1 0
0 I

,

AC
– is an invertible matrix with invertible block A.
BD
In the present work a new method is proposed for the computation of the
adjoint matrix in a commutative domain. Despite the fact that the number of

where A =

V.N. Alexandrov et al. (Eds.): ICCS 2006, Part II, LNCS 3992, pp. 486–489, 2006.
c Springer-Verlag Berlin Heidelberg 2006

Computation of Adjoint Matrix

487

operations required is now 1.5 times more, than that of the algorithm described
in [1], this new method permits a better parallelization of the computational
process.
This new method generalizes in a commutative domain the following factorization of the inverse matrix A−1 :
A−1 =

I −A−1 C
0
I

I
0
0 (B −1 D − A−1 C)−1

I 0
−I I

A−1 0
0 B −1

.

In the next section we present without proofs the determinant identity of
column replacement, which is used as the basis of the proposed method for
computing the adjoint matrix, along with several additional theorems, which
are fundamental for the new method. In the ﬁnal section the algorithm and a
small example are presented for the computation of the adjoint matrix.

2

Identity of Column Replacement

Let B be a matrix of order n and assume two diﬀerent columns are ﬁxed. We
denote by B{x,y} the matrix which is obtained from B after replacing the two
ﬁxed columns by the columns x and y, respectively.
Theorem 1. (Identity of column replacement.)
For every matrix B ∈ Rn×n and columns a, b, c, d ∈ Rn the following identity
holds
det B{ad} det B{db}
det B{ab} det B{cd} =
(1)
det B{ac} det B{cb}
For example, for the matrix of order 2 the identity of column replacement is
as follows
ax u c
au xc
a c xu
.
−
=
by vd
bv yd
bd yv
AC
a matrix of order
BD
2n over R, A, B, C, D square blocks, α = det A = 0, β = det B = 0, F =
αB ∗ D − βA∗ C.
Then every minor of order k of the matrix F (k ≤ n) is divisible by (αβ)k−1
and the following identity holds
Theorem 2. Let R be a commutative domain, A =

det F = (αβ)n−1 det A.

(3)

AC
a matrix of order
BD
2n over R, A, B, C, D square blocks, α = det A = 0, β = det B = 0 and F =
αB ∗ D − βA∗ C.
Then (αβ)−n+2 F ∗ ∈ Rn and

Theorem 3. Let R be a commutative domain, A =

A∗ =

α−1 |A|I −α−2 β −1 A∗ C
0
α−1 β −1 I

I
0
0 (αβ)−n+2 F ∗

I 0
−βI αI

A∗ 0
0 B∗

.
(4)

488

A. Akritas and G.Malaschonok

AC
a
BD
matrix of order 2n (n ≥ 2) over R, such that every minor of order k is divisible
by γ k−1 , A, B, C, D square blocks, α = γ 1−n det A = 0, β = γ 1−n det B = 0,
A∗ = γ 2−n A∗ , B∗ = γ 2−n B ∗ and F = (αγ −1 B∗ D − βγ −1 A∗ C).
Then,
α−1 γ 1−2n |A|I −(α2 βγ)−1 A∗ C
×
γ 2−2n A∗ =
0
(αβγ)−1 I
Theorem 4. Let R be a commutative domain, 0 = γ ∈ R, A =

I
0
0 (αβ)−n+2 F ∗

I 0
−βI αI

A∗ 0
0 B∗

.

(5)

Here γ 2−2n A∗ and the last three factors on the right-hand side of (5) are matrices
over R.

3

The Algorithm

Using the theorems we proved about the factorization of the adjoint matrix we
now introduce the algorithm for computing it along with the determinant of a
given matrix.
AC
Let R be a commutative domain, 0 = γ ∈ R, A =
a matrix of
BD
order 2n = 2N over R, such that every minor of order k is divisible by γ k−1 .
Moreover, we assume that all minors, on which a division is performed during
the computation of the adjoint matrix, are non-zero.
The inputs to the algorithm are the matrix A and the number γ = 1.
The outputs from the algorithm are γ 1−2n |A| and γ 2−2n A∗ . Note here that
the determinant of the matrix has been divided by γ 2n−1 , and that the adjoint
matrix has been divided by γ 2n−2 .
Algorithm ParAdjD
{ γ 1−2n |A|, γ 2−2n A∗ }=ParAdjD(A, γ)
AC
, and γ. A, B, C, D ∈ Rn×n , γ ∈ R.
BD
Output: {γ 1−2n |A|, γ 2−2n A∗ }.

Input: A =

1. If the matrix A is of order two, then
output:
γ −1 (AD − BC),

D −C
−B A

.

otherwise, proceed to the next point.
2. Concurrently compute
{ α, A∗ }=ParAdjD(A, γ) and { β, B∗ }=ParAdjD(B, γ).

Computation of Adjoint Matrix

489

3. Concurrently compute
∗
N = γ −1 B D and M = γ −1 A∗ C, and then
F = αN − βM.
4. Compute
{ ϕ, F∗ }=ParAdjD(F, αβ).
5. Concurrently compute
ϕ = γ −1 ϕ, H = α−1 γ −1 F∗ A∗ and L = β −1 γ −1 F∗ B∗ .
6. Concurrently compute
H = α−1 (ϕ A∗ + M H) and L = −α−1 M L.
Output:
H L
.
ϕ,
−H L
3.1

Example

Input:
⎛

A=

AC
BD

⎞
0 2 −2 2
⎜ 1 −3 1 −2 ⎟
⎟
=⎜
⎝ 3 0 −3 0 ⎠ , γ = 1.
−1 3 −1 1

Output:

⎛

ϕ,

H L
−H L

=

⎞
−9 −12 4 −6
⎜ −6 −6 2 0 ⎟
⎟
6, ⎜
⎝ −9 −12 2 −6 ⎠ .
0 −6 0 −6

References
1. Kaltofen E.: On Computing Determinants of Matrices Without Divisions. Proc.
Internat. Symp. Symbolic Algebraic Comput. ISSAC’92. ACM Press, (1992) 342–
349.
2. Kaltofen E., Villard G.: On the complexity of computing determinants. Proc. Fifth
Asian Symposium on Computer Mathematics, ASCM 2001. Extended abstract.
(2001) 13–27.
3. Malaschonok G.I.: Eﬀective Matrix Methods in Commutative Domains. Formal
Power Series and Algebraic Combinatorics. Springer (2000) 506–517.

