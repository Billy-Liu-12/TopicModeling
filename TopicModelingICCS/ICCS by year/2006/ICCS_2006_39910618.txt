Unsplittable Anycast Flow Problem:
Formulation and Algorithms
Krzysztof Walkowiak
Chair of Systems and Computer Networks, Faculty of Electronics,
Wroclaw University of Technology, Wybrzeze Wyspianskiego 27, 50-370 Wroclaw, Poland
Tel.: (+48)713203539; Fax.: (+48)713202902
Krzysztof.Walkowiak@pwr.wroc.pl

Abstract. Our discussion in this article centers on a new optimization problem
called unsplittable anycast flow problem (UAFP). We are given a directed network with arc capacities and a set of anycast requests. Anycast is a one-to-oneof-many delivery technique that allows a client to choose a content server of a
set of replicated servers. In the context of unsplittable flows, anycast request
consists of two connections: upstream (from the client to the server) and the
downstream (in the opposite direction). The objective of UAFP is to find a subset of the requests of maximum total demand for which upstream and downstream connection uses only one path and the capacity constraint is satisfied. To
our best survey, this is the first study that addresses the UFP (unsplittable flow
problem) in the context of anycast flows. After formulation of UAFP, we propose several heuristics to solve that problem. Next, we present results of simulation evaluation of these algorithms.
Keywords: UFP, connection-oriented network, anycast.

1 Introduction
In this paper we consider a new version of the Unsplittable Flow Problem (UFP) for
anycast flows. Anycast is a one-to-one-of-many technique to deliver a packet to one
of many hosts. Anycast paradigm becomes popular, since there is a need to facilitate
the distribution of popular content (electronic music, movies, books, software) in the
Internet. One of exemplary techniques that apply anycast traffic is Content Delivery
Network (CDN). For more details on anycast flows and CDNs refer to [3], [8-10]. In
this work we consider on anycast unsplittable flows. Several connection-oriented (co) techniques apply unsplittable flows, e.g. MultiProtocol Label Switching (MPLS),
Asynchronous Transfer Mode (ATM), optical network [2]. In c-o networks an anycast
demand consists of two connections: one from the client to the server (upstream) and
the second one in the opposite direction (downstream). Upstream connection is used
to send user’s requests. Downstream connection carries requested data. Consequently,
each anycast demand is defined by a following triple: client node, upstream bandwidth requirement and downstream bandwidth requirement. In contrast, a unicast
demand is defined by the following triple: origin node, destination node and bandwidth requirement. According to observations of real networks and user behavior,
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part I, LNCS 3991, pp. 618 – 625, 2006.
© Springer-Verlag Berlin Heidelberg 2006

Unsplittable Anycast Flow Problem: Formulation and Algorithms

619

there is asymmetry in anycast flows, since usually more data is received by clients
then is sent to content servers Therefore, bandwidth of upstream connection is typically much lower than bandwidth of downstream connection.
The considered unsplittable anycast flow problem (UAFP) can be formulated as
follows
Given
Minimize
Over
Subject to

network topology, anycast traffic demand pattern, location of replica
servers, link capacity
volume of un-established anycast requests
selection of replica server, routing (path assignment)
anycast connection-oriented flow constraints, capacity constraints

To the best of the author’s knowledge, this is the first work that addresses the UFP
in the context of anycast flows. The objectives of this paper are twofold: mathematical formulation of the UAFP and development of effective heuristics for the UAFP.
Evaluation of proposed algorithms through simulation experiments is also provided.

2 Related Work
The most intuitive approach to solve unicast UFP is the greedy algorithm (GA),
which proceed all connections in one pass and either allocate the processed request to
the shortest path or reject the request if such a feasible path does not exist, i.e. origin
and destination node of the connection do not belong to the same component of considered graph [5]. A modification of GA called bounded greedy algorithm (BGA)
works as follows [5], [7]: Let L be a suitable chosen parameter. Reject the request if
there is no feasible path of the length at most L hops. Otherwise accept the request.
Another version of GA is careful BGA (cBGA) proposed in [7]. Online algorithms
can also solve the UFP. Several such algorithms were developed in the context of
dynamic routing in MPLS networks [6]. MPLS supports the explicit mode, which
enables the source node of the LSP to calculate the path. The main goal of dynamic
routing is to minimize the number of rejected calls or the volume of rejected calls.
The most common approach to dynamic routing is the shortest path first (SPF) algorithm based on an administrative weight (metric).

3 Problem Formulation
In this section we will formulate the UAFP. We consider an offline UAFP, in which
we know a priori all requests that are to be located in the network. To mathematically
represent the problem we introduce the following notations
Sets:
V set of vertices representing the network nodes.
A set of arcs representing network directed links.
P set of connections in the network. A connection can be of two types: downstream or upstream.
Πp the index set of candidate routes (paths) π kp for connection p. Route π 0p is a

620

K. Walkowiak

“null” route, i.e. it indicates that connection p is not established. For upstream
connection, paths are between client node and server. Analogously, downstream candidate paths connect server and client node.
Xr set of variables xik , which are equal to one. Xr determines the unique set of
currently selected routes.
Constants:
δ k equal to1, if arc a belongs to route k realizing connection p; 0 otherwise
pa

Qp Volume (estimated bandwidth requirement) of connection p
ca capacity of arc a
τ(p) index of the connection associated with connection p. If p is a downstream
connection τ(p) must be an upstream connection and vice versa.
o(π) origin node of route π. If π is a “null”, then route, o(π)=0.
d(π) destination node of route π. If π is a “null”, then route, d(π)=0.
Variables:
x k 1 if route k∈Πp is selected for connection p and 0 otherwise.
p

fa flow of arc a.
The UAFP can be formulated as follows

LF = min

0
∑ x pQ p

(1)

p∈P

Xr

subject to
k
∑ xp =1

∀p ∈ P

(2)

x kp ∈ {0,1} ∀p ∈ P, ∀k ∈ Π p

(3)

k∈Π p

fa = ∑

k k
∑ δ pa x p Q p

p∈P k∈Π p

f a ≤ ca

∑ x kp d (π kp ) =

k∈Π p

∑

k ∈Πτ ( p )

∀a ∈ A

(4)

∀a ∈ A

(5)

xτk( p ) o(πτk( p ) )

⎛
X r = ⎜ ∪ xik
⎜
k
⎝ i,k :xi =1

∀p ∈ P

(6)

⎞

{ }⎟⎟

(7)

⎠

The objective function (1) is a lost flow (LF). Function LF is as a sum of all demands (connections) that are not established (variable x 0p is 1). It should be noted
that also an equivalent objective function could be applied, in which we maximize the
total volume of established connections. Condition (2) states that the each connection

Unsplittable Anycast Flow Problem: Formulation and Algorithms

621

can use only one route or is not established. Therefore, we index the subscript of variable x kp starting from 0, i.e. variable x 0p indicates whether or not connection p is
established. If it is established, x 0p =0 and one of variables x kp (k>0), which is equal
to 1, indicates the selected path. Constraint (3) ensures that decision variables are
binary ones. (4) is a definition of an arc flow. Inequality (5) denotes the capacity constraint. Equation (6) guarantees that two routes associated with the same anycast demand connect the same pair of nodes. Furthermore, (6) assures that if upstream connection is not established ( x 0p =0 and the “null” route is selected) the downstream
connection of the same anycast demand is not established, and vice versa. Finally, (7)
is a definition of a set X called a selection that includes all variables x, which are
equal to 1. Each selection denotes for each connection either the selected route or
indicates that the particular connection is not established. Note, that we call a connection p established in selection X if x 0p ∉ X .

4 Algorithms
The first, quite intuitive, approach to solve UAFP can be a modification of heuristics
developed for unicast UFP. Now, we shortly discuss how to adapt GA (greed algorithm) to anycast flows. We refer to this new algorithm as AGA (anycast GA). AGA
proceeds all anycast requests in a one pass. Requests can be sorted accordingly to
selected criterion (e.g. bandwidth requirement). For each request we perform the
following procedure. First, we construct a residual network for downstream connection of considered anycast demand, i.e. we remove from the network all arcs that have
less residual capacity than volume of downstream connection. Next, we find shortest
paths between each server and client node. If none path exists, the demand is rejected.
Otherwise, we select a shortest path among all found paths. We repeat the same procedure for upstream connection. The residual network is computed again. However,
in this case we try to find a shortest path from the client node to the server node already selected for downstream connection. This follows from the asymmetry of anycast flows discussed in Section 1, because the downstream connection is more important than upstream connection.
Now we propose two new offline algorithms for the UAFP: Anycast Greedy Algorithm with Preemption (AGAP) and Anycast Greedy Algorithm with Preemption and
Flow Deviation (AGAPFD). Both algorithms use the preemption mechanism, which
consists in removing from the network already established connections in order to
enable establishment of other connections to minimize the objective function.
We apply some temporary variables in both algorithms. Sets H and F are selections
including decision variables x equal to 1. Sets B and D include indexes of connections. Operator first(B) returns the index of the first connection in set B. Operator
sort(H) returns indexes of connections included in H ordered according to their paths’
length given by the metric CSPF [1] starting with the longest. We select CSPF metric
due to its effectiveness in many dynamic routing problems. Operator AGA(H,i,j) returns either the pair of indexes of calculated routes: downstream and upstream

622

K. Walkowiak

according to AGA or a pair of zeros, if a pair feasible routes does not exist for connections i and j associated with the same anycast demand. Operator ue(H) returns
indexes of connections, which are not established in H, while es(H) returns indexes of
connections established in H.
Algorithm AGAP
Step 1. Let H denote an initial solution, in which none connection is established. Let
B:=sort(H).
Step 2. Set i:=first(B) and {d,u}:=AGA(H,i,τ(i)). Calculate B:=B-{i}, B:=B-{τ(i)}).

( { }) { }

( { }) { }

a) If d>0 set H := H − xi0 ∪ xiu , H := H − xτ0(i ) ∪ xτd(i) . Go to step 2c.
b) If d=0 go to step 3.
c) If B = ∅ then stop the algorithm. Otherwise go to step 2.
Step 3. Set D:=es(sort(H)).

( { }) { }
set D:=D-{τ(j)} and F := (F − {
})∪ { }, where xτ ∈ H .

a) Set j:=first(D). Set D:=D-{j} and F := H − x mj ∪ x 0j , where x mj ∈ H . Next
xτm( j )

b) Find

{d,u}:=AGA(F,i,τ(i)).

H := H −

xτ0(i )

m
( j)

xτ0( j )

If

( { })∪ { } and go to step 2.

d>0

( { }) { }

H := H − xi0 ∪ xiu ,

set

xτd(i)

c) If d=0 then go to step 3d.
d) If D = ∅ then go to step 2c. Otherwise go to step 3a.
The idea of AGAP is as follows. We start with an “empty” solution – none connection is established. We process connections one-by-one sorted according to selected
criterion. If the AGA can find a pair of feasible paths for current anycast demand, we
establish upstream and downstream connections (step 2a). Otherwise (step 2b), we go
back to already established connections and preempt each of these demands (step 3a)
trying to establish again considered anycast connections (step 3b-d).
Algorithm AGAPFD(α,β)
Step 1. Let X1 denote a feasible initial solution given by AGA. Sort all connections in
X1 according to their bandwidth requirements starting with the heaviest. Set j:=1.
Step 2. Set H:=Xj. Let B:=sort(H). Let l denote the number of connections established
in H. Set k:=0.

( { }) { }

a) Set i:=first(B). Calculate B := (B − {}
i ) , B:=B-{τ(i)}), F := H − xim ∪ xi0
where

xim

( { })∪ { }, where

∈ H , F := F −

xτm(i )

xτ0(i )

xτm(i ) ∈ H

.

b) Set H:=F and k:=k+1.
c) If k>α⋅l then go to step 3. Otherwise go to step 2a.
Step 3. Let F:=AFDNB(H) be a selection of route variables calculated according to
the Anycast Flow Deviation for Non-bifurcated flows algorithm [10].
Step 4. Set H:=F and B:=ue(H).
a) Set i:=first(B) and find {d,u}:=AGA(H,i,τ(i)). Calculate B:=B-{i}, B:=B-{τ(i)}),

( { }) { }

( { }) { }

H := H − xi0 ∪ xiu and H := H − xτ0(i ) ∪ xτd(i) .
b) Set H:=F.

Unsplittable Anycast Flow Problem: Formulation and Algorithms

623

c) If B = ∅ then go to step 5. Otherwise go to step 4a.
Step 5. If j≥β stop the algorithm. Otherwise set j:=j+1, Xj:=H and go to step 2.
The algorithm has two input parameters that can be calibrated. Parameter α ∈ [0,1]
is used to find set for preemption of α established connections. The second parameter
of the GAPFD algorithm - β - is a number of iterations for which the main loop of the
algorithm is repeated. The main idea of the AGAPFD algorithm is as follows. We
start with a feasible solution X1, found by AGA. Next, in step 2 we remove from the
network a number of connections. We find α⋅l connections with the longest routes
computed according to the CSPF metric [1] assigned to each arc, where l denotes the
number of established connections in a given selection. Next, we remove these connections. The major goal of preemption is to remove connections having routes using
the most congested arcs. In Step 3 we re-optimize routes of established connections in
order to change the allocation of arcs’ flows and enable creation of as many as possible of un-established connections, what should yield improvement of UAFP objective
function. We use the Anycast Flow Deviation for Non-bifurcated flows (AFDNB)
algorithm proposed in [10]. Note that AFDNB uses as objective the network delay
function, which includes the capacity constraint (5) as a penalty function. This guarantees feasibility of obtained selection. Furthermore, former studies shows that the
delay function provides proportional allocation of network flows – more open capacity is left for other demands [4]. Since AGA processes connections sequentially, there
is no chance to change the route of already established connections. Running of
AFDNB in step 4 eliminates this constraint and enables re-optimization of already
established routes. In Step 4 we process all un-established connections using AGA.
The main loop of the algorithm (Steps 2-5) is repeated β times.

5 Results
Algorithms AGA, AGAP, AGAPFD were coded in C++. The network on which we
conduct our experiment consists of 36 nodes and 144 directed links [10]. We test 10
demand patterns for 5 various locations of 2, 3, or 4 content servers. Each of 10 demand patterns includes 360 anycast requests generated randomly. Due to asymmetry
of anycast flows, we assume that upstream bandwidth is 0.1 of the downstream bandwidth. To compare results we apply competitive ration performance indicator. The
competitive ration is defined as the difference between result obtained for a particular
algorithm and the minimum value of objective function yielded by the best algorithm.
For instance, if in a test consisting of simulations of various algorithms the minimum
value of lost flow is 2000 and the considered algorithm yields 2500; the competitive
ration is calculated as follows: (2500-2000)/2500=20%. For presentation of aggregate
results we apply the aggregate competitive ration, which is a sum of competitive
rations over all considered experiments.
The first objective of numerical experiments was evaluation of various metrics and
orderings for AGA. We have tested two link metrics: HOP and CSPF [1]. Demands
were sorted according to the bandwidth requirement of downstream connection in
decreasing and increasing order. In Table 1 we report aggregate competitive ration of
AGA for these cases. We can watch that the best result provides CSPF metric and
demand sorted in decreasing order.

624

K. Walkowiak

Table 1. Aggregate competitive ration of AGA using ordering CDLI and various metrics for
experiment C
Decreasing
Hop
3.5%
14.6%
52.8%

Servers
2
3
4

Decreasing
CSPF
3.0%
3.0%
7.9%

Increasing
HOP
152.7%
415.9%
1495.4%

Increasing
CSPF
165.3%
426.4%
1536.6%

The next goal of experiments was tuning of AGAPFD. Due to initial trial runs we
decided to set the number of iterations (parameter β) to 10. We run simulations for the
following values of parameter α={0.0; 0.05; 0.1; 0.2; 0.3; 0.4; 0.5; 0.6; 0.7; 0.8; 0.9;
1.0}. In Fig. 1 we report comparison of results obtained for tested values of α. Due to
results presented in Fig. 1 we decide to set α=0.3 for further simulations.

Competitive Ration

1000%
2 replicas

3 replicas

4 replicas

100%

10%

1%
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

Calibration Parameter

Fig. 1. Aggregate competitive ration of parameter α for various numbers of content servers

Finally, we run experiments to compare performance of AGA, AGAP and
AGAPFD(0.3,10). In Table 2 we present aggregate competitive ration for these algorithms. We can see that AGAPFD outperforms other methods – in all cases it can find
the best result. The difference between AGAP and AGA increases with the number of
content servers.
The main drawback of AGAPFD is the calculation time – AGAPFD needs about
25 times more decision time than AGA. Most of the time is spent on running AFDNB
algorithm. AGAP needs about 3-4 times more than AGA. However, it should be
noted that we consider the offline UAFP. Consequently, the decision time is not the
most important criterion in our considerations.
Table 2. Aggregate competitive ration of tested algorithms
Servers
2
3
4

AGA
6.50%
31.00%
156.64%

AGAP
6.02%
27.42%
112.90%

AGAPFD(0.3,10)
0.00%
0.00%
0.00%

Unsplittable Anycast Flow Problem: Formulation and Algorithms

625

6 Conclusion
In this paper, we have formulated the Unsplittable Anycast Flow Problem. To our best
knowledge, this is the first survey that addresses the UFP in the context of anycast
flows. We have developed three heuristics solving offline version of UAFP. Through
simulations we have tuned and compared the algorithms. The UAFP problem is motivated by service provider needs for fast deployment of bandwidth guaranteed services
enabling fast and effective distribution of popular content over Internet. Results of our
work can be applied for optimization of flows of Content Delivery Networks located
in connection-oriented environment, e.g. MPLS network.
Acknowledgements. This work was supported by a research project of the Polish
State Committee for Scientific Research carried out in years 2005-2007.

References
1. Crawley, E., Nair, R., Jajagopalan, B., Sandick, H.: A Framework for QoS-based Routing
in the Internet. RFC2386 (1998)
2. Grover, W.: Mesh-based Survivable Networks: Options and Strategies for Optical, MPLS,
SONET and ATM Networking. Prentice Hall PTR, Upper Saddle River, New Jersey
(2004)
3. Hao, F., Zegura, E., Ammar, M.: QoS routing for anycast communications: motivation and
an architecture for DiffServ networks. IEEE Communication Magazine, 6 (2002), 48-56
4. Kasprzak, A.: Designing of Wide Area Networks. Wroclaw Univ. of Tech. Press, (2001)
5. Kleinberg, J.: Approximation algorithms for disjoint paths problems. PhD thesis, MIT,
Cambridge, (1996)
6. Kodialam, M., Lakshman, T.: Minimum Interference Routing with Applications to MPLS
Traffic Engineering. In Proceedings of INFOCOM (2000), 884-893
7. Kolman, P., Scheideler, C.: Improved bounds for the unsplittable flow problem. In Proc.
of the Symposium on Discrete Algorithms (2002), 184-193
8. Markowski, M., Kasprzak, A.: The web replica allocation and topology assignment problem in wide area networks: algorithms and computational results. Lectures Notes in Computer Science, Vol. 3483 (2005), 772-781
9. Peng,
G.:
CDN:
Content
Distribution
Network.
Technical
Report,
sunysb.edu/tr/rpe13.ps.gz, (2003)
10. Walkowiak, K.: Heuristic Algorithm for Anycast Flow Assignment in ConnectionOriented Networks. Lectures Notes in Computer Science, Vol. 3516 (2005), 1092-1095

