Self-synchronization of Cellular Automata:
An Attempt to Control Patterns
J.R. S´
anchez1 and R. L´
opez-Ruiz2
1

2

Fac. Ingenier´ıa, Universidad Nacional de Mar del Plata,
Justo 4302, 7600 Mar del Plata, Argentine
jsanchez@fi.mdp.edu.ar
Department of Computer Science and BIFI, Facultad de Ciencias,
Universidad de Zaragoza, 50009 - Zaragoza, Spain
rilopez@unizar.es

Abstract. Cellular automata display conﬁgurations that are constant
in time. We implement a stochastic synchronization between the present
conﬁgurations of the system and its precedent ones in order to search
for these constant patterns. For most of the known evolution rules with
complex behavior a dynamic competition among all the possible constant patterns is established and no stationary regime is reached. For the
particular rule coded by the decimal number 18, a self-synchronization
phenomenon can be obtained, even when strong modiﬁcations to the
synchronization method are applied.

1

Introduction

Cellular automata (CA) are discrete dynamical systems, discrete both in space
and time. The simplest one dimensional version of a cellular automaton is formed
by a lattice of N sites or cells, numbered by an index i = 1, . . . , N , and with
periodic boundary conditions. In each site, a local variable σi taking a binary
value, either 0 or 1, is asigned. The binary string σ(t) formed by all sites values
at time t represents a conﬁguration of the system. The system evolves in time
by the application of a rule Φ. A new conﬁguration σ(t + 1) is obtained under
the action of the rule Φ on the state σ(t). Then, the evolution of the automata
can be writen as
σ(t + 1) = Φ [σ(t)].
(1)
If coupling among nearest neighbors is used, the value of the site i, σi (t + 1),
at time t + 1 is a function of the value of the site itself at time t, σi (t), and
the values of its neighbors σi−1 (t) and σi+1 (t) at the same time. Then, the local
evolution is expressed as
σi (t + 1) = φ(σi−1 (t), σi (t), σi+1 (t)),

(2)

being φ a particular realization of the rule Φ. For such particular implementation,
there will be 23 diﬀerent local input conﬁgurations for each site and, for each
one of them, a binary value can be assigned as output. Therefore there will be 28
V.N. Alexandrov et al. (Eds.): ICCS 2006, Part III, LNCS 3993, pp. 353–359, 2006.
c Springer-Verlag Berlin Heidelberg 2006

354

J.R. S´
anchez and R. L´
opez-Ruiz

diﬀerent rules φ, also called the Wolfram rules. Each one of these rules produces
a diﬀerent dynamical evolution. In fact, dynamical behavior generated by all 256
rules were already classiﬁed in four generic classes. The reader interested in the
details of such classiﬁcation is addressed to the original reference [1].
CA provide us with simple dynamical systems, in which, we would like to ﬁnd
diﬀerent methods of synchronization. A stochastic synchronization technique
was introduced by Morelli and Zanette [2] that works in synchronizing two CA
evolving under the same rule Φ. The two CA are started from diﬀerent initial
conditions and they are supposed to have partial knowledge about each other.
In particular, the CA conﬁgurations, σ 1 (t) and σ 2 (t), are compared at each time
step. Then, a fraction p of the total diﬀerent sites are made equal (synchronized).
The synchronization is stochastic since the location of the sites that are going
to be equal is decided at random. Hence, the dynamics of the two coupled CA,
σ(t) = (σ 1 (t), σ 2 (t)), is driven by the successive application of two operators:
1. the deterministic operator given by the CA evolution rule Φ, Φ[σ(t)] =
(Φ[σ 1 (t)], Φ[σ 2 (t)]), and
2. the stochastic operator Γp that produces the result Γp [σ(t)], in such way
that, if the sites are diﬀerent (σi1 = σi2 ), then Γp sets both sites equal to σi1
with the probability p/2 or equal to σi2 with the same probability p/2. In
any other case Γp leaves the sites unchanged.
Therefore the temporal evolution of the system can be written as
σ(t + 1) = (Γp ◦ Φ)[σ(t)] = Γp [(Φ[σ 1 (t)], Φ[σ 2 (t)])].

(3)

A simple way to visualize the transition to synchrony can be done by displaying the evolution of the diﬀerence automaton (DA),
δi (t) =| σi1 (t) − σi2 (t) | .

(4)

The mean density of active sites for the DA
ρ(t) =

1
N

N

δi (t),

(5)

i=1

represents the Hamming distance between the automata and veriﬁes 0 ≤ ρ ≤ 1.
The automata will be synchronized when limt→∞ ρ(t) = 0. As it has been described in [2] that two diﬀerent dynamical regimes, controlled by the parameter
p, can be found in the system behavior:
p < pc → limt→∞ ρ(t) = 0 (no synchronization),
p > pc → limt→∞ ρ(t) = 0 (synchronization),
being pc the parameter for which the transition to the synchrony occurs. When
p pc complex structures can be observed in the DA time evolution. In Fig. 1,
typical cases of such behavior are shown near the synchronization transition. Lateral panels represent both CA evolving in time where the central strip displays

Self-synchronization of Cellular Automata
Rule 22

Rule 30

Rule 90

Rule 110

355

Fig. 1. Spatio-temporal patterns near the synchronization transition. Lateral strips
represent both CA evolving in time where the central strip displays the evolution of
the corresponding DA. Time goes from top to bottom. Lattice size is N = 100 and the
number of iterations is T = 250. The stochastic coupling between both CA is p = 0.23.

the evolution of the corresponding DA. When p comes close to the critical value
pc the evolution of δ(t) becomes rare and resembles the problem of structures
trying to percolate in the plane [3]. A method to detect this kind of transition,
based in the calculation of a statistical measure of complexity for patterns, has
been proposed in the Refs. [4].

2
2.1

Self-synchronization of Cellular Automata
First Self-synchronization Method

Let us now take a single cellular automaton [5, 6]. If σ 1 (t) is the state of the
automaton at time t, σ 1 (t) = σ(t), and σ 2 (t) is the state obtained from the
application of the rule Φ on that state, σ 2 (t) = Φ[σ 1 (t)], then the operator Γp
can be applied on the pair (σ 1 (t), σ 2 (t)), giving rise to the evolution law
σ(t + 1) = Γp [(σ 1 (t), σ 2 (t))] = Γp [(σ(t), Φ[σ(t)])].

(6)

356

J.R. S´
anchez and R. L´
opez-Ruiz

Fig. 2. Rule 90 has two stable patterns: one repeats the 011 string and the other one
the 00 string. Such patterns are reached by the ﬁrst self-synchronization method but
there is a dynamical competition between them. In this case p = 0.9. Binary value 0 is
represented in white and 1 in black. Time goes from top to bottom.

The application of the Γp operator is as follows. When σi1 = σi2 , the sites i of
the state σ 2 (t) are updated to the correspondent values taken in σ 1 (t) with a
probability p. The updated array σ 2 (t) is the new state σ(t + 1).
It is worth to observe that if the system is initialized with a conﬁguration
constant in time for the rule Φ, Φ[σ] = σ, then this state σ is not modiﬁed
when the dynamic equation (6) is applied. Hence the evolution will produce a
pattern constant in time. However, in general, this stability is marginal. A small
modiﬁcation of the initial condition gives rise to patterns variable in time. In fact,
as the parameter p increases, a competition among the diﬀerent marginally stable
structures takes place. The dynamics drives the system to stay close to those
states, although oscillating continuously and randomly among them. Hence, a
complex spatio-temporal behavior is obtained. Some of these patterns can be
seen in Fig. 2. However, in rule 18, the pattern becomes stable and, independently
of the initial conditions, the system evolves toward this state, which is the null
pattern in this case.
2.2

Second Self-synchronization Method

Now we introduce a new stochastic element in the application of the operator Γp .
To diﬀerentiate from the previous case we call it Γ˜p˜. The action of this operator
consists in applying at each time the operator Γp , with p chosen at random in
the interval (0, p˜). The evolution law of the automaton is in this case:
σ(t + 1) = Γ˜p˜[(σ 1 (t), σ 2 (t))] = Γ˜p˜[(σ(t), Φ[σ(t)])].

(7)

Self-synchronization of Cellular Automata

357

Fig. 3. Mean density ρ vs. pmax = p˜ for diﬀerent rules evolving under the second
synchronization method. The existence of a transition to a synchronized state can be
clearly observed for rule 18.

The DA density between the present state and the previous one, deﬁned as
δ(t) =| σ(t) − σ(t − 1) |, is plotted as a function of p˜ for diﬀerent rules Φ in Fig.
3. Only when the system becomes self-synchronized there will be a fall to zero
in the DA density. Let us observe again that the behavior reported in the ﬁrst
self-synchronization method is newly obtained in this case. Rule 18 undergoes
a phase transition for a critical value of p˜. For p˜ greater than the critical value,
the method is able to ﬁnd the stable structure of the system. For the rest of the
rules the freezing phase is not found. The dynamics generates patterns where the
diﬀerent marginally stable structures randomly compete. Hence the DA density
decays linearly with p˜ (see Fig. 3).
2.3

Third Self-synchronization Method

At last, we introduce another type of stochastic element in the application of the
rule Φ. Given an integer number L, the surrounding of site i at each time step is
redeﬁned. A site il is randomly chosen among the L neighbors of site i to the left,
(i − L, . . . , i− 1). Analogously, a site ir is randomly chosen among the L neighbors
of site i to the right, (i + 1, . . . , i + L). The rule Φ is now applied on the site i using
the triplet (il , i, ir ) instead of the usual nearest neighbors of the site. This new
version of the rule is called ΦL , being ΦL=1 = Φ. Later the operator Γp acts in
identical way as in the ﬁrst method. Therefore, the dynamical evolution law is:
σ(t + 1) = Γp [(σ 1 (t), σ 2 (t))] = Γp [(σ(t), ΦL [σ(t)])].

(8)

358

J.R. S´
anchez and R. L´
opez-Ruiz

Fig. 4. Mean density ρ vs. p for rule 18 evolving under the third self-synchronization
method. The existence of a transition to a synchronized state can be observed despite
of the randomness in the election of neighbors within a range L, up to L = 4.

Fig. 5. Mean density ρ vs. p for diﬀerent rules evolving under the third selfsynchronization method. The density of the system decreases linearly with p.

Self-synchronization of Cellular Automata

359

The DA density as a function of p is plotted in Fig. 4 for the rule 18 and in Fig.
5 for other rules. It can be observed again that the rule 18 is a singular case that,
even for diﬀerent L, maintains the memory and continues to self-synchronize. It
means that the inﬂuence of the rule is even more important than the randomness
in the election of the surrounding sites. The system self-synchronizes and decays
to the corresponding stable structure. Contrary, for the rest of the rules, the DA
density decreases linearly with p even for L = 1 as shown in Fig. 5. The systems
oscillate randomly among their diﬀerent marginally stable structures as in the
previous methods.

3

Conclusions

Inspired in stochastic synchronization methods for CA, diﬀerent schemes for selfsynchronization of a single automaton have been proposed and analyzed in this
work. Self-synchronization of a single automaton can be interpreted as a strategy
for searching and controlling the structures of the system that are constant in
time. In general, it has been found that a competition among all such structures is
established, and the system ends up oscillating randomly among them. However,
rule 18 is a unique position among all rules because, even with random election
of the neighbors sites, the automaton is able to reach the conﬁguration constant
in time.

References
1. Wolfram, S.: Statistical mechanics of cellular automata. Rev. Mod. Phys. 55 (1983)
601-644
2. Morelli, L.G., Zanette, D.H.: Synchronization of stochastically coupled cellular
automata. Phys. Rev. E 58 (1998) R8-R11 ; Synchronization of coupled extended
dynamical systems: a short review. Int. J. Bifurcation and Chaos 13 (2003) 1-16
3. Pomeau, Y.: Front motion, metastability and subcritical bifurcations in front motion. Physica D 23 (1986) 3-11
4. S´
anchez, J.R., L´
opez-Ruiz, R.: A method to discern complexity in two-dimensional
patterns generated by coupled map lattices. Physica A 355 (2005) 633-640 ; Detecting synchronization in spatially extended systems by complexity measurements.
Discrete Dynamics in Nature and Society 9 (2005) 337-342
5. Toﬀoli, T., Margolus, N.: Cellular automata machines: a new environment for modeling (1987) MIT-Press
6. Ilachinski, A.: Cellular automata: a discrete universe (2001) World Scientiﬁc

