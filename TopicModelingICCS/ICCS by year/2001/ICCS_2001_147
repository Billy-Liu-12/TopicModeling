A Protocol for Multi-threaded Processes
with Choice in π-Calculus
Kazunori Iwata, Shingo Itabashi, Naohiro Ishii
Dept. of Intelligence and Computer Science, Nagoya Institute of Technology,
Gokiso-cho, Showa-ku, Nagoya, 466-8555, Japan
kazunori@egg.ics.nitech.ac.jp
shingo@egg.ics.nitech.ac.jp
ishii@egg.ics.nitech.ac.jp
Abstract. We have proposed a new protocol for the multi-threaded
processes with choice written in π-calculus[1,2]. This protocol frees the
multi-threaded processes from deadlock. It has been deﬁned as transition
rules. We have shown why the protocol avoids the deadlock in the multithreaded processes.

1

Introduction

We propose a new protocol for multi-threaded processes with choice written in
π-calculus. π-calculus is a process calculus which can describe a channel-based
communication among distributed agents. Agents communicate with each other
in π-calculus according to the following rules:
1. A message is successfully delivered when two processes attempt an output
and an input at the same time.
2. Agents are allowed to attempt outputs and inputs at multiple channels simultaneously, with only one actually succeeding.
This process of communication has been identiﬁed as a promising concurrency
primitive[3,4,5,6,7].
In π-calculus agents have a property to choose one process from concurrent
processes. In order to choose one process, agents get a mutex-lock and execute
the process. The other processes are blocked by the lock and will be stopped,
if the process will be successfully executed. This chosen process may be easily
executed, if agents execute concurrent processes only by itself. However, these
processes are executed by the communication among agents. The mutex-lock is
very complex to avoid deadlock. Hence, we adjust the situations in the communication and deﬁne the protocol to avoid deadlock[7,8,9,10,11,12]. In the protocol,
we appropriate each process in π-calculus to the thread.

2

π -Calculus

π -calculus is a process calculus which is able to describe dynamically changing
networks of concurrent processes. π -calculus contains just two kinds of enti-

ties: process and channels. Processes, sometimes called agents, are the active
components of a system. The syntax of deﬁning a process is as follows:
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2074, pp. 138–147, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

A Protocol for Multi-threaded Processes with Choice in π-Calculus

P ::= xy.P
| x(z).P
| P |Q
| (νx)P
| P + Q
| 0
| !P
| [x = y]P

/*
/*
/*
/*
/*
/*
/*
/*

139

Output */
Input */
Parallel composition */
Restriction */
Summation */
Nil */
Replication */
Matching */

Processes interact by synchronous rendezvous on channels, (also called names
or ports). When two processes synchronize, they exchange a single value, which
is itself a channel.
The output process xy.P1 sends a value y along a channel named x and
then, after the output has completed, continues to be as a new process P1 .
Conversely, the input process x(z).P2 waits until a value is received along a
channel named x, substitutes it for the bound variable z, and continues to be as a
new process P2 {y/z} where, y/z means to substitute the variable z in P2 with the
received value y. The parallel composition of the above two processes, denoted
as xy.P1 | x(z).P2 , may thus synchronize on x, and reduce to P1 | P2 {y/z}.
Fresh channels are introduced by restriction operator ν. The expression
(νx)P creates a fresh channel x with scope P . For example, expression
(νx)(xy.P1 | x(z).P2 ) localizes the channel x, it means that no other process
can interfere with the communication between xy.P1 and x(z).P2 through the
channel x.
The expression P1 + P2 denotes an external choice between P1 and P2 : either
P1 is allowed to proceed and P2 is discarded, or converse case. Here, external
choice means that which process is chosen is determined by some external input. For example, the process xy.P1 | (x(z).P2 + x(w).P3 ) can reduce to either
P1 | P2 {y/z} or P1 | P3 {y/w}. The null process is denoted by 0. If output process
(or input process) is xy.0 (or x(z).0), we abbreviate it to xy (or x(z)).
Inﬁnite behavior is allowed in π-calculus. It is denoted by the replication
operator !P , which informally means an arbitrary number of copies of P running in parallel. This operator is similar to the equivalent mechanism, but more
complex, of mutually-recursive process deﬁnitions.
π -calculus includes also a matching operator [x = y]P , which allows P to
proceed if x and y are the same channel.
→.

3

The Protocol for Multi-threaded Processes with Choice

In this section, we propose a protocol for multi-threaded processes with choice.
The processes concurrently communicate each other. First, we introduce basic
concepts concerning the communication.

140

3.1

K. Iwata, M. Suzuki, and N. Ishii

Basic Concepts

Agent: Agents are units of
concurrent execution of
our concurrent and distributed system. Agents
are implemented as
threads. If agents meet
the choice process, they
make new threads for
each process in choice
process.

Fig. 1. Relationship

Communication Manager: Communication Managers(CMs) manage communication requests on channels from agents. They make possible for agents
to communicate with one another. They have queues which consist of the
communication requests from agents.
Choice Manager: Choice Managers(CHMs) manage choice processes on
agents. They observe the threads made from the choice, and decide which
process should be remained.
The relationship among these elements(Agents, CMs,CHMs) is in Fig. 1.
3.2

The Behavior of Agents

States of an Agent: An agent have the variable to store its state. The set
of possible states of agent is {init, wait-CMout, wait-CMin, wait-CHMid, waitCHM, wait-Res, done, stopped }.
Tab. 1 describes, in terms of state transition rules, the behavior of the agent.
3.3

The Behavior of CHMs

States of a CHM: CHMs have variables named ﬂag and queue. The variable
ﬂag stores the status of one choice process, suspend means the choice process
is suspended now, try means the choice process is tried to execute, done means
the choice process is executed. The variable queue stores the processes in choice
process that are tried to execute by CMs.
Tab. 2 describes the behavior of the CHM.
3.4

The Behavior of CMs

States of a CM: Each CM has two queues named in-xxx and out-xxx (xxx
means arbitrary strings) The queue store the request from agents according to
div

the kind of process. = denotes the process which divides the queue into the ﬁrst
element and the others.
Tab. 3, 4 describes the behavior of the CM.

A Protocol for Multi-threaded Processes with Choice in π-Calculus

4

141

Free Processes from Deadlock

The processes with choice are nondeterministic, thus the executions have various
results. Hence, if the executions are in deadlock, it is diﬃcult to ﬁnd the cause.
In this section, we show why the protocol frees the processes from the deadlock.
To show the freedom from the deadlock, we consider four cases.
1. There is no choice process and the only one paired agents(input and output)
use a channel.
2. There is no choice process and the agents use channels. It means some input
and output agents use the same channel.
3. The ﬁrst process, which a CHM determine to execute, in the choice process
can be executed.
4. The ﬁrst process, which a CHM determine to execute, in the choice process
cannot be executed.

Table 1. Transition Rules of an Agent
Rule
State
R1 init

-

Input

R2

init

-

R3

init

-

R4

wait-CHMid Get
(Cid)
from CHM.

R5

wait-CHM

-

→
x[−
y]

R6

wait-CHM

-

→
x(−
z)

R7

wait-Res

Get
(resume)
from CHM.
R8 wait-Res
Get
(resume)
from CHM.
R9 wait-Res
Get
(stop)
from CHM.
R10 wait-CMout Get
(output)
from CM.
R11 wait-CMin Get
→
(−
v)
from CM.

Process
→
x[−
y]

Next State
Output
wait-CMout Send
→
(in, x, −
y , aid, 0, 0)
to CM.
→
x(−
z)
wait-CMin Send
→
(out, x, −
z , aid, 0, 0)
to CM.
P ≡
wait-CHMid Send
Q + ...
(P, aid)
to CHM.
P ≡
wait-CHM Q + ...

→
x[−
y]
→
x(−
z)
→
x[−
y]
→
x(−
z)

Other Actions
The current process
is not changed.

Each process
in choice
is divided
into one agent
and each agent has
the state wait-CHM.
wait-Res
Send
→
(in, x, −
y , aid, Cid, pid)
to CM.
wait-Res
Send
→
(out, x, −
z , aid, Cid, pid)
to CM.
wait-CMout This thread
is selected
to execute.
wait-CMin This thread
is selected
to execute.
stopped
This thread
is stopped.
init if there
are more processes
otherwise done.
init if there
are more processes
otherwise done.

The state done
means the process
is ﬁnished.
The state done
means the process
is ﬁnished.

142

K. Iwata, M. Suzuki, and N. Ishii
Table 2. Transition Rules of an CHM

Rule
R1 -

State

R2

ﬂag = suspend

R3

ﬂag = try

R4

ﬂag = try
queue = ∅

R5

ﬂag = try
queue

Input
Get
(P, aid)
from Agent.
Get (aid, pid).

Next State
Output
ﬂag = suspend Send
(Cid)
to aid.
ﬂag = try
Send yes
from CM
to CM.
queue
= queue
+ (aid, pid)
ﬂag = suspend -

Get
(aid, pid)
from CM.
Get
(suspend, aid, pid)
from CM.
Get
queue
(suspend, aid, pid)
= queue’

div

R6

→ (aid� , pid� ) from CM.
+ (aid, pid)
+queue’
ﬂag = try
Get
ﬂag = done
(executed, aid, pid)
from CM.

R7

ﬂag = done

Get (aid, pid)
from CM.

-

Other Actions
Numbering each process.
-

Send
yes to CM

-

which sent
(aid� , pid� ).
Send
(resume) to
aid with pid
and (stop) to
aid without pid.
Send no
to CM.

Table 3. Transition Rules of a CM(1)
Rule
State
R1 in-x = ∅
R2

out-x = ∅

R3

in-x � =∅
in-x
div

R4

R5

→ (aid� , 0, 0)
+ in-x’
out-x � =∅
out-x
div
→
→ (aid� , −
z , 0, 0)
+ out-x’
in-x = ∅

R6

out-x = ∅

R7

in-x � =∅
in-x

Input
Get
→
(out, x, −
z , aid, 0, 0)
from agent.
Get
→
(in, x, −
y , aid, 0, 0)
from agent.
Get
→
(out, x, −
z , aid, 0, 0)

Next State
out-x
= out-x
→
+ (aid, −
z , 0, 0)
in-x
= in-x
+ (aid, 0, 0)
in-x = in-x’

Get
→
(in, x, −
y , aid, 0, 0)

out-x = out-x’

Get
→
(out, x, −
z , aid, Cid, pid)
from agent.
Get
→
(in, x, −
y , aid, Cid, pid)
from agent.
Get
→
(out, x, −
z , aid, Cid, pid)
from agent.

out-x
= out-x
→
+ (aid, −
z , Cid, pid)
in-x
= in-x
+ (aid, Cid, pid)
Send (aid, pid) to Cid
and if get yes from Cid then:
in-x = in-x’
Send

Get
→
(in, x, −
y , aid, Cid, pid)
from agent.

(output) to aid
→
(−
z ) to aid�
(execute, aid, pid) to Cid.
if get no from Cid then:
Ignore this input.
Send (aid, pid) to Cid
and if get yes from Cid then:
out-x = out-x’
Send

from agent.

from agent.

div

→ (aid� , 0, 0)
+ in-x’

R8

out-x � =∅
out-x
div

→
→ (aid� , −
z , 0, 0)
+ out-x’

Output
Send
(output) to aid
→
and (−
z ) to aid� .
Send
(output) to aid�
→
and (−
z ) to aid.

(output) to aid�
→
(−
z ) to aid�
(execute, aid, pid) to Cid.
if get no from Cid then:
Ignore this input.
-

A Protocol for Multi-threaded Processes with Choice in π-Calculus

143

Table 4. Transition Rules of an CM(2)
Rule
State
R9 in-x � =∅
in-x

Input
Next State
Output
Get
Send (aid, pid) to Cid
→
(out, x, −
z , aid, Cid, pid) and (aid� , pid� ) to Cid�
from agent.
and if get yes from Cid and Cid� then:

div

→ (aid� , Cid� , pid� )
+ in-x’

R10 out-x � =∅
out-x

in-x = in-x’

Get
→
(in, x, −
y , aid, Cid, pid)
from agent.

div

→ (aid� , Cid� , pid� )
+ out-x’

R11 in-x � =∅
in-x

out-x = out-x’

Get
→
(out, x, −
z , aid, 0, 0)
from agent.

div

→ (aid� , Cid, pid)
+ in-x’

R12 out-x � =∅
out-x
div

→
→ (aid� , −
z , Cid, pid)
+ out-x’

Send
(output) to aid
→
(−
z ) to aid�
(execute, aid, pid)
to Cid
(execute, aid� , pid� )
to Cid� .
if get yes from Cid and no from Cid� then:
in-x = in-x’
Apply these rules again.
if get no from Cid and yes from Cid� then:
Ignore this input.
Send
(suspend, aid� , pid� )
to Cid� .
if get no from Cid and Cid� then:
in-x = in-x’
Ignore this input.
Send (aid, pid) to Cid
and (aid� , pid� ) to Cid�
and if get yes from Cid and Cid� then:
Send
(output) to aid�
→
(−
z ) to aid
(execute, aid, pid)
to Cid
(execute, aid� , pid� )
to Cid� .
if get yes from Cid and no from Cid� then:
out-x = out-x’
Apply these rules again.
if get no from Cid and yes from Cid� then:
Ignore this input.
Send
(suspend, aid� , pid� )
to Cid� .
if get no from Cid and Cid� then:
out-x = out-x’
Ignore this input.
Send (aid, pid) to Cid
and if get yes from Cid then:
in-x = in-x’
Send
(output) to aid
→
(−
z ) to aid� .

Get
→
(in, x, −
y , aid, 0, 0)
from agent.

if get no from Cid then:
in-x = in-x’
Apply these rules again.
Send (aid, pid) to Cid
and if get yes from Cid then:
out-x = out-x’
Send
(output) to aid�
→
(−
z ) to aid.
if get no from Cid then:
out-x = out-x’
Apply these rules again.

144

K. Iwata, M. Suzuki, and N. Ishii

Case 1 Let the input process be Ain and the output process Aout . Each process
uses the same link. We consider the process Ain is registered to CMs before
Aout .
1. By R2 in Tab. 3, the id of Ain is registered to in-x. Then, the state of
Ain is changed to wait-CMin by R2 in Tab. 1
2. If Aout is registered to a CM, by R3 in Tab. 3, the value in Aout is output
to the process indicated by the id in the top of in-x. Then, Ain gets the
value from the CM and executes next process by R11 in Tab. 1. The
state of Aout gets the results from the CM and executes next process by
R10 in Tab. 1.
Hence, the process Ain and Aout can communicate each other.
Case 2 Let the nth input and the nth output processes which use the same
channel exist.
1. The mth input processes have already registered to CMs.
a) If m == 1 (the length of in-x is 1) then
This condition is same as the case 1. Hence the communication succeeds.
b) Assuming that the communications succeed on m == k (the length
of in-x is k) then considering the condition as m == k + 1 (the
length of in-x is k + 1) :
When the condition on m == k + 1,
i. Let the next registered process be the output process.
By R3 in Tab. 3, the value in the output process is sent to the
process indicated by id in in-x. The output process proceeds to
the next process through the state wait-CMout by R10 in Tab.
1. The process, which gets the value by R11 in Tab. 1, proceeds
to the next process.
The process in the top on in-x and the output process communicates with each other. The length of in-x is changed to m - 1,
that means m == k.
ii. Let the next registered process be the input process.
The length of in-x is changed to m + 1, then the communication
succeeds by the previous case.
Then by the assumption of the induction(b), the communication
succeeds in any cases.
Case 3 We consider about the choice process A1 + A2 + · · · + An and B1 + B2 +
· · · + Bn .
Let the process A1 be able to communicate with B1 and the process A2 be
able to communicate with B2 and so on. It means the diﬀerent process uses
a diﬀerent channel.
The choice process A1 + A2 + · · · + An is divided into the process A1 , A2 , . . .
and An and are registered to a CHM, by R3 and R4 in Tab. 1. Each process

A Protocol for Multi-threaded Processes with Choice in π-Calculus

145

proceeds independently but has the state wait-CHM . The choice process
B1 + B2 + · · · + Bn is done like as the choice process A1 + A2 + · · · + An ,
but diﬀerent CHM.
There are many combination to execute these processes. Before explaining
it, we explain the actions of CHMs.
A CHM gets the processes and commits them to memory (see R1 in Tab. 2).
It does not know the channel in the processes and checks the process which
is requested to execute by CMs (see R2 and R3 in Tab. 2). The requests
means a possibility to use the channel which the process want to use and
the process can be executed if the CHM answers yes. When the CHM gets
the ﬁrst request, it returns the answer yes(see R2 in Tab. 2). When the
CHM gets the second request or more requests, it store the requests in the
queue and check the head request in the queue if the ﬁrst request cannot be
executed (see R3, R4 and R5 in Tab. 2).
We consider only the case that the process A1 and B1 can communicate with
each other. However, there are many cases on the communication. These
cases are distinguished by the order of registration to CMs. The kind of
order is as follows:
1. A1 → B1 → the other processes
or
B1 → A1 → the other processes
These cases means the process A1 and B1 registered before the others,
and communicate with each other.
We explain the ﬁrst case in them.
The process A1 registers to a CM by R5 or R6 in Tab. 3. The process
B1 registers to the CM and the CM requests CHMs to execute A1 and
B1 by R9 or R10 in Tab.4. CHMs answer yes to the CM, because the
requests is the ﬁrst request for each CHM(see R2 in Tab.2).
The CM allow to communicate A1 and B1 by R9 or R10 in Tab.4 and
CHMs send stop to the others by R6 in Tab.2. The other processes which
get stop the execution.
If the other processes register to a CM (before getting the signal stop),
CHMs answer no to the CM by R7 in Tab.2.
2. Some processes do not include the pair Ai and Bi → A1 → Some
processes do not include the pair to the processes which have already
registered → B1 → the others
or
Some processes do not include the pair Ai and Bi → B1 → Some
processes do not include the pair to the processes which have already
registered → A1 → the others
These cases means the some processes registered before the process A1 (or
B1 ) registering. When the process B1 (or A1 ) registers to a CM before
the pair to the processes which have already registered registers, The CM
requests to CHMs to execute it and CHMs answer yes to the CM. When

146

K. Iwata, M. Suzuki, and N. Ishii

the CM gets the answer yes, it sends CHMs the signal of execution(see
R9 and R10 in Tab. 4). In this condition, if the pair to the processes
registers to a CM before CHMs get the signal from the CM, the CM
requests to CHMs and the CHM blocks this process(see R4 in Tab. 2).
However, whether this process is blocked by the CHM or not, the process
A1 and B1 communicate with each other. Because the CM has already
sent the signal of execution to CHMs and CHMs send which process
should be executed to Agent (in this case A1 and B1 ).
In this case CHMs block a process, but it does not generate a dead lock.
Because blocking the process is generated by the determination which
process should be executed. Hence, the blocked process has no chance to
be execute and the block has no inﬂuence.
In this case, we consider only two choice processes in which each process
uses a diﬀerent channel. However, if many choice processes in which each
process uses same channel, they do not generate a dead lock. Because, the
CM considers the processes according to their channel and one CHM manage
one choice process and the CHM blocks a process only if the other process
which is managed by the CHM can communicate.
Case 4 We consider about these choice processes A1 + Am , B1 + Bn .
In this case, we consider the condition that CMs sends CHMs the signal of
suspension(see R9 and R10 in Tab. 4).
Let the process A1 be able to communicate with B1 and the process Am and
Bn be able to communicate other processes(M and N ).
If all processes have ﬁnished to register CHMs, the condition that CMs sends
CHMs the signal of suspension is generated by the order of requests to CHMs
from CMs and answers from CHMs.
The order is as follows:
The CM sends the requests to execute the pair A1 and B1 Bn and N (see R9
and R10 in Tab. 4). In this condition, if the CHM which manages A1 + A2
arrows to execute A1 and the CHM which manages B1 +Bn arrows to execute
Bn , the communication between Bn and N succeed. Then B1 cannot be
executed and the CHM answers no to the CM(see R9 and R10 in Tab. 4).
The CM sends the signal of suspension to the CHM which manages A1 + A2
The CHM removes the process A1 from the queue and waits for new request
from CMs.
In this case, the process A1 blocks other processes in the same choice process. However, the process A1 releases the block if the process B1 cannot
communicate.
If the number of the process in one choice process, CHMs consider only the
ﬁrst process in the queue which stores the requests from CMs. Hence, the
condition is the same as this condition.
We consider the all possible condition and show the freedom from deadlock.
Hence, by using the protocol, we avoid to deadlock in π-calculus.

A Protocol for Multi-threaded Processes with Choice in π-Calculus

5

147

Conclusion and Future Work

In this paper, we have proposed a new protocol for multi-threaded processes with
choice written in π-calculus. In the protocol, we have deﬁned the three elements:
agents, Communication Managers(CMs) and Choice Managers(CHMs). Agents
are units of concurrent execution of our concurrent and distributed system. CMs
manage communication requests on channels from agents. CHMs manage choice
processes on agents.
We have shown why the protocol frees the processes from the deadlock. If
the agents have no choice process, any process do not be blocked. Hence, the
deadlock is avoided. If the agents have choice processes, CHMs order the requests
from CMs and manage the block to avoid deadlocks. Hence, the protocol frees
the processes from the deadlock.
One of the future works is to implement the compiler for π-calculus and build
it into any system like as agent systems, distributed object systems and so on.

6

Acknowledgement

A part of this research result is by the science research cost of the Ministry of
Education.

References
1. R. Milner. Polyadic π-calculus:a Tutorial. LFCS Report Series ECS-LFCS-91-180,
Laboratory for Foundation of Computer Science, 1991.
2. Milner, R., Parrow, J.G., and Walker, D.J. A calculus of mobile processes. In
Information and Computation,100(1), pages 1–77, 1992.
3. R. Bagrodia. Synchronization of asynchronous processes in CSP. In ACM Transaction on Programming Languages and Systems, volume 11, No. 4, pages 585–597,
1989.
4. M. Ben-Ari. Principles of Concurrent and Distributed Programing. In PrenticeHall International(UK) Limited, 1989.
5. R.Milner D. Berry and D.N. Turner. A semantics for ML concurrency primitive.
In POPL’92, pages 119–129, 1992.
6. Benjamin C. Pierce and David N. Turner. Concurrnet Objects in a Process Calculus. LNCS 907, pp.187–215, proc. TPPP’95, 1995.
7. MUNINDAR P. SINGH. Applying the Mu-Calculus in Planning and Reasoning
about Action. Journal of Logic and Computation, 8:425–445, 1998.
8. G.N.Buckley and A. Silberschatz. An eﬀective implementation for the generalized
input-output construct of CSP. In ACM Transactions on Programming Languages
and Systems, volume 5, No.2, pages 223–235, 1983.
9. C.A.R. Hoare. Communicating sequential processes. In Communications of the
ACM, volume 21, No.8, pages 666–677, 1985.
10. E. Horita and K. Mano. Nepi: a network programming language based on the
π-calculus. In Proceedings of the 1st International Conference on Coordination
Models, Languages adn Applicationos 1996, volume 1061 of LNAI, pages 424–427.
Springer, 1996.
11. E. Horita and K. Mano. Nepi2 : a two-level calculus for network programming based
on the π-calculus. In IPSJ SIG Notes, 96-PRO-8, pages 43–48, 1996.
12. E. Horita and K. Mano. Nepi2 : a Two-Level Calculus for Network Programming
Based on the π-calculus. ECL Technical Report, NTT Software Laboratories, 1997.

