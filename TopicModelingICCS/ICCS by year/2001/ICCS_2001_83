Replicators & Complementarity: Solving the
Simplest Complex System without Simulation
Anil Menon
R & D Group
Cerebellum Software
600 Waterfront Dr.
Pittsburgh, PA 15222
anilm@acm.org

Abstract. Replicator systems are a class of ﬁrst order, nonlinear diﬀerential equations, arising in an extraordinary variety of modeling situations. It is shown that ﬁnding the stationary points of replicator systems
is equivalent to solving a nonlinear complementarity problem. One consequence is that it becomes possible to use replicator systems to solve
very large instances of the NP-complete graph bisection problem. The
methodological and philosophical import of their equivalence with complementarity problems (upto stationarity) is discussed.

1

Replicators

A replicator is a fundamental unit in evolutionary processes, representing a population type, and characterized by two attributes: pi (t), its proportion in the
population at time t, and fi (t), its non-negative ﬁtness at time t. A replicator’s
ﬁtness is a measure of its signiﬁcance to the future evolution of the population.
The proportions of replicators in a population change as a result of their mutual
interactions, and their relative ﬁtnesses; the dynamics is described by a system
of diﬀerential equations known as the replicator equations, given by:
Continuous replicator equations: For i = 1 . . . n,
dpi
= pi (t) (fi (p) − f¯(p)).
dt

(1)

A replicator system consists of these, together with the relevant description
of replicators, ﬁtnesses, and proportion values. Examples of replicators include
behavioral patterns in sociological modeling, primordial molecules in prebiotic
models, species in a Lotka-Volterra system, strategies in certain N -person games,
and reactants in autocatalytic reactions (see [8] for a comprehensive survey).
In fact, any ﬁrst order diﬀerential equations model can be non-trivially related to a replicator model. To see this, consider the system,
dqi
= gi (q1 , . . . , qn , t)
dt

i = 1, . . . , n.

V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2074, pp. 922–931, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

(2)

Replicators & Complementarity: Solving the Simplest Complex System

923

�n
Deﬁne the variables, zi (t) = exp(qi (t))/ j=1 exp(qj (t)). Diﬀerentiating the zi
w.r.t time, a replicator system is obtained:
n
�
dzi
dqj
dqi
= zi (
−
zj )
dt
dt
dt
j=1

i = 1, . . . , n.

(3)

(3) has the�
aspect that the “ﬁtnesses” are the rates of change of the qi variables.
n
i
Assuming j=1 qj (t) = constant, the system (3) equilibrates ( dz
dt = 0 for all
i = 1, . . . , n) if and only if the system (2) does so.
Replicator systems are universal precisely because they seem to capture the
essential relative growth dynamics of heterogeneous populations. In this sense,
one could argue that replicator systems are the ‘simplest complex systems’.
The outline of this paper is as follows: Section 2 demonstrates how heuristic
arguments regarding graph bisection lead to a replicator system. Some of the
problems associated with replicator optimization are discussed in Section 3. In
Section 4, the connection between replicator systems and complementarity problems is introduced as a means to alleviate some of these problems. These ideas
are applied to the graph bisection problem. Section 5 ends with a discussion.

2

Graph Bisection: Replicator Models

In the graph bisection problem, the nodes of a graph have to be assigned to
either of two partitions (bins, colors, clusters), such that the total numbers of
nodes assigned to each partition are the same, and the cut-size — the number
of cross edges (edges whose end nodes are in diﬀerent partitions) — is as small
as possible. The graph bisection problem surfaces in a wide variety of contexts.
One of the earliest instances of the graph bisection problem occurs, appropriately enough, in biology. In the early 1900’s, the zoologist H. V. Wilson observed
a curious morphological phenomenon [15]. Wilson ﬁrst noticed that sponges (the
simplest metazoan organisms) could be disassociated into their constituent cells
by straining them through a ﬁlter made of ﬁne silk cloth. If the randomly mixed
disassociated cells are left in the right physiological conditions, then after about
a day, the cells form aggregates, and after 4 − 5 days, reorganize themselves into
a sponge, with histological organization characteristic of the original. There are
many diﬀerent cells types in a sponge: pinacocytes, archocytes, amebocytes, collencytes, collar cells etc. How all these diﬀerent types (about 16 in all) reorganize
themselves to cluster together in the right histological arrangement remains one
of the key mysteries in morphogenesis [11, pp. 82-196].
One natural interpretation is that the histological organization of the sponge
plays the role of a graph, with the sponge cells as nodes , and the adhesive and
cohesive forces between cells the weighted edges of the graph. Minimizing the
cut-size becomes minimizing the work of adhesion between diﬀerent cell types.
In fact, since the sponge has about 16 diﬀerent types of cells, it can be seen as
an instance of the graph partitioning problem (16 partitions)1 .
1

It is tempting to solve the graph bisection problem by mimicking how the sponge
solves its problem instance. Yet, two facts counsel against the impulse: ﬁrst, cell

924

A. Menon

On account of the ubiquity of the graph bisection problem, there have been
a great many proposals to solve it [5], as well pioneering attempts to solve it
through replicator systems [14]. The development given below is believed to be
original. It also has the advantage of revealing when the method is likely to fail.
The graph bisection problem is formally speciﬁed as follows: Let G = (V, E)
be an undirected graph, with node set V , edge set E, and no self loops. Let
the total number of nodes be n = |V |. The nodes are assumed be numbered 1
through n. Each node is assigned a non-negative node-weight ci ∈ R+ , and similarly, each edge is assigned a non-negative edge-weight wij (if two edges are not
connected, they are assigned a zero weight). For the weighted adjacency matrix
row-sum diagonal matrix D = (dij )n×n
A = (wij )n×n , deﬁne the associated
�n
with the diagonal terms dii =
w
j = 1 ij . The Laplacian matrix (Fiedler matrix,
Kirchoﬀ matrix, admittance matrix) of the graph is deﬁned by L = D − A,
is positive semideﬁnite. It can be shown that xt Lx is the sum of the weights of
those edges whose endpoints lie in diﬀerent partitions (the so called cut-size).
The graph bisection problem (GB) may then be represented by:
arg min�

x∈ {0,1}n ct x =

n
i=1

xt Lx.

(4)

ci /2

The graph bisection problem is NP-complete and arises in a variety of contexts
including load balancing, storage management, distributed directories, and VLSI
design.
Interpret the graph as a network of individuals, where each edge in the graph
represents a “friendship” relationship. The population is to be divided into two
mutually exclusive groups A and B. For the ith individual, let xi denote her
degree of conﬁdence in the proposition
�n “I should be assigned to group A.” It
is assumed that xi ≥ 0, and that j=1 xj > 0 (i.e., at least one individual
has a non-zero conﬁdence in being assigned to A.) The ith individual is allowed
to continually update her conﬁdence degree based on its current value, and
the values of those of her friends. What should the update rule look like? The
following two guidelines are reasonable:
1. The Inertia Heuristic: The change in xi should be proportional to its current value. After all, if individuals are quite conﬁdent about being assigned
to a particular partition thenin the absence of any contrary information,
their conﬁdence can only increase with time. The Inertia Heuristic may be
captured by the expression:
dxi
∝ xi .
(5)
dt
2. The Roman Rule Heuristic 2 : If a majority of an individual’s neighbors have
very little conﬁdence in the proposition that they should be assigned to the

2

sorting is slow . The time taken to re-organize is of the order of days. Second, simulations of theoretical models of cell sorting have proved to be somewhat disappointing,
showing a tendency for the system to get stuck in local minima [11].
In Rome behave as the Romans do. In this case, “In Rome, believe as the Romans
do.”

Replicators & Complementarity: Solving the Simplest Complex System

925

partition A (reﬂected by their low xj values), then it is probably a good
idea for an individual not to get over-conﬁdent. Yet, an individual may have
many friends, and the opinions of some may be more reliable than those of
others. Let wij indicate the reliability or worth of the opinion of j th friend
of the ith individual. The Roman Rule is then captured by the expression,
n
�
dpi
wij xj .
∝
dt
j=1

(6)

The overall reliability is obtained by summing the individual reliabilities.
Other aggregating procedures could be used, but summation has nice linear
properties, behaves well under scaling, and is computationally inexpensive.
Combining these two heuristics the following update rule is obtained:
n
�
dxi
= Kxi (
wij xj ) = xi fi (x)
dt
j=1

i = 1, . . . , n.

(7)

In (7), K is a constant of proportionality. The above system could be simulated,
starting with a random initialization of conﬁdence degrees (xi (0)), and stopping
when no more changes in conﬁdence degrees are seen. Then the nodes actually could be assigned to partitions based on the strength of their conﬁdences.
However, this leads to the problem of determining what constitutes a “strong”
conﬁdence, and what is a “weak” one.
�n One resolution is to normalize (7), i.e.,
introduce the variables, pi = xi / j=1 xj . Transforming the xi ’s to pi ’s also
takes care of scaling issues; if all the xi ’s are multiplied a common factor, the pi
will be unaﬀected. Diﬀerentiating the variables pi w.r.t time:
(
dpi
=
dt

�n
j=1

�n
i
xj ) dx
j=1
dt − xi
�n
( j=1 xj )2

= pi fi (p) − pi

n
�

pk fk (p),

dxj
dt

,

(8)
(9)

j=1

= pi (fi (p) − f¯(p)).

(10)

The equations in (10) represents a replicator system, with “ﬁtnesses” linearly
proportional to replicator “proportions,” (a Lotka-Volterra system). This system can be simulated, and after it reaches equilibrium, the stationary solution
p∗ = {p∗i } is mapped to a binary feasible solution using the median assignment
procedure3 . Thus, heuristic arguments lead to a replicator system for graph bisection. Also, if the replicator system does not perform well for a given instance,
3

This entails determining the median value pm of the vector of proportions p∗ . If the
ith component p∗i is greater than the median it is assigned to A; if less, to B (ties
are handled randomly). It can be shown that the median assignment rule is optimal
with respect to several distance metrics [2].

926

A. Menon

the two heuristics may be culpable, and better heuristics (reﬂected in new ﬁtness
deﬁnitions) could be designed.
There are however, some chronic problems associated with techniques such
as replicator optimization. A straightforward simulation of the above diﬀerential
leads to a variety of problems. A brief discussion of these issues is given in the
next section.

3

Replicator Optimization: Strategy and Problems

The use of replicators in discrete optimization consists of the following sequence
of steps:
1. A discrete optimization problem is relaxed into a continuous optimization
problem over the unit simplex.
2. Each relaxed variable is modeled as a replicator. Speciﬁcally, the i th discrete
variable is conceptually replaced by a replicator; associated with the i th
replicator are two values: its “proportion” pi , representing the relaxed value
of the ith variable, scaled to the real interval (0, 1), and its non-negative real
valued “ﬁtness” fi , the exact speciﬁcation of which is problem dependent.
3. Starting from an initial set of values, the ﬁtnesses and proportions of the
replicators are changed as per the replicator equations. The procedure is
carried out till some termination criteria are satisﬁed.
4. The convergent proportions are then mapped to suitable discrete values (this
mapping is also dependent on the problem).
It can be shown that if the ﬁtnesses of the replicators are gradients of the function
to be maximized [8, pp. 242-243], then the replicator system acts as a gradient
dynamical system in Shahshahani space (a Riemannian space named after the
mathematiciam Shahshahani [12]). Accordingly, if these conditions are satisﬁed,
replicator dynamics guarantee convergence to a local maximum of that function.
Unfortunately, the fact that replicator optimization is a gradient ascent
method, implies that it also suﬀers from the same problems that have long
plagued the application of gradient methods [1]. Amongst these are: (i) dependence of the convergence rates on the conditioning numbers of certain matrices
associated with the computational surface, (ii) the average case convergence
rates are typically closer to worst-case convergence rates, (iii) the fatal reliance
on local information alone, and (iv) discrete gradient systems do not necessarily
have the same convergence properties as their associated continuous gradient
systems [7].
The deﬁnition of a gradient is metric dependent, and many of the abovementioned problems can be alleviated by the use of a variable metric. Since
replicators can be viewed as systems performing gradient ascent in Riemannian
space, it is a variable metric gradient ascent method [8, pp. 242], and this may
mitigate some of the above problems.
Another problem has to do with scalability. A replicator equation describes
the time evolution of a single replicator. When mapped to problems such as

Replicators & Complementarity: Solving the Simplest Complex System

927

graph bisection, this implies that the resulting system may consist of thousands
of diﬀerential equations. Simulating such systems is very diﬃcult, and the intricacies of simulation can become at least as complicated as the original problem
itself. The next section gives a technique to solve for the equilibrium points, that
does not depend on simulating the system of selection equations. It also becomes
possible to sidestep the problems associated with gradient ascent procedures.

4

Replicators & Complementarity Problems

Let D ⊆ Rn , and g, h : Rn → Rm . The complementarity problem(CP) [9, pp.
23-24] is to,
(CP)

Find a x ∈ D : g(x) ≥ 0, h(x) ≥ 0, (g(x))t h(x) = 0,

(11)

g(x) ≥ 0 means that each component of g(x) is greater than or equal to zero.
A fascinating and thorough review of many instances of this problem may be
found in [4]. Two special cases are to be distinguished:
Nonlinear Complementarity Problem:
Here, n = m, g(x) = x, h : Rn → Rn . Then,
(NCP)

Find a x ∈ D : x ≥ 0, h(x) ≥ 0, xt h(x) = 0.

(12)

Linear Complementarity Problem:
Here, n = m, g(x) = x, and h(x) = M x + r, where M = (mij )n × n and
r ∈ Rn . Then,
(LCP) Find a x ∈ D : x ≥ 0, h(x) = M x + r ≥ 0, xt (M x + r) = 0.
(13)
The above LCP is denoted by LCP(x, M ). A great variety of solution techniques exist for solving the LCP, ranging from those based on Lemke’s classical
complementarity pivot algorithm, through iterative methods such as successive
overrelaxation (SOR), to those based on interior point methods such as Karmarkar’s algorithm. A comprehensive discussion of the technology may be found
in Cottle et. al. [3, pp. 383-506].
The relevance of nonlinear complementarity problems to this paper is seen
by the following observation, a natural generalization of the observation of Y.
Takeuchi and N. Adachi [13].
Observation A: Deﬁne D = Sn , and consider the NCP problem of
ﬁnding a p ∈ Sn such that:
g(p) = p ≥ 0,

h(p) = [f1 (p) − f¯(p), . . . , fn (p) − f¯(p)]t ≥ 0,
(14)
pt h(p) = 0.

Every solution p ∈ Sn to the above problem is also an equilibrium point
of the selection system dpi /dt = pi [fi (p) − f¯(p)].

928

A. Menon

Of course, not every equilibrium point of the selection equation is necessarily
a solution to the corresponding NCP; because, an equilibrium point p ∗ for the
selection equation has to satisfy p∗ ≥ 0, and (p∗ )t (fi (p∗ ) − f¯(p)) = 0, it need
not satisfy h(p) ≥ 0.
However, this is a minor technical problem. Notice that (14) implies that an
equilibrium point p∗ has to satisfy n equalities of the form,
pi hi (p) = pi (fi (p∗ ) − f¯(p)) = 0.

(15)

Suppose there is an index i such that hi (p∗ ) < 0. Consequently, p∗i = 0. Now, in
a replicator selection system, once a proportion goes to zero, it stays zero, and no
longer takes part in the replicator dynamics. Since this is the case, the replicator
ﬁtness fi (p∗ ) can be deﬁned to take any value, when p∗i = 0. Whatever its value,
the ith has no eﬀect on the replicator dynamics. In particular, a new replicator
system can be deﬁned,
dpi
= pi (fi� (p) − f¯� (p)) i = 1, . . . , n,
dt
�
fi (p) if pi > 0,
�
fi (p) =
0
if pi = 0.

(16)
(17)

The new replicator system has the same orbits and equilibrium points as the old
one. It also satisﬁes the conditions that h�i (p) = fi� (p) − f¯� (p) ≥ 0. For this
alternate system, its equilibrium points are also solutions to the corresponding
NCP. The next two observations complete the connection between complementarity problems and replicator selection systems.
Observation B: When ﬁtnesses are linearly dependent on replicator proportions, then the replicator system becomes the Lotka-Volterra
equations.
�n
To see this, suppose the ﬁtnesses fi were such that, fi (p) =
j=1 wij pj , so
that the Lotka-Volterra equations is obtained, namely:


n
�
�
wij pj −
wjk pj pk  .
dpi /dt = pi 
j=1

j,k

Using the Hofbauer transformation, that
�n is, introducing non-negative real variables z1 , . . . , zn such that, pi = zi / i = 1 zi , the Lotka-Volterra system can
be transformed into its equivalent classical form [8, pp. 134-135],
n−1
�
dzi
= zi [ win +
wij zi ], i = 1, . . . , n − 1.
dt
j=1

In vector form (18) becomes, dz/dt = z t y = z t [c + A� z].

(18)

Replicators & Complementarity: Solving the Simplest Complex System

929

Observation C: Solving a linear complementarity problem is equivalent to ﬁnding the stationary points of an associated Lotka-Volterra
system [13]. Precisely, every solution to the LCP(c, A� ), where: c =
[w1,n , . . . , wn−1,n ] and A� = [wi,j ](n−1)× (n−1) , is also a equilibrium
point of the Lotka-Volterra system in (18).
These observations may be placed in a larger context. In a long series of papers,
Grossberg, Cohen and others (see [6] for a review), studied a class of systems, the
competitive adaptation level systems, characterized by the following dynamics,
dxi
= ai (x) [bi (xi ) − c(x)]
dt

i = 1, . . . , n

(19)

where xt = (x1 , x2 , . . . , xn ) is a state vector describing the population of the
n interacting individuals, and ai (·), bi (·) and ci (·) are all real valued functions.
Under fairly mild conditions on the functions ai (·), bi (·) and ci (·), many stability results, both local and asymptotic, may be derived. An astonishing variety
of neural networks and diﬀerential systems, amongst them Hebbian nets, the
Boltzmann machine, and the Gilpin-Ayala, Eigen-Schuster and Lotka-Volterra
systems are all special cases of (19).
The replicator system itself is a special case of (19). Clearly, the nonlinear
complementarity problem is essentially identical to the problem of ﬁnding the
stationary points of competitive adaptation level system. In particular, when
replicator ﬁtness are linear functions of replicator proportions, then ﬁnding the
stationary points of the resulting replicator system (known as Lotka-Volterra systems) becomes identical to solving the linear complementarity problem. Thus,
the methods used to solve nonlinear complementarity problems become applicable to ﬁnding the stationary points of replicator systems.
Earlier, heuristic arguments were used to show that to solve the graph bisection problem using replicator equations, the ﬁtness functions of the replicators
had to be linear functions of the replicator proportions. The above considerations
lend support to these arguments. The fact that the graph bisection problem is
a semideﬁnite integer programming problem implies that there exists an equivalent linear complementarity problem [3, pp. 4-5], and hence, a corresponding
Lotka-Volterra system with ﬁtnesses linearly proportional to replicator proportions.
Figure 1 (below) outlines the basic details of solving the graph bisection
problems using complementarity. An experimental study of the algorithm and
comparisons with spectral techniques can be found in [10].

5

Discussion

It is not atypical to ﬁnd realistic graph bisection problems that have tens of
thousands of nodes and edges; such graphs are found for example, in ﬁnite element models of complex 3D surfaces. A direct simulation of the corresponding
replicator system would be rather challenging. Worse, discrete versions of the

930

A. Menon

GB REP(L, b, x, stepsize, maxgen, maxerr)
{ Minimize xt Lx such that et x = b, x ∈ B n }
{ where b = n/2, L = (qij )n×n }
�
�
L −e
1. Put q t = [0tn , −b], and M =
t
e 0
2. Randomly initialize z(0). Put iter = 1, error = ∞, mincost = ∞.
3. While ((error > maxerr) and (iter < maxiter)) do
a) Compute z(iter) from z(iter − 1) using successive over-relation (SOR) on
LCP(q, M ).
b) Every stepsize generations do:
i. Find zm = median {z1 , z2 , . . . , zn }
ii. Assignment phase: For i = 1, . . . , n if zi > zm put xi = 1, else put
xi = 0
iii. Compute C(x) = xt Lx
iv. If C(x) < mincost, mincost = C(x), x∗ = x
4. Return x∗ .

Fig. 1. Graph Partitioning : The Basic Procedure

replicator equations have stability issues not found in the continuous versions
[7]. The formulation in terms of complementarity problems eliminates such concerns. Parallel implementations of the LCP are available, as well as a considerable
body of experience in solving such large systems. Furthermore, the relationship
between some of the most popular models in “soft computing” and some of the
most classical of results in mathematical optimization is clearly seen. It is also
possible that complementarity theory could beneﬁt from some of the theoretical
insights of replicator modeling.
The demonstrated connection with complementarity raises questions on the
usefulness of replicator-based optimization. If ﬁnding the stationary points of a
replicator system can be reduced to a complementarity problem, then why not
just solve the bisection problem (or any other replicator problem) by framing it
as a linear complementarity problem in the ﬁrst place?
It should be kept in mind however, that languages are not just referential
devices. While two languages may indeed refer to the same object, what it enables
us to do with it, is to some extent, language dependent. Modeling a problem in
terms of replicator theory leads to actions diﬀerent from those actions induced by
viewing the problem in terms of, say, nonlinear programming. Since simulation
of the replicator systems is largely infeasible, the ends have to be achieved by
analogy.
A subtler argument is that replicator theory provides a “pseudo-physics”
for computational problems. Traditionally, physical, biological, and engineering
problems have been attacked using linear and nonlinear programming, game
theory, diﬀerential calculus and other tools. These tools are useful because their

Replicators & Complementarity: Solving the Simplest Complex System

931

semantics are independent of the problem domain. So, for example, sponge reassambly may be modeled as a graph bisection problem, and spectral methods used
to derive estimates on energy dissipation. The application of replicator-theoretic
arguments to a computational problem, means that the problem gets endowed
with a “pseudo-physics.” This enables the engineer to reason in physical terms
about abstract entities. The computational problem can be attacked at a conceptual level, rather than in purely algorithmic terms. The conceps of replicator
theory suggest hypotheses and strategies, that more “applications-neutral” areas such as complementarity, may fail to inspire. Ultimately, the results of this
paper are intended to “complement” the technology of replicator modeling, by
providing eﬀective means to achieve promised results.

References
1. H. Akaike. On a successive transformation of probability distribution and its application to the analysis of the optimum gradient method. Annals of the Inst. of
Statistical Math., X1:1–16, 1959.
2. T. F. Chan, P. Ciarlet Jr., and W. K. Szeto. On the optimality of the median cut
spectral bisection graph partitioning method. SIAM J. on Scientiﬁc Computing,
18(3):943–948, 1997.
3. R. Cottle, J. S. Pang, and Stone R. E. The Linear Complementarity Problem.
Academic Press, Boston, 1992.
4. M. C. Ferris and J. S. Pang. Engineering and economic applications of complementarity problems. SIAM Review, 39:669–713, 1997.
5. Per-Olof Fjällström. Algorithms for graph partitioning: A survey. Linköping Electronic Articles In Computer and Information Science, 3(10):1–37, 1998.
http://www.ep.liu.se/ea/cis/1998/010/.
6. S. Grossberg. Nonlinear neural networks: principles, mechanisms and architectures.
Neural Networks, 1:17–61, 1988.
7. J. Hofbauer. A Hopf bifurcation theorem for diﬀerence equations approximating a
diﬀerential equation. Monatshefte für Mathematik, 98:99–113, 1984.
8. J. Hofbauer and K. Sigmund. The Theory of Evolution and Dynamical Systems.
Cambridge University Press, Cambridge, 1988.
9. R. Horst and H. Tuy. Global Optimization: Deterministic Approaches. SpringerVerlag, Berlin, 1990.
10. A. Menon, K. Mehrotra, C. Mohan, and S. Ranka. Optimization using replicators.
In Proceedings of the Sixth International Conference on Genetic Algorithms, pages
209–216, San Mateo, California, 1995. Morgan Kaufman.
11. G. D. Mostow. Mathematical models of cell rearrangement. Yale University Press,
New Haven, 1975.
12. M. Shahshahani. A new mathematical framework for the study of linkage and
selection. Memoirs of the AMS, 211, 1979.
13. Y. Takeuchi and N. Adachi. The existence of globally stable equilibria of ecosystems
of the generalized Volterra type. J. Math. Biology, 10:401–415, 1980.
14. H.-M. Voigt, H. Mühlenbein, and H.-P. Schwefel. Evolution and Optimization ’89.
Selected Papers on Evolution Theory, Combinatorial Optimization, and Related
Topics. Akademie-Verlag, Berlin, 1990.
15. H. V. Wilson. On some phenomena of coalescence and regeneration in sponges. J.
Expt. Zoology, 5:245–258, 1907.

