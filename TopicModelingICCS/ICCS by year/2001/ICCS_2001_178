On Group Communication Systems:
Insight, a Primer and a Snapshot
P. Gray†1 and J. S. Pascoe‡
†Math & Computer Science
University of Norther Iowa
Cedar Falls, Iowa
50614-0506
gray@math-cs.cns.uni.edu

‡Department of Computer Science
University of Reading
Reading, UK
RG6 6AY
J.S.Pascoe@reading.ac.uk

Abstract. This paper contributes a concise introduction to the ﬁeld of group
communication systems and is structured as three integrated parts. In the ﬁrst
instance, this paper aims to share the practical insight gained from the implementation of several group communication projects back into the community. This
is discussed in a form that can be used to guide and steer subsequent projects.
Secondly, the paper aims to beneﬁt newcomers to the subject by offering an introduction to some of the more pertinent areas of the ﬁeld through a snapshot
of its current state. The subjects of failure detectors, group membership (including virtual synchrony variants) and security are discussed. Although this paper
presents a general view on these subjects, it alludes to the exemplars of the Collaborative Computing Frameworks (CCF) and IceT where necessary.
Keywords – group communication, state-of-the-art, tutorial, implementation, distributed computing.

1 Introduction
The ﬁeld of group communications is a mature area of distributed computing. Projects
such as the CCF [2], IceT [15], Totem [12, 3], InterGroup [7], Transis [4] and Horus
[17] satisfy the design goals of many applications involving group communications.
Numerous presentations of the theoretical work surrounding these projects has been
contributed to the community. However, very little of the insight gained from the practical development of this work has been brought together and reintroduced to the ﬁeld.
Thus, this paper aims to present some of this practical insight in a form that can be
used to guide future projects. In addition, this article offers a concise primer to the more
noteworthy projects and texts that accompany the ﬁeld.
The pertinent question of which topics to consider is now addressed. A comprehensive consideration of group communication issues would require a much fuller discussion than is given here. In this work, we aim to quickly introduce the reader to, what
is in our opinion, the most general and fundamental concepts within the ﬁeld. Thus,
this paper is structured as follows. In section 2 we contrast the use of reliable multicast
and keep-alive packets as failure detection mechanisms. Section 3 then discusses the
implementation of group membership protocols, virtual synchrony variants and their
associated repair algorithms. The issue of security in group communication infrastructures is considered in section 4 and ﬁnally, we give our conclusions in section 5.
1

This research is supported by NSF grant ACI-9872167 and the University of Northern Iowa’s
Graduate College.

V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 307−315, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

308

P. Gray and J.S. Pascoe

1.1 Exemplars
In the interests of generality, the ensuing discussion remains at a high level. However,
where necessary, we allude to the exemplar projects of the Collaborative Computing
Frameworks (CCF) [2] and IceT [15].
The Collaborative Computing Frameworks The Collaborative Computing Frameworks (CCF)2 is a suite of software systems, communications protocols, and methodologies that enable collaborative, computer based cooperative work. The CCF constructs a virtual work environment on multiple computer systems connected over the
Internet, to form a collaboratory. In this setting, participants interact with each other,
simultaneously access or operate computer applications, refer to global data repositories or archives and conduct a number of other activities via telepresence. CCF is an
integrated framework for accomplishing most facets of collaborative work, discussion,
or other group activity. It differs from other systems (audio tools, video/document conferencing) in that it aims to provide a comprehensive framework that addresses a broad
range of collaborative issues. The CCF software systems are outcomes of ongoing experimental research in distributed computing and collaboration methodologies.
The Collaborative Computing Transport Layer (CCTL) [18] is the fabric upon which
the entire system is built. A suite of reliable atomic communication protocols, CCTL
supports sessions or heavyweight groups and channels (with relaxed virtual synchrony)
that are able to exhibit multiple Qualities of Service (QoS) semantics. This in turn allows applications to operate across differing levels of QoS simultaneously. Unique features include a hierarchical group scheme, use of tunnel-augmented IP multicasting and
a multithreaded implementation.
IceT The IceT project aims to provide an environment that is well suited for distributed
computing as well as collaborative sessions. Groups of resources are merged together
to form metacomputing and collaborative environments. One of the major attributes of
the IceT environment is the ability for applications to be ‘soft-installed’ on demand.
The commonality between distributed and collaborative computing issues in such
an environment is the grouping of resources and the hierarchy generated by asymmetric
access privileges. That is to say, if two researchers (collaborators) merge their resources
together, their local resources typically extend certain privileges to their owners as opposed to remote users. Disk access, CPU usage, etc. are aspects of the environment that
might be asymmetrically allocated.
In IceT, access and privileges are based on X509 certiﬁcates. Group deﬁnitions revolve around access certiﬁcates. A group of resources is identiﬁed by a common certiﬁcate. In the process of merging, where two groups of resources merge together to form
a single virtual environment, individual certiﬁcates are used to generate common certiﬁcates3 that represent the combined set of resources. The process of splitting a virtual
environment involves heavy use of Certiﬁcate Revocation Lists (CRLs). When an environment is split apart, the certiﬁcate that identiﬁed the virtual composition is revoked,
thereby revoking the privileges associated with the alliance.
2
3

Further information is available at: http://www.collaborative-computing.com/.
In actuality, a certiﬁcate chain is produced that consists of a new certiﬁcate and yet retains the
qualities of the individual certiﬁcates.

On Group Communication Systems: Insight, a Primer, and a Snapshot

309

2 Failure Detectors
A signiﬁcant portion of recent work has addressed the impossibility of forming consensus on failed processes in asynchronous networks. This result stems from an inherent
infeasibility to distinguish between failed processes and those that are arbitrarily slow.
Chandra and Toueg [19] proposed eight classes of failure detectors deﬁned in terms of
accuracy and completeness. These are summarized in table 1 but for an interesting and
more in-depth discussion, the reader is referred to [19].
The implementation of failure detection has often been based on the use of explicit keep-alive packets (or heartbeats). Indeed, Horus [17] and InterGroup [7] both
use such a mechanism in their approaches to group communication. Heartbeat packets offer a number of advantages, the most notable being the detection of failed hosts
within a known time window. However, a possible drawback of the mechanism is that
they impose an unnecessary processing overhead in a failure free system. In wired environments, it is arguable that this overhead is insigniﬁcant, but in other networks (e.g.
wireless) the processing requirement imposed by heartbeats can use signiﬁcant levels
of resources unnecessarily.
Another approach to failure detection is to augment reliable transmission mechanisms to act as weak failure detectors. Indeed host failures in CCTL are detected
through the use of a reliable multicast primitive that has been augmented to provide
a weak failure detector. This has the advantage that it does not incur any processing
overhead on a failure free system, but a disadvantage of the mechanism is that a failed
host can remain undetected for an arbitrary length of time.
The selection of an appropriate failure detector is dependent on the application.
For high level collaborative environments such as the CCF, the timely detection of a
failed host is often not imperative. Due to this, a failure detector based on a reliable
transport mechanism may be adopted. However, in other group communication systems
(e.g. safety-critical or process control systems), the detection of a node failure within a
speciﬁc time period can be crucial to the provision of the service offered [16]. Thus, in
this case, a mechanism based on heartbeats is usually more appropriate.

3 Group Membership
Group membership protocols are fundamental to any system consisting of a group of
communicating processes. Due to network conditions, not all processes are able to communicate with others at all times. Processes can suffer crash failures or the network may
partition. Thus, a process can not guarantee that the messages it sends are received by
all members of the receiver set. This presents a new collection of failure scenarios that
are challenging to deal with.

Completeness
Strong

Strong
Per f ect

Weak

Q

P

Accuracy
Weak
Eventual Strong
Eventual Weak
Strong EventuallyPer f ect EventuallyStrong

S

Weak

�Q

�P
�Q

�S
�W

EventuallyWeak

Table 1. The Eight Classes of Failure Detector (see [19] for more details).

310

P. Gray and J.S. Pascoe

Membership protocols usually provide participant processes with the notion of a
view, that is, an ordered list of the current members. All of the members in the current
view are guaranteed to either accept the same view, or be removed from the session.
Messages sent in the current view are delivered to the surviving members of the current
view, and messages received in the current view are received by all surviving members
in the current view. This is called Virtual Synchrony [9] and was ﬁrst implemented in
the Isis toolkit [8]. Since all members that can communicate see a failure at the same
logical time, the resulting fault-tolerance protocols are signiﬁcantly simpliﬁed.
3.1 Virtual Synchrony Variants
Virtual Synchrony is best understood as a simulation of fail-stop behavior, that is, members excluded from the session may still be alive. A number of Virtual Synchrony variants have been proposed and we consider two here.
Extended Virtual Synchrony The standard virtual synchrony model is inherently unequipped to deal with partitioning failures i.e. the model is deﬁned in terms of a single
system component in which process groups reside. Thus, in a primary partition system,
only the fragment that resides in the primary component of the system can survive. The
Extended Virtual Synchrony [12, 4] model suggests that applications can tolerate partitioning if processes are allowed to continue in non primary partitions. In such systems,
any group of processes that can reach consensus on the membership of the partition is
permitted to continue. However the remerging of such states is difﬁcult and can not in
general be automated.
Relaxed Virtual Synchrony In CCTL, the virtual synchrony algorithm was extended
and optimized for a collaborative setting. To enforce virtual synchrony, all processes
must receive the same messages in a given view. Relaxed Virtual Synchrony allows the
sending and receiving views to differ. For example, in ﬁg. 1 the receiving view of m
contains d; the sending view does not. To guarantee virtual synchrony, the sender b
compares the sending and receiving views for each message sent. Host b retransmits
messages to processes in the receiving view but not in the sending view. If process b
fails, all session members will eventually receive notiﬁcation from the failure detector.
Since b may have failed during a multicast operation, some channel members may
not have received all messages sent by b. Before removing b, members must decide
which messages from b are to be delivered. CCTL uses a ﬂush procedure similar to that
of Isis to perform this task. In brief, messages that have been received by all session
members are said to be stable. Thus, the ﬂush procedure removes all messages that
are not stable. Virtual synchrony and extended virtual synchrony ﬂush at each view
change. CCTL only ﬂushes in the event of a failure since relaxed virtual synchrony
allows messages to be delivered in any view. Flushing is expensive as it delays view
changes and delivery of subsequent messages. Since other systems generate signiﬁcant
numbers of view changes and also delay message transmission until after the ﬂush
terminates, relaxed virtual synchrony offers a somewhat more appropriate solution.
3.2 Membership Repair Algorithms
Membership Repair Algorithms (MRAs) are executed on the detection of one or more
process crashes. As their name suggests, a membership repair algorithm will restore a
group communication systems health in the presence of failures. This is often achieved
by forming consensus on the failed members and then installing a corrected view.

On Group Communication Systems: Insight, a Primer, and a Snapshot
a

b

c

311

d
View change

time

m

New view installed

View changed;
d has joined

Fig. 1. Relaxed Virtual Synchrony: A view change is required as d makes a request to join the
group. Thus, through relaxed Virtual Synchrony, there is no need to ﬂush the system for the
outstanding message m since the sending and receiving views are permitted to differ.

A number of novel membership repair algorithms have been suggested. In the CCF,
membership repair is achieved through the use of an election based scheme. Each participant in a CCF session executes two threads. The Error Monitor is responsible for
the logging of failures and the mediation of the more computationally expensive Error
Handler. On detection of a threshold number of consecutive failures, the Error Handler is triggered and a message is multicast to all of the sessions participants informing
them that an election is about to take place. Each participant then probes the network
to ascertain an up-to-date snapshot of the sessions liveness. These views form the basis
of votes which are relayed to the most senior session member (or Error Master) who
collates and sorts the votes into a decision on which participants should be removed
from the session. This result is multicast to the remaining live session members and the
new view is installed.
The Totem Membership Repair Algorithm The Totem MRA is in some respects
similar to the strategy employed in the CCF viz. an indication of failure is denoted by a
predetermined number of outstanding messages. In Totem, when a failure is detected by
a processor, the identiﬁcation number of the suspect process is added to that processors
fail set. The processor then enters the Gather state in which consensus is formed and the
corrected view is installed. The algorithm is optimized to yield as large a membership
set as possible, whilst not invalidating its termination requirement [1]. For a discussion
on additional issues such as token loss and valid membership changes during the Gather
state, see [3].
The InterGroup Membership Repair Algorithm InterGroup [7] implements an interesting MRA that is optimized for scalability. The algorithm is divided into two protocols: a lightweight version for passive receivers and a more expensive component that
is executed by those processes that are members of the sender set, or wish to become

312

P. Gray and J.S. Pascoe

members of the sender set in the next view. This approach relies on the assumption
that the majority of processors are passive, which given the intended applications of
InterGroup, is often the case. Thus, the InterGroup MRA is, in its selected context, an
effective method..

4 Security
In the context of group-based communication systems that are built upon insecure communication substrates, it is often essential to have security mechanisms in place. This
includes addressing aspects of data encryption, mechanisms to authenticate processes
and memberships in designated groups, and a way to digitally sign messages.
An associated aspect of security in the context of group-based communication systems is the issue of scalability. The protocol used for scalability should not become
an obstacle for ‘modest’ group memberships. This is especially true in the context of
cluster computing and groupware applications, where both the number of interprocess
communication channels and the latency of the network are signiﬁcant security factors.
The topic of security is quite an active research area in general. For a background
on general principles and algorithms, see [10], [20], and [5].
4.1 Key-Pair and Symmetric Ciphers
One of the fundamental notions to the aspect of security aims at securing private information over a public channel. Brieﬂy, there are two well-known and widely used
approaches to this end; key-pair and symmetric ciphers. A cipher is an algorithm that
takes the raw form of the information, or plaintext, and transforms it into ciphertext, or
information that is unintelligible to an outside party.
A key-pair cipher is an algorithm that is based upon the use of two data sets, or
keys. Both keys are required for the process of enciphering and deciphering plaintext.
The security of the algorithm hinges upon maintaining close control of one of the keys.
This key is known as the private key, and is never disclosed to any outside party. The
other key, known as the public key, is freely distributable and open for public inspection.
Since both keys are required for encrypting and decrypting information, possession of
the public key will not be sufﬁcient enough to compromise the communication process.
Given a communication channel between Mary and Bob, Mary can convert plaintext
into ciphertext using Bob’s public key. This ciphertext would only be able to be deciphered by someone possessing Bob’s private key. If Bob’s private key is known only
to Bob, then Bob would be the only party able to decipher the message. Similarly, Bob
could respond to Mary in a secure manner by enciphering plaintext with Mary’s public
key, etc.
One of the drawbacks of the key-pair approach to encryption is the amount of overhead incurred in the
key 1

plaintext

��

key 2

ciphertext

��

plaintext

conversion. A more efﬁcient algorithm is based upon the use of a single session key for
both the encipher and decipher processes. That is:

On Group Communication Systems: Insight, a Primer, and a Snapshot

symmetric key

plaintext

��

313

symmetric key

ciphertext

��

plaintext�

The generation of session keys is often facilitated by an initial key-pair based communication. Examples of these ciphering approaches are given below.
4.2 Certiﬁcate Based Security
Certiﬁcate-based systems rely on Certiﬁcate Authorities (CA) and trusted intermediaries to establish authentication of both clients and servers. In a certiﬁcate-based system, key-pairs are used to encrypt and decipher messages, to digitally sign message
content, and for authentication. Key holders, clients and servers for example, are held
responsible for keeping their secret key private. That is, from being compromised. The
other key, the public key, is freely open to public inspection. These keys work together
for encrypting and decrypting messages. Which key is used for encryption or decryption depends upon the ﬁnal recipient of the message. Typically, a message originating
from a key holder would be encrypted with the private key. The recipient would decrypt
the contents with the key holders public key complement.
In a certiﬁcate based system, a Certiﬁcate Authority (CA) is presented with a key
holder’s public key and would issue a relatively long-lived credential known as a public
key certiﬁcate. When two key holder’s possess such certiﬁcates, they can authenticate
each other without further reference to a CA. However, due to the long-lived credential
duration, the CA’s Certiﬁcate Revocation Lists (CRL’s) play a role to update revoked
credentials. In terms of scalability, a certiﬁcate-based system would be limited by the
frequency with which group members would need to contact the CA’s CRL to learn of
revoked certiﬁcates.
4.3 Key Distribution Centers
Assume that security is based upon a single, secret key technology. That is, where two
parties hold the same key for use in encryption and decryption of messages. If the group
membership grows fairly large, say n then each group member would need to know
n � 1 keys. Further, the addition of a group member would constitute the generation
of n keys. The keys would also have to be able to be distributed securely amongst the
group members, which soon becomes an overwhelming task except for all but small
group memberships.
One way to make things more manageable is to use a single trusted node known
to maintain the keys for all the nodes. This node is called the Key Distribution Center,
(KDC). Individual channels are secured between group members by ﬁrst contacting the
KDC for a ticket-granting ticket (TGT), which must then be presented to a centralized
Ticket Granting Service (TGS) to obtain a session ticket for the connection. Relative
to certiﬁcates, the TGT’s are short lived, and provides the mechanism to guard against
revoked credentials.
Kerberos [13] is an example of an authentication scheme implementation that is
built upon the KDC paradigm, supporting many network applications and services. The
KDC’s make key distribution much more convenient, but there are some major disadvantages too. Mainly, the KDC has enough information to masquerade as any of the

314

P. Gray and J.S. Pascoe

Fig. 2. Using unique session keys for each possible communication channel (left) scales poorly
to large groups. Instead, the Ticket Granting Service is used to maintain and distribute session
keys on demand (right).

groups members. That is, if it were to be compromised, every connection would be vulnerable. It is a single point of failure in the scenario as well, since if the KDC were to
become unreachable, subsequent communication within the group structure would not
be possible.
These issues, have to a large extent, been addressed in work such as the Ensemble
project. Ensemble has incorporated public key and KDC features into a robust security
framework that allows for multiple group partitions, group re-key on demand, and supporting group libraries for building applications that utilize the Ensemble authentication
framework. For more information on Ensemble, consult [14].

5 Conclusion
This paper has presented tutorial style insight into the central issues surrounding group
communication systems. The above discussion is presented in a form that is suitable
for new researchers to the ﬁeld. Where possible, the discussion has attempted to reintroduce some of the implementation insight gained from the development of the wealth
of software in the area. In the future, it is envisaged that group communication systems
will beneﬁt from the recent advances in the ﬁelds of wireless networking and mobile
computing. Thus, the consideration of the ﬁelds fundamental ideas in these novel contexts poses a series of new and interesting challenges to both the established member of
the ﬁeld, and the newcomer.
5.1 Recommended Reading
We brieﬂy draw attention to some of the more noteworthy references in the ﬁeld. In the
authors opinion, the most comprehensive reference on group communication systems is
Birman [9]. More detail on Isis, Virtual Synchrony and Hours can be found in numerous
papers, available from Cornell’s web site4 . On speciﬁcally the concept of Extended
Virtual Synchrony, the reader should consult Agarwal’s thesis [3]. For security issues,
consult the Ensemble project [14]. For synchronous group communication systems, the
interested reader is encouraged to study the work of Kopetz [11]. Researchers interested
in studying failure detectors should begin by reading the seminal Chandra and Toueg
paper [19]. Finally, the work of Holzmann on the SPIN protocol validator [6] provides
an interesting starting point for any researchers who are interested in the more formal
aspects of the ﬁeld.
4

See: http://www.cs.cornell.edu/Info/Projects/HORUS/.

On Group Communication Systems: Insight, a Primer, and a Snapshot

315

References
1. H. Attiya and J. Welch. Distributed Computing: Fundamentals, Simulations and Advanced
Topics. McGraw-Hill, 1998.
2. S. Chodrow, S. Cheung, P. Hutto, A. Krantz, P. Gray, T. Goddard, I. Rhee, and V. Sunderam. CCF: A Collaborative Computing Frameworks. In IEEE Internet Computing, January / February 2000.
3. D. A. Agarwal. Totem: A Reliable Ordered Delivery Protocol for Interconnected Local-Area
Networks. PhD thesis, University of California, Santa Barbara, August 1994.
4. D. Dolev and D. Malki. The Transis Approach to High Availability Cluster Communication.
In Communications of the ACM, April 1996.
5. Whitﬁeld Difﬁe and Martin Hellman. New directions in cryptography. IEEE Transactions
on Information Theory, IT(22):644–654, November 1976.
6. G. J. Holzmann. Design and Validation of Computer Protocols. Prentice Hall, 1991.
7. K. Berket. The InterGroup Protocols: Scalable Group Communication for the Internet. PhD
thesis, University of California, Santa Barbara, December 2000.
8. K. P. Birman. The Process Group Approach to Reliable Distributed Computing. Communications of The ACM, pages 37–53, December 1993.
9. K. P. Birman. Building Secure and Reliable Network Applications. Prentice Hall, 1997.
10. Charlie Kaufman, Radia Perlman, and Mike Speciner. Network Security: Private communication in a public world. Prentice Hall, Upper Saddle River, New Jersey 07458, 1995.
11. H. Kopetz. Real-Time Systems: Design Principles for Distributed Embedded Applications.
Kluwer Academic Publishers, 1997.
12. L. E. Moser and P. M. Melliar-Smith and D. A. Agarwal and R. K. Budhia and C. A. LingleyPapadopoulos. Totem: A Fault-Tolerant Multicast Group Communication System. In Communications of the ACM, April 1996.
13. B. Clifford Neuman and Theodore Y. T’so. Kerberos: An authentication service for computer
networks. IEE Communications, pages 33–38, September 94.
14. O. Rodeh and K. P. Birman and D. Dolev. The Architecture and Performance of Security
Protocols in the Ensemble Group Communication System. Technical Report TR2000-1791,
Cornell University, March 2000.
15. P. Gray and V. S. Sunderam. IceT: Distributed Computing and Java. Journal of Concurrency:
Practice and Experience, 9(11):1161–1168, 1997.
16. J. S. Pascoe and R. Loader. A Survey on Safety-Critical Multicast Networking. In Proc.
Safecomp 2000, October 2000.
17. R. van Renesse and K. P. Birman and S. Maffeis. Horus, A Flexible Group Communication
System. In Communications of the ACM, April 1996.
18. I. Rhee, S. Cheung, P. Hutto, A. Krantz, and V. Sunderam. Group Communication Support
for Distributed Collaboration Systems. In Proc. Cluster Computing: Networks, Software
Tools and Applications, December 1998.
19. T. D. Chandra and S. Toueg. Unreliable Failure Detectors for Reliable Distributed Systems.
Journal of the Association for Computing Machinery, 43(2), 1996.
20. Mary Thompson, William Johnston, Srilekha Mudambai, Gary Hoo, Keith Jackson, and Abdelilah Essiari. Certiﬁcate-based access control for widely distributed resources. In Proceedings of the Eighth Usenix Security Symposium, August 99.

