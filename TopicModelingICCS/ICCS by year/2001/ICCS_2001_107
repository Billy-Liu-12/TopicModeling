Discrete Local Fairing of B-Spline Surfaces�
Seok-Yong Hong, Chung-Seong Hong, Hyun-Chan Lee, and Koohyun Park
Department of Information and Industrial Engineering,
Hong-Ik University, Sangsu-dong 72-1, Mapo-gu,
Seoul, Republic of Korea (121-791)
sy hong@orgio.net, pulnaeum@shinbiro.com,
hclee@wow.hongik.ac.kr, khpark@wow.hongik.ac.kr

Abstract. Many surfaces can be modeled by interpolating data points
digitized from existing products. But the digitized data points could have
measuring errors. To adjust the points, fairing is performed. We present
an automatic local fairing algorithm using nonlinear programming. For
the objective function of the algorithm, we derive discrete fairness metrics. The metrics are consisted of discrete principal curvatures. The discrete principal curvatures are calculated with the given data points.

1

Introduction

Reverse engineering is popular in product design. In reverse engineering, surfaces
can be modeled by interpolating data points digitized from existing products.
Designers can model new products by modifying the surfaces. But the digitized
points could have noises. If the surfaces are constructed with such points, they
have unwanted shapes. Fairing is necessary to adjust the points with noises.
Many existing fairing algorithms bring about good fairing results. However,
excessive fairing of surface could have a problem. The problem is that the pattern
of local shapes of an original surface is not preserved after fairing [3,5]. Thus,
we present a new fairing algorithm, which performs iterative local fairing of
data points of B-spline surfaces. As a result, it brings about fair surfaces and
preserves the pattern of local shapes of an original surface. Because it performs
fairing of data points, we adopted new discrete fairness metrics. The fairness
metrics contain discrete principal curvatures. We derived the discrete principal
curvatures from the data points.

2

Discrete Fairness Metrics

Fairness criteria are necessary to determine whether a surface is fair or unfair. The presented algorithm can use various fairness criteria such as ﬂattening,
rounding, and rolling. Designers can choose a fairness criterion suitable to design
intents. Once a fairness criterion is selected, fairness of a surface must be measured numerically. The numerical measure of fairness is called fairness metric.
�

This research was supported by Brain Korea 21 grant.

V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 693–697, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

694

S.-Y. Hong et al.

Fig. 1. Calculating discrete nomal curvatures with data points

We adopted the concept of derived surface to calculate discrete fairness metrics used in fairing data points [5]. A derived surface is consisted of geometric
invariants such as curvature, radius of curvature, torsion, unit normal vector,
unit tangent vector, and unit binormal vector. Once the derived surface for a
fairness criterion is determined, we can derive a fairness metric by calculating the
area of the derived surface. The fairness metric is used as the objective function
of an optimization problem for fairing. If we minimize the objective function,
the surface under consideration becomes fair. One of the fairness metrics we
used is a rolling metric. If the rolling metric is minimized, an original surface
tends to be made more cylindrical or conical. The rolling metric is shown in the
equation (1). In the equation, W is deﬁned as K + H 2 . K, H, k1 , and k2 denote
Gaussian curvature, mean curvature, and two principal curvatures, respectively.
s and t are the parameters of the surface to be faired.
��

� �
|W |

∂W
k1
∂t

�2

�

∂W
+ k2
∂s

�2

�1/2
2

+W K

2

dsdt

(1)

To adopt the concept of the fairness metrics stated above in fairing data
points, discrete fairness metrics must be derived. A discrete fairness metric is
calculated with data points and it is consisted of discrete principal curvatures.
To calculate the discrete principal curvatures at a data point, discrete normal
curvatures at the data point must be derived. If data points are positioned
in rectangular manner, a data point is surrounded by eight neighboring data
points as shown in Fig. 1. Thus, discrete normal curvatures at the data point
can be calculated in four directions, because they are calculated using the circles
passing through three consecutive points containing the data point. The four
discrete normal curvatures can be calculated using the original concept of normal
curvature. The original normal curvature κn at a point on a surface can be
calculated as follows [1]:
κn = κN · n

(2)

Discrete Local Fairing of B-Spline Surfaces

695

The four directional discrete normal curvatures at a data point can be calculated as follows:
First, discrete curvature at the data point is substituted for the curvature κ n
in the equation (2). As shown in Fig. 1, with the given three consecutive points,
Pi−1 , Pi , and Pi+1 , discrete curvature κi at the point Pi is calculated as the
inverse of the radius of the circle passing through the three points. In addition,
its ﬁrst derivative can be calculated with discrete curvatures and the distances
between the given points [2].
Second, the discrete main normal vector Ni at the same data point is substituted for the main normal vector N of a curve on a surface. It can be calculated
as the unit vector, of which direction is from the data point to the center of the
circle passing through the three points used in calculating the discrete curvature
at the data point.
Third, to approximate the unit normal vector n of a surface, we calculate
four directional unit tangent vectors with the data point and eight neighboring
data points. In Fig. 1, Ti denotes one of the four unit tangent vectors. Each of
the four vectors is tangent to the corresponding circle passing through the three
consecutive points used for the discrete curvature. Then, we calculate two cross
product vectors for two pairs of unit tangent vectors. One pair of the unit tangent
vectors are of horizontal and vertical directions. The other pair of the vectors
are the unit tangent vectors of diagonal directions. Finally, we can approximate
the unit normal vector n by calculating the average of the two cross product
vectors.
Therefore, we can calculate four directional discrete normal curvatures at
a data point using the derived discrete curvatures and normal vectors. Then
we select a minimum discrete normal curvature and the other discrete normal
curvature of orthogonal direction. The two curvatures are the discrete principal
curvatures [4]. The discrete principal curvatures and the ﬁrst derivatives of the
discrete principal curvatures are used in calculating discrete fairness metrics.

3

Discrete Fairing Algorithm

The proposed discrete fairing algorithm performs iterative local fairing. For local
fairing, a local fairness function is chosen as objective function. It evaluates fairness at a data point. Then, global fairness function is evaluated by accumulating
all local fairness function values. It evaluates fairness for whole data points. The
procedures of the algorithm are as follows:
Step 1. A data point set is given as input data.
Step 2. For a fairness metric, the value of the local fairness function for each
data point and the value of the global fairness function are calculated.
Step 3. The point of which value of the local fairness function is the largest is
selected.
Step 4. An optimization problem is formulated for improving fairness at the selected data point as follows. First, the local fairness function for the selected

696

S.-Y. Hong et al.

data point is used as the objective function of the optimization problem.
Second, the free variables of the problem are the coordinates of the selected
data point. Third, a constraint is set from the distance measure between the
original data point and the modiﬁed data point. Then, new data point is
calculated through the optimization process.
Step 5. If new value of the global fairness function is reduced, take the new
point as the modiﬁed data point and go to step 2. If it is not reduced,
the point of which value of the local fairness function is the next largest is
selected and go to step 4. However, if no more point exists to select, go to
step 6.
Step 6. A new B-spline surface is constructed by interpolating the modiﬁed
data point set.

4

Experimental Results

We tested the proposed discrete fairing algorithm with an example data point
set. Fig. 2 shows the results of fairing with a rolling metric. The ﬁgure contains an original surface, the surface faired with the discrete fairing algorithm,
and the surface faired with an analytic fairing algorithm. The original surface
is constructed by interpolating 63 data points. The analytic fairing algorithm
is one of the existing fairing algorithms. It performs global fairing and uses
analytic fairness metrics derived from surface geometry [5]. As the right view
shows, the discrete fairing algorithm fairs the original surface and preserves the
local shapes of the original surface, while the analytic fairing algorithm removes
all of the local shapes. Fig. 3 shows the mean curvature graphs for the fairing
results and explains the fairing results well. Because the analytic fairing algorithm performs excessive fairing, the mean curvature graph of the surface faired
with it is almost ﬂat. However, the mean curvature graph of the surface faired
with the discrete fairing algorithm is smoother than the original mean curvature
graph. In addition, the pattern of local shapes of the original mean curvature
graph is preserved. The right view shows these results clearly. The reason of the
shape preservation comes from the fact that the proposed discrete local fairing
algorithm improves fairness at fewer points, which cause only local irregularities.

5

Conclusions

We proposed a discrete fairing algorithm. The algorithm performs local and
discrete fairing of data points of B-spline surfaces. It fairs the data points and
preserves the local shapes of an original surface better than existing global fairing
algorithms. This is due to its local and discrete fairing. In addition, the algorithm
has less computation time, because it has one free point per a fairing iteration
and uses discrete diﬀerential geometry.
Therefore, when designers want to preserve the pattern of local shapes of an
initial surface after fairing, the proposed algorithm can be adopted and used.
There are two future works to be continued. One is to develop another fairness

Discrete Local Fairing of B-Spline Surfaces

697

Fig. 2. Fairing results with rolling metric

Fig. 3. Mean curvature graphs for the fairing results with rolling metric

metrics and the other is to construct a new surface fairing algorithm, which does
not adopt optimizations but uses analytic equations to improve fairness.

References
1. Choi, B. K.: Surface Modeling for CAD/CAM. Elsevier, Amsterdam Oxford New
York Tokyo (1991) 25-29
2. Eck, M. and Jaspert, R.: Automatic Fairing of Point Sets. Designing Fair Curves
and Surfaces. Society for Industrial and Applied Mathematics, Philadelphia (1994)
45-60
3. Lott, N. J. and Pullin, D. I.: Method for Fairing B-spline Surfaces. Computer-Aided
Design. 10 (1988) 597-604
4. O’Neill, B.: Elementary Diﬀerential Geometry. Academic Press (1966) 199-202
5. Rando, T. and Roulier, J.A.: Measures of Fairness for Curves and Surfaces. Designing Fair Curves and Surfaces. Society for Industrial and Applied Mathematics,
Philadelphia (1994) 75-122

