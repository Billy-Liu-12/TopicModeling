On a Nearest-Neighbour Problem in Minkowski
and Power Metrics
M.L. Gavrilova
Dept of Comp. Science, University of Calgary
Calgary, AB, Canada, T2N1N4
marina@cpsc.ucalgary.ca

Abstract. The paper presents an eﬃcient algorithm for solving the nearestneighbor problem in the plane, based on generalized Voronoi diagram construction. The input for the problem is the set of circular sites S with varying
radii, the query point p and the metric (Minkowski or power) according to
which the site neighboring the query point, is to be reported. The IDG/NNM
software was developed for an experimental study of the problem. The experimental results demonstrate that the Voronoi diagram method outperforms the
k − d tree method for all tested input site conﬁgurations. The similarity between the nearest-neighbor relationship in the Minkowski and power metrics
was also established.

1

Introduction

The Voronoi diagram is often used as a convenient tool for solving scientiﬁc
problems in computer modeling of physical phenomena. These include structure
analysis of unordered systems (liquids, solutions, polymers) [12], stress analysis
and simulation of granular systems (ice ﬂow, silo models) [9], and space structures in complex molecular and biological systems [11,17].
There are some challenges arising while investigating such problems. Existing
software and algorithms are not customized to eﬃciently solve a variety of application problems. A particular problem addressed in this paper is the ﬁnding
of a nearest-neighbor in a system of poly-sized circular objects [14]. The application of the ordinary point site Voronoi diagram to perform the nearest-neighbor
query in 2D is straightforward [1]. The algorithm takes O(n) space, O(nlogn)
preprocessing time, and the worst-case running time of O(n). The same idea
has been extended to higher dimensions [3], applied to solve the point location
problem among the convex sites [16,10], and used to solve the nearest-neighbor
problem for dynamic Voronoi diagram [4]. The generalized VD in Laguerre geometry was successfully used to solve the collision optimization problem in a system
of moving particles [9]. The properties of the generalized weighted Voronoi diagrams that enable the use of this data structure for nearest-neighbor detection
were thoroughly investigated in [8]. However, there has not been a study that
compares the various generalized Voronoi diagrams with respect to solving the
nearest-neighbor problem.
Thus, this paper presents a study of the generalized Voronoi diagram approach
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 663–672, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

664

M.L. Gavrilova

for ﬁnding the nearest-neighbor for a set of non-intersecting circles. Application domains for this problem can be found in computer graphics, GIS, computer modeling and computer simulation [14]. The developed method can also
be applied to problems from statistics and information retrieval ﬁelds. The data
structures studied are the generalized weighted Voronoi diagram (VD) under the
Manhattan, supremum and power metrics. The main result is an eﬃcient and robust algorithm for the nearest-neighbor computation in Manhattan, supremum
and power metrics.
The performance of the VD based method was compared against the CORE
library implementation of the k − d tree method [2] that was modiﬁed to handle
weighted sites under the supremum metric. The experimental results show signiﬁcantly better performance for the generalized VD based method, including
large (10,000 sites) data sets with various topologies. It is also worth noting that
a similar technique can be applied to solve a variety of problems, such as all
nearest-neighbors, point location and range queries.

2

Problem Deﬁnition

Consider a set of circular sites S in the plane. Deﬁne a nearest-neighbor relation
between the query point x and a site P as follows. The point x ∈ R 2 is the
nearest neighbor of P ∈ S iﬀ d(x, P ) ≤ minQ�=P d(x, Q), Q ∈ S. The distance
d(x, P ) between a point x(x1 , x2 ) and a circle P = {p, rp } with the center at
p(p1 , p2 ) and radius rp can be computed as
d(x, P ) = d(x,p) − rp = |x1 − p1 | + |x2 − p2 | − rp

(1)

in the Manhattan (L1 ) metric, and as
d (x, P ) = d(x, p) − rp = max (|x1 − p1 | , |x2 − p2 |) − rp

(2)

in the supremum (L∞ ) metric. In Laguerre geometry (under the power distance
function) it is computed according to the formula:
2

2

d(x, P ) = d(x, p)2 − rp2 = (x1 − p1 ) + (x2 − p2 ) − rp2 .

(3)

We propose to use the generalized Voronoi diagram as a tool to solve the problem.
The generalized Voronoi diagram of a set of circles S in the plane is a set of
generalized Voronoi regions GV or(P ), where
GV or (P ) = { x| d (x, P ) ≤ d (x, Q) , ∀Q ∈ S − {P }}

(4)

and d(x, P ) is the distance function between a point x and a circle P [14].
The distance function d(x, P ) is deﬁned according to the metric employed. The
example of the generalized Voronoi diagram in supremum metric of 1000 sites
can be found in Fig. 1. A generalized Delaunay triangulation (DT) is the dual
of a generalized Voronoi diagram obtained by joining all pairs of sites whose
generalized Voronoi regions share a common edge. The nearest-neighbor property

On a Nearest-Neighbour Problem in Minkowski and Power Metrics

665

Fig. 1. Supremum weighted VD for 1000 randomly distributed sites generated using
the Initial Distribution Generator (IDG) module.

for VD in various metrics, including Manhattan, supremum and power, was
established in [8]. This property allows solving the nearest-neighbor problem
by constructing the generalized Voronoi diagram or the Delaunay triangulation.
The method is presented in the following section.

3

The Nearest-Neighbor Search Algorithm

The following outlines the nearest-neighbor search algorithm based on the generalized DT construction. The input for the algorithm is a set of circular sites. The
approach is based on the simple edge-walk technique that starts with a random
location in the Delaunay triangulation:
1. (Initialization) Build the weighted generalized Delaunay triangulation (using, for example, a ﬂip-based incremental construction technique).
2. Find a site P neighboring the query point x.
a) Randomly select a site P0 as a starting site for the search (call it the
active site).

666

M.L. Gavrilova

b) Randomly select an edge adjacent to the active site in the Delaunay
triangulation and set its value to eprev = ecurr = enew
c) Perform a counter-clock wise walk alone the DT edges adjacent to the
active site. Select the ﬁrst edge such that x is located to the left of
the straight line passing through this edge, by performing the CCW
orientation test.
d) Update eprev = ecurr , ecurr = enew . Set enew as the newly found edge.
e) If edges eprev ,ecurr , enew do not form a triangle enclosing the query point
x, set the endpoint of enew edge to be the new active site. GOTO 2(c).
3. Report the closest of the vertices of the triangle formed by the edges
eprev ,ecurr , enew as the nearest-neighbor to the query point x.
The preprocessing step is the worst-case optimal O(nlogn), the worst-case
number of edges visited during the Step 2 is O(n) (since we never consider a
visited edge twice) and the space complexity is O(n).
Note 1: The incremental ﬂipping algorithm description can be found in [5].
Note 2: The algorithm is applicable for solving the point location problem and
the range search problem in the presence of speciﬁc constraints. Thus, the
presented algorithm locates the Voronoi region containing the query point and
the generator of this Voronoi region is reported as the nearest neighbor.
Note 3: The Voronoi diagram does not depends on the sizes or distributions of
the circles, with the exception of close to degenerate cases, that also require
special treatment in the cell-based or k − d tree methods [2].

4

IDG/NNM Software

The algorithm outlined above was implemented in the object-oriented Borland
Delphi environment. The experiments were conducted on a Pentium II 350 computer with 128 MB RAM. The program consists of two modules. The ﬁrst module, the Initial Distribution Generator (IDG), is used to create various conﬁgurations for the input sites. IDG can generate a new distribution by importing
the distribution from a text ﬁle, where the coordinates of the centers and radii of
circles are speciﬁed. IDG can also automatically generate various distributions,
such as uniform distribution of sites in the interior of a square, uniform distribution of sites in the interior of a circle, cross, ring, degenerate grid and degenerate
circle (see Fig. 2). The parameters of the distribution, including the number of
circles, the distribution of their radii, the size of the area, and the type of the
distribution must be speciﬁed as well. The second module, the Nearest-Neighbor
Monitor (NNM), is the program that constructs the additively weighted supremum VD, the power diagram and the k − d tree in supremum metric for the

On a Nearest-Neighbour Problem in Minkowski and Power Metrics

667

Fig. 2. Six conﬁgurations of sites in supremum metric (left right, top down direction):
uniform square, uniform circle, cross, degenerate grid, ring and degenerate circle.

speciﬁed input conﬁguration. Then NNM performs a series of nearest-neighbor
searches.
The eﬃciency of the VD-based method was compared against the k − d tree
method for a set of circles in the plane. The k − d tree implementation is based
on the Ranger software [13], which implements an optimal k − d tree method for
a set of points [6]. The software was modiﬁed to accommodate the circular sites.
Each site was represented by the four corner points, eﬀectively allowing reporting
the nearest neighbor in the weighted supremum metric. The software was also
optimized to avoid the unnecessary memory allocations and initializations of the
internal variables for maximum eﬃciency when performing multiple queries. The
eﬃciency of the method does not depend on the metric used, thus the supremum
and power VD methods were compared to the same implementation of the k − d
tree method.
After the initial distribution is generated, it is loaded into the NNM Module.
First, the generalized Voronoi diagram, Delaunay Triangulation or a k − d tree is
computed in power or supremum metric. The snapshot of the screen (see Fig. 3)
illustrates the Voronoi diagram in Laguerre geometry of 10000 circular sites in
ring conﬁguration. The nearest-neighbor queries are done by either generating
a sequence of random queries or by selecting the query point manually. When a
manual query is performed, the path from the starting VD edge to the nearestneighbor of the query point is highlighted and the length of this path is displayed.

668

M.L. Gavrilova

Fig. 3. Example of generalized VD under power metric for 10000 sites, ring conﬁguration

The measured characteristics that represent the performance of the method include the total number of queries performed, the elapsed time, the average time
per query, and the average search length. The average search length is a parameter related to the number of comparisons that the algorithm performs. For the
VD approach, this parameter represents the total number of edges that were
encountered during the edge walk while performing a query. In case of k − d tree
this parameter represents the total number of distance comparisons performed
on diﬀerent nodes of the tree. This parameter was selected for evaluation since
it helps to compare VD and k − d tree methods, and it can be easily visualized.

5

Experimental Studies

The experiments were performed for diﬀerent data set sizes, various distributions of their density, radii and site conﬁgurations. The algorithms were tested
on the generated data sets and the data set representing granular-type material
system for a silos simulation with large number of particles (the data sets were
provided by the Department of Mechanical Engineering, University of Calgary).

On a Nearest-Neighbour Problem in Minkowski and Power Metrics

669

Fig. 4. Time required for building the initial data structure vs. the number of sites

The ﬁrst series of experiments were performed on randomly generated distributions including uniform square, uniform circle, cross, ring, degenerate grid and
degenerate circle distributions. All of the distributions were tested on data sets
consisting of 100 to 10000 input sites. The experiments show that the k − d tree
method requires much less initialization time than the Voronoi diagram methods,
even though the upper bound for both algorithms is O(n). Experimental results
demonstrated that the initialization time required to build the data structure
is the smallest for the k − d tree based method (see Fig. 4). However, both the
power diagram and supremum diagram method consistently outperformed the
k−d tree method in terms of the query time required to ﬁnd the nearest-neighbor
(see Fig. 5). This holds for regular as well as close to degenerate conﬁgurations.
Note that the query time for both VD based methods is very close. The average
search length was recorded for all the tests performed, and it exposed a similar
linear dependence (growth) as the number of sites increased. Thus, for uniform
and degenerate grid distributions it increases from 10 for 100 sites to about 180
for 10000 sites. In the case of circle distribution it increases from 50[DG1] for
100 sites to 5500 for 10000 sites. This result is consistent with the fact that
the queries on the circle distribution are usually more time consuming than the
queries performed on all other distributions. Based on the results obtained, the

670

M.L. Gavrilova

Fig. 5. Time required for performing 1000 queries vs. the number of sites

conclusion can be made that the power and supremum Voronoi diagram method
is an eﬃcient data structure for performing nearest-neighbor queries, independent of the site conﬁgurations. This was demonstrated for the number of input
sites increasing from 100 to 10000. However, the preprocessing time for the VDbased method is quite large compared to the k − d tree method.
Another interesting result is that the VD in either metric can be used for approximate nearest-neighbor searches. The following series of experiments were
performed to determine how ’close’ the nearest-neighbor found in power metric would be to the nearest-neighbor reported in the supremum metric . The
experimental results show that in 95% of all cases the same nearest-neighbor
is reported in both metrics, and in 4.5% of remaining cases the two nearestneighbors reported in diﬀerent metrics were connected by an edge in the Delaunay triangulation. This shows that it is possible to use either a power diagram
or a supremum Voronoi diagram for the approximate nearest-neighbor searches.
The third series of the experiments were performed on a data set generated as
a result of computer simulation of the granular-type material system for a silo
model [7]. The model represents a grain elevator with vertical boundaries and a
large number of densely packed grain particles. Test results show that the initialization time for the power diagram method is practically the same as for the

On a Nearest-Neighbour Problem in Minkowski and Power Metrics

671

Fig. 6. DT built in power metric for 2500 particles and the running time vs. number
of sites.

k − d tree method and the supremum diagram requires signiﬁcantly more time
for initialization. The query time for power diagram is almost the same as for
supremum diagram and outperforms the k − d tree method (see Fig. 6).

6

Conclusions

This paper presented an algorithm for an eﬃcient solution of the nearestneighbor problem for a set of weighted sites based on the generalized Delaunay
triangulation. The results obtained clearly demonstrate the applicability of the
generalized DT under various distance functions as an eﬃcient, robust and easy
to implement method for solving the nearest-neighbor problem. The investigation of the diﬀerent approaches to select the starting site for the search represents
an interesting problem.
Author would like to thank Jon Rokne and Nikolai Medvedev for useful comments and suggestions that helped to improve the paper. Author would also like
to express special thanks to Dmitri Gavrilov and Oleg Vinogradov for providing
the test data. The work was partly supported by UCRG Research Grant.

References
[1] Aggarwal, P., Raghawan, P. Deferred data structures for the nearest-neighbor
problem, Inform. Process. Letters 40 (3) (1991) 119–122.
[2] Bentley J. L. k − d Trees for Semidynamic Point Sets, in Proceedings of the 6th
Annual ACM Symposium on Computational Geometry (1990) 187–197.

672

M.L. Gavrilova

[3] Berchtold, S., Ertl, B., Keirn, D., Kriegel, H.P., Seidel, T. Fast nearest neighbor
search in high-dimensional space, in Proc. of the 14th Intn. Conf. On Data Emg,
Orlando, Florida (1998).
[4] Devillers, O., Golin, M., Kedem, K., Schirra, S. Queries on Voronoi Diagrams of
Moving Points, Comput. Geom. Theory and Applic. 6 (1996) 315–327.
[5] Edelsbrunner, H., Shah, N. Incremental topological ﬂipping works for regular
triangulations, Algorithmica 15 (1996) 223–241.
[6] Friedman, J., Bentley, J., Finkel, R. An Algorithm for Finding Best Matches in
Logarithmic Expected Time, ACM Transactions on Mathematical Software, 3(3)
(1977) 209–226.
[7] Gavrilov, D., Vinogradov, O. A cluster in granular systems as a topologically variable structure, in Proc. of 1997 ASCE Symposium on Mechanics of Deformation
and Flow of Particulate Materials, Evanston, IL (1997) 299–307.
[8] Gavrilova, M. Proximity and Applications in General Metrics Ph. D. Thesis, Dept.
of Computer Science, University of Calgary, Canada (1999).
[9] Gavrilova, M., Rokne, J., Vinogradov O and Gavrilov D. Collision detection algorithms in simulation of granular materials, 1999 ASME Mechanics and Materials
Conference, (1999) 283- 284.
[10] Graf, T., Hinrichs, K. A Plane-Sweep Algorithm for the All-Nearest-Neighbors
Problem for a Set of Convex Planar Objects, in Proc. 3rd Works. Algm. Data
Struct., LNCS, Springer-Verlag 709 (1993) 349–360.
[11] Luchnikov, V.A., Medvedev, N.N., Voloshin, V.P., Geiger, A. Simulation of transport and diﬀusion of the Voronoi network, in the book: Scientiﬁc Computing in
Chemical Engineering, Springer-Verlag, Berlin, (1999).
[12] Medvedev, N.N. Voronoi-Delaunay Method for Non-crystalline Structures, SB
Russian academy of Science, Novosibirsk (in Russian) (2000).
[13] Murphy, M., Skiena, S. A study of data structures for orthogonal range and nearest neighbor queries in high dimensional spaces, CSE 523/524 Master’s Project,
Department of Computer Science, SUNYSB (1996).
[14] Okabe, A., Boots, B., Sugihara, K. Spatial Tessellations: Concepts and Applications of Voronoi Diagrams. John Wiley & Sons, Chichester, England (1992).
[15] O’Rourke, J. Computational geometry in C. Cambridge Univ. Press (1994)
[16] Schaudt, B., Drysdale, R. Higher-dimensional Voronoi diagrams for convex distance functions,” in Proc. of the 4th Can. Conf. on Comp. Geometry (1992)
274–279.
[17] Shinoda, W., Okazaki, S. A Voronoi analysis of lipid area ﬂuctuation in a bilayer
J. Chem. Phys. V. 109(4) (1998) 1517–1521.

