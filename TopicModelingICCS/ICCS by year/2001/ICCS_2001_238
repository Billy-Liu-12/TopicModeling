Token Finding Using Mobile Agents
Delbert Hart1 , Mihail E. Tudoreanu2 , and Eileen Kraemer3
1

3

University of Alabama in Huntsville
Huntsville, AL 35899 USA
dhart@cs.uah.edu
2
Washington University in St. Louis
St. Louis, MO, 63130 USA
renu@cs.wustl.edu
University of Georgia Athens, GA, 30606 USA
eileen@cs.uga.edu

Abstract. One of the greatest challenges facing the software community today is the increasing complexity of software. Complexity limits
understanding, making it diﬃcult to evaluate the correctness, reliability,
and performance of a system. Coupled with visualization, monitoring can
provide users with insight into an application’s behavior. Monitoring can
also be used in conjunction with automated tools to adaptively tune performance. This paper presents a detailed look at how mobile agents that
are embedded in a monitoring system can be used to ﬁnd a token within
a distributed system. Several strategies by which agents may accomplish
this task are qualitatively compared. We then describe tests that were
performed to evaluate trade-oﬀs among the strategies considered, and
discuss the results of those tests.

1

Introduction

Software systems are some of the most complex constructs created by man.
This degree of complexity makes it diﬃcult to evaluate their correctness and
performance a priori. Monitoring provides a practical way of learning about
distributed computations. To be eﬀective, online monitoring must adapt to the
changing needs of the user while minimizing the eﬀect monitoring has on the
application. In the case of distributed applications, lag, non-determinism and
the lack of a global clock further complicate the monitoring task.
This paper explores the use of mobile agents to address the challenges of
monitoring distributed computations. The use of mobile agents has a number
of beneﬁts: 1) Responsiveness - agents are able to react locally to conditions
at the application processes. 2) Transience - the ability to deploy agents on
demand helps to minimize the overall cost of monitoring. 3) Customization agents may be encoded at run-time; and thus can make use of applicationspeciﬁc information, permitting eﬃcient solutions. 4) Mobility - the ability to
migrate between processes makes agents well suited to distributed applications
in which properties are not necessarily bound to one process.
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2074, pp. 791–800, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

792

D. Hart, M.E. Tudoreanu, and E. Kraemer

The idea of using mobile code for monitoring tasks has been proposed by
many. Yet with the exception of agents within PathFinder [5], the only other
general purpose monitoring system we are aware of that intends to support mobile code is the BRISK system[1], which has plans to employ a Scheme-based
language for agents. Hence, actual experience with mobile code in general purpose monitoring systems is very limited. Other uses of agents for monitoring,
such as in JAT[4] and WHERE[3], do not support the migration of agents between processes of the computation. Thus, these agents lack the ability react
locally and to track non-local properties as easily.
General purpose mobile agent systems, such as AgentTcl[7], are not wellsuited for the tasks of monitoring because they provide high level services such
as name services, authentication, and/or network references that are not necessary for monitoring and incur extra perturbation. General purpose systems
are typically designed to serve as stand-alone systems instead of being embedded within another application or library. For these reasons, we have designed
and implemented a simple mobile code model, specialized for the purposes of
monitoring and steering activities of distributed computations.
This model is used as the basis for implementing speciﬁc mobile agent modules that are part of a larger monitoring and steering framework, the PathFinder
[5] exploratory visualization system. Within the wide range of environments
and tasks in a monitoring system, agents may employ several strategies to perform the monitoring task. To illustrate the richness of agent solutions this paper
presents an example monitoring task, ﬁnding a token in a distributed system. We
provide a novel analysis of how mobile code can be used to address this problem.
We then perform experiments designed to highlight the trade-oﬀs between two
speciﬁc strategies that represent the extremes of mobility versus non-mobility,
providing insight as to when mobile agents are appropriate. Section 2 gives a
brief description of the PathFinder exploratory visualization system and how
mobile agents are supported. The token ﬁnding example and experiments are
given in Sect. 3. The results of the experiments and discussion are provided in
Sect. 4.

2

PATHFINDER

PathFinder manages the size and complexity of distributed systems by engaging the user as an active partner who guides both the collection of data from
the application and the visual representation of the program’s state and behavior. The key insight is that it is both unnecessary and ineﬃcient to collect all
possible data that an application can provide. Instead, one should collect only
the data that supports the user’s current interests. This selective monitoring,
in conjunction with navigation tools to modify the viewer’s perspective on the
computation, provides a dynamic and interactive paradigm for monitoring distributed systems. The use of mobile code to realize these interactions is a natural
extension of this exploratory visualization approach.

Token Finding Using Mobile Agents
Application

793

Module

Incoming Outgoing
Queue
Queue
Attribute
Database

Agent
Module

Schedule
Agent
Repository

Event
Registry

Communication Library
Module

Fig. 1. An agent module can be one of many modules installed to provide monitoring and steering related services. The agent module provides the bridge between the
application and the milieu.

2.1

Agent Model

The agent model has two kinds of entities: agents and milieux (agent servers).
The distinguishing feature of this model is that it is specialized to be embedded
within a monitoring library. This constrains the milieux to potentially sharing
the thread of control with the application and utilizing an abstract asynchronous
form of communication with other milieux. The former constraint arises from
the languages being monitored. The latter is due to the fact that PathFinder is
designed to be applicable to computations using any form of message passing.
Thus, no assumptions about the interprocess communication is made other than
its existence. Agents access information about the application via specialized
agents called avatar agents and event agents, providing synchronous and asynchronous access, respectively. The milieu provides services that allow an agent
to execute within it, to interact with other agents, and to move to other milieux.
A milieu does not support any form of inter-milieux communication other than
agent migration.
Each agent is an encoding of data and code. The code contained within an
agent is stored as a set of handlers. These methods on the agent deﬁne how it
reacts to events in the milieu. A distinguished handler of the agent is the Arrival
handler which is automatically executed by the milieu when the agent arrives.
An agent is considered to be active while one of its handlers is executing. If
the agent migrates to another milieux all of its state information is included in
the transfer. When an agent’s handler completes execution the agent becomes
dormant, waiting until one of its handlers is triggered.
The milieu (Fig. 1) interacts with the outside world via incoming and outgoing queues, which contain agents. When an agent arrives at a milieu, it is
removed from the incoming queue and placed in the agent repository, where it
remains while it is in the milieu. Internally, a milieu is driven by events. Events
are signaled either by an agent or by the arrival of an agent via the incoming
queue. Agents register to react to an event by indicating which of their han-

794

D. Hart, M.E. Tudoreanu, and E. Kraemer

dler(s) should be triggered. The milieu uses the event registry to schedule agent
handlers in response to the signaled event. The handler is executed atomically,
and receives the agent that signaled the event as an argument.
From within a milieu, agents are able to interact with other local (in the same
milieu) agents and with the milieu itself. A milieu allows an agent to: 1) Access
any other agent in the milieu through the agent repository. The ﬁelds or handlers
of any agent, including itself, can be read from or written to. 2) Signal events.
Further, an agent may insert or remove entries of the event registry pertaining to
any agent. 3) Create a new agent. 4) Induce an agent to move to another milieu.
For performance reasons the model does not address issues, such as security,
that are orthogonal to using agents for monitoring and steering.
2.2

Implementation

One instantiation of the model uses Perl to construct the internals of the milieu
(a PMilieu) and to serve as the base language for agents. Perl[8] is an objectoriented, imperative scripting language. The interface between the Perl portions
of the PMilieu and the C coded portions consists of bindings of the incoming and
outgoing queues, Perl modules that provide interfaces to resources present at the
monitored process, and event agents that are generated by the agent module and
inserted into the incoming queue of the milieu. SWIG[2] was used to create the
extension modules that provide access to the resources of the process. Control
is transferred to the PMilieu when an event occurs within the process. The
application regains control after all of the agents have responded to the event,
represented by an event agent.
Other implementations of agent modules for PathFinder support diﬀerent
styles of agents written in other languages. However, all of the agent modules
are based on the same model, allowing reasoning about using mobile agents
without going into speciﬁcs of the implementation and facilitating cooperation
between agents in diﬀerent modules.

3
3.1

Token Finding
Strategies

One use of mobile agents is to discover resources available in a wide-area network
[6]. The resource discovery task is similar to ﬁnding a particular property in a
distributed application. Throughout this section we will refer to the property as
a token, but it could be any property over the local state of a process. A token
enables the process holding it to perform some action(s), and can be used as a
form of coordination among processes. Finding a token in a distributed system
is a common task in monitoring. Data obtained by monitoring the process that
holds the token can help to provide insight into the coordinated action. Mobile
agents may be used to locate and continuously track a token as it moves from
one process to another.

Token Finding Using Mobile Agents

795

Each strategy begins with an initial process, called the coordinator, which
initiates the token-ﬁnding process. If a process has an agent at it, then the
process is said to be covered by the monitoring. Nodes are marked as clean
when no token is present and no token is on the way to the process. We consider
diﬀerent strategies for token ﬁnding (Table 1).
wait The monitoring agent remains at a node until the token arrives there.
ﬂood The coordinator sends an agent to one node. Upon receiving an agent,
the node sends the token out on all of its links. This repeats until all nodes
and links have been aﬀected.
broadcast The coordinator sends a monitoring agent directly to all other nodes.
Broadcast aﬀects only one link per application node, in contrast to ﬂood
which aﬀects all links.
search The monitoring agent moves from one node to another until the token
is found. The movement may be directed or undirected. Only one copy of
the agent exists.
entrapment Agents cooperate to partition the network, and then watch for the
token at the boundary nodes, and slowly “tighten the net”.
wavefront Similar to entrapment, the monitoring agent starts from one locations and sends out a wave of agents looking for the token.
time to live Similar to the search strategy, but the monitoring agent is assigned a maximum number of hops before it ends.
For these strategy the properties of growth, propagation, residue, and guarantees are examined. The properties diﬀer in how the monitoring coverage changes
over time. The growth property indicates how quickly the coverage can increase.
The residue property indicates how long a node remains part of the coverage
and the propagation property measures how far the coverage extends. Table 2
summarizes how the strategies in Table 1 diﬀer.
Growth Each strategy begins the token ﬁnding process at some initial set
of processes and then extends coverage until the token is found. The growth
property describes how the coverage grows, how monitoring spreads from one
process in the computation to another without intervention by the coordinator.
In strategies such as wait and broadcast, processes do not interact with each
other; hence, there is no growth. The search strategy also does not grow. Instead,
it moves the monitoring agent from one process to another.
The entrapment strategy adds one process at a time to the coverage area,
exhibiting constant growth. Proportional growth strategies scale their expansion
based on the size of the computation or the local number of links at the process.
The ﬂood strategy activates monitoring at all neighbors of a process, exhibiting
proportional growth.
A trade-oﬀ exists between the rate of growth of a strategy and the resource
usage of the algorithm. A high growth rate will reduce the amount of lag between
the request for ﬁnding the token and the time of its location. However, a computation may not be able to tolerate the resource demands of a high growth rate.
Another consideration is that strategies with growth rates above a low constant,
e.g. one, are diﬃcult to halt before they have checked the whole network. Even if

796

D. Hart, M.E. Tudoreanu, and E. Kraemer
Table 1. Example token ﬁnding strategies.

For simplicity, the examples will
assume the network is ﬁxed and
FIFO. The circles represent nodes
of the network and the arrows directional channels. The coordinator
is shown as a square.

(wait) A simple strategy is to
activate monitoring at a single node
and wait for the token to arrive.

(search) Instead of waiting for the
token to arrive the search strategy
moves from node to node looking
for the token. The search ends after
a predetermined number of nodes
have been visited.

(entrapment) An entrapment
strategy seeks to increasingly limit
the token’s possible locations until
it is found. In this example the
entrapment strategy has partitioned the network into two parts,
watching the nodes in the middle
to ensure that the token does not
move into the left half while it is
searching the right half.

(broadcast) The coordinator directly activates monitoring in all of
the nodes in the broadcast strategy.
After a period of time the monitoring automatically deactivates.

(ﬂood) The ﬂood strategy begins
at one node and spreads on all
links until the entire computation
is looking for the token.

Token Finding Using Mobile Agents

797

Table 2. Characteristics of diﬀerent token ﬁnding strategies.
Growth
Residue
None/One Constant Proport. expire explicit
wait
x
x
search
x
n/a
n/a
entrapment
x
x
broadcast
x
x
ﬂood
x
x

Propagation Guaranteed
ﬁnite inﬁnite
to ﬁnd
n/a n/a
no
x
no
x
yes
n/a n/a
yes
x
yes

the token is found almost immediately, there is no way to quickly communicate
this information to halt the growth of coverage.
Residue Residue refers to how long artifacts from the strategy remain at a
process. After initially determining that the token is not present at a process,
most strategies will continue to watch the process for a time to ensure that
the token does not arrive from one of the channels. Some strategies deactivate
monitoring if it has been determined that the token can not reach the process
undetected, such as in the case in which all channels arriving at the process have
been ﬂushed and the sources are being monitored.
Flushing lets a process know that a token is not in an incoming channel.
Flushing depends upon the communication characteristics of the network. The
broadcast strategy does an implicit ﬂush of the channels. It knows that monitoring will be active at all processes by a certain time. Then it simply waits
until all messages sent by that time would have been delivered. It assumes a
maximum network delay exists, which is reasonable in many environments. Explicitly ﬂushing a channel consists of sending a marker or message to indicate
that the token is no longer in the channel. Once markers have been received on
all channels, the process may safely deactivate its monitoring. This technique
assumes that the channels are at least FIFO.
Explicit ﬂushing has less lag, but a higher message overhead and typically
involves a more complicated scheme to both clean-up and to keep message traﬃc
at a reasonable level. Another trade-oﬀ to consider is between having long lasting
residuals and the growth and propagation of the coverage. The slower growing
and further propagating strategies often will have long lasting residuals. On the
other hand a fast growing strategy may have a short residual (or none at all).
One relevant factor in this decision is how much overhead the residual imposes
on the process. That is, how expensive it is to watch the incoming messages
and/or periodically check the computation’s state for the token. Also of concern
is how sensitive the computation is to message traﬃc.
Propagation & Guarantees Propagation is related to the rate of growth
of a strategy and is related to how far the coverage extends from its point of
origin. Some algorithms stop propagating after reaching some ﬁnite measure,
such as a time limit or a hop-count. Other algorithms will continue until the
token is found, no matter how long that takes. Performance or time bounds may

798

D. Hart, M.E. Tudoreanu, and E. Kraemer

exist on ﬁnding the token. For example, token ﬁnding may cease if the token is
not found by the time the computation enters the next phase. The most common
guarantee of a strategy is that if it is run to completion, then the token will be
found. The entrapment and ﬂood strategies guarantee that the token will be
found, while strategies like wait and search do not make this guarantee. Other
examples of guarantees made by a strategy might describe how resources will be
utilized by it.
3.2

Train Simulation

To demonstrate the trade-oﬀs between the diﬀerent token ﬁnding strategies,
a railroad simulation is used. The computation consists of a “smart” railroad
that simulates algorithms that ensure the safe movement of trains. Components
of the simulation are tracks, lights and switches. Each component represents a
computing device capable of communicating with other components and making
decisions that regulate the movement of trains. Each component is simulated by a
separate process. Processes communicate only through message passing. A train
moves from one component to the next via a message exchange between the
two components. To allow user interaction with the simulation as it runs, each
component performs a one second sleep after it processes incoming messages.
3.3

Experiments

The token in these experiments is the locomotive of the train. The experiments
considered four diﬀerent variables: agent strategy, distribution, topology, and
number of components.
The test-bed consisted of a primary cluster of 22 Linux workstations and a
remote cluster of 4 Linux workstations about 600 kilometers away. The machines
were of various conﬁgurations and speeds. Two diﬀerent conﬁgurations of the
test-bed were used. The ﬁrst conﬁguration used all 22 machines in the primary
cluster. The second conﬁguration used 18 machines in the primary cluster and
all 4 machines in the remote cluster. The coordinator for the search was on the
remote cluster in the second conﬁguration.
Two topologies of the railroad components were used. The ﬁrst topology was
of a general graph that was randomly generated. The graph was constructed to
be connected. That is, any component is reachable from any component. Some
track components were changed to switch components to create circuits and
redundant paths that are typical of real world railroads. The second topology
consisted of only straight track components. The tracks were conﬁgured so they
formed a ring. The total number of components in the simulation was varied
from 22 to 176.
Two diﬀerent types of agents were used, based on the broadcast and search
strategies. The residue in both cases was limited to the time required for the
agent to check if the train was present at the component. Upon arrival at a
component, an agent checks whether the locomotive is present and immediately
dies or leaves that component depending on the strategy. When the locomotive

Token Finding Using Mobile Agents

799

was found the coordinator was signaled. For the broadcast strategy, the coordinating process sent the same agent to all railroad components. In the search
strategy the coordinator sent an agent to a randomly chosen component. The
search agent was provided with a list of all components and visited each one in
order until the train was found. A timeout value was chosen after which point
the train was considered to be not found.

4

Results and Discussion
90

"broadcast-time"
"selective-time"

80
70

Seconds

60
50
40
30
20
10
0

20

40

60

80

100

Components

120

180

140

160

180

"broadcast-jumps"
"selective-jumps"
n/2

160
140

Agent Jumps

120
100
80
60
40
20
0

20

40

60

80

100

Components

120

140

160

180

Fig. 2. (Top) The amount of time to ﬁnd the token is plotted for various number of
processes. The amount of time the search strategy took was linear in the number
of components compared to the broadcast strategy which was relatively constant.
(Bottom) For both strategies, the number of agent jumps is linear relative to the
number of components. The search strategy uses approximately half the number of
jumps of the broadcast strategy.

Approximately 150 tests were executed. No signiﬁcant diﬀerence was found
based on the topology or test-bed conﬁguration. The one second delay in the

800

D. Hart, M.E. Tudoreanu, and E. Kraemer

application eﬀectively hid any diﬀerence in the latency of agent transmittals
between the two clusters. The train was not found by the agents during ﬁve
tests – one a broadcast strategy and four search strategies. This happened
because the train either was in transit when the agents were sent out or because
the train moved to a component that had already been searched. If a longer
residual had been provided for the broadcast strategy it would not have missed
the token in that one instance.
The diﬀerence between the two strategies in terms of latency and number of
agent transmittals is shown in Fig. 2. As expected, the latency for the broadcast
strategy was close to constant and was linear in the number of components for the
search strategy. The eﬀect of the one second pause in the application processes
can be easily noticed in the amplitude of the growth for the search strategy.
Also, as expected, the number of agent transmittals for the search strategy
was approximately half of what was needed for the broadcast strategy. Since
the amount of overhead invoked by both types of agents was approximately
the same, the perturbation of the search strategy is about half that of the
broadcast strategy. The number of agent jumps by the search strategy was
actually above half the number of components. This was due to the instances in
which a token moved to a component that the agent had already checked.
Using diﬀerent agent strategies allows for a simple way to customize what
costs will be incurred during a monitoring session. The speciﬁc trade-oﬀ that
we examined here was a fast, expensive, and bursty pattern of resource usage,
versus a slower, cheaper, and more regular pattern. The choice that is appropriate
will depend on the needs of both the user and the application. Utilizing mobile
agents allows for this choice to be made easily at run-time. Further experiments
are planned to quantify the cost of using agents in the monitoring activity and
to further verify our qualitative analysis of the agent trade-oﬀs.

References
[1] Bakic, A.M., Mutka, M.M., Rover, D.T.: BRISK: A Portable and Flexible Distributed Instrumentation System. Software: Practice and Experience. 12 (2000)
1353–1373
[2] Beazley, D.M.: SWIG: An easy to use tool for integrating scripting languages with
C and C++. Proceedings of the 4th USENIX Tcl/Tk workshop. (1996) 129–139
[3] Brooks, C., Tierney, B., Johnston, W.: JAVA Agents for Distributed System Management. Technical report, Lawrence Berkeley National Laboratory. (1998)
[4] Frost, H.R.: Documentation for the Java(tm) Agent Template. Stanford University.
(1996)
[5] Hart, D., Kraemer, E., Roman, G.C.: Consistency Considerations in the Interactive Steering of Computations. International Journal of Parallel and Distributed
Systems and Networks. 3 (1999) 171–179
[6] Jun, K., Boloni, L., Palacz, K., Marinescu, D.C.: Agent-Based Resource Discovery.
Proceedings of 9th Heterogeneous Computing Workshop. (2000)
[7] Rus, D., Gray, R., Kotz, D.: Transportable Information Agents. Readings in Agents.
(1998) 283–291
[8] Schwartz, R., Wall, L.: Programming Perl. (1994)

