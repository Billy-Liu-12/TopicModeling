A Precise Integration Algorithm for Matrix Riccati
Differential Equations
Wan-Xie Zhong1 and Jianping Zhu2
1

State Key Laboratory of Structural Analysis for Industrial Equipment, Dalian University of
Technology, Dalian 116023, China
2 Department of Mathematics & Statistics, Mississippi State University
Mississippi State, MS 39762, USA
jzhu@math.msstate.edu

Abstract. An efficient precise integration method for solving the matrix Riccati
differential equation is described in this paper. The method is based on repeated
combination of extremely small time intervals, which leads to solutions with an
accuracy within the machine precision.

1 Introduction
The general matrix Riccati differential equation can be written as

S�

B SA
=− +
− CS + SDS

(1)

S(t ) is an m × n matrix to be solved, S� is the derivative of S(t ) with respect to t, and A , B , C, D are all given matrices with dimensions n × n , m × n ,
m × m , n × m , respectively. The solution of the matrix Riccati differential equation

where

is very important in various applications, such as in optimal control theory, wave
propagation, structural mechanics, and game theory [1-4]. The integration domain is
0 ≤ t ≤ t f , where t f is given, and the boundary condition is given by

S(t f ) = S f ,

for t = t f ,

where S f is given. Note that the integration of (2) goes backward from
The respective dual Riccati differential equation can be written as
where

� = − D − TC + AT + TBT ,
T

T(t ) is an n × m matrix to be solved with the initial condition
T(0) = G 0 .

(2)

t f to 0.
(3)

(4)
Since both equations (1) and (3) are nonlinear, it is very difficult, if not impossible,
to find analytical solutions for application problems. The most commonly used solution methods are numerical integration schemes based on finite difference [1,5]. The
application of these schemes can be difficult when very high accuracy is desirable, or
V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 947-956, 2001.
© Springer-Verlag Berlin Heidelberg 2001

948

W.-X. Zhong and J. Zhu

when the solution changes dramatically (caused by large matrix S f at the boundary,
for example), or else when the problems being solved are stiff. In this paper, an efficient and accurate scheme for solving Riccati differential equations will be presented.
The new scheme is based on the precise time integration method for systems of linear
differential equations [6-8]. It can provide accurate numerical solutions to equation
(1) with errors in the order of computer round-off errors.

2 Linear Equations and Boundary Conditions
n -dimensional linear transport process can be described [1,2] by
q� = Aq + Dp,
p� = Bq + Cp
(5)
where q, p are vectors of dimension n and m, respectively. When n = m,
The

C = − A T , and B , D are non-negative symmetric matrices, equation (5) becomes
the dual equation of continuous time optimal control problem. In general, most problems require m + n boundary conditions corresponding to (5) in the form of
q(0) = q 0 , when t = 0; p(t f ) = p f
when t = t f ,
(6)
where q 0 , p f are given vectors of dimensions n and m, respectively. The precise time
integration method in [6] was for initial value problems, and those in [7,8] were for
conservative systems with m = n . The present paper will discuss the precise time
integration method for two point boundary value problems in the form of (5).
For numerical solution of most boundary value problems, the finite difference
method is the most commonly used algorithm, which could be difficult to use for some
cases due to the loss of accuracy or important properties of the original equation, for
example, the conservation property.
To derive the precise time integration method for the Riccati equation, we first need
to establish the equations that connect the state vectors q a , p a at t = t a , with

q b , p b at t = t b . If the interval (t a , t b ) is considered as an interval of the entire

integration domain

[0,t f ] , the equations can be expressed as

q b = Fq a − Gp b
(7a)
p a = Qq a + Ep b
(7b)
where F , G, Q, E are n × n, n × m, m × n, m × m matrices, respectively, to be
determined. For time independent system, the matrices A , B , C, D are independent
of t . Hence, the F , G , Q and E will only depend on the length of the interval
∆t = t b − t a
(8)
Treating q a , p a as the given initial vectors at t a , and taking the partial derivative of
equation (7a) with respect to t b , we have
∂ qb ∂ F ∂ G
∂ pb
∂ pb
∂Q ∂E
=
−
−G
+
+E
, 0=
,
(9a)
∂ tb ∂ tb ∂ tb
∂ tb
∂ tb ∂ tb
∂ tb

A Precise Integration Algorithm for Matrix Riccati Differential Equations

Since equation (5) can be written as

∂ qb
= Aq a + Dp b ,
∂ tb

∂ pb
= Bq a + Cp b .
∂ tb

949

(10a)

Equations (10) can be substituted into (9) to get

∂F
∂G
− (GB + A )q b − (D + GC +
)p b = 0 ,
(11a)
∂ tb
∂ tb
∂Q
∂E
q a + EBq b + (EC +
)p b = 0
.
(11b)
∂ tb
∂ tb
Note further that the vectors q a , q b and p b in equation (11) are not linearly independent. Substituting equation (7a) into (11), we obtain

⎡∂ F
⎤
⎡
∂ G⎤
− (GB + A )F ⎥q a + ⎢AG + GBG − D − GC −
⎢
⎥p b = 0 , (12a)
∂ tb ⎦
⎣∂ tb
⎦
⎣
⎡∂ Q
⎤
⎡∂ E
⎤
+ EBF ⎥q a + ⎢
+ E(C − BG) ⎥p b = 0 .
(12b)
⎢
⎣∂ tb
⎦
⎣∂ tb
⎦
Since q a and p b are linearly independent, equation (12) leads to the following
∂G
∂F
= AG + GBG − D − GC,
= (GB + A)F,
(13a)
∂ tb
∂ tb
∂E
∂Q
= E(BG − C),
= −EBF.
(13b)
∂ tb
∂ tb
The initial conditions at t b = t a are
G = 0, Q = 0, E = I m , F = I n ,
(14)
where I m and I n are identity matrices with dimensions m and n , respectively.
Similarly, we can treat t a as a variable while fixing t b , which leads to
∂G
∂F
= FDE,
= −F ( A + DQ) ,
(15a)
∂ ta
∂ ta
∂E
∂Q
= (C − QD)E,
= B − QA + CQ − QDQ.
(15b)
∂ ta
∂ ta
The initial conditions are similar to (14) at t a = t b . For time independent system with
matrices A , B , C, D independent of time, the matrices F , G , Q and E depend
only on the length of the interval ∆t = t b − t a . Therefore the relations
∂Q
∂Q
∂Q
∂Q
Q(t a , t b ) = Q( ∆t ),
,
,
(16)
=
=−
∂ t b ∂ ( ∆t )
∂ ta
∂ ( ∆t )

950

W.-X. Zhong and J. Zhu

hold for matrix Q , and similarly also hold for matrices F , G, E . With these relations, equations (13) can be written as

� = AG + GBG − D − GC,
G
F� = (GB + A )F ,
� = E(BG − C) ,
E

(17a)
(17b)
(17c)

� = − EBF .
(17d)
Q
The dot above F , G , Q and E now represents derivatives with respect to ∆t .
Similarly, equation (15) can be written as

� = − FDE ,
G
�F = F ( A + DQ) ,
� = − (C − QD)E ,
E
� = −B + QA − CQ + QDQ.
Q

(18a)
(18b)
(18c)

(18d)
Although equations (17) appear to be quite different from (18), it can be proved that
they are consistent with each other. Note that equation (18d) is the same as equation in
(1). If an algorithm can be developed to calculate the matrix Q in (18d), such that Q
also satisfies the boundary condition (2), then Q is the solution matrix S of (1).

3

Interval Combination

(t a , t b ) and (t b , t c ) , we can eliminate the interior
state vectors q b , p b at t b to form a larger combined interval (t a , t c ) , and obtain
equations similar to those in (7) that connect state vectors defined at the two ends t a
and t c , respectively. Mathematically, the equations for the interval ( t a , t b ) are
q b = F1q a − G 1p b ,
(19a)
p a = Q1q a + E 1p b ,
(19b)
and those for the interval ( t b , t c ) are
q c = F2 q b − G 2 p c ,
(20a)
p b = Q 2 q b + E 2p c .
(20b)
To eliminate the interior vectors q b , p b , we solve from (19a) and (20b)
q b = ( I n + G 1Q 2 ) −1 F1q a − ( I n + G 1Q 2 ) −1 G 1E 2 p c ,
(21a)
−1
−1
p b = ( I m + Q 2 G 1 ) Q 2 F1q a + ( I m + Q 2 G 1 ) E 2 p c ,
(21b)
Given two contiguous intervals

and substituting (21) into (20a) and (19b), respectively. This leads to, after eliminating
q b , p b and combining the intervals (t a , t b ) and (t b , t c ) , the equations

q c = Fc q a − G c p c ,

p a = Qcqa + Ecp c ,

(22)

A Precise Integration Algorithm for Matrix Riccati Differential Equations

951

where

G c = G 2 + F2 ( I n + G 1Q 2 ) −1 G 1E 2 ,
Q c = Q 1 + E 1 ( I m + Q 2 G 1 ) −1 Q 2 F1 ,
Fc = F2 (I n + G 1Q 2 ) −1 F1 ,
E c = E 1 ( I m + Q 2 G 1 ) −1 E 2 .

(23a)
(23b)
(23c)

4 The 2 N Type Algorithm
In structural mechanics, the substructuring technique has been widely used to improve
computational efficiency. If there are multiple identical substructures, only one of
them needs to be analyzed and the result can be used for all other identical substructures. This technique has been used successfully for the computation of some optimal
control problems [9]. In the present paper, we extend this technique to the solution of
matrix Riccati differential equations. Note that the equations in (7) describe state vectors at a small interval from t a to t b , which corresponds to a single substructure,
while those in (22) connect state vectors defined at t a and t c , which correspond to
the combination of two contiguous substructures after elimination of the state vectors
at

t b . The 2 N type algorithm described in [10] is very efficient for this kind of com-

bination involving a large number of similar substructures.
Let η be a typical time step length of an interval [ t a , t b ] for the integration of the
equations. We can further divide it uniformly into 2
example, with N = 20 , the length of a subinterval is

N

subintervals of length

τ . For

N

τ = η / 2 = η / 1048576 .
(24)
For time independent systems, all equations corresponding to different subintervals are
the same. After N = 20 combination steps, all 1048576 subintervals would have been
combined to generate a equation system like (7). Note that the entire domain of inteN
gration runs from 0 to t f , in which the integration can also be done using the 2
type algorithm to combining all intervals of length η .
The main part of the computation of this
tion of

2 N type algorithm is the repeated execu-

G c = G + F (I n + GQ) −1 GE, Q c = Q + E(I m + QG ) −1 QF,

(25a)

Fc = F (I n + GQ ) −1 F,

E c = E(I m + QG ) −1 E ,
(25b)
for N times. Each time the calculated matrices G c , Q c , Fc and E c are put into the
right-hand side of (25) to calculate new matrices for the larger combined intervals.
To start the recursive computation given by equations in (25), it is necessary to
generate G , Q, F and E corresponding to the smallest subinterval of
length τ defined by (24). These matrices are defined by equations in (17) (or its
equivalent equations in (18)), with the initial conditions in (14). Although equation

952

W.-X. Zhong and J. Zhu

(17) is non-linear, the power series expansion method can be used to solve them approximately.
Let ∆t = τ in equations (17) and (18), and expand G, Q, F and E as
2
3
4
2
3
4
G (τ ) = g1τ + g 2τ + g 3τ + g 4τ , Q (τ ) = q1τ + q 2τ + q 3τ + q 4τ
(26a)
2
3
4
2
3
4
F (τ ) = I + f1τ + f 2τ + f 3τ + f 4τ , E (τ ) = I + e1τ + e 2τ + e 3τ + e 4τ (26b)
Substituting the first equation in (26a) into (17a) and comparing the coefficients of
different powers of τ , we have

g 1 = D , g 2 = ( Ag 1 − g 1 C ) / 2 , g 3 = ( Ag 2 − g 2 C + g 1 Bg 1 ) / 3,

g 4 = ( Ag 3 − g 3 C + g 2 Bg 1 + g 1 Bg 2 ) / 4 .

(27)

Applying similar procedures to (17b), (17c) and (17d), we obtain

f 1 = A, f 2 = ( Af 1 − g 1 B) / 2, f 3 = ( Af 2 − g 2 B + g 1 Bf 1 ) / 3,

f 4 = ( Af 3 + g 3 B + g 2 Bf 1 + g 1 Bf 2 ) / 4,
e 1 = − C , e 2 = ( Bg 1 − e 1C ) / 2 , e 3 = ( Bg 2 − e 2 C + e 1 Bg 1 ) / 3,
e 4 = ( Bg 3 − e 3 C + e 2 Bg 1 + e 1 Bg 2 ) / 4 ,
q1 = −B, q 2 = −(Bf1 + e1B) / 2, q 3 = −(Bf 2 + e 2 B + e1Bf 1 ) / 3,
q 4 = −(Bf 3 + e 3 B + e 2 Bf1 + e1Bf 2 ) / 4.

(28)
(29)
(30)

Higher order approximations can be easily obtained in a similar way, but is unnecessary. Substituting the coefficient matrices given by (27)-(30) into equation (26), we
obtain approximations of G, Q, F and E for the subinterval of length ∆t = τ .
Note that all formulations before equation (26) are exact. There are truncation errors caused by disregarding terms of order higher than four in equation (26). For stiff
problems, a larger N can be used to further reduce the truncation error in (26).
N

The use of 2 type algorithm, however, changes the order of integration of equation (17), because the combination of subintervals does not proceed in exactly the
same order as from t f backward to 0. For example, to combine three contiguous subintervals numbered 1-3 into a new subinterval C, we can proceed in two obvious ways:
1) Combine subintervals 1 and 2 to get a new subinterval A, then combine subintervals
A and 3 to get the final interval C; 2) Combine subintervals 2 and 3 to get subinterval
B, then combine subintervals 1 and B to get the final interval C. Based on the matrix
inversion lemma [11] and the combination equations in (23), it is not difficult to prove
that the results from both combinations are identical.
For practical implementation, noted that the direct use of the combination equations
in (25) would cause serious round-off errors when the length of the subintervals τ is
very small. To avoid this, the matrices F and E should be written as
F = I n + F , E = I m + E, Fc = I n + F c , E c = I m + Ec
(31)
and equation (25) should be replaced by

G c = G + ( I n + F )(G −1 + Q) −1 ( I n + E)

(32a)

A Precise Integration Algorithm for Matrix Riccati Differential Equations

953

Q c = Q + ( I m + E)(Q −1 + G) −1 ( I m + F)
−1

−1

(32b)

F c = −(I n + F)[GQ(I n + GQ) + (I n + GQ) GQ](I n + F) / 2 + 2F+F (32c)
2

Ec = −( I m + E)[QG( I m + QG) −1 + ( I m + QG) −1 QG]( I m + E) / 2 + 2E+E2 (32d)

5 Conservative Systems
For continuous time optimal control and elastic wave propagation problems, the system being studied are conservative. In these cases, we have m = n , and the matrices
D and B in dual equations (5) are symmetric with

C = −A T , D = DT , B = B T .
Similarly, matrices Q and G in equation (7) are also symmetric with
F = ET , G = GT , Q = Q T .

(33)

(34)
Actually, (7) is the integrated form of (5) based on the theory of Hamiltonian systems
[9]. Substituting (34) into (7), we have

q b = Fq a − Gp b ,

p a = Qq a + F Tp b ,

(35)

which can be rewritten as

⎧q a ⎫
⎧q b ⎫
⎨ ⎬ = T⎨ ⎬,
⎩p a ⎭
⎩p b ⎭

with

⎡F + GF − T Q − GF − T ⎤
T=⎢
⎥
−T
F −T ⎦
⎣ −F Q

(36)

It is easy to verify that

T T JT = J,

with

⎡ 0 I⎤
J=⎢
⎥,
⎣ − I 0⎦

(37)

so T is a symplectic matrix. Therefore it is easy to find the integration invariant of
(35) in the form of

⎧q ⎫
v = ⎨ ⎬,
(38)
⎩p ⎭
where v is the state vector and P is a 2n × 2n matrix. It is necessary to find the
condition for P so as to keep Λ invariant. It is not difficult to show that if the multiplication of P and T is commutative, i.e.
PT = TP ,
(39)
then Λ remains invariant under transformation T . This implies that if P is any
polynomial of T then Λ is invariant. A good numerical scheme should maintain all
Λ = v T JPv,

invariants in order to correctly represent the behavior of a conservative system.

954

W.-X. Zhong and J. Zhu

6 Solution of the Riccati Differential Equation
Based on the discussions in the previous sections, the matrices

G (τ ), Q(τ ), F (τ ),

E( τ ) of the small subinterval of length τ can be computed first by the equations
N
in (26). Then the 2 type algorithm can be used to calculate these matrices for a
typical time interval [ t a , t b ] of length η . Based on these typical interval matrices,
the final matrix function Q( t ) can be calculated, which satisfies the differential
equation (18d), the same as equation (1). However, the boundary condition that Q( t )
and

satisfies is given in (14) as

t = tf ,
(40)
which is not the same as that given in condition (2) for S( t ) . On the other hand, the
differential equation (17a) for the matrix function G( t ) is the same as equation (3)
for the matrix function T( t ) , however, the initial condition for G( t ) is (14)
G(0) = 0 ,
at t = 0 ,
(41)
which is again different from the condition in (4) for T( t ) .
Q = 0,

at

To satisfy the boundary condition (2), we need to construct the matrix function

S(t ) from the functions G(t ), Q(t ), F(t ) and E(t ) by the equation
S(t ) = Q + E( I m + S f G) −1 S f F .
(42)
Since E → I m , F → I n , G → 0 and Q → 0 as t → t f , it can be easily verified that the S( t ) given in equation (42) satisfy the boundary condition given in (2).
To show that S( t ) in (42) satisfies equation (1), we need to use the relation
� X −1 and equations (18). The physical interpretation for the
dX −1 dt = − X −1 X
above equation is the use of combination equation (23) for the interval ( t , t f ) with
matrices [G, Q, F , E] being treated as interval 1, and at the end t = t f a fictitious
interval with matrices

[ 0, S f , I n , I m ]

being treated as interval 2. Here, only the

equation (23b) is used to obtain equation (42).
The matrix function T( t ) can be constructed similarly by

T = G + F ( I n + G 0 Q ) −1 G 0 E .
(43)
Since E → I m , F → I n , G → 0 and Q → 0 as t → 0 , it can be easily verified that T( t ) in (43) satisfies the initial condition given in (4). The verification that
T(t ) in (43) satisfies differential equation (3) can be done similarly as for S(t ) ,
except that the equations in (17) should be used. Let S( t ) = S ∞ when t → ∞ , we
have

− B + S ∞ A − CS ∞ + S ∞ DS ∞ = 0 ,
(44)
which is the algebraic Riccati equation. For non-conservative systems, such as the
source free transport system and elastic wave propagation with damping, the matrix

A Precise Integration Algorithm for Matrix Riccati Differential Equations

955

S ∞ can also be calculated using the 2 N type algorithm. In this case, the procedure
described in the previous sections should be carried out until E and F are nearly
zero matrices. The matrices Q and G are then S ∞ and T∞ , respectively. The
algebraic Riccati equation for T∞ is
− D − T∞ C + AT∞ + T∞ BT∞ = 0
(45)

7 Numerical Examples
2 N type precise time integration is applicable to problems with finite
integration domain [0,t f ] , we choose a infinite domain in these examples to demon-

Although the

strate its application to algebraic Riccati equation.
Example 1: n = 4; m = 4; the system matrices are given as

0
0
⎡ − 0.3379 0.5821 −.1579 0.2771⎤
⎡0
⎢ − 26.7825 −.1705 0
⎥
⎢
0 −10−10i
0
0 ⎥
, B=⎢
A=⎢
⎢ −.11821 −.3059 −.5523 0.9694⎥
⎢0
10
-100-100i
⎢
⎥
⎢
0
0
0
0
0
7.6923⎦
⎣
⎣0
0 ⎤
⎡0.4+ 0.4i 20+10i 0.1
⎢ - 0.5
0.2
0.3
0 ⎥⎥
⎢
C=
, D = diag [ 0 0 0 -10.0-1.0i ] .
⎢ 0.1
0
0.5
0 ⎥
⎢
⎥
− 0.1 − 7.7⎦
0
⎣ - .2

0⎤
0⎥⎥
,
0⎥
⎥
0⎦

N

The algebraic Riccati equation (46) was solved by using the 2 type precise time
integration algorithm with η = 1.0 and 4.0, respectively. The calculated matrices

S ∞ are exactly the same. This indicates that the accuracy has reached machine precision, so using a smaller η will not further improve the accuracy. Substituting S ∞
−10
into (44), we found that the entries in the residual matrix are all smaller than 10 .
Similarly, the calculated matrix T∞ also satisfies equation (45) with entries in the
−10
residual matrix smaller than 10 .
Example 2. In this example, we have n = 5; m = 1. The system matrices are
T

04
. 05
. −0.4 02
.
. ⎤
⎡−08
⎡ 0 ⎤
⎡0⎤
⎢ 0.3 −21
⎥
⎢
⎥
⎢0⎥
−50
0
0
0
.
.
⎢
⎥
⎢ ⎥
⎢ ⎥
A = ⎢ 01
03
06
.
. −05
. 02
.
. ⎥, B = ⎢ 0 ⎥ , C = [05
. ], D = ⎢ 0 ⎥ .
⎢
⎥
⎢ ⎥
⎢ ⎥
0
0 −08
. 05
. ⎥
⎢ 0
⎢ 0 ⎥
⎢2.0⎥
⎢⎣ 0.3 10
⎥
⎢
⎥
⎢⎣ 0 ⎥⎦
0
0 −09
.
. ⎦
⎣ 0 ⎦

956

W.-X. Zhong and J. Zhu

The algebraic Riccati equations (44) and (45) were solved using

η = 0.4 and

η = 5.0 , respectively. The numerical results are exactly the same for both cases.
Substitute the matrix S ∞ and T∞ into (44) and (45), respectively, we found again
−10
that the entries in the residual matrices are smaller than 10 .
8 Concluding Remarks
N

The 2 type precise time integration algorithm discussed in this paper is very efficient for calculating accurate solutions to matrix Riccati equations. The computer
programming for this method is also straightforward since it uses only matrix operations.

References
1.
2.
3.
4.

Bellman, R.: Methods of non-linear analysis, vol. 2, Academic Press, NY, 1973.
Bittanti, S., Laub, A. J. Willems, J. C.: The Riccati Equation. Springer-Verlag, NY, 1991.
Green, M., Limebeer, D. J. N.: Linear Robust control. Prentice-Hall, Englewood Cliff,
NJ, 1995.
Basar, T., Bernland, P.: H∞ Optimal Control and Related Mini-Max Design Problems--A

dynamic game approach, 2nd Ed. Birkhauser, Boston, 1995.
Kenney, C. S., Leipnik, R. B.: Numerical integration of the differential Riccati equation.
IEEE Trans, AC, 30 (1985) 962.
6. Zhong, W. X., Williams, F. W.: A precise time integration method. Proc. Inst. Mech.
Engrs. 208 (1994) 427-430.
7. Zhong, W. X.: Precise integration of eigen-waves for layered-media, in Proc. EPMESC-5.
2 (1995) 1209-1220.
8. W.X. Zhong, The method of precise integration of finite strip and wave guide problems,
Proc. Intern. Conf. on Computational Method in Struct. and Geotech. Eng. (1994) 50-60.
9. Zhong, W. X., Lin, J. H., Qiu, C. H.: Computational structural mechanics and optimal
control---The simulation of substructural chain theory to linear quadratic optimal control
problems, Intern. J. Num. Meth. Eng. 33 (1992) 197-211.
10. Angel, E., Bellman, R.: Dynamic Programming and Partial Differential Equations. Academic Press, New York, 1972.
11. Stengel , R. F.: Stochastic Optimal Control. John Wiley and Sons, New York, 1986.
5.

