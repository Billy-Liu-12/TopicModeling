Computation in Undergraduate Physics:
The Lawrence Approach
David M. Cook
Department of Physics
Lawrence University
Appleton, WI 54912
USA
david.m.cook@lawrence.edu

Abstract. Most eﬀorts using computers in physics curricula focus on
introductory courses or individual upper-level courses. In contrast, for
a dozen years the Lawrence Department of Physics has been striving
to embed the use of general purpose graphical, symbolic, and numeric
computational tools throughout our curriculum. Developed with support
from the (US) National Science Foundation, the Keck Foundation, and
Lawrence University, our approach involves introducing freshman to tools
for data acquisition and analysis, oﬀering sophomores a course that introduces them to symbolic, numerical, and visualization tools, incorporating
computational approaches alongside traditional approaches to problems
in many intermediate and upper level courses, and making computational
resources available so that students come to see them as tools to be used
routinely on their own initiative whenever their use seems appropriate.
A text reﬂecting the developments at Lawrence is in preparation, will
undergo beta testing in 2001-02, and will be published in January, 2003.
Details about the Lawrence curricular approach and the emerging text
can be found from links at www.lawrence.edu/dept/physics.

For a dozen years or more (and with support from the National Science
Foundation[1], the W. M. Keck Foundation[2], and Lawrence University), we in
the Department of Physics at Lawrence University1 have been developing the
computational dimensions of our upper-level curriculum[3,4,5,6]. We have built a
computational laboratory that makes a wide spectrum of hardware and software
available to students, developed an approach that introduces students to these
resources and to prototypical applications, and drafted several hundred pages of
instructional materials that, with support from a recent (US) National Science
Foundation (NSF) grant[7], are currently being prepared for publication. This
paper
1. lays out the underlying convictions that have guided the development of our
approach to incorporating computation in an undergraduate curriculum,
1

Lawrence University is a liberal arts college and conservatory of music with about
1250 students. The Department of Physics has ﬁve full time members and graduates
an average of a dozen majors each year.

V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 1074–1083, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

Computation in Undergraduate Physics: The Lawrence Approach

1075

2. describes the Lawrence curricular components,
3. discusses particularly the sophomore course that is the starting point for
those students who pursue computation most aggressively, and
4. describes the instructional materials currently being prepared for publication.

1

Underlying Convictions

The primary tasks of those parts of an undergraduate physics program that
focus on physics majors are to awaken in our students a full realization of the
beauty, breadth, and power of the discipline and to help them develop both a
secure understanding of fundamental concepts and the skills to use a variety of
tools in applying those concepts. Among the tools, we at Lawrence would ﬁrmly
include computational resources of several sorts. We believe
1. that our curricula must familiarize students
a) with the functions and capabilities of at least one operating system.
b) with the use of at least one good text editor (not word processor).
c) with several types of computational tool, including
i. a spreadsheet like Excel[8].
ii. resources like IDL[9] and MATLAB[10] for numerical processing of
numbers and arrays.
iii. C and FORTRAN programming suﬃcient to permit comfortable use
of subroutine packages like Numerical Recipes[11] and LSODE[12].
iv. resources like MAPLE[13] and MATHEMATICA[14] for symbolic
manipulation of expressions.
v. resources like Kaleidagraph[15], IDL, MATLAB, and IRIS/NAG
Explorer[16] for graphical visualization of complex data.
vi. resources like LATEX[17] and tgif[18] for preparing technical reports
and manuscripts.
d) with several types of symbolic and numerical analyses, including solving algebraic equations, solving ordinary and partial diﬀerential equations, evaluating integrals, ﬁnding roots, performing data analyses, ﬁtting curves to experimental data, and manipulating images.
e) with the assessment of accuracy in ﬁnite-precision arithmetic.
2. that students must be introduced early to these tools. An upper-level course
in computational physics is a valuable curricular inclusion, but students need
to become acquainted with computational resources long before they have
either the mathematical or the physical background to proﬁt from a rigorous
computational physics course.
3. that use of computational resources must permeate the curriculum.
4. that the initial encounter with computational tools cannot be eﬀectively
accomplished as an appendix to tasks given higher priority. Certainly, numerous examples drawn from physical contexts must be used to motivate
study of techniques and tools, but the focus must be on the features and
capabilities of the tools.

1076

D.M. Cook

Table 1. The typical program of a Lawrence physics major. Courses shown in bold
type have explicit computer content.
Term I

Term II

Term III

Year 1 : Social Science Elective Intro Classical Physics Intro Modern Physics
Calculus I
Calculus II
Calculus III
Freshman Studies
Freshman Studies
Free Elective
Year 2 : Electronics
Linear Algebra/ODE
Free Elective

Mechanics
Humanities Elective
Free Elective

E and M
Humanities Elective
Free Elective

Year 3 : Quantum Mechanics Advanced Laboratory Physics Elective
Language
Language
Language
Social Science Elective Free Elective
Free Elective
Year 4 : Free Elective∗
Diversity Elective
Free Elective
∗

Physics Elective
Free Elective
Free Elective

Physics Elective
Diversity Elective
Free Elective

Often independent research in physics.

In the broadest of terms, we should be structuring our curricula so that, ultimately, students will recognize when a computational approach may have merit
and will be prepared to pursue that approach conﬁdently, ﬂuently, eﬀectively,
knowledgeably, and independently whenever they deem it appropriate.
The Lawrence approach to nurturing the abilities of students to use computational resources is active; it compels students to play a personal role in their
own learning; it forces students to defend their work in writing; it gives students
practice in preparing and delivering oral presentations; it encourages students
to work in groups; it permeates our curriculum; and, more than any other objective, it develops the students’ abilities to operate in this arena on their own
initiative.

2

The Curricular Context

An eﬃcient way to describe the Lawrence approach is to track the computational experience of an entering freshman physics major as she moves towards
graduation four years later. Each year, full-time students at Lawrence take three
courses in each of three ten-week terms. Class periods are 70 minutes long, and
a one-term course translates oﬃcially into 3-1/3 semester hours. While there are
many variations, the typical program of a student pursuing a physics major is
shown in Table 1. This table also shows the area—though not necessarily the
actual term—of courses needed to satisfy general education requirements. The
minimum physics major is satisﬁed by ten courses in physics, seven of which are

Computation in Undergraduate Physics: The Lawrence Approach

1077

Table 2. Available Electives. Again, courses shown in bold type have explicit computer
content.
•
•
•
•
•

Thermal Physics
Optics
Solid State Physics
Advanced Modern Physics
Laser Physics

•
•
•
•
•

Advanced E and M
Math Methods
Advanced Mechanics
Plasma Physics
Tutorial in Physics

• Computational Tools in Physics
• Independent Study in Physics

explicitly stipulated, and four courses in mathematics. Courses shown in bold
type direct students explicitly to the computer and, in most cases, include some
instruction in one or more of our computational resources.
Available physics electives are shown in Table 2. Again, entries in bold type
make explicit use of computational resources. In the other courses, students use
those resources regularly on their own initiative. Majors are required to take
three courses from the top group of nine and may take as many as ﬁve more
from the entire spectrum before exceeding an institutionally imposed limit of 15
courses in any single department. Tutorials and independent studies, the latter
being elected by nearly all senior majors and sometimes extending over more
than one term and leading to honors in independent study at graduation, oﬀer a
vehicle for students to study topics not included in our regular course oﬀerings.

3

The Computational Components

Prospective physics majors at Lawrence ﬁrst encounter computational approaches in the introductory courses, whose laboratory is equipped with Macintosh computers, Vernier ULI cards[19], and a variety of sensors. Beyond LoggerPro, students have access both in the laboratory and elsewhere on campus to
Excel and Kaleidagraph. Exercises assigned in the laboratory routinely involve
automated data acquisition, statistical analysis, and curve ﬁtting; exercises assigned in lectures occasionally send students to the laboratory computers for
graphing results or pursuing numerical solutions to Newton’s laws with editable
Excel templates. By the end of the freshman year, prospective majors have already developed some skills in the use of computational tools, particularly skills
of value in the laboratory.
Beyond the freshman year, students—of course—continue to use Excel and
Kaleidagraph, but they also have access to our Computational Physics Laboratory (the CPL), which is equipped with six Silicon Graphics UNIX workstations,
monochrome and color printers, and software in all the categories enumerated
above. Each student has an account in this departmental facility, and each is
entitled to a key both to the CPL and to the building, so each has 24/7 access
to the CPL.

1078

D.M. Cook

To help sophomores become conﬁdent, regular users of the CPL, we oﬀer a
course called Computational Tools in Physics, to be described in the next section.
Even those sophomores who don’t elect this course, however, encounter two
short computational workshops—one on IDL and the other on MAPLE—in our
required sophomore mechanics course. Thus, all sophomores have at least a small,
forced exposure to the CPL, and some—but unfortunately not all—sophomores
have a fully comprehensive introduction to the available capabilities. Subsequent
theoretical and experimental courses alike oﬀer students many opportunities to
continue honing their computational skills and, depending on the instructor,
some of these courses will direct students explicitly to the CPL for an occasional
exercise. Most senior capstone projects will use the resources of the CPL, at
least for visualization of data and/or preparation of reports. Some projects,
notably those in ﬂuid mechanics, musical acoustics, xray diﬀraction, mapping of
astrophysical data, and multiphoton quantum transitions, have made extensive
use of these facilities. Some physics students use the CPL in conjunction with
courses in other departments, particularly mathematics.

4

The Sophomore Course

An elective course called Computational Tools in Physics is the starting point in
our nurturing of our students’ abilities to take full advantage of the resources of
the CPL. Currently, this full-credit course is oﬀered in three 1/3-credit segments,
one in each of the three terms of our academic year. Its topics are coordinated
with the required courses taken by sophomore majors. The ﬁrst term focuses on
acquainting students with the rudimentary capabilities of our CPL. It starts with
a tutorial orientation to UNIX (1 week) and then addresses array processing and
graphical visualization using IDL (2 weeks), publishing scientiﬁc manuscripts using LATEX and tgif (1 week), graphical visualization using IRIS/NAG Explorer
(2 weeks), symbolic manipulations using MAPLE (2 weeks), and circuit simulation using SPICE[20] (2 weeks). In each class, students are introduced to a
particular computational tool. Then, each student works several exercises, ultimately turning in written solutions prepared with LATEX. The half-dozen class
sessions in the term provide only orientation and motivation; students are expected to exhibit a fair bit of personal independence and aggressiveness as they
progress from the starting point provided by the classes to the knowledge and
skill needed to ﬁnish the assignments.
The second term is coordinated with an intermediate course in classical mechanics, for which Barger and Olsson[21] is the current text, and focuses on
symbolic and numerical approaches to ordinary diﬀerential equations (ODEs).
In the ﬁrst half of the term, the course covers symbolic solution of ODEs and
Laplace Transforms with MAPLE (2 weeks), numerical solution of ODEs with
IDL (2 weeks), and numerical solution of ODEs with FORTRAN programs and
LSODE (1 week). Each student completes this term by carrying out an extended
project that culminates in a written paper and a 20-minute oral presentation to

Computation in Undergraduate Physics: The Lawrence Approach

1079

the class. Topics like the three-body problem, coupled oscillators, the compound
pendulum, anharmonic oscillators, and chaos have been addressed.
The third term is coordinated with an intermediate course in electricity and
magnetism, for which Griﬃths[22] is the current text, and focuses on symbolic
and numerical integration. In the ﬁrst six weeks of the term, the course covers
symbolic and numerical integration with MAPLE and IDL (2 weeks), numerical
integration using FORTRAN programs and Numerical Recipes (2 weeks), and
root ﬁnding using MAPLE, IDL, and Numerical Recipes (2 weeks). This term
also concludes with an extended project, written paper, and 20-minute oral presentation. Topics like electric ﬁelds and potentials, magnetic ﬁelds, Fourier analysis, non-linear least squares ﬁtting, and global positioning systems have been
addressed.

5

The Emerging Text

The NSF grant[7] already mentioned provides support for converting the experience acquired and the library of instructional materials developed at Lawrence
into a ﬂexible publication[23] as a resource for other institutions. That we don’t
all use the same spectrum of hardware and software, however, poses a major
challenge. The variety of options and combinations is so great that any single
choice (or coordinated set of choices) is bound to limit the usefulness of the end
result to a small subset of all potentially interested users. The strategy adopted
to address that challenge involves assembling diﬀerent incarnations of the basic materials from a wide assortment of components, some of which—the generic
components—will be included in all incarnations and others of which—those speciﬁc to particular software packages—will be included only if the potential user
requests them. Thus, the speciﬁc software and hardware treated in any particular incarnation will be microscopically “tailor-able” to the spectrum of resources
available at the instructor’s site. One incarnation, for example, could include
the generic components and only the components that discuss IDL, MAPLE, C,
and LATEX while another might include the generic components and the components that focus on MATLAB, MATHEMATICA, and FORTRAN (including
Numerical Recipes).
While the materials are still very much being reﬁned, the present tentative
table of contents includes the chapters and appendices listed in Table 3. In this
structure,
1. Chapter 1 stands alone; chapters 2–5 introduce the general features of an
array processor, a computer algebra system, a programming language, and
the numerical recipes library; Chapters 6–12 address several important categories of computational processing; and the appendices introduce the use
of an operating system, a publishing system, and a program for producing
drawings.
2. In addition to the options explicitly indicated, later chapters also contain
internal options that are not shown.

1080

D.M. Cook

Table 3. Tentative table of contents for the book tentatively titled Computation and
Problem Solving in Undergraduate Physics.
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
A.
B.
C.

Overview
Introduction to IDL and/or MATLAB and/or . . .
Introduction to MACSYMA and/or MAPLE and/or Mathematica and/or . . .
Introduction to Programming in FORTRAN and/or C and/or . . .
Introduction to Numerical Recipes
Solving Ordinary Diﬀerential Equations
Introduction to LSODE
Evaluating Integrals
Finding Roots
Solving Partial Diﬀerential Equations
Data Analysis/Curve Fitting
Fourier Analysis and Image Processing
Introduction to UNIX and/or Windows and/or . . .
Introduction to LATEX and/or Word and/or . . .
Introduction to TGIF and/or . . .

3. The order of presentation in the book does not compel any particular order
of treatment in a course or program of self-study. While some later sections
depend on some earlier sections, the linkages are not particularly tight.
While the objective is for students to become ﬂuent in the use of a spectrum of
computational tools—and the chapters are organized by program or by computational technique, the motivation throughout lies in and all examples are drawn
from physical contexts.
Chapter 2, the tentative table of contents for the MATLAB version of which
is shown in Table 4, represents chapters that introduce basic features of an
application program, speciﬁcally a program for processing arrays of numbers
and creating graphical visualizations of one-, two-, and three-dimensional data
sets. The bulk of the chapters in this category are structured as tutorials and
lean in some measure on vendor-supplied documentation and on-line help to
encourage and guide self-study.
Shown in Table 5, the structure of Chapter 8 on evaluating integrals exempliﬁes that of all of the chapters on various computational techniques. Presumably,
before approaching any particular section in this chapter, the student would have
studied the relevant sections in earlier chapters. The ﬁrst section, whose detail
is laid out in the next paragraph, sets several physical problems, the successful
addressing of which beneﬁts from exploitation of a computational tool. The second section describes how one might use a symbolic tool in application to some
of the problems set in the ﬁrst section. Save for the last, the remaining sections
describe suitable numerical algorithms generically and then illustrate how those
algorithms can be invoked in a variety of ways. The ﬁnal section lays out several exercises that students can use to hone their skills. Sections 8.1, 8.3, and
8.7 would be included in all versions of the chapter; each individual instructor

Computation in Undergraduate Physics: The Lawrence Approach

1081

Table 4. Sections in the chapter on MATLAB. The IDL chapter is similar.
2.1
2.2
2.3
2.4
2.5
2.6
2.7
2.8
2.9
2.10
2.11
2.12
2.13
2.14
2.15
2.16
2.17
2.18
2.19
2.20

Beginning a Session with MATLAB
Basic Entities in MATLAB
A Sampling of MATLAB Capabilities
Properties, Objects, and Handles
Saving/Retrieving a MATLAB Session
Loops/Logical Expressions/Conditionals
Reading Data from a File
On-line Help
Command Files
Eigenvalues and Eigenvectors
Graphing Functions of One Variable
Making Hard Copy
Graphing Functions of Two Variables
Graphing Functions of Three Variables
Graphing Vector Fields
Animation
Advanced Graphing Features
Miscellaneous Occasionally Useful Tidbits
References
Exercises

would select from the indicated options only those that are appropriate to that
instructor’s site.
Yet one level further down in the envisioned structure, Table 6 shows the
present list of sample problems for Chapter 8. They range over several subareas
of physics and reveal that evaluation of integrals, perhaps as functions of one or
more parameters, plays an important role in many areas of physics.
Even among sites that use the same spectrum of hardware and software,
however, some aspects of local environments are still unique to individual sites.
Rules of citizenship, practices and policies regarding accounts and passwords,
the features and elementary resources of the operating system, the structuring
of public directories, backup schedules, after-hours access, licensing restrictions
in force on proprietary software, and numerous other aspects are subject to considerable local variation. The emerging book will make no attempt to constrain
local options in these matters. Throughout the book, individual users are directed to a publication called the Local Guide for site-speciﬁc particulars. A
suggested template for that guide will be provided, but it will require editing to
reﬂect local practices.
The desired ﬂexibility to tailor the book to a variety of circumstances would
be unattainable without LATEX. Of particular signiﬁcance, LATEX is able to decide in response to conditional statements controlled by Boolean ﬂags which
ﬁles should be included and which omitted in any particular processing run.
The procedure has already passed its proof-of-concept trial, and the publisher

1082

D.M. Cook
Table 5. Sections in the chapter on integration.
8.1 Sample Problems
8.2 Evaluating Integrals Symbolically with
MACSYMA and/or MAPLE and/or Mathematica and/or . . .
8.3 Algorithms for Numerical Integration
8.4 Evaluating Integrals Numerically with
IDL and/or MATLAB and/or . . .
8.5 Evaluating Integrals Numerically with
MACSYMA and/or MAPLE and/or Mathematica and/or . . .
8.6 Evaluating Integrals Numerically with
FORTRAN and/or C and/or Numerical Recipes
8.7 Exercises
Table 6. Sample problems in Section 8.1.
8.1.1.
8.1.2.
8.1.3.
8.1.4.
8.1.5.
8.1.6.
8.1.7.
8.1.8.

One-Dimensional Trajectories
Center of Mass
Moment of Inertia
Large-Amplitude Pendulum (Elliptic Integrals)
The Error Function
The Cornu Spiral
Electric/Magnetic Fields and Potentials
Quantum Probabilities

Brooks-Cole is committed to reﬁning this essential procedure so as to be able to
make a commercially feasible product. Further, once the structure has been fully
worked out, contributiions from other authors may be added, so—over time—the
product could expand to accommodate a wider and wider spectrum of hardware
and software and include topics not originally incorporated. We sincerely hope
that this book, emerging as it has from a dozen years of experience and development at Lawrence, will support eﬀorts at other institutions to embed meaningful
computational components in their undergraduate curricula.

References
1. NSF ILI Grant DUE-8851685 for $49433, awarded in June, 1988, for a project entitled “Scientiﬁc Workstations in Undergraduate Physics”; NSF ILI Grant DUE9350667 for $48777, awarded in June, 1993, for a project entitled “Partial Diﬀerential Equations in Advanced Undergraduate Physics.”
2. Keck Grant #880969 for $200,000, awarded in June, 1988, to support integrating scientiﬁc workstations into the physics curriculum; Keck Grant #931348 for
$250,000, awarded in December, 1993, to support the enhancement of advanced
theoretical, computational and experimental courses.

Computation in Undergraduate Physics: The Lawrence Approach

1083

3. David M. Cook, “Computers in the Lawrence Physics Curriculum” Part I, Comput.
Phys. 11(3; May/Jun, 1997), 240–245; Part II, Comput. Phys. 11(4; Jul/Aug,
1997), 331–335.
4. David M. Cook, “Incorporating Uses of Computational Tools in the Undergraduate
Physics Curriculum” in Computing in Advanced Undergraduate Physics, the proceedings of a Sloan-supported conference held at Lawrence University, 13–14 July
1990, edited by David M. Cook and published in November, 1990, by Lawrence
University.
5. David M. Cook, “Computational Exercises for the Upper-Division Undergraduate
Physics Curriculum,” Comput. Phys. 4(3; May/June), 308–313 (1990).
6. David M. Cook, “Introducing Computational Tools in the Upper-Division Undergraduate Physics Curriculum,” Comput. Phys. 4(2; Mar/Apr), 197–201 (1990)
7. NSF CCLI-EMD Grant DUE-9952285 for $177,000, awarded in February, 2000,
for a project entitled “Strengthening Computation in Upper-Level Undergraduate
Physics Programs.”
8. Available from Microsoft, Seattle, Washington.
9. Available from Research Systems, Inc., Boulder, Colorado.
10. Available from The MathWorks, Inc., Natick, Massachusetts.
11. Available from Numerical Recipes Software, Cambridge, Massachusetts.
12. LSODE (the Livermore Solver for ODEs) is a component in the package ODEPACK, which is in the public domain and is available for ftp transfer from appropriate sites, e.g., www.netlib.org.
13. Available from Waterloo Software, Waterloo, Ontario.
14. Available from Wolfram Research, Inc., Champaign, Illinois.
15. Available from Synergy Software, Reading, Pennsylvania.
16. Available from Numerical Algorithms Group, Downers Grove, Illinois.
17. Available for many platforms via ftp transfer from several archives around the
world. For information, start at www.tug.org.
18. Tgif is a program for drawing assorted diagrams and writing those descriptions in
ﬁles of several diﬀerent types. For information, go to www.ucla.edu and search for
tgif.
19. Available from Vernier Software and Technology, Beaverton, Oregon.
20. SPICE is a tool for simulating the behavior of electric circuits. For information,
start at www.berkeley.edu and search for SPICE.
21. Vernon D. Barger and Martin G. Olsson, Classical Mechanics: A Modern Perspective (McGraw-Hill, New York, 1995), Second Edition.
22. David J. Griﬃths, Introduction to Electrodynamics (Prentice-Hall, Upper Saddle
River, New Jersey, 1999), Third Edition.
23. David M. Cook, Computation and Problem Solving in Undergraduate Physics
(Brooks-Cole, Paciﬁc-Grove, CA, expected January, 2003).

