Computing Optimal Hatching Directions in
Layered Manufacturing�
Man Chung Hon1 , Ravi Janardan1 , Jörg Schwerdt2 , and Michiel Smid2
1

Dept. of Computer Science & Engineering, University of Minnesota, Minneapolis,
MN 55455, U.S.A.
{hon,janardan}@cs.umn.edu
2
Fakultät für Informatik, Otto-von-Guericke-Universität Magdeburg, D-39106
Magdeburg, Germany.
{schwerdt,michiel}@isg.cs.uni-magdeburg.de
Abstract. In Layered Manufacturing, a three-dimensional polyhedral
solid is built as a stack of two-dimensional slices. Each slice (a polygon)
is built by ﬁlling its interior with a sequence of parallel line segments,
of small non-zero width, in a process called hatching. A critical step in
hatching is choosing a direction which minimizes the number of segments.
Exact and approximation algorithms are given here for this problem,
and their performance is analyzed both experimentally and analytically.
Extensions to several related problems are discussed brieﬂy.

1

Introduction

This paper addresses a geometric problem motivated by Layered Manufacturing
(LM), which is an emerging technology that allows the construction of physical
prototypes of three-dimensional parts directly from their computer representations, using a “3D printer” attached to a personal computer.
The basic idea behind LM is very simple. A direction is ﬁrst chosen to orient
the computer model suitably. The model is then sliced with a set of equally
spaced horizontal planes, resulting in a stack of 2-dimensional polygons. Starting from the bottom, each slice is sent to the LM machine and built on top of
the layers below it. There are several diﬀerent ways how this process is carried
out physically. One particular implementation is through a process called Stereolithography [3]. Here the model is built in a vat of liquid which hardens when
exposed to light. A laser is used to trace the boundary of each slice and then
ﬁll in its interior via a series of parallel line segments (Fig. 1(a)); this process is
called hatching. Another process called Fused Deposition Modeling hatches the
slices by depositing ﬁne strands of molten plastic via a nozzle.
The hatching process in LM inﬂuences the process cost and build time quite
signiﬁcantly. For instance, in Stereolithography, the number of times the laser’s
�

Research of MCH and RJ supported, in part, by NSF grant CCR–9712226. Portions
of this work were done when RJ visited the University of Magdeburg and JS and
MS visited the University of Minnesota under a joint grant for international research
from NSF and DAAD.

V.N. Alexandrov et al. (Eds.): ICCS 2001, LNCS 2073, pp. 683–692, 2001.
c Springer-Verlag Berlin Heidelberg 2001
�

684

M.C. Hon et al.

path hits the slice boundary is proportional to the number of line segments. It is
important to keep this quantity small since it determines the number of times the
laser has to decelerate and stop, change directions, and then accelerate; frequent
starts and stops are time-consuming and reduce the life of the laser. The number
of line segments can be kept small by picking a suitable hatching direction. We
deﬁne this problem formally in the next section.
1.1

The Hatching Problem and Its Approximation

A slice is a simple polygon P, possibly with holes, in the 2-dimensional plane.
Let d be a unit vector in the plane, and �0 (d) the line through the origin with
direction d; d is the hatching direction. Let L(d) be the set of all lines that are
parallel to �0 (d) and whose distances to �0 (d) are multiples of δ, the width of the
path. We denote by S� the set containing
� the line segments in the intersection
between � and P, and deﬁne H(d) := �∈L(d) |S� |. (Fig. 1(b).) The optimization
problem can be stated formally as follows:
Problem 1 (Hatching Problem). Given a simple n-vertex polygon P, possibly
with holes, compute a hatching direction d such that H(d) is minimized.
Suppose the width δ of the tool-tip is inﬁnitesimally small. (By “tool” we
mean, e.g., the laser in Stereolithography or the nozzle in Fused Deposition Modeling.) Then, given any hatching direction d, the number of times the hatching
path runs into an edge e of P is proportional to the length of e’s projection perpendicular to d. Thus the solution to the hatching problem can be approximated
by ﬁnding a direction which minimizes the total length of the projections of the
edges of P onto a line perpendicular to this direction. (Clearly the smaller δ is,
the better is the approximation.) This yields the following problem, where, for
simplicity, we consider not the edges themselves but their outward normals, each
with the same length as its corresponding edge and translated to the origin.
Problem 2 (Projection Problem). Given a ﬁnite set S of n vectors
�in the plane,
each beginning at the origin, ﬁnd a unit vector d such that
v∈S |v · d| is
minimized.
Note that Problem 2 depends only on the lengths and orientations of the
edges of the original polygon, and not on how they connect to each other in the
polygon. This suggests that we can ﬁnd a globally optimal hatching direction
for all the layers by projecting the edges from all layers onto the xy-plane and
running our algorithm on the resulting set of vectors.
1.2

Contributions

In Sections 2 and 3 we present two simple and eﬃcient algorithms for Problem 2;
this yields an approximation to the optimal hatching direction. For comparison,
we also designed an algorithm for Problem 1 which computes an optimal hatching direction; this algorithm is more complex and is described in Section 4. We

Computing Optimal Hatching Directions in Layered Manufacturing

685

establish the performance of the approximation algorithms in two ways: First, we
implemented the algorithms of Sections 3 and 4 and tested them on real-world
polyhedral models obtained from industry (Section 5). We discovered that the
approximation algorithm works very well in practice. Second, we show that, under reasonable assumptions, the number of hatching segments produced by the
approximation algorithms is only a constant times more than the number produced by the optimal algorithm (Section 6). In Section 7, we discuss applications
of the approximation algorithms to other related problems. For lack of space, we
omit many details here; these can be found in [1,5].

2

Minimizing the Projected Length of a Simple Polygon

Recall what we want to accomplish. We are given a simple polygon, from which
we get a set S of outward-pointing normal vectors ne for each edge e, with ne
having the same length as e and beginning
� at the origin. We want to compute
a direction d that minimizes the sum e |ne · d|. We replace all the vectors in
S that point in the same direction by their sum. We then sort the vectors in
circular order and do a circular walk around the origin. We keep an initially
empty chain of vectors during our walk. Whenever we encounter a vector in S,
we put it onto the chain, with its tail at the head of the�old chain.
It is easy to see that the sum of all these normals e ne is zero, since our
polygon is closed. It follows that we will get a polygon at the end of our circular
walk. Moreover, this polygon is convex because the vectors are added in sorted
order. Now it is clear that, for any direction d, the sum of the absolute values
of the dot products of the vectors in S w.r.t. d is twice the width of this convex
polygon in the direction perpendicular to d. (Fig. 2). Therefore, ﬁnding the
minimizing direction in Problem 2 is equivalent to ﬁnding the direction that
minimizes the width of the convex polygon. Using any of the standard algorithms
that compute the smallest width of a convex polygon [2], we have:
Theorem 1. Given a simple n-vertex polygon P in the plane, we can compute
in O(n log n) time and using O(n) space a unit vector d such that the sum
�
e |ne · d| is minimized.
As noted in the discussion leading up to Problem 2, the direction d in Theorem 1 can be used as an approximation to the optimal hatching direction sought
in Problem 1. A similar algorithm was discovered independently in [4].

3

An Alternative Algorithm

In this section, we present another approach to Problem 2. This algorithm has
the advantage that it works on any set of vectors, not just those corresponding
to the edge normals of a simple polygon; moreover, it generalizes easily to higher
dimensions.

686

M.C. Hon et al.

Consider the set S of normal vectors in the plane, each with its tail at the
origin. We pick an arbitrary vector d as a candidate direction and draw a line perpendicular to d through the origin. This line cuts the plane into two half-planes.
The normals that lie in the opposite half-plane as d will register a negative value
in their inner products with d. We correct the inner products of these vectors
with a minus sign. This corresponds to “reﬂecting” these vectors through the
origin. We replace the downward-pointing vectors (w.r.t. d) with their reﬂected
copies (Fig. 3). We call this new set of vectors S̃.
� ṽ in S̃ lie in�the same closed half-plane as d. Therefore
� All the vectors
|v
·
d|
=
v∈S
ṽ∈S̃ (ṽ · d) = (
S̃ ṽ) · d. In other words, the sum of
�all the
projection lengths is equal to the inner product of d with a single vector S̃ ṽ. If
no element
of S̃ is on the cutting line, nothing prevents us from rotating d�
away
�
from S̃ ṽ and in the process decreasing the inner product it makes with S̃ ṽ.
We can keep doing this until one of the vectors ṽ is on the cutting line. Now any
further movement of d will cause ṽ to go to the other side of the cutting line and
cause the total projection length to increase. Thus, the position of the cutting
line that coincides with one of the input vectors must be a local minimum for
the total projected length.
�
We can update S̃ ṽ eﬃciently if we visit the vectors in a circular order.
Speciﬁcally, each vector ṽ has associated with it two regions, separated by the
line perpendicular to ṽ. In our walk, whenever we pass this line, we know that the
associated vector’s contribution
�to the sum changes sign. If ṽi is the associated
vector, we subtract 2ṽi from S̃ ṽ, one copy to take it oﬀ from the sum, and
another copy to insert it back in with a negative sign. We use the newly updated
vector sum to calculate the projection at that event point. Since the update can
be done in O(1) time, we get the same result as in Theorem 1.

4

An Exact Algorithm for the Hatching Problem

In this section, we give an outline of our algorithm that solves Problem 1.
W.l.o.g., we may assume that no vertex of the polygon P is at the origin and
that no three successive vertices of P are collinear.
Since H(d) = H(−d) for any direction d, it suﬃces to compute an optimal
hatching direction d = (d1 , d2 ) for which d2 ≥ 0. The idea of our algorithm is as
follows. We start with an initial direction d = (−1, 0), and rotate it in clockwise
order by an angle of π until d = (1, 0). At certain directions d, the value of H(d)
changes. We will call such directions critical. During the rotation, we update the
value of H(d) at each such critical direction.
During the rotation, the collection L(d) rotates, with the origin being the
center of rotation. We give necessary conditions for a direction d to be critical.
There are two types of directions d, for which H(d) changes.
Type 1: The subset of lines in L(d) that intersect the polygon P changes.
We analyze when this can happen. Let CH (P) be the convex hull of P. Note
that any line intersects P if and only if it intersects CH (P). Let d be a direction
at which the subset of L(d) that intersects P changes. Let d⊥ be a direction

Computing Optimal Hatching Directions in Layered Manufacturing

687

that is orthogonal to d. Then there must be a vertex v on CH (P) such that: (i)
v is extreme in one of the directions d⊥ and −d⊥ , and (ii) v lies on a line of
L(d), i.e., the distance between v and the line �0 (d) through the origin having
direction d, is a multiple of δ.
Type 2: For some line � ∈ L(d), the set S� of line segments (of positive length)
in the intersection � ∩ P changes.
If this happens, then there is a vertex v of P such that: (i) v lies on a line
of L(d), i.e., the distance between v and the line �0 (d) is a multiple of δ, and
(ii) both vertices of P that are adjacent to v are on the same side of the line
�v (d) through v that is parallel to �0 (d). (We have to be careful with degenerate
cases.)
Let D be the set of all directions d for which there is a vertex v of P whose
distance to the line �0 (d) is a multiple of δ. It follows from above that D contains
all critical directions. We now give a brief overview of the algorithm.
Step 1: For each vertex v of P, compute all directions d = (d1 , d2 ) for which
d2 ≥ 0, and for which the distance between v and the line �0 (d) is a multiple of
δ. Let D be the resulting set of directions.
A simple geometric analysis shows that this step can be reduced to solving
2(1 + �v�/δ) quadratic equations for each vertex v of P. Hence, the time for
Step 1 is O(|D|), where |D| ≤ 2n(1 + maxv �v�/δ).
Step 2: Sort the directions of D in the order in which they are visited when
we rotate the unit-vector (−1, 0) by an angle of π in clockwise order. We denote
this ordering relation by ≺. The time for this step is O(|D| log |D|).
Let m be the number of distinct directions in the set D. We denote the
sorted elements of D by d0 ≺ d1 ≺ . . . ≺ dm−1 . Note that for any i and any
two directions d and d� strictly between di and di+1 , we have H(d) = H(d� ).
Step 3: Let ds be a direction that is not in D. Compute H(ds ) for this direction.
Recall that H(ds ) is the number of line segments of positive length in the
intersection of P with L(ds ). The endpoints of any such line segment are on the
boundary of P. Hence, the total number of intersection points between P and
the lines in L(ds ) is twice H(ds ). For any edge e = (u,
�� v) of ⊥P,
� let� Ie be⊥ the
��
� v·(ds )
�
− u·(dδs ) � ,
number of lines in L(ds ) that intersect e. Then Ie = �
δ

where (ds )⊥ is the direction orthogonal to ds and to the left of ds . �
Hence, we can implement this step, by computing H(ds ) as (1/2) e Ie . This
takes O(n) time.
Step 4: Let k be the index such that dk−1 ≺ ds ≺ dk . Walk along the elements
of D in the order dk , dk+1 , . . . , dm−1 , d0 , . . . , dk−1 . At each direction di , we ﬁrst
compute H(di ) from H(d) for di−1 ≺ d ≺ di , and then compute H(d) from
H(di ) for di ≺ d ≺ di+1 .
We give some details about this step in Section 4.1. For each direction d i ∈ D,
we spend O(1) time to update H(d), so the overall time for Step 4 is O(|D|).
Step 5: Report the minimum value of H(d) found in Step 4, together with the
corresponding optimal hatching direction(s) d.
Theorem 2. Given a simple polygon P, possibly with holes, having n vertices,
Problem 1 can be solved in O(Cn log(Cn)) time, where C = 1 + maxv �v�/δ.

688

4.1

M.C. Hon et al.

Step 4

Let d0 be any direction of D. We analyze how H(d) changes, if d rotates in clockwise order, and “passes” through d0 . We denote by d−� (resp. d� ) the direction
obtained by rotating d0 by an inﬁnitesimally small angle in counterclockwise
(resp. clockwise) direction. Hence, d−� (resp. d� ) is the direction d immediately
before it reaches (resp. immediately after it leaves) d0 .
Let v be any vertex of P that corresponds to d0 , i.e., d(v, �0 (d0 )) is a multiple
of δ. Let vp and vs be the predecessor and successor vertices of v, respectively.
Note that the interior of P is to the left of the directed edges (vp , v) and (v, vs ).
There are two cases, one of which we describe here.
Assume that the points v, v + d0 , and vp or the points v, v + d0 , and vs are
collinear. Hence, we have two adjacent vertices, whose (signed) distances to the
line �0 (d0 ) are equal to the same multiple of δ. We rename these vertices as u
and v, and assume w.l.o.g. that the triple (u, u + d⊥
0 , v) forms a right-turn. Let
u� be the vertex of P that is adjacent to u and for which u� � =v. Similarly, let
v � be the vertex that is adjacent to v and for which v � � =u.
When d passes through d0 , there are ﬁfty six cases. We consider one of these
cases; for the other cases, we refer to [5]. As in Figure 4, assume that (1) (0, d⊥
0 , u)
�
forms a right-turn, (2) (0, d⊥
0 , v) forms a right-turn, (3) (u, u + d0 , u ) forms a
left-turn, (4) (v, v + d0 , v � ) forms a left-turn, and (5) v is the successor of u.
(Recall that we assume that (u, u + d⊥
0 , v) forms a right-turn.)
We argue that H(d0 ) = H(d−� ), and H(d� ) = H(d0 ) − 1, as follows: Let j
be the integer such that d(u, �0 (d0 )) = d(v, �0 (d0 )) = jδ. For any direction d,
let �j (d) be the line having direction d and whose distance to �0 (d) is equal to
jδ. (Figure 4.) Consider what happens if d rotates in clockwise order, and passes
through d0 . For direction d−� , the intersection of line �j (d−� ) with P contains
a line segment L, whose endpoints are in the interiors of the edges (u� , u) and
(v, v � ). For direction d0 , the intersection of line �j (d0 ) with P contains the edge
(u, v). If we rotate the direction from d−� to d0 , then L “moves” to the edge
(u, v). Hence, we indeed have H(d0 ) = H(d−� ). For direction d� , edge (u, v)
does not contribute any line segment to the intersection of line � j (d� ) with P.
Therefore, we have H(d� ) = H(d0 ) − 1.

5

Experimental Results

We implemented the 2-dimensional algorithm of Section 3 in C++, and tested it
on slices generated from real-world polyhedral models obtained from Stratasys,
Inc., a Minnesota-based LM company. We generated the slices using Stratasys’
QuickSlice program. Figure 5 (top row) displays some of our results.
We also implemented the idea discussed at the end of Section 1.1 to compute
a globally optimal direction for all slices. Figure 5 (bottom row) displays some of
our results, as viewed in projection in the positive z-direction. (We used a layer
thickness of 0.01 inches.) Additional results for both experiments are in [1].
We remark that the approximation algorithms work on polygons with holes
in exactly the same way as they do on polygons without holes. In fact, the

Computing Optimal Hatching Directions in Layered Manufacturing

689

algorithms only need the orientation and lengths of the edges; they do not use
any information about the adjacency of the edges.
We also implemented the exact algorithm from Section 4. In a separate set
of experiments, reported in detail in [5], we tested the exact and approximation
algorithms on several additional test ﬁles, using now a Sun Ultra with a 400 MHz
CPU and 512 MB of RAM. (We ran the algorithms only on single layers, not all
layers.) The approximation algorithm generated at most fourteen percent more
hatching segments than the exact algorithm. The running time of the exact
algorithm ranged from 38 seconds (on a 32-vertex polygon) to 2485 seconds (890
vertices); the approximation algorithm never took more than 1 second.

6

Analysis of the Approximation Algorithm

Our experimental results suggest that the approximation algorithm does well in
practice. To further understand its behavior, we also analysed it theoretically.
Let δ > 0 be the width of the tool-tip and n the number of vertices in the
polygon P. For any direction d, let P roj(d⊥ ) be the length of the projection
of the edges of P perpendicular to d, and let Cut(d) be the number of times
the boundary of P is cut when hatched in direction d. Let dp and dc be the
directions minimizing P roj(d⊥ ) and Cut(d), respectively; dp is the direction
computed by the approximation algorithm.
⊥
In [1], we prove that Cut(dp ) − Cut(dc ) < 3n + (P roj(d⊥
p ) − P roj(dc ))/δ.
⊥
⊥
Since P roj(dp ) − P roj(dc ) ≤ 0, we have that Cut(dp ) − Cut(dc ) < 3n, or
Cut(dp )/Cut(dc ) < 1 + 3n/Cut(dc ).
If the number of cuts is too small, features will be lost in the model.
It is reasonable to assume that Cut(dc ) ≥ kn, where k ≥ 1. This is true
if, e.g., many edges of the polygon are cut at least k times. We then have
Cut(dp )/Cut(dc ) < 1 + 3/k. Furthermore, if in directions dp and dc , each edge
is cut in its interior only, then Cut(dc ) is twice the minimum number of hatching
segments and Cut(dp ) is twice the number of the hatching segments generated
by the approximation algorithm. This yields an approximation ratio of 1 + 3/k.

7

Other Applications

Our methods can solve several related problems eﬃciently (see [1]):
To improve part strength it is desirable to hatch each slice along two nonparallel directions [3]. This yields the following problem: Given a simple n-vertex
polygon P, possibly with holes, and a ﬁxed angle θ, 0 < θ ≤ 90◦ , ﬁnd a pair
of directions (d, d� ) that make an angle θ with each other such that the total
number of hatching segments for P in these two directions is minimized. This
problem can be converted to a form where the algorithm of Section 2 or Section 3
can be applied, and can be solved in O(n log n) time and O(n) space.
Suppose that we wish to protect certain functionally critical edges of the
slice from being hit too often during hatching. We can assign weights to edges in

690

M.C. Hon et al.

proportion to their importance. This leads to a weighted version of Problem 2,
which we can solve in O(n log n) time and O(n) space.
When a polygonal slice is built via LM, certain edges will have a stair-step
appearance due to the discretization introduced by the tool-tip width (similar to
anti-aliasing in computer graphics). We quantify the error in terms of the total
height of the stair-steps on all edges and show how our methods can be used to
minimize the total error, again in O(n log n) time and O(n) space.
We generalize Problem 2 to vectors in k > 2 dimensions and present two
algorithms: one runs in O(nk−1 log n) time and O(n) space, and the other in
O(nk−1 ) time and space. We also present experimental results for k = 3, using
as input the facet normals of our models.

References
1. M. Hon, R. Janardan, J. Schwerdt, and M. Smid. Minimizing the total projection of
a set of vectors, with applications to Layered Manufacturing. Manuscript, January
2001. http://www.cs.umn.edu/∼janardan/min-proj.ps.
2. M. E. Houle and G. T. Toussaint. Computing the width of a set. IEEE Trans.
Pattern Anal. Mach. Intell., PAMI-10(5):761 765, 1988.
3. P. Jacobs. Rapid Prototyping & Manufacturing: Fundamentals of Stereolithography.
McGraw-Hill, 1992.
4. S. E. Sarma. The crossing function and its application to zig-zag tool paths. Comput.
Aided Design, 31:881 890, 1999.
5. J. Schwerdt, M. Smid, M. Hon, and R. Janardan.
Computing an optimal hatching direction in Layered Manufacturing. Manuscript, January 2001.
http://isgwww.cs.uni-magdeburg.de/∼michiel/hatching.ps.gz.

�2
�1

�0 (d)
δ

(a)

(b)
d
0

Fig. 1. (a) Hatching a polygonal slice. (b) Formal de nition for hatching problem. Here
H(d) = 10. Note that lines �1 and �2 each contribute one segment.

Computing Optimal Hatching Directions in Layered Manufacturing

691

d
Starting Point of Walk

Width in direction perpendicular to d

Fig. 2. A set of vectors and the resulting convex polygon. The sum of the absolute
values of the dot products of the vectors w.r.t. direction d is twice the width of the
convex polygon in the direction perpendicular to d.

positive

negative

Every vector in the
right half-plane is
reflected through the origin

d

Fig. 3. As an initial step, we pick an arbitrary candidate direction d and make sure
every vector falls in its positive half-plane. In this ﬁgure, the candidate direction is the
negative x direction.

v

�j (d−� )

�

�j (d0 )

L
u�
v

�j (d� )

u
�0 (d0 )

d⊥
0
0

d0

Fig. 4. Illustrating Step 4 in Section 4.1.

692

M.C. Hon et al.

daikin.stl at z=2.769 impeller.stl at z=1.489 mj.stl at z=2.029
n = 662 vertices
n = 412 vertices
n = 64 vertices

daikin.stl
515 layers

impeller.stl
374 layers

mj.stl
322 layers

Fig. 5. Screen shots of the program running on a single layer (top row) and all layers
(bottom row) of diﬀerent models. (The z value in the top row shows the height of the
layer above the platform.) The long lines inside each window is the resulting hatching
direction, which minimizes the sum of the lengths of the projections of the edges onto a
perpendicular line. For each model, the running time for a single layer was less than 0.01
seconds and for all layers was less than 2 seconds, on a Sun UltraSparcIIi workstation
with a 440 MHz CPU and 256 MB of RAM.

