Procedia Computer Science
Volume 80, 2016, Pages 1978–1988
ICCS 2016. The International Conference on Computational
Science

A Practical Parallel Programming Course based on
Problems of the Spanish Parallel Programming Contest
Domingo Gim´enez
University of Murcia, Murcia, Spain
domingo@um.es

Abstract
This paper presents an experience of an introductory course on Parallel Programming. The
course is dedicated to parallel programming tools and environments, and in particular to the
analysis, development and optimization of parallel algorithms. It has a practical orientation
and is guided with the use of problems from the Spanish Parallel Programming Contest. The
diﬀerent units are presented in the traditional lecture format, and a practical session accompanies each unit, with problems to work with in the tools or algorithmic paradigms presented
in the previous lecture. The students work in the practical sessions on problems and using the
system of the contest, which facilitates online and real time validation of their implementations.
The practical approach of the course and the continuous evaluation used led to an important
increase in the marks.
Keywords: parallel programming teaching, practical approach, problem based learning, parallel programming contest

1

Introduction

Parallelism is today omnipresent, with several cores in small systems (mobiles, dedicated cards,
etc.) and desktops and laptops, and large systems built up by combining some of these basic
systems. So, there are many eﬀorts all around the world to introduce parallelism at diﬀerent
levels [8]. Parallelism will be present in some measure in the work-life of everybody in the
computing area, and, consequently, it is almost compulsory to initiate students in parallelism.
This becomes still more important for students of computer and computing engineering, and
special eﬀort are being made in these areas[5]. But there are some diﬃculties in introducing
parallelism concepts in these studies. On the one hand, most of the lecturers are not specialists
in parallel computing or even have no more than a vague knowledge of the ﬁeld. In some
cases they are not fully aware of the importance of the ﬁeld, and this delays the introduction
of parallelism topics in the syllabus of some courses or parallelism courses in the curricula at
some universities. This delay must be overcame, so that today’s students are prepared by
the end of their studies for the parallel computing world they will work in. On the other
1978

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.518

Practical Parallel Programming Course

Gim´enez

hand, parallelism introduces more complexity to the diﬀerent aspects of computing, including
architectures, systems and programming. So, successful introduction of parallelism concepts to
all the students is no a trivial task if they are to have a moderate knowledge of the ﬁeld, which
would allow them also to work with them. Consequently, the introduction of parallelism topics
should be planned in detail, with the inclusion of appropriate concepts but also with practicals
suitable for facilitating an active learning of the skills for the development of parallelism tasks.
This paper presents an experience of a course of Introduction to Parallel Programming [3],
centered on parallel programming tools and environments (OpenMP, MPI and CUDA) and
especially on the design, analysis and development of parallel algorithms. The course is mainly
organized in theoretical lectures and practical sessions, with a practical session for each lecture.
Each practical session is planned for the week after the corresponding lecture, and the resources
of the Spanish Parallel Programming Contest are used [6]. The Contest uses an adaptation of
Mooshak [4] to a cluster of processors. The environment allows the students to work online and
real-time partial validation and evaluation of their work. It also helps lecturers keep track of the
work done by students, and enables a fast review of their work, so facilitating fast evaluation
and correction. This means the lecturer detects mistakes and misunderstandings early on and
can modify the teaching accordingly.
The paper is organized in the following way. Section 2 explains the context of the course
and comments on previous experiences. Section 3 describes the syllabus and the organization
of the course, which is evaluated in Section 4. Finally, Section 5 gives some conclusions.

2

Context of the Course and Previous Experiences

The Computer Science Degree at the University of Murcia, Spain, comprises four years. The
course Methodology of Parallel Programming is in the ﬁrst semester of the fourth year, which
is devoted to specialization and to the end of studies project. The students take one of ﬁve
specializations: Computation, Computer Engineering, Information Systems, Information Technology and Software Engineering. The course is compulsory for the students in the Software
Engineering specialization and optional for those in Computer Engineering.
The structure of the Degree changed four years ago, from ﬁve to four years. The course
previous to Methodology of Parallel Programming was in the ﬁfth year and was optional for
all the students. So, the change produced an increase in the number of students on the course,
and at the same time the students are in general less mature and less interested in parallel
computing than their colleagues were. As a consequence, the course should be planned to
prevent students not especially interested in parallel computing from dropping out. It is very
common in the Computing Science studies at our University for students of the last years to be
working, and many of them begin courses but gradually withdraw from many of them. Table
1 shows the number of students in the course in the last 13 years, the number of students
who pass the course and the percentage of students passing it. There is an increment in the
number of students and a reduction in the percentage of students passing the course when the
new format of the Degree started. The ﬁgures for the present year are prospective, because
at present the on-site practical sessions have ﬁnished, but the students must complete a ﬁnal
practical worth 25% of the ﬁnal mark and in which they work individually and autonomously.
The average percentage of students passing the all course was approximately 65%, and it had
fallen to around 45% in the last four years. This year, with the new organization, with a more
guided and practical approach, the percentage has increased to the previous level.
In the ﬁrst years of the Degree students follow one course on Fundamentals of Concurrent and
Distributed Computing and another on Architecture of Computers, where the basics of parallel
1979

Practical Parallel Programming Course
Year
students
#passing
%passing

03
10
6
60.0

04
8
5
62.5

05
13
9
69.2

06
18
7
38.9

Gim´enez
07
10
7
70.0

08
4
4
100

09
13
8
61.5

10
12
7
58.3

11
19
10
52.6

12
29
12
41.4

13
26
9
34.6

14
41
19
46.3

15
37
24
65.9

Table 1: Number of students in the course, and number and percentage of students passing the
course
architectures are introduced. There is another optional course on Multicore Programming in
the Computer Engineering specialization. So, our course is centered on parallel programming
and algorithms with the shared-memory and message-passing paradigms, and some concepts of
GPU and heterogeneous computing are introduced.

3

Organization of the Course

The course has always been based on practicals, with the students working autonomously in
most cases. Some basic practicals were done in a few on-site sessions, where the students can
collaborate and consult the lecturer. Around half of the qualiﬁcation was project based, with a
diﬀerent project for each student, and the work was individual with the help of the lecturer in
tutorials and practical sessions. The students acquired the capacity to work on the development
of parallel programs using diﬀerent parallelism environments, and the success rate was around
65%, which can be considered satisfactory if we consider the peculiarities of the students on the
course, with many of them working and so part-time students.
The small initial practicals were organized the last years using the resources of the Spanish
Parallel Programming Contest, whose ﬁrst edition was in 2011 [1], and in the current organization these resources are further exploited to reinforce continuous evaluation. A problem-based
learning approach was normally used [2]. It seemed to be a good approach when the course
was elective, but with the course being compulsory the success percentage decreased (Table 1)
and so the value of the ﬁnal project in the ﬁnal mark was reduced and that of the guided work
increased, and the project is with problems from the Contest, so that the work in the project
can be more directly monitored, validated and evaluated.

3.1

Syllabus and Organization

The course is organized in 13 lectures and 10 practical sessions, whose content and schedule
are summarized in Table 2. There is an initial session where the general concepts of parallelism
and distributed computing are reviewed, and the need for parallelism is justiﬁed. There are ﬁve
lectures on parallelism tools and environments. Each of these lectures has the corresponding
practical session the week following. The students work in pairs and each session is worth 0.5 of
the ﬁnal mark (the total worth of these sessions is 2.5 over 10). Five lectures follow on parallel
algorithmic schemas, with the corresponding practical sessions, in which the work is individual,
and each session is worth a maximum of 1. There is one lecture on analysis and methodology
of parallel algorithms. Some concepts related with the analysis and methodology were studied
in the lectures on algorithmic schemes, and here these concepts are reviewed and new concepts
are introduced. Each student works on a ﬁnal project worth 2.5, and the project is diﬀerent
for each student. Parallel implementations in OpenMP, MPI, MPI+OpenMP and optionally
CUDA of a sequential algorithm are developed, and analyzed theoretically and experimentally.
1980

Practical Parallel Programming Course

Theme
Introduction to parallel computing, need for parallelism
Parallel systems and parallel programming paradigms
Shared-memory programming, OpenMP
Message-passing programming, MPI
Hybrid and heterogeneous computing
Manycore programming, CUDA
Data parallelism and Data partitioning
Relaxed algorithms and Synchronous parallelism
Algorithms on trees and graphs, Pipeline
Parallelism of Divide and Conquer and Dynamic Programming
Paral. of tree search, Master-Slave, Tasks Bag, Processes Farm, Replicated
Workers
Analysis of parallel algorithms
Methodology of parallel programming

Gim´enez

Week
Theo Prac
1
2
3
3
4
4
5
5
6
6
7
7
8
8
9
9
10
10
11
11
12
12
13

Table 2: Organization and schedule of the lectures and practicals of the course

3.2

Practical Works

As mentioned, the course is practical-guided and the practicals are organized in three blocks:
environments, algorithms and project. The content of each block is explained.
3.2.1

Parallelism Tools and Environments

Five practical sessions are devoted to work with parallelism in diﬀerent environments and to
familiarizing students with the tools to be used in the implementation of parallel algorithms
and in the ﬁnal project. A brief description of the work in each session and of the mechanics
of the sessions is given below:
• Parallelism environments. Basic examples of parallelization of sorting algorithms in C++,
Java and pthreads are given. Only two threads or processes are used, and the students
are asked to generalize for more threads and processes, and to compare the performance
and the ease of development.
The mechanics of the system of the Spanish Parallel Programming Contest (PPC) [6]
is done with experiments with a problem from a project to introduce parallelism at Secondary School [7]. The same problem is used to experiment with the heterogeneous cluster
the students can access and carry out experiments in the ﬁnal project. The cluster comprises six multicore nodes, each with GPU or Xeon Phi cards [9].
Each group (in this ﬁrst block, students work in pairs) emails the lecturer the answers to
the questions in the practical at the end of the session. For the ﬁrst practical, the lecturer
answers these emails the following day, clarifying misunderstandings, and students are
given four days to improve their answers. There are two deadlines (immediately after
the session and four days later) for the other practicals, but now there is no immediate
feedback. A practical carries the highest mark in the ﬁrst instance, while the marks in
the second are determined for each practical.
1981

Practical Parallel Programming Course

Gim´enez

• OpenMP. The work is with the same test as in the PPC. The students analyze the inﬂuence
of the number of threads in the execution time of the sorting example. A basic example
of matrix multiplication with loop parallelization is provided, and they must experiment
with loop parallelization at three levels and with the clause collapse. Versions of the
multiplication using sections and tasks must also be developed.
• MPI. Message-passing examples of the same test are used. In the sorting example, pointto-point communications should be replaced by collective communications, and in the
multiplication example synchronous communications should be replaced by asynchronous
communications.
• Hybrid and heterogeneous computing. A hybrid version of the matrix multiplication must
be developed from the previous OpenMP and MPI versions. The variation of performance
with the problem size and the number of MPI processes and OpenMP threads is analyzed.
The hybrid version is used in the heterogeneous cluster to determine the optimal distribution of the processes. The students are asked to develop a version with one process per
node and a diﬀerent volume of data and number of threads for each node.
• CUDA. Manycore programming is not core (there is a course in the second semester on
manycore programming), so no original developments are asked for. A CUDA matrix
multiplication example is provided. Experiments are carried out, varying the number of
threads per block, with evaluations in the same test of the PPC and in the cluster.
3.2.2

Parallel Algorithmic Paradigms

As in the previous block, the questions in the session report are sent at the end of the session,
and new or improved solutions can be sent in the following four days, but with lower marks. The
questions, their maximum value, and how they are valued in the ﬁrst and second instances are
particular to each session, and vary according to the progress of the students, which is detected
by the lecturer through continuous assessment. Explanations of some aspects of the practicals
are included in the classroom lectures, which begin with a review of the shortcomings detected
in the review of the previous practical and with comments on diﬀerent ways of answering the
questions. At the end of the lecture, some guidelines for solving the next practical session are
given. The lectures last two hours, with approximately 20 minutes at the beginning and 10 at
the end for the comments on the practicals.
Some of the problems proposed in the PPC are used in the practical sessions. All problems
can be assigned to the diﬀerent parallel algorithmic paradigms in the syllabus of the course.
Table 3 shows one possible assignation, and the problems used for the practical sessions are
marked with the week of the session in which they were used. The paradigms are not exclusive, and so some of the problems can be assigned to more than one paradigm and diﬀerent
selections of problems for the practical sessions could be made. In the CPP the contestants are
provided with a sequential solution to each problem, and they use parallelization to maximize
the speed-up. In 2012, there were two contests, one with OpenMP and MPI and the other with
CUDA. The CUDA contest comprised 3 problems, with only one diﬀerent from those of the
OpenMP+MPI contest. The problems, the sequential solutions provided by the organization
and the codes of the records obtained by the contestants or after the contest can be found on
the website of the contest [6].
For each practical session the students work on the solution of some questions, which comprehend programming and solving problems in the PPC environment. As mentioned, the questions
1982

Practical Parallel Programming Course

Prob

Data
parallelism

Data
partitioning

11A
11B
11C
11D
11E
12A
12B
12C
12D
12E
12A-CUDA
13A
13D
13F
14A
14D
14F
15A
15C
15E

X
X

X

Gim´enez

Relaxed Synchro-Algo- Pipeline Divide
algonous
rithms
and
rithms paron
Conaltree
quer
lelism
9

DynamicTree
prosearch
gramming

Replicated
workers

X
X

X

X

X

8
X
X

8
X
X

X
X

X

X

X

X

12

12

X

X
X

X
X
X

10

11
X
X
X

X
X
X

X
X

X
X

X
X
X

X
X

X
X
X
X

X
X

X
X

X

10

Table 3: Association of the problems in the PPC to the parallel algorithmic paradigms in the
course
and their evaluation is diﬀerent for each session, with two deadlines to send in solutions and
the value for each question is lower for the second deadline.
The questions and the evaluation guides of the session on Algorithms on trees and Pipeline
are given as an example:
• Question 1: Problem A from the 2015 contest must be solved with a Pipeline schema in
OpenMP. Submatrices of size m×m in the diagonal of a matrix of size n×n are considered,
with the lower-eastern block of size l × l of a submatrix overlapping the upper-western
block of the next submatrix. Squares of the submatrices are performed, beginning with
the submatrix with the ﬁrst element of the matrix, then the next submatrix, and so on.
A number of iterations (the squares of all the submatrices) are carried out. The second
square of the ﬁrst submatrix can start only after the ﬁrst square of the second submatrix
ﬁnishes, so the squares in diﬀerent iterations can be pipelined. The students can provide
a simpliﬁed version valid for 4 and 6 threads or a general solution.
• Question 2: Problem C from 2012 consists of successive sorting of the data on a square
matrix and the square of the resulting matrix. The students work only on the parallelization of the sorting. The sequential solution uses quicksort, and they must implement an
MPI version with a parallel mergesort with a tree structure for the merging of the sorted
subsets of data. A simpliﬁed version valid for 2, 4 and 8 processes can be provided, or a
1983

Practical Parallel Programming Course

Gim´enez

general version valid for any number of processes.
Practical sessions are one hour and three quarters, so the students have a limited time to
work on the questions, and they have the opportunity of working in simpliﬁed versions and of
improving in the following four days the solutions they obtain during the session. Simpliﬁed
solutions for each questions are worth 0.5 each if they are answered in the session and 0.3 if
answered latter; the general solutions are worth 0.7 and 0.4; but the maximum mark is 1. The
environment of the PPC helps to control the individual work of each student, to validate the
solutions, to evaluate their performance and to compare diﬀerent solutions.
3.2.3

Final Project

The students work in a ﬁnal project individually and autonomously. They work with a problem
of the PPC, with diﬀerent problems for diﬀerent students. The project is worth 2.5. The
diﬀerent parts of the work and the documentation together with their contribution to the ﬁnal
mark are:
• Explanation of the sequential method provided by the organization of the contest, and
proposal of possible improvements (0.2).
• OpenMP solution, with pseudo code and the code with comments. The OpenMP solutions
to this problem in the record table must be explained, together with the modiﬁcations
introduced to reduce the execution time (0.4)
• MPI solutions, with pseudo code and code with comments. The MPI solutions in the
table record are commented, as are the modiﬁcations to reduce the execution time (0.4).
• Hybrid MPI+OpenMP solution, with pseudo code and code with comments (0.2).
• Theoretical analysis of the algorithms, with estimation of execution time, speed-up, eﬃciency and isoeﬃciency, and justiﬁcation of the algorithmic paradigms used (0.4).
• Experimental study of the implementations. The student selects the type and size of the
inputs depending on the problem. The execution time, speed-up, eﬃciency and isoeﬃciency might be analyzed (0.5).
• The implementations are sent to the PPC for validation, but the student must prepare a
more general process for validation (0.2).
• Comparison of the theoretical and experimental analysis (0.2).
The students can increase their mark with optional works:
• A CUDA implementation of the problem they have been assigned can be worth a maximum of 1, depending on the originality and eﬃciency. A theoretical and experimental
analysis should be done.
• The ﬁnal mark can increase a maximum of 1 with new records. Each new record is worth
a maximum of 0.4 depending on the originality and the improvement achieved.
1984

Practical Parallel Programming Course

4

Gim´enez

Evaluation of the Course

The main objective pursued with the reorganization of the course was to increase the percentage
of students achieving the minimum level needed to pass the course. It has been achieved, with
an increment of approximately 45% students passing the course in the last years to a prospect
of 65% passing this year (Table 1).
Students non attending the practical sessions or that do not achieve the minimum qualiﬁcation during these sessions can follow a non continuous evaluation system. Table 4 shows the
number of students who opted for the continuous or non continuous evaluation system after
each session. The total number of students is 31, so there are 6 students enlisted in the course
but not following it. This number is in concordance with what happened in previous years.
The prospective percentage of students passing the course in relation with the students that
eﬀectively follow it grows up to 77%. The average of the marks obtained by students who sent
solutions to each session is also shown. This average is higher for the initial sessions, where
the work is in pairs. In the last sessions the average decreases, as does the number of solutions
submitted. The decrease is due to the accumulation of practicals the students have these weeks
for other courses without continuous evaluation. To avoid students withdrawing the continuous
evaluation, they are given the opportunity of redo one of the practicals together with the ﬁnal
project.

Session:
Non continuous
Continuous
Solutions
Average mark

1
3
28
27
7.2

2
3
28
27
6.8

3
7
24
24
5.1

4
7
24
23
5.6

5
7
24
24
9.9

6
7
24
24
6.1

7
7
24
24
6.2

8
7
24
24
3.4

9
7
24
19
4.9

10
8
23
13
3.4

Table 4: Number of students following the continuous and non continuous evaluation system,
number of solutions submitted, and average mark, for each practical session
The rate of students passing the course has increased, but it can be at the expense of more
work from the lecturer and the students. The number of hours dedicated by the lecturer to the
practical sessions increased from approximately 40 to 100. More time was dedicated to prepare
each session, and for each session approximately four hours were dedicated to review the initial
solutions and other four for the second solutions.
The time the students dedicated to the practicals and their perception about the organization of the course and their results were evaluated through a test. Only 13 of the students
answered the test. This together with the subjectivity of the test makes that no deﬁnitive
conclusions can be drawn, but their perception of the course can be analyzed. They were
questioned what organization they prefer: that of this course, with continuous evaluation of
the practicals and a ﬁnal project (Course); that used in previous years, with short practicals
to work autonomously and a longer ﬁnal project (More project); the traditional organization
with exam plus practicals (Exam+practicals). All the students but one prefer the organization
used in the course, and the other prefers a longer project, what they can follow by selecting the
non continuous evaluation option. For each of the three systems they were asked to mark with
a value between 1 (total disagreement) and 5 (total agreement) the following statements: the
method facilitates passing the course; more work is needed to pass the course; the method propitiates learning. The average of the marks to the three statements for the three organizations
1985

Practical Parallel Programming Course

Gim´enez

are shown in Figure 1. They perceive the organization of the course this year requires more
work, but at the same time it is the organization with which it is easier to pass the course, and
they consider clearly this organization as the best for learning.

Figure 1: Average marks to the three statements for three organizations of the course
They were also asked about the time they dedicated to attend lectures and practicals and
to study what was treated in the lectures and to complete the work they did not ﬁnish in the
practical sessions. Table 5 shows the time the lecturer estimated that should be dedicated to
each part (Estimated), the average of the answers (Average), and the average without considering two extreme cases (Filtered Average), corresponding to the student who did not follow
the continuous evaluation and another student which estimated that had dedicated 400 hours
to ﬁnish the practicals (the average is 84 hours and the second largest time estimated was 120
hours). Figure 2 shows the time each student estimates for each part, the average and the time
the lecturer estimates. The spurious cases are not included. The amount of work the students
estimate is not far from that estimated by the lecturer.

Estimated
Filtered average
Average

Lecture
26
25
24

Study
26
19
19

Onsite
20
21
21

Practical
40
50
73

Total
112
115
137

Table 5: Estimation of the time dedicated to attend lectures (Lecture), to study what was
treated in the lectures (Study), to on site practicals (Onsite), and to ﬁnish uncompleted practicals (Practical)

1986

Practical Parallel Programming Course

Gim´enez

Figure 2: Time each student estimates for each part, average times and the time the lecturer
estimates

5

Conclusions and Future Studies

The paper presents a teaching experience in a parallel programming course organized to follow
continuous evaluation with practical sessions after each lecture. The problems and the resources
of the Spanish Parallel Programming Contest are used for the practical sessions and a ﬁnal
project. The goal pursued of increasing the number of students reaching the level to pass
the course has been achieved, with 65% of the students passing the course, and 77% if only
students following the course are considered. In addition, the success of the course organization
is evaluated through a questionnaire for the students.
The experience has been very positive, and it will be continued in successive courses.
Other problems from the PPC can be selected for the practical sessions on parallel algorithmic paradigms. The resources (problems and codes of records) can be used for other parallel
programming courses.

Acknowledgments
This work was supported by the Spanish MINECO, and by European Commission FEDER
funds, under grant TIN2015-66972-C5-3-R.

References
[1] Francisco Almeida, Vicente Blanco P´erez, Javier Cuenca, Ricardo Fern´
andez-Pascual, Gin´es Garc´ıaMateos, Domingo Gim´enez, Jos´e Guill´en, Juan Alejandro Palomino Benito, Mar´ıa-Eugenia Re-

1987

Practical Parallel Programming Course

[2]

[3]
[4]
[5]

[6]
[7]
[8]

[9]

Gim´enez

quena, and Jos´e Ranilla. An experience on the organization of the First Spanish Parallel Programming Contest. Olympiads in Informatics, 6:133–147, 2012.
´
Angel-Luis
Calvo, Ana Cort´es, Domingo Gim´enez, and Carmela Pozuelo. Using metaheuristics in
a parallel computing course. In Marian Bubak, G. Dick van Albada, Jack Dongarra, and Peter
M. A. Sloot, editors, ICCS (2), volume 5102 of Lecture Notes in Computer Science, pages 659–668.
Springer, 2008.
Domingo Gim´enez. Web page of the Methodology of Parallel Programming course at the University
of Murcia, http://dis.um.es/~domingo/mpp.html.
Jos´e Paulo Leal and Fernando M. A. Silva. Mooshak: a web-based multi-site programming contest
system. Softw., Pract. Exper., 33(6):567–581, 2003.
Sushil K. Prasad, Almadena Yu. Chtchelkanova, Anshul Gupta, Arnold L. Rosenberg, and Alan
Sussman. NSF/IEEE-TCPP curriculum initiative on parallel and distributed computing: core
topics for undergraduates (abstract only). In The 45th ACM Technical Symposium on Computer
Science Education, SIGCSE ’14, Atlanta, GA, USA - March 05 - 08, 2014, page 735, 2014.
Spanish Parallel Programming Contests. http://luna.inf.um.es.
Universidad de Murcia-Instituto Juan de la Cierva. Incorporaci´
on de contenidos de programaci´
on
paralela en la rama de tecnolog´ıas inform´
aticas, http://dis.um.es/~domingo/fp14.html,
Vladimir Voevodin, Victor Gergel, and Nina Popova. Challenges of a Systematic Approach to
Parallel Computing and Supercomputing Education. In Workshop Proceedings of EuroPar 2015,
2015.
Web page of the Scientiﬁc Computing and Parallel Programming Group at the University of Murcia.
http://luna.inf.um.es/grupo investigacion/.

1988

