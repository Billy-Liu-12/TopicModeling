Procedia Computer Science
Volume 80, 2016, Pages 639–649
ICCS 2016. The International Conference on Computational
Science

Genome-Wide Association Interaction Studies with
MB-MDR and maxT multiple testing correction on FPGAs
Sven Gundlach1 , Jan Christian K¨assens2 , and Lars Wienbrandt2
1

Institute of Medical Informatics and Statistics, University Medical Center Schleswig-Holstein,
Campus Kiel, Germany
gundlach@medinfo.uni-kiel.de
2
Department of Computer Science, Christian-Albrechts-University of Kiel, Germany
{jka,lwi}@informatik.uni-kiel.de

Abstract
In the past few years massive amounts of data have been generated for genetic analysis. Existing
solutions to analyze this data concerning genome-wide gene interactions are either not powerful
enough or can barely be managed with standard computers due to the tremendous amount of
statistical tests to be performed. Also, common approaches using cluster or cloud technologies
for parallel analysis are operating at the edge of what is currently possible.
This work demonstrates how FPGAs are able to address this problem. We present a highly
parallel, hardware oriented solution for genome-wide association interaction studies (GWAIS)
with MB-MDR and the maxT multiple testing correction on an FPGA-based architecture. We
achieve a more than 300-fold speedup over an AMD Opteron cluster with 160 cores on an
FPGA-system equipped with 128 Xilinx Spartan6 LX150 low-cost FPGAs when analyzing a
WTCCC-like dataset with 500,000 markers and 5,000 samples. Furthermore, we are able to
keep pace with a 256-core Intel Xeon cluster running MB-MDR 4.2.2 with an approximative
version of maxT, while we achieve a 190-fold speedup over the sequential execution of this
version on one Xeon core.
Keywords: GWAIS, epistasis, SNPs, Chi-squared test, FPGA, reconﬁgurable hardware, highperformance computing, bioinformatics

1

Introduction

The detection of gene-gene interactions, such as epistasis, has become a major topic in molecular
and quantitative genetics. Genome-wide association studies (GWAS) are conducted in order
to reveal the inﬂuence of genetic markers such as single-nucleotide polymorphisms (SNPs) on
complex genetic disease traits [13]. With the current genotyping technologies allowing the
collection of millions of markers per sample, large datasets can be created. The association of
the samples to a speciﬁc phenotype, which can be as simple as a binary trait, i.e. either case or
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.354

639

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

Gundlach et al.

control, allows statistical testing for the correlation of genetic characteristics to the trait. Since
testing for a correlation of single markers to a trait is not powerful enough in most cases [14, 15],
biologists consider at least a pairwise or even higher-order post-GWAS analysis called genomewide association interaction studies (GWAIS). As GWAS can only identify single markers that
have signiﬁcant main eﬀects, but markers that require interactions with other markers to show
their association with the phenotype are not detected by GWAS if their main eﬀects are small [9].
This introduces a high computational burden since the number of tests to perform increases
exponentially in the order of the analysis, i.e. a quadratic number for pairwise interactions
and a cubic number for 3rd-order interactions. In particular, n2 = n(n−1)
tests have to be
2
performed for an exhaustive pairwise interaction analysis, if n is the number of markers. This
already implies 500 billion tests for a dataset with 1 million markers.
Many tools have emerged in order to address this severe computational problem, e.g.
BOOST [22], iLOCi [16] and TEAM [26] which run on standard computers or clusters. Other
tools addressing GPU technology in order to signiﬁcantly speedup the computation process are
available, e.g. GBOOST [25], GWIS [6], epiGPU [10] and SHEsisEPI [11]. Some of those tools
were already implemented on FPGAs, such as BOOST [5] and iLOCi [24]. Also, third-order
interactions can already be analyzed in reasonable time with GPU or FPGA technology [4, 12].
However, most of the tools provide a fast test for interactions, but do not consider the
problem that for a large number of tests the number of expected false positive errors (i.e. type I
errors) is very high [7]. BiForce [8] adresses this problem by using Bonferroni correction [3] which
is however not powerful enough for family-wise error rate (FWER) correction [20]. When the
MDR tool emerged, the creators considered controlling the error rate by permutations of the
trait [17]. This behaviour was inherited by its extension MB-MDR [2]. MB-MDR categorizes
the characteristics of SNP combinations into three groups of potential association: high risk, low
risk and no evidence. The statistical test, that can be a simple Chi-squared test, is performed
multiple times in a number of iterations with a randomly permuted trait. The p-value of the
tests is then adjusted using the maxT multiple testing correction method [23].
In MB-MDR 3.0.3 van Lishout et al. presented an eﬃcient implementation of the maxT
method [21]. However, due to a large number of necessary iterations, e.g. 1,000, and the
large number of tests in each iteration, the runtime of MB-MDR 3.0.3 is not reasonable unless
executed on a high-performance computing system such as a CPU-cluster. Thus, we address
this problem with FPGA-technology. In the following, we demonstrate how our implementation
of MB-MDR 3.0.3 on an FPGA-system with 128 Xilinx Spartan6 FPGAs outperforms an AMD
Opteron cluster with 160 cores with a speedup of more than 300.
In the meantime, the same problem has been addressed by van Lishout et al. themselves.
They re-designed the maxT method, now referred to as gammaMaxT, by approximating the
necessary maximum operation in each iteration. In MB-MDR 4.2.2 [20] they have recently
reached an up to 104 -fold speedup compared to their old method with an acceptable trade-oﬀ
in result quality. We show that we are still able to keep pace with MB-MDR 4.2.2 and the
gammaMaxT method executed on an Intel Xeon cluster with 256 cores with the analysis of a
dataset with about 500,000 markers on 5,000 samples such as those provided by the Wellcome
Trust Case Control Consortium (WTCCC) [19]. Still, the speedup of our method over the
sequential execution of this method is 190-fold.

640

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs
SNP A
h

v

A00
A10
A20

A01
A11
A21

A02
A12
A22

control
w
h
v

SNP A
w

h

v

U00
U10
U20

U01
U11
U21

U02
U12
U22

HLO
matrix
SNP B

w
h
v

w

SNP B

SNP B

case

w
h
v

Gundlach et al.

SNP A
w

h

v

R00
R10
R20

R01
R11
R21

R02
R12
R22

Figure 1: Contingency tables and corresponding HLO-matrix for a pair of markers SNP A and
SNP B. Aij and Uij reﬂect the number of aﬀected and unaﬀected samples with the respective
combination of genotypes i, j. Rij indicates if samples with markers i for SNP B and j for SNP
A have a high statistical (H ) or a low statistical (L) risk or if there is no statistical evidence (O).

2

MB-MDR with maxT Multiple Testing Correction

The Model-Based Multifactor Dimensionality Reduction (MB-MDR) analysis has ﬁrst been
described by Calle et al. [1, 2] to detect gene-gene interactions associated with diseases. It is a
model-based version of the MDR [17] method with the main idea to merge multi-locus genotypes
into categories in order to increase the detection power. Our FPGA-based implementation
presented in this paper is based on the performance oriented optimization MB-MDR 3.0.3 by
van Lishout et al. [21]. We concentrate on the detection of pairwise gene-gene interactions on
biallelic markers in case-control datasets (i.e. binary traits), which is a common use case [19].
The method consists of three key steps described in the following sections, which lead to a fast
separation of highly signiﬁcant and low signiﬁcant interactions.

2.1

Contingency Tables and HLO-Matrices

In the ﬁrst step, two two-dimensional contingency tables are created for each pair of genetic
markers in the input dataset, one for all case samples and one for the controls. They are also
referred to as aﬀected-subjects matrix A and unaﬀected-subjects matrix U . Since we assume
biallelic markers, three possible genotypes are available, the homozygous wild type (w ), the
heterozygous type (h) and the homozygous variant type (v ). Thus, the contingency tables
have the dimensions 3 × 3. Each cell in a table reﬂects the number of samples of either cases
(aﬀected subjects) or controls (unaﬀected subjects) which carry the respective combination of
genetic information at the corresponding pair of markers. For example, the entry A01 of the
aﬀected-subjects matrix generated from a pair (x, y) of genetic markers indicates the number
of cases in the input dataset, which carry the homozygous wild genotype at marker x and the
heterozygous type at marker y. The structure of contingency tables for cases and controls is
depicted in Fig. 1.
With the information in the aﬀected-subjects and unaﬀected-subjects matrices an HLOmatrix R is generated for each pair of markers. Again, this matrix has dimensions 3 × 3. In
each cell it contains the category in which the corresponding genotype combination can be
classiﬁed, i.e. H for a high risk that a person that carries these genotypes may be aﬀected, L for
a low risk, and O to indicate the absence of evidence for the aﬀection status. The categorization
is done following the strategy in [21].Let Apq be a cell of the aﬀected-subjects matrix and Upq a
cell of the unaﬀected-subjects matrix, and let NA and NU be the total number of aﬀected and
unaﬀected samples respectively.
Firstly, it is tested if Apq + Upq < 10 or NA + NU − Apq − Upq < 10. In this case, there is
not enough data to conclude a risk factor and hence, Rpq is set to O. Otherwise, a test statistic
641

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

Gundlach et al.

is calculated as follows with a = Apq , b = Upq , c = NA − Apq and d = NU − Upq .
T =

(ad − bc)2 (a + b + c + d)
(a + b)(c + d)(b + d)(a + c)

(1)

This test statistic follows a χ2 -distribution, and thus, if the signiﬁcance falls below a threshold of 0.1 there is again no evidence for the risk status and Rpq will be set to O as well. In
the opposite event, Rpq is set to H indicating a high risk if (ad − bc) > 0, and it is set to L if
(ad − bc) ≤ 0.

2.2

Test Statistic

In the second step, the aﬀected-subjects and unaﬀected-subject matrices together with the
HLO-Matrix are used to calculate a test statistic T0,j for each pairwise combination of markers.
Only the best n values are sorted and kept in a Real Data vector T0,1 · · · T0,n such that
T0,1 ≥ T0,2 ≥ · · · ≥ T0,n . n is set to 1,000 per default.
The implemented test statistic T0,j is the maximum of two χ2 -tests with one degree of
freedom. The ﬁrst one H/LO calculates the association between the trait and being a member
of the H category rather than the L or O category, while the second one L/HO computes
the association between the trait and the belonging to the L category rather than the H or O
category. Both tests are exactly implemented as in Eq. 1, with the following redeﬁnition of the
values a, b, c, and d. a states the number of aﬀected samples in the H category while b states the
number of unaﬀected samples in that category, c and d are respectively the number of aﬀected
and unaﬀected samples belonging to one of the other categories. This applies respectively for
the second test with a and b denoting the number of aﬀected and unaﬀected samples in the L
category.

2.3

maxT Multiple Testing

In order to obtain the p-values for the interaction eﬀect according to the calculated test statistic,
multiple correlated tests are performed by applying the maxT method [23]. The number of
iterations B (i.e. the number of tests) can be user-deﬁned while a higher number of iterations
leads to more precise p-values. B is set to 1,000 iterations per default. maxT is implemented
based on the optimized method presented by van Lishout et al. in [21].
After calculating the n-best test statistics in the Real Data vector in the previous step,
B random permutations of the trait are generated. Afterwards, the test statistics Ti,j are
calculated according to Sect. 2.2 for each permutation i. Thereby, the test statistics are not
sorted, but forced into the order of the Real Data vector. The vectors Ti,1 · · · Ti,n for 1 ≤ i ≤ n
are referred to as Permutationi vectors. In order to reduce type II errors, the monotonicity of
each permutation vector is enforced, i.e. Ti,n is replaced by the maximum of all test statistics
Ti,n+1 , . . . , Ti,m with m being the number of all possible marker pairs. Furthermore, for each
n > j ≥ 1: Ti,j is replaced by Ti,j+1 if Ti,j < Ti,j+1 .
The p-values pj can now simply be obtained by counting the number of permutations where
Ti,j ≥ T0,j and normalized by the number of iterations.
pj =

|Sj |
B+1

with Sj = {i | Ti,j ≥ T0,j , 0 ≤ i ≤ B}

(2)

The monotonicity of the p-value vector is enforced as well in order to keep type I errors low.
Thus, pj+1 is replaced by pj if pj+1 < pj .
642

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

3

Gundlach et al.

Implementation Details

The basic structure of our design is a systolic chain architecture of processing elements (PEs)
for the creation and transfer of contingency tables adapted from [24] and [5]. We modiﬁed
the PEs and divided the chain structure as described in Sect 3.1 to ﬁt our requirements. The
calculations and the program ﬂow is based on MB-MDR 3.0.3 presented in [21].
Six main tasks are executed in multiple iterations on multiple FPGA workers controlled
by one host. Firstly, genotypes from the dataset are collected for each marker in genotype
vectors, which are then distributed to each worker FPGA. The distribution exactly follows the
one described in [5]. After each FPGA has stored its part of the genotype vectors in its local
memory, the data is streamed vector-wise from the memory unit through the systolic chain of
PEs that continuously create the respective contingency tables for cases and controls. As soon
as tables are ready, they are forwarded to a pipelined analysis unit that for each pair of case
and control tables computes the test statistic as the maximum of two χ2 -tests according to
Eq. 1. This process is described in Sect. 3.2. The n best test results (n =1,000 per default) are
stored in local memory and eventually returned to the host in the ﬁrst iteration. In all other
iterations the previously stored results are updated and forced into monotonicity as described
in Sect. 3.3. After the last iteration the p-values for the n best results are calculated on the
host system.

3.1

Creating and Transferring Contingency Tables

Our systolic chain architecture of processing elements, as it is illustrated in Fig. 2, requires the
genotype vectors to be sorted by cases and controls, which is already done intuitively while
parsing the input data. Each PE contains nine counters, one for each entry of a contingency
table, and a local memory that is able to store a complete genotype vector for one marker.
Genotypes are streamed vector by vector with two genotypes in one clock cycle. For each PE
in the chain its ﬁrst genotype vector from the stream is stored in its local memory and not
forwarded to the next PE, this is only done for all following vectors. During the streaming
process, the PEs compare the genotypes from the stream to their locally stored ones and increment the corresponding counters of the contingency table according to the observed genotype
combination. After the cases of one genotype vector are complete, all PEs have ﬁnished contingency tables for the aﬀected subjects, which are immediately forwarded through the chain
by a transport bus to a table buﬀer. The same applies respectively for the unaﬀected subjects
(controls) afterwards. As soon as a pair of tables is ready in the buﬀer, it is forwarded to the
analysis unit. For more details we refer to [24] and [5].
To prevent the transport bus from overloading, requirements to the input dataset have to
be made. The bus is able to transfer one of the nine counter values of a table in one clock cycle.
Meanwhile, two genotypes of input data can be streamed. Thus, in order to ensure the table
has been transferred before the next one is ready, the following condition has to be met.
min{no. cases, no. ctrls} ≥ genotypes/cycle × no. counters × no. PEs

(3)

For several datasets this condition might quickly become too restrictive. Thus, we introduced
the possibility to divide the chain of processing elements into multiple parts each featuring its
own analysis unit, as it is shown in Fig. 2. For example, in Sect. 4 we evaluate a design with
two chains and 66 PEs per chain. According to Eq. 3 the design is able to analyze datasets
with at least 1,188 cases and controls.
643

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs
PE 0

PE 1

PE k-1

C.Table

Transport
PE k

Transport
PE k+1

Transport

2-thr

PE 2k-1

Transport

2-Test

Transport

C.Table

Case/Ctrl Table Buer

C.Table

SNP Buer

Transport

SNP Buer

SNP Buer

C.Table

ctable
stream

Filter and Sort Unit

c.table

2-Test

C.Table

Case/Ctrl Table Buer

genotype
stream

SNP Buer

SNP Buer

SNP Buer

SNP Reader

genotype
pair

C.Table

Gundlach et al.

2-thr

to next chain

Figure 2: Systolic chain structure of processing elements with multiple chains.

3.2

Chi-Squared Pipeline

The generation of the HLO-matrix for each pair of markers requires the application of a χ2 test with one degree of freedom to each combination of genotypes, which is computed by one
χ2 -test unit sequentially behind the table buﬀer. The parameters for each test are taken from
the contingency tables for the aﬀected and unaﬀected subjects according to Eq. 1 in Sect. 2.1.
The implementation of the test is fully pipelined such that a computation can start within
every clock cycle. Afterwards, the HLO-matrix is generated by deciding whether each genotype
combination belongs to the high-risk (H ), low-risk (L) or no-evidence (O) category.
The test statistic is then computed via the maximum of two further χ2 -tests H/LO and
L/HO according to Sect. 2.2. The required parameters are generated during the creation of the
HLO-matrix by the following summations.
aH/LO =

{Apq | (ad − bc) > 0}

aL/HO =

{Apq | (ad − bc) ≤ 0}

(4)

bH/LO =

{Upq | (ad − bc) > 0}

bL/HO =

{Upq | (ad − bc) ≤ 0}

(5)

cH/LO = NA − aH/LO
dH/LO = NU − bH/LO

cL/HO = NA − aL/HO
dL/HO = NU − bL/HO

(6)
(7)

The computation of the tests are started in two consecutive clock cycles in a second fully
pipelined χ2 -test unit. Thus, the two results are available after the pipeline latency in two
consecutive clock cycles as well, and the maximum of both tests can directly be determined after
a simple comparison. The χ2 -test chain with both test units and the HLO-matrix generation
is illustrated in Fig. 3.
644

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

Gundlach et al.

(ad-bc)
aHLO

(a+b)

a
b

2

bHLO
(c+d)

2-thr

2

cHLO

HLO

c
d

max

2-max

dHLO

NA NU

2-test

2-test

Figure 3: Scheme for the χ2 -test chain with two pipelined χ2 -test units. Note, that most
registers have been omitted for readability.

3.3

Sorting Results and Shuﬄing

In order to store the n best results of the ﬁrst iteration, we decided to use a simple insertion
sort with linear runtime in local FPGA memory. Since we have to prepare for results arriving
in consecutive clock cycles, we immediately compare the results to the current smallest element
in the n-best list and keep only those results with a higher test value in a preliminary buﬀer
before ﬁnally inserting it into the list.
We keep the n best test values together with the corresponding marker pair identiﬁers.
However, to prepare for the upcoming permutation iterations the same identiﬁers are stored
again in a separate list sorted in the ascending order of their generation. This way, the test
statistics could easily be updated at the end of each iteration according to Sect. 2.2 as the
marker pairs are evaluated in the same order in each iteration. Furthermore, the maximum
value of all pairs that are not in the n-best list must be stored to enforce the monotonicity of
the vector correctly.
Since all worker FPGAs compute their own local n-best list, the results have to be merged
on the host, where the p-values are calculated as well. Furthermore, the host is responsible to
provide the permuted data to the FPGAs at the beginning of each iteration. The permutation
for the next iteration is therefore prepared on the host concurrently to the running analysis of
the current iteration on the FPGAs. Each permutation randomly swaps the genotype data of a
number of case and control samples such that some samples that appeared as a case now act as
control and vice versa. Note, that swapping the samples does not change the amount of cases
and controls.

4

Performance Evaluation

The evaluation of our FPGA-based MB-MDR implementation targets a SciEngines RIVYERA
S6-LX150 machine [18] equipped with 128 Xilinx Spartan6 LX150 low-cost FPGAs. The builtin host system features an Intel Core i7-950 quad-core processor at 3GHz and 12GB DRAM,
and runs a Linux OS. The FPGA resources allowed us to implement 132 processing elements
distributed over two chains and clocked at 125MHz on each FPGA. We compared the performance of our design to the results of MB-MDR 3.0.3 in [21] and MB-MDR 4.2.2 in [20]. The
test systems were respectively a 160-core computer cluster consisting of 40 AMD Opteron 2352
645

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

# SNPs
10,000
100,000
1,000,000

MB-MDR 3.0.3
sequential
5d13h
∼ 1.5y*
-

MB-MDR 4.2.2
sequential
52m15s
2d16h35m
∼ 270d*

MB-MDR 3.0.3
160 cores
1h03m
4d09h
1y73d*

MB-MDR 4.2.2
256 cores
1m05s
22m15s
1d01h12m

Gundlach et al.
128 Spartan6
FPGA/54 PEs
10m43s
1h01m49s
3d09h23m

Table 1: Runtimes of FPGA-based MB-MDR with 54 PEs per FPGA for datasets with 1,000
samples and a varying number of markers compared to MB-MDR 3.0.3 on a 160-core Opteron
cluster from [21] and to MB-MDR 4.2.2 on a 256-core Xeon cluster from [20]. Values marked
with an asterisk (*) are linearly extrapolated.

# SNPs
10,000
100,000
1,000,000

MB-MDR 3.0.3
sequential
∼ 19d
∼ 3.75y
-

MB-MDR 4.2.2
sequential
2h11m
6d17h
1y310d

MB-MDR 3.0.3
160 cores
2h38m
10d23h
∼ 3y

MB-MDR 4.2.2
256 cores
2m43s
55m38s
2d15h

128 Spartan6
FPGA/132 PEs
9m30s
1h08m28s
3d12h20m

Table 2: Runtimes of FPGA-based MB-MDR with 132 PEs per FPGA for datasets with 2,500
samples and a varying number of markers compared to linearly extrapolated results of MBMDR 3.0.3 on a 160-core Opteron cluster from [21] and MB-MDR 4.2.2 on a 256-core Xeon
cluster from [20].

quad-core CPUs at 2.1 GHz, and a 256-core computer cluster consisting of 64 Intel Xeon L5420
quad-core CPUs running at 2.5 GHz.
For a direct comparison, we generated several SNP datasets with 1,000 samples distributed
over 500 cases and 500 controls, and a varying number of markers between 10,000 and 1,000,000
SNPs. Since our design is intentionally designed to target larger datasets, it was not able to
use its full resources on such a low number of samples, but had to run with only 54 processing
elements per FPGA for these tests. Therefore, in order to measure its full performance, we
generated similar datasets with an increased number of 2,500 samples (1,250 cases and 1,250
controls). The runtimes are listed in Tables 1 and 2 including results for a sequential run on
only one core.
In Table 3 we also investigated a dataset with about 500,000 genetic markers at 5,000
samples distributed over 2,000 cases and 3,000 controls such as those provided by the Wellcome
Trust Case Control Consortium (WTCCC) [19]. This example was used to compare the energy
Method
MB-MDR 3.0.3 (160 cores)
MB-MDR 4.2.2 (256 cores)
128 Spartan6 (FPGA/132 PEs)

Runtime
∼ 1.5y
1d05h52m
1d19h08m

System power
40 × 75W = 3,000W
64 × 50W = 3,200W
468W

Energy consumption
39,420.0 kWh
102.4 kWh
20.2 kWh

Table 3: Runtimes and energy consumption of FPGA-based MB-MDR for a WTCCC-like
dataset with about 500,000 markers and 5,000 samples compared to MB-MDR 3.0.3 on a 160core Opteron cluster and to MB-MDR 4.2.2 on a 256-core Xeon cluster. Runtimes for software
MB-MDR are interpolated via a regression model from the results in [21] and [20] respectively.

646

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

Gundlach et al.

consumption of the test systems as well. The power consumption of the FPGA-system has
been measured directly with the internal power supply via IPMI interface, and the power of
the other systems has been calculated according to the CPU speciﬁcations alone.
The results show, that the FPGA-system clearly outperforms the former version of MB-MDR
with the exact calculation of the maxT method although it was run on an Opteron cluster system
with 160 cores. The speedup is more than 300 on the dataset with 1 million markers and 2,500
samples. However, for the datasets with only 1,000 samples, we still outperform the Opteron
cluster with a speedup of about 130, but the Xeon cluster system with 256-cores running the
newer version of MB-MDR is about three to ten times faster than our system. One reason
is that the maxT maximum approximation in this version provides a signiﬁcant speedup over
the former version, and another reason is that the FPGAs are forced to use only 54 processing
elements due to the low number of samples. Using our full performance with 132 PEs on the
datasets with 2,500 samples and the WTCCC-like dataset, we are almost able to catch up
with the new version on the Xeon cluster while gaining a speedup of more than 140 to 190
when compared to the sequential execution on the datasets with 100,000 and 1 million markers
respectively. We ﬁnd this a signiﬁcant result since it shows that a number of low-cost FPGAs
is able to keep pace with a CPU cluster employing twice as many computing cores running
an approximative computation while our calculation is exact according to the former version
of MB-MDR. Furthermore, the measured energy consumption of the FPGA system is ﬁve
times lower than the energy required of the Xeon CPUs alone without considering peripherals,
infrastructure, cooling etc.

5

Conclusion

The statistical detection of gene-gene interactions requires a suitable statistical test and a proper
calculation of the signiﬁcance of the test results as well. This is generally acquired by calculating
the p-value of a test result using multiple testing correction methods. In addition to previous
publications [5, 12, 24] that have proven FPGAs to be powerful on detecting gene interaction
candidates with tools such as BOOST [22] or iLOCi [16], this paper shows that multiple testing
correction methods for gene interaction detection can be extremely powerful on FPGAs as well.
We demonstrated this by implementing MB-MDR with maxT multiple testing correction on
128 Xilinx Spartan6 LX150 low-cost FPGAs. Our design was based on the fast maxT algorithm
presented in [21] and implemented in MB-MDR 3.0.3. The performance evaluation revealed a
magniﬁcent speedup of more than 300 when compared to this version of MB-MDR running on
a 160-core Opteron CPU cluster system. Furthermore, the presented implementation is able to
keep up with a 256-core Xeon CPU cluster running the newer version MB-MDR 4.2.2 [20] that
signiﬁcantly reduces its computation time by approximating the maximum calculation in the
maxT iterations. However, the speedup compared to the sequential execution of MB-MDR 4.2.2
is still up to 190, and the energy consumption compared to the Xeon cluster is reduced to at
least one ﬁfth.
For future work investigations have already been started to analyze the abilities of our FPGA
system to reduce the runtime by maximum approximation with the gammaMaxT method as in
MB-MDR 4.2.2 [20]. As stated in that publication the slight loss in precision is acceptable if the
runtime can be signiﬁcantly reduced. This is achieved by reducing the amount of association
tests to compute the maximum Tmax of all test statistics that are less than the n best values.
Despite that MB-MDR 3.0.3 only computes adjusted p-values for the n best test statistics,
it still computes the total amount of m association tests to determine Tmax . Therefore, the
further development of MB-MDR 4.2.2 includes the estimation of Tmax on the basis of only
647

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

Gundlach et al.

106 test statistics, which is far less than e.g. ≈ 5 ∗ 109 test statistics needed for 100, 000 SNPs
in MB-MDR 3.0.3. In order to map this easily onto FPGAs the estimation of Tmax could be
done by the host, while the computation of the association tests would be done by the FPGAs
as before. The main bottleneck would then be the eﬃcient communication between the host
and the FPGA workers, as sending the genotypes from the dataset to the FPGA workers and
returning the test statistics to the host would cost more time than the association tests itself.
To avoid this bottleneck the permutation of the dataset as well as the estimation of Tmax would
have to be carried out by the FPGA workers as well. This would allow the FPGA workers to
independently work through the iterations without waiting for the host. Hence, the p-values
would still be computed by the host, but would not stall the computation of the association
tests.
Thus, by investigating these approaches we look forward to be able to outperform a modern
CPU cluster system with a future version of our FPGA-based MB-MDR, and we expect another
fundamental speedup by porting the design to more recent FPGA technology such as Xilinx
7-series and UltraScale FPGAs.

References
[1] M. L. Calle, V. Urrea, N. Malats, and K. van Steen. MB-MDR: Model-Based Multifactor Dimension Reduction for detecting interactions in high-dimensional genomic data. Ann. Hum. Genet.,
75, Jan. 2007.
[2] T. Cattaert, M. L. Calle, S. M. Dudek, et al. Model-Based Multifactor Dimensionality Reduction
for detecting epistasis in case–control data in the presence of noise. Ann. Hum. Genet., 75(1):78–89,
2011.
[3] O. J. Dunn. Multiple Comparisons Among Means. J. Am. Stat. Assoc., 56(293):52–64, Mar. 1961.
[4] J. Gonz´
alez-Dom´ınguez and B. Schmidt. GPU-accelerated exhaustive search for third-order
epistatic interactions in casae-control studies. Journal of Computational Science, 8:93–100, 2015.
[5] J. Gonz´
alez-Dom´ınguez, L. Wienbrandt, J. C. K¨
assens, et al. Parallelizing Epistasis Detection in
GWAS on FPGA and GPU-accelerated Computing Systems. IEEE/ACM Trans. Comput. Biol.
Bioinf., 12:982–994, Jan. 2015.
[6] B. Goudey, D. Rawlinson, Q. Wang, et al. GWIS: Model-free, Fast and Exhaustive Search for
Epistatic Interactions in Case-Control GWAS. Lorne Genome 2013, February 2013.
[7] E. S. Gusareva and K. van Steen. Practical aspects of genome-wide asociation interaction analysis.
Hum. Genet., 133:1343–1358, Nov. 2014.
[8] A. Gyenesei, J. Moody, C. A. Semple, et al. High-throughput analysis of epistasis in genome-wide
association studies with BiForce. Bioinformatics, 28(15):1957–1964, May 2012.
[9] T. H. Hamza, H. Chen, E. M. Hill-Burns, et al. Genome-wide gene-environment study identiﬁes
glutamate receptor gene grin2a as a parkinson’s disease modiﬁer gene via interaction with coﬀee.
PLoS Genet, 7(8):e1002237, 2011.
[10] G. Hemani, A. Theocharidis, W. Wei, et al. EpiGPU: exhaustive pairwise epistasis scans parallelized on consumer level graphics cards. Bioinformatics, 27(11):1462–1465, Apr. 2011.
[11] X. Hu, Q. Liu, Z. Zhang, et al. SHEsisEpi, a GPU-enhanced genome-wide SNP-SNP interaction
scanning algorithm, eﬃciently reveals the risk genetic epistasis in bipolar disorder. Cell Res.,
20:854–857, May 2010.
[12] J. C. K¨
assens, L. Wienbrandt, J. Gonz´
alez-Dom´ınguez, et al. High-Speed Exhaustive 3-locus
Interaction Epistasis Analysis on FPGAs. Journal of Computational Science, 9:131–136, 2015.
[13] R. J. Klein, C. Zeiss, E. Y. Chew, et al. Complement factor H polymorphism in age-related
macular degeneration. Science (New York, N.Y.), 308(5720):385–9, Apr. 2005.

648

Genome-Wide Association Interaction Studies with MB-MDR and maxT on FPGAs

Gundlach et al.

[14] B. Maher. Personal Genomes: the Case of the Missing Heritability. Nature, 456(7218):18–21,
2008.
[15] J. H. Moore, F. W. Asselbergs, and S. M. Williams. Bioinformatics Challenges for Genome-Wide
Association Studies. Bioinformatics, 26(4):445–455, 2010.
[16] J. Piriyapongsa, C. Ngamphiw, A. Intarapanich, et al. iLOCi: a SNP interaction prioritization
technique for detecting epistasis in genome-wide association studies. BMC Genomics, 13(Suppl
7):S2+, 2012.
[17] M. D. Ritchie, L. W. Hahn, N. Roodi, et al. Multifactor-Dimensionality Reduction Reveals HighOrder Interactions among Estrogen-Metabolism Genes in Sporadic Breast Cancer. Am. J. Hum.
Genet., 69(1):138–147, May 2001.
[18] SciEngines GmbH. http://www.sciengines.com.
[19] The Wellcome Trust Case Control Consortium. Genome-wide association study of 14,000 cases of
seven common diseases and 3,000 shared controls. Nature, 447(7145):661–78, June 2007.
[20] F. van Lishout, F. Gadaleta, J. H. Moore, et al. gammaMAXT: a fast multiple-testing correction
algorithm. BioData Mining, 8(36), Nov. 2015.
[21] F. van Lishout, J. J. M. Mahachie, E. S. Gusareva, et al. An eﬃcient algorithm to perform multiple
testing in epistasis screening. BMC Bioinf., 14(1):138, 2013.
[22] X. Wan, C. Yang, Q. Yang, et al. BOOST: A Fast Approach to Detecting Gene-Gene Interactions
in Genome-wide Case-Control Studies. Am. J. Hum. Genet., 87(3):325–340, 2010.
[23] P. H. Westfall and S. S. Young. Resampling-Based Multiple Testing: Examples and Methods for
p-Value Adjustment. John Wiley & Sons, 1 edition, Jan. 1993.
[24] L. Wienbrandt, J. C. K¨
assens, J. Gonz´
alez-Dom´ınguez, et al. FPGA-based Acceleration of Detecting Statistical Epistasis in GWAS. Procedia Computer Science, 29:220–230, 2014.
[25] L. S. Yung, C. Yang, X. Wan, et al. GBOOST: a GPU-based tool for detecting gene-gene interactions in genome-wide case control studies. Bioinformatics, 27(9):1309–1310, 2011.
[26] X. Zhang, S. Huang, F. Zou, et al. TEAM: eﬃcient two-locus epistasis tests in human genome-wide
association study. Bioinformatics, 26(12):i217–i227, July 2010.

649

