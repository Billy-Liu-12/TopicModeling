Procedia Computer Science
Volume 80, 2016, Pages 1244–1254
ICCS 2016. The International Conference on Computational
Science

Multiscale simulation of organic electronics via smart
scheduling of quantum mechanics computations
Pascal Friederich1 , Timo Strunk2 , Wolfgang Wenzel1 , and Ivan Kondov3
1

Karlsruhe Institute of Technology, Institute of Nanotechnology, Hermann-von-Helmholtz-Platz 1,
76344 Eggenstein-Leopoldshafen, Germany
{pascal.friederich,wolfgang.wenzel}@kit.edu
2
Nanomatch GmbH, Hermann-von-Helmholtz-Platz 1, 76344 Eggenstein-Leopoldshafen, Germany
timo.strunk@nanomatch.com
3
Karlsruhe Institute of Technology, Steinbuch Centre for Computing, Hermann-von-Helmholtz-Platz
1, 76344 Eggenstein-Leopoldshafen, Germany
ivan.kondov@kit.edu

Abstract
Simulation of charge transport in disordered organic materials requires a huge number of quantum mechanical calculations and becomes particularly challenging when the polaron eﬀect is
explicitly included, i.e. the inﬂuence of the electrostatic environment of the molecules on the
energy disorder. The polaron model gives rise to tasks of varying resource footprints and to
dependencies between a large number of tasks. We solve the resulting tightly coupled multiscale
model using the quantum patch approach by accounting for the dependencies arising from the
self-consistency loops for constructing the workﬂow and applying a speciﬁc scheduling strategy
for diﬀerent task types. Our implementation of the method fully exploits the parallelism of the
multiscale model alleviating the eﬀects of load imbalance and dependencies so that it can be
eﬃciently used on high performance computing machines.
Keywords: multiscale modeling, organic electronics, density functional theory, computational nanoscience, computational materials science

1

Introduction

Organic materials have many novel and promising applications, for example for organic light
emitting diodes (OLEDs), organic ﬁeld-eﬀect transistors and organic photovoltaics. Currently,
development eﬀorts are focused mainly on improvement of performance and durability, as well
as on reduction of production costs. The conventional way to develop these materials is by
high-throughput screening of possible candidates including the synthesis, fabrication and characterization of prototypes. An alternative or at least an eﬀective supplement to this approach
is oﬀered by modeling and computer simulation, which not only provide deeper understanding
1244

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.495

Multiscale simulation of organic electronics . . .

P. Friederich et al.

Figure 1: Multiscale model hierarchy for charge transport simulation in amorphous aluminiumtris(8-hydroxychinolin). For the calculation of the site energies in the system, each molecule
has to be charged and the polarization of the environment has to be evaluated. For that, we use
a core region of about 5 nm in diameter. The outer region of 12 nm is used for convergence of
the electrostatic background. For good statistics, this procedure has to be repeated for O(1000)
hopping sites.
of the non-trivial relationships between material structure and properties on diﬀerent time and
length scales, but also accelerate development and reduce development costs.
In a computer simulation, properties of numerous organic materials can be virtually explored. Based on the result, material composition, morphology and manufacturing processes
can be systematically optimized. For instance, to compute charge transport properties, e.g.
charge mobilities, this can be achieved eﬃciently by multiscale modeling, i.e. by integrating
submodels on diﬀerent length scales to investigate charge transport in thin crystalline or amorphous organic semiconductors ﬁlms. In order to include the important disorder eﬀects, the
underlying quantum mechanical (QM) submodel, in particular the density functional theory
(DFT), has to be applied in many pre-selected locations of the material that are called charge
hopping sites each consisting of one single molecule. This gives rise to many thousands single
QM computations which, although in total computationally highly demanding, can be performed in arbitrary order, i.e. would represent an embarrassingly parallel problem.
DFT is currently the most commonly employed QM method and implemented in a number
of eﬃciently parallelized electronic structure codes. However, the computational scaling of
a single DFT calculation applied to amorphous organic materials is naturally limited by the
molecule size. We have previously found that a single DFT calculation of the electronic ground
state of the 107-atom pFFA molecule can scale up to 1024 cores on a BlueGene/Q taking about
15 minutes employing the NWChem code [1].
The electrostatic eﬀect of the local environment within a polaron model has turned out to be
essential for the calculation of electronic properties such as the charge-carrier mobility [2, 3, 4].
This is because the energy levels of each molecule depend on the local electrostatic environment
1245

Multiscale simulation of organic electronics . . .

P. Friederich et al.

yielding a signiﬁcant contribution to the energy disorder. Because electrostatic interactions are
eﬀective also on long length scales (≥5 nm) compared to the scale of single molecules ( 1 nm),
including the polaron model for charge transport in organic materials leads to computational
issues, causing a tightly-coupled multiscale problem: i) Dependencies exist between a number
of QM computations for diﬀerent molecules within a core region shown in Figure 1, and ii)
these QM computations have to be iterated until the charges induced by each molecule in its
environment and the electronic state of the molecule become self-consistent, i.e. numerically
converge.
After every iteration cycle, data is exchanged for all molecules of the core region to update
the electrostatic environment of each site. On the one hand, the relatively short execution times
and the low parallelism of individual QM computations mean that scheduling all computing
steps as single jobs is not the optimal exploitation strategy for a high performance computing
(HPC) system. Moreover, some tasks have interdependencies and task run times can vary signiﬁcantly meaning that such tasks cannot be scheduled asynchronously in arbitrary order, while
task scheduling satisfying all dependencies may lead to severe load imbalance. On the other
hand, deployment on high-throughput systems in distributed environments, such as computing
clouds and grids, is ineﬃcient because of the signiﬁcant number, frequency and volume of data
transfers. The idle times due to scheduling and data staging of O(106 ) single jobs cause that the
simulation is completed only after very long time, making the approach impractical. We note
that similar issues have been recently encountered in other domains of computational science,
for examples in astroparticle physics [5, 6] and an HPC strategy has been adopted therein as
well.
In this contribution, we present a scale-out computational strategy for a tightly coupled
multiscale model for simulation of charge transport in organic electronics, called the quantum
patch method [2]. The model consists of a core region with 500 molecules acting as charge
hopping sites and an embedding region, containing about 10,000 electrostatically interacting
molecules (see Figure 1). The polaron eﬀect that is explicitly included in the QM sub-model in
a self-consistent manner not only increases the total number of QM evaluations (of the order
of 105 -106 ) but also introduces dependencies and diﬀerent types of QM computations. The
concept is outlined in Section 3. Furthermore, in Section 4 we provide an overview of our
implementation as part of the software package Shredder, that has been already successfully
used in a number of studies [2, 4, 7], and eventually assess the scalability of the implemented
model.

2

Related work

Previously, workﬂow frameworks have been employed for multiscale modeling of organic light
emitting diodes [8, 9, 10, 11]. These approaches make use of the fact that without electrostatic
polarization eﬀects the model turns into a loosely coupled multiscale model where characteristic
quantities on diﬀerent scales (e.g. individual energies and electronic couplings on the molecular
versus energy disorder and charge mobilities on the mesoscale) can be computed in two consecutive workﬂow steps. Therefore it was possible to distribute the simulation on computers at
many diﬀerent sites using for example the UNICORE middleware [8, 9, 10].
Many other eﬀorts exist in the domain of materials modeling which focus on integrating
diﬀerent codes/models in one platform or workﬂow, e.g. in Espresso++ [12], VOTCA [13],
AiiDA [14], Pymatgen [15] in combination with the FireWorks workﬂow engine [16], and the
Atomic Simulation Environment (ASE) [17]. All these frameworks solve various issues related
to task and workﬂow management, data transformations between workﬂow steps and data
1246

Multiscale simulation of organic electronics . . .

P. Friederich et al.

analysis. However, while they are suitable for implementing the quantum patch method, these
frameworks do not include the speciﬁc scheduling and parallelization strategy discussed in this
paper.
In other domains, tightly coupled multiscale models have been successfully tackled using
frameworks such as the MUSCLE computing environment [18, 19] combined with a domain
speciﬁc Multiscale Modeling Language (MML) [20]. In MML [20], the multiscale model architecture is analyzed using directed acyclic task graphs, that facilitate validity checking and
task scheduling, and a formal multiscale model and its pertinent computational architecture are
speciﬁed in a modular fashion. In future work, the MML and existing tools to process MML
(e.g. for editing, code generation and mapping) can be evaluated and adopted for modeling
organic electronics.

3
3.1

Concept and framework architecture
Handling workload: Asynchronous QM farm

The master process reads in a list containing all tasks of the workﬂow. Each task includes
the preparation, execution and analysis of one single QM calculation for one single molecule in
a speciﬁed charged or excited state including embedding. A task list contains O(10) strictly
ordered blocks where each block consists of O(105 ) tasks.
There are two types of tasks: Type-1 tasks as depicted in Figure 2 include the calculation
of central molecules which are in charged and/or excited state. In these tasks quantum chemistry methods going beyond DFT might be necessary. For example, the time-dependent DFT
(TDDFT) or post-Hartree–Fock methods are necessary for excited electronic states. The Type-1
tasks require further parallelization, e.g. via Message Passing Interface (MPI) or OpenMP, on
several processor cores each, because of their high computational (duration up to one day on
one core) and memory demands (more than the memory pertinent to a processor core). Typically between seven and ten subsequent iteration steps N are required until convergence and
therefore Type-1 tasks are critical for the duration of the overall simulation because at least N
(one per iteration step) of such tasks have to be performed consecutively.
For each Type-1 task, O(102 ) shorter Type-2 tasks have to be performed for the evaluation of
the polarization eﬀects in the environment of the central charged and/or excited molecule. These
Type-2 tasks can be typically executed without further parallelization (i.e. on one processor core
each) in 5 up to 20 minutes, depending on the size of the molecule.
Choosing an optimal degree of parallelization and appropriate scheduling strategies for the
Type-1 tasks, it is possible to achieve overall parallel eﬃciency of approximately 100%. To this
end, the total number of cores has to be a multiple of the degree of parallelization of the Type-1
tasks. If now all Type-1 tasks are scheduled at the beginning of each block, the load imbalance
due to the Type-1 calculations is alleviated to a great extent by scheduling the much shorter
Type-2 tasks at the end. We note that Type-2 tasks do not have to wait for Type-1 tasks of
the same iteration to ﬁnish so that they are executed as soon as computing resources are freed
(see Figure 2).
Typical amorphous organic materials require the calculation of the excited/charged states
of about 200 molecules. A converged polarization shell contains ∼100 molecules leading to at
least 20,000 tasks per iteration block. For molecules in excited electronic state, the properties
are computed per excited state leading to several tasks for each relevant excited state.
1247

Multiscale simulation of organic electronics . . .

P. Friederich et al.

Figure 2: Execution and data ﬂow diagram for a group of tasks for one central (charged or
excited) molecule (*) embedded into a cluster of three neutral molecules which become polarized.
Type-1 and Type-2 tasks, which can be executed in parallel, are arranged vertically. Type-1
tasks within each block (in this example only one per block) are scheduled at the beginning of
the block and then the Type-2 tasks are distributed on the remaining free computing elements.
The dashed boxes delimit the blocks of tasks that must be executed consecutively. Arrows
indicate data ﬂow between diﬀerent tasks.

3.2

Data management

The data generated in O(105 ) QM calculations have to be managed with great care in order
to reduce the load of the cluster ﬁle system. The main fraction of data is written by the QM
code itself. A single-point calculation in Turbomole generates a ﬁle containing the molecular
orbitals with a size of typically 10-100 MB. This ﬁle is overwritten 5-20 times during a QM
calculation and is needed in some cases after the QM calculation. Additionally, several other
smaller ﬁles in the kilobyte range containing input/output (I/O) data are generated. Only
a very small amount of data is extracted from these ﬁles and stored in an output directory.
Mostly, this includes energies and partial charges in the very low kilobyte range. Therefore,
we use temporary local directories for the QM tasks and store only the extracted data on the
cluster ﬁle system. This procedure reduces the I/O data volume to the cluster ﬁle system by
90%, if the ﬁnal molecular orbitals are needed for further analysis, or by even more than 99%
otherwise. The directory structure on the cluster ﬁle system is designed to use subdirectories
for each calculation in order to avoid contention of metadata on the cluster ﬁle system.
Using the converged molecular orbitals from the previous iteration step as initial guess
input allows speeding up the QM calculations remaining in the loop by factors of 2 up to 10.
This of course requires to copy the converged molecular orbitals to the cluster ﬁle system to
make them accessible in the next iteration step. A perfect solution to this problem would
1248

Multiscale simulation of organic electronics . . .

P. Friederich et al.

be the integration of the QM engine via a direct interface to Shredder. This would allow
to keep the QM data stored in memory or in a database rendering frequent or large ﬁle I/O
operations unnecessary. The realization of this solution is discussed in Section 4.2 in more
detail. More explicitly, a database containing all results such as energies, partial charges and
orbital information in a structured way would be ﬁlled during the calculations. This would
include master-slave communication in order to set up the point-charges environment for the
QM calculations and slave-master communication after each QM calculation in order to ﬁll the
database for the next iteration step.
The second operation which requires a lot of I/O is the import of the molecular morphology.
A typical morphology contains the positions and orientations in space of all molecules. We
employ a compressed archive in which we store each of these molecules separately. This allows
the tasks to extract only the necessary molecules (O(103 )) from the archive without reading
the entire morphology thus reducing the I/O volume. The total number of I/O operations is
unchanged, however, their frequency is limited by the task scheduling events. In fact in none of
the use cases we have observed an essential bottleneck owing to the frequency of morphology
reads. We note that in the limit of very large simulations, i.e. O(>105 ) concurrent tasks, a lowlatency solution has to be considered such as replacing the morphology reads with messages via
the Message Passing Interface (MPI).

4

Implementation in Python

We implemented the asynchronous QM farm in Python as part of the simulation package
Shredder using the mpi4py module [21]. The communication between the master and the
workers is restricted to job instructions from the master to the worker in form of a string
containing the Python module, the name of a function which has to be called by the worker
and the necessary arguments for this function. As this is the minimal information required by
the worker, there is no communication overhead. After completion of a task, the workers send
a ready signal back to the master.
In the remainder of this section we will present two diﬀerent techniques for embedding QM
engines into Shredder and in the next Section 5 we provide performance measurements and
analysis for the ﬁrst approach.

4.1

Embedding QM engines as external executable code

In this approach Shredder calls the QM engine as external binary which is installed on the
system. Therefore, each Shredder task consists of a Python function, which prepares, runs
and analyses one QM calculation of one molecule in a speciﬁc state. The preparation (preprocessing) and analysis (post-processing) parts include reading the required information, the
generation of the input ﬁles needed for the QM calculation, and parsing of the required information from output ﬁles, respectively. The calculation itself is executed using the Python package
subprocess. Here, an additional process is spawned, which runs the speciﬁed QM executable.
After a successful termination of the sub-process, Python continues with the analysis.

4.2

Embedding QM engines as Python modules

If the QM engine is available as a Python library, then one has the following advantages: i)
There is principally no need of pre- and post-processors, as introduced above, because all data
are transfered in Python internally. This accelerates the tasks because ﬁle access operations are
1249

Multiscale simulation of organic electronics . . .

P. Friederich et al.

(a)

(b)

16

5

10

Speedup

Run time, seconds

32

8
4
2

4

1

10

100

200 400 800 1600 3200
Number of cores

100

200 400 800 1600 3200
Number of cores

Figure 3: Parallel scaling (strong scaling, i.e. at nearly constant workload) of Shredder for
a morphology including 10,000 molecules, from which 5000 were self-consistently evaluated,
leading to 65,000 tasks employing the ”Polarization” method in Friederich et al. [2]. Red lines
and black symbols denote the ideal and the measured scalings, respectively. The run times are
the job wall times.

eliminated. ii) There is no need to make system calls to launch the QM engine which is practical
on HPC systems where process forking is not allowed. iii) The parallel execution environment
is managed more easily in the case of parallelized tasks, i.e. when the task and thus the QM
engine run on multiple cores.
Here, we only will discuss on the example of pyQuante how this embedding method is
implemented in Shredder. pyQuante is an open source quantum chemistry package written
in Python [22]. A short benchmark of this code using the benzene molecule in a Hartree–Fock
calculation with the cc-pVDZ basis set yields a diﬀerence in total energy of 7×10−4 Hartree
between Turbomole and pyQuante. The Turbomole calculation takes 17 seconds on one
core of a Intel Core i5-3210M CPU@2.50GHz, while pyQuante takes 952 seconds which is 56
times longer. This test shows that, in principle, embedding of QM engines without process
forking is possible, while in practice, a fast quantum chemistry package with a suitable direct
interface to Python is needed.
To combine the advantages in design, maintenance and performance of Python module
integration, as discussed above, with the high eﬃciency of established QM codes, usually written
in Fortran or C++ (e.g. Turbomole, which is to date mostly used with Shredder, or the
open-source code NWChem), it is necessary to develop direct Python interfaces to these QM
codes. This is possible by using Fortran-to-Python interface generators such as f2py. This
approach has been applied for generic numerics packages, e.g. the BLAS/LAPACK integration
the scipy package.
1250

Multiscale simulation of organic electronics . . .

5

P. Friederich et al.

Scalability assessment

In this section, we present performance measurements and analysis based on the Shredder
package with the QM engine Turbomole embedded as external executable, as introduced in
Section 4.1. The computational scaling proﬁle of the solution with a direct Python module interface would be similar, because we have taken measures to reduce the pre- and post-processing
times (see Section 3.2). A direct comparison is not possible because no direct Python module
interface to Turbomole exists so far.
All measurements have been performed on the HPC system ForHLR-1 at the Steinbuch
Centre for Computing (SCC) which provides more than 10,000 Intel Xeon E5-2670 processor
cores (Ivy Bridge EP), 3.2 GB RAM per core and an InﬁniBand FDR interconnect. Anaconda
2.4.1 (Python 2.7) and parallelization with Open MPI 1.8.5 were used in the measurement runs.
We have tested the QM farm on a system of 10,000 molecules chloro[subphthalocyaninato]boron(III) (SubPC). Here, the polarization method [2] was used which self-consistently evaluated the polarization and energy levels of 5000 molecules within the core region in 10 iterations.
The simulation has been run with slightly diﬀerent morphologies so that the workloads diﬀer
only within 2%. The simulation contains approx. 65,000 tasks and consumes in total 8500 core
hours. So far we have no performance data for smaller and larger problem sizes (weak scaling).
However, we expect that a model with more molecules will generally scale better following the
Gustavson’s law. For a smaller number of molecules in the structure the model will scale worse
because the ratio of Type-1 and Type-2 tasks will become unfavorable to load balance.
We have compared the total simulation run times with increasing the number of parallel
processes, whereby each process was bound to a single core and worked on one task at a
time. The ridft module of the Turbomole [23] package was used as QM engine with no
parallelization. The speedup is deﬁned as S = T100 /T (P ), where T100 and T(P) are the run
times on 100 and on P cores, respectively. We choose T100 as reference for the calculation of
the speedup, because runs with a smaller number of processes require times much longer than
the maximum allowed job run time on the HPC system.
The measured run times and the resulting speedups as depicted in Figure 3 (a) and Figure 3 (b), respectively, conﬁrm nearly perfect scaling of Shredder for up to 800 parallel
processes. For 800 processes the parallel eﬃciency, i.e. S/P , is 92%. Starting from 1600 cores,
the deviation from the ideal speedup becomes considerable with parallel eﬃciency lower than
81%. As it was noted above, the scalability of the QM farm is limited mainly by load imbalance
that becomes signiﬁcant when the number of parallel processes P becomes close to the number of molecules in the core region M . However, already for relatively small ratios P/M (for
P = 1600 it is about one third) there is signiﬁcant deviation from the perfect parallel eﬃciency.
In order to estimate the load imbalance, we consider a simple model for the speedup:
S=

T100
1
,
100 T100 /P + τ

(1)

where τ is an estimate of the time overhead caused by the imbalance. A non-linear ﬁt to the
measured speedups, shown as a blue line in Figure 3 (b), yields an overhead τ = 40 seconds.
This is smaller than the minimum run time of a Type-2 task that can be used as an upper
bound for the overhead for P < M . Therefore, we may conclude that our assumption that the
load imbalance has major impact on the scalability is consistent with the measured speedup.
We note that here we consider the simulation run times on the HPC machine rather than
the total time to solution. Carrying out the input setup, simulation and data analysis, giving
rise to the total time to solution, is not feasible in manual mode because of the huge number
1251

Multiscale simulation of organic electronics . . .

P. Friederich et al.

of diﬀerent operations and individual QM calculations. This is why, the model has never been
applied productively without the implementation in the Shredder package and the time to
solution is not measurable in manual mode. In this paper we focus on scaling-up the computing
performance of the model, which is the bottleneck for this model, and thus on enabling the
deployment on HPC systems and not on the issues of input setup and data analysis.

6

Remarks on accuracy

Generally, a multiscale model is regarded as an approximation of a single-scale model with
highest possible physical scale resolution. In the following we make a remark regarding the
relative accuracy of the results of the quantum patch method.
The multiscale quantum patch approach, either with or without the polaron eﬀects, has
no physically and computationally tractable single-scale alternatives. From the computational
point of view, the QM method scales as ∼ O(A3 ) with the number of atoms A. Thus it is
not feasible doing a full QM calculation for all 10,000 molecules (about a half million atoms)
or rather for the 500 molecules in the core region (about A =25,000 atoms) because of the
extremely high computational costs, even in the case of perfect QM code parallel scaling.
Moreover, the proper physical validation requires that the single-scale model accounts for the
disorder in the amorphous material. This implies that the single-scale QM simulation must be
either performed in the core region many times with diﬀerent disorder realizations or on regions
suﬃciently larger than the core region. This is why the quantum patch multiscale model has
been directly validated against experimental data [2, 4, 7] rather than a high-resolution singlescale model. In this work we have focused on the high-scalability realization of the model on
high performance computing machines.

7

Conclusion

In this contribution, we presented the quantum patch approach to solve a tightly coupled multiscale model for simulation of charge transport in organic electronics. In contrast to previously
used models, the quantum patch method treats the polaron eﬀect explicitly and self-consistently
on the QM level. The polaron treatment gives rise to dependencies between some tasks which,
in addition, belong to two diﬀerent task types with very diﬀerent resource requirements, and
thus represents a considerable computational challenge. The concept is based on embedding the
QM tasks into a workﬂow which accounts for the dependencies arising from the self-consistency
loops and applies sorted scheduling according to the given task types.
Furthermore, we have outlined our implementation as part of the software package
Shredder focusing here on task embedding and scheduling, as well as handling I/O data.
This implementation has been used productively in previous research [2, 4, 7], also on large supercomputers within the PRACE infrastructure. Additionally, we have shown that the concept
and its current implementation can exploit the inherent parallelism of the multiscale model
mitigating negative eﬀects of load imbalance and dependencies.
Future work will focus on integrating Fortran and C++ implementations of the QM engine
via an application programming interface (API). In this course, alternative and additional
frameworks will be evaluated and employed for designing the interface between the Python
gluing code and the QM engine code, written in Fortran or C++, and optimizing data transfers
between the tasks. In addition, a dataﬂow driven architecture could be evaluated to generalize
the concept and to extend its beneﬁts for solving problems in other domains.
1252

Multiscale simulation of organic electronics . . .

P. Friederich et al.

Acknowledgments
This work was performed on the computational resource ForHLR Phase I funded by the Ministry
of Science, Research and the Arts Baden-W¨
urttemberg and DFG (“Deutsche Forschungsgemeinschaft”). We acknowledge funding by the EU project MMM@HPC, the STN-DFG project
MODEOLED and the Helmholtz programs “Science and Technology of Nanosystems” (STN)
and “Supercomputing and Big Data” (SBD). Furthermore P. F. thanks the Carl-Zeiss Foundation for funding the project “Multiskalen Modellierung elektronischer Eigenschaften von Materialien in der organischen Elektronik”.

References
[1] Ricky A. Kendall, Edoardo Apr`
a, David E. Bernholdt, Eric J. Bylaska, Michel Dupuis, George I.
Fann, Robert J. Harrison, Jialin Ju, Jeﬀrey A. Nichols, Jarek Nieplocha, T.P. Straatsma,
Theresa L. Windus, and Adrian T. Wong. High performance computational chemistry: An
overview of NWChem a distributed parallel application. Computer Physics Communications,
128(1-2):260 – 283, 2000.
[2] Pascal Friederich, Franz Symalla, Velimir Meded, Tobias Neumann, and Wolfgang Wenzel. Ab initio treatment of disorder eﬀects in amorphous organic materials: Toward parameter free materials
simulation. Journal of Chemical Theory and Computation, 10(9):3720–3725, 2014.
[3] Vadim Rodin, Franz Symalla, Velimir Meded, Pascal Friederich, Denis Danilov, Angela Poschlad,
Gabriele Nelles, Florian von Wrochem, and Wolfgang Wenzel. Generalized eﬀective-medium model
for the carrier mobility in amorphous organic semiconductors. Phys. Rev. B, 91:155203, 2015.
[4] Pascal Friederich, Velimir Meded, Franz Symalla, Marcus Elstner, and Wolfgang Wenzel. QM/QM
approach to model energy disorder in amorphous organic semiconductors. Journal of Chemical
Theory and Computation, 11(2):560–567, 2015.
[5] G. Poghosyan, S. Matta, A. Streit, M. Bejger, and A. Kr´
olak. Architecture, implementation and
parallelization of the software to search for periodic gravitational wave signals. Computer Physics
Communications, 188:167 – 176, 2015.
[6] Pierog, Tanguy, Engel, Ralph, Heck, Dieter, and Poghosyan, Gevorg. Future of Monte Carlo
simulations of atmospheric showers. EPJ Web of Conferences, 89:01003, 2015.
[7] Pascal Friederich, Velimir Meded, Angela Poschlad, Tobias Neumann, Vadim Rodin, Vera Stehr,
Franz Symalla, Denis Danilov, Gesa L¨
udemann, Reinhold Fink, Ivan Kondov, Florian von
Wrochem, and Wolfgang Wenzel. Molecular origin of the charge carrier mobility in small molecule
organic semiconductors. Submitted, 2016.
[8] Ivan Kondov, Robert Maul, Stefan Bozic, Velimir Meded, and Wolfgang Wenzel. UNICOREBased Integrated Application Services for Multiscale Materials Modelling. In Mathilde Romberg,
Piotr Bala, Ralph M¨
uller-Pfeﬀerkorn, and Daniel Mallmann, editors, UNICORE Summit 2011
Proceedings, 7-8 July 2011, Torun, Poland, volume 9 of IAS Series, pages 1–10, J¨
ulich, 2011.
[9] Stefan Bozic, Ivan Kondov, Velimir Meded, and Wolfgang Wenzel. UNICORE-Based Workﬂows for
the Simulation of Organic Light-Emitting Diodes. In Valentina Huber, Ralph M¨
uller-Pfeﬀerkorn,
and Mathilde Romberg Romberg, editors, UNICORE Summit 2012 Proceedings, May 30-31, 2012,
Dresden, Germany, volume 15 of IAS Series, pages 15–25, J¨
ulich, 2012.
[10] Andreas Bender, Angela Poschlad, Stefan Bozic, and Ivan Kondov. A Service-oriented Framework for Integration of Domain-speciﬁc Data Models in Scientiﬁc Workﬂows. Procedia Computer
Science, 18:1087 – 1096, 2013.
[11] M. Bogdanova, S. Belousov, I. Valuev, A. Zakirov, M. Okun, D. Shirabaykin, V. Chorkov, P. Tokar,
A. Knizhnik, B. Potapkin, A. Bagaturyants, K. Komarova, M.N. Strikhanov, A.A. Tishchenko,
V.R. Nikitenko, V.M. Sukharev, N.A. Sannikova, and I.V. Morozov. Simulation platform for
multiscale and multiphysics modeling of OLEDs. Procedia Computer Science, 29:740 – 753, 2014.

1253

Multiscale simulation of organic electronics . . .

P. Friederich et al.

[12] Jonathan D. Halverson, Thomas Brandes, Olaf Lenz, Axel Arnold, Staˇs Bevc, Vitaliy Starchenko,
Kurt Kremer, Torsten Stuehn, and Dirk Reith. ESPResSo++: A modern multiscale simulation
package for soft matter systems. Computer Physics Communications, 184(4):1129 – 1149, 2013.
[13] Victor R¨
uhle, Alexander Lukyanov, Falk May, Manuel Schrader, Thorsten Vehoﬀ, James Kirkpatrick, Bj¨
orn Baumeier, and Denis Andrienko. Microscopic simulations of charge transport in
disordered organic semiconductors. Journal of Chemical Theory and Computation, 7(10):3335–
3345, 2011.
[14] Giovanni Pizzi, Andrea Cepellotti, Riccardo Sabatini, Nicola Marzari, and Boris Kozinsky. AiiDA: automated interactive infrastructure and database for computational science. Computational
Materials Science, 111:218 – 230, 2016.
[15] Shyue Ping Ong, William Davidson Richards, Anubhav Jain, Geoﬀroy Hautier, Michael Kocher,
Shreyas Cholia, Dan Gunter, Vincent L. Chevrier, Kristin A. Persson, and Gerbrand Ceder.
Python Materials Genomics (pymatgen): A robust, open-source python library for materials analysis. Computational Materials Science, 68:314 – 319, 2013.
[16] Anubhav Jain, Shyue Ping Ong, Wei Chen, Bharat Medasani, Xiaohui Qu, Michael Kocher, Miriam
Brafman, Guido Petretto, Gian-Marco Rignanese, Geoﬀroy Hautier, Daniel Gunter, and Kristin A.
Persson. Fireworks: a dynamic workﬂow system designed for high-throughput applications. Concurrency and Computation: Practice and Experience, 27(17):5037–5059, 2015.
[17] S. R. Bahn and K. W. Jacobsen. An object-oriented scripting interface to a legacy electronic
structure code. Comput. Sci. Eng., 4(3):56–66, 2002.
[18] Joris Borgdorﬀ, Carles Bona-Casas, Mariusz Mamonski, Krzysztof Kurowski, Tomasz Piontek,
Bartosz Bosak, Katarzyna Rycerz, Eryk Ciepiela, Tomasz Gubala, Daniel Harezlak, Marian
Bubak, Eric Lorenz, and Alfons G. Hoekstra. A distributed multiscale computation of a tightly
coupled model using the multiscale modeling language. Procedia Computer Science, 9:596 – 605,
2012.
[19] Joris Borgdorﬀ, Mariusz Mamonski, Bartosz Bosak, Derek Groen, Mohamed Ben Belgacem,
Krzysztof Kurowski, and Alfons G. Hoekstra. Multiscale computing with the multiscale modeling library and runtime environment. Procedia Computer Science, 18:1097 – 1105, 2013.
[20] Joris Borgdorﬀ, Jean-Luc Falcone, Eric Lorenz, Carles Bona-Casas, Bastien Chopard, and Alfons G. Hoekstra. Foundations of distributed multiscale computing: Formalization, speciﬁcation,
and analysis. Journal of Parallel and Distributed Computing, 73(4):465 – 483, 2013.
[21] Lisandro Dalc´ın, Rodrigo Paz, and Mario Storti. MPI for Python . Journal of Parallel and
Distributed Computing, 65(9):1108 – 1115, 2005.
[22] The pyQuante package is available at http://pyquante.sourceforge.net.
[23] TURBOMOLE V7.0 2015, a development of University of Karlsruhe and Forschungszentrum Karlsruhe GmbH, 1989-2007, TURBOMOLE GmbH, since 2007; available from
http://www.turbomole.com.

1254

