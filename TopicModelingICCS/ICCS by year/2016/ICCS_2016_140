Procedia Computer Science
Volume 80, 2016, Pages 2413–2417
ICCS 2016. The International Conference on Computational
Science

A parallel algorithm for modeling of dynamical
processes on large stochastic Kronecker graphs
Klavdiya Bochenina and Sergey Kesarev
ITMO University, Saint Petersburg, Russian Federation
k.bochenina@gmail.com, kesarevs@gmail.com

A stochastic Kronecker graph (SKG) is one of the most widely used approaches to model complex
networks due to the simplicity of generative procedure and the ability to reproduce the properties of
real graphs. In this paper, we present a novel parallel algorithm for modeling dynamical processes on
large Poisson SKGs (PSKGs). Proposed algorithm combines the modeling of spreading of a process
with the generation of vertices and edges which are involved in it. An experimental study of an
algorithm was carried out for different initiator matrices and graphs with the widely varying (from
several million to one billion) number of vertices using the supercomputer from Lobachevsky State
University of Nizhni Novgorod, Russia. The results confirmed the applicability of an algorithm for
mid-size HPC clusters with the efficiency varying on average from 0.2 to 0.7.
Keywords: complex networks, stochastic Kronecker graphs, parallel algorithm

1 Introduction and related work
Modeling dynamical processes on large graphs is often performed with the use of synthetic
generative models due to unavailability of a full-size sample of a real-world network. To create a
network sample with given properties, there are a number of generative models such as configuration,
preferential attachment, small-world and stochastic Kronecker graph [1] models. There exist a number
of efficient parallel algorithms to generate large synthetic networks. In [2] authors propose
approximate parallel Barabasi-Albert model (PBA) and parallel edge-centric Kronecker (PK) method.
Authors of [3] introduce PSKGs which are suitable for parallel modeling of dynamical processes due
to the vertex-oriented model of a network storage. Alan, Khan, and Marath in [4] come up with an
exact implementation of parallel preferential attachment model. In the recent study of Alam and Khan
[5], the highly scalable parallel algorithm for Chung-Lu model is proposed. All mentioned algorithms
are aimed at a generation of large random graphs and do not consider the issues of parallel modeling
of interactions between the vertices of generated networks. As a result, these algorithms partition a
network in order to balance the amount of computations during generation. Thus, there is no guarantee

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.539

2413

A parallel algorithm for modeling of dynamical...

Klavdiya Bochenina and Sergey Kesarev

that obtained partitions will provide sufficiently good load distribution during modeling of a
dynamical process on a constructed network.
From the other side, there are works considering the parallel simulation of dynamical processes on
a given network. EpiFast [6] and EpiSimdemics [7] algorithms, EpiSims [8] system and Indemics [9]
framework are the examples of tools for epidemiological modeling on high-performance computing
(HPC) platforms. Hou, Yao, Wang and Liao [10] propose SUPE-net framework for parallel discrete
event simulation of large social networks on massively parallel architectures. The scalability of
algorithms of this type is mostly determined by the efficiency of communications between
subnetworks. Simulation tools intended for social networks (e.g. [7], [8], [9]) usually use additional
geospatial restrictions which significantly reduce communication cost of simulation. Another way to
increase the efficiency is to use different patterns of message passing instead of all-to-all
communications (e.g. EpiFast [6] uses Master-Slave pattern with a single master process).
In this study, we propose a parallel algorithm (Section 2) for modeling SIRS-like processes on
Poisson stochastic Kronecker graphs (SIRS is an acronym for Susceptible – Infected – Recovered
(Removed) – Susceptible). Network partitioning is performed with a simple heuristic which exploits
the properties of initiator matrix to achieve uniform load distribution during both generation of a
network and modeling of a process. To increase the efficiency of communications, we use a MasterSlave pattern with multiple master processes. The parallel efficiency of the algorithm is studied
(Section 3) on a set of experiments with varying initiator matrices, sizes of PSKGs, a number of
computational processes (CPs) and parameters of the process.

2 Description of the parallel algorithm
Suppose that we have a 2x2 Kronecker initiator matrix obtained by maximum likelihood
estimation of a sample graph. We assume that each vertex can be in several states: (i) active (A) – a
vertex can activate neighboring vertices with a given probability pact ; (ii) resistant (R) – a vertex can
not be activated; (iii) potential (P) – a vertex is neither active nor resistant. At each iteration, an active
vertex can be recovered with a probability prec . After the end of activation period, a vertex can gain
the resistance on Rt steps with a probability pres .We suppose that at the beginning of a simulation
Vini V  Pini initially activated vertices are uniformly distributed between all vertices in a network
(where Pini is a part of V vertices which are initially activated).
For a given initiator matrix T T00 ,T01 , T10 ,T11  , V, probabilities pact , pres , prec , a length
of a resistance Rt and part of initially infected vertices Pini , the goal of a proposed algorithm is to
perform N parallel simulation steps of an evolution of a process on a dynamically generated network.
For undirected Kronecker graphs with T 00 t T 01 T10 t T11 degrees of vertices decrease
monotonically with an increase of an index of a vertex. We suggest assigning vertices to CPs in a
round-robin fashion but at each round to perform the assignment in opposite direction. The intuition
behind this approach is that CPs which obtain vertices with biggest expected degrees in a previous
round will obtain vertices with smallest degrees and vice versa.
To perform communications between CPs, we use a Master-Slave approach with a variable
number of Master processes and their restricted ownership. The main scheme of organization of CPs is
depicted in Figure 1a. We denote as Master (M) those processes that perform routing of messages, and
as Leaf (L) – those that perform calculations and contain subnetworks. At the end of an iteration, Leaf
processes send information about vertices to be activated on other Leafs to the associated Master
processes. Each Master process receives the information from associated Leafs and sends it to both
associated and non-associated Leafs. Before the simulation starts, Leaf process (Figure 1b, step 1*)
receives the indices of initially activated vertices and activates them. At each iteration, each active

2414

A parallel algorithm for modeling of dynamical...

Klavdiya Bochenina and Sergey Kesarev

vertex tries to activate its neighbors. If a vertex is activated for the first time, its neighboring vertices
are generated and stored. If a vertex to be activated belongs to the same Leaf as its activator (steps 2a,
2b in Figure 1b), its state is determined due to its current state and probability pact . Otherwise
(Figure 1b, step 2c), it is placed in the pool of vertices to be sent to a particular Leaf.
To reduce the computational load on Master processes, the resulting pool on Leafs is formed block
by block from pools with different destinations. In such a case, it is not necessary for Masters to
redistribute vertices to different destinations again. After creation of a resulting pool, each Leaf
process sends to its Master an information message (Figure 1b, step 3) with sizes of pools for each
destination. Master process (Figure 1c, step 1) receives messages from all the children and allocates a
memory for a single consolidated pool according to sizes from information messages (Figure 1c, step
2). At the next step, Leaf sends and Master receives a message to this pool. After Master received
messages from all Leafs, it sends parts of a consolidated pool to corresponding Leafs (Figure 1c, step
4). Leaf receives pools from Masters (Figure 1b, step 5), repairs the vertices in an active pool (Figure
1b, step 6) and activates received vertices (Figure 1b, step 7).

Figure 1. a) A topology of CPs (M – Master, L – Leaf). b) A scheme of Leaf process activities.
c) A scheme of Master process activities. Solid lines depict communication between the processes,
dashed lines depict logical dependencies of steps, and rectangles depict pools

3 The experimental study
The goal of the experimental study was to test applicability and scalability of proposed algorithm
on a mid-size HPC cluster. We developed an implementation of an algorithm in C++ using MPI API
for message passing. To obtain synthetic samples of networks of most popular types (like BarabasiAlbert, Erdős–Rényi and Watts-Strogatz models) we use NetworkX Python software package [11].
Initiator matrices (IM) for these samples are obtained by KronFit algorithm [12]. Also, we use an
initiator matrix [0.987; 0.571; 0.571; 0.049] estimated in [5] for a network of Internet Autonomous
Systems (we denote it as as-route). The resulting execution time was measured by averaging 3 runs.
An experimental study was performed on the basis of Lobachevsky supercomputer from Lobachevsky
State University of Nizhni Novgorod, Russia.
Figure 2 represents the parallel efficiency for as-route, Erdős–Rényi and Barabasi-Albert IMs. We
performed the experiments for 33 million to 1 billion vertices on 1-24 computational nodes (a node
has 2 processors Intel Sandy Bridge E5-2660 2.2GHz with 8 cores and 64 Gb RAM). The results are
comparable with those reported in [6] (for the case without intervention on 224 processors EpiFast
gives speedup around 3 in comparison to 32 processors, i.e. efficiency around 0.43). The efficiency

2415

A parallel algorithm for modeling of dynamical...

Klavdiya Bochenina and Sergey Kesarev

tends to grow with the growth of a size of a network as the value of communication of computation
ratio (CCR) decreases for larger networks. The increase of CCR for a larger number of processors
explains the attendant degradation of parallel efficiency. However, the algorithm allows simulating
several dozens of iterations on a sparse network with a billion vertices in several minutes (for a
process with dominant communications). As it can be used to model the processes from different
domains with different required amounts of computations per iteration, the influence of CCR on the
efficiency of an algorithm should be further studied.

Figure 2. The parallel efficiency: a) as-route IM, pact 0.5 , prec 0.2 , Pini 0.01 , N 25 ; b) Erdős–
Rényi IM, pact 0.4 , prec 0.142 , Pini 0.1 , N 50 , and Barabasi-Albert IM (see Figure 3a).

Figure 3. a) A number of activated vertices and the time of activation on different Leaf processes for
Barabasi-Albert IM, pact

0.3 , prec

0.2 , Pini

0.015 , N

35 , V

b) An efficiency for a different number of Masters, as-route IM, V

230 .

230 .

Figure 3a shows a number of activated vertices and the time of processing of pool of active nodes
per iteration for Barabasi-Albert IM on 7 different Leaf processes. The similarity of these
characteristics for all the Leafs confirms the efficiency of approach that we use for network
partitioning to achieve uniform load balancing. Figure 3b illustrates the influence of a number of
Masters on a resulting parallel efficiency and confirms the advantage of using several Master
processes (e.g. for 384 processes in Figure 3b the speedup increased from 70 for a single Master
process to 144 for 19 Master processes).

2416

A parallel algorithm for modeling of dynamical...

Klavdiya Bochenina and Sergey Kesarev

4 Conclusions and future work
Fast and efficient generation and investigation of complex networks with billion vertices require
using specific algorithms and tools of high-performance computing. In this paper, we present a parallel
algorithm for modeling SIRS-like dynamical processes on large stochastic Kronecker graphs. The
scalability of an algorithm is maintained by using the two-level topology of computational processes
with a variable number of routing and calculating processes. The experiments on initiator matrices of
different types and networks of different sizes confirmed the applicability of an algorithm for a midsize HPC cluster with parallel efficiency varying from 0.2 to 0.7 during simulation of processes on
networks with several million to billion vertices. Further research can include development of an
algorithm to select the most efficient topology of processes using parallel performance models.

5 Acknowledgements
This work was partly performed by the Master student (Sergey Kesarev) of the Master’s
Programme in Computational Science [13]. This paper is financially supported by The Russian
Scientific Foundation, Agreement #14–21–00137 (15.08.2014).

References
[1]
[2]
[3]
[4]

[5]
[6]
[7]

[8]
[9]
[10]
[11]
[12]
[13]

J. Leskovec, D. Chakrabarti, J. Kleinberg, C. Faloutsos, Z. Ghahramani, Kronecker graphs: an
approach to modeling networks, 11 (2010) 985–1042.
A. Yoo, K. Henderson, Parallel generation of massive scale-free graphs, arXiv Prepr.
arXiv1003.3684. (2010).
E. Ryu, S. Choi, Stochastic Kronecker Graph on Vertex-Centric BSP, arXiv Prepr.
arXiv1208.2239. (2012).
M. Alam, M. Khan, M. V. Marathe, Distributed-memory parallel algorithms for generating
massive scale-free networks using preferential attachment model, in: Proc. Int. Conf. High
Perform. Comput. Networking, Storage Anal. - SC ’13, ACM Press, 2013: pp. 1–12.
M. Alam, M. Khan, Parallel Algorithms for Generating Random Networks with Given Degree
Sequences, Int. J. Parallel Program. (2015) 1–19.
K.R. Bisset et al. EpiFast: A Fast Algorithm for Large Scale Realistic Epidemic Simulations
on Distributed Memory Systems, in: Proc. 23rd Int. Conf. Conf. Supercomput. 2009: p. 430.
C.L. Barrett et al. EpiSimdemics: An efficient algorithm for simulating the spread of
infectious disease over large realistic social networks, in: 2008 SC - Int. Conf. High Perform.
Comput. Networking, Storage Anal. SC 2008, 2008. doi:10.1109/SC.2008.5214892.
S. Mniszewski, S. Del Valle, EpiSimS simulation of a multi-component strategy for pandemic
influenza, in: Proc. 2008 Spring Simulation Conference, 2008: pp. 556–563.
K.R. Bisset et al. Indemics: An Interactive High-Performance Computing Framework for Data
Intensive Epidemic Modeling, ACM Trans. Model. Comput. Simul. 24 (2014) 1–32.
B. Hou, Y. Yao, B. Wang, D. Liao, Modeling and simulation of large-scale social networks
using parallel discrete event simulation, Simulation. 89 (2013) 1173–1183.
NetworkX website. http://networkx.github.io/.
Stanford Network Analysis Project. http://snap.stanford.edu/.
V.V. Krzhizhanovskaya et. al. Russian-Dutch double-degree Master’s programme in
computational science in the age of global education, Journal of Computational Science,
Volume 10, September 2015, Pages 288-298, http://dx.doi.org/10.1016/j.jocs.2015.05.001.

2417

