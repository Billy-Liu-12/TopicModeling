Procedia Computer Science
Volume 80, 2016, Pages 1428–1438
ICCS 2016. The International Conference on Computational
Science

Adaptive Integration and Singular Boundary
Transformations
Elise de Doncker1 , Fukuko Yuasa2 , Tadashi Ishikawa2 , John Kapenga1 , and
Fola Olagbemi1
1

2

Western Michigan University, Kalamazoo MI 49008, U.S.A.
elise.dedoncker@wmich.edu
john.kapenga@wmich.edu
omofolakunmiel.olagbemi@wmich.edu
High Energy Accelerator Research Organization (KEK), Tsukuba, Ibaraki, 305-0801, Japan
fukuko.yuasa@kek.jp
tadashi.ishikawa@kek.jp

Abstract
We apply and compare results of transformations used to annihilate boundary singularities for multivariate integration over hyper-rectangular and simplicial domains. While classically these transformations
are applied with a product trapezoidal rule, we use adaptive methods in the PAR I NT software package, based on rules of higher polynomial degree for the integration over subdomains. PAR I NT is layered over the MPI environment (Message Passing Interface) and deploys advanced parallel computation
techniques such as load balancing among processes that are distributed over a network of nodes. The
message passing is performed in a non-blocking and asynchronous manner, and permits overlapping
of computation and communication. Comparisons of computation times using long double vs. double
precision conﬁrm that the extended format does not considerably increase the time for long doubles.
We further apply the proposed methods to problems arising from self-energy Feynman loop diagrams
with massless internal lines, in particular where the corresponding integrand has singularities on the
boundaries of the integration domain.
Keywords: Boundary singularities, transformations, automatic numerical integration, parallel computation, Feynman loop integrals

1

Integral transformations

Many difﬁcult integration problems arise from the occurrence of singularities on the boundaries of the
integration domain, and various transformations have been designed that can improve the behavior of
the integrand in order to make the numerical integration easier. We will be interested in multivariate
integral approximations over the d-dimensional unit cube Ud = [0, 1]d , and over the unit simplex Sd =
d
{x ∈ Ud | i=1 xi ≤ 1}.
1428

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.462

Adaptive Integration and Transformations

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi
1

For the one-dimensional integral I = 0 f (x) dx, we consider the tanh and tanh(sinh) transformations (see, e.g., [DR84, RdD81b]), given by
Trans (A) :
I=

1
0

ct
) so that
1 − t2

α(t) dt with α(t) = f (ϕ(t)) ϕ (t), where ϕ (t) =

Trans (B) :
I=

x = ϕ(t) = tanh(

∞
−∞

x = ψ(t) =

c (1 + t2 )
ct
sech2 (
)
(1 − t2 )2
1 − t2

π
1
(tanh( sinh(t)) + 1) yielding
2
2

β(t) dt with β(t) = f (ψ(t)) ψ (t), where ψ (t) =

(1)

π cosh(t)
4 cosh2 ( π2 sinh(t))

(2)

Thus Trans (A) maps the original interval back to [0, 1] and is intended to deal with a possible singularity of f (x) at x = 1. The tanh transformation was introduced by Sag and Szekeres [SS64] to transform the radial coordinate for integration over the N -dimensional sphere, in order that the transformed
integrand and all its derivatives vanish at the spherical surface (corresponding to t = 1 in Eq (1)). Then
in [SS64] the integrand is put to 0 outside the sphere, and the integration performed over a cube containing the sphere; the product trapezoidal rule is applied in view of the vanishing integrand derivatives
at the boundary and the resulting Euler-Maclaurin error expansion.
Whereas ϕ(t) in Eq (1) maps t = 1 to x = 1, and t = 0 to x = 0, a version of Trans (A) that maps
t = 0 to x = 1, and t = 1 to x = 0 is
ˆ :
Trans (A)
I=

1
0

x = ϕ(t)
ˆ = tanh(

c (1 − t)
c (1 − t)
) = tanh(
) so that
1 − (1 − t)2
2t − t2

α(t)
ˆ dt with α
ˆ (t) = f (ϕ(t))
ˆ
ϕˆ (t), where ϕˆ (t) =

c (t2 − 2t + 2)
c (1 − t)
sech2 (
)
2
2
(2t − t )
2t − t2

ˆ the tanh argument is inﬁnite at t = 0. With Trans (A), as well as Trans (A’) given by
Thus in Trans (A)
Trans (A’) :

x = 1 − tanh(

ct
)
1 − t2

the tanh argument is inﬁnite at the t = 1 endpoint of the integration range. Note that the computa1
1
using Trans (A) is equivalent to computing Ud
with Trans (A’), i.e.,
tion of Ud
d
d
j=1 (1−xj )

j=1

xj

Trans (A’) targets the singular point at the origin.
Classically the trapezoidal rule is also used for the integration with Trans (B), which maps the original interval (with possible integrand singularities at x = 0 and x = 1) to (−∞, ∞). The trapezoidal
∞
rule approximation applied to Eq (2) yields Ih = h k=−∞ β(kh) with mesh size h. A rapid decrease
of the transformed integrand with increasing |t| allows truncation of the inﬁnite range, resulting in an
K1
approximation of the form Ih tr = h k=−K
β(kh). The error ΔIh tr = I − Ih tr consists of the
0
quadrature rule error ΔIh = I − Ih and the truncation error ΔItr = Ih − Ih tr . For the results in this
paper we will take K0 = K1 in Ih tr and truncate the inﬁnite integration interval of Eq (2) to a ﬁnite
interval [−b, b].
Trans (B) belongs to a class of double exponential transformations by Takahasi and Mori [TM74],
where the transformed integrand β(t) behaves asymptotically as exp(− π2 exp |y|) for y → ∞, in order to keep a trade-off between ΔIh and ΔItr . This transformation with the product trapezoidal rule
was used for Feynman loop integrals, e.g., in [YIH+ 13] and combined with high precision product
1429

Adaptive Integration and Transformations

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

trapezoidal rule calculations on accelerator boards in [MDN+ , DNTF15]. Other transformations can be
considered, for example, the so-called IMT-rule [IMT70]. Various transformations were developed and
deployed in [dDP76, RdD81a, RdD81b].
For an application of the methods in Eqs (1) and
(2) to multivariate integrals, the product trapezoidal rule
approximation suffers from the exponential growth of
its number of grid points (the curse of dimensionality). As shown below, we can perform the integration for some problems using an adaptive algorithm
(in PAR I NT [Par]). The adaptive procedure attempts
to counter the dimensionality effect by partitioning the
domain in the vicinity of integration difﬁculties (as opposed to uniformly), and by its region bisection perpendicular to the direction in which the integrand is found
Figure 1: 2D integrand √x11 x2
to vary the most (see also [DRVD76, BEG91b, GK97]).
However, adaptive integration is not suited for moderate
to high dimensions (> 10, say), especially if a considerable amount of partitioning is required.
1 1
Fig 1 plots the evaluation points in the unit square for an adaptive integration of 0 0 √x11 x2 dx1 dx2
without transformation. These points result from an integration allowing 5,000 integrand evaluations.
Observe that the plot shows an evaluation point with a value of around 47,000 near x1 = x2 = 0.
1 1
1
dx1 dx2 , which
For Trans (A), Fig 2(a) shows the transformed integrand of 0 0 √
(1−x1 )(1−x2 )

is pushed to 0 near x1 = 1 and x2 = 1. Furthermore, the transformed integrand remains below a
value of about 13.0 in this plot. The more uniform distribution of the points after the transformation
is expected to lead to a better parallelization. Fig 2(b) plots the transformed integrand values obtained
1
over the 6D unit cube U6 = [0, 1]6 , as a function of x1 .
during a computation of Ud
d
j=1 (1−xj )

Fig 3(a) shows the 2D integrand

√ 1
x1 x2

transformed according to Trans (B) over the square [−5, 5]2 ,

and Fig 3(b) depicts the transformed integrand values for

D

1
d
j=1

xj

over the 6D cube D = [−5, 5]6 ,

as a function of x1 .
Numerical test results of the transformations are presented in Section 2, followed by an application
to Feynman loop integrals in Section 3 and a discussion of the PAR I NT package in Section 4. We use

(a)

(b)

Figure 2: (a) Transformed 2D integrand with Trans. (A); (b) Trans. (A) values of 6D integrand as a function of x1
1430

Adaptive Integration and Transformations

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

(a)

(b)

Figure 3: (a) Transformed 2D integrand with Trans. (B); (b) Trans. (B) values of 6D integrand as a function of x1
PAR I NT on the thor cluster of the High Performance Computing and Big Data Center at WMU. The tests
are run on 16-core cluster nodes with Intel Xeon E5-2670, 2.6GHz processors and 128GB of memory
each, and using the Inﬁniband interconnect for message passing via MPI.

2

Numerical tests

Using the transformations in Section 1, remarkable integration accuracies are obtained, which cannot
be achieved by a direct computation without transformation. For example, a 2D run with maximum
number of evaluation points set to 1,000 gives 3.91 as a result without tranformation (exact value = 4).
1
,
Tables 1 and 2 give sequential results of PAR I NT (obtained with one MPI process) for Ud
d
j=1

xj

using Trans (A’) and Trans (B), respectively, in d = 2, 3 and 6 dimensions. For Trans (A’) the parameter
DOUBLE

c=3

LONG DOUBLE

c=4

c=5

c=3

c=4

c=5

d

#E V.

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

2

1K
5K
10K
1K
5K
10K
50K
100K
10K
100K
1M
10M
100M

4.2 10−8
1.5 10−8
1.5 10−8
5.3 10−4
1.6 10−5
8.9 10−8
2.1 10−8
2.1 10−8
5.1 10−3
2.2 10−5
1.2 10−6
7.7 10−8
4.5 10−8

0.000
0.002
0.004
0.001
0.003
0.006
0.031
0.061
0.011
0.113
1.160
11.84
118.8

1.4 10−6
1.7 10−8
1.5 10−8
1.0 10−4
2.2 10−6
8.5 10−7
2.1 10−8
2.3 10−8
3.4 10−3
4.0 10−5
5.4 10−6
2.3 10−8
4.7 10−8

0.000
0.002
0.004
0.001
0.003
0.006
0.031
0.060
0.009
0.112
1.167
11.71
116.8

3.0 10−6
2.2 10−8
2.2 10−8
2.3 10−4
2.6 10−6
2.3 10−6
3.6 10−8
3.3 10−8
1.8 10−2
6.9 10−4
3.0 10−6
4.2 10−9
6.5 10−8

0.000
0.002
0.004
0.001
0.003
0.006
0.031
0.061
0.012
0.113
1.166
11.81
118.1

3.6 10−8
2.2 10−10
3.3 10−10
5.3 10−4
1.6 10−5
7.2 10−8
4.5 10−10
4.5 10−10
5.1 10−3
2.2 10−5
1.3 10−6
2.9 10−8
1.0 10−9

0.001
0.002
0.005
0.001
0.003
0.007
0.033
0.066
0.013
0.127
1.258
12.54
124.3

1.4 10−6
2.8 10−10
3.4 10−10
1.0 10−4
2.2 10−6
8.6 10−7
7.4 10−10
5.1 10−10
3.4 10−3
4.0 10−5
5.4 10−6
2.2 10−8
1.3 10−9

0.001
0.002
0.005
0.001
0.003
0.007
0.033
0.065
0.013
0.127
1.214
12.14
122.4

3.0 10−6
3.3 10−10
3.4 10−10
2.3 10−4
2.6 10−6
2.3 10−6
4.8 10−9
5.3 10−10
1.8 10−2
6.9 10−4
3.9 10−6
5.9 10−8
1.4 10−9

0.001
0.002
0.005
0.001
0.003
0.007
0.033
0.066
0.013
0.122
1.220
12.20
122.4

3

6

Table 1: PAR I NT Trans (A’) results for

Ud

1
d
j=1

xj

with 1 proc., for double and long double precision

1431

Adaptive Integration and Transformations

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

b=3

b=4

b=5

d

#E V.

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

2

1K
5K
10K
10K
100K
1M
1M
10M
100M
1B

1.2 10−3
2.7 10−7
3.0 10−7
1.6 10−4
3.2 10−7
4.4 10−7
1.6 10−2
5.0 10−6
2.3 10−6
8.9 10−7

0.001
0.003
0.005
0.007
0.069
0.685
1.286
13.05
129.7
1308.6

3.6 10−5
7.5 10−8
1.2 10−8
7.6 10−5
2.0 10−7
1.7 10−8
4.6 10−4
1.1 10−5
4.1 10−7
5.2 10−8

0.001
0.003
0.005
0.007
0.068
0.682
1.252
12.91
129.8
1309.7

2.0 10−3
3.1 10−7
8.6 10−9
5.0 10−3
4.4 10−8
1.6 10−8
1.8 10−3
4.1 10−5
4.8 10−7
4.5 10−8

0.001
0.003
0.005
0.007
0.068
0.679
1.289
13.04
129.5
1596.5

3

6

Table 2: PAR I NT Trans (B) results for

Ud

1
d
j=1

xj

with 1 proc., for double precision

c in Eq (1) is c = 3, 4, 5, and for Trans (B) the transformed integral is taken over the truncated interval
[−b, b], where b = 3, 4, 5 in each direction. Trans (A’) is applied in view of the singularity at the origin.
In Table 1, the relative accuracies and times (in seconds) are shown for runs in double and long
double precision, for the maximum number of integrand evaluations as speciﬁed in the second column.
Overall, in Table 1, the best accuracies are obtained with c = 3. For d = 2, some of the accuracies
are more than 50 times better in long double precision for 5K and 10K evaluations; for d = 3, the
better accuracies are seen at at 50K and 100K evaluations, and for d = 6, the better accuracies in long
double precision occur at 100M evaluations. The results of Trans (A’) are far more efﬁcient than those
of Trans (B) (shown in Table 2).
As observed in Table 1, the times using long doubles are close to those using doubles for runs up
to 100M. On Intel hardware using recent gcc compilers, doubles are IEEE ﬂoating point compliant,
64 bit reals that use 8 bytes, while long doubles are non-IEEE ﬂoating point compliant 80 bit reals
that use 16 bytes (wasting 48 of 128 bits). The times for computing with long doubles and doubles in
this environment is about the same while long doubles require double the storage. There are compiler
options that can affect this. See also the work in [FIPG05], where different multi-precision types are
compared. Because the load balancing in PAR I NT is done in the background, and does not normally
transfer signiﬁcant amounts of data, the difference in sizes does not seriously affect the run times. Using
long doubles will approximately double the storage required, which increases the time to move the data
and may limit the number of subdivisions that can be done. Compilers such as gcc 5.2 also support quad
precision, 128 bit, IEEE compliant reals, using software that is much (often 50 times) slower than using
long doubles. Other compilers (Intel and PGI) have different results, but the same general conclusions
hold.
Table 2 is given for double precision. Among the Trans (B) results, those for half-width b = 4 are
generally best (although comparable with b = 5). It may be noted that the accuracy does not improve
for d = 2 and half-width b = 3 at 10K evaluations (or higher). This is due to the truncation of the
region after Trans (B), to a box of half-width b in each coordinate direction. More accuracy is gained
with b = 4 or 5 in this case. However, no further increase of the accuracy is observed for larger b,
e.g., b = 6. In general there is a trade-off between taking more of the tail behavior into account, and
accurately approximating the transformed integral over the ﬁnite box.
Table 3 gives parallel results obtained with PAR I NT using 64 processes (see Section 4) for the inte1
gral Sd
over the unit simplex S6 , in double and long double precision. The Trans (A’) and
d
j=1

1432

xj

Adaptive Integration and Transformations

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

T RANS (A’)
DOUBLE

T RANS (B)

LONG DOUBLE

DOUBLE

LONG DOUBLE

#E V.

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

R EL .
E RR .

T IME
(S)

100K
1M
10M
100M
1B
10B
100B

3.3 10−3
1.3 10−4
1.7 10−5
2.0 10−7
6.6 10−8
7.2 10−8
7.2 10−8

0.07
0.08
0.23
1.7
16.5
166.9
1678.2

2.0 10−3
1.3 10−4
1.5 10−5
2.1 10−7
1.5 10−9
1.6 10−9
1.6 10−9

0.08
0.10
0.28
2.1
20.6
202.8
2007.6

9.2 10−2
3.8 10−3
1.3 10−4
3.0 10−6
9.5 10−8
5.3 10−8
5.1 10−8

0.07
0.09
0.27
2.1
20.9
208.1
2069.7

8.2 10−2
3.6 10−3
1.4 10−4
3.6 10−6
4.8 10−8
2.4 10−9
1.1 10−9

0.12
0.14
0.45
3.5
34.0
339.0
3403.1

Table 3: PAR I NT results for

S6

1
6
j=1

xj

with 64 procs. on 4 (16-core) cluster nodes; Trans (A’) with c = 3,

Trans (B) with cube half-width b = 4, for double and long double precision

Trans (B) transformations are applied in the x
˜1 , x
˜2 , . . . , x
˜N coordinates after transforming the unit simplex domain into the N -dimensional unit cube, using
(x1 , x2 , . . . , xN ) → (˜
x1 , (1 − x1 ) x
˜2 , . . . , (1 − x1 − x2 − . . . − xN −1 ) x
˜N )

with Jacobian (1 − x1 )(1 − x1 − x2 ) . . . (1 − x1 − x2 − . . . − xN −1 ).
The parallel times in Table 3 for the two methods, in double as well as long double precision, are very
close for 100K and 1M evaluations. These times are insigniﬁcant and dominated by the MPI overhead.
For the larger problems (from 100M evaluations), the time increase is proportional to that of the number
of integrand evaluations. In this range the difference in time between double and long double runs is
more pronounced for both methods, and Trans (A’) is also faster than Trans (B). Trans (A’) is generally
more accurate than Trans (B) for this problem.

3

Feynman loop integrals

An L-loop integral with N internal lines can be represented in Feynman parameter space by
I=

Γ N − nL
2
(−1)N
(4π)nL/2

1 N
0 r=1

dxr δ(1 −

xr )

C N −n(L+1)/2
,
(D − i C)N −nL/2

(3)

where C and D are polynomials determined by the topology of the corresponding diagram and physical
parameters. The integration in Eq (3) is taken over the N -dimensional unit cube. However, as a result
of the δ-function one of the xr can be expressed in terms of the other ones, which reduces the integral
dimension to d = N − 1 and the domain to the d-dimensional unit simplex Sd . In the absence of IR
(infrared) and UV (ultraviolet) singularities we have n = 4.
The term i C prevents the denominator from vanishing in the integration domain and can be used
for regularization, where we compute an approximation as → 0. A regularization to keep the integral
from diverging was achieved by extrapolation as → 0 in [dDSFY04, YdDH+ 12, dDFH+ 11, dDY12].
Similar to the treatment of 2-loop diagrams in [YdDH+ 12], we set C = 1 in the integrand denominator
of Eq (3). Multiplying the numerator and denominator by (D + i )N −nL/2 = (D + i )N −6 then leads
to the integral
IN

nL
= (−1) Γ N −
2

N −1

1−

N

j=1

0

j−1
k=1

xk

dxj

C N −8 (D + i )N −6
.
(D2 + 2 )N −6

(4)
1433

Adaptive Integration and Transformations

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

Figure 4: 3-loop self-energy diagram N0 (N = 8)
DOUBLE

#E V.

25B
50B
100B
250B
500B
750B
Exact:

LONG DOUBLE

R ESULT

R EL .
E RR .

T IME
(S)

R ESULT

R EL .
E RR .

T IME
(S)

20.7379679
20.7383432
20.7384813
20.7385329
20.7385428
20.7385437
20.7385551

2.8 10−5
1.0 10−5
3.6 10−6
1.1 10−6
5.9 10−7
5.5 10−7

51.4
102.7
206.2
516.2
1035.1
1553.5

20.7379662
20.7383502
20.7384892
20.7385406
20.7385498
20.7385519
20.7385551

2.8 10−5
9.9 10−6
3.2 10−6
7.0 10−7
2.6 10−7
1.5 10−7

105.6
211.7
423.5
1060.4
2125.6
3187.8

Table 4: PAR I NT results for N0 (cf., Eq. (5)) with 48 procs. on 3 (16-core) cluster nodes, without transformation,
for double and long double precision
We consider a class of 3-loop (L = 3) self-energy diagrams with massless propagators from [BC10],
in particular, the N0 diagram with N = 8 as pictured in Fig 3, and the real part integral of Eq (4),
e I8 =

1
0

1−x1

dx1

0

1−x1 −...x6

dx2 . . .

0

dx7

D2 − 2
.
(D2 + 2 )2

(5)

In [dDYK+ 15] we dealt with N0 and three other diagrams (for N = 7 and 8), N1 , N2 and L0
from [BC10]. For the latter we provided results by a direct computation of the integral in Eq (4)
for large numbers of integrand evaluations, between 1B and 100B (billion), taking up to about 400s
(seconds) of CPU time using long double precision, with 48 MPI processes. This involved setting ρ = 0
and transforming Eq (4) to the (N −1)-dimensional unit cube. Applying further integral transformations
does not appear beneﬁcial in these cases.
For N0 we reported results based on a numerical extrapolation as ρ → 0. Thereby, a sequence of
integrals was computed by adding a non-zero term depending on in the integrand denominator (see
Eq 5), for ρ = ρ = 2− , = 20, . . . , 32, and performing an extrapolation with the -algorithm of
Wynn [Sha55, Wyn56, Sid96, Sid11] on the sequence of integrals. Each integral of the sequence took
about 475s CPU time; thus a total of 12 or 13 iterations (with rather slow convergence) took about
5,700s or 6,175s, respectively.
As an application of the transformation methods in this paper, we set ρ = 0 and evaluate the integral
of Eq (5) after a tanh transformation. Trans (A’) with c = 3 yields the result 20.7385571 with relative
error 9.6 10−8 by PAR I NT using long doubles with 25B evaluations, in 832s with 48 processes. The
results are sensitive to the problem parameters, such as the value of c and the allowed number of function
evaluations. The accuracy does not further increase by allowing more evaluations. The exact integral
is 20ζ5 ≈ 20.738555102867. For comparison, Table 4 gives results obtained without transformation,
for double and long double precision, using 48 processes. Without the transformation, less accuracy is
achieved up to 750B evaluations and 3188s execution time.
1434

Adaptive Integration and Transformations

4

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

PAR I NT software

Written in C and layered over MPI [OM], the PAR I NT methods (parallel adaptive, quasi-Monte Carlo
and Monte Carlo) are implemented as tools for automatic integration (i.e., adhering to a blackbox
model), where the user deﬁnes the integrand function and the domain, and speciﬁes a relative and absolute error tolerance for the computation (tr and ta , respectively). For PARINT the integrand is generally
deﬁned as a vector function f : D ⊂ Rd → Rm with m components, over a (ﬁnite) d-dimensional
domain D. Denoting the exact integral If = D f (x) dx, it is then the objective to return an approximation Qf and absolute error estimate Ea f such that
|| Qf − If || ≤ || Ea f || ≤ max{ ta , tr || If || }
(in inﬁnity norm). In order to satisfy this error criterion, the program tests throughout whether
|| Ea f || ≤ τ = max{ ta , tr || Qf || }

(6)

is achieved, where τ is the estimated tolerated error.
The available cubature rules in PAR I NT (to compute the integral approximation over the domain
or its subregions) include a set of rules for the d-dimensional cube [GM80, GM83, BEG91a], the 1D
¨
and a set of rules for the
(Gauss-Kronrod) rules used in the Q UAD PACK software package [PdDUK83]
d-dimensional simplex [Gen90, GM78, dD79]. The number of function evaluations per (sub)region is
constant and the total number of subregions generated, or the number of function evaluations in the
course of the integration, is considered a measure of the computational effort.

4.1

PAR I NT adaptive methods

In the PAR I NT distributed, asynchronous adaptive partitioning algorithm, all processes act as integration workers; one process additionally assumes the role of integration controller. The integration
domain is divided initially among the workers. Each on its own part of the domain, the workers
¨
engage in an adaptive partitioning strategy similar to that of D QAGE from Q UAD PACK [PdDUK83]
and of D CUHRE [BEG91b] by successive bisections. The workers then each generate a local priority queue of subregions as a task pool. The priority queue is implemented as a max-heap keyed
with the estimated integration errors over the subregions, so that the subregion with the largest estimated error is stored in the root of the heap. If the user speciﬁes a maximum size for the heap
structure on the worker, the task pool is stored as a deap or double-ended heap which allows
deleting of the maximum as well as the minimum element efﬁciently, in order to maintain a constant size of
the data structure once it reaches its maximum.
A task consists of the selection of the associated
Evaluate initial region and update results
Initialize priority queue with initial region
subregion and its subdivision (generating two children
while (evaluation limit not reached and
regions), integration over the children, deletion of the
estimated error too large)
Retrieve region from priority queue
parent region (root of the heap) and insertion of the chilSplit region
dren into the heap (see Fig 5). The region partitioning
Evaluate new subregions and update results
Insert new subregions into priority queue
by bisections (as opposed to subdivisions into 2d subregions) helps to alleviate the dimensionality curse of
an exponential increase of the work with increasing dimension. The bisection of a region is performed perFigure 5: Adaptive integration meta-algorithm
pendicularly to the coordinate direction in which the
integrand is found to vary the most, according to 4th -order differences computed in each direction [DRVD76, GK97, BEG91b].
1435

Adaptive Integration and Transformations

4.2

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

Load balancing

For a regular integrand behavior and p MPI processes distributed evenly over homogeneous processors, the computational load ideally decreases by a factor of about p. However, since most integrands
feature varying function behavior across the integration domain (e.g., singularities or peaks), workers that initially receive a difﬁcult portion of the integration domain need to perform more work to
complete their part of the problem than workers whose initial region is easy. The latter workers
may become idle. Consequently we resort to dynamic load balancing to maintain efﬁcient use of the
processes by keeping the loads on the worker task pools balanced. The receiver initiated, scheduler
based load balancing strategy in PAR I NT is an important mechanism of the distributed integration algorithm [dDGE96, dDKCZ01, dZKC01, AKdD03, AdDKVV04]. The controller acts as the scheduler and
maintains an IDLE - STATUS list of the workers.
The workers send periodic update messages to the controller, containing the differences incurred in
their integral and error estimates (since the previous update). The update message also indicates the idle
or non-idle status of the worker. In turn, the controller provides the workers with updated values of the
estimated tolerated error τ = max{ ta , tr || Qf || } required for the global accuracy test in Eq (6). A
worker is idle if the ratio RE of its total local error estimate to the tolerated error τ does not exceed its
RE
≤ 1.
fraction RV of the total volume (of the original domain D), i.e., its error ratio R
V
When a worker j informs the controller via an update message of its non-idle status, the controller
selects (in a round-robin fashion) an idle worker k and sends j a message containing the ID of k. Worker
j will then send a work message to k containing either new work or an indication that it has no work
available. Upon receiving this message, worker k either resumes working or informs the controller that
it is still idle.
Other strategies are possible, that perform the load balancing steps between the worker processes,
without going through the controller. A simple de-centralization of the current scheme was proposed
in [dZKC01], by letting the controller provide the workers with its current IDLE - STATUS information.
Once workers have this information, they can perform load balancing independently of the controller.
This would increase the amount of data transferred for load balancing.
Note that the current centralized strategy ﬁts well with our parallel adaptive partitioning algorithm,
as it makes use of the updates that take place at the controller to keep track of the global results and
estimated global tolerated error τ (see Eq (6)). The message passing is performed in a non-blocking
and asynchronous manner, and permits overlapping of computation and communication, which beneﬁts PAR I NT’s efﬁciency on a hybrid platform (multicore and distributed) where multiple processes are
assigned to each node.

Conclusions
We examined the effectiveness of transformations for the integration of functions with singularities on
the boundaries of the domain. As indicated by the test results in this paper, the tanh transformation
(with variants of Trans(A)) appears to be more accurate and efﬁcient than Trans(B) for a similar amount
of work when used with PAR I NT. Other transformations will be considered in a subsequent comparison
study for possible inclusion in the PAR I NT parallel multivariate integration package.
Interesting observations also result by comparing execution times using doubles vs. long doubles,
conﬁrming that the extended format does not affect the computation time by much (generally up to about
a factor 2) in the current environment. While using higher (such as quad) precision may be desirable
in some situations, a careful analysis of the need for extra precision as the number of subdivisions
increases, especially near singularities, can provide better approaches. Future work will be done in
helping automate such approaches.
1436

Adaptive Integration and Transformations

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

Acknowledgments
We acknowledge the support from the National Science Foundation under Award Number 1126438.
This work is further supported by Grant-in-Aid for Scientiﬁc Research (24540292) of JSPS, and the
Large Scale Simulation Program No. 14/15-06, No. 15/16-06 of KEK. We also thank the reviewers for
their insight and suggestions to improve the manuscript.

References
˜
[AdDKVV04] C. Achalla, E. de Doncker, K. Kaugars, and J. VanVoorst.
α-load balancing for parallel adaptive
task partitioning. In Parallel and Distributed Computing and Systems, 2004.
[AKdD03]
C. Achalla, K. Kaugars, and E. de Doncker. Load balancing in distributed adaptive task partitioning.
In Parallel and Distributed Computing and Systems, pages 280–283, 2003.
[BC10]
B. A. Baikov and K. G. Chetyrkin. Four loop massless propagators: An algebraic evaluation of all
master integrals. Nuclear Physics B, 837:186–220, 2010.
[BEG91a]
J. Berntsen, T. O. Espelid, and A. Genz. An adaptive algorithm for the approximate calculation of
multiple integrals. ACM Trans. Math. Softw., 17:437–451, 1991.
[BEG91b]
J. Berntsen, T. O. Espelid, and A. Genz. Algorithm 698: DCUHRE-an adaptive multidimensional
integration routine for a vector of integrals. ACM Trans. Math. Softw., 17:452–456, 1991. http:
//www.sci.wsu.edu/math/faculty/genz/homepage.
[dD79]
E. de Doncker. New Euler-Maclaurin expansions and their applications to quadrature over the
s-dimensional simplex. Math. Comp., 33:1003–1018, 1979.
[dDFH+ 11] E. de Doncker, J. Fujimoto, N. Hamaguchi, T. Ishikawa, Y. Kurihara, Y. Shimizu, and F. Yuasa.
Quadpack computation of Feynman loop integrals. Journal of Computational Science (JoCS),
3(3):102–112, 2011. doi:10.1016/j.jocs.2011.06.003.
[dDGE96]
E. de Doncker, A. Gupta, and P. Ealy. Two methods for load balanced distributed integration.
Lecture Notes in Computer Science, Springer-Verlag, 1067:562–570, 1996.
[dDKCZ01] E. de Doncker, K. Kaugars, L. Cucos, and R. Zanny. Current status of the ParInt package for parallel
multivariate integration. In Proc. of Computational Particle Physics Symposium (CPP 2001), pages
110–119, 2001.
[dDP76]
E. de Doncker and R. Piessens. Algorithm 32 - automatic computation of integrals with singular
integrand, over a ﬁnite or inﬁnite range. Computing, 17:265–279, 1976.
[dDSFY04]
E. de Doncker, Y. Shimizu, J. Fujimoto, and F. Yuasa. Computation of loop integrals using extrapolation. Computer Physics Communications, 159:145–156, 2004.
[dDY12]
E. de Doncker and F. Yuasa. Toward automatic regularization for Feynman loop integrals in perturbative quantum ﬁeld theory. Measurements in Quantum Mechanics, pages ISBN 978–953–51–
0058–4, 2012.
[dDYK+ 15] E. de Doncker, F. Yuasa, K. Kato, T. Ishikawa, and O. Olagbemi.
Adaptive integration for 3-loop Feynman diagrams with massless propagators.
Procedia Computer Science, 51:1333–1342, 2015. http://www.sciencedirect.com/science/article/pii/S1877050915011266,
doi:10.1016/j.procs.2015.05.318.
[DNTF15]
H. Daisaka, Nakasato N., Ishikawa T., and Yuasa F. Application of GRAPE9-MPX for high precision calculation in particle physics and performance results. Procedia Computer Science, 51:1323–
1332, 2015.
[DR84]
P. J. Davis and P. Rabinowitz. Methods of Numerical Integration. Academic Press, New York,
1984.
[DRVD76]
L. De Ridder and P. Van Dooren. An adaptive algorithm for numerical integration over an ndimensional cube. Journal of Computational and Applied Mathematics, 2(3):207–210, 1976.

1437

Adaptive Integration and Transformations
[dZKC01]

[FIPG05]
[Gen90]

[GK97]
[GM78]
[GM80]
[GM83]
[IMT70]
[MDN+ ]

[OM]
[Par]
¨
[PdDUK83]

[RdD81a]
[RdD81b]
[Sha55]
[Sid96]
[Sid11]
[SS64]
[TM74]
[Wyn56]
[YdDH+ 12]

[YIH+ 13]

1438

de Doncker, Yuasa, Ishikawa, Kapenga and Olagbemi

E. de Doncker, R. Zanny, K. Kaugars, and L. Cucos. Performance and irregular behavior of adaptive
task partitioning. In Lecture Notes in Computer Science, volume 2074, pages 118–127. SpringerVerlag, 2001.
J. Fujimoto, T. Ishikawa, and D. Perret-Gallix. High precision numerical computations - a case for
an HAPPY design, 2005. ACPP IRG note: ACPP-N-1, KEK-CP-164.
A. Genz. An adaptive numerical integration algorithm for simplices. In N. A. Sherwani, E. de Doncker, and J. A. Kapenga, editors, Lecture Notes in Computer Science, volume 507, pages 279–285,
1990.
A. Genz and R. Kass. Subregion adaptive integration of functions having a dominant peak. J. Comp.
Graph. Stat., 6:92–111, 1997.
A. Grundmann and H.M. M¨oller. Invariant integration formulas for the n-simplex by combinatorial
methods. SIAM J. Numer. Anal., 15:282–290, 1978.
A.C. Genz and A.A. Malik. An adaptive algorithm for numerical integration over an n-dimensional
rectangular region. Journal of Computational and Applied Mathematics, 6:295–302, 1980.
A.C. Genz and A.A. Malik. An imbedded family of multidimensional integration rules. SIAM J.
Numer. Anal., 20:580–588, 1983.
M. Iri, S. Moriguti, and Y. Takasawa. On a numerical integration formula (in japanese), 1970.
S. Motoki, H. Daisaka, N. Nakasato, T. Ishikawa, F. Yuasa, T. Fukushige, A. Kawai, and J. Makino.
A development of an accelerator board dedicated for multi-precision arithmetic operations and its
application to Feynman loop integrals. arXiv:1410.3252v1 [hep-ph] 13 Oct. 2014.
Open-MPI. http://www.open-mpi.org.
ParInt. http://www.cs.wmich.edu/parint.
¨
R. Piessens, E. de Doncker, C. W. Uberhuber,
and D. K. Kahaner. QUADPACK, A Subroutine
Package for Automatic Integration, volume 1 of Springer Series in Computational Mathematics.
Springer-Verlag, 1983.
I. Robinson and E. de Doncker. Algorithm 45 - automatic computation of improper integrals over a
bounded or unbounded planar region. Computing, 27:253–284, 1981.
D. Roose and E. de Doncker. Algorithm 022 - automatic integration over a sphere. Journal of
Computational and Applied Mathematics, 7:203–224, 1981.
D. Shanks. Non-linear transformations of divergent and slowly convergent sequences. J. Math. and
Phys., 34:1–42, 1955.
A. Sidi. Extension and completion of wynn’s theory on convergence of columns of the epsilon
table. Journal of Approximation Theory, 86:21–40, 1996.
A. Sidi. Acceleration of convergence of general linear sequences by the Shanks transformation.
Numer. Math., 119:725–764, 2011.
T. W. Sag and G. Szekeres. Numerical evaluation of high-dimensional integrals. Math. Comp.,
18(86):245–253, 1964.
H. Takahasi and M. Mori. Double exponential formulas for numerical integration. Publications of
the Research Institute for Mathematical Sciences, 9(3):721–741, 1974.
P. Wynn. On a device for computing the em (sn ) transformation. Mathematical Tables and Aids to
Computing, 10:91–96, 1956.
F. Yuasa, E. de Doncker, N. Hamaguchi, T. Ishikawa, K. Kato, Y. Kurihara, and Y. Shimizu. Numerical computation of two-loop box diagrams with masses. Journal Computer Physics Communications, 183:2136–2144, 2012.
F. Yuasa, T. Ishikawa, N. Hamaguchi, T. Koike, and N. Nakasato. Acceleration of feynman loop
integrals in high energy physics on many core GPUs. Journal of Physics: Conf. Ser., 454(012081),
2013. doi:10.1088/1742-6596/454/1/012081.

