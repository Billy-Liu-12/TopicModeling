Procedia Computer Science
Volume 80, 2016, Pages 599–606
ICCS 2016. The International Conference on Computational
Science

Recovering the MSS-sequence via CA
Sara D. Cardell1 and Amparo F´
uster-Sabater2∗
1

2

Instituto de Matem´
atica, Estat´ıstica
e Computa¸c˜
ao Cient´ıﬁca
UNICAMP, Campinas, Brazil
sdcardell@ime.unicamp.br
Instituto de Tecnolog´ıas F´ısicas y de la Informaci´
on
CSIC, Madrid, Spain
amparo@iec.csic.es

Abstract
A cryptographic sequence generator, the modiﬁed self-shrinking generator (MSSG), was recently designed as a novel version of the self-shrinking generator. Taking advantage of the
cryptographic properties of the irregularly decimated generator class, the MSSG was mainly
created to be used in stream cipher applications and hardware implementations. Nevertheless,
in this work it is shown that the MSSG output sequence, the so-called modiﬁed self-shrunken
sequence, is generated as one of the output sequences of a linear model based on Cellular Automata that use rule 60 for their computations. Thus, the linearity of these structures can be
advantageous exploited to recover the complete modiﬁed self-shrunken sequence from a number
of intercepted bits.
Keywords: Modiﬁed Self-Shrinking Generator, Cellular Automata, Rule 60, Cryptography

1

Introduction

Symmetric key ciphers, also known as secret key ciphers [10, 12], are characterized by the fact
that the same key is used in both encryption and decryption processes. They are commonly
classiﬁed into block ciphers and stream ciphers. As opposed to block ciphers, in stream ciphers
the symbol size to be encrypted equals the size of each character in the alphabet. If we use a
binary alphabet, then the encryption is performed bit by bit, that is, every bit in the original
message (plaintext) is encrypted separate and independently from the previous or the following
bits. Consequently, patterns in the plaintext are not recognizable in the encrypted message
(ciphertext) and error propagation is very limited. Many of the technical characteristics of
∗ The work of the ﬁrst author was supported by FAPESP with number of process 2015/07246-0. The work of
the second author was supported by both Ministerio de Econom´ıa y Competitividad, Spain, under grant number
TIN2014-55325-C2-1-R (ProCriCiS), and Comunidad de Madrid, Spain, under grant number S2013/ICE-3095CM (CIBERDINE).

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.346

599

Recovering the MSS-sequence via CA

Cardell and F´
uster-Sabater

stream ciphers make them suitable for their use in telecommunication and low-level networks.
Indeed, they are usually much faster than block ciphers and their implementation is clearly less
expensive in terms of hardware gates and memory. From a short secret key, a stream cipher
generates a long random looking sequence (keystream). Then, we can encrypt messages just
bitwise XOR-ing the plaintext and the keystream to obtain the ciphertext. Later, decryption
is performed by bitwise XOR-ing the ciphertext and the same keystream. In fact, this is a
widely used approach for stream ciphers, called additive stream ciphers. A famous example of
an additive stream cipher is the well-known one-time pad [10, 12]. Algorithms which generate
keystreams from a secret key are called keystream generators.
Sequence generators based on Linear Feedback Shift Registers (LFSR) are very commom
procedures to generate this keystream sequence used in stream cipher [5]. Sequences generated
by LFSRs, PN-sequences, exhibit desirable cryptographic properties such as: long period, adequate statistics and good correlation. Nevertheless, due to their low linear complexity, LFSRs
should never be used alone as keystream generators. In fact, their linear complexity has to be
dramatically increased before such sequences are used for cryptographic purposes.
The keystream sequence generators based on irregular decimation were ﬁrst introduced to
break the linearity of the PN-sequences produced by LFSRs. However, it has been proven that
this sort of generators can be modeled using linear structures based on cellular automata (CA)
[3, 4, 1]. The modiﬁed self-shrinking generator is a new and diﬀerent version of the self-shrinking
generator [9], introduced by Kanso in [7]. This generator uses an extended decimation rule based
on the XORed value of a pair of bits. Although the keystreams generated have lower bounds on
the period and linear complexity that are less than those of the self-shrinking generator, they
are shown to provide a higher level of security against various well-known cryptanalytic attacks
and demonstrated to possess better randomness properties [7]. However, in this work, we model
these sequences in terms of linear cellular automata, which is a weakness of the generator. The
length of these automata is the same as that of the linear complexity of the sequence.
The paper is organized as follows: In Section 2, the basic concepts required to understand
the rest of the work are introduced. In Section 3, it is shown how to obtain the modiﬁed
self-shrunken sequence through linear, regular, null cellular automata that use rule 60. In
Section 4, a deterministic algorithm on recovering the complete sequence given a ﬁxed number
of intercepted bits is provided. Finally, this paper closes in Section 5 with some conclusions.

2

Preliminaries

The task of generating a keystream sequences from a short key can be implemented with a
Linear Feedback Shift Register (LFSR) [5]. In fact, an LFSR is an electronic device with
l memory cells (stages), shift to the adjacent stage and linear feedback to the empty stage. If
the characteristic polynomial of the linear recurrence sequence is primitive, then the LFSR is
said to be maximal-length and its output sequence has period 2l − 1. This output sequence is
called PN-sequence (pseudo-noise sequence) or m-sequence (maximal sequence).
The linear complexity, denoted by LC, of a sequence {si } is deﬁned as the length of the
shortest LFSR that can generate such a sequence. The linear complexity is related with the
amount of sequence needed to recover the whole sequence. In cryptographic applications, the
linear complexity must be as large as possible.
The modiﬁed self-shrinking generator (MSSG) was introduced by Kanso [7]. The PNsequence generated by a maximum-length LFSR is self-decimated. The decimation rule is
very simple and can be described as follows: Given three consecutive bits {a2i , a2i+1 , a2i+2 },
600

Recovering the MSS-sequence via CA

Cardell and F´
uster-Sabater

i = 0, 1, 2, . . . of a PN-sequence {ai }, the output sequence {sj } is computed as
If a2i + a2i+1 = 1 then sj = a2i+2
If a2i + a2i+1 = 0 then a2i+2 is discarded.
The output sequence {sj } is known as the modiﬁed self-shrunken sequence (MSSsequence). If l is the length of the maximum-length LFSR that generates {ai }, then the linear
complexity LC of the corresponding modiﬁed self-shrunken sequence satisﬁes:
2

l
3

−1

≤ LC ≤ 2l−1 − (l − 2),

and the period T of the sequence satisﬁes:
2

l
3

≤ T ≤ 2l−1

as proved in [7]. As usual, the key of this generator is the initial state of the register that
generates the PN-sequence {ai }. The characteristic polynomial of the register, p(x), is also
recommended to be part of the key.
Now, a clarifying example is introduced.
Example 1. Consider the LFSR of length l = 3 with characteristic polynomial p(x) = x3 +x2 +1
and initial state IS = (1 1 1). The PN-sequence generated is 1110100 . . . with period T = 23 −1.
The MSS-sequence can be computed as follows:
1
R: 11 ✁
❆ 0 1 0 0 1 1 1 0 1 0 0 ✁❆1 1 1 ✁❆0 1 0 0 . . .
0

1

1

1

0

0

1

The sequence 0110 . . . has period T = 4 and it is possible to check that its characteristic polynomial is ps (x) = (x + 1)3 . Thus, the linear complexity of this modiﬁed self-shrunken sequence
is LC = 3.
Elementary Cellular automata (CA) are the simplest class of one-dimensional cellular
automata. They are discrete models with diﬀerent values for each cell (binary values in our
work). The contents are updated following a function of k variables [13] called rule. The value
, depends on the value of the k neighbour cells at
of the cell in position i at time t + 1, xt+1
i
time t. If these rules are composed exclusively by XOR operations, then the CA is said to be
linear. In this work, the CA considered are regular (every cell follows the same rule) and null
(null cells are considered adjacent to extreme cells). For k = 3, the rule 60 is given by:
Rule 60: xt+1
= xti−1 + xti
i
111
0

110
0

101
1

100
1

011
1

010
1

001
0

000
0

According to Wolfram’s nomenclature [14], the name rule 60 is due to the fact that 00111100
is the binary representation of the decimal number 60.
In Table 1, there is an example of a linear regular null CA with rule 60 and initial state
(110).
Due to the randomness of the generated sequences and their quick generation, CAs are good
basic elements for stream cipher applications. Several authors have proposed stream ciphers
based on CA (see for instance [11, 2, 6]).
601

Recovering the MSS-sequence via CA

Cardell and F´
uster-Sabater

Table 1: Linear regular null CA with rule 60
60
1
1
1
1
..
.

3

60
1
0
1
0
..
.

60
0
1
1
0
..
.

Modelization of the modiﬁed self-shrinking sequence

The aim of this section is to construct a family of CA that generates the MSS-sequence as one
of their output sequences.
The characteristic polynomial of the MSS-sequence is given by pLC (x) = (x + 1)LC , where
LC is the linear complexity of the sequence. It is worth noticing that the characteristic polynomial of the sequence produced by the self-shrinking generator has the same form [4].
Lemma 1. [1, Theorem 1] Let {si } be a binary sequence whose characteristic polynomial is
pn (x) = (x + 1)n . Then, the characteristic polynomial of the sequence {ti }, where ti = si + si+1 ,
is pn−1 (x) = (x + 1)n−1 .
Last result helps us to introduce the following theorem.
Theorem 1. Given a MSS-sequence, there exists a linear, regular, null CA, with rule 60 that
generates such a sequence in its most right column. The length of such a CA is LC, the linear
complexity of the MSS-sequence.
Proof. Assume we put the MSS-sequence as the right most vertical sequence of a null CA that
only uses rule 60. According to Lemma 1 and the recursive function of rule 60, the next vertical
sequences (from right to left) have pi (x) = (x + 1)i , for i = LC, LC − 1, . . . , 1 as characteristic
polynomials, respectively. The left most sequence will be the identically 1 sequence, since
its characteristic polynomial is p1 = (x + 1). The next sequences would be the identically
0 sequences. Therefore, there exists such CA that generates the MSS-sequence as one of its
output sequences.
Let us see in illustrative example.
Example 2. Consider the LFSR with the primitive polynomial p(x) = x5 + x3 + 1 as characteristic polynomial and initial state IS = (0 0 0 0 1). The corresponding MSS-sequence is given
by:
0100001100111011
It has period T = 16 and it is not diﬃcult to verify that its characteristic polynomial corresponds
to p13 (x) = (x + 1)13 . Thus, the linear complexity is LC = 13, and there exists a regular, null,
CA of length 13 that generates it (see Table 2).
It is possible to check that the sequences of the CA have a well determined structure:
• The sequence in the most left column is the identically 1 sequence.
602

Recovering the MSS-sequence via CA

Table 2:
60
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

Cardell and F´
uster-Sabater

CA of length 13 that generates the
60 60 60 60 60 60 60
1
1
1
0
1
1
1
0
0
0
1
1
0
0
1
0
0
1
0
1
0
0
1
0
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
1
0
0
1
0
0
0
1
1
0
0
1
0
0
1
0
1
1
1
1
0
1
1
1
0
0
0
1
1
0
0
1
0
0
1
0
1
0
0
1
0
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
1
0
0
1
0
0
0
1
1
0
0
1
0
0
1
0
1

MSS-sequence in Example 2
60 60 60 60 60
0
1
0
1
0
1
1
1
1
1
0
1
0
0
0
1
1
0
0
0
0
0
1
0
0
0
0
1
1
0
0
0
1
0
1
0
0
1
1
1
1
0
1
0
0
0
1
1
1
0
0
1
0
0
1
0
1
1
0
1
1
1
0
1
1
1
0
1
1
0
1
1
1
1
0
1
0
0
1
1

• Then, there are 2t−1 sequences of period 2t , for 1 ≤ t ≤ l − 2.
• Finally, there are LC − 2l−2 sequences of period 2l−1 (including the MSS-sequence).
In Table 2, it is possible to check that the most left sequence is the identically 1 sequence.
Besides, there are one sequence of period 2, two sequences of period 4, four sequences of period
8 and ﬁve sequences of period 16.
On the other hand, it is worth noticing that rule 102, given by
= xti + xti+1
Rule 102: xt+1
i
111
0

110
1

101
1

100
0

011
0

010
1

001
1

000
0

generates exactly the same vertical sequences in the CA but in reverse order. For instance,
in Table 3, we have a CA that uses rule 102 and generates the same sequences as those of
the CA in Table 1. As a consequence, the modelling developed from rule 60 can be equally
developed from rule 102. Summarizing, we have constructed two families of linear, regular, null
CA with rules 102 and 60 able to generate the modiﬁed self-shrunken sequence as one of its
output vertical sequences.

4

Recovering the sequence

Assume LC is the linear complexity of the MSS-sequence. Given 2 · LC intercepted bits, it
is possible to determine the shortest LFSR that generates such a sequence by means of the
Berlekamp-Massey algorithm [8].
We know that there exists a CA of length LC that generates the MSS-sequence. Besides,
we know that its most left sequence is always the identically 1 sequence. Therefore, it is enough
603

Recovering the MSS-sequence via CA

Cardell and F´
uster-Sabater

Table 3: Linear regular periodic CA with rule 102
102
0
1
1
0
..
.

102
1
0
1
0
..
.

102
1
1
1
1
..
.

Algorithm 1. Recover(s)
Recover(s): Compute the initial state of the CA
Input:
s : LC intercepted bits of the MSS-sequence
01: ISCA = s0 ;
02: for i = 1 to LC − 2
03:
for j = 0 to LC − i − 1
04:
sj = sj + sj+1
05:
end for
06:
sLC−i = [];
07:
ISCA = [s0 , ISCA ];
08: end for
Output:
ISCA : Initial state of the CA that generates the MSS-sequence
as its right most sequence.
to intercept LC − 1 bits of the sequence, {ss}, to recover the initial state, ISCA , of the CA and,
consequently, to recover the complete sequence (see Algorithm 1). Notice that this sequence
amount is half the needed bits to apply the Berlekamp-Massey algorithm.
Furthermore, the number of XOR operations needed to compute the CA initial state is:
LC−2

i=
i=1

(LC − 1)(LC − 2)
2

In Example 2, the MSS-sequence had period 16 and linear complexity 13. In Table 4, we
can see that intercepting 12 bits of the sequence (in bold), we can recover the complete initial
state of the CA (in grey) and, thus, the complete sequence.
Furthermore, the number of XOR-operations needed to recover the initial state is given by:
13−2

i=
i=1

5

(13 − 1)(13 − 2)
= 66
2

Conclusions

Irregular decimation-based sequence generators have been designed to break the linearity of the
PN-sequences generated by LFSRs. However, it has been proven that the output sequences of
such generators can be modelled as the output sequences of linear CA. In fact, in this work
604

Recovering the MSS-sequence via CA

60
1

Table 4: Recovery of the initial
60 60 60 60 60 60
1
1
1
0
1
1
0
0
1
1
0
0
1
0
1
1
1
1
0
0
0

Cardell and F´
uster-Sabater

state
60
1
0
0
1
0
0
0

of CA in Example 2
60 60 60 60 60
0
1
0
1
0
1
1
1
1
1
1
0
0
0
0
1
1
0
0
0
0
0
1
0
0
0
0
1
1
0
0
0
1
0
1
0
0
1
1
1
1
0
1
0
0
1
1
1
0
1
0
0
0
1
1
0
1
1
1

the modiﬁed self-shrinking generator has been modelled by means of linear structures based on
one-dimensional, regular, null CA with rule 60 (or 102). Moreover, given LC − 1 intercepted
bits of the modiﬁed self-shrunken sequence, a deterministic algorithm has been proposed and
developed to recover the whole sequence. Thus, the linearity of these cellular models can be
advantageously used in the analysis and cryptanalysis of such keystream generators.

References
[1] Sara D. Cardell and Amparo F´
uster-Sabater. Linear models for the self-shrinking generator based
on CA. Journal of Cellular Automata, Accepted, 2016.
[2] Sourav Das and Dipanwita RoyChowdhury. Car30: A new scalable stream cipher with rule 30.
Cryptography and Communications, 5(2):137–162, 2013.
[3] Amparo F´
uster-Sabater and Pino Caballero-Gil. Linear solutions for cryptographic nonlinear
sequence generators. Physics Letters A, 369:432–437, 2007.
[4] Amparo F´
uster-Sabater, M. Eugenia Pazo-Robles, and Pino Caballero-Gil. A simple linearization
of the self-shrinking generator by means of cellular automata. Neural Networks, 23(3):461–464,
2010.
[5] Solomon W. Golomb. Shift Register-Sequences. Aegean Park Press, Laguna Hill, California, 1982.
[6] Jimmy Jose, Sourav Das, and Dipanwita RoyChowdhury. Inapplicability of fault attacks against
trivium on a cellular automata based stream cipher. In 11th International Conference on Cellular
Automata for Research and Industry, ACRI 2014, volume 875 of Lecture Notes in Computer
Science, pages 427–436. Springer-Verlag, 2014.
[7] Ali Kanso. Modiﬁed self-shrinking generator. Computers and Electrical Engineering, 36(1):993–
1001, 2010.
[8] James L. Massey. Shift-register synthesis and BCH decoding. IEEE Transactions on Information
Theory, 15(1):122–127, 1969.

605

Recovering the MSS-sequence via CA

Cardell and F´
uster-Sabater

[9] Willi Meier and Othmar Staﬀelbach. The self-shrinking generator. In Christian Cachin and Jan
Camenisch, editors, Advances in Cryptology – EUROCRYPT 1994, volume 950 of Lecture Notes
in Computer Science, pages 205–214. Springer-Verlag, 1994.
[10] Alfred J. Menezes, Paul C. van Oorschot, and Scott A. Vanstone. Handbook of Applied Cryptography. CRC Press, Boca Raton, FL, 1996.
[11] Miodrag Mihaljevi´c, Yuliang Zheng, and H Imai. A fast and secure stream cipher based on cellular
automata over GF(q). In Proceedings of the Global Telecommunications Conference, GLOBECOM
1998, volume 6, pages 3250–3255, 1998.
[12] Bruce Schneier. Applied Cryptography. John Wiley & Sons, New York, NY, second edition, 1996.
[13] Stephen Wolfram. Cellular automata as simple self-organizing system. Caltrech preprint CALT
68–938, 1982.
[14] Stephen Wolfram. Cellular automata as models of complexity. Nature, 311(5985):419–424, 1984.

606

