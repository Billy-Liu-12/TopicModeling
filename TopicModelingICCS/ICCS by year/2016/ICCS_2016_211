Procedia Computer Science
Volume 80, 2016, Pages 712–721
ICCS 2016. The International Conference on Computational
Science

Natural Language Processing using Kepler Workﬂow
System: First Steps
Ankit Goyal1 , Alok Singh2 , Shitij Bhargava1 , Daniel Crawl2 , Ilkay Altintas2 ,
and Chun-Nan Hsu3
1

3

Department of Computer Science and Engineering, University of California, San Diego
a3goyal@ucsd.edu, shbharga@ucsd.edu
2
San Diego Supercomputer Center, University of California, San Diego
a1singh@ucsd.edu, crawl@sdsc.edu, altintas@sdsc.edu
Department of Biomedical Informatics, School of Medicine, University of California, San Diego
chunnan@ucsd.edu

Abstract
Scientiﬁc community across many disciplines is exploring new ways to extract knowledge from
all available sources. Historically, written manuscripts have been the media of choice for recording experimental ﬁndings. Many disciplines such as social science, medical science are exploring ways to automate knowledge discovery from a vast repository of published scientiﬁc work.
This work attempts to accelerate the process of information extraction by extending Kepler, a
graphical workﬂow management tool. Kepler provides a simple way of designing and executing
complex workﬂows in the form of directed graphs. This work presents a scalable approach
to convert published research as PDF documents into indexable XML documents using Kepler. This conversion is a critical step in the Natural Language Processing pipeline. Kepler’s
distributed data processing capability enables scientists to scale this critical computation by
simply adding more computing resources over the cloud.
Keywords: Kepler, Scalable Document Conversion, Natural Language Processing

1

Introduction

Text Extraction is an important part of the current system for data mining in medical literature.
Researchers and scholars around the world need to extract required textual information from
the published articles to carry out their work further. The ﬁeld of Biomedical Text Mining
(BioNLP) is related to extraction of text and information retrieval from the text and literature
related to the biomedical and molecular biology domain. Some of the applications of this
area include entity recognition such as protein, gene, chemical compound and drug detection,
the association of gene clusters, the automatic extraction of protein interactions and their
relationships to functional concepts. As the number of electronically published medical articles
712

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.358

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

is substantially increasing, the need for scalable text extracting strategies from these sources is
also pressing.
The accuracy of currently available text extractors that derive information from electronic
articles is restricted due to the number of data types they handle. In this work, we propose
a workﬂow-based approach that leverages multiple data types and correlates processed output
from each source to converge towards a more accurate document conversion.
The rest of this paper talks about a full-ﬂedged pipeline to support extraction of textual
information from the PDF ﬁles. We present a distributed workﬂow for eﬃcient document
conversion of PDF documents to XML ﬁles diﬀerent tools and platforms. In Section 2 we
talk about the ﬁeld where this work is currently put to use with Section 3 discussing about
the overall model and individual components in the workﬂow. Section 4 talks about various
experiments conducted and the corresponding results are discussed in Section 5. Similar eﬀorts
in this area and their implications are further explored in section 6. Finally, we conclude with
our ﬁndings and planned future work in section 7.

2

Motivation

PubMed1 is a search engine maintained by the United States National Library of Medicine
(NLM) at the National Institutes of Health. This database provides access to references and
abstracts of published technical literature on topics related to life sciences and biomedical
sciences. Out of 24 million citations on biomedical literature stored in PubMed, only about 3.4
million are available as free text. This problem is further exacerbated by the unavailability of
free text with new publications uploaded in PDF format. Hence, researchers performing text
mining on journals in PubMed have to work with PDF ﬁles instead of the plain text.
There are a variety of tools available that convert PDF documents to text formats such as
PDFBox [1], pdf2text2 and Adobe Acrobat SDK3 . However, they do not provide any sectional
information directly. This section level indexing information enables users to directly refer to
a speciﬁc portion of an article. To overcome this, PDFX [2] converts scholarly articles in PDF
format to XML which are conformational to JATS [3] schema and contain detailed sectional
information like abstract, references, tables and so on.
While using PDFX solves the above issue, transcribing PDF documents to text accurately
is not an easy task because of a multitude of reasons. One major among them is the diﬀerences
in formatting styles which might also lead to multiple reading orders. Another source of the
problem arises due to diﬀerences in character encoding and erroneous transcribing of nonalphanumeric characters.
To address these issues, a modular approach is presented that integrates output from multiple processing pipelines and converges to a more accurate document than any of these pipelines
would individually produce. This approach extracts text from PDF ﬁles using text extraction
tools such as Tesseract [4] and PDFBox in addition to XMLs generated using PDFX. PDFBox
is an open source library in Java used to extract the Unicode text from PDF documents. It also
does some post-processing on the extracted text like combining words split across the boundary
and outputs the whole text irrespective of the formatting styles. Tesseract is a raw OCR engine
which can be used to recognize text from a PDF ﬁle as it is seen by a human reader. It is useful
in recognition of special and non-alphanumeric characters.
1 PubMed:

http://www.ncbi.nlm.nih.gov/pubmed
http://www.pdf2text.com
3 Acrobat SDK: http://www.adobe.com/devnet/acrobat.html
2 PDF2Text:

713

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

Figure 1: Flowchart Diagram

In this workﬂow, we provide a PDF ﬁle to 3 modules each of which can run independently
and produce an output containing extracted data from PDF ﬁle. This extracted data is fed
to a corrector module which combines these outputs and performs various corrections such as
Abstract Tile correction, Special Character correction, Reference Acknowledgement corrections
to produce an output in XML format. This workﬂow is based on the project “bioPDFX” which
is aimed towards the conversion of PDF documents to XML ﬁle which would be further used
for extracting data for curation of the Genome-Wide Association Sequence (GWAS) catalog
[5]. This catalog contains the published association between SNPs and phenotypes as identiﬁed
by NLM and is generally maintained by expert curators. However, the project “bioPDFX” is
directed towards solving this problem by applying text extraction techniques in data mining.
The overall ﬂowchart diagram of this process is summarised in Figure 1.

3

Workﬂow and Components

Kepler [6] is an open-source scientiﬁc workﬂow system developed in collaboration with several
projects from diﬀerent scientiﬁc and technology areas. Kepler is based on Ptolemy II [7], a
modeling tool for heterogeneous, concurrent systems and follows an actor-oriented modeling
approach. In this approach, the data-centric computational components (actors), control-ﬂowcentric scheduling and activation mechanisms (frameworks) are distinctly classiﬁed. In Kepler,
714

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

Figure 2: Kepler Workﬂow

a workﬂow is viewed as a composition of independent actor components that have input/output
ports for communication, and parameters to customize actor behavior. The execution semantics
of such workﬂow graphs are controlled by a separate director component, which deﬁnes the
overall model of computation and how actors communicate with one another.
The actor-based programming paradigm of Kepler enforces modularity, which decouples
diﬀerent tasks based on their functions. This decoupling enhances the agile development of
each module independently and hence provides a scalable development approach.
We translate the document conversion algorithm [8] into Kepler using diﬀerent actors and
use port connections among them to reﬂect the data ﬂow. Each module in the Kepler workﬂow
triggers execution of a standalone Python script using an external execution actor. The outputs
from each of these modules is fed into another external execution actor “Corrector” which
combines and integrates them to produce the ﬁnal output XML ﬁle. Figure 2 depicts the
overall Kepler workﬂow model along with diﬀerent modules and data ﬂow.

3.1

PDFBox

PDFBox is an open-source Java library which can be used to interact with PDF ﬁles. Using
this library one can create new PDFs, split a PDF ﬁle into multiple ﬁles and extract data out of
PDF ﬁles. In this project, we are using this tool to extract textual information from a PDF ﬁle
and then using it for further processing. An external execution actor calls into the required API
from this library which does the required processing and gives the extracted text as a Unicode
string as output. One advantage that Kepler provides is the capability of keeping this output
in memory rather than saving it on disk and hence avoiding I/O delays.

3.2

PDFX

PDFX is a web-service designed to reconstruct the logical structure of scholarly articles in
PDF form and output them as an XML document. The output document depicts the input
715

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

article’s logical structure in terms of title, sections, tables, references, etc. and also links it to
geometrical typesetting markers in the original PDF document, such as paragraph and column
breaks. Kepler can directly call this web-service using the cURL command inside an external
execution actor and read the output XML ﬁle into the memory. This XML ﬁle forms the base
of our ﬁnal output and diﬀerent corrections and modiﬁcations are incorporated into this XML
as described in further sections.

3.3

Tesseract

As a ﬁnal step of text extraction, we use Tesseract which is a raw OCR tool with high character
recognition accuracy and extracts text in simple textual format without any formatting. This
tool works page-wise to extract text from PDF ﬁle and combines these multiple page outputs
into a single output. The output of OCR is diﬀerent from that of PDFBox: OCR recognizes
text using optical recognition techniques and produces output closer in their appearance as they
appear to a human eye whereas PDFBox extracts text as they are encoded in the PDF ﬁle.
One can use Kepler to run Tesserct on a multi-page PDF ﬁle using multiple parallel threads
rather than a single serial thread as is the current case.

3.4

Corrector

Using the outputs from the above 3 modules we run the corrector stage, which manipulates
and combines them to produce the ﬁnal output. As these 3 modules run independent of each
other, we can leverage Kepler to run them in parallel on a multi-node cluster. The corrector
stage is a combination of multiple correctors which act on the output from previous corrector
and hence these correctors run in a serial order. This stage is a Python script which is arranged
in a serial order of multiple correctors as explained below and Kepler calls this Python script
using an external execution actor.
The ﬁrst corrector is a “Title-Abstract Corrector” which corrects the title and abstract of
the article using the PDFX output and the article data from the PubMed server. After this we
run the “Ref-Ack Corrector” which identiﬁes the references and acknowledgement sections in
the article using an already trained classiﬁer and removes them from the XML as these are not
required for our data mining stage. The classiﬁer recognizes the reference and acknowledgement
section in the converted XML using diﬀerent features related to these sections and removes them
from the ﬁnal output XML. The output from OCR is used in a “Special Character Corrector”
which replaces all the incorrectly identiﬁed special characters like ‘@’, ‘!’ and so on to produce
the ﬁnal output XML. This is done by aligning the text from OCR and PDFX using the n-gram
model at character level and is based on a logic similar to the gene sequence alignment. This,
along with a suitable scoring mechanism, gives us possible candidates for correction which are
then incorporated accordingly.

4

Experiments

We designed a Kepler workﬂow as described in the previous sections and executed it on Apache
Spark [9] server. The choice of Spark was made over Hadoop because of Spark’s ability to
compute operations “in-memory” and thus providing better speed and agility over the traditional Hadoop system. Using this system, a performance improvement evaluation was done in
comparison to a standalone execution. The standalone execution included running the whole
716

Scalable document conversion in Kepler

(a) Workﬂow for MapOnly

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

(b) MapOnly settings in Spark

Figure 3: Depiction of MapOnly implementation in Kepler using Spark

algorithm as a Python script without including any Kepler optimizations or parallelization of
any sort.
For our performance analysis, we used over 200 ﬁles which were downloaded from the
PubMed Central Server which were directly associated with the underlying problem domain of
data mining from BioMedical literature or for BioNLP. These PDF ﬁles varied in their overall
ﬁle sizes, ﬁle contents and page counts and hence provided us with a good representation of the
complete set of PubMed ﬁles. The execution time for each of these 200 PDF ﬁles was computed
for both standalone execution and Kepler workﬂow execution.
The setup involved creating a Spark server on a Lenovo Workstation machine with a Java
Virtual Machine and Kepler installed on it. The workstation had 4 cores and using this,
we created a Spark cluster on it to run the Kepler workﬂow directly. This helped us avoid
the hassle of maintaining diﬀerent nodes of a multi-machine cluster and we could complete
numerous runs over the dataset. In order to account for variance due to intermittent issues
such as network latency, I/O latencies, etc., both standalone and workﬂow executions ran the
conversion software 3 times over the whole dataset and an average over the execution numbers
was taken as the ﬁnal values. To avoid false acceleration in execution due to warm cache lines
the whole server was refreshed and the caches were cleared before each execution.
To run parallel instances of the workﬂow on the Spark cluster we used the Map-only functionality in Kepler. Separate runs were performed for the 2 cases: with the workﬂow running
on a single thread with each PDF ﬁle being processed in serial order and on a multithreaded environment to compare the overall improvement while leveraging parallel execution using Spark.
Figure 3 denotes the workﬂow for implementation of MapOnly function and various parameters
in Kepler that were used during the workﬂow execution. The sub-workﬂow for within this Map
actor is already discussed in previous sections and depicted in Figure 2

5

Results

Kepler workﬂow execution demonstrates about 17% reduction in execution time in comparison
to the standalone version. This improvement metric varied from a minimum of 9% to a maximum performance gain of 26% when measuring single document conversions. The performance
also varied according to the size of the PDF ﬁles with bigger ﬁles showing better improvements
in comparison to smaller ﬁles with fewer pages. This is a good indication and can be further
improved on incorporating more improvements in the complete workﬂow. The overall comparison of execution times per PDF ﬁle for both type of runs is depicted in Figure 4. In this ﬁgure,
717

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

Figure 4: Execution Time Comparison for Standalone vs Kepler Workﬂow
the horizontal axis denotes the PDF ﬁles which are sorted in order of increasing runtime for
standalone execution for better comparison.
Among the four major components of the workﬂow as described above, the OCR stage
involving Tesseract took most amount of time attributing to around 60% of the the total
execution time per PDF ﬁle. In addition to this, the overall execution time to complete the run
on all two hundred ﬁles showed a considerable improvement. Single threaded Python version
of the code took around 15 hours to complete the run on the entire dataset. Kepler, in single
threaded mode, completed the execution over entire dataset in less than 12 hours. When the
degree of parallelism in Kepler/Spark conﬁguration was increased to four to match the number
of cores on the machine, we saw a ∼75% reduction in execution time for the full dataset of two
hundred PDF documents in comparison to the single threaded execution.
The results demonstrate proof of concept that Kepler/Spark conﬁguration has enabled efﬁcient scalability of an existing single threaded document conversion application written in
Python. This setup could be deployed on a cloud virtual environment with quick installation
of Spark and Kepler to run a production level document conversion service.

6

Related Work

Text mining and informational retrieval tasks work eﬀectively on text-based formats such as
plain text, XML and HTML documents. The design goals of the PDF standard target ease of
human readability rather than electronic consumption of data by other software tools. Hence,
eﬃcient extraction of text from PDF documents is an orthogonal issue to the achievements of
the PDF standard. The PDF standard does not attempt to encode any semantic connection
between characters in a word or between paragraphs, but characters are “painted” individually
at speciﬁc coordinates [10]. PDF documents need to be transcribed to text for tasks such as text
mining and annotation. Berg et. al. [11] describes some challenges encountered in transcribing
PDF documents to text accurately.
718

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

A variety of tools are available that convert PDF to text such as PDFBox, pdf2text and
Adobe Acrobat SDK. XML transcription of a PDF, in general, would involve extraction of text,
tables, ﬁgures, footers, etc. and then tagging them with appropriate sections/regions to make
an XML. PDFX converts scholarly PDF articles to XMLs which have detailed sectional information such as title, abstract, references, tables, and acknowledgment. It derives transcription
parameters from the relative font sizes, style and spacing of each article rather than relying on
templates or a training phase.
Text post-processing is a step that improves the correctness of the generated text. Several
tools [11] deploy techniques from Optical Character Recognition (OCR) to increase the accuracy
in the post-processing stage. As most OCR engines classify each character independent of other
characters, it is important to post-process the text using some context like statistical language
models or syntactic and semantic rules. One such method suggested by Zhuang and Zhu [12]
reduces the candidate character search space for characters by using the candidate distance
information by an OCR engine in conjunction with an n-gram based language model and a
semantic lexicon.
In another method proposed by Velagapudi [13], contextual information was extracted by
modeling words/n-grams as sequences of characters and a Hidden Markov Model (HMM) was
subsequently used to decide the best sequence, using the given OCR output as the observation.
Transition probabilities of one character to another are calculated from a corpus and emission
probabilities are calculated from the output of the OCR engine on a corpus, to statistically
record the error patterns of the OCR engine.
At the word level, Tong and Evans [14] corrected OCR text by modeling the text as sequence
bigrams and then using HMM to compute the best word sequence. The system learns the
character level confusion probabilities for a particular OCR engine and uses it to achieve better
performance.
Several systems extract metadata such as authors, year of publication, journal name, and
bibliographical information from natural language text or PDFs directly. CERMINE [15] uses
supervised and unsupervised machine learning techniques to extract parsed bibliographic references and metadata directly from PDFs. FLUX-CiM [16] uses unsupervised, non-template
methods to extract citation components from articles.
Briesh et. al. [17] demonstrated that NLP applications can beneﬁt from the rapid deployment process and application re-usability gained by developing workﬂows in Kepler. Our
approach is to extend these capabilities further to enable end to end NLP processing in Kepler.
We develop an ensemble tool to post-process PDFX XMLs combining multiple input sources
to improve the quality of converted XMLs from published scientiﬁc articles. We accelerate the
document conversion speed by implementing this process as a workﬂow in Kepler and use
the Apache Spark engine to achieve scalability through distributed computing. A Kepler-based
document conversion workﬂow gives scientists the capability to deploy a scalable PDF document
conversion engine over the public cloud without writing any parallelization software.

7

Conclusions and Future Work

This paper presents our ﬁrst steps towards developing a full ﬂedged pipeline to support complex
Natural Language Processing tasks in Kepler. We present a distributed workﬂow for eﬃcient
document conversion of PDF documents to XML ﬁles using the Kepler platform and Apache
Spark execution engine.
An ensemble tool was created which combined multiple sources of inputs to create highquality XMLs from scientiﬁc PDF articles. This tool was able to improve the quality of XML
719

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

signiﬁcantly in terms of ﬁdelity of non-alphanumeric characters, segmentation of title, abstract,
references and acknowledgment, along with correct word order in text in comparison to the
already existing tools of similar functionality. Further, the initial single threaded Python application was extended by converting it into a Kepler workﬂow capable of running multi-threaded
document conversion application. The presented solution can be deployed on a distributed platform and is scalable with additional resources without the need to write additional software.
In the future, we would like to increase the level of parallelism by having many concurrent
threads per PDF document, as opposed to a single thread for each document. Currently the
parallelism converts several documents concurrently but each document is a single thread. The
document conversion workﬂow system mentioned in this paper can be deployed as a service
on the web where scientists can obtain fast batch conversion of scientiﬁc articles. We plan to
continue extending Kepler by adding modules that would facilitate complex Natural Language
Processing computations on text data. These extensions will enable scientists to perform useful
NLP operations using a graphical workﬂow programming model that scales dynamically with
resources available on distributed computing platforms.

Acknowledgments
Special thanks to Shweta Purawat for her prompt responsiveness to help us in resolving issues
during the deployment of distributed workow in Kepler. Research reported in this manuscript
were supported by the National Human Genome Research Institute (NHGRI) of the National
Institutes of Health under award number U01HG006894 and the CI Reuse and Advances in
Bioinformatics programs of the National Science Foundation under award number NSF DBI1062565. The content is solely the responsibility of the authors and does not necessarily represent the oﬃcial views of the National Institutes of Health and the National Science Foundation.

References
[1] PDFBox. Java PDF processing library. Link: http://www. pdfbox. org, 2014.
[2] Alexandru Constantin, Steve Pettifer, and Andrei Voronkov. PDFX: Fully-automated PDF-toXML Conversion of Scientiﬁc Literature. In Proceedings of the 2013 ACM Symposium on Document
Engineering, DocEng ’13, pages 177–180, New York, NY, USA, 2013. ACM.
[3] Huh Sun. Journal Article Tag Suite 1.0: National Information Standards Organization standard
of journal extensible markup language. Sci Ed, 1(2):99–104, 2014.
[4] Anthony Kay. Tesseract: an open-source optical character recognition engine. Linux Journal,
2007(159):2, 2007.
[5] Danielle Welter, Jacqueline MacArthur, Joannella Morales, Tony Burdett, Peggy Hall, Heather
Junkins, Alan Klemm, Paul Flicek, Teri Manolio, Lucia Hindorﬀ, et al. The NHGRI GWAS
catalog, a curated resource of SNP-trait associations. Nucleic acids research, 42(D1):D1001–
D1006, 2014.
[6] Ilkay Altintas, Jianwu Wang, Daniel Crawl, and Weizhong Li. Challenges and approaches for
distributed workﬂow-driven analysis of large-scale biological data: Vision paper. In Proceedings
of the 2012 Joint EDBT/ICDT Workshops, EDBT-ICDT ’12, pages 73–78, New York, NY, USA,
2012. ACM.
[7] Johan Eker, J¨
orn W Janneck, Edward A Lee, Jie Liu, Xiaojun Liu, Jozsef Ludvig, Stephen
Neuendorﬀer, Sonia Sachs, and Yuhong Xiong. Taming heterogeneity - the Ptolemy approach.
Proceedings of the IEEE, 91(1):127–144, 2003.
[8] Shitij Bhargava. Preparing PDF Scientiﬁc Articles for Biomedical Text Mining. 2015.

720

Scalable document conversion in Kepler

Goyal, Singh, Bhargava, Crawl, Altintas and Hsu

[9] Matei Zaharia, Mosharaf Chowdhury, Michael J. Franklin, Scott Shenker, and Ion Stoica. Spark:
Cluster computing with working sets. In Proceedings of the 2Nd USENIX Conference on Hot Topics
in Cloud Computing, HotCloud’10, pages 10–10, Berkeley, CA, USA, 2010. USENIX Association.
[10] Duﬀ Johnson. Each PDF Page is a Painting. http://talkingpdf.org/each-pdf-page-is-a-painting,
8:2010, 2010.
[11] Øyvind Raddum Berg, Stephan Oepen, and Jonathon Read. Towards high-quality text stream extraction from PDF: Technical background to the ACL 2012 contributed task. In Proceedings of the
ACL-2012 Special Workshop on Rediscovering 50 Years of Discoveries, pages 98–103. Association
for Computational Linguistics, 2012.
[12] Li Zhuang and Xiaoyan Zhu. An OCR Post-processing Approach Based on Multi-knowledge.
In Knowledge-Based Intelligent Information and Engineering Systems, number 3681 in Lecture
Notes in Computer Science, pages 346–352. Springer Berlin Heidelberg, September 2005. DOI:
10.1007/11552413 50.
[13] Prasanna Velagapudi. Using HMMs to boost accuracy in optical character recognition.
[14] Xian Tong and David A. Evans. A statistical approach to automatic ocr error correction in context.
In Proceedings of the Fourth Workshop on Very Large Corpora (WVLC-4, pages 88–100, 1996.
[15] D. Tkaczyk, P. Szostek, P.J. Dendek, M. Fedoryszak, and L. Bolikowski. CERMINE Automatic
Extraction of Metadata and References from Scientiﬁc Literature. In 2014 11th IAPR International
Workshop on Document Analysis Systems (DAS), pages 217–221, April 2014.
[16] Eli Cortez, Altigran S. da Silva, Marcos Andr´e Gon¸calves, Filipe Mesquita, and Edleno S.
de Moura. FLUX-CIM: Flexible Unsupervised Extraction of Citation Metadata. In Proceedings of the 7th ACM/IEEE-CS Joint Conference on Digital Libraries, JCDL ’07, pages 215–224,
New York, NY, USA, 2007. ACM.
[17] Doug Briesch, Reginald Hobbs, Claire Jaja, Brian Kjersten, and Clare Voss. Training and Evaluating a Statistical Part of Speech Tagger for Natural Language Applications using Kepler Workﬂows.
Procedia Computer Science, 9:1588–1594, 2012.

721

