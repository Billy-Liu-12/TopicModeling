Procedia Computer Science
Volume 80, 2016, Pages 1212–1222
ICCS 2016. The International Conference on Computational
Science

A VNS-based heuristic for solving the vehicle routing
problem with time windows and vehicle preventive
maintenance constraints
Amine Dhahri1 , Anis Mjirda2 , Kamel Zidi3 , and Khaled Ghedira4
1

4

National School of Computer Sciences, University of Manouba, 2010, Tunisia
aminedhahri@gmail.com
2
Technological Research Institute Railenium, France
anis.mjirda@gmail.com
3
Tabuk University, Community College, Saudi Arabia
zidi@ut.edu.sa
National School of Computer Sciences, University of Manouba, 2010, Tunisia
khaled.ghedira@isg.rnu.tn

Abstract
We address a vehicle routing problem with time windows (VRPTW) that also contains
vehicle with preventive maintenance constraints (VRPTW-PM) and propose a MIP mathematical
formulation as well as a general variable neighborhood search metaheuristic (VNS) to solve
with large instance the problematic situation. First we create a initial solution using Solomon
heuristic then we minimize the number of used routes, and then the total travelled distance by
all vehicles is minimized. Computational results show the eﬃciency of the proposed approach.
Keywords:

1

Introduction

Vehicle routing problem (VRP) is a well-known NP-hard combinatorial optimization problem. It
was proposed by Dantzig and Ramser in [1] and it is identiﬁed as a plan to follow for supplying
a set of customers using a set of vehicles, at the same time the cost of allocating vehicles to
customers must be minimized. A review of the VRP and resolution approaches can be found in
[6]. Vehicle routing problem with time windows (VRPTW) is a variant of VRP in which the
delivery beginning time is bounded by a time slot. In this paper, we propose extension of the
well-known VRPTW by adding vehicle preventive maintenance constrained. Indeed, a ﬂeet of
vehicles should be checked from time to time to avoid unpleasant interruption of services. For
that we propose a VNS metaheuristic to solve this problem. The majority of studies related to
the planning of the supply chain are placed in an environment where all vehicles are available.
1212

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.473

VNS for the VRPTW-PM

Amine, Anis, Kamel and Khaled

However, in reality this is not the case. Indeed, physical resources such as vehicles may be
unavailable for various reasons such as the daily driving limit. This problematic situation is
treated in [8]. Other deterministic instances of vehicle-based disruption can be due to vehicle
preventive maintenance inspections scheduled by the maintenance department, which is our case.
Vehicles can therefore be unavailable during certain periods, where dates and times are ﬁxed
and known beforehand (deterministic case). The problem addressed in this paper is a variant
of the VRPTW. In this case, the availability involves a vehicle k that requires maintenance
activities at time τ after leaving the depot and before making a delivery on its route to the ﬁnal
customer. We only look at the case where one vehicle is available because it is unusual to have
more than one vehicle that requires maintenance activities at the same time. In this situation,
we need to prepare a plan reﬂecting the constraints and objectives of the evolved environment
while minimizing the negative impact of disruption. Extra vehicles (EVs) may have to be used
to ﬁnish the provision of service to the unserved customers. The objective is to minimize the
number of used vehicles as well as the total travelled distance by all the vehicles. We describe
the the mathematical programming formulation in the next section.

2

Mathematical formulation

The VRPTW-PM is deﬁned as follows: given a graph (V ,A) where V = {0, ..., n + 1} a set of
vertices and A = {(i; j)|i, j; ∈ V } an arc set. A set K of identical vehicles with capacity Q,
localized initially at the depot 0 should attend n customers. For each customer i, there is known
demand denoted by qi and a service time windows (ei , li ) is deﬁned, where ei is the earliest
time that service can begin and li is the latest time that service can begin and service time
si . We denote by bik the time that vehicle k starts delivering customer i. Each arc (i, j) has
a non-negative distance dij and we denotes by Tk the time that vehicle k starts a preventive
maintenance activities (PM), and τk the time that PM take. bik is the set of variables to decide
when to serve a customer i with vehicle k. The objective is to ﬁnd a set of routes for vehicles
k delivering the demand qi for each customer i and satisfying the time windows constraints
and PM constraints while minimizing the total traveling distance. To model the problem we
introduce the following variables.

zijk

xijk

1 if Tk ∈ [bik , bjk ]
0 else

=

=

1 if vehicle k travel from customer ci to cj
0 else
v

min

z=

cij xijk

(1)

i∈V i∈V k=1

xijk = 1 ∀i ∈ V

s.t.

(2)

k∈K j∈N

x0jk = 1

∀k ∈ K

(3)

j∈N

1213

VNS for the VRPTW-PM

Amine, Anis, Kamel and Khaled

xjik = 0 ∀k ∈ K

xijk −

(4)

j∈N

i∈N

xi(n+1)k = 1 ∀k ∈ K

(5)

i∈N

xijk ≤ Q ∀k ∈ K

qi
i∈V

(6)

j∈N

bik + si + tij + zijk τk ≤ M ∗ (1 − xijk ) + bjk
i, j = 0, 1, .., n, i = j ∀k ∈ K ∀(i, j) ∈ A
ei ≤ bik ≤ li ∀k ∈ K, ∀i ∈ N
xijk ∈ {0, 1}
zijk ∈ {0, 1}

(7)
(8)
(9)
(10)

The objective function (1) represents the total cost to be minimized, it includes minimizing
the total travel distance. Constraints (2) ensure that customer i is delivered only by one vehicle
k. Constraints (3)-(5) are ﬂow constraints of the vehicle k; that is, each vehicle leaves the
depot, visits the customers, and then, returns to the depot. Constraints (6) guarantee that
the vehicle capacity is not exceeded. Constraints (7) and (8) signify the time constraints; to
make sure that time window is not violated, where Mij are large constants. For determining the
value of decision variable zijk when solving the MIP model for a given benchmark problem and
due to the dependence of bik , we must introduce a logical constraint when deﬁning constraint
(7) as; if Tk ∈ [bik , bjk ] then zijk = 1 else zijk = 0. According to [5], Mij can be replaced
by max {ei + di + cij − ej , 0} ∀(i, j) ∈ A. Constraints (9) and (10) deﬁne the domain of the
decision variables x and z.

3

Variable neighborhood search for the VRPTW-PM

Proposed by Hansen and Mladenovic in [7], variable neighborhood search VNS is a metaheuristic
based on the concept of systematic change of neighborhoods during the search, knowing that
there are several rules of crucial importance to govern this change. The basic VNS method has
several steps. Firstly it requires the deﬁnition of diﬀerent and several neighborhood structures,
denoted N1 , . . . , Nk max generally from diﬀerent sizes and cardinalities. A relation order between
these structures is deﬁned in terms of the problem. From an initial solution x, a neighbor of
x is selected randomly using the neighborhood structure N1 . If the solution obtained after
the application of a local search method (which is deﬁned) is better than the initial solution,
then VNS resumes the search from this solution. Otherwise, a solution is selected using a
neighborhood of upper range, (in our case, it is the neighborhood N2 ). Local search is applied
to this solution, and so on. This method allows escaping from a local optimum if it is a local
optimum for a neighborhood for a range smaller than the max. General VNS (GVNS) uses a
Variable Neighborhood Descent (VND) as its local search subroutine.

3.1

Feasibility checking

To check the feasibility of a given solution we must check the arrival time bjk of the vehicle k
that must supply the customer j, ei , bjk , d(i,j) , zijk and πk are described in section 2 ;
1214

VNS for the VRPTW-PM

bjk

3.2

=

Amine, Anis, Kamel and Khaled

ei
bik + si + d( i, j) + zijk πk

if bik + si + d( i, j) ≤ ei + zijk πk
otherwise

Initial Solution

In this work we used the Nearest Neighbor algorithm for which Solomon in [2] proposed a cost
function to generate an initial solution. The nearest neighbor heuristic starts by ﬁnding the
closest (in terms of a measure) unrouted customer to the depot. At every subsequent iteration,
the heuristic searches for the closest customer to the last customer added to the route. This
search is performed among all the customers. The mentioned cost function is deﬁned as follows:

Cij = γ1 Dij + γ2 Tij + γ3 Vij

(11)

γ1 + γ2 + γ3 = 1, γ1 ≥ 0, γ2 ≥ 0, γ3 ≥ 0
where i is a customer in the partial solution and j is not. With Dij the Euclid distance from
customer i to customer j. Tij the Time diﬀerence between completing i and starting j and Vij
the Time remaining until last possible start of j following i.

3.3

Neighborhood structures

Generation of the whole neighborhood structure is the most important part of the VNS
metaheuristic. In this paper six adjacent structures were designed. There is Intra-route and
Inter-route neighborhood structures. Neighborhood structures are,
• T wo − opt (N1 ): The basic idea is replacing two arcs in a route by two others of the same
route while inverting the direction of the route.
• Insert − M ove(k) (N2 (k) ): The Insert-Move neighbourhood consists in changing the
position of a segment of k customers.
• Swap − move(k) (N3 ): The basic idea is to relocate a set of consecutive of k-consecutive
vertices, this is achieved by the relocation of three arcs in the original route by another
while maintaining the same orientation of route.
• T wo − opt∗ (N4 ): The basic idea of the Two-opt* is to combine two routes to insert the
last customers of a given route after the ﬁrst customer of another route while maintaining
the orientation of the route.
• Relocate(k) (N6 (k) ): The basic idea is to change the location of a customer in another
route. In our case we exchanged the location of k customers located consecutively in the
original route.
• Exchange(k, k1) (N5 (k, k1) ): This operator enables the exchange of a value of k and k1
customers between two diﬀerent routes.
1215

VNS for the VRPTW-PM

3.4

Amine, Anis, Kamel and Khaled

Shaking

In order to diversify the search in solution space, we introduced a shaking procedure that uses
diﬀerent neighborhood structure depending on the value of k. In table 1, we give a description
about the used neighborhood structure for each value of k. The column segment length represent
the number of consecutive customer. We note that the shaking phase may lead to infeasible
solution but we accept only feasible ones.
k
1
2
3
4
5
6
7
8
9
10

Neighborhood Structure
Insert-Move
Insert-Move
Relocate
Relocate
Relocate
swap
swap
Exchange
Exchange
Exchange

Segment length
1
2
1
2
3
(1,1)
(2,2)
(1,1)
(2,2)
(1,2)

Table 1: The set of neighborhood structure used in the shaking phase

3.5

Route minimizing procedure

In the literature, the objective function is deﬁned as hierarchy of objectives for the VRPTW,
in which we minimize the number of vehicles at ﬁrst then the total travel distance. We deﬁne
a procedure of minimizing the number of routes based on relocating procedure described in
algorithm 1a and exchange neighbourhood procedure presented in algorithm 1b. We propose a
VNS with a local search in wich we apply algorithm 1a and algorithm 1b. The procedure stops
when there is no routes to eliminate; Algorithm 1
for r1 the route that have the minimum
number of customer do
for r2 =1...v do
if r1 = r2 then
for each customer k ∈ r1 do
for each position in r2 do
if r2 after insertion of k in position i is feasible then (s ←
s)
end for
end for
end if
end for
end for
(a) modiﬁed relocate procedure

for r1 the route that have the minimum
number of customer do
for r2 =1...v do
if r1 = r2 then
for each customer k ∈ r1 do
for each customer k1 ∈ r2 do
if r2 after insertion of k and
r1 after insertion of k1 are
feasible then (s ← s )
end for
end for
end if
end for
end for
(b) modiﬁed exchange procedure

Figure 1: Used heuritics for minimizing the number of route

1216

VNS for the VRPTW-PM

Amine, Anis, Kamel and Khaled

Algorithm 1 Route minimizing procedure
Initialization:initial solution x, set of neighbourhood structure Nk , k = 1, 2 and 3
(N2 (1), N2 (2) and N3 ). see 3.3
repeat
K←1
repeat
Shaking: generate randomly a solution y from the kth neighborhood y ∈ Nk(x)
Local Search: apply 1a and 1b with y initial solution to obtain a local optimum denoted
y1
if the local optimum y1 is better than x then
(1) (x ← y1 )
(2) continue the search with N1 (k = 1)
else
k ← k + 1.
end if
until k < kmax
until there is no route to eliminate

3.6

Variable Neighbourhood Descent

An important element is to enhance the initial solution using the deﬁned neighborhood structures.
In this section, we present the VND algorithm which will be used as a local search subroutine in
our proposed GVNS algorithm. The VND algorithm requiere as input an initial solution which
will be denoted by x ans the set of the deﬁned neighborhood structures. At each iteration, a
local search procedure with the ﬁrst improvement strategy is applied on a solution for a given
neighborhood structure. The search continue in the next neighborhood structure whether there
is an improvement or not. Algorithm stops when there is no more improvement. Diﬀerent steps
of the VND procedure is give in algorithm 2.

Algorithm 2 Variable Neighborhood Descent
Require: an initial solution x.
x1 ← First improvement on x using N1
x2 ← First improvement on x1 using N6 (1)
x3 ← First improvement on x2 using N6 (2)
x4 ← First improvement on x3 using N2 (1)
x4 ← First improvement on x3 using N2 (2)
x6 ← First improvement on x5 using N3
x7 ← First improvement on x6 using N5 (1, 1)
x8 ← First improvement on x7 using N5 (1, 2)
x9 ← First improvement on x8 using N5 (2, 2)
if f (x9 ) < f (x) or Acceptance Criterion is satisﬁed 3.7 then
x ← x9
end if

1217

VNS for the VRPTW-PM

3.7

Amine, Anis, Kamel and Khaled

Acceptance Criterion

After shaking and VND phases have been completed, the resulting solution should be compared
with the current one. In order to decide whether it will be selected or not, we adopted an
acceptance criterion. In the basic VNS, only solutions that improve the cost will be chosen,
but we can easily ﬁnd them in a local optimum. In most cases, therefore, it is essential to have
a strategy that does not accept any improvement solution under certain conditions. Instead,
we put a system that is inspired by the simulated annealing (SA) [3]. More speciﬁcally, the
solution obtained after the local search procedure is always accepted if the quality of the solution
obtained is better and is accepted with a cost higher than the current solution with a probability
exp(−(f (x ) − f (x)/T )) with f (x) being of the solution. The temperature T decreases linearly
in n steps during the search Thus, in each n iteration, T is reduced by an amount T ∗ n/Tmax ,
Tmax represents the total number of iterations. Tests showed a satisfying performance when
setting n = 100 and using an initial temperature value of T0 = 10.

3.8

General Variable Neighborhood Search

The two phase proposed approach is presented in algorithm 3. First in step 1 we start by
generate a initial solution created by algorithm 3.2 than the number of routes is minimized. Once
we have a solution with minimum number of routes the total travelled distance is minimized in
step 2 using a GVNS wish accept solution that not improve cost under a given probability. The
pseudo of proposed approach is presented in 3

4

Experimental Results

In this section we describe results of applying the proposed approach to solve the VRPTW-PM
using instances that are are generated based on Solomon benchmark[4]. The description of
Solomon’s instances is: the geographical data are randomly generated by a random uniform
distribution in problem set R1, clustered in problem set C1, and a mix of randomly generated
data and clusters in problem set RCl. All the test problems are 100-customer euclidean problems.
Travel times between customers are equal to the corresponding distances truncated to one
decimal place. The customer demands are relatively small compared to the vehicle capacity. In
problem sets R1 and RC1 the time windows have a uniformly distributed, randomly generated
center and a normally distributed random width. Proposed approaches are implemented using
JAVA language and executed on a 2.53 GHz intel Core i5 with 4GB RAM. MIP model was
solved with ILOG CPLEX 12 MIP solver. We denote by f the value of the objective function.
In table 2, (2,10,20) denotes that vehicle 2 starts the maintenance activity at time 10 and takes
20 units of time. A benchmark of 20 customers (from customer 1 to 20) from Problem R109 is
used to validate the MIP model and to compare GVNS with implementation of the MIP model
with small benchmark instance. We denote by f the best result obtained in the 5 runs and by
#v its number of used vehicles. The optimal solution without preventive maintenance for this
instance is:
route 1: Total demand=50, Distance =67.344: 1-6-9-19-7-1
route 2: Total demand=67, Distance =105.49: 1-13-10-4-5-1
route 3: Total demand=79, Distance =105.84: 1-3-16-15-17-18-14-1
route 4: Total demand=60, Distance =81.43: 1-8-20-12-11-2-1
Total travel distance by 4 vehicles is 360.12

1218

VNS for the VRPTW-PM

Amine, Anis, Kamel and Khaled

Algorithm 3 Pseudo code of proposed approach
step 1: minimizing the number of routes apply route minimization procedure to minimize
the number of route by applying algorithm 1
step 2: minimizing the total travelled distance
Initialization: Set of neighbourhood structure Nk , k = 1, ..., 10 described in table 1, initial
solution x with minimal number of route. Initial temperature T = 10, i = 0, T ime = 0 in
seconds, j = 0
repeat
K←1
repeat
Shaking: generate randomly a solution y from the kth neighborhood; y ∈ Nk(x)
Local Search: apply The VND method described in algorithm 2 with Ns and y initial
solution to obtain a local optimum denoted y1
Let n ∈ [0, 1] a random number and prob = exp(−(f (y1 ) − f (x)/T ))
if the local optimum y1 is better than x or n < prob then
(1) (x ← y1 )
(2) continue the search with N1 (k = 1)
else
k ← k + 1.
end if
until k < 10 or T == 1 or T ime < 2000
if j = i + 100 then
T = T − T ∗ n/k;
i = j;
end if
j ← j + 1;
until T == 1 or T ime < 2000 or j < 4000

We make a assumption that the optimal value for R109 benchmark problem which is 360.12 is
the lower bound (LB) for VRPTW-PM for the same instance. Since the number of vehicle for the
original plan is small, equal to 4, we set it automatically, equal to 4 or 5 for the implementation
of VRPTW-PM.
As shown in table 2 there is a large gap between executing the optimal plan generated by the
implementation of MIP model and the plan generated by adding a vehicle to supply unserved
customers due to a maintenance activity (Easy Plan). In terms of solution quality, we can
see that the proposed procedure performs consistently better than when using the easy plan
knowing that in each problem an extra vehicle is required to serve all customers in their time
windows except problems which are not aﬀected by PM such as conﬁguration (1,100,30). Also
solutions produced by the GVNS approach are all the same then the optimal solution obtained
by the implementation of the MIP model. For large instances(100-customers benchmark) and
after a series of test we conclude that the MIP model cant ﬁnd the optimal solution on a time
limit equal to 7200 seconds so it is necessary to use a metaheuristic, GVNS in our case to get
near-optimal solution in a reasonable execution time. We assume that the best known solution of
VRPTW can be considered as a Lower Bound for VRPTW-PM. To see the eﬀectiveness of GVNS
approach for the VRPTW-PM with large instances(100 customers), a series of experiments is
conducted using diﬀerent scenarios of unavailability of vehicles with diﬀerent starting period of
the maintenance activities throughout the horizon plan as shown in table 3. The γ = {1, 2, 3}
1219

VNS for the VRPTW-PM

Amine, Anis, Kamel and Khaled

Table 2: Comparison with the results of MIP model and GVNS with 20 customers from R109
Benchmark problem
Scenarios
(1,10,20)
(1,80,50)
(1,100,30)
(2,10,70)
(2,20,40)
(2,50,60)
(3,10,40)
(3,40,70)
(3,90,40)
(1,10,20) (2,20,10)
(1,40,35) (2,50,35)
(1,10,50) (4,10,70)
(2,60,40) (4,70,40)
(2,10,60) (3,10,40)
(1,100,35) (2,90,35)

VRPTW-PM (MIP)
#v
f Time (s)
4 367.77
27.86
4 381.20
19.68
4 360.12
7.82
4 406.82
102.31
4 369.57
0.66
4 396.31
21.18
4 402.55
29.01
4 401.26
22.67
4 372.60
17.49
4 367.77
43.13
5 379.81
21.80
5 406.77
23.51
5 379.81
9.93
5 394.12
29.90
4 372.60
22.55

Easy Plan
#v
f
5 391.74
5 391.74
5 375.93
5 360.12
5 360.12
5 386.98
5 414.80
5 430.49
5 414.80
5 391.74
6 391.74
6 464.30
6 417.26
6 415.49
6 375.93

#v
4
4
4
4
4
4
4
4
4
4
5
5
5
5
4

GVNS
f Time (s)
367.77
5.23
381.20
3.00
360.12
0.12
406.82
20.48
369.57
0.00
396.31
2.40
402.55
3.09
401.26
12.21
372.60
12.80
367.77
8.09
379.81
0.61
406.77
2.19
379.81
1.04
394.12
0.03
372.60
3.2

values corresponds to unavailability of the vehicle during a period of time. When γ = 1, this is
means that vehicle is unavailable at the beginning of the planning horizon; when γ = 2, vehicle
is unavailble during the middle and when γ = 3 corresponds to an unavailability that starts at
the end of horizon planning.

Table 3: Conﬁguration for maintenance activity

R1
R2
C1
C2
RC1
RC2

γ=1
(30,40)
(50,40)
(100,40)
(100,40)
(30,40)
(50,40)

γ=2
(100,40)
(500,40)
(700,40)
(1500,40)
(100,40)
(100,40)

γ=3
(200,40)
(900,40)
(1000,40)
(2500,40)
(200,40)
(200,40)

The vehicle that must apply maintenance activity is the vehicle that made the longest distance
based on the original plan. Knowing that the original plan is a solution for VRPTW generated
by GVNS approach. The used instances consist of six diﬀerent types (R1,C1,RC1,R2,C2,RC2),
Two problems are selected for each type, which are R103, R111, C101, C104, RC104, RC107,
R203, R204, C206, C207, RC203 and RC204. When testing problems with 100 customers, and
in terms of solution quality, we can see that the proposed procedure performs consistently better
than when using the easy plan.
1220

VNS for the VRPTW-PM

Amine, Anis, Kamel and Khaled

Table 4: Computational results for VRPTW-PM with Solomon 100 customers Benchmark
Problem
R103
R1011
R203
R204
C101
C104
C206
C207
RC104
RC107
RC203
RC204

5

values
#v
f
#v
f
#v
f
#v
f
#v
f
#v
f
#v
f
#v
f
#v
f
#v
f
#v
f
#v
f

Original Plan
13
1292.67
10
1101.43
3
941.65
2
831.04
10
828.93
10
824.77
3
591.55
3
588.28
10
1150.21
11
1232.26
3
1093.49
3
801.39

γ=1
14
1362.05
11
1162.15
4
1042.60
3
938.45
11
923.66
11
932.65
4
607.93
4
669.87
11
1257.58
12
1329.99
4
1328.87
4
903.45

Easy Plan
γ=2
14
1362.05
11
1162.15
4
1041.97
3
862.45
10
824.77
11
926.37
4
623.59
4
648.68
11
1242.35
12
1327.05
4
1328.87
4
903.45

γ=3
14
1292.67
11
1101.43
3
982.71
3
862.45
10
828.93
10
828.93
4
630.45
4
626.65
10
1150.21
12
1232.26
4
1305.83
5
903.45

VRPTW-PM (VNS)
γ=1
γ=2
γ=3
14
14
13
1246.74 1249.25 1292.67
11
11
11
1067.09 1090.33 1101.43
4
4
3
1042.60 1041.97 982.71
3
3
3
938.45
862.45
862.45
11
11
10
852.94
931.01
824.77
10
11
10
849.66
848.78
828.93
4
4
4
607.93
629.52
630.45
4
4
4
669.87
648.68
607.93
11
11
10
1158.42 1235.87 1150.21
12
12
11
1230.75 1484.00 1232.26
4
4
4
1282.58 1284.90 1226.05
4
4
4
903.45
903.45
903.45

Conclusion

In this paper, we have presented a scheduling model for the vehicle routing problem with time
windows in case of unavailability of vehicles due to maintenance activities at a given time and for
a deﬁned period after which a subset of customers have been visited. The objective function is to
ﬁnd a new planning/scheduling that minimizes the deviation from the original planning in term
of number of vehicles and total travelled distance. Although the problem of planning/scheduling
is complicated by a variety of factors, this paper provides an approach based on GVNS to treat
this type of problem. Experiments were equally carried out to study how maintenance activity
works. Experimental results also showed that the GVNS algorithm consistently produces high
performance.

References
[1] George B Dantzig and John H Ramser. The truck dispatching problem. Management science,
6(1):80–91, 1959.
[2] Marius M Solomon. Algorithms for the vehicle routing and scheduling problems with time window
constraints. Operations research, 35(2):254–265, 1987.

1221

VNS for the VRPTW-PM

Amine, Anis, Kamel and Khaled

[3] Scott Kirkpatrick. Optimization by simulated annealing: Quantitative studies. Journal of statistical
physics, 34(5-6):975–986, 1984.
[4] Marius M Solomon. Vrptw benchmark problems. Excerpt from unpublished article, n. pag.
http://www. cba. neu. edu/˜ msolomon/.(15 May 2000), 2003.
[5] Jean-Francois Cordeau, Guy Desaulniers, Jacques Desrosiers, Marius M Solomon, and Fran¸cois
Soumis. Vrp with time windows. The vehicle routing problem, 9:157–193, 2001.
[6] Gilbert Laporte. Fifty years of vehicle routing. Transportation Science, 43(4):408–416, 2009.
[7] Nenad Mladenovi´c and Pierre Hansen. Variable neighborhood search. Computers & Operations
Research, 24(11):1097–1100, 1997.
[8] Eric Prescott-Gagnon, Guy Desaulniers, Michael Drexl, and Louis-Martin Rousseau. European
driver rules in vehicle routing with time windows. Transportation Science, 44(4):455–473, 2010.

1222

