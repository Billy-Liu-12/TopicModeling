Procedia Computer Science
Volume 80, 2016, Pages 1577–1588
ICCS 2016. The International Conference on Computational
Science

Tabu Search for Partitioning Dynamic Dataﬂow Programs
Malgorzata Michalska1 , Nicolas Zuﬀerey2 , and Marco Mattavelli1
1

2

´
EPFL STI-SCI-MM, Ecole
Polytechnique F´ed´erale de Lausanne, Switzerland
Geneva School of Economics and Management, University of Geneva, Switzerland

Abstract
An important challenge of dataﬂow programming is the problem of partitioning dataﬂow components onto a target architecture. A common objective function associated to this problem is
to ﬁnd the maximum data processing throughput. This NP-complete problem is very diﬃcult
to solve with high quality close-to-optimal solutions for the very large size of the design space
and the possibly large variability of input data. This paper introduces four variants of the tabu
search metaheuristic expressly developed for partitioning components of a dataﬂow program.
The approach relies on the use of a simulation tool, capable of estimating the performance for
any partitioning conﬁguration exploiting a model of the target architecture and the proﬁling
results. The partitioning solutions generated with tabu search are validated for consistency and
high accuracy with experimental platform executions.
Keywords: tabu search, dataﬂow, partitioning, design space exploration

1

Introduction

Dataﬂow programs, as an alternative to the classical sequential programming methods, are a
very promising approach for signal processing algorithms implementation on multi-core architectures. They enable the exploration of a rich variety of parallel implementation options and
also provide an extensive and systematic implementation analysis [8, 15, 19]. These attractive features rely mostly on the fact that dataﬂow programs are highly analyzable, platform
independent and explicitly expose the potential parallelism of an application. Among several
existing dataﬂow computation models, a dataﬂow program is, in general, structured as a network of communicating computational kernels, called actors, connected by directed, lossless,
order preserving point-to-point communication channels (called buﬀers). Data exchanges are
only permitted by sending data packets (called tokens) over those channels. As a result, the
ﬂow of data between actors in such networks is fully explicit.
The dataﬂow Model of Computation (MoC ) which enables an implementation of fully dynamic applications, thus can be considered as a very general model, is known in literature as
Dataﬂow Process Network (DPN ) with ﬁrings [19]. A DPN program evolves as a sequence
of discrete steps (called ﬁrings) corresponding to the executions of actions that may consume
and/or produce a ﬁnite number of tokens and modify the internal actor state. At each step,
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.486

1577

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

according to the current actor internal state, only one action can be ﬁred. The processing
part of actors is thus encapsulated in the atomic ﬁrings completely abstracting from time. The
problem of partitioning dataﬂow programs based on the DPN MoC is the object of this work,
since apart from allowing to express dynamic algorithms, it also comprises other, less expressive
dataﬂow MoC, such as SDF and CSDF [24].
From the perspective of the dataﬂow design ﬂow, an important challenge is to ﬁnd a close-tooptimal partitioning of the program on the target architecture, so that a close-to-maximal possible throughput is achieved. Such result provides information on the parallelism of a dataﬂow
program which can be used for driving the refactoring of the program leading to the better
optimized dataﬂow programs exposing a higher level of parallelism. Using the terminology
borrowed from the production ﬁeld, the objective of partitioning dataﬂow programs is to ﬁnd
an assignment of n jobs (understood as action ﬁrings) to m parallel machines (understood as
processors) so that the overall makespan (completion time of the last performed job among
all processors) is minimized. It is assumed that only one job (one action) can be executed
at a time on each processor, therefore a scheduling policy must be used to decide about the
execution order inside each processor. Each job j has an associated processing time (or weight)
pj and a group (or actor) gj . There are k possible groups, and each one can be divided into
subgroups where all jobs have the same processing time (i.e., they are the ﬁrings of the same
action). Between some pairs {j, j } of incompatible jobs (i.e., with gj = gj ) there is an associated communication time wjj . The communication time is subject to a ﬁxed quantity qjj
of information (or the number of tokens) that needs to be transferred. The size of this data is
ﬁxed for any subgroup (i.e., an action always produces/consumes the same amount of data).
Among several constraints occurring, the most important ones are: (a) group constraint - an
actor must be assigned to exactly one processor, therefore all jobs belonging to the same group
must be partitioned together, (b) precedence constraint - (j, j ) involves that a job j (plus the
associated communication time) must be completed before job j is allowed to start, while jobs
j and j can belong to the same or to diﬀerent groups, (c) communication channel capacity
constraint - the size of the buﬀer is bounded by B (indeed, exceeding this value during the
execution may introduce serious delays in performance).
Finding an optimal solution to the partitioning problem has been proven to be NP-complete,
even when only two processors are considered [34]. Moreover, it is just a set of dimensions in
the valid design space. In addition, the scheduling and buﬀer dimensioning sets add other
dimensions to the space in which close-to-optimal solutions are searched [4]. As a result, the
size of such a design space is extremely large and very diﬃcult to be eﬃciently explored. This
paper proposes a tabu search approach for ﬁnding a close-to-optimal partitioning conﬁguration
that involves two important aspects: it evaluates the candidate partitioning conﬁgurations by
means of simulation (high-accuracy performance estimation) and it uses the execution properties
extracted during the simulation as optimization criteria. Since it is possible to extract various
properties, an emphasis of the work is to identify which ones (among the four analyzed variants)
hold true as the optimization criteria and drive the search so that a high-quality solution is
established in the, possibly, shortest time.
The paper is structured as follows: Section 2 presents some examples of a usage of the metaheuristic search (and simulation methodologies) with the purpose of partitioning within/outside
the dataﬂow domain. Section 3 describes the modeling approach used for simulation, properties
extraction and search, whereas Section 4 discusses the implemented tabu search approach. Finally, Section 5 reports the results obtained for an example of a dynamic video decoder. They
are discussed in Sections 6 and 7, in which directions for future works are also provided.
1578

Tabu Search for Dataﬂow Partitioning

2

Michalska, Zuﬀerey and Mattavelli

Related work

The problem of partitioning and scheduling dataﬂow programs, as formulated in the previous
section, belongs to the wide class of combinatorial problems. Since the problem is proven to
be NP-complete, for realistic instances, it is only possible to develop methods providing closeto-optimal solutions [11]. Usually the fastest approach is to use a constructive heuristic, where
a solution is generated from scratch by sequentially adding components to the current partial
solution until the solution is complete [2]. However, from the perspective of dataﬂow application
designer, the quality of a partitioning conﬁguration is of high importance. Therefore, the use
of more advanced solution methods, namely metaheuristics, appears as a much better choice.

2.1

Metaheuristics: foundations

The term metaheuristic was ﬁrst introduced in [13] and combines the Greek words for to ﬁnd
and beyond, in an upper level. It is formally deﬁned as an iterative generation process which
guides a subordinate heuristic by combining intelligently diﬀerent concepts for exploring and
exploiting the search space [23]. Metaheuristics are usually classiﬁed as either local search or
population-based methods. In the ﬁrst case, the algorithm starts from an initial solution and
tries to improve it iteratively, by slightly modifying the current solution. In the second case, it
is required to use a central memory to store and operate on certain solutions collected during
the search process. Well-known local search methods are: simulated annealing, tabu search,
variable neighborhood search, and guided local search. Among the population-based methods,
the most popular ones are genetic algorithms, ant colonies, adaptive memory algorithms, and
memetic search. The reader desiring more information on metaheuristics can refer to [12, 37].

2.2

Metaheuristics: application examples

Diﬀerent metaheuristic approaches for solving partitioning problems can be found in literature.
Starting from the most general graph partitioning problem, a genetic algorithm can be applied
with an opportunity to deﬁne multiple objective functions [6]. For the mesh partitioning problem, a multilevel ant colony optimization has provided better results than some evolutionary
algorithms or greedy procedures [16]. Another variation of the partitioning problem, namely a
multi-dimensional two-way number partitioning problem, can be tackled using variable neighborhood search [17]. There are also several examples of systems/programs partitioning using
metaheuristics. The software module clustering can be approached with a genetic algorithm
that incorporates multiple diﬀerent low-level heuristics [18]. Tabu search combined with an
intensiﬁcation routine is developed for eﬃcient partitioning of Local Area Network [22]. The
partitioning problem is also formulated in an interesting way in [10], since it targets two objectives: reduction of power consumption and traﬃc optimization. The problem is approached
using the ant colony metaheuristic.
Finally, metaheuristics are also used explicitly for partitioning dataﬂow programs. In [1],
simulated annealing is employed for estimating the bounds of the partitioning program. Another example covers the more general problem, which is the design space exploration of dataﬂow
graph-based speciﬁcations [32]. The optimization stages include the selection of a target architecture, partitioning, scheduling and design space exploration in order to identify the feasible
solutions. The optimizations are performed using the evolutionary algorithm. Multi-objective
evolutionary algorithms used for performing an automatic design space exploration are also an
objective of work discussed in [28].
1579

Tabu Search for Dataﬂow Partitioning

2.3

Michalska, Zuﬀerey and Mattavelli

Simulation-based evaluation

The literature is also rich in examples of the methodologies aiming at simulating the program
performances on a target platform. In most cases, such methodologies are created around
various optimization and design space exploration tools. The trace-based co-simulation is, for
instance, employed with the purpose of communication reﬁnement in KPN programs [25]. The
problem of accuracy of such estimation and the possible approaches to incorporate synthesis
methods in order to improve the quality of system exploration are also discussed in [9]. The
simulation of the program performance by means of the execution trace analysis is presented in
[5]. This work also discusses the advantages of light-weight heuristics over some evolutionary
methods in the process of design space exploration.

3

Dataﬂow program execution modeling

Since the objective is to model the execution of fully dynamic applications (belonging to DPN
with ﬁrings), it is necessary to deﬁne a representation of the dataﬂow program that captures
its entire behavior. Such representation can be built by generating a directed, acyclic graph G,
called Execution Trace Graph (ETG). Depending on the application, the ETG has to consider
a suﬃciently large and statistically meaningful set of input stimuli in order to cover the whole
span of the dynamic behavior. The size of G varies according to the type of application and to
the size of the input stimuli set. Therefore it can be very large for some applications.
The execution of a DPN program with ﬁrings can be represented as a collection of action
executions, called ﬁrings, that are characterized by intrinsic dependencies of diﬀerent types: (a)
the internal dependencies that describe the relations between two ﬁrings of the same actor; (b)
the token dependencies that describe the relations between two ﬁrings of diﬀerent actors that
respectively produce and consume at least one token [4]. Such a model is fully independent
from the target architecture. Therefore, in order to model the program execution on a target
platform, it is essential to provide an ETG with complementary information related to the
processing (pj ) and communication (wjj ) times valid for this platform. These values are used
to weight an ETG and to simulate the makespan (total execution time) of a dataﬂow program.
Such a simulation is performed by an appropriate module in the TURNUS co-design framework [39]. The simulation module supports and enables an analysis of diﬀerent types of architectures with a single platform-independent model of execution [21]. The, generally, high
accuracy of the simulation module is sensitive to the properties of the platform because it must
rely on the precision of the measurements obtained by executing dataﬂow program on speciﬁc
platforms. These measurements, however, might be aﬀected by some uncertainties [35].

4

Tabu search implementation

The partitioning methodology described in this paper relies on tabu search [14], which is still
among the most cited and used local search metaheuristics for combinatorial optimization
problems. As described in [33], a local search starts from an initial solution, and then explores
the solution space by moving from the current solution to a neighbor solution, where a move
involves a slight modiﬁcation of the current solution. The neighborhood N (s) of a solution s
is the set of solutions obtained from s by performing each possible move. Unlike in a descent
algorithm, tabu search avoids getting stuck in the ﬁrst local optimum by the use of recent
memory with a tabu list. More precisely, it forbids performing the reverse of the moves done
during the last tab (parameter) iterations, where tab is called tabu tenure. At each iteration of
1580

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

tabu search, the neighbor solution s is obtained from the current solution s by performing on
the latter the best non-tabu move (ties are broken randomly). The process stops, for instance,
when a time limit T (parameter) is reached.
The motivation of using tabu search for the considered problem relies on the fact that it
has proven to have a good tradeoﬀ according to the following criteria [37]: (1) quality: value of
the obtained results, according to a given objective function f ; (2) quickness: time needed to
get good results; (3) robustness: sensitivity to variations in problem characteristics and data
quality; (4) facility of adaptation of the method to a problem; and (5) possibility to incorporate
properties of the problem. More generally, tabu search has proven to have a good balance
between intensiﬁcation (i.e., the ability to focus on promising regions of the solution space) and
diversiﬁcation (i.e., the ability to visit various regions of the solution space).
The objective function is deﬁned as the makespan of all ﬁrings in the ETG. In order to
design tabu search for the considered problem, the following features have to be modeled: the
way to represent a solution s, the neighborhood structure (i.e., what is a move), the tabu list
structure (i.e., what type of information is forbidden), and a stopping condition (i.e., what is
the most appropriate time limit).

4.1

Solution encoding and neighborhood structure

A solution for partitioning is represented as a map of actors and processors, where the number
of processors is ﬁxed. Each actor can be mapped to only one processor at the time, and each
processor must be mapped to at least one actor. Hence, leaving empty processors is not allowed.
There are multiple ways to generate neighbor solutions, and they depend on the used deﬁnition
of a move. In this work, all the neighborhood structures are based on the REINSERT operation
(i.e., move an actor to another processor) and are generated according to four diﬀerent criteria:
1. N (B) (for balancing): choose randomly an actor from the most occupied processor and
move it to the least occupied processor.
2. N (I) (for idle): for each actor whose idle time is bigger than its processing time, ﬁnd the
most idle processor, diﬀerent from the one currently mapped. The idle time is deﬁned
as the time frame when an actor could execute according to the satisfaction of its ﬁring
rules, but since another actor in the same processor is currently working it has to wait to
be scheduled.
3. N (CF ) (for communication frequency): if an actor has a higher communication frequency
(i.e., larger number of token transfers) with actors mapped to a speciﬁc processor than
with the ones mapped to its current processors, move the actor to this processor.
4. N (R) (for random): choose randomly an actor and move it to a diﬀerent processor (randomly chosen).

4.2

Tabu list structure

Any time an actor a is moved from a processor q to another processor, it is forbidden to put a
back to q for tab iterations, where tab is an integer uniformly generated in interval [a, b] (a and
b have been tuned to 5 and 15). Two other sensitive parameters need to be tuned in order to
implement tabu search, namely T (the time limit) and p (the proportion of neighbor solutions
generated during each iteration). T determines the termination point of the algorithm, whereas
p is a random sample involving p% of the (possibly big) neighborhood of the current solution
1581

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

s. A large value of p contributes to the intensiﬁcation ability of the method (indeed, many
solutions around s are explored), whereas a small value plays a diversiﬁcation role (indeed, no
focus is put around s).

5

Experiments

One of the objectives of applying a metaheuristic to a partitioning problem is to estimate the
upper bound on the speed-up that can be obtained by a dataﬂow program on diﬀerent numbers
of processors. This information provides an evaluation of a feature of a dataﬂow program and
answers to the question, if the limit of the performance of the dataﬂow program on a multi-core
platform is due to a non-optimal partitioning, or an insuﬃcient level of parallelism implemented
in the datﬂow program. Since the objective of this work is to evaluate and compare diﬀerent
variants of a partitioning metaheuristic, it is important to make an appropriate choice of (a)
target platform, (b) analysed algorithm/application implemented by the dataﬂow program.
The platform chosen for the experiments is based on the Transport Triggered Architecture
(TTA) [38]. This choice has been dictated by several factors, such as: the most complete
representation of the architecture model in the simulation module, thoroughly conﬁrmed high
accuracy of the simulation, independence of the proﬁling results from the partitioning conﬁguration. The last property makes the proﬁling methodology much more reliable, comparing to
other platforms, such as, for instance, Non-Uniform Memory Architectures, when the results of
proﬁling obtained for one mapping conﬁguration are hardly reproducible for others and require
re-proﬁling with every change of mapping (i.e., a methodology presented in Chapter 5 of [29]).
The requirement of an application with much potential parallelism is satisﬁed on the TTA with
an MPEG-4 SP decoder design with a total number of 41 actors. The upper bound on the
parallelism has been evaluated as a proportion of the critical executions in the overall execution time assuming a full parallel conﬁguration and the unbounded buﬀer size, as described in
Chapter 5 of [3]. For this particular application, the potential parallelism is around 6.28.

5.1

Procedure

Since tabu search requires specifying an initial mapping conﬁguration, the ﬁrst task is to generate a set of instances that are characterized by possibly diﬀerent properties. For this purpose,
two sets of mapping conﬁgurations were generated with the constructive heuristics: one with
the total workload balanced in a greedy way, another one with fully random conﬁgurations.
In each set, the conﬁgurations spanned on 2 to 8 processors were generated. Considering the
chosen application, 8 processors should already suﬃciently convey the potential parallelism.
The sets of initial conﬁgurations were validated for the consistency between the simulation and
platform execution on TTA by comparing the simulated clock cycles with the output of the
TTA cycle-accurate simulator [36].
The second step consisted of tuning the parameters of tabu search, namely T (the time
limit) and p (the percentage of neighbor solutions generated in each iteration). In order to
objectively compare the four proposed ways of generating the neighborhood, it is necessary
that each variant receives exactly the same amount of time to perform the search. First, using
p = 0.5, each tabu search variant was performed in multiple runs (with diﬀerent seeds) on
each instance. For each run, the search was stopped any time 5 minutes had elapsed without
improving the best encountered solution (during the current run) by at least 1%. Parameter T
is set as the largest encountered stopping time (minus 5 minutes) among all these experiments.
Next, with the selected value of T , all the tabu search variants were tested (again with multiple
1582

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

runs) with diﬀerent values of p ∈ {0.2, 0.4, 0.6, 0.8}. For each p, average results were computed,
which allows easily deducing the parameter p to use.
Using the set of initial conﬁgurations and having the parameters tuned, the four variants
of tabu search could be accurately compared. For each variant, the best result was computed
in terms of the total number of clock cycles simulated and speed-up obtained versus the monocore execution. For each number of processors (2 - 8), the best variant was chosen, both: for
the initially balanced and random conﬁguration, and the ﬁnal solution was also validated for
consistency. Figure 1 summarizes the tools used at diﬀerent stages of experiments and the
information dependencies between them.

Figure 1: Toolchain.

5.2

Results

The initial validation resulted in a high simulation precision with an average discrepancy less
that 1%. It remains consistent with our previous experiments, where the TTA platform was
validated for the purpose of performance simulation [20], even though the MPEG-4 SP design
variant used in the current experiments is much more complex and the same input sequence
results in ca. 2 times bigger ETG than in the referenced work. The tuning of T was applied
to the set of initial conﬁgurations and seeds. For each tabu search variant, among all test
instances, the minimal, maximal and average values of the stopping time have been recorded
and are summarized in Table 1. The tuning of p has been performed with the maximal value
of T among the neighborhood types. The following values of p have been deduced to provide
with the best solutions:
• N (B) : all values of p gave exactly the same result (0.2 was chosen);
• N (I) : the best results were obtained for values between 0.4 - 0.8 (0.4 was chosen);
• N (CF ) : the best results were obtained for values between 0.4 - 0.6 (0.4 was chosen);
• N (R) : the best results were obtained for values between 0.2 - 0.4 (0.2 was chosen);
For each neighborhood type, the solution was generated with the tuned values of p and
T . For these partitioning conﬁgurations (referred as the best ones), the speed-up versus the
mono-core was calculated and taken as a ﬁnal evaluation of the solution. The set of speed-up’s
1583

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

for the initially balanced (resp. random) set of conﬁgurations is presented in Table 2 (resp. 3).
Next, in Tables 4 and 5, the percentage of improvement versus the initial conﬁguration is given.
It denotes which neighborhood type provided the largest improvement.
Table 1: Results of time tuning [minutes].
Neighborhood

Minimal

Maximal

Average

0
19
10
24

13
44
84
318

6
25
48
134

(B)

N
N (I)
N (CF )
N (R)

Table 2: Best speed-up’s - initially balanced
conﬁgurations.
Processors
1
2
3
4
5
6
7
8

N (B)
1.00
1.85
2.67
3.21
4.04
4.83
5.4
5.76

N (I)
1.00
1.93
2.75
3.61
4.45
4.92
5.82
6.28

N (CF )
1.00
1.88
2.79
3.49
4.30
4.95
5.79
6.26

N (R)
1.00
1.92
2.70
3.49
4.27
4.91
5.64
6.27

Table 4: Improvement - initially balanced
conﬁgurations.
Processors
1
2
3
4
5
6
7
8

6

[%]
5.38
4.60
14.79
23.95
17.64
7.28
8.19

Best neighborhood
N (I)
N (CF )
N (I)
N (I)
N (CF )
N (I)
N (I)

Table 3: Best speed-up’s - initially random
conﬁgurations.
Processors
1
2
3
4
5
6
7
8

N (B)
1.00
1.75
2.08
2.77
2.34
2.61
2.48
3.24

N (I)
1.00
1.92
2.66
3.36
3.94
4.73
4.81
5.95

N (CF )
1.00
1.87
2.65
3.33
4.23
3.94
4.62
4.66

N (R)
1.00
1.94
2.65
3.30
4.01
4.23
4.04
4.56

Table 5: Improvement - initially random
conﬁgurations.
Processors
1
2
3
4
5
6
7
8

[%]
10.10
22.00
17.79
44.63
44.79
48.49
47.24

Best neighborhood
N (R)
N (I)
N (I)
N (CF )
N (I)
N (I)
N (I)

Discussion

The comparison of the four tabu search variants leads to an observation that in most cases, N (I)
provided the best result. It was occasionally slightly outperformed by the N (CF ) , and only in
one case by the N (R) . Due to the properties of the TTA related to the negligible communication
cost, the N (CF ) variant can be considered as quasi-random. It however prevents some moves to
1584

Tabu Search for Dataﬂow Partitioning

(a) Initially balanced conﬁgurations.

Michalska, Zuﬀerey and Mattavelli

(b) Initially random conﬁgurations.

Figure 2: Simulation vs platform execution for the best mappings.
be performed and therefore shortens the time of analysis comparing to the N (R) . For the N (R)
variant, the time required for analysis is multiple times greater than for the other variants,
since basically any move is allowed for generating a neighbor solution. This freedom of choice,
however, does not necessarily correspond to the quality of the results. The N (B) brought
a very little improvement and only for certain initial conﬁgurations. As a result, the N (I)
variant seems to be the most eﬀective and promising one, since it provided the best solution
(reasonably considered to be close-to-optimal) in most cases and operated much quicker than
the N (R) variant. The results obtained for N (I) and N (CF ) also prove that a smart choice of
moves outperforms random moves.
Further observations can be made, when the quality of the initial conﬁgurations obtained
by the constructive heuristics is compared with the solutions generated by tabu search variants.
First, it can be concluded that the quality of the ﬁnal solution is sensitive to the quality of
the initial solution. Within the assumed time frame, the solutions generated from an initially
balanced (good) conﬁguration always outperformed the ones generated from an initially random (bad) ones. This happened even though the relative improvement of the initially random
conﬁgurations was much larger than of the initially balanced ones (up to 48% vs 24%). Second, certain numbers of processors oﬀered more room for improvement than some others, for
instance, for the initially balanced conﬁgurations the largest improvement is observed around
4 - 6 processors, with only slight improvements in other cases.
The bottleneck of the methodology is in the time required for a single simulation of each
solution, because in the case of complex applications, even for a very short input sequences, it is
expressed in seconds. Such a value might be negligible if an analysis is launched only once (i.e.,
to evaluate the bottlenecks or extract some properties), but grows in importance for the purpose
of a metaheuristic search, when a similar simulation must be executed thousands or millions
of times. For this reason, the most time-consuming part of the methodology was, in fact, the
ﬁne-tuning of the parameters. Nevertheless, it is not going to be a practical challenge for the
dataﬂow designer, since the amount of time required for refactoring and optimization of the
application most likely greatly outstrips the time amount required for partitioning. In any case,
the more important aspect of the experiments is the accuracy of the simulated results referred to
the platform executions, which is an important issue occurring in various ﬁelds [30, 31]. It can
be argued which range of diﬀerences can be considered negligible. Regarding the discrepancy
that we have observed, it must be taken into consideration that for the TTA, as well as for other
multi-core architectures, a scheduler overhead is present [7]. This kind of overhead is hardly
1585

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

measurable and may depend not only on the size of actor fraction inside each processor, but
also on the types of actors (i.e., how many conditions need to be checked in order to evaluate
if an actor is executable). This could explain (to some extent) why in the set of conﬁgurations
with a little, constant discrepancy, some picks of larger diﬀerences (i.e., 11% in one of our cases)
actually occur.

7

Future works

Several improvements could be considered to the metaheuristic developed in this study. Instead
of separately using the four proposed variants for the neighborhood generation, some ongoing
experiments involve combining diﬀerent variants in the same algorithm, for example: mixed
types of neighborhood at each iteration or some priorities assigned to the moves, so that the
most promising moves are considered ﬁrst. The latter would involve employing a learning
feature as proposed, for instance, in [27]. It could be also interesting to compare tabu search
with other metaheuristics, such as diﬀerent ant approaches, which are usually more complex
and sometimes rely on tabu search [26].
From the design perspective, the experience with TTA, as well as with other (i.e., NUMA)
platforms raises the requirement of introducing further extensions to the used architecture
model. The extensions might include: scheduler overheads, communication patterns and an
associated cost, caches and memory contention latencies. These extensions should further
improve the accuracy of the simulation and, as a consequence, the eﬃciency of the partitioning
metaheuristics, as well as help identify other optimization criteria for the algorithms.

ACKNOWLEDGEMENT
This work is supported by the Fonds National Suisse pour la Recherche Scientiﬁque under grant
200021.138214.

References
[1] M. A. Arslan, J. W. Janneck, and K. Kuchcinski. Partitioning and mapping dynamic dataﬂow
programs. 2012 Conference Record of the Forty Sixth Asilomar Conference on Signals, Systems
and Computers (ASILOMAR), pages 1452–1456, 2012.
[2] C. Blum and A. Roli. Metaheuristics in combinatorial optimization: Overview and conceptual
comparison. ACM Computing Surveys, 35:268 – 308, 2003.
[3] S. Casale-Brunet. Analysis and optimization of dynamic dataﬂow programs. PhD Thesis at EPFL,
Switzerland, 2015.
[4] S. Casale-Brunet, A. Elguindy, E. Bezati, R. Thavot, G. Roquier, M. Mattavelli, and J. W.
Janneck. Methods to explore design space for MPEG RMC codec speciﬁcations. Signal Processing:
Image Communication, 28(10):1278 – 1294, 2013.
[5] J. Castrillon, R. Velasquez, A. Stulova, W. Sheng, J. Ceng, R. Leupers, G. Ascheid, and H. Meyr.
Trace-based KPN composability analysis for mapping simultaneous applications to MPSoC platforms. Design, Automation and Test in Europe Conference and Exhibition (DATE), 2010.
[6] D. Datta and J. Rui Figueira. Graph partitioning by multi-objective real-valued metaheuristics:
A comparative study. Applied Soft Computing, 11:3976–3987, 2011.
[7] R. I. Davis and A. Burns. A survey of hard real-time scheduling for multiprocessor systems. ACM
Computing Surveys, 43:1 – 44, 2011.

1586

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

[8] J. B. Dennis. First version of a data ﬂow procedure language. In Symposium on Programming,
pages 362–376, 1974.
[9] C. Erbas and A. D. Pimentel. Utilizing synthesis methods in accurate system-level exploration of
heterogeneous embedded systems. IEEE Workshop on Signal Processing Systems, 2003.
[10] M. Farias, E. Barros, A. G. Silva-Filho, A. Ara´
ujo, A. Silva, and J. Melo. An ant colony metaheuristic for energy aware application mapping on nocs. In 20th IEEE International Conference on
Electronics, Circuits, and Systems, ICECS 2013, Abu Dhabi, December 8-11, 2013, pages 365–368,
2013.
[11] M. Garey and D. Johnson. A Guide to the Theory of NP-Completeness. W.H. Freeman, 1979.
[12] M. Gendreau and J.-Y. Potvin. Handbook of Metaheuristics. Springer, 2010.
[13] F. Glover. Future paths for integer programming and linkage to artiﬁcial intelligence. Computers
and Operations Research, 13:533–549, 1986.
[14] F. Glover. Tabu Search - part I. ORSA Journal on Computing, 1:190–205, 1989.
[15] G. Kahn. The semantics of simple language for parallel programming. IFIP Congress, 1974.
[16] P. Korosec, J. Silc, and B. Robic. Mesh partitioning: a multilevel ant-colony-optimization algorithm. International Parallel and Distributed Processing Symposium, 2003. Proceedings., 2003.
[17] J. Kratica, J. Kojic, and A. Savic. Two metaheuristic approaches for solving multidimensional
two-way number partitioning problem. Computers and Operations Research, 46:59–60, 2014.
[18] A. C. Kumari, K. Srinivas, and M. P. Gupta. Software module clustering using a hyper-heuristic
based multi-objective genetic algorithm. IEEE 3rd International Advance Computing Conference
(IACC), pages 813–818, 2013.
[19] E. A. Lee and T. M. Parks. Dataﬂow process networks. Proceedings of the IEEE, 83(5):773–801,
May 1995.
[20] M. Michalska, J. Boutellier, and M. Mattavelli. A methodology for proﬁling and partitioning
stream programs on many-core architectures. In International Conference on Computational Science (ICCS), Reykjavik, Iceland, June 1-3, Procedia Computer Science Ed., volume 51, pages
2962–2966, 2015.
[21] M. Michalska, S. Casale-Brunet, E. Bezati, and M. Mattavelli. High-precision performance estimation of dynamic dataﬂow programs. IEEE 10th International Symposium on Embedded
Multicore/Many-core Systems-on-Chip (MCSoC-16) (to appear), 2016.
[22] M. R. Nusekabel and K. J. Christensen. Using tabu search to ﬁnd optimal switched LAN conﬁgurations. Southeastcon ’98. Proceedings, pages 298–301, 1998.
[23] I. H. Osman and G. Laporte. Metaheuristics: A bibliography. Annals of Operations Research,
pages 513–623, 1996.
[24] T. Parks, J. Pino, and E. A. Lee. A comparison of synchronous and cyclo-static dataﬂow. Asilomar
Conference on Signals, Systems and Computers, 1995.
[25] A. D. Pimentel and C. Erbas. An IDF-based trace transformation method for communication
reﬁnement. In DAC, pages 402–407. ACM, 2003.
[26] D. Schindl and N. Zuﬀerey. Optimization by ant algorithms: Possible roles for an individual ant.
Optimization Letters, 6:963–973, 2012.
[27] D. Schindl and N. Zuﬀerey. A learning tabu search for a truck allocation problem with linear and
nonlinear cost components. Naval Research Logistics, 61:42–45, 2015.
[28] T. Schlichter, M. Lukasiewycz, C. Haubelt, and J. Teich. Improving system level design space
exploration by incorporating sat-solvers into multi-objective evolutionary algorithms. In 2006
IEEE Computer Society Annual Symposium on VLSI (ISVLSI 2006), 2-3 March 2006, Karlsruhe,
Germany, pages 309–316, 2006.
[29] M. Selva. Performance monitoring of throughput constrained dataﬂow programs executed on
shared-memory multi-core architectures. PhD Thesis at INSA Lyon, France, 2015.
[30] E. A. Silver and N. Zuﬀerey. Inventory control of raw material under stochastic and seasonal load

1587

Tabu Search for Dataﬂow Partitioning

Michalska, Zuﬀerey and Mattavelli

times. International Journal of Production Research, 43:5161–5179, 2005.
[31] E. A. Silver and N. Zuﬀerey. Inventory control of an item with a probabilistic replenishment
lead time and a known supplier shutdown period. International Journal of Production Research,
49:923–947, 2011.
[32] J. Teich, T. Blickle, and L. Thiele. An evolutionary approach to system-level synthesis. In In
Proc. of Codes/CASHE 97 - the 5th Int. Workshop on Hardware/Software Codesign, pages 167–
171, Braunschweig, Germany, Mar 1997.
[33] S. Thevenin, N. Zuﬀerey, and M. Widmer. Metaheuristics for a scheduling problem with rejection
and tardiness penalties. Journal of Scheduling, 18:89–105, 2015.
[34] J. D. Ullman. NP-complete scheduling problems. Journal of Computer and System Sciences,
10:384 – 393, 1975.
[35] V. Weaver, D.Terpstra, and S. Moore. Non-determinism and overcount on modern hardware
performance counter implementations. IEEE International Symposium on Performance Analysis
of Systems and Software, Austin, 2013.
[36] H. Yviquel, A. Sanchez, P. Jaaskelainen, J. Takala, M. Raulet, and E. Casseau. Embedded multicore systems dedicated to dynamic dataﬂow programs. Journal of Signal Processing Systems,
pages 1–16, 2014.
[37] N. Zuﬀerey. Metaheuristics: Some principles for an eﬃcient design. Computer Technology and
Application, 3:446–462, 2012.
[38] TTA-Based Co-design Environment. http://http://tce.cs.tut.fi/tta.html, Last checked:
April 2016.
[39] TURNUS. http://github.com/turnus, Last checked: April 2016.

1588

