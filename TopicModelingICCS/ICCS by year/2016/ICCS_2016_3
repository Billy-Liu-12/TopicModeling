Procedia Computer Science
Volume 80, 2016, Pages 407–417
ICCS 2016. The International Conference on Computational
Science

Hybrid Computational Steering for
Dynamic Data-Driven Application Systems
Junyi Han∗and John Brooke
University of Manchester, Manchester, U.K.
junyi.han@manchester.ac.uk

Abstract
We consider steering of Dynamic Data-Driven Application Systems from two sources, ﬁrstly
from dynamic data and secondly via human intervention to change parameters of the system.
We propose an architecture for such hybrid steering and identify a Time Manager as an essential
component. We perform experiments on an actual realisation of such a system, modelling a water distribution network, to show how the parameters of the Time Manager can be determined.
Keywords: Computational Steering, Dynamic Data-Driven Applications Systems, Model, Simulation,
Water Distribution System

1

Introduction

In understanding and predicting the behaviour of complex extended dynamic systems, e.g.
weather systems, wild ﬁres, water and electricity networks, we have two potential sources of
information. One is data from sensors (either in the system or observing it from outside) and
the other is from computer models that simulate the behaviour of the system via numerical
methods. Darema [2] proposed combining these in the concept of Dynamic Data-Driven Application Systems (DDDAS) where the data collection and simulation interact dynamically to
track the evolving state of the systems and from this to predict its behaviour for limited future
time windows. This requirement to track the actual state of a current system provides a new
set of challenges for computational methods. In some sense the data input is “steering” the
computational system along a particular set of trajectories. This can be contrasted with solving
an initial value problem, where the initial conditions set a trajectory and the computational
system evolves along it. However, in modelling actual evolving systems, we do not have suﬃciently perfect knowledge of the initial system and our computational model cannot perfectly
model all possible interactions.
As examples, Sanjuan [9] and Slingo [10] focus on diminishing particular uncertainties in
forest ﬁre and weather forecast systems. However, as indicated by Hutton [4], uncertainties
∗ Corresponding

author

Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.341

407

Hybrid Computational Steering

Han and Brooke

are assorted, on diﬀerent levels of a system and varying based on diﬀerent functions, and it
is challenging to apply an universal method to handle all potential uncertainties. Although
Artiﬁcial Intelligence (AI) algorithms such as Genetic Algorithm (GA) use incoming data as
the basis for steering the trajectory to reduce uncertainties, this steering is limited by gaps
or inaccuracies in the data and also by time constraints inherent in tracking the real system
evolving in physical time. In this paper we provide an experimental study to evaluate both
of these factors in the modelling of a real physical system (a water distribution network) by a
DDDAS that is using data from a network of sensors in the system linked to a computational
model describing the equations governing the behaviour of the water in the network. We are
interested in the trade-oﬀs between an increased coverage of the system by sensors against the
problems that this brings to the DDDAS in being able to ingest and process this data in a
suﬃciently short time to make useful predictions of the future state of the system.
The process of using data streams to steer a computational model is referred to as calibration
and in a DDDAS this calibration is repeated periodically, in contrast to an initial value problem
approach. Previous research of DDDAS has drawn attention to the challenges of automatically
calibrating simulations to match actual systems indicated by real-time dynamic data [2, 4, 1].
Before we can automate this process of calibration, we need to experiment to ﬁnd the optimal
set of parameters for the calibration process. This often involves using human expertise so
human intervention must also be accomodated in the steering process, this is usually referred
to as “computational steering”. Parker et al 1998 [7] distinguished between three main uses of
computational steering: model exploration, algorithm experimentation and performance tuning.
The deﬁnition of DDDAS also emphasises the ability to steer the data selecting process [2].
However, only few works such as [11] discuss this integration of human-centric and data-centric
steering.
The purpose of this paper is to contribute to the understanding of this hybrid model of
steering by using it to develop an essential component of a DDDAS, namely a Time Management
component (TM) that can enable the simulation to keep pace with the development of the real
system so that its predictions are timely and useful. In Section 2 we describe the concept of
hybrid steering and embed it in a discussion of a real example of a DDDAS monitoring and
predicting for interventions in a water distribution network. In Section 3 we described the TM
developed for the water network. In Section 4 we describe our experimental method to evaluate
the parameters of the TM and how these would be used to automate the calibration. Section 5
discusses conclusions drawn from the experimental study and proposes future work.

2
2.1

Hybrid Computational Steering in a DDDAS
Model for hybrid steering

In Figure 1 we show our design for hybrid steering of a DDDAS. The sub-components of the
DDDAS Steering Component are shown enclosed in the rectangle. Flowing into the steering
component from the right is the dynamic data from the real system being tracked (e.g. from
a sensor network). On the left are the simulation components and the interfaces by which
they are steered. The simulation is performed in two modes, ﬁrstly for tracking the evolving
state of the system, this is referred to as “simulation for monitoring”. Secondly, using this
state, the simulation can predict forward in time, for example so as to assess the eﬀects of
various interventions and control actions on the system. The outputs of these simulations are
fed to human experts who can tune the Calibrator in the Steering Component via the Steering
Interface at the bottom of the diagram. The DDDAS Steering Component uses machine learning
408

Hybrid Computational Steering

Han and Brooke

Figure 1: Hybrid Steering of a Dynamic Data-Driven Application System
to assimilate the dynamic data for use by the simulation, this is shown by the Calibrator
component. The Time Manager component on the top is critical to manage the running of the
machine learning so that it is suﬃciently timely for the simulation to utilise for monitoring and
prediction. Moreover, the Time Manager controls the scheduling strategy and deployment of
the computing resources based on the restrictions of the time resources.
The work-ﬂow enacted by the system of Figure 1 is as follows. Firstly, the dynamic data
drives the Calibrator to steer simulations for prediction and monitoring. Based on analysis
of the information that has been processed by the dynamic data-driven steering, human users
make their steering decisions by manipulating controls of the human-facing Steering Interface.
Then steering decisions are transferred to Calibrator component via the Steering Interface, and
the Calibrator modiﬁes parameters and variables by using code annotation. In this work-ﬂow,
visualisation of dynamic data and communication between two steering interfaces are critical
for realising human driven steering. As a result, we build this framework based on our previous
work that realises computational steering and lightweight visualisation on the IBM Blue Gene/Q
computing resources [3].

2.2

Realisation in a DDDAS for water network engineering

To ground the discussion and to provide the framework for understanding the experiments
of Section 4 we present a realisation of the conceptual framework of Figure 2 in a software
system developed to assist engineers in making knowledge based decisions in water network
engineering. The system is shown in Figure 3. It has a much greater complexity than Figure 2
because it has the function of providing Decision Support Tools for users throughout the water
company running the network to visualise the state of the network and also to launch “whatif” computations, e.g. “what would be the eﬀect on the network of turning oﬀ this valve”.
This is the predictive aspect of the software. It is important that workers out in the ﬁeld can
pose such questions via interfaces on phones and tablets. In this paper, the main focus is on
the Optimisation component on the left hand side. This has the function of taking the data
coming from the Data Acquisition & Processing component feeding into a database (DBMS)
and processing it so that it can be used to drive the computational model (just above the
data warehouse). This Optimisation component has to process the data in a suﬃciently rapid
manner so that it can keep up with evolution of the real system and with the arrival of new
batches of sensor data. The toolkit has access to high performance computing resources (in the
lower box) but a Time Management component is needed to determine how many resources
409

Hybrid Computational Steering

Han and Brooke

Figure 2: The Water Distribution System as an example of a DDDAS
are required to ensure the system remains ”live”. The whole system is described in [5] and
is currently being tested with data from real water networks which provides the basis for the
experiments in Section 4.

3

Time Issues in DDDAS

Time management is widely studied in the area of embedded systems since it is critical to
guarantee the determinism and real-time properties when interacting directly with the physical
world. However, a focus on the time management on the application level of DDDAS is less
developed. Figure 3 depicts the work-ﬂow of recent works from the aspect of the running time
410

Hybrid Computational Steering

Han and Brooke

Figure 3: Time Distribution of Steering in a DDDAS
in time window 0 and 1. The length of Calin , Simn and Predn respectively stands for the time
taken by the calibration, simulation and prediction components. These three components are
the main time consuming components in a DDDAS system, and other factors such as data
transfer are assumed into the time window for data update.
In order to guarantee the real-time property, simulations must ﬁnish before reaching the
end of the current time window. Moreover, if the result of Predn is required by the Calin+1 ,
the prediction must ﬁnish in its present time window as well. However, the times required
by these components are uncertain since both the uncertainty of the physical world and the
varying requirements on simulations can lead to a change in the workload. Consequently, the
real-time feature is vulnerable if no time management method is applied on the application
level of DDDAS. Recent works that use dynamic data on the application levels such as [8] and
[6] either assume the time window is big enough or conduct experiments based on historical
and sorted data that does not have time constraints.
As a result, time windows from 2 to 5 show possible situations in the real world when the
time is not strictly managed. For example in the time window 2, the long running of calibration
causes the delay of the simulation. This situation may happen when the physical world changes
beyond the expectation of the predictor or the original model, and the calibration must take
more time for the increasing diﬀerence between computed and observed state (ﬁdelity of the
simulation). Another situation that breaks the time constraint is shown inside the time window
3. It can be caused by requiring a high resolution of simulations especially when the ﬁdelity
can be steered based on the dynamic information in real-time. Moreover, an emergency or an
abnormal situation may increase the requirement on the updating frequency, which is the length
of the time window as shown in the time window 4. Hence, even though calibration, prediction
and simulation components are able to ﬁt into time windows under regular situations, we still
need time management methods to prevent them from exceeding time windows under uncertain
situations.
In order to insure the real-time feature in a DDDAS, it is necessary to develop a Time
Manager to assign time resources inside the Scheduler component shown in Figure 1. The
Time Manager is considered as an dynamic data-driven component since the dynamic data can
steer the running time of components through it. Moreover, we also extend the meaning of the
term “dynamic data” by introducing interventions raised by human users as a new source of
dynamic information in the DDDAS.
The workﬂow of the Scheduler of the Time Manager is shown in Figure 4. The Manual
Steering Decisions and Observational Dynamic Data, such as sensor readings on the left side,
are the dynamic data that used as input for the Time Manager to predict the required execution
time for Simulation, Prediction and Calibration components on the right end. Two components
are shown inside the Scheduler. The estimator maps the dynamic information to the time
required by other components through a model that is pre-trained based on historical relations
411

Hybrid Computational Steering

Han and Brooke

Figure 4: The Scheduler

between the dynamic information and the time required by other components. In this paper,
we use a regression decision tree to realise the estimator. Another component inside the Time
Manager, the Coordinator, is responsible for assigning deadlines for tasks based on the result
of the Estimator. Since we need to guarantee the real-time property, the time required by the
Simulation or Prediction component has the highest priority in our work-ﬂow, and as a result,
the time required by the Calibration is sacriﬁced if there is contention. If we denote TW as the
length of a pre-known time window, D(x) and Es(x) as the deadline and estimated execution
time for the Simulation, Prediction and Calibration, then we get their deadlines respectively,
D(sim) = D(pred) = T W , D(cali) = T W − M ax(Es(sim), Es(pred)). The consumed times
in the Prediction and Simulation tasks are measured and the Max function is used to output
the longer consumed time between the two tasks.
However, the limited execution time for the Calibrator reduces its accuracy. Another function of the Coordinator is to extend the execution of the Calibrator by utilising the possible
spare time in the next time window. As shown in Figure 5, the required running time of Calibrator cannot be met in Time Window 1. The rectangle beside the calibration 1 shows how
much extra time it demands. We denote this rectangle as Ex(cali) which can be represented
as Ex(cali) = Es(cali) − D(cali).
There are two sources of idle time we can make use of. In Time Window 1, the Calibrator
is lying idle when the Simulation is running since it has met its deadline. In Time Window 2,
the total time required by the Calibrator and Predictor is smaller than the time restriction, but
the spare time is not utilised. By contrast, Time Window 3 and 4 show how the Coordinator
uses the wasted time under the same situation. Firstly, after meeting the deadline of the
Calibrator, the Calibrator issues its current best results to the Simulation and Prediction. Then
it continues until reaches the end of the time window. At the boundary of two Time Windows,
the Coordinator checks if there is any spare time by checking the in-equation T W 4−Es(cali4)−
M ax(Es(sim4), Es(pre4)) > 0, then it stops the Calibration 3 if no spare time can be used in
Time Window 4 and triggers a new Simulation 3 with the latest calibration result. Otherwise,
the Coordinator extends the Calibration 3 to Time Window 4 and postpones all tasks in Time
Window 4 as long as they can ﬁnish before their deadline. The deadline, DE(cali3), for the
extended Calibration 3 in Time Window 4 is DE(cali3) = D(cali4) − Es(cali4) − Es(sim3).
The Es(sim3) is included in this formula since we need to leave enough time to update the
existing Simulation.
412

Hybrid Computational Steering

Han and Brooke

Figure 5: Scheduling Methods

4

Experiments on the Time Management System in the
Dynamic Data-Driven Water Distribution System

We now discuss experiments to determine the variation range of the running time of the machine
learning component in the water distribution DDDAS described in Section 2.2. In this use case,
the running time of Simulation and Prediction is observed to be stable and small compared with
the execution time of the Calibrator which utilises the Genetic Algorithm (GA). As a result,
we develop a speciﬁc estimation method for the Calibrator and focus our evaluation on the
estimation of Calibrator’s running time. Predicting the running time of GAs has been studied
for decades, their time complexity varies with the speciﬁc implementation methods such as
population size, crossover and mutation functions and the model which describes the problem
area. In our experiments we use the simple GA with the ﬁtness function,
NS

F (x) =

Wns × [OSns − CSns ]2

(1)

ns=1

where ns designates the ns-th sensor of N S sensors, Wns is the weight of the ns-th sensor and
OSns and CSns denotes the ns-th observational sensor reading and its corresponding simulation
result after the calibration. Thus the time of the convergence of the GA is determined purely
by the data from the water network. We could model this change in the data size either by
increasing the number of sensors used to monitor the system or by increasing the rate at which
they send data. In this study we examine only the increase in the number of sensors, this would
correspond to a scenario where the water companies are running the model to test the eﬀect of
installing diﬀering numbers of sensors preparatory to deployment.
Thus the crossover and mutation methods are ﬁxed and the only inﬂuence caused by assimilating the dynamic information is the variation of the convergence rate of GA given by
equation 1. For example, when the number of reference sensors increases, the GA must match
more simulation results with more real sensor readings. For an extreme instance, when there
is only one pressure sensor used as the reference, the calibrator only needs to match the corresponding node pressure calculated from the simulation without considering other parts of the
network. In this project, the GA is stopped after successive 40 generations do not produce improvement in the ﬁtness function 1, and the total of generations taken by the GA is considered
as the representation of the convergence speed. We use the same example, in which diﬀerent
numbers of reference sensors are tested by human users, to present how the Time Manager estimates the required time based on the instant dynamic information. A regressive decision tree
413

Hybrid Computational Steering

Han and Brooke

Figure 6: Gaussian Distribution of Generations
is trained with historical relations between the dynamic information and the required number
of generations, so that when a speciﬁc set of dynamic information is given, the tree can tell the
estimated generations required by the GA. According to the executing speed of one generation
(observing this is approximately constant), we can calculate the total time required by the
Calibrator.
However, the GA cannot guarantee a ﬁxed number of required generations for a particular
problem size since it is based on the random variation of individuals. This work assumes that
the distribution of required generation numbers can be ﬁtted to the Gaussian Distribution, then
the estimated generation number, Eg, is Eg = σ + μ which is the sum of the standard deviation,
σ, and the mean, μ, since it covers 84.2% of the distribution. And the estimated running time
of the Calibrator, Er, is Er = Eg × M ax(T g) in which, T g is the (approximately) constant
running time of a single generation.
In the experiment, modifying the number of sensors in the water distribution system is used
as the example of human-driven steering, and 8 problem sizes are selected which respectively
contain 7, 10, 13, 16 ,19, 22, 25 and 28 pressure sensors. Afterwards, the Calibrator is executed
100 times for each problem size to calibrate the water model by using real sensor information
obtained from an actual water company at 12pm on 27th of January in 2012. The distribution
of the generation numbers to meet the stop condition is shown in Figure 6, to avoid clutter only
three curves are shown as representatives. Moreover, the mean required generation number and
standard deviation for each problem size are shown in Figure 7.
From Figure 7 we can see there is a dramatic increase in generation numbers from 7 sensors
to 10 sensors. This indicates that the inﬂuence of diﬀerent number of reference sensors decreases
after 10 sensors. The observation that the standard deviation keeps around 60 for 13 or more
sensors also supports this conclusion. The reason is that, as the number of sensors increases,
the options to reach a speciﬁc ﬁtness value increase as well. Moreover, the sudden growth of
standard deviation for 16 sensors and 28 sensors indicates that, in addition to the inﬂuence
raised by the number of the chosen sensors, the number of generations for the GA to achieve
convergence can also be subject to the selection of speciﬁc sensors.
Since the running times of diﬀerent generations do not vary a lot, the main factors that
aﬀects the total running time is the number of generations. As a result, for the data from this
414

Hybrid Computational Steering

Han and Brooke

Figure 7: Average Generation Numbers of All Problem Sizes
particular water network, an optimum trade-oﬀ between accuracy and time to convergence is
achieved between 10 to 13 sensors. However, if management of the network requires a more
accurate result, more sensors can be selected with a signiﬁcant increase in the requirement for
time resources.
For testing the accuracy of the estimation, we run another 50 rounds of calibrations for each
problem sizes, and the results are shown in Table 1.

7 Reference Sensors
10 Reference Sensors
13 Reference Sensors
16 Reference Sensors
19 Reference Sensors
22 Reference Sensors
25 Reference Sensors
28 Reference Sensors

Fit into Estimation
41
39
41
46
44
41
45
46

Within 1σ
15
14
15
19
15
20
16
13

Within 2σ
35
31
36
39
38
35
39
37

Within 3σ
41
39
41
46
44
41
45
46

Table 1: The Result of Estimation
As we can see, above 85.75% of the results ﬁt into our estimation among which 31.75% of
results are within the range of 1σ, and 72.5% of results are within the range of 2σ. However,
14.25% calibrations still ran out of time before convergence. This means our method may aﬀect
the accuracy of calibrations such as the Calibration 4 shown in Time Window 4 of Figure 5.
Considering 14.25% is a small percentage, we believe this negative eﬀect is aﬀordable especially
when the diﬀerence between estimation and actual execution time is slight.
Moreover, we test the Coordinator in the aspect of the use of spare time in time windows.
A possible scenario is given as a show case in which the number of sensors is steered from 13
to 7. (This paper uses this scenario as an example to show how the hybrid steering inﬂuences
the running time of the Calibrator, more scenarios can be discussed under speciﬁc usage of
the hybrid steering in the future.) After discussing with water engineers, one potential time
415

Hybrid Computational Steering

Han and Brooke

window is 900 seconds, and since the standard deviation, σ7, and mean, μ7, of the required
generation number is 25.44 and 100.62 when 7 reference sensors are selected, the spare time
which can be requested by the calibration after steering the sensor number from 13 to 7 equals
to T W − Er7 = 156.2 seconds. Since the calibration can only run 116 generations when 13
sensors are selected, our method can help the calibration to reach 136 generations by utilizsng
the spare time. Furthermore, since the calibration requires at most 240, 185 and 131 generations
when it is in the ﬁrst, second and third σ respectively, we can conclude that the Time Manager
can, at least, enable tasks that fall into the 3rd σ area to fully complete, allow calibrations
belong to the 2nd and 1st σ to further continue 10.81% and 8.33%.

5

Conclusion and Future Work

Our experiments show how data from a real water distribution system can be a use case to
evaluate the parameters required for a Time Manager for hybrid steering, i.e. steering with
both data-centric and human-centric input. We have also presented an analysis of how such
a Time Manager is an essential component for steering a Dynamic Data-Driven Application
System (DDDAS) modelling the state of a water distribution system. Currently, the function
of the Time Manger is limited to deadline assignment and estimation. In the future, the
Time Manager’s function should be extended to scheduling computing resources based on the
time estimation information. In particular we are investigating parallelisation of the calibration
component, where the Time Manager could inform the Scheduler how much resource to dedicate
to calibration. This would allow a greater density of data sampling in both time and space.

References
[1] Tom´
as Artes, Adri´
an Cardil, Ana Cort´es, Tom`
as Margalef, Domingo Molina, Lucas Pelegr´ın, and
Joaqu´ın Ram´ırez. Forest ﬁre propagation prediction based on overlapping dddas forecasts. Procedia
Computer Science, 51:1623–1632, 2015.
[2] Frederica Darema. Dynamic data driven applications systems: A new paradigm for application
simulations and measurements. In Computational Science-ICCS 2004, pages 662–669. Springer,
2004.
[3] Junyi Han, Robert Haines, Adel Salhli, John Martin Brooke, Bruce D’Amora, and Bob Danani.
Virtual science on the move: interactive access to simulations on supercomputers. In Applicationspeciﬁc Systems, Architectures and Processors (ASAP), 2014 IEEE 25th International Conference
on, pages 178–179. IEEE, 2014.
[4] Christopher J Hutton, Zoran Kapelan, Lydia Vamvakeridou-Lyroudia, and Dragan A Savi´c. Dealing with uncertainty in water distribution system models: A framework for real-time modeling
and data assimilation. Journal of Water Resources Planning and Management, 2012.
[5] Kashif Khan. A distributed computing architecture to enable advances in ﬁeld operations and
management of distributed infrastructure. PhD thesis, University of Manchester, 2012.
[6] Avi Ostfeld, James G Uber, Elad Salomons, Jonathan W Berry, William E Hart, Cindy A Phillips,
Jean-Paul Watson, Gianluca Dorini, Philip Jonkergouw, Zoran Kapelan, et al. The battle of the
water sensor networks (bwsn): A design challenge for engineers and algorithms. Journal of Water
Resources Planning and Management, 134(6):556–568, 2008.
[7] Steven G Parker, Michelle Miller, Charles D Hansen, and Christopher R Johnson. An integrated
problem solving environment: The scirun computational steering system. In hicss, page 147. IEEE,
1998.

416

Hybrid Computational Steering

Han and Brooke

[8] Ami Preis, Andrew Whittle, and Avi Ostfeld. Online hydraulic state prediction for water distribution systems. In World Environmental and Water Resources Congress, American Society of Civil
Engineers (ASCE), 2009.
[9] Gemma Sanjuan, Carlos Brun, Tom`
as Margalef, and Ana Cort´es. Wind ﬁeld uncertainty in forest
ﬁre propagation prediction. Procedia Computer Science, 29:1535–1545, 2014.
[10] Julia Slingo and Tim Palmer. Uncertainty in weather and climate prediction. Philosophical
Transactions of the Royal Society of London A: Mathematical, Physical and Engineering Sciences,
369(1956):4751–4767, 2011.
[11] Aristotelis E Thanos, Xiaoran Shi, Juan P S´
aenz, and Nurcin Celik. A dddams framework for
real-time load dispatching in power networks. In Proceedings of the 2013 Winter Simulation
Conference: Simulation: Making Decisions in a Complex World, pages 1893–1904. IEEE Press,
2013.

417

