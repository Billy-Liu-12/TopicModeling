Procedia Computer Science
Volume 80, 2016, Pages 1071–1082
ICCS 2016. The International Conference on Computational
Science

Preference-Based Economic Scheduling in Grid Virtual
Organizations
Victor Toporkov, Dmitry Yemelyanov,
Alexander Bobchenkov, and Petr Potekhin
National Research University ”MPEI”,
ul. Krasnokazarmennaya, 14, Moscow, 111250, Russia
{ToporkovVV, YemelyanovDM, BobchenkovAV, PotekhinPA}@mpei.ru

Abstract
A preference-based approach is proposed for Grid computing with regard to preferences given
by various groups of virtual organization (VO) stakeholders (such as users, resource owners and
administrators) to improve overall quality of service and resource load eﬃciency. Computational
resources being competed for by local jobs (initiated by owners) and global (users’) job ﬂow
complicate the problem of a required service quality level substantially. A speciﬁc cyclic job
batch scheduling scheme is examined in the present work which enables to distribute and share
resources considering all the VO stakeholders’ preferences and ﬁnd a balance between VO
global preferences and those of its users. Two diﬀerent general utility functions are introduced
to represent users’ preferences satisfaction.
Keywords: distributed computing, Grid, scheduling, optimization, modelling, virtual organization,
economic models, preferences, job ﬂow, batch

1

Introduction and Related Works

In distributed computing with a lot of diﬀerent participants and contradicting requirements
the well-known eﬃcient approaches are based on economic principles [3, 5, 6, 7, 8, 9]. Two
established trends may be outlined among diverse approaches to distributed computing. The
ﬁrst one is based on the available resources utilization and application level scheduling [1, 3, 20].
As a rule, this approach does not imply any global resource sharing or allocation policy. Another
trend is related to the formation of user’s virtual organizations (VO) and job ﬂow scheduling
[14, 16]. In this case a metascheduler or a meta-broker, is an intermediate chain between the
users and local resource management and job batch processing systems.
VOs, on one hand, naturally restrict the scalability of resource management systems. On the
other hand, uniform rules of resource sharing and consumption, in particular based on economic
models, make it possible to improve the job-ﬂow level scheduling and resource distribution
eﬃciency.
Selection and peer-review under responsibility of the Scientiﬁc Programme Committee of ICCS 2016
c The Authors. Published by Elsevier B.V.

doi:10.1016/j.procs.2016.05.411

1071

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

In most cases, VO stakeholders pursue contradictory goals working on Grid. VO policies
usually contain mechanisms of interaction between VO stakeholders, rules of resource management and deﬁne user shares either statically or dynamically [4, 10]. Besides, VO policy may
oﬀer optimized scheduling to satisfy both users’ and VO common preferences, which can be
formulated as follows: to maximize users’ optimization criteria or utility function for selected
jobs [6, 17], to keep resource overall load balance [11], to have job run in strict order or maintain job priorities [12, 15], to optimize overall scheduling performance by some custom criteria
[2, 19], etc.
Users’ preferences and VO common preferences (owners’ and administrators’ combined)
may conﬂict with each other. Users are likely to be interested in the fastest possible running
time for their jobs with least possible costs whereas VO preferences are usually directed to
balancing of available resources load or node owners’ proﬁt boosting. In fact, an economical
model of resource distribution per se reduces tendencies to cooperate [26]. Thus VO policies in
general should respect all members to function properly and the most important aspect of rules
suggested by VO is their fairness. A number of works understand fairness as it is deﬁned in
the theory of cooperative games, such as fair quotas [4, 13], fair user jobs prioritization [12, 15],
non-monetary distribution [18].
In many studies VO stakeholders’ preferences are usually ensured only partially: either
owners are competing for jobs optimizing only users’ criteria [5, 6], or the main purpose is
the eﬃcient resources utilization not considering users’ preferences [12], sometimes multiagent
economic models are established [3, 20] which aren’t allow to optimize the whole job ﬂow
processing.
The cyclic scheduling scheme (CSS) [22, 23] has fair resource share in a sense that every VO
stakeholder has mechanisms to inﬂuence scheduling results providing own preferences. A ﬂexible
approach that takes into consideration VO users’ preferences and ﬁnds a balance between VO
common preferences and users’ ones in some cases in the framework of the CSS is discussed
further.
The rest of the paper is organized as follows. Section 2 presents a general cyclic scheduling
concept. A proposed VO stakegolders’ preference based scheduling technique is presented in
Section 3. Section 4 contains settings for the experiment simulation, and Section 5 contains
the simulation results for the proposed scheduling approach. Finally, section 6 summarizes the
paper.

2

Cyclic Scheduling Scheme and the Fair Resource Sharing Concept

Scheduling of a job ﬂow using the CSS is performed in time cycles known as scheduling intervals,
by job batches [25]. The actual scheduling procedure consists of two main steps. The ﬁrst step
involves a search for alternative scenarios of each job execution or simply alternatives. An
alternative for a single job represents a determined computational resource subset, having start
and ﬁnish times inside the scheduling interval boundaries. During the second step the dynamic
programming methods [23] are used to choose an optimal alternatives’ combination with respect
to the given VO criteria. This combination represents the ﬁnal schedule based on current data
on resources load and possible alternative executions.
Alternatives have time (T ) and cost (C) properties. In particular, alternatives’ time properties include execution CPU time (overall running time), execution start and ﬁnish times,
total execution runtime. Thus, a common optimization problem may be stated as either min1072

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

imization or maximization of one of the properties, having other ﬁxed or limited, or involve
Pareto-optimal strategy search involving both kinds of properties [7, 14]. For example, total
job batch execution time minimization with a restriction on total execution cost (T → min, lim
C).
Alternative executions for each job may be obtained for example as auction-based oﬀers
from resource owners [3, 5], as oﬀers from local scheduling systems [6] or by some directed
search procedures in a distributed environment [3, 21].
The ﬁrst step of CSS employs First Fit procedure to collect alternative variants. During
every iteration of the algorithm any slots being assigned are subsequently reserved and not
taken into consideration as scheduling proceeds. Such an algorithm therefore guarantees that
diﬀerent alternatives can not share slots between each other. The slots in an alternative are
reserved sequentially in an order that corresponds to the sequence of jobs in a batch, so that
enables to keep job execution order in accordance to that in a batch and a job ﬂow. If a batch is
considered as a queue, jobs placed at the top take advantage during the search for alternatives
and end up with more possible alternative executions on average (while those jobs that reside
at the bottom risk to get unscheduled).
However, the second step of CSS is based on administrators’ criteria and does not normally
take users’ preferences into account. Trying to meet the best values of load criteria, for example, the scheduler may process a single job to run according to the worst alternative from a
perspective of a user that has originally submitted that job and user’s criteria.
The concept of a fair resource sharing in VO suggests that all stakeholders should be able
to inﬂuence scheduling results in accordance with their preferences. In order to implement such
a mechanism, the resource request which is submitted by user alongside with a user job has
a custom parameter: user scheduling criterion. An example may be a minimization of overall
running time, a minimization of overall running cost etc [21]. This parameter describes user
preference for that speciﬁc job execution and expresses type of an additional optimization to
perform when searching for alternatives. The second step of CSS (which fulﬁlls global VO
optimization) is based on alternatives’ sets formed according to users’ preferences and, thus,
users have means to aﬀect the scheduling results.

3

Alternative Optimization Taking in Account Users’
Preferences

The approach described above has a distinct imbalance. VO administrators in general have
much stronger impact on ﬁnal scheduling results as their criteria (also known as VO common
preferences or policy) are employed at the ﬁnal step of the CSS.
In order to recover the balance between VO administrators and users a new type of property
is introduced for an alternative. Let us denote that as U (user utility) and treat is as we do
with T and C. So then the second step optimization problem could be in form of: (C → max,
lim U ), (U → min, lim T ) and so on.
Utility for each alternative stands for some value corresponding to a user criterion speciﬁed
to the resource request for the job. We deﬁne U so that the more some alternative corresponds
to user’s preferences the smaller the value of U .
Thus, the formal statement of the second step optimization problem for n jobs of the batch
1073

Preference-Based Economic Scheduling in Grid Virtual Organizations

Execution Alternatives
1st Alternative
2nd Alternative
3rd Alternative
4th Alternative
5th Alternative

Execution Cost
5
7
11
14
15

Order Utility
0
1
2
3
4

Toporkov et al.

Relative Utility
0%
20%
60%
90%
100%

Table 1: User utility examples for a job with an execution cost minimization criterion

could be presented as
n

f (s) =

fi (sj ) → extr, ui (sj ) ≤ ui ≤ u∗ ,

(1)

i=1

where fi (sj ) is eﬃciency of an alternative sj for job i based on VO preferences [22, 23] and
ui (sj ) is a utility for this alternative from the perspective of user, ui is a partial user utility
sum value (for example for jobs i, i + 1, ..., n or i, i − 1, ..., 1) and u∗ is general limit on user
utility for the whole batch, s = s1 , ..., sj , ..., sn .
∗

Average utility Ua = un which is correlated to the restriction u∗ in (1) can be used to simplify
the further analysis. Using utility parameter we can provide a balance between administrators’
and users’ preferences.
We consider the two main approaches to represent a user utility function. Assuming that
the ﬁrst alternative found on the ﬁrst step of CSS is in most cases the best for all users, let
the custom utility function be an alternative order U = 0, 1, 2 etc. We will call it an order
utility function. In this case the optimization problem can be stated as follows: minimize total
running time using the second found alternatives on average (T → min, lim U a = 1).
Another approach that has proven to be more ﬂexible is based on the relationship to userdeﬁned optimization criteria. The ﬁrst alternative found for a job provides the best possible
value Zmin of the user-deﬁned criterion which corresponds to the left interval boundary (U =
0%). The value of the last alternative found for the job as the “worst” of all possible ones,
corresponds to the right interval boundary Zmax (U = 100%). In the general case for each
alternative with the value Z of the optimization criterion, U is set depending on its position in
[Zmin ; Zmax ] using the following formula:
U=

Z − Zmin
∗ 100%.
Zmax − Zmin

Thus, each alternative gets its utility in relation to the “best” and the “worst” optimization
criterion values user could expect according to the job’s priority. And the more some alternative
corresponds to user’s preferences the smaller is the value of U . Using this approach one can
describe the optimization task for the second step in CSS as follows: maximize the total job
batch execution cost while on average ensuring the usage of alternatives with 0%−20% deviation
from the best possible scheduling result (C → max, lim U a = 20%).
Examples of user utility functions for a job with ﬁve alternatives and a cost minimization
criterion are presented in Table 1.
An experiment conducted on this order function is discussed further.
1074

Preference-Based Economic Scheduling in Grid Virtual Organizations

4

Toporkov et al.

Experiment Settings

An experiment was prepared as follows using a custom distributed environment simulator [24]
comprising both application and job-ﬂow scheduling levels.
Virtual organization properties:
• The resource pool includes 100 heterogeneous computational nodes with a relative performance indicator distributed evenly on [2;10] interval.
• A speciﬁc cost of a node is an exponential function of its performance value (base cost)
with an added variable margin distributed normally as ±0.6 of a base cost.
• The scheduling interval length is 600 time quanta.
• The initial resource load with owner jobs is distributed hyper-geometrically resulting in
5% to 10% time quanta excluded in total.
Job batch properties:
• Jobs number in a batch is 40.
• Nodes quantity needed for a job is a whole number distributed evenly on [2;6].
• Node reservation time is a whole number distributed evenly on [100;500].
• Job budget varies in the way that some of jobs can pay as much as 160% of base cost
whereas some may require a discount.
• Every request contain a speciﬁcation of a custom criterion which is one of the following:
job execution runtime, ﬁnish time and overall execution cost.
During an experiment a VO and a job batch is generated. Then the CSS is applied using various optimization problems (such as overall job batch execution time with total utility
limited).
These computing environment properties are mainly aﬀect the CSS alternatives search step
when alternatives are already found. However, to study the proposed fair scheduling scheme
alternative executions for each job may be obtained in other ways, for example, as auction-based
oﬀers [5]. The main diﬀerence of the proposed approach is a job batch scheduling implementing
both VO and user-based criteria optimization.
The important feature of the present study is how users’ preferences comply with a VO
common policy and optimization. It is evident that if all VO stakeholders (including both users
and administrators) are interested in overall running time minimization then the best strategy
is to select the ﬁrst alternatives found for each job. A more complex optimization from (1) is
required if that is not the case and administrators’ or resource owners’ preferences are at odds
with users’ preferences.
Thus, an experiment is conducted for studies of the following combinations of VO members
preferences:
• mixed combination when a half of jobs comply with VO preferences, and other half do
not;
• conﬂict combination when all jobs have custom scheduling criteria that fully contradict
VO preferences.
1075

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

Figure 1: Average job execution cost in a total job batch cost maximization problem with a
conﬂict preferences combination

5

Experimental Results

Two series of experiments were carried out for combinations listed above.
The conﬂict combination had the overall job batch execution cost maximized (owners’ criterion) with alternatives utility limited (C → max, lim U ). At the same time for all VO users a
criterion is set to minimize each job’s execution cost. Thus VO owners’ preferences are clearly
oppossing users’ ones.
The mixed combination had the overall cost maximized as well, but only half of jobs voted
for cost minimization, the other half had time optimizations (ﬁnish time and running time)
preferred. An additional optimization was applied to minimize overall running time of the
batch with a total utility limited (T → min, lim U ).
Let us consider the scheduling results based on an order utility function for alternatives
in a conﬂict preferences combination. Fig. 1 shows the total job batch execution cost for
diﬀerent constraints on an user utility. In this problem set VO administrators are interested
in the maximization of this cost parameter while users are interested in its minimization. As
it can be observed from the diagram, with the utility constraint Ua increasing the total cost C
increases as well and reaches its maximum when there is no actual constraint: maximum cost
is reached with Ua = 5.3 when there were on average 6.3 alternatives found for each job. In
other words, when there is no constraint on the utility (Ua ≥ 5.3), resulting job cost has the
maximum possible value, and in case when the utility restriction is the most stringent (Ua = 0),
the resulting cost is the minimum possible. So, by setting the restriction on Ua it is possible to
establish some fair scheduling VO policy balanced between common (VO’s) and local (users’)
goals. Thus, this example shows the eﬃciency of the proposed scheduling approach which
makes it possible to take into account preferences of all VO stakeholders during the second CSS
scheduling step.
1076

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

Figure 2: Average job execution cost in a total job batch cost maximization problem with a
mixed preferences combination
It is worth to notice that in a conﬂict preferences combination there exists a possibility to
ﬁnd a compromise solution. A horizontal dashed line in Fig. 1 marks the average between the
maximum (VO administrators’ preferences) and minimum (VO users’ preferences) cost values
achieved in the experiment representing the compromise value. It is interesting that this value
is reached with only Ua = 1 restriction when on average the second best alternatives were
selected for each job.
The scheduling results for a mixed preferences combination look similarly (Fig. 2). The
average cost value is also represented by a dashed horizontal line. However in this case we can
not use it as a compromise solution as there are some jobs that have optimization criteria others
than a cost minimization. In general with a mixed preferences combination the cost curve is
less steep, the minimum value is greater, and the higher values of the optimization criterion (C)
are achieved in comparison to a case of a fully conﬂict preferences combination given the same
value of the user constraint. More detailed comparison can be seen in Fig. 3 where graphs for
both conﬂict and mixed combinations presented.
The same relationship can be observed when using a relative utility function as a user
preferences indicator in both conﬂict and mixed combinations (Fig. 4). A horizontal dashed
line in Fig. 4 represents the compromise value for a conﬂict preferences combination case. This
mutual trade-oﬀ is achieved when limiting Ua to Ua = 25% and can be compared to the similar
value obtained with an order utility function in Fig. 1.
Fig. 5 shows average job execution time in a problem of a total batch job execution time
minimization with a constraint on a user utility and mixed preferences combination. Taking
into account that in this case the problem being solved is a time minimization, the dependence
on the graph is analogous to the ones described earlier. That is to say, the degree of accounting
for VO administrators’ preferences increases as the degree of accounting for users preferences
decreases, and vice versa.
1077

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

Figure 3: Average job execution cost comparison in a total job batch cost maximization problem
with both conﬂict and mixed preferences combinations

Figure 4: Average job execution cost comparison in a total job batch cost maximization problem
with both conﬂict and mixed preferences combinations

A horizontal line in Fig. 5 shows the best possible average job execution time (according
VO administrators) margined up by 1.5%. As it can be observed, such value is reached when
1078

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

Figure 5: Average job execution time in a total job batch time minimization problem with a
mixed preferences combination

Figure 6: Resulting utility values for jobs with diﬀerent optimization criteria in a total job
execution cost maximization problem
using on average the second best alternatives for each job (Ua = 1). Consequently Figs. 1-5
show that VO administrators have considerably wide range of options for optimizing the job
ﬂow scheduling with a relatively little trade-oﬀs for the VO users.
This advantage especially shows up in a case of mixed preferences. Let us consider Fig. 6
and Fig. 7 to explain this eﬀect. Presented in these ﬁgures are the average resulting values
of user utilities provided by C → max, lim U and T → min, lim U scheduling problems for
jobs with diﬀerent user optimization criteria. In addition, the straight dashed line in Fig. 6
1079

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

Figure 7: Resulting utility values for jobs with diﬀerent optimization criteria in a total job
execution time minimization problem

represents the actual average value of the user utility for the whole job batch.
It can be observed, for example, in Fig. 6 that when a common user utility grows from
0 to 2 (OX axis), average utility for jobs with min Cost criterion (which is in conﬂict with a
common VO criterion) grows to almost 4 (OY axis). At the same time utility for jobs with min
Finish Time and min Runtime criteria does not exceed 1. So, the relatively smaller average
user utility value in a mixed case is provided by the jobs with criteria correlated to the VO
optimization criteria. Thus, jobs tending to minimize runtime and ﬁnish time have utility
value below the average while the jobs with a cost minimization criterion have utility value
signiﬁcantly above the average. It can be explained as jobs executed in a less time use on
average more expensive resources and their criteria are in some accordance with a common
VO criteria. Jobs tending to minimize the execution cost are conﬂict with the VO preferences.
Therefore the best optimization strategy is to choose the ﬁrst best alternatives for jobs having
correlating criteria and the end-of-list alternatives for jobs having conﬂicting criteria.
This way, the advantage of the VO administrators in a mixed case has been reached mostly
on account of ignoring the preferences of users with conﬂicting criteria. Besides in a case
of relatively little values of utiliaty constraints, optimization is performed almost entirely on
account of jobs with conﬂicting optimization criteria. However as the total constraint increases,
the potential gain of conﬂicting jobs exhausts and the optimization of the VO criterion is
performed on account of jobs with correlating criteria.
It is worth to mention that as follows from Fig. 7, the jobs with the runtime minimization
criterion are fully consistent with the VO optimization criterion, hence for these jobs the ﬁrst
best alternative is almost always is chosen by CSS. The graph of this dependence is a straight
horizontal line coinciding the OX axis. The presence of jobs with a fully consistent criterion
allows the VO administrators to get the better value of the optimization criterion with the same
average value of the user utility.
1080

Preference-Based Economic Scheduling in Grid Virtual Organizations

6

Toporkov et al.

Conclusion and Future Work

In this paper, a problem of ﬁnding a balance between VO stakeholders’ preferences to provide
fair resource sharing and distribution is studied. In the framework of the cyclic scheduling
scheme an approach is proposed which involves user utility combined with time and cost criteria
for overall scheduling eﬃciency estimation. In our work two diﬀerent utility functions were
considered and studied. The order function is based on alternatives number, and the priority
relative function is based on the relationship to user-deﬁned optimization criteria.
An experimental study included simulation of a job ﬂow scheduling in VO. Diﬀerent combinations of VO stakeholders’ preferences were studied, when some users being in compliance
with VO preferences and others being not. A problem of ﬁnding a compromise solution which
ensures fair resource sharing for scheduling problems is reviewed separately. The experimental
results prove the mentioned scheduling scheme suggests tools to establish eﬃcient cooperation
between diﬀerent VO stakeholders, even if theirs goals and preferences are contradictory.
Further research will be related to additional mechanisms development in order to provide
a scheduling solution balanced between all VO stakeholders and a fair resources distribution
between jobs with conﬂict or consistent scheduling preferences.

Acknowledgments
This work was partially supported by the Council on Grants of the President of the Russian
Federation for State Support of Young Scientists and Leading Scientiﬁc Schools (grants YPhD4148.2015.9 and SS-362.2014.9), RFBR (grants 15-07-02259 and 15-07-03401), the Ministry on
Education and Science of the Russian Federation, task no. 2014/123 (project no. 2268), and
by the Russian Science Foundation (project no. 15-11-10010).

References
[1] F. Berman, R. Wolski, and H. Casanova. Adaptive computing on the Grid using AppLeS. Trans.
On Parallel and Distributed Systems, 14(4):369–382, 2003.
[2] H. Blanco, F. Guirado, J.L. Lrida, and V.M. Albornoz. MIP model scheduling for multi-clusters.
In Euro-Par 2012, pages 196–206, Heidelberg, 2012. Springer.
[3] R. Buyya, D. Abramson, and J. Giddy. Economic models for resource management and scheduling
in Grid computing. J. Concurrency and Computation, 14(5):1507–1542, 2002.
[4] T. Carroll and D. Grosu. Divisible load scheduling: An approach using coalitional games. In
Proceedings of the Sixth International Symposium on Parallel and Distributed Computing, ISPDC
07, page 36, 2007.
[5] M. Dalheimer, F. Pfreundt, and P. Merz. Agent-based Grid scheduling with Calana. In Parallel
Processing and Applied Mathematics, 6th International Conference, pages 741–750. Springer, 2006.
[6] C. Ernemann, V. Hamscher, and R. Yahyapour. Economic scheduling in Grid computing. In
D. Feitelson, L. Rudolph, and U. Schwiegelshohn, editors, JSSPP, volume 18, pages 128–152.
Springer, Heidelberg, 2002.
[7] M.H. Farahabady, Y.C. Lee, and A.Y. Zomaya. Pareto-optimal cloud bursting. In IEEE Transactions on Parallel and Distributed Systems, volume 25, pages 2670–2682, 2014.
[8] S. Garg, C. Yeo, A. Anandasivam, and R. Buyya. Environment-conscious scheduling of HPC
applications on distributed cloud-oriented data centers. J. Parallel and Distributed Computing,
71(6):732–749, 2011.
[9] S.K. Garg, P. Konugurthi, and R. Buyya. A linear programming-driven genetic algorithm for
meta-scheduling on utility Grids. J. Par., Emergent and Distr. Systems, 26(6):493–517, 2011.

1081

Preference-Based Economic Scheduling in Grid Virtual Organizations

Toporkov et al.

[10] A. Gulati, I. Ahmad, and C. Waldspurger. PARDA: Proportional allocation of resources for
distributed storage access. In FAST ’09 Proccedings of the 7th conference on File and storage
technologies, pages 85–98, California, USA, 2009.
[11] A. Inoie, H. Kameda, and C. Touati. Pareto set, fairness, and Nash equilibrium: A case study
on load balancing. In Proceedings of the 11th International Symposium on Dynamic Games and
Applications, pages 386–393, Arizona, USA, 2004.
[12] D. Jackson, Q. Snell, and M. Clement. Core algorithms of the Maui scheduler. In Revised Papers
from the 7th International Workshop on Job Scheduling Strategies for Parallel Processing, JSSPP
’01, pages 87–102, London, UK, 2001. Springer-Verlag.
[13] K. Kim and R. Buyya. Fair resource sharing in hierarchical virtual organizations for global Grids.
In Proceedings of the 8th IEEE/ACM International Conference on Grid Computing, pages 50–57,
Austin, USA, 2007. IEEE Computer Society.
[14] K. Kurowski, J. Nabrzyski, A. Oleksiak, and J. Weglarz. Multicriteria aspects of Grid resource
management. In J. Nabrzyski, Schopf J.M., and J. Weglarz, editors, Grid resource management.
State of the Art and Future Trends, pages 271–293. Kluwer Acad. Publ., 2003.
[15] A. Mutz, R. Wolski, and J. Brevik. Eliciting honest value information in a batch-queue environment. In 8th IEEE/ACM International Conference on Grid Computing, pages 291–297, New York,
USA, 2007. ACM.
[16] I. Rodero, D. Villegas, N. Bobroﬀ, Y. Liu, L. Fong, and S.M. Sadjadi. Enabling interoperability
among Grid meta-schedulers. J. Grid Computing, 11(2):311–336, 2013.
[17] K. Rzadca, D. Trystram, and A. Wierzbicki. Fair game-theoretic resource management in dedicated
Grids. In IEEE International Symposium on Cluster Computing and the Grid (CCGRID 2007),
pages 343–350, Rio De Janeiro, Brazil, 2007. IEEE Computer Society.
[18] P. Skowron and K. Rzadca. Non-monetary fair scheduling cooperative game theory approach. In
Proceeding of SPAA ’13 Proceedings of the twenty-ﬁfth annual ACM symposium on Parallelism in
algorithms and architectures, pages 288–297, New York, NY, USA, 2013. ACM.
[19] A. Takefusa, H. Nakada, T. Kudoh, and Y. Tanaka. An advance reservation-based co-allocation
algorithm for distributed computers and network bandwidth on QoS-guaranteed Grids. In
Schwiegelshohn U. Frachtenberg E., editor, JSSPP 2010, volume 6253, pages 16–34. Springer,
Heidelberg, 2010.
[20] T. Thain and M. Livny. Distributed computing in practice: the Condor experience. J. Concurrency
and Computation: Practice and Experience, 17:323–356, 2005.
[21] V. Toporkov, A. Toporkova, A. Tselishchev, and D. Yemelyanov. Slot selection algorithms in
distributed computing. Journal of Supercomputing, 69(1):53–60, 2014.
[22] V. Toporkov, A. Toporkova, A. Tselishchev, D. Yemelyanov, and P. Potekhin. Preference-based
fair resource sharing and scheduling optimization in Grid VOs. Procedia Computer Science, 29:831–
843, 2014.
[23] V. Toporkov, A. Toporkova, A. Tselishchev, D. Yemelyanov, and P. Potekhin. Metascheduling and
heuristic co-allocation strategies in distributed computing. Computing and Informatics, 34(1):45–
76, 2015.
[24] V. Toporkov, A. Tselishchev, D. Yemelyanov, and A. Bobchenkov. Composite scheduling strategies
in distributed computing with non-dedicated resources. Procedia Computer Science, 9:176–185,
2012.
[25] V. Toporkov, A. Tselishchev, D. Yemelyanov, and P. Potekhin. Metascheduling strategies in
distributed computing with non-dedicated resources. In W. Zamojski and J. Sugier, editors,
Dependability Problems of Complex Information Systems, Advances in Intelligent Systems and
Computing, volume 307, pages 129–148. Springer, 2015.
[26] K. Vohs, N. Mead, and M. Goode. The psychological consequences of money. Science,
314(5802):1154–1156, 2006.

1082

