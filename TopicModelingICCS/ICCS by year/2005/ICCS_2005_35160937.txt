A Fair Bulk Data Transmission Protocol in Grid
Environments
Fanjun Su1, Xuezeng Pan1, Yong lv2, and Lingdi Ping1
1

College of Computer Science, Zhejiang University,
Hangzhou 310027, China
suwang@zju.edu.cn
2 College of Electrical Engineering, Zhejiang University,
Hangzhou 310027, China

Abstract. In this paper, we propose FHSTCP (Fair High-Speed TCP) as an improvement of HSTCP, which adds a fair factor to eliminate the difference of
congestion window caused by different RTT and adopts block-pacing to reduce
the burstiness. Simulation results show that FHSTCP can alleviate the RTT unfairness meanwhile keeping advantages of HSTCP.

1 Introduction
Recently there appear many high-speed networks with bandwidth larger than 1Gbps,
even than 10Gbps. Through high-speed networks, data intensive grid application can
transfer high-bandwidth real time data, images, and video. TCP [1] performs badly in
high-speed networks [2]. Some improvements have been made, such as HighSpeed
TCP (HSTCP) [2], Scalable TCP (STCP) [3], BIC [4]. However, in [4] the author
points out that HSTCP has very severe RTT (Round Trip Time) unfairness. We define
the RTT unfairness of two competing flows to be the throughput ratio. In this paper, a
fair protocol named FHSTCP (Fair High-Speed TCP) is proposed, and we give a
relative fair criterion to evaluate the protocol. FHSTCP adds a fair factor to eliminate
the difference of congestion window between flows with different RTT. Block-pacing
scheme is adopted to reduce the burstiness caused by fair factor of long RTT flows.
The performance of FHSTCP is evaluated using ns2 [5].

2 FHSTCP
TCP and HSTCP use the following algorithm to adjust their congestion window:
ACK: w ← w + a ( w) w

Drop: w ← w − w × b(w )
Where w denotes congestion window size. For standard TCP, a(w)=1, b(w)=0.5,
which is not sufficient for high-speed networks, so HSTCP makes a(w) and b(w)
become the function of current congestion window size [2].
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 937 – 940, 2005.
© Springer-Verlag Berlin Heidelberg 2005

938

F. Su et al.

The main idea of FHSTCP is adding a factor to compensate the congestion window
increment difference caused by different RTT. Let a ( w )' = η × a ( w ) . The fair factor
is based on the value of RTT, calculating as η = c × RTT . For example, when c = 10
and RTT = 200ms = 0.2s, η = 2 . After adding fair factor, different flows can get the
same w(t ) . Because throughput V ( t ) = w( t ) / RTT , FHSTCP can keep RTT unfairness to be inversely proportional to RTT ratio. After fair factor is added, long RTT
flows will have a sharp congestion window increment after an RTT. To solve this
problem, a block-pacing method is adopted. The congestion window will be divided
into several “blocks”. After the packets in one block have been sent out, other packets
in another block will be sent after a time interval. This can counteract the negative
effects caused by adding fair factor. We set the number of the block based on fair
factor η . The details of the algorithm are shown in figure 1.
Setting initial value:
k=1; // the number of blocks
block=0; // the packets number in a block
number=0; // number of packets that has been sent
On receiving a new ack in congestion avoidance state:
increment=c*RTT*a(w)/cwnd;
// cwnd is the size of congestion window
if(increment>1)
increment=1;
// avoid the increment larger than slow start
cwnd=cwnd+increment;
k=(int)c*RTT+1;
block=cwnd/k;
On congestion happening:
cwnd=cwnd*(1-b(w));
number=0;
time_0=now; // now is current time
On Sending date:
if(number>block)
time_1=now; // now is current time
if(k>cwnd)
k=cwnd;
delay=RTT/k-(time_1–time_0);
// delay is the time interval between two blocks
// (time_1–time_0)is sending time of one block
output(delay); // send data after a time of delay
number=0; // begin a new count
time_0=time_1+delay;
else
output( ); // send data directly
number++;
Fig. 1. Pseudo-codes of FHSTCP

A Fair Bulk Data Transmission Protocol in Grid Environments

939

3 Performance Evaluation
We present a relative fairness criterion: (1) The bandwidth requirement of standard
TCP should be met. (2) The fairness between different high-speed TCP flows should
be guaranteed. Satisfying condition (1) also means the protocol has the TCP friendliness, because standard TCP only works well in high loss rate environment. The loss
rate we choose is 10-3, which is corresponding to the value of Low_P in HSTCP. To
evaluate the fairness of high-speed TCP flows, fair index [6] is used as follows:

f ( x) =

(∑ x ) (n∑
2

n

i =1

n

i =1

i

xi

2

)

where xi is the link utilization of the flow i. We adopt ns2 simulator (version 2.26) [5].
The topology and configuration are shown in figure 2. The buffer size of the router is
set to be the product of bandwidth and the delay of bottleneck link. We use TCP
SACK for the simulation, and packet size is set to 1000 byte. The maximal congestion
window is set to 1000000. FTP is the application used to transmit data through the
TCP connections. To avoid phase effect [7], some web flows and short-lived TCP
flows are used, together with 3~5 standard long-lived TCP flows. They act as background traffics for the simulation. DT (Drop Tail) queue management policy is used.

s0

2.5 Gbps
5 ~ 100 ms

1 Gbps
20 ms

R1

sn

2.5 Gbps
5 ~ 100 ms

d0

R2

dn

Fig. 2. Simulation topology and configuration

Some simulation results show effect of parameter c. we list our simulation results
in table 1(F1, F2, F3 are FHSTCP flows whose RTT are 80, 140, 200ms, and F4 denotes background flows). We can find when c=5, the per-flow bandwidth utilization
and total bandwidth utilization of FHSTCP flows decrease together. This means that a
too small value of c will limit the scalability of FHSTCP. However, when c=20, short
RTT FHSTCP flows will grasp more bandwidth and fairness are decreased too.
Table 1. The effect of c and the TCP friendliness

c

5
10
20

Bandwidth Utilization (%)
F1
29.79
32.22
44.85

F2
16.80
26.61
24.69

F3
14.38
19.36
19.92

F4
26.96
16.35
5.55

The fairness
index of
FHSTCP
0.90
0.96
0.88

Loss rate of background flows
7 × 10-5~1 × 10-4
7 × 10-5~8 × 10-4
5 × 10-4~1 × 10-3

940

F. Su et al.

What’s more, background flows can get less bandwidth. In other words, the friendliness of FHSTCP decreases. Therefore, c=10 is optimal. The packet loss rate of background flows are below 10-3 in 3 cases, so we say FHSTCP is TCP friendly.
We also give fairness comparison of FHSTCP, HSTCP, STCP and standard TCP.
Three flows with RTT being 80ms, 140ms, and 200ms respectively are used, and
different algorithms, such as FHSTCP (c=10), HSTCP, STCP, and standard TCP are
adopted respectively. The fairness index is calculated at different time scales. As
shown in figure 3, we can find FHSTCP has a better fairness property.

Fairnes index

HSTCP

standard TCP

STCP

FHSTCP

1
0. 8
0. 6
0. 4
0. 2
0

50

100

150

200

Time (s)

Fig. 3. The fairness of different algorithms

4 Conclusion
As an improvement of HSTCP, FHSTCP adds a fair factor to eliminate the difference
of congestion window caused by different RTT and adopts block-pacing to counteract
the negative effects caused by fair factor. Simulation results show that FHSTCP has
better fairness, and is TCP friendliness while keeping the advantages of HSTCP.

References
1. Stevens, W.R.: TCP/IP Illustrated: The Protocols. Volume 1. Addison-Wesley (1994)
2. Floyd S.: HighSpeed TCP for large congestion windows. RFC 3649 (2003)
3. Kelly T.: Scalable TCP: Improving Performance in High-Speed Wide Area Networks. ACM
Computer Communications Review 33 (2003) 83-91
4. Xu L., Harfoush K., Rhee I.: Binary Increase Congestion Control (BIC) for Fast LongDistance Networks. Proceedings of INFOCOM (2004) 2514 -2524
5. Network simulation-ns2. http://www.isi.edu/nsnam/ns
6. Chiu D., Jain R.: Analysis of the increase and decrease algorithms for congestion avoidance
in computer networks. Journal of Computer Networks and ISDN 17 (1989) 1-14
7. Floyd S., Jacobson V.: On traffic phase effects in packet-switched gateways. Internetworking: Research and Experience 3 (1992) 115-156

