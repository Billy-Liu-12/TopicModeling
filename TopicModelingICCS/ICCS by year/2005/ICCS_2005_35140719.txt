Interactive Fluid Animation and Its Applications
Jeongjin Lee1, Helen Hong2, and Yeong Gil Shin1
1

2

School of Electrical Engineering and Computer Science,
Seoul National University;
{jjlee, yshin}@cglab.snu.ac.kr
School of Electrical Engineering and Computer Science BK21,
Information Technology, Seoul National University,
San 56-1 Shinlim 9-dong Kwanak-gu, Seoul 151-742, Korea
hlhong@cse.snu.ac.kr

Abstract. In this paper, we propose a novel technique of fluid animation for
interactive applications. We have incorporated an enhanced particle dynamics
simulation method with pre-integrated volume rendering. The particle dynamics
simulation of fluid flow can be conducted in real-time using the Lennard-Jones
model. The computational efficiency is enhanced since a small number of
particles can represent a significant volume. To get a high-quality rendering
image with small data, we use the pre-integrated volume rendering technique.
Experimental results show that the proposed method can be successfully
applied to various fluid animation applications at interactive speed with
acceptable visual quality.

1 Introduction
The demand for interactive fluid animation has increased recently for 3D computer
games and virtual reality applications. However, it is very difficult to animate natural
fluid phenomena at interactive speed, because their motions are so complex and
irregular that intensive simulation and rendering time is needed.
In the previous work, only off-line fluid animation methods have been reported [13]. In general, fluid animation is carried out by physical simulation immediately
followed by visual rendering. For the physical simulation of fluids, the most
frequently used practices are the particle dynamics simulation of isolated fluid
particles and the continuum analysis of flow via the Navier-Stokes equation. Miller et
al. [4] proposed a spring model among particles to represent viscous fluid flow.
Terzopoulos et al. [5] introduced molecular dynamics to consider interactions
between particles. In these approaches, when the number of particles increases
significantly, the number of related links between particles exponentially increases.
Therefore, it takes too much time for realistic fluid simulation due to the large number
of particles for describing complex fluid motions. Stam [1] proposed a precise and
stable method to solve the Navier-Stokes equations for any time step. Foster [3]
applied a 3D incompressible Navier-Stokes equation. Above methods using the
Navier-Stokes equations yield a realistic fluid motion when properly conditioned, but
still need huge calculations of complex equations. The second limitation is the time
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 719 – 726, 2005.
© Springer-Verlag Berlin Heidelberg 2005

720

J. Lee, H. Hong, and Y.G. Shin

complexity of visual rendering. Global illumination has been widely used for natural
fluid animation. Jensen et al. [6] proposed a photon mapping method currently used in
many applications. Global illumination is generally successful in rendering premiumquality images, but too slow to be used in interactive applications.
In this paper, we propose a novel technique for interactive fluid animation and its
applications. For rapid analysis of the motion of fluids, we use a modified form of
particle dynamic equations. The fluid interaction is approximated by the attractive and
repulsive forces between adjacent particles using the Lennard-Jones model to emulate
fluid viscosity. To get a high quality rendering image with a smaller volume data, we
use a pre-integrated volume rendering method [7]. Experimental results show that our
method is successfully applied to various interactive fluid animation applications.
The organization of the paper is as follows. In Section 2, we discuss the particle
dynamics simulation of our method, and describe how the simulation data are rendered. In
Section 3, experimental results show various kinds of interactive fluid animation
applications. This paper is concluded with brief discussions of the results in Section 4.

2 Interactive Fluid Animation Methodology
2.1 Dynamics Simulation of Fluid Particles
Two approaches, particle dynamics and continuum dynamics, have been widely used
for fluid simulation. The continuum dynamics approach is not suitable for interactive
applications due to its high time complexity of calculating the Navier-Stokes equation
[1-3]. In our approach, a simple particle dynamics approach is chosen since it is much
faster than a continuum dynamics approach based on the Navier-Stokes equation.
In particle dynamics, a spherical particle is assumed to be the basic element that
makes an object such as for solid, liquid and gas, and used for calculating interactions
between particles. For N spherically symmetric particles, the total inter-particle
potential energy
addition.

( )

E r N is the sum of isolated pair interactions according to pair-wise

( )

E r N = ∑∑ u (rij ) , i ≠ j ,
where
and

N

N

(1)

i =1 j =1

r is the set of vectors that locate centers of mass, i.e. r N = {r1 , r2 , r3 ,..., rN }
N

rij is the scalar distance between particles i and j.

The elementary potential energy

u (rij ) is taken from the Lennard-Jones (LJ)

potential model [8]. For two particles i and j separated by a distance
energy

u (rij ) between the both can be defined as

⎛⎛ σ
u (rij ) = 4ε ⎜⎜ ⎜
⎜r
⎝ ⎝ ij

12
6
⎞
⎛ σ ⎞ ⎞⎟
⎟ −⎜ ⎟ .
⎟
⎜ rij ⎟ ⎟
⎠
⎝ ⎠ ⎠

rij , the potential

(2)

Interactive Fluid Animation and Its Applications

The force field

721

f ij created by two particles i and j can be given as

du (rij ) ⎛ 48ε
f ij = −
=⎜ 2
drij
⎝σ

⎛
⎞⎜ ⎛⎜ σ
⎟⎜ ⎜
⎠ ⎝ rij
⎝

14
8
⎞
⎛ σ ⎞ ⎞⎟
1
⎟ − ⎜ ⎟ rij .
⎟
2 ⎜⎝ rij ⎟⎠ ⎟
⎠
⎠

(3)

Since the inter-particle potential forces are conservative within a given potential field,
the overall potential force Fi , p acting on particle i is related to the potential by

Fi , p = −
where

( )

∂E r N
= mi&r&i ,
∂ri

(4)

mi is the mass of particle i. Fig. 1 illustrates the Lennard-Jones potential and

the force extended over a modest range of pair separations. The critical distance at
which the positive sign of the inter-particle force becomes negative can be considered
as the particle radius.

Fig. 1. The Lennard-Jones potential and the force

The friction force

Fi , f on particle i can be given as
Fi , f = −ζr&i ,

(5)

where ζ is the friction coefficient. The governing equation of the force balance on
particle i can hence be written as

722

J. Lee, H. Hong, and Y.G. Shin

−

( )

∂E r N
+ ζr&i = 0 .
∂ri

(6)

Eq. (6) can be used to calculate the interaction between particles by assuming them
as slightly deformable soft spheres. The soft sphere collision method is useful for
treating interactions between particles with the separation distance within a moderate
multiple of the critical distance.
2.2 Realistic Rendering of Simulation Data
A photon mapping method [6] accomplishes the global illumination effect using ray
tracing, which is excessively slow for interactive applications. For interactive
rendering without the loss of image quality, we use a pre-integrated volume rendering
on graphics hardware. Rendering of simulation data is accomplished in the following
three steps. In the first step, we transform the simulation data into volume data. We
divide the 3D space, in which particles of simulation data are stored, into regular cells
having unit length d. The density of each cell is determined by the volume fraction
value as Eq. (7). These density values are used for volume rendering.

4
n × πr 3
3
Volume fraction =
,
d3

(7)

where n is the number of particles in the cell and r is the radius of particles. In the
second step, we visualize volume data using a pre-integrated volume rendering
technique. The color and opacity between two neighboring slices of volume data are
pre-integrated and stored in the graphics hardware texture memory for acceleration.
Using the pre-integrated volume rendering technique accelerated by graphics
hardware we can get the high quality image with a smaller volume data at the
interactive rate. In the third step, we can control the opacity transfer function, which
assigns different colors and opacity values according to volume data. Various visual
effects can be generated by interactively modifying the opacity transfer function.

3 Experimental Results
All of the implementations have been performed on an Intel Pentium IV PC
containing 2.4 GHz CPU with GeForce FX 5800 graphics hardware. Fig. 2 and 3
show the animation of water flowing from a bottle to a cup. The opacity transfer
function of this animation is given in Table 1. Between two control points Vi and Vj,
color and opacity are determined using linear interpolation. As shown in Fig. 2, when
the number of particles (n) is 2000 and the radius of particles (r) is 0.002 [m], particle
characteristics of the water are emphasized. This animation occurs in 7 ~ 8 fps at 730
x 520 resolution. Fig. 3 shows that when the number of particles (n) is 10000 and the
radius of particles (r) is 0.003 [m], continuum characteristics of the water are
emphasized. This animation occurs in 3 ~ 4 fps at 730 x 520 resolution.

Interactive Fluid Animation and Its Applications

723

Table 1. Opacity transfer function for water animation

d1 / V1(R, G, B, A)
d2 / V2(R, G, B, A)
d3 / V3(R, G, B, A)
d4 / V4(R, G, B, A)

(a)

0.21 / (0, 0, 255, 0.0)
0.23 / (36, 65, 91, 1.0)
0.28 / (154, 208, 228, 1.0)
0.30 / (0, 0, 160, 0.0)

(b)

(c)

Fig. 2. The animation of pouring water from a bottle into a cup (n = 2000, r = 0.002 [m]) (a) t =
0.12 [s] (b) t = 0.33 [s] (c) t = 1.02 [s]

(a)

(b)

(c)

Fig. 3. The animation of pouring water from a bottle into a cup (n = 10000, r = 0.003 [m]) (a) t
= 0.12 [s] (b) t = 0.33 [s] (c) t = 1.02 [s]

Fig. 4 shows the comparison of our method with RealFlow, which is the widely
used commercial software for fluid animation. The average number of particles used
for the animation of RealFlow is 1870000 while that of our method is 8000. For the
generation of 10 seconds’ animation in Fig. 4(e), (f), RealFlow computes during 4
hours 30 minutes whereas our method finishes within 150 seconds. The experimental
results show that our method gives similar visual quality comparing with RealFlow
using much smaller number of particles. In addition, total processing time of our
method is dramatically faster than that of RealFlow.
Fig. 5 shows water and artificial fluid flow using our fluid animation method. Fig.
6(a) shows a conceptual overview of fluidic shadow dance application. The shadow of
the viewer is projected onto a screen by a light. Two columns to the left and right of
the viewer are equipped with a vertical array of switches. When the viewer’s hand

724

J. Lee, H. Hong, and Y.G. Shin

(a)

(b)

(c)

(d)

(e)

(f)

Fig. 4. Comparison of our method with RealFlow (a) RealFlow (n = 160000) (b) our method (n
= 8000) (c) RealFlow (n = 5000000) (d) our method (n = 6000) (e) RealFlow (n = 450000) (f)
our method (n = 10000)

(a)

(b)

(c)

(d)

Fig. 5. Fluid animation for fluidic shadow dance application (a) water flow from left-lower side
(b) artificial fluid flow from right-lower side (c) water flow from left-upper side (d) artificial
fluid flow from right-upper side

Interactive Fluid Animation and Its Applications

725

(b)

(a)

(c)

Fig. 6. The fluidic shadow dance application (a) conceptual overview (b) flow from left column
(c) flow from both columns

(b)

(a)

(c)

Fig. 7. The fluid portrait application (a) conceptual overview (b) by fingertip (c) by stick

comes in contact with a specific location, the corresponding switch is inputted into
our program, and the image of a fluid flowing out from that location is animated.
Fluids coming out of the two columns are ejected towards the center of the viewer’s
body, subsequently fall towards the bottom simulating gravity, collide into one
another, and then splash upwards resulting in a free and irregular motion. The
demonstration of this interactive application is shown in Fig. 6(b), (c).
Fig. 7(a) shows a conceptual overview of fluid portrait application. A camera
projects the viewer’s face onto the surface of a touch screen. Interaction is created
between the viewer’s hand movements and rendered fluid in real-time. If the viewer

726

J. Lee, H. Hong, and Y.G. Shin

continuously stimulates a certain spot, small water droplets merge together to form a
large water drop. When the viewer stimulates a different spot, the merged water drop
disperses and moves to the other stimulated spot to form into a large water drop again.
The demonstration of this interactive application is shown in Fig. 7(b), (c).

4 Conclusion
This paper presents a novel technique of fluid animation, which integrates particle
dynamics simulation and pre-integrated volume rendering. The particle dynamics
simulation can be conducted in real-time using the Lennard-Jones model.
Furthermore, pre-integrated volume rendering allowed us to avoid the unnaturalness
of images usually obtained with particle dynamics, and achieve an image quality good
enough for interactive applications. In the animation of water, both the particle and
continuum characteristics of the water can be realistically displayed by manipulating
simulation parameters. Comparing with widely used commercial software, our fluid
animation method is performed at dramatically faster speed with comparable visual
quality. Various experimental results show that our method can be successfully
applied to interactive fluid animation applications.

References
1. Stam, J., Stable Fluids, ACM SIGGRAPH (1999) 121-128.
2. Foster, N., Practical Animation of Liquids, ACM SIGGRAPH (2001) 23-30.
3. Foster, N., Realistic Animation of Liquids, Graphical Models and Image Processing (1996)
204-212.
4. Miller, Gavin S. P., Pearce, A., Globular Dynamics: A Connected Particle System for
Animating Viscous Fluids, Computers and Graphics Vol. 13, No. 3 (1989) 305-309.
5. Terzopoulos, Platt, Fleischer, From Goop to Glop: Melting Deformable Models, Graphics
Interface (1989).
6. Jensen, H.W., Christensen, P.H., Efficient Simulation of Light Transport in Scenes with
Participating Media using Photon Maps, ACM SIGGRAPH (1998) 311-320.
7. Engel, K., Kraus, M., Ertl, T., High-Quality Pre-Integrated Volume Rendering Using
Hardware-Accelerated Pixel Shading, Siggraph/Eurographics Workshop on Graphics
Hardware (2001) 9-16.
8. McQuarrie, D.A., Statistical Mechanics, Harper and Row (1976).

