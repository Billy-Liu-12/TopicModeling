Using Rewriting Techniques in the Simulation
of Dynamical Systems:
Application to the Modeling of Sperm Crawling
Antoine Spicher and Olivier Michel
´
LaMI, umr 8042 du CNRS, Universit´e d’Evry
– GENOPOLE,
Tour Evry-2, 523 Place des Terrasses de l’Agora,
´
91000 Evry,
France
{aspicher, michel}@lami.univ-evry.fr

Abstract. Rewriting system (RS) are a formalism widely used in computer science. However, such a formalism can also be used to specify
executable models of dynamical systems (DS) by allowing the speciﬁcation of the evolution laws of the systems in a local manner.
The main drawback of RS is that they are well understood and well
known only for terms (a tree-like structure) and that their expressivity
is not enough for the representation of complex organizations that can
be found in DS.
We propose a framework based on topological notion to extend the
notion of RS on more sophisticated structures; the corresponding concepts are validated through the development of an experimental programming language, MGS, dedicated to the simulation of DS. We show
how the MGS rewriting system can be used to specify complex dynamical systems and illustrate it with the simulation of the motility of the
nematode’s sperm cell.

1

Introduction

In this paper, we advocate the use of rewriting techniques for the simulation of
complex dynamical systems. The systems we are interested in, are often systems
with a dynamical structure [1]. They are diﬃcult to model because their state
space is not ﬁxed a priori and is jointly computed with the current state during
the simulation. In this case the evolution function is often given through local
rules that drive the interaction between some system components.
These rules and their application are reminiscent of rewriting rules and their
strategy. As a programming language, rewriting systems have the advantage of
being close of the mathematical formalism (transparencial referency and declarativeness).
The aim of the MGS project is to develop new rewriting techniques on data
structures beyond tree-like organization, and to apply these techniques to the
modeling and simulation to various dynamical systems with a dynamical structure in biology. The key idea used here to extend rewriting systems to more
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 820–827, 2005.
c Springer-Verlag Berlin Heidelberg 2005

Using Rewriting Techniques in the Simulation of DS

821

general data structures is a topological point of view: a data structure is a set
of elements with neighborhood relationship that speciﬁes which elements of the
data structure can be accessed from a given one.
This paper is organized as follows. Section 2 recalls the basic notions of
rewriting system and sketches its application to the simulation of dynamical
systems. Then we present the MGS programming language. An example illustrates
the introduced notion: the MGS simulation approach on a dynamical system with
a dynamical structure. The system to be modeled is the motility of a cell, inspired
by a previous work [2].

2
2.1

Rewriting and Simulations
A Computational Device

A rewriting system [3] (RS) is a device used to replace some part of an entity
by another. In computer science, the entities subject to this process are usually
expressions represented by formal trees. A RS is deﬁned by a set of rules, and
each rule α → β speciﬁes how a subpart that matches with the pattern α is
substituted by a new part computed from the expression β. We call the pattern
α the left hand side of the rule (l.h.s), and β the right hand side (r.h.s).
We write e →∗ e to denote that an expression e is transformed by a series
of rewriting in expression e . It is called a derivation of e. The transformation
of e into e can be seen as the result of some computations deﬁned by the
rewriting rules and the derivation corresponds to the intermediate results of the
computation.
2.2

Rewriting and Simulation

We will see how rewriting can be used for the simulation of dynamical systems
(DS), i.e., systems described by a state that changes with the time. Using RS
for the simulation of DS means:
– the state of the DS is represented by an expression,
– its evolution is speciﬁed by a set of rewriting rules deﬁning local transformation.
Then, given an initial state e, a derivation of e following a RS corresponds to a
possible trajectory of the DS.
The role of a rule is to specify an interaction between diﬀerent parts (atomic
or not) of the system, or the answer of the system to an exterior message.
So, at a cellular scale, c + s → c means a cell c that receives a signal s, will
change its state to c ; c → c + c speciﬁes a cell division and c → . represents
apoptosis. In these examples, operator + denotes the composition of entities into
subsystems. The formalism of RS has consequences of the properties of DS taken
in considerations, especially on the management of time and space.
Discretized Time. An important point in the modeling of a DS is the handling
of time. Clearly the model of time naturally supported by the framework of

822

A. Spicher and O. Michel

rewriting is a discrete, event based, model of time: the application of a rule
corresponds to some event in the system and this event corresponds to an atomic
instantaneous change in the system state.
Locality of Space. The previous operator + that joins entities and messages expresses the spatial and/or the functional organization of the modeled system and
is used to denotes interacting parts of the system and the composition of entities
into a subsystem. So, on the ﬁrst hand, the l.h.s and the r.h.s of a rule specify
a local part of the system where an interaction occurs. As a consequence, rules
represent local evolution laws of the DS. On the other hand, the organization
structures speciﬁed in the l.h.s and the r.h.s can diﬀer to generate a modiﬁcation
of the structure. This allows the modeling of a special and diﬃcult to represent
kind of DS, the dynamical systems with a dynamical structure or (DS)2 (see [4]).

3

MGS: A Framework for Modeling and Simulating
Dynamical Systems Using RS

MGS is a project that aims at integrating the formalism of RS in a programming
language dedicated to the modeling and the simulation of (DS)2 . In this section, we will present this language. MGS embeds a complete, impure, dynamically
typed, strict, functional language.
3.1

Topological Collections

One of the distinctive features of the MGS language is its handling of entities
structured by abstract topologies using transformations [5]. The notion of data
structures is uniﬁed in the notion of topological collection, a set of entities organized by an abstract topology. Topological means here that each collection type
deﬁnes a neighborhood relation inducing a notion of subcollection.
Topological Collection and the Representation of a DS State. Topological collections are well-ﬁtted to represent the complex states of DS at a given time. The
elements of the topological collection are the atomic elements of DS and each
element has a value.
3.2

Transformations

Topological collections represent a possible framework for an extension of RS.
Indeed, the neighborhood relationship provides a local view of the structural
organization of elements. Transformations extends the notion of RS to structures
other than trees and they are used to specify evolution functions of modeled DS.
A transformation of a topological collection S consists in the parallel application
of a set of local rewriting rules. A local rewriting rule r speciﬁes the replacement
of a subcollection by another one. The application of a rewriting rule σ ⇒
f (σ, ...) to a collection S (1) selects a subcollection Si of S whose elements
match the pattern σ, (2) computes a new collection Si as a function f of Si and
its neighbors, and (3) speciﬁes the insertion of si in place of si into s.

Using Rewriting Techniques in the Simulation of DS

823

Voronoi polygon

Delaunay triangle

Perinuclear region

κ
Xi

Xj
τij

µi

µj

Fig. 1. The nematode sperm cell. At the left, a schematic diagram showing the cell
organization: on the left, the nuclear region is found, on right is the lamellipodium.
Its discretization is done by the nodes. The plain edges correspond to the Delaunay
neighborhood. The dashed edges are the boundaries of the Voronoi polygons. At top
right, a ﬁgure of a zoomed part of the mesh is given. At bottom right, a Delaunay edge
links two nodes with a spring of modulus κ in parallel with a tensile element of stress
τ . A friction of coeﬃcient µ appears when a node is in contact with the exterior tissue
(these diagrams are inspired by ﬁgures from [2])

Path Pattern. A pattern σ in the l.h.s of a rule speciﬁes a subcollection where
an interaction occurs. This subcollection can have an arbitrary shape, making it
very diﬃcult to specify. Thus, it is more convenient (and not so restrictive) to
enumerate sequentially its elements. Such enumeration will be called a path.
Replacement. The right hand side of a rule speciﬁes a collection that replaces
the subcollection matched by the pattern in the left hand side.

4

Application to the Simulation of Nematode Sperm
Crawling

In this part, we are interesting in implementing a complex biological model
proposed by Bottino et al [2]. This model simulates the motility of the sperm cell
of the nematode Ascaris suum. We ﬁrst describe the model and its discretization
in 2D. Then we see how this model can be translated in the MGS formalism.
4.1

Description of the Model

The sperm of Ascaris suum crawls using a lamellipodial protusion, adhesion
and retraction cycle. The chemical mechanisms of motility are located in the
front of the cell called lamellipodium. In this model, the system corresponds to

824

A. Spicher and O. Michel

the lamellipodium membrane stuck to the matrix surrounding the cell. First, a
ﬁbrous polymerization occurs at the leading edge of the cell creating protusions.
These protusions push the cell membrane forward. Then, some elastic energy
is stored in the created ﬁbrous gel. During the adhesion step, the protusions
stick the matrix with a traction process that makes the cell body traveling. The
ﬁbrous gel undergoes a contraction. The ﬁnal step occurs near the boundary
between the lamellipodium and the rest of the cell where the depolymerization
of the ﬁbrous gel causes the deadhesion of the membrane. As a consequence,
the stored energy is released to pull the cell body forward. This mechanics is
moderated by a pH gradient.
The considered continuous equations corresponds to the elastic and tensile
stress in the membrane ﬁxed to the extracellular matrix, and to pH distribution
to deal with the pH dependence.
Mechanical Forces. The equation given by Bottino et al. governing the mechanical forces is:
∂u
= ∇.σ(u)
µ(u)
∂t
where u is a position vector. The l.h.s corresponds to the drag force due to
the contact between the membrane and the matrix. The r.h.s computes the
mechanical forces from the stress given by σ = Elastic Stress − Tensile Stress.
All the coeﬃcients depend on distribution of the pH.
pH Distribution. The pH distribution follows a diﬀusion equation with a leak.
But, this distribution is done in a shorter time scale. Therefore, considering a
quasi-static approximation, we obtain:
D∇2 [H+ ] = P([H+ ] − [H+ ]ext )
where [H+ ] is the proton concentration at a given position, [H+ ]ext is the external
proton concentration, D and P are properties of the cell. The l.h.s represents the
diﬀusion and the r.h.s is the leakage.
4.2

The Finite Element Model

This 2D surface is divided into ﬁnite elements in order to approximate the previous continuous diﬀerential equations. Each element corresponds to a node of a
mesh (see ﬁgure 1). A node represents a Voronoi tessellated cell are represented
by dashed edges on ﬁgure 1. The neighborhood of each Voronoi polygon is given
by a Delaunay triangulation and is ﬁgured as plain edges.
There are three kinds of element: (1) the lamellipodial boundary (Bnodes)
where the protusion occurs (in black), (2) the interface (N Rnodes) between the
lamellipodium and the cell body (in dark grey) where the retraction is done, and
(3) the interior (Inodes) of the lamellipodium (in light grey).
Polymerization and Depolymerization. The polymerization and the depolymerization of the gel respectively correspond to the creation and the deletion of

Using Rewriting Techniques in the Simulation of DS

825

Inodes. Two thresholds give the upper and the lower lengths of a Delaunay
edge. Let Xi and Xj be two nodes and lij the length of the Delaunay edge linking Xi and Xj . If lij > lmax , a node is created is the middle of the edge with
a pH being the average between the pH at Xi and Xj . In practice, nodes are
created near the boundary. On the opposite, if lij < lmin and Xi is a N Rnode,
Xj is deleted.
Discretization of the Continuous Equations. The previous equations are translated; for a node Xi :
1
∂ui
=
∂t
µi

(κ|Xi − Xj | − τij )C2ij
j

C1ij ([H+ ]i − [H+ ]j ) =
j

Xj − Xi
|Xj − Xi |

(mechanical forces)

P
([H+ ]i − [H+ ]ext ) (pH distribution)
D

In these two equations, the ∇ operators of the continuous one are replaced by
a ﬁnite iteration over the neighbors Xj of the node Xi . The computation is
local and well-suited to a rewriting framework. The coeﬃcients Ckij depend on
geometrical properties of the Voronoi/Delaunay triangulation (such as the area
of Voronoi polygons). In the ﬁrst equation, the term κ|Xi − Xj | corresponds to
the elastic force between Xi and Xj (on bottom right of ﬁgure 1). In fact, the
Delaunay edges are considered as an elastic element (emulated by a spring of
modulus κ) in parallel with a tensile element (with the stress τij ). The coeﬃcient
µi represents the drag eﬀect.
4.3

MGS Implementation

The translation of the model in terms of transformations and topological collections is straightforward.
Data Structures. First, we have to represent a node of the Delaunay graph. We
use an MGS record (a data structure equivalent to a C struct) composed by 8
ﬁelds:
record Node = { px:float, py:float, vx:float, vy:float
H:float, pH:float, Bflag:bool, NRflag:bool };
Fields px and py represent the position of the node, vx and vy the speed vector,
and H and pH the proton concentration and the pH. We also deﬁne three predicates Inode, Bnode and NRnode, to determine the type of the node. They use
the booleans Bflag and NRflag of a node.
A Delaunay graph is a predeﬁned type of a topological collection available
in MGS. This type of collection is parameterized by a function that returns the
position of an element in space to automatically compute the neighborhood. So
we deﬁne this function for our example:
delaunay(2) D2 = fun elt ->
if Node(elt) then (elt.px, elt.py)
else error("bad element type") fi ;;

826

A. Spicher and O. Michel

Evolution Laws. Now that we have a representation for the data, we have to
specify the evolution laws from the discrete equations. We start with checking
the structure to create or delete nodes. The following MGS rules compute both
polymerization and depolymerization:
polymerization:

Xi, Xj / (length(Xi,Xj) > lmax) =>
Xi, {pH=(Xi.pH+Xj.pH)/2,...}, Xj
depolymerization: Xi:Inode, Xj / (length(Xi,Xj) < lmin) => Xj

where function length returns the length between two nodes, and Xi:Inode
speciﬁes that the node Xi must be a Inode. As soon as these rules are applied,
the Delaunay neighborhood is automatically updated.
After that, the pH distribution has to be updated to take account of the new
or the deleted nodes. The equation provides the value of the proton concentration
of a node as a function of the proton concentration of its neighbors:
trans update pH = {
Xi:Bnode => ...; Xi:NRnode => ...;
Xi => let num = neighborsfold(
(fun Xj acc -> C1(Xi,Xj) * Xj.H + acc),
0, Xi) + (P/D) * H ext
and den = neighborsfold(
(fun Xj acc -> C1(Xi,Xj) + acc),
0, Xi) + (P/D)
in Xi + {H = num/den, pH = -log10(num/den) }
}
The transformation update pH is composed by 3 rules. The two ﬁrst deal with the
boundary conditions of the equation, and the last one applies the equation. The
function neighborfold is used to evaluate the sum of proton concentration of the
neighbors of Xi balanced by the coeﬃcient C1ij . neighborfold corresponds to a
basic fold on the sequence of the neighbors of Xi. Finally, Xi is replaced by Xi+{H
= num/den, pH = -log10(num/den)} that denotes the new value of Xi where
the ﬁelds H and pH are updated. To deal with the quasi-static approximation, this
transformation is iterated until a ﬁxpoint is reached. This iteration corresponds
to the resolution of inverting a matrix as Bottino et al. do.
To end one step of the simulation, the force equation has to be computed
and the velocities and positions of the nodes updated. The implementation of
this transformation is quite similar to update pH.

5

Discussion and Conclusion

The simulation developed here mimics in MGS the initial model developed by
Bottino et al. and implemented in Matlab [6]. One of the main motivations
for the development of this example, was to compare the conciseness and the
expressivity of the MGS programming style compared to a more traditional programming language. Our opinion (which is subjective) is that the developed code

Using Rewriting Techniques in the Simulation of DS

827

is more concise and more readable, for instance because the management of the
Voronoi tessellation and the Delaunay triangulation is completely transparent
to the programmer. From the point of view of the performance, our approach
is comparable (with respect to the few indications available into the articles of
Bottino et al.) despite that the current MGS interpreter is a prototype version.

Acknowledgments
The authors would like to thank J.-L. Giavitto and J. Cohen at LaMI, D. Boussi´e,
F. Jacquemard at INRIA/LSV-Cachan and the members of the “Simulation and
Epigenesis” group at Genopole for technical support, stimulating discussions and
biological motivations. This research is supported in part by the CNRS, GDR
´
´
ALP, IMPG, University of Evry
and Genopole/Evry.

References
1. Giavitto, J.L.: Invited talk: Topological collections, transformations and their application to the modeling and the simulation of dynamical systems. In: Rewriting Technics and Applications (RTA’03). Volume LNCS 2706 of LNCS., Valencia,
Springer (2003) 208 – 233
2. Bottino, D., Mogilner, A., Roberts, T., Stewart, M., Oster, G.: How nematode
sperm crawl. Journal of Cell Science 115 (2002) 367–384
3. Dershowitz, N., Jouannaud, J.P.: Rewrite systems. In: Handbook of Theoretical
Computer Science. Volume B. Elsevier Science (1990) 244–320
4. Giavitto, J.L., Godin, C., Michel, O., Prusinkiewicz, P.: “Computational Models for
Integrative and Developmental Biology”. In: Modelling and Simulation of biological
processes in the context of genomics. Hermes (2002).
5. Giavitto, J.L., Michel, O.: The topological structures of membrane computing.
Fundamenta Informaticae 49 (2002) 107–129
6. Bottino, D.: Ascaris suum sperm model documentation (2000)

