Fast In-place Integer Radix Sorting
Fouad El-Aker
Computer Science Department, University of Petra,
P.O. Box 940650, Amman 11194, Jordan
elaker_fouad@maktoob.com
elaker_fouad@yahoo.ca

Abstract. This paper presents two very efficient sorting algorithms. MSL is an
O(N*B) in-place radix sorting algorithm, where N is the input size and B is the
keys length in bits. This paper presents an implementation of MSL that is sublinear in practice, for uniform data, on Pentium 4 machines. We also present an
O(N*logN) hybrid quicksort that has a non-quadratic worst case.

1 Introduction
Right to left LSD and left to right MSD are O(N*B) radix sorting algorithms. N is the
input size and B is the length of keys in bits. LSD and MSD use an extra space of size
N. ALR [4] and MSL [1] process bits left to right, however unlike MSD, ALR and
MSL are in-place and cache friendly. MSD, ALR and MSL execute recursively, for
every partition. LSD body code is executed only B/D times, where B is the length of
keys in bits and D is the used digit size. This makes the design of algorithms faster
than LSD quite difficult. LSD is faster than MSD in [6]. We present a sub-linear run
time MSL implementation suitable for sorting 31 bits and 63 bits integers in Java in
this paper. MSL implementation in Section 2 uses small digit sizes increasing data
cache friendliness. MSL loops were implemented reducing the number of
instructions, and therefore increasing instruction cache friendliness. In addition,
section 3 presents a non-quadratic implementation of quicksort, called switch sort.
Hybridizing switch sort and MSL does not improve over MSL. Section 4 presents the
test results. Section 5 gives the conclusions and future work.

2 MSL and Smaller Digit Sizes
MSL and ALR use a permutation loop in order to avoid reserving an extra array of
size N, which is performed in MSD. The main steps of MSL are presented in [1].
MSL permutation loop, shuffles keys into their target groups. In the circular list of
keys, K = <K1, K2, .. , KL>, assume the Target Address (KJ) = Array Location (KJ+1),
where J is not equal to L, and Target Address (KL) = Array Location (K1). Digit
extraction and group end address lookup are used in computing a key’s target address.
MSL permutation loop moves keys in a circular list K to their target addresses. K1 is
named the initial key in K, and is computed prior to the permutation loop.

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 788 – 791, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Fast In-place Integer Radix Sorting

789

Many permutation loops are required in order to shuffle all keys in a group to their
target addresses. ALR searches for K1 sequentially, and preserves the property that all
keys to the left of the current K1 key are in their correct target addresses. MSL
searches groups’ information sequentially for the left most group, GLeft, which has at
least one key possibly not in its target address. MSL uses the top key in GLeft, as K1.
In [5], sections 4 and 5, digit size 6 was determined as appropriate for radix sorting
algorithms. This is because of data cache friendliness. The importance of cache
friendliness in radix sorting algorithms is emphasized in [5] and [4]. MSL also cuts to
insertion sort for group sizes 20 or less, same as [4].

3 Switch Sort
Hybridized quicksort [3] implementation in this paper selects one from many pivot
computations and is described in this section. Assume that we are interleaving the
execution of a constant number, K, of divide and conquer algorithms whose worst
cases are f1, f2 , .. fK. The list of algorithms is denoted AL = (A1, A2, .. AK). When AJ in
AL performance is degenerate, we interrupt AJ and switch execution to the next
algorithm in the circular list AL. AL worst case is equal to K * fW provided that the
following conditions hold. (1) fW = Min (f1, f2 , .. fK). (2) We can determine that the
current call to AJ is futile in constant time. (3) We can switch execution to the next
algorithm in the circular list AL without loosing the processing done so far. If each AJ
in AL executes a futile call, execution returns to AW after circular calls to other
algorithms in AL. A quicksort example is shown and described next.
SS(int A[], int A_Pivot, int l, int r, int min, int
max){
if ( r – l + 1 <= 10 ) insertionSort (Array, l, r );
} else { Step 1: switch (Apply_Pivot) {
case 0 : Pivot = max/2 + min/2 ; break;
case 1: Pivot = Median_3 (A) ; break; }
Step 2: Pos = partition (A, Pivot, l, r) ;
Step 3.1:

Compute R%;

Step 3.2: if (R < 0.05) A_Pivot = A_Pivot ^1;
Step 4: Quicksort(A, A_Pivot, l, Pos, Pivot,
max);
Quicksort(A, A_Pivot, Pos+1, r,
}
}

min, Pivot);

// xor

790

F. El-Aker

We measure balanced partitioning in quicksort to determine that the current call is
futile. The partitioning ratio is defined as the size of the smaller partition divided by
the size of the input group in quicksort. Let P% be the minimum acceptable
partitioning ration, over all the algorithms in AL, equals 5% in Step 3.2. R% is the
partitioning ration for the current quicksort call. When R% < P%, Step 3.2,
partitioning is named degenerate or a failure. AL code above has only quicksort
implementations, and a switch statement is used to decide which pivot computation to
use, see Step 1 above. We call the algorithm switch sort (SS). Step 3.2 selects an
alternative pivot computation for recursive calls. Max-Min average pivot computation
in the first line in Step 1 is an adaptive implementation of taking the middle value of
the input range in radix exchange [7]. Median of three quicksort passes down the
actual lower partition max and the actual upper partition min. Radix exchange always
divides the input range by half on recursive calls, independent of data. AL worst case
is O(2 * NlgN), where the worst case of radix exchange is O(2 * NlgN).

4 Experimental Results
In Table 1, MSL run time is non-significantly sub-linear in experiments. The test data
is uniform. The machine used for the displayed results is 3 GHz Pentium 4, 1GB
RAM, 1MB level 2 cache, and 16 KB level 1 cache, with 400 MHz RAM speed. MSL
sub-linear run time was confirmed on other Pentium 4 machines. In Table 1, add the
sizes at columns headings to the sizes at each row to get the array size at a cell. Row
30M+ (30 millions+) and column +5M refer to the cell for the array size 35 millions.
In Table 1, MSL running time for array size 35 millions is 4000 milliseconds, and
for array size 70 millions is 7875 milliseconds, 31 bits integers. In Table 1, the
running time for array size 25 millions, is 4032 milliseconds, and for array size 50
millions, is 7735 milliseconds, for 63 bits integers.
Cutting to insertion sort is an important factor in MSL. On the other hand, we
could not improve the running time of MSL by hybridizing MSL with switch sort.
MSL and switch sort are compared against other algorithms in Table 2.
Table 1. MSL running times in milliseconds. Sizes are multiple of M=106
31Bits
N=0+
N=10M+
N=20M+
N=30M+
N=40M+
N=50M+
N=60M+
63Bits
N=0+
N=10M+
N=20M+
N=30M+
N=40M+

+1M
93
1563
2578
3594
4671
5782
6890
+1M
141
2016
3469
4860
6375

+2M
188
1671
2678
3703
4766
5875
6953
+2M
250
2157
3578
5016
6500

+4M
437
1875
2891
3906
5000
6062
7172
+4M
594
2485
3859
5328
6797

+5M
657
1984
2984
4000
5079
6172
7313
+5M
843
2594
4032
5469
6953

+6M
890
2094
3078
4125
5218
6313
7453
+6M
1125
2765
4141
5625
7125

+8M
1234
2266
3281
4344
5390
6532
7656
+8M
1531
3016
4438
5891
7406

+10M
1469
2500
3484
4547
5625
6734
7875
+10M
1859
3281
4735
6203
7735

Fast In-place Integer Radix Sorting

791

LSD, digit size 8 (LSD8) is faster than LSD with digit size 16, LSD16, and other
digit sizes, on the test machine. LSD processes the total keys bits. MSL processes
only the distinguishing prefixes, but is recursive (section 1). In Table 2, MSL has half
the run time of LSD8 for 63 bits data. In addition, MSL is better than LSD8 for larger
31 bits arrays. See size 16 and 32 millions as well as MSL sub-linear run time in
Table 1. Switch sort (SS), is faster than LSD16, 63 bits longs data. Switch sort is also
faster than the two algorithms, which Switch sort alternates, quicksort and Max-Min
Average (MMA). Java built in tuned quicksort (JS), which is a tuned implementation
of [2], is used in Table 2, instead of our own slower median of three quicksort.
Table 2. MSL running times in milliseconds. Sizes are multiple of M=106
31Bits
MSL
LSD8
LSD16
JS
SS
MMA
63Bits
MSL
LSD8
LSD16
JS
SS
MMA

1/2M
47
47
94
109
109
109
1/2M
62
172
250
156
140
141

1M
93
109
234
234
250
234
1M
141
344
516
329
313
312

2M
188
234
500
516
500
500
2M
250
672
1015
672
640
641

4M
437
454
1031
1062
1031
1031
4M
594
1328
2031
1422
1344
1360

8M
1234
938
2047
2219
2141
2172
8M
1531
2719
4563
2969
2781
2829

16M
2094
1875
4250
4640
4500
4516
16M
2765
5563
8609
6203
5860
5906

32M
3703
3859
8656
9672
9546
9438
32M
5016
10953
18891
12922
12203
12359

5 Conclusion and Future Work
MSL is a sub-linear in-place radix-sorting algorithm, for uniform data. Switch sort is
a non-quadratic implementation of quicksort. Future work includes low run time
algorithms and models for sorting as well as for other problems.

References
1. Al-Badarneh Amer, El-Aker Fouad: Efficient In-Place Radix Sorting, Informatica, 15
(3), 2004, pp. 295-302.
2. J. L. Bentley, and M. D. McIlroy: Engineering a Sort Function, Software-Practice and
Experience, 23 (1), 1993, pp. 1249-1265.
3. F. El-Aker, and A. Al-Badarneh: MSL: An Efficient Adaptive In-place Radix Sorting
Algorithm, ICCS, Part II, 2004, pp. 606-609.
4. Maus, A.: ARL: A Faster In-place, Cache Friendly Sorting Algorithm, Norsk
Informatikkonferranse, NIK'2002, 2002, pp. 85-95.
5. N. Rahman and R. Raman: Adapting radix sort to the memory hierarchy, Proc. 2nd
Workshop on Algorithm Engineering and Experiments, ALENEX, 2000.
6. Sedgewick, R.: Algorithms in Java, Parts 1-4, 3rd Ed., Addison-Wesley, 2003.

