Performance Evaluation of Protein Sequence
Clustering Tools
Haifeng Liu and Loo-Nin Teow
DSO National Laboratories (Kent Ridge), 27 Medical Drive, Singapore 117510
lhaifeng@dso.org.sg

Abstract. This paper aims to evaluate the clustering quality of various
protein clustering tools that are publicly available as standalone applications. We ﬁrst review the current protein sequence clustering methods,
and introduce a new incrementally clustering tool denoted as PINC. We
then propose an intuitive performance metric for evaluating them. The
evaluation results of the tools on the public database Pfam are reported.

1

Introduction

With the enormous growth of public sequence database, grouping the sequences
into protein families, is increasingly becoming important as it provides evolutionary, functional and structural information on the sequences. Protein families
can be deﬁned as those groups of molecules which share signiﬁcant sequence
similarity ([7]). Well characterized proteins within a family can hence allow one
to reliably assign functions to family members whose functions are not known
or not well understood. Many methods have been developed for clustering protein sequences according to similarity (or distance) information. This approach
usually groups homologous proteins together via a similarity measure obtained
by sequence comparison. However, correctly clustering a large number of protein sequences based on the approach still remains a huge challenge due to the
following inherent characteristics of proteins:
– Multi-domain proteins. Proteins containing multiple domains that may be
similar to diﬀerent sets of unrelated clusters can confound the protein family detection methods and result in the incorrect grouping of proteins into
families.
– Promiscuous domains. Promiscuous domains are widespread components of
many proteins. Proteins assigned to a protein family purely on the basis
of a promiscuous domain probably have very diﬀerent functions with other
members of that family.
– Fragmented proteins. Public databases may contain fragmented protein sequences (peptides). This incomplete information may lead to the incorrect
assignment of a protein into a family.
– Distantly related proteins. Certain proteins sharing little sequence identity
can have the same function. It is hard to group this kind of distantly related
proteins together without comparison of their three-dimensional structures.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 877–885, 2005.
c Springer-Verlag Berlin Heidelberg 2005

878

H. Liu and L.-N. Teow

Although progress has been made on computational protein clustering in
terms of accuracy and eﬃciency, very little work in the literature addresses the
systematic comparison and evaluation of clustering results from diﬀerent tools.
Typically, diﬀerent clustering algorithms yield diﬀerent clustering solutions on
the same data, and there is no agreed-upon guideline for choosing among them.
In this paper, we ﬁrst review the current protein sequence clustering methods,
and introduce a new incrementally clustering tool denoted as PINC. We then
conduct a performance assessment of PINC and selected representatives from
a variety of computational protein clustering approaches on uniﬁed data sets
using an intuitive performance metric proposed by us. The work would provide
researchers a good understanding of current protein clustering tools, and assist
the application of them in identifying structural and evolutionary relationships
between proteins.

2

Clustering Methods

Current commonly employed protein clustering methods require sequence similarity relationships as input, but diﬀer in dealing with the following major issues:
1. Domain decomposition. Basically, the protein clustering methods can be
divided into two categories: the methods that have a preliminary decomposition of each protein into its constituent domains such as applied in [6, 9, 16],
and the methods that directly cluster the protein sequence and are not domain aware including [1, 5, 8, 14] and so on. Although the former methods
have achieved success in constructing well-known databases like PRODOM
([6]), ADDA ([12]) and so on, they hampered to a large extent by promiscuous domains, fragmented proteins, and proteins with complex domain structure. This paper focuses on the comparison of the latter methods.
2. Sequence comparison manner. Typically, most of algorithms such as
[8, 9, 16, 12, 5] precompute or read in all pairwise sequence comparison. This
all-against-all precomputation suﬀers from an excessive and unpredictable
sequence comparison steps for large scale detection of protein families. On
the other hand, several incremental clustering algorithms ([11, 14]) reduce
the number of sequence comparisons by setting a representative sequence
for each cluster. To assign a protein sequence into the existing clusters, the
sequence is only compared to the representatives of the clusters.
3. Sequence similarity measure. As proposed in [14], the similarity between
two protein sequences is ﬁrst measured by the percentage of identical residues
between them whereas most methods including [9, 8, 16, 5] measure the similarity between two protein sequence by the scores obtained from similarity
search algorithms such as BLAST and FASTA ([17]).
4. Cutoﬀ threshold. Almost all clustering algorithms set a cutoﬀ threshold
to adjust the granularity (or “tightness”) of resulted clusters. Usually, the
sequence similarity measures are directly adopted as the cutoﬀ threshold

Performance Evaluation of Protein Sequence Clustering Tools

879

variables, such as E-value from BLAST ([16]) and FASTA score ([12]). Unfortunately, there is no single cutoﬀ score that works for all families and
diﬀerent families may be formed at diﬀerent cutoﬀ scores. Other clustering
criteria are adopted to solve the problem, such as in ([8]) the power coeﬃcient
of a stochastic matrix is varied to control the tightness of clusters. Recently
a metric, called cluster utility, that combines inter-cluster dissimilarity and
intra-cluster similarity,e has also been proposed to guide the sequence clustering ([13]).
5. Transitivity. Transitivity relationship is used by those clustering algorithms that precompute sequence comparison to infer distantly related proteins. However it is not fully understood if transitivity always holds and
whether transitivity can be extended inﬁnitely ([5]). Typically, a multidomain protein may connect two clearly unrelated proteins and assign them
into the same family. In [12], the graph theory based algorithms avoid the
problem by controlling speciﬁcity of clusters using criteria which set the
shared regions among family members. MCL algorithm in [8] simulates random walks withing a graph representing sequence similarity and iteratively
eliminates the inter-family similarities due to multi-domain proteins.
In this work, we only conduct the performance evaluation to the programs
that are publicly available as standalone applications. We brieﬂy introduce them
as follows: (we focus on the methods that automatically clustering the proteins
without the detection of domains.)
BLASTCLUST. BLASTCLUST ([1]) automatically and systematically clusters proteins based on pairwise matches found using the BLAST algorithm. It
ﬁnds pairs of sequences that have statistically signiﬁcant matches and clusters
them using single-linkage clustering which puts a sequence into a cluster if the
sequence is a neighbor to at least one sequence in the cluster. The neighbor
relationship between two sequences is determined by a score density threshold,
whose adjustment also incurs the varied output clusters.
TRIBE-MCL. TRIBE-MCL ([8]) is a publicly available tool that aims to
rapidly and accurately cluster protein sequences into families. It relies on the
Markov cluster algorithm for the assignment of proteins into families based on
precomputed all-against-all sequence similarity information using BLAST. The
inﬂation value parameter (I > 1) of the MCL algorithm is used to control the
granularity of clusters.
CD-HI. CD-HI ([14]) uses the same greedy incremental algorithm as in ([11])
where a sequence is compared with the existing representatives of clusters. If the
similarity with any representative is above a given threshold, it is then included
into that cluster. Otherwise a new cluster is created with the sequence as its
representative. The program detects similar sequences by counting the number
of identical short words between them, which speeds up the clustering process.
The output of the program varies according to the identity threshold (40−90%).

880

H. Liu and L.-N. Teow
Input: Set P of protein sequences
sequence similarity threshold (evalue)
Output: Set R of clusters, each cluster is a subset of P
R ← ∅;
while (P = ∅)
fetch a sequence x from P
if (R = ∅)
create a cluster C which contains x
the seed of C ← x
add C into R
else
compare x with the seeds of clusters in R
find the nearest cluster O with seed s
if similarity score between x and s is less than
add x into O
update the seed of O
else
create a cluster C which contains x
the seed of C ← x
add C into R
Fig. 1. Clustering algorithm PINC for detecting protein families

PINC. We propose an algorithm, denoted as PINC (Protein INcremental Clustering), which employs the similar incremental clustering algorithm as CD-HI,
but uses BLAST to compare sequences as BLAST is a widely used sequence
comparison tool and provides statistically signiﬁcant alignments. The BLAST
E-value score is directly used to vary the output of PINC. The details of the
algorithm is shown in Fig. 1, whereby the seed of a cluster is a representative of
sequences in the cluster. We adopt two options to determine the seed of a cluster. Firstly, to keep the algorithm simple, we determine the longest sequence in a
cluster as its seed at present. We denote the algorithm as PINC-L. Alternatively,
the seed of a cluster may be the consensus string of a multiple alignment of all
sequences in the cluster. This approach, however, may require a large amount of
additional computation and hence decrease the eﬀectiveness of the algorithm. In
our implementation, we use ClustalW ([19]) to do the multiple sequence alignments. The multiple alignment is updated whenever a new sequence is added
into the cluster, either by aligning all the sequences together (version PINC-C1)
or incrementally aligning the new added sequence with the existing alignment
(version PINC-C2).

3

Benchmarking Data

Diﬀerent protein sequence clustering programs have been evaluated on diﬀerent
data sets. CD-HI was reported to run fast on databases PDB, SWISS-PROT

Performance Evaluation of Protein Sequence Clustering Tools

881

([3]) and NR downloaded from the NCBI, but without any mention of its clustering quality. The eﬀectiveness of TRIBE-MCL was tested in an extensive way.
It was performed on SWISS-PROT and PDB databases, and the results were
then respectively validated using the InterPro protein domain database ([2])
and the Structural Classiﬁcation of Proteins (SCOP) ([15]) database. 1583 clusters (out of 1821 or 87%) obtained by running TRIBE-MCL on SWISS-PROT
were found to have full correspondence with domains in InterPro, while 79%
to 87% of proteins in clusters with SCOP classiﬁcation are consistent with the
SCOP cluster assignment. This validation process is not straightforward when
there is a requirement of two or more reference databases being involved. In
this paper, we evaluate the clustering tools by testing them on the subsets of
Pfam database (release 10.0) of protein families ([4]) which contains 6, 190 families and 553, 048 protein sequences. Pfam families were constructed manually or
semi-automatically using hidden Markov models (HMMs) based on the proteins
in Swiss-Prot (41.10) and TrEMBL (23.15). Pfam families have permanent accession numbers and contain functional annotation and cross-reference to other
databases, such as SCOP ([15]), and can be easily downloaded from its public
website. The metrics for measuring the quality of clustering programs on the
Pfam families are introduced in the next section.

4

Evaluation Metrics

To evaluate the comprehensive power of diﬀerent clustering programs, we have
separately applied the programs on the variable number of Pfam families. Given
a set of testing protein families, after the clustering operation is performed,
we say a family is homogeneous if its members are assigned into one resulted
cluster, and a resulted cluster is pure if it only contains the proteins from one
testing family. We quantitatively measure the family homogeneity and cluster
purity as follows. Let Nf be the number of given testing protein families and
Nc be the number of clusters produced by a tested clustering tool, for a family
j having mj members, its family homogeneity, denoted as F Hj , is deﬁned as
Nc
F Hj = i=1
(xi /mj )2 where xi is the number of members of the family assigned
into cluster i. Likewise, for a cluster i containing ni proteins, its cluster purity,
Nf
2
denoted as CPi , is deﬁned as CPi =
j=1 (yj /ni ) where yj is the number
of members of the family j assigned into the cluster. The above deﬁnitions of
family homogeneity and cluster purity are based on the complement form of the
deﬁnition of heterozygosity for genetic markers which is H = 1 − pi 2 ([10])).
Overall, the family homogeneity (FH) and the cluster purity (CP) obtained by
the program are respectively deﬁned as the weighted averages of all individual
family homogeneities and all individual cluster purities as below:
Nf

FH =

Nf

(F Hj ∗ mj )/
j=1

mj
j=1

(1)

882

H. Liu and L.-N. Teow

and

Nc

Nc

(CPi ∗ ni )/

CP =
i=1

ni .

(2)

i=1

By analogy to the conventional F-measure ([18]) in the ﬁeld of information retrieval, we measure the overall clustering quality by combining F H and CP as
their harmonic mean:
F ∗ = 2 ∗ F H ∗ CP/(F H + CP ).

(3)

Speed and memory are critical issues when clustering a large number of sequences given limited computer resources. All programs tested in this work run
on a PC with dual Pentium III 1 Ghz CPU and 1 gigabyte physical memory
which is operated by Red Hat 9.0. We also compare the running times of diﬀerent programs.

5

Results

We have ﬁrstly run the selected programs on 1, 710 protein sequences from 10
randomly chosen Pfam families. The results with diﬀerent input parameters are
shown in Table 1. Clearly, we observe that CD-HI runs very fast but with a poor
performance due to a large number of fragmental clusters. This is because the
primary goal of CD-HI is to reduce the redundancy of protein database, and it
is more suitable for clustering the proteins that share certain sequence identity.
The big diﬀerences between the F ∗ values obtained by BLASTCLUST with
the varied parameter “density threshold (S)” settings imply that we may apply
BLASTCLUST only when the input parameter can be carefully determined.
PINC-L, PINC-C1 and PINC-C2 (PINCs) are comparable with TRIBE-MCL in
terms of the clustering quality, with PINC-C1 achieving the highest F ∗ value of
0.793 when the input E-value threshold is set to 0.1. In addition, PINC-C1 and
PINC-C2 outperform PINC-L by setting the seed of a cluster as the consensus
string but at the cost of running speed. In particular, PINC-C1 has a signiﬁcant
drawback in terms of the running speed due to the large amount of multiple
sequence alignments involved. Although PINCs run slower than TRIBE-MCL
(the running time of TRIBE-MCL includes the time spent on the precomputation
of sequence similarities using BLAST), we notice that the number of clusters by
TRIBE-MCL is very sensitive to the (inﬂation) parameter value, whereas PINCs
seem to be more robust against diﬀerent (E-value) parameter values.
As TRIBE-MCL and PINCs outperform the other programs based on the
above results, we prefer to utilize them in practice. Before that, we need to further measure their scalability with larger testing data set. We then run TRIBEMCL and PINC-L on 28, 117 protein sequences from 100 randomly chosen Pfam
families. (We do not run PINC-C1 and PINC-C2 because they require a few
weeks’ running time in our PC). The results are shown in Table 2. TRIBEMCL achieves a higher F ∗ value than PINC-L with the speciﬁc input parameter

Performance Evaluation of Protein Sequence Clustering Tools

883

Table 1. Evaluation results of protein clustering programs running on 10 Pfam families

Tools
t = 0.4
t = 0.6
t = 0.9
I = 1.0
TRIBE-MCL I = 1.5
I = 2.0
e = 0.01
PINC-L
e = 0.1
e=1
e = 0.01
PINC-C1 e = 0.1
e=1
e = 0.01
PINC-C2 e = 0.1
e=1
CD-HI

Number of
clusters
471
922
1, 695
2
11
383
52
34
21
35
26
15
45
31
15

FH
0.068
0.024
0.006
0.999
0.770
0.374
0.467
0.487
0.491
0.619
0.668
0.663
0.494
0.549
0.601

CP
1
1
1
0.183
0.661
0.890
0.997
0.964
0.767
0.981
0.976
0.815
0.990
0.940
0.776

F∗
0.12
0.048
0.012
0.310
0.712
0.526
0.636
0.647
0.599
0.759
0.793
0.731
0.659
0.693
0.678

Running time
(seconds)
4
2
2
60, 860
530
472
1, 527
940
787
41, 146
46, 163
48, 505
3, 064
3, 290
3, 726

Table 2. Evaluation results of protein clustering programs running on 100 Pfam families
Tools
I = 1.5
TRIBE-MCL I = 2.0
e = 0.01
PINC-L
e = 0.1
e=1

Number of
clusters
325
7, 448
447
175
45

FH
0.587
0.195
0.357
0.362
0.272

CP
0.909
0.952
0.954
0.719
0.355

F∗
0.713
0.324
0.519
0.482
0.308

Running time
(seconds)
64, 792
49, 180
259, 366
104, 416
34, 785

(I = 1.5) while both programs run quite slowly (TRIBE-MCL requires longer
than 2 weeks’ running time with I = 1). However, we notice that TRIBE-MCL
has a limitation on the input scale because of its precomputation of all-againstall sequence similarity and large amount of memory usage. In fact, TRIBE-MCL
runs out of memory and crashes in our PC when we apply it to a clustering of
52, 614 protein sequences from 300 Pfam families, whereas PINC-L achieves a
F ∗ value of 0.496 after a run of 3 days. Therefore, for clustering large scale
protein sequence sets, TRIBE-MCL should be considered only when abundant
computing resources are available, while PINC can give reasonably good clustering accuracies but a long running time with limited computing resources.

6

Conclusions

Our evaluation results show that existing tools solely based on sequence similarity between proteins are still deﬁcient in clustering quality and eﬃciency,

884

H. Liu and L.-N. Teow

especially when coping with a large number of proteins, and suggest that more
powerful tools need to be developed. In our future work, in order to improve the
running speed of PINCs which currently hinders applying PINCs in large scale
clustering, we will rewrite the programs in C language in place of current Perl
scripts. In addition, we consider developing a parallel version of PINCs (or other
programs) for dealing with the large scale clustering job with parallel computers.

References
1. S. F. Altschul, T. L. Madden, A. A. Schaﬀer, J. Zhang, and et al. Gapped BLAST
and PSI-BLAST: a new generation of protein database search programs. Nucleic
Acids Research, 25(17):3389–3402, 1997.
2. R. Apweiler, T.K. Attwood, A. Bairoch, A. Bateman, E. Birney, and et al. The
InterPro database, an integrated documentation resoruce for protein familes, domains and functional sites. Nucleic Acids Research, 29:37–40, 2001.
3. A. Bairoch and R. Apweiler. The SWISS-PROT protein sequence data bank and
its supplement TrEMBL in 1999. Nucleic Acids Research, 27:49–54, 1999.
4. A. Bateman, E. Birney, L. Cerruti, R. Durbin., and et al. The Pfam protein familes
database. Nucleic Acids Research, 30(1):276–280, 2002.
5. E. Bolten, A. Schlipe, S. Schneckener, D. Schomburg, and R. Schrader. Clustering
protein sequences — structure prediction by transitive homology. Bioinformatics,
17(10):935–941, 2001.
6. F. Corpet, F. Servant, J. Gouzy, and D. Kahn. ProDom and ProDom-CG: tools for
protein domain analysis and whole genome comparisons. Nucleic Acids Research,
28(1):267–269, 2000.
7. M. O. Dayhoﬀ. The origin and evolution of protein superfamilies. Fed. Proc.,
35:2132–2138, 1976.
8. A. J. Enright, S. V Dongen, and C. A. Ouzounis. An eﬃcient alogrithm for largescale detection of protein families. Nucleic Acids Research, 30(7):276–280, 2002.
9. A. J. Enright and C. A. Ouzounis. GeneRAGE: a robust algorithm for sequence
clustering and domain detection. Bioinformatics, 16(5):451–457, 2000.
10. H. R. Gregorius. The concept of genetic diversity and its formal relationship to
heterozygosity and genetic distance. Math. Biosciences, 41:253–271, 1978.
11. L. Holm and C. Sander. Removing near-neighbour redundancy from large protein
sequence collections. Bioinformatics, 14:423–429, 1998.
12. S. Kim.
BAG: A graph theoretic sequence clustering algorithm.
In
http://bio.informatics.indiana.edu/sunkim/BAG, School of Informatics, Indiana
University-Bloomington.
13. S. Kim and A. Gopu. Cluster Utility: A new metric to guide sequence clustering.
In http://bio.informatics.indiana.edu/sunkim/BAG, School of Informatics, Indiana
University-Bloomington.
14. W. Li, L. Jaroszewski, and A. Godzik. Clustering of highly homologous sequences
to reduce the size of large protein databases. Bioinformatics, 17(3):282–283, 2001.
15. G. Murzin, A., S. E. Brenner, T. Hubbard, and C. Chothia. SCOP: A structural
classiﬁcation of proteins database for the investigation of sequences and structures.
J. Mol. Biol, 247:536–540, 1995.
16. J. Park and S. A. Teichmann. DIVCLUS: an automatic method in the GEANFAMMER package that ﬁnds homologous domains in single- and multi-domain
proteins. Bioinformatics, 14(2):144–150, 1998.

Performance Evaluation of Protein Sequence Clustering Tools

885

17. W. R. Pearson and D.J. Lipman. Improved tools for biological sequence comparison. Proc. Natl. Acad. Sci., 85:2444–2448, 1988.
18. C.J. Van Rijsbergen. Information Retrieval. Butterworths, London, 1979.
19. J.D. Thompson, D.G. Higgins, and T.J. Gibson. CLUSTAL W: improving the
sensitivity of progressive multiple sequence alignment through sequence weighting,
position-speciﬁc gap penalties and weight matrix choice. Nucleic Acids Research,
22(22):4673–4680, 1994.

