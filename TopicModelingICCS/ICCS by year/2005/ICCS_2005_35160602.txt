Development of SyNRAC
Hitoshi Yanami1,2 and Hirokazu Anai1,2
1

Information Technology Core Laboratories, Fujitsu Laboratories Ltd,
Kamikodanaka 4-1-1, Nakahara-ku, Kawasaki 211-8588, Japan
yanami@flab.fujitsu.co.jp, anai@jp.fujitsu.com
2

CREST, Japan Science and Technology Agency,
Kawaguchi Center Building, 4-1-8, Honcho, Kawaguchi 332-0012, Japan

Abstract. We present newly implemented procedures in SyNRAC, which
is a Maple package for solving real algebraic constraints derived from
various engineering problems. The current version of SyNRAC has added
quantiﬁer elimination (QE) by cylindrical algebraic decomposition (CAD)
as well as QE by virtual substitution for weakly parametric linear formulas. We also show an application of CAD-based QE to the common
Lyapunov function problem.

1

Introduction

Recently symbolic computation methods have been gradually applied to solving
engineering problems, which has been caused by the eﬃcient symbolic algorithms introduced and improved for these few decades and by the advancement
of computer technology that has hugely increased the CPU power and memory
capacity.
We have been developing a Maple toolbox, called SyNRAC, for solving real
algebraic constraints. SyNRAC stands for a Symbolic-Numeric toolbox for Real
Algebraic Constraints and is aimed at being a comprehensive toolbox including
a collection of symbolic, numerical, and symbolic-numeric solvers for real algebraic constraints derived from various engineering problems. When we say a real
algebraic constraint, what we have in mind is a ﬁrst-order formula over the reals.
Our main method is quantiﬁer elimination (QE), which removes the quantiﬁed
variables in a given formula to return a quantiﬁer-free equivalent.
In this paper we present the newly implemented procedures in SyNRAC. In
[1] two types of special QE methods as well as some simpliﬁcation procedures of
quantiﬁer-free formulas had been implemented in SyNRAC. Besides, the current
version of SyNRAC provides the following:
• general QE by cylindrical algebraic decomposition (CAD)
• special QE by virtual substitution for weakly parametric linear formulas.
CAD-based QE is called general in the sense that it can deal with any type of
formula, without thought of the eﬃciency. Historically, the CAD-based approach
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 602–610, 2005.
c Springer-Verlag Berlin Heidelberg 2005

Development of SyNRAC

603

preceded the special QE methods we had already implemented in SyNRAC. We
implemented special QE ﬁrst because there was a good class of formulas to which
many practical problems could be reduced and a much more eﬃcient special QE
method was applicable [2, 3].
The latter procedure is an improved special QE procedure based on [4] for a
subclass of the linear formulas—the weakly parametric linear formulas. We have
implemented more eﬃcient QE specialized for the class, which can reduce the
size of an elimination set roughly by a factor of two at each stage.
This paper is organized as follows. We brieﬂy describe CAD and show the
commands on CAD in SyNRAC in Section 2. In Section 3, we present special QE
by virtual substitution for weakly parametric linear formulas and compare the
procedure in SyNRAC with a previous one. In Section 4, we show an example
problem to which SyNRAC’s CAD command can apply. We end with a conclusion
in Section 5.

2

Cylindrical Algebraic Decomposition

Cylindrical algebraic decomposition (CAD) was discovered by Collins in 1973;
see [5] for his monumental work. Collins also proposed a general QE algorithm
based on CAD, which provided a powerful method for solving real algebraic
constraints.
Let A be a ﬁnite subset of Z[x1 , . . . , xn ]. An algebraic decomposition for A is
a collection of mutually disjoint, semi-algebraic, A-invariant sets that partitions
the Euclidean n-space E n . To deﬁne the term cylindrical, we explain three parts
of a CAD procedure—the projection phase, the base phase, and the lifting phase.
In the projection phase of a CAD, the PROJ function plays a central role. Let
r be an integer greater than 1. PROJ maps a ﬁnite set of integral polynomials
in r variables to a ﬁnite set of integral polynomials in r − 1 variables: for Ar ⊂
Z[x1 , . . . , xr ], PROJ(Ar ) ⊂ Z[x1 , . . . , xr−1 ]. For a given A ⊂ Z[x1 , . . . , xn ], we
obtain a list
PROJ
PROJ
PROJ
PROJ
A = A0 → A1 → A2 → · · · → An−1 ,
where Ai ⊂ Z[x1 , . . . , xn−i ].
In the base phase we partition E 1 by using a set of univariate polynomials An−1 ⊂ Z[x1 ]; we ﬁnd all the real zeros of An−1 and partition E 1 into
An−1 -invariant regions that consist of the zeros of An−1 and the remaining open
intervals. These points and intervals are called sections and sectors, respectively.
The lifting phase inductively constructs a decomposition of E i+1 from the
decomposition of E i , i = 1, 2, . . . , n − 1. Suppose D is a decomposition of E i . A
¯ of E i+1 obtained by decomposing the space
lifting of D is a decomposition D
R × E 1 by using An−i−1 for each region R ∈ D and putting all of them together.
Let R be a region of a decomposition D of E i . R × E 1 is decomposed by the
following; Take a point (p1 , . . . , pi ) in R and substitute it for (x1 , . . . , xi ) in
each polynomial in An−i−1 to obtain a set of univariate polynomials in xi+1 ;
Partition E 1 into, say, L0 , L1 , . . ., L2k+1 by using the roots of the polynomials

604

H. Yanami and H. Anai

in xi+1 ; Regard R × L0 , R × L1 , . . ., R × L2k+1 as the resulting decomposition.
The condition for this process to work is that An−i−1 is delineable on R, in
other words, every pair of polynomials in An−i−1 has no intersections on R. In
such a case the decomposition is independent of the choice of a sample point. A
decomposition D of E r is cylindrical if it is constructed by iterating the above
lifting method, i.e., r = 1 and E 1 is decomposed as in the base phase, or r > 1
and D is a lifting of some cylindrical decomposition D of E r−1 .
Given a formula ϕ one can construct a CAD for the polynomials of the atomic
formulas in ϕ. The point for CAD-based QE is that the truth/falsehood of ϕ
is determined regionwise because each region in the CAD is A-invariant. See [5]
for details.
It is the PROJ function that is crucial in a CAD procedure. The fewer polynomials PROJ produces, the more eﬃcient the CAD program becomes. But
PROJ must be constructed to maintain the delineability and make the lifting
phase possible. Some improvements in the projection phase of CAD are found
in [6, 7, 8].

Fig. 1. The graph of A

Here we show some examples of CAD commands in SyNRAC. We construct a
CAD for A := {x2 + y 2 − 1, x3 − y 2 } ⊂ Z[x, y]. The graph of the two polynomials
in A is shown in Fig. 1. The Projection command repeats PROJ and returns
P[1]= PROJ0 (A) = A and P[2]= PROJ(A).
>
>
>
>

read "synrac";
A:=[ x^2 + y^2 - 1, x^3 - y^2 ]:
P:=Projection(A, [y,x]):
P[1]; P[2];
[x^2 + y^2 - 1, x^3 - y^2]
[x^2 - 1, x^2 - 1 + x^3, x]

Next the Base command partitions E 1 by using P[2] and returns a list of
points that represent respective sections or sectors. A rational point is taken as
a sample point for a sector, and a vanishing polynomial and an isolated interval
are taken for a section. There are four real roots (sections) in P[2] and they
make ﬁve open intervals (sectors).

Development of SyNRAC

605

> Base(P[2], x);
[-2, [x + 1, [-1, -1]], -1/2, [x, [0, 0]], 3/8,
[x^2 - 1 + x^3, [3/4, 7/8]], 15/16, [x - 1, [1, 1]], 2]

Lastly the Lifting command makes a stack for each section or sector. Out
of nine regions, we have the third and the ﬁfth ones displayed. The third region
is a sector with a rational sample point [-1/2] and the stack on it is represented
in a list of ﬁve sample points of sections/sectors. The data for the ﬁfth sector
are shown in a similar way. The data for It is similar for the ﬁfth sector, which
has [3/8] as a sample point.
> L:=Lifting(P, [y,x]):
> op(L[3]); op(L[5]);
[3], [-1/2], [-2, [-3 + 4 y^2, [-1, 0]], 0, [-3 + 4 y^2, [0, 1]], 2]
[5], [3/8], [-2, [-55 + 64 y^2, [-1, -1/2]], -1/2,
[512 y^2 - 27, [-1/2, 0]], 0, [512 y^2 - 27, [0, 1/2]], 1/2,
[-55 + 64 y^2, [1/2, 1]], 2]

3

Special QE for Weakly Parametric Linear Formulas

We gave a description of a special QE algorithm by virtual substitution for linear
formulas [9]. We ﬁrstly review special QE for linear formula and then explain
the weakly parametric case. We will show some experimental results to compare
the eﬃciency of the two QE procedures.
3.1

Special QE by Virtual Substitution for Linear Formulas

In 1988 Weispfenning [10] proposed a QE algorithm for linear formulas by virtual substitution. A formula is called linear if its atomic subformulas are all
linear with respect to its quantiﬁed variables. In other words, every equality or
inequality in the formula can be represented in
a0 + a1 x1 + · · · + an xn ρ 0,
where xi are quantiﬁed variables, ai are free, and ρ is a relational operator, i.e.,
one of {=, =, ≤, <}.
Let ψ(p1 , . . . , pm ) := Q1 x1 · · · Qn xn ϕ(p1 , . . . , pm , x1 , . . . , xn ) be a linear formula, where Qi ∈ {∀, ∃} and ϕ is quantiﬁer-free. By using the equivalence
∀xϕ(x)⇐⇒¬(∃x¬ϕ(x)), we can change the formula into its equivalent of the
form (¬)∃x1 · · · (¬)∃xn (¬)ϕ. The possible negation (¬) attached to ϕ can be
easily eliminated (use De Morgan’s law and rewrite the atomic subformulas),
which is not essential part of QE. Therefore all we are required to do is eliminate
∃x in ∃xϕ. In general case, all the quantiﬁers in the formula can be eliminated
inside out by changing the innermost one to ∃xi and then removing it.

606

H. Yanami and H. Anai

To eliminate the quantiﬁed variable ∃x in ∃xϕ, we use a theorem in [10]
saying that there exists a ﬁnite set S of x-free terms such that
∃xϕ ⇐⇒

ϕ(x//t)
t∈S

holds. We note that there is a procedure transforming the expression ϕ(x/t)
obtained from ϕ by substituting t for x into an equivalent formula [11]. We
denote the resulting formula by ϕ(x//t). Such a set S is called an elimination set
for ∃xϕ. We obtain a quantiﬁer-free formula equivalent to ∃xϕ by substituting
all candidates in S into ϕ disjunctively.
This theorem indicates that smaller elimination sets would increase the efﬁciency of a QE procedure. Loos and Weispfenning [12] and Weispfenning [11]
have presented a smaller elimination set to improve the algorithm. All of these
algorithms had been implemented in SyNRAC.
3.2

Special QE for Weakly Parametric Linear Formulas

Weispfenning [4] has further improved the algorithm for a subclass of linear
formulas. A linear formula is called weakly parametric if the coeﬃcients of the
quantiﬁed variables in every atomic formula a0 + a1 x1 + · · · + an xn ρ 0 are all
constant. Therefore free variables occur only in the constant term a0 in a weakly
parametric linear formula.
In such a case, one can tell beforehand which half-interval should be used for
each inequality and can exploit the information to dispense with as much as half
an elimination set per quantiﬁed variable. See [4] for details.
3.3

Comparison of the Two Procedures

We compare a linear QE procedure previously implemented in SyNRAC and a
specialized one for weakly parametric linear formulas. We have used nine example
problems that were taken from the design problem of a PI controller. Problem
1 has ﬁve quantiﬁed variables. The number of variables increases one by one. So
Problem 9 has 13 variables to be eliminated. We show Problems 1 and 2 here,
leaving the others out because of a lack of space.
Problem1
&Ex([k1 , k2 , c0 , c1 , c2 ], &and([0 ≤ c2 + (1/4 p1 − 1)p2 3 , 0 ≤ −c2 + (1/4 p1 + 1)p2 3 ,
0 ≤ c1 + (1/2 p1 − 4)p2 2 , 0 ≤ −c1 + (1/2 p1 + 4)p2 2 , 0 ≤ k1 + c0 + (p1 − 6)p2 ,
0 ≤ −k1 − c0 + (p1 + 6)p2 , 0 ≤ k2 + 2 p1 − 4, 0 ≤ −k2 + 2 p1 + 4, −1 ≤ c0 , c0 ≤ 1,
1 ≤ c1 , c1 ≤ 3/2, 1/2 ≤ c2 , c2 ≤ 3/2]))
Problem2
&Ex([k1 , k2 , c0 , c1 , c2 , c3 ], &and([0 ≤ c3 + (1/4 p1 − 1)p2 4 , 0 ≤ −c3 + (1/4 p1 + 1)p2 4 ,
0 ≤ c2 + (1/2 p1 − 6)p2 3 , 0 ≤ −c2 + (1/2 p1 + 6)p2 3 , 0 ≤ c1 + (p1 − 15)p2 2 ,
0 ≤ −c1 + (p1 + 15)p2 2 , 0 ≤ k1 + c0 + (2 p1 − 18)p2 , 0 ≤ −k1 − c0 + (2 p1 + 18)p2 ,
0 ≤ k2 + 4 p1 − 10, 0 ≤ −k2 + 4 p1 + 10, −1 ≤ c0 , c0 ≤ 1, 1 ≤ c1 , c1 ≤ 3/2,
1/2 ≤ c2 , c2 ≤ 3/2, 1/2 ≤ c3 , c3 ≤ 3/2]))

Development of SyNRAC

607

Table 1. Linear QE and weakly parametric linear QE

Problem

Linear (general) Weakly parametric linear
time (sec) # atoms time (sec)
# atoms
1
10.406
112
0.093
36
2.708
608
0.156
92
2
12.281
3072
0.320
232
3
513.406
69632
0.626
560
4
—
—
1.360
1312
5
—
—
2.968
3008
6
—
—
6.733
6784
7
—
—
16.375
14848
8
—
—
39.828
32768
9
On a Pentium IV 2.4 GHz processor with 1 GB memory

The results are shown in Table 1. The previous procedure could not solve
Problem 5 and beyond in an hour, while the algorithm specialized for weakly
parametric formula solved all of the example problems. Let us compare the computing time per elimination. At Problem 1 the procedure for weakly parametric
formulas has computed (0.406/0.093)1/5 ≈ 1.34 times faster than the previous
one. The corresponding ratios grow gradually and reach 2.31 at Problem 4. We
suppose that simpliﬁcation procedures have a more eﬀect on the computing time
when a formula gets larger.

4

Application of CAD-Based QE

In this section we show an application of CAD to a practical problem. The
common Lyapunov function problem is a problem that studies the existence of
a common Lyapunov function for a set of linear time-invariant systems. The
problem often arises in stability analysis and control design of various types of
control systems such as uncertain systems, fuzzy systems, switched systems, etc.
We focus on one of the main types of common Lyapunov functions, a common
quadratic Lyapunov function (CQLF). See [13, 14, 15] for details.
One important issue of a CQLF problem is to ﬁnd an existence condition of
CQLF. For a given set of stable constant linear systems, we can verify whether
the systems share a CQLF and construct the CQLF if they do with some numerical semideﬁnite programming (SDP) package. We consider here the problem of
ﬁnding symbolic existence conditions on system matrices such that these systems
share a common Lyapunov function. An existence condition provides us stability regions of parameters for control systems. Although there are some attempts
to resolve this so far, only partial results are obtained. The CQLF problems to
compute an existence condition can be solved by using QE systematically; see
[16].

608

H. Yanami and H. Anai

Common Lyapunov Function Problem: We consider a set of continuoustime linear time-invariant systems
x˙ = Aci x, x ∈ Rn , Aci ∈ Rn×n , i = 1, . . . , q.

(1)

The set of systems (1) is said to have a CQLF if there exists a symmetrical positive deﬁnite matrix P = PT > 0 such that the following Lyapunov inequalities
PAci + ATci P < 0, ∀i = 1, . . . , q

(2)

are satisﬁed. Then the CQLF is V(x) = xT Px.
Solving Common Lyapunov Function Problem by QE: We consider two
Hurwitz stable continuous-time linear time-invariant systems, i.e., the case n = 2
and q = 2 in (1):
x˙ = Aci x, x ∈ R2 , Aci ∈ R2×2 , i = 1, 2.

(3)

Moreover let Ac1 , Ac2 be
Ac1 =

x 0
0 1
, Ac2 =
,
y −1
−1 −2

(4)

respectively, where x, y ∈ R are system parameters. We have the following theorem.
Theorem 1. (R.N.Shorten et.al. [14]) A necessary and suﬃcient condition for
the two second-order systems (3) to have a CQLF is
Re(λ(co(Ac1 , Ac2 ))) < 0,
Re(λ(co(Ac1 , A−1
c2 ))) < 0,

(5)
(6)

where co(.) denotes the convex hull (polytope) of matrices: co(X, Y) = {αX +
(1 − α)Y : α ∈ [0, 1]}, λ(X) denotes the eigenvalues of matrix X and Re(.)
denotes the real part of a complex number.
This implies that our desired condition is that all roots of characteristic
polynomials of co(Ac1 , Ac2 ) and co(Ac1 , A−1
c2 ) locate within a left half of the
Gaussian plane for α ∈ [0, 1]. The conditions can be reduced to a set of polynomial inequalities by using the well-known Li`enard-Chipart criterion. Then we
can apply QE for the polynomial inequalities.
Now we compute feasible regions of x, y so that the systems (3) have a CQLF
by QE. As mentioned above, by applying the Li`enard-Chipart criterion to characteristic polynomials of co(Ac1 , Ac2 ) and co(Ac1 , A−1
c2 ), the CQLF existence
condition can be described by the following formula:
∀α ((0 ≤ α ≤ 1) ⇒ (2 − α − xα > 0 ∧ 1 + yα − α2 − xα2 − yα2 > 0 ∧
(7)
1 − 2α − 2xα − yα + α2 + xα2 + yα2 > 0)).
Applying CAD-based QE in SyNRAC to (7), the output turns out to be
√
√
(x < 0 ∧ −2 − 2 −x < y < 2 −x − 2x).

(8)

Development of SyNRAC

5

609

Conclusion

We have presented a newly developed functions in Maple-package SyNRAC. The
current version of SyNRAC provides quantiﬁer elimination by virtual substitution up to quadratic formulas and CAD-based QE, as well as some standard
simpliﬁers. The new features greatly extend the applicability and tractability of
SyNRAC for solving real algebraic constraints in engineering. As an application
of SyNRAC, we have treated a common Lyapunov function problem.
We proceed to implement other known QE algorithms and improve them,
and are setting about developing symbolic-numeric algorithms. We also plan
to develop a toolbox for parametric robust control design on MATLAB using
SyNRAC as a core engine.

References
1. Anai, H., Yanami, H.: SyNRAC: A Maple-package for solving real algebraic constraints. In: Proceedings of International Workshop on Computer Algebra Systems and their Applications (CASA) 2003 (Saint Petersburg, Russian Federation),
P.M.A. Sloot et al. (Eds.): ICCS 2003, LNCS 2657, Springer (2003) 828–837
2. Anai, H., Hara, S.: A parameter space approach for ﬁxed-order robust controller
synthesis by symbolic computation. In: Proceedings of IFAC World Congress on
Automatic Control b’02. (2002)
3. Anai, H., Yanami, H., Hara, S.: SyNRAC: a maple-package for solving real algebraic
constraints toward a robust parametric control toolbox. In: Proceedings of SICE
Annual Conference 2003 (Fukui, Japan). (2003) 1716–1721
4. Weispfenning, V.: Simulation and optimization by quantiﬁer elimination. Journal of Symbolic Computation 24 (1997) 189–208 Special issue on applications of
quantiﬁer elimination.
5. Collins, G.E.: Quantiﬁer elimination for real closed ﬁelds by cylindrical algebraic
decomposition. In Caviness, B., Johnson, J., eds.: Quantiﬁer Elimination and
Cylindrical Algebraic Decomposition. Texts and Monographs in Symbolic Computation. Springer, Wien, New York (1998) 85–121
6. Hong, H.: An improvement of the projection operator in cylindrical algebraic decomposition. In Caviness, B., Johnson, J., eds.: Quantiﬁer Elimination and Cylindrical Algebraic Decomposition. Texts and Monographs in Symbolic Computation.
Springer, Wien, New York (1998) 166–173
7. McCallum, S.: An improved projection operation for cylindrical algebraic decomposition. In Caviness, B., Johnson, J., eds.: Quantiﬁer Elimination and Cylindrical Algebraic Decomposition. Texts and Monographs in Symbolic Computation.
Springer, Wien, New York (1998) 242–268
8. Brown, C.W.: Improved projection for cylindrical algebraic decomposition. Journal
of Symbolic Computation 32 (2001) 447–465
9. Anai, H., Yanami, H.: SyNRAC: a Maple-package for solving real algebraic constraints. In: Proceedings of International Conferences on Computational Science.
Volume 2657 of LNCS., Springer (2003) 828–837
10. Weispfenning, V.: The complexity of linear problems in ﬁelds. Journal of Symbolic
Computation 5 (1988) 3–27

610

H. Yanami and H. Anai

11. Weispfenning, V.: Quantiﬁer elimination for real algebra—the quadratic case and
beyond. Applicable Algebra in Engineering Communication and Computing 8
(1997) 85–101
12. Loos, R., Weispfenning, V.: Applying linear quantiﬁer elimination. The Computer
Journal 36 (1993) 450–462 Special issue on computational quantiﬁer elimination.
13. Shorten, R.N., Narendra, K.S.: Necessary and suﬃcient conditions for the existence
of a common quadratic lyapunov function for m stable second order linear timeinvariant systems. Proc. of ACC (2000) 359–363
14. Shorten, R.N., Narendra, K.S.: Necessary and suﬃcient conditions for the existence
of a common quadratic lyapunov function for two stable second order linear timeinvariant systems. Proc. of ACC (1999) 1410–1414
15. Mori, Y.: Investigation on common lyapunov function: Toward complete analysis.
Kyoto Institute of Technology, Doctoral Thesis, (in Japanese) (2002)
16. Nguyen, T.V.: Common lyapunov function problem: Quadratic and inﬁnity-norm
functions. Kyoto Institute of Technology, Master Thesis (2003)

