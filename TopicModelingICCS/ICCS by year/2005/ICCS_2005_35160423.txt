Safety of a Server-Based Version Vector Protocol
Implementing Session Guarantees
Jerzy Brzezi´
nski, Cezary Sobaniec, and Dariusz Wawrzyniak
Institute of Computing Science,
Pozna´
n University of Technology, Poland
{Jerzy.Brzezinski, Cezary.Sobaniec, Dariusz.Wawrzyniak}@cs.put.poznan.pl

Abstract. Session guarantees are used to manage replica consistency
of a distributed system from the client perspective. This paper deﬁnes
formally the guarantees, presents and proves safety of a protocol implementing session guarantees using server-based version vectors.

1

Introduction

Replication is a key concept in providing high performance and availability of
data and services in a distributed system. However, replication introduces the
problem of data consistency that arises when replicas are modiﬁed. Required
properties of distributed system with respect to consistency depend in general
on application and are formally speciﬁed by consistency models. There are numerous consistency models developed for Distributed Shared Memory systems.
These models, called data-centric consistency models [1], assume that servers
replicating data are also accessing the data for processing purposes. In a mobile
environment, however, clients accessing the data are not bound to particular
servers, they can switch from one server to another. This switching adds a new
dimension of complexity to the problem of consistency. Session guarantees [2],
called also client-centric consistency models [1], have been proposed to deﬁne
required properties of the system regarding consistency from the client’s point
of view. Intuitively: the client wants to continue processing after a switch to another server so that new operations will remain consistent with previously issued
operations within a session. The relationships between data-centric and clientcentric consistency models have been analyzed in [3, 4]. Protocols implementing
session guarantees must eﬃciently represent sets of operations performed in the
system. Version vectors based on vector clocks [5] may be used for this purpose.
This paper presents a protocol, called VsSG, implementing session guarantees,
that uses server-based version vectors. The protocol is based on a concept presented in [2]. The main contribution of this paper is a formal proof of safety of
the VsSG protocol. The formalism introduced in this paper includes also formal
deﬁnitions of session guarantees.
This work was supported in part by the State Committee for Scientiﬁc Research
(KBN), Poland, under grant KBN 3 T11C 073 28.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 423–430, 2005.
c Springer-Verlag Berlin Heidelberg 2005

424

2

J. Brzezi´
nski, C. Sobaniec, and D. Wawrzyniak

Session Guarantees

In this paper we consider a weakly consistent replicated storage system. The
system consists of a number of servers holding a full copy of a set of shared
objects, and clients running applications that access the objects. Clients are
separated from servers, i.e. a client application may run on a separate computer
than the server. A client may access a shared object after selecting a single server
and sending a direct request to the server. Clients are mobile, i.e. they can switch
from one server to another during application execution. Session guarantees are
expected to take care of data consistency observed by a migrating client. The set
of shared objects replicated by the servers does not imply any particular data
model or organization. Operations performed on shared objects are divided into
reads and writes. A read does not change states of the shared objects, while
a write does. A write may cause an update of an object, it may create a new
object, or delete an existing one. A write may also atomically update states of
several objects.
C
Operations on shared objects issued by a client Ci are ordered by a relation i
called client issue order. A server Sj performs operations in an order represented
Sj

by a relation
. Writes and reads on objects will be denoted by w and r,
respectively. An operation performed by a server Sj will be denoted by w|Sj or
r|Sj .
Definition 1. Relevant writes RW (r) of a read operation r is a set of writes
that has influenced the current state of objects observed by the read r.
The exact meaning of relevant writes will strongly depend on the characteristics
of a given system or application. For example, in case of simple isolated objects
(i.e. objects with methods that access only their internal ﬁelds), relevant writes
of a read on object x may be represented by all previous writes on object x.
Session guarantees have been deﬁned in [2]. The following more formal deﬁnitions are based on those concepts. The deﬁnitions assume that operations are
unique, i.e. they are labeled by some internal unique identiﬁers.
Definition 2. Read Your Writes (RYW) session guarantee is defined as follows:
∀Ci ∀Sj w

Ci

r|Sj ⇒ w

Sj

r

Definition 3. Monotonic Writes (MW) session guarantee is defined as follows:
∀Ci ∀Sj w1

Ci

w2 |Sj ⇒ w1

Sj

w2

Definition 4. Monotonic Reads (MR) session guarantee is defined as follows:
∀Ci ∀Sj r1

Ci

r2 |Sj ⇒ ∀wk ∈ RW (r1 ) : wk

Sj

r2

Safety of a Server-Based Version Vector Protocol

425

Definition 5. Writes Follow Reads (WFR) session guarantee is defined as
follows:
∀Ci ∀Sj r

3

Ci

w|Sj ⇒ ∀wk ∈ RW (r) : wk

Sj

w

The VsSG Protocol Implementing Session Guarantees

The proposed VsSG protocol implementing session guarantees intercepts communication between clients and servers; at the client side before sending a request, at the server side after receiving the request and before sending a reply,
and at the client side after receiving the reply. These interceptions are used to
exchange and maintain additional data structures necessary to preserve appropriate session guarantees. After receipt of a new request a server checks whether
its state is suﬃciently up to date to satisfy client’s requirements. If the server’s
state is outdated then the request is postponed and will be resumed after updating the server.
Servers occasionally exchange information about writes performed in the past
in order to synchronize the states of replicas. This synchronization procedure
eventually causes total propagation of all writes directly submitted by clients. It
does not inﬂuence safety of the VsSG protocol but rather its liveness, therefore
it will not be discussed in this paper (example procedure is presented in [6]).
In contrast with [2] we do not assume total ordering of non-commutative writes
which is treated by us as an orthogonal problem.
Every server Sj records all writes performed locally in a history. The writes
result from direct client requests, or are incorporated from other servers during
synchronization procedure. The writes are performed sequentially, therefore the
history is totally ordered. Formally, histories are deﬁned as follows:
Definition 6. A history HSj is a linearly ordered set
a set of writes performed by a server Sj , and relation
order of the writes.

Sj

OSj ,

Sj

where OSj is

represents an execution

During synchronization of servers the histories are concatenated. Intuitively, a
concatenation of two histories is constructed as a sum of the ﬁrst history, and
new writes found in the second history. The orderings of respective histories are
preserved, and new writes are added at the end of the ﬁrst history.
Server-based version vectors. Version vectors are used for eﬃcient representation
of sets of writes required by clients and necessary to check at the server side.
Version vectors used in this paper have the following form: v1 v2 . . . vNS ,
where NS is the total number of servers in the system. A single position vj
denotes the number of writes performed by a server Sj , and changes whenever a
new write request is performed by the server. Because every server increments the
version vector for every write, and the changes are done at diﬀerent positions,

426

J. Brzezi´
nski, C. Sobaniec, and D. Wawrzyniak

the values of version vectors at servers during execution of writes are unique.
A write in VsSG protocol is labeled with a vector timestamp set to the current
value of the version vector VSj of the server Sj performing the write for the ﬁrst
time. In the presentation of the VsSG protocol the vector timestamp of a write
w is returned by a function T : O → V . A single i-th position of the version
vector timestamp associated with a write will be denoted by T (w)[i].
The VsSG protocol (presented in Alg. 1) interacts with requests sent from
clients to servers and with replies sent from servers to clients. A request is a
couple op, SG , where op is an operation to be performed, and SG is a set of
session guarantees required for this operation. Before sending to the server, the
request is supplemented with a vector W representing the client’s requirements.
A reply is a triple op, res, W where op is the operation just performed, res
represents the results of the operation (delivered to the application), and W is
a vector representing the state of the server just after performing the operation.
Before sending a request by a client Ci , a vector W representing its requirements is calculated based on the type of operation, and the set SG of session
guarantees required for the operation. The vector W is set to either 0, or WCi —
a vector representing writes issued by the client Ci , or RCi — a vector representing writes relevant to reads issued by the client, or to a maximum of these
two vector (lines 1, 3 and 6). The maximum of two vectors V1 and V2 is a vector
V = max (V1 , V2 ), such that V [i] = max (V1 [i], V2 [i]).
On receipt of a new request a server Sj checks whether its local version vector
VSj dominates the vector W sent by the client (line 9), which is expected to be
suﬃcient for providing appropriate session guarantees. A version vector V1 dominates a version vector V2 , which is denoted by V1 ≥ V2 , when ∀i : V1 [i] ≥ V2 [i].
If the state of the server is not suﬃciently up to date, the request is postponed (line 10), and will be resumed after synchronization with another server
(line 32). As a result of writes performed by a server Sj , its version vector VSj is
incremented at position j (line 14), and a timestamped operation is recorded in
history HSj (lines 15 and 16). The current value of the server version vector VSj
is returned to the client (line 18) and updates the client’s vector WCi in case of
writes (line 20), or RCi in case of reads (line 22).

4

Safety of the VsSG Protocol

Definition 7. A supremum of a set of writes OSj , denoted by V OSj , is a
vector that is set to 0 for an empty set, and for nonempty sets its i-th position
is defined as V OSj [i] = maxw∈OSj T (w)[i].
Lemma 1. For every server Sj running VsSG protocol at every moment
V OSj = VSj .
Proof. By induction. 1) Basis. At the very beginning VSj = 0, and the set of
writes OSj = ∅, therefore V OSj = 0, hence V OSj = VSj . 2) Induction step.

Safety of a Server-Based Version Vector Protocol

427

On send of request message op, SG from Ci to Sj
1: W ← 0
2: if (iswrite(op) and MW ∈ SG) or (not iswrite(op) and RYW ∈ SG) then
3:
W ← max (W, WCi )
4: end if
5: if (iswrite(op) and WFR ∈ SG) or (not iswrite(op) and MR ∈ SG) then
6:
W ← max (W, RCi )
7: end if
8: send op, W to Sj
On receipt of request message op, W from client Ci at server Sj
9: while VSj ≥ W do
10:
wait
11: end while
12: perform op and store results in res
13: if iswrite(op) then
14:
VSj [j] ← VSj [j] + 1
15:
timestamp op with VSj
16:
HSj ← HSj ∪ {op}
17: end if
18: send op, res, VSj to Ci
On receipt of reply message op, res, W from server Sj at client Ci
19: if iswrite(op) then
20:
WCi ← max (WCi , W )
21: else
22:
RCi ← max (RCi , W )
23: end if
24: deliver res
On receipt of update message Sk , H at server Sj
25: foreach wi ∈ H do
26:
if VSj ≥ T (wi ) then
27:
perform wi
28:
VSj ← max VSj , T (wi )
29:
HSj ← HSj ∪ {wi }
30:
end if
31: end for
32: signal
Every ∆t at server Sj
33: foreach Sk = Sj do
34:
send Sj , HSj to Sk
35: end for

Algorithm 1. VsSG protocol implementing session guarantees

428

J. Brzezi´
nski, C. Sobaniec, and D. Wawrzyniak

Let us assume a state where condition V OSj = VSj holds. The set OSj and
the version vector VSj can change only in the following two situations:
– The server Sj accepts a new write requested by a client. This causes the
value of VSj [j] to be incremented by 1, next the write is timestamped with
the current value of vector VSj , and the write is added to OSj . This causes
V OSj to be also incremented at position j by 1 (lines 14 and 16 of Alg. 1).
As a result the condition V OSj = VSj still holds.
– The server Sj incorporates a write w received from another server. This
causes the current value of VSj to be maximized with the vector T (w) of the
write being added (line 28). The new write is then added to OSj (line 29). As
a result values of VSj and V OSj will be incremented at the same positions
by the same values, therefore the condition V OSj = VSj still holds.
Definition 8. A write-set WS (V ) of a given version vector V is defined as
NS
w ∈ OSj : T (w) ≤ V .
WS (V ) = j=1
Lemma 2. For any two vectors V1 and V2 used by servers and clients of the
VsSG protocol V1 ≥ V2 ⇔ WS (V1 ) ⊇ WS (V2 ).
Proof. 1) Suﬃcient condition. By contradiction, let us assume that V1 ≥ V2 ∧
WS (V1 ) ⊇ WS (V2 ), which means that ∃w [w ∈ WS (V1 ) ∧ w ∈ WS (V2 )] and,
according to Deﬁnition 8: ∃j (T (w)[j] > V1 [j] ∧ T (w)[j] ≤ V2 [j]) ⇒ V1 [j] <
V2 [j] ⇒ V1 ≥ V2 . 2) Necessary condition. By contradiction, let us assume that
WS (V1 ) ⊇ WS (V2 ) ∧ V1 ≥ V2 , which means that ∃j : V1 [j] < V2 [j]. Version
vectors at position j are only incremented when a new write is performed by a
server Sj (line 14). It means that ∃w ∈ OSj [w ∈ WS (V2 ) ∧ w ∈ WS (V1 )] and
hence WS (V1 ) ⊇ WS (V2 ).
Lemma 3. At any time during execution of VsSG protocol OSj = WS VSj .
Proof. By contradiction: 1) Let us assume that ∃w ∈ OSj : w ∈ WS VSj . According to Deﬁnition 8, a write w does not belong to WS VSj when T (w) ≤ VSj .
This implies that ∃k : T (w)[k] > VSj [k], and, according to Lemma 1, T (w)[k] >
V OSj [k], which implies V OSj ≥ T (w). Based on Deﬁnition 7, w ∈ OSj —
a contradiction. 2) Let us assume that ∃w ∈ WS VSj : w ∈ OSj . According
to Deﬁnition 7, a write w does not belong to OSj when V OSj ≥ T (w). This
implies that ∃k : T (w)[k] > V OSj , and, according to Lemma 1, T (w)[k] >
VSj [k], which implies T (w) ≤ VSj . Based on Deﬁnition 8, w ∈ WS VSj — a
contradiction.
Lemma 4. At any time during execution of VsSG protocol WS (WCi ) contains
all writes issued by a client Ci .
Proof. A write issued by a client Ci and performed by a server Sj updates the
client’s vector WCi by calculating a maximum of its current value and value of

Safety of a Server-Based Version Vector Protocol

429

the server version vector VSj (lines 18 and 20). Hence, after performing the write
WCi ≥ VSj , and (according to Lemma 2) WS (WCi ) ⊇ WS VSj , and (according
to Lemma 3) WS (WCi ) ⊇ OSj . It means that the write-set WS (WCi ) contains
all writes requested directly at server Sj , including also writes requested by the
client Ci at server Sj . The vector WCi monotonically increases, therefore no past
write is lost in case of a migration to another server.
Lemma 5. At any time during execution of VsSG protocol WS (RCi ) contains
all writes relevant to reads issued by a client Ci .
Proof. A read issued by a client Ci and performed by a server Sj updates the
client’s vector RCi by calculating a maximum of its current value and value of
the server version vector VSj (lines 18 and 22). Hence (according to Lemmata 2
and 3 RCi ≥ VSj ⇒ WS (RCi ) ⊇ WS VSj = OSj . It means that the writeset WS (RCi ) contains all writes performed at server Sj , therefore also writes
relevant to reads requested by the client Ci at server Sj . The vector RCi monotonically increases, therefore no past write is lost in case of a migration to another
server.
Theorem 1. RYW session guarantee is preserved by VsSG protocol for clients
requesting it.
Proof. Let us consider two operations w and r, issued by a client Ci requiring
RYW session guarantee. Let the read follow the write in the client’s issue order,
C
and let the read be performed by a server Sj , i.e. w i r|Sj . After performing
w we have (according to Lemma 4) w ∈ WS (WCi ). Because VSj ≥ WCi is
fulﬁlled before performing r (lines 3 and 9), we get (according to Lemma 2)
WS VSj ⊇ WS (WCi ) ⇒ w ∈ WS VSj . Because local operations at servers
are totally ordered, we get w

Sj

r. This will happen for any client Ci requiring

RYW and any server Sj , so ∀Ci ∀Sj w

Ci

r|Sj ⇒ w

Sj

r , which means that

RYW session guarantee is preserved.
Theorem 2. MR session guarantee is preserved by VsSG protocol for clients
requesting it.
Proof. Let us consider two reads r1 and r2 , issued by a client Ci requiring MR
session guarantee. Let the second read follow the ﬁrst read in the client’s issue
C
order, and let the second read be performed by a server Sj , i.e. r1 i r2 |Sj .
After performing r1 we have (according to Lemma 5) ∀wk ∈ RW (r1 ) : wk ∈
WS (RCi ). Because VSj ≥ RCi is fulﬁlled before performing r2 (lines 6 and 9),
we get (according to Lemma 2) WS VSj ⊇ WS (RCi ) ⇒ ∀wk ∈ RW (r1 ) :
wk ∈ WS VSj . Because local operations at servers are totally ordered, we get
∀wk ∈ RW (r1 ) : wk
Sj , so ∀Ci ∀Sj r1

Ci

Sj

r2 . This will happen for any client Ci and any server

r2 |Sj ⇒ ∀wk ∈ RW (r1 ) : wk

session guarantee is preserved.

Sj

r2 , which means that MR

430

J. Brzezi´
nski, C. Sobaniec, and D. Wawrzyniak

A theorem and a proof for MW are analogous to RYW. A theorem and a proof
for WFR are analogous to MR. Full versions of the theorems and proofs can be
found in [7].

5

Conclusions

This paper has presented formal deﬁnitions of session guarantees, a VsSG protocol implementing session guarantees, and ﬁnally a correctness proof showing
that the protocol is safe, i.e. appropriate guarantees are provided. It is worth
mentioning, however, that though the server-based version vectors used in the
VsSG protocol are suﬃcient for fulﬁlling session guarantees, they are not necessary. Thus, other approaches are also possible, and they have been discussed in
[8]. The sets of writes represented by version vectors are supersets of the exact
sets resulting from appropriate deﬁnitions. The accuracy of the write-set representation is therefore an important factor of a protocol implementing session
guarantees inﬂuencing its performance. This problem is currently considered,
and appropriate simulation experiments are being prepared.

References
1. Tanenbaum, A.S., van Steen, M.: Distributed Systems — Principles and Paradigms.
Prentice Hall, New Jersey (2002)
2. Terry, D.B., Demers, A.J., Petersen, K., Spreitzer, M., Theimer, M., Welch, B.W.:
Session guarantees for weakly consistent replicated data. In: Proceedings of the
Third International Conference on Parallel and Distributed Information Systems
(PDIS 94), Austin, Texas, September 28-30, 1994, IEEE Computer Society (1994)
140–149
3. Brzezi´
nski, J., Sobaniec, C., Wawrzyniak, D.: Session guarantees to achieve PRAM
consistency of replicated shared objects. In: Proc. of Fifth Int. Conference on Parallel Processing and Applied Mathematics (PPAM’2003), LNCS 3019, CzOstochowa,
Poland (2003) 1–8
4. Brzezi´
nski, J., Sobaniec, C., Wawrzyniak, D.: From session causality to causal
consistency. In: Proc. of 12th Euromicro Conference on Parallel, Distributed and
Network-Based Processing (PDP2004), A Coru˜
na, Spain (2004) 152–158
5. Mattern, F.: Virtual time and global states of distributed systems. In Cosnard,
Quinton, Raynal, Robert, eds.: Proc. of the Int’l. Conf. on Parallel and Distributed
Algorithms, Elsevier Science Publishers B. V. (1988) 215–226
6. Petersen, K., Spreitzer, M.J., Terry, D.B., Theimer, M.M., Demers, A.J.: Flexible
update propagation for weakly consistent replication. In: Proc. of the 16th ACM
Symposium on Operating Systems Principles (SOSP-16), Saint Malo, France (1997)
288–301
7. Brzezi´
nski, J., Sobaniec, C., Wawrzyniak, D.: Safety of VsSG protocol implementing
session guarantees. Technical Report RA-003/05, Institute of Computing Science,
Pozna´
n University of Technology (2005)
8. Kobusi´
nska, A., Libuda, M., Sobaniec, C., Wawrzyniak, D.: Version vector protocols implementing session guarantees. In: Proc. of Int’l Symposium on Cluster
Computing and the Grid (CCGrid 2005), Cardiﬀ, UK (2005)

