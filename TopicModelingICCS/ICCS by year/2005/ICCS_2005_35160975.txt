A Parallel Algorithm for Computing Shortest
Paths in Large-Scale Networks
Guozhen Tan and Xiaohui Ping
Department of Computer Science, Dalian University of Technology,
Dalian, 116023, P.R. China
gztan@dlut.edu.cn

Abstract. This paper presents the Optimality Theorem in distributed
parallel environment. Based on this theorem, a parallel algorithm using
network-tree model is presented to compute shortest paths in large-scale
networks. The correctness of this algorithm is proved theoretically and
a series of computational test problems are performed on PC cluster.
Factors such as network size and level of the network, which take eﬀect on
the performance, are discussed in detail. Results of the experiments show
that the proposed parallel algorithm is eﬃcient in computing shortest
paths in large-scale networks, especially when the network size is great.

1

Introduction

The recent research interest in large-scale networks has been focused on partitioning the network and constructing new network model. The previous contributions are the Level graph model[2][3], the Hierarchical Encoded Path View
(HEPV) model[4] and the Network-Tree Model (NTM)[5]. These models all have
some defects. The Network-Tree Model can be constructed from arbitrary network, and the route optimization can be constrained within a few sub-networks,
which greatly reduce the searching scope and signiﬁcantly improve the computing eﬃciency.
In this paper, we present a parallel algorithm based on network-tree model
to solve the problem and test it in a series of networks. The experiment results
validate that the parallel algorithm achieve high performance in speedup and
eﬃciency.

2

Network-Tree Model

Network-Tree Model is the deﬁnitional combination of network and tree.Any
network can be divided into a number of sub-networks, and each sub-network
will be constructed to be one node of network-tree. We use macro-node to denote the node of network-tree to distinguish from the node of original network.
This work is supported by the National Science Foundation of China(60373094).
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 975–978, 2005.
c Springer-Verlag Berlin Heidelberg 2005

976

G. Tan and X. Ping

Network-Tree Model(NTM): In a given network N ,let the network-tree be
N T ree = (T, H), where T is the macro-node set of N . If only one macro-node
exists in T , H = φ, otherwise, H is a binary relation deﬁned on T . There is
only one macro-node mr called the root of N T ree. If T − {mr } = φ,there exists
a collection of disjoint trees T1 , T2 , · · · , Tn (n > 0). For arbitrary i(1 ≤ i ≤ n),
there is one unique macro-node mi ∈ Ti satisﬁes < mr , mi >∈ H. For H − {<
mr , m1 >, · · · , < mr , mn >}, there exists a collection of disjoint binary relations
H1 , H2 , · · · , Hn ,and ∀i, 1 ≤ i ≤ n, Hi is a binary relation deﬁned on Ti , and
(Ti , Hi ) is also a network-tree deﬁned above, and we call it the sub-tree of the
root macro-node mr .
Definition 1: In network-tree model N T ree = (T, H),for any macro-node
mc ∈ T and its parent macro-node mp ∈ T , the node set of mc ∩ mp is called
the connecting node set of mc , denoted by Rmc .
Let spm (u, v) denote the shortest path from u to v in network m, spT (u, v)
denote the shortest path from u to v in network-tree T , and l(π) denote the
distance of path π.
Definition 2: Network-tree model N T ree = (T, H), if for each sub-tree T of
N T ree, with macro-node mr being the root of T , ∀u, v ∈ V (mr ), l(spmr (u, v)) =
l(spT (u, v)), thus N T ree is called Expanded Network-Tree Model.
Definition 3: Network-tree model N T ree = (T, H), let the transitive closure of
macro-node m be Bm = {mp |(mp ∈ T ) ∧ (mp = m ∨ (∃mq ∈ Bm )(< mp , mq >∈
H))}.
Definition 4: In network model N = (V, A, W ), ∀u, v ∈ V , let the virtual arc
from u to v be auv = (u, v, spN (u, v)), with w(auv ) = l(spN (u, v)).

3
3.1

A Parallel Algorithm Based on Network-Tree Model
Optimality Theorem

Theorem 1: In the Expanded Network-Tree Model, for given nodes s and
t, the optimal path π from s to t can be represented as following equation:
π = spm1 (s = v0 , v1 ) + spm2 (v1 , v2 ) + · · · + spmh (vh−1 , vh ) + spmh+1 (vh , vh+1 ) +
spmh+2 (vh+1 , vh+2 ) + · · · + spmn−1 (vn−2 , vn−1 ) + spmn (vn−1 , vn = t) where n ≥
1, 1 ≤ h ≤ n, < mh , mh−1 >∈ H, < mh−1 , mh−2 >∈ H, · · · , < m2 , m1 >∈ H,
and < mh+1 , mh+2 >∈ H, · · · , < mn−1 , mn >∈ H.vi+1 ⊆ Rmi+1 with 0 ≤ i < h,
and vi ⊆ Rmi+1 with h < i < n.
3.2

Parallel Dividing Method and Distributed and Parallel
Network Tree Shortest Path Algorithm (DP N T SP
Algorithm)

First we get the expanded network-tree through preprocessing . According to
theorem 1, the optimal path is consisted of a series of sub-paths in each macronode of the transitive closures. Then we pre-compute the distances from arbitrary

A Parallel Algorithm for Computing Shortest Paths in Large-Scale Networks

977

node to connecting nodes in each macro-node,and write the distance data to a
ﬁle,so the master processor can compute an optimal shortest path consisting of
virtual arcs according to the distances. Then the master distributes the virtual
arcs to the slaves, and each slave computes the required actual path.
Description of DP N T SP Algorithm. We use the multiple-programmultiple-data (MPMD) model to implement the parallel algorithm.Suppose the
source node is s, and the destination node is t.
Master program:
Step1 : Creats p copies of the slave program.
Step2 : According to s and t,computes the transitive closures Bσ(s) and Bσ(t) ,let
B = Bσ(s) Bσ(t) .
Step3 : Reads the distance data contained by B from the ﬁle and computes an
optimal path consisting of virtual arcs.
Step4 :While there is an active slave program,
4[a] receives the results from the slave program.
4[b] If all the virtual arcs have not been allocated, sends a new virtual arc
to the slave program i; Otherwise, stop the execution of slave i.
Step5 :Creates a shortest path according to the received results and terminates.
Slave program:
Step1 : Creates the code for the computation of shortest paths.
Step2 : While there is a virtual arc to handle,
2[a] receives from the master program a virtual arc or the instruction to
stop execution.
2[b] gets the network data that related to the virtual arc and computes
the actual path that corresponds to the virtual arc.
2[c] sends the results to the master program.

4

Computational Results

In our computational work, we choose six networks. The detailed parameters of
each network are shown in table 1.We test the execution time of DP N T SP
algorithm in each network; the computational results are presented in Fig.1.
Table 1. parameters of the testing networks
Network
g1
g2
g3
g4
g5
g6

k l1 = b 1 l 2 = b 2 l 3 = b 3
2
6
10
/
2
8
8
/
3
2
5
8
3
4
4
6
3
6
6
6
3
6
7
8

w1
5
9
6
2
5
5

w2
9
5
6
3
6
7

w3
/
/
6
6
8
9

Nodes
3,721
4,225
6,561
9,409
47,089
113,569

Arcs
14,640
16,640
25,920
37,248
187,488
452,928

G. Tan and X. Ping
average calculation time(sec)

978

10
P=1

8

P=2
6

P=3

4

P=4
P=5

2

P=6
0
g1

g2

g3

g4

g5

g6

network

Fig. 1. Calculation time in diﬀerent networks

1.2
g6

4
speedup

g5

3

g4

2

g3
g2

1

efficiency

5

g6
g5
g4
g3
g2
g1

1
0.8
0.6
0.4
0.2

g1

0

0
1

2

3

4

5

6

number of hosts

Fig. 2. speedup curves

1

2

3

4

5

6

number of hosts

Fig. 3. eﬃciency curves

From Fig.1 we can see that with the number of hosts increasing, the execution
time of algorithm is relatively decreased. In Fig.2 and Fig.3, it is apparent that
with the network scale increasing, the speedup and eﬃciency of the algorithm
are improved notably. The results show that the proposed parallel algorithm can
well solve the optimal path problem in large-scale networks.

References
1. Koutsopoulos. Commentaries on Fastest Paths in Time-dependent Networks for
IVHS Application. IVHS Journal, 1993, 1(1): 89-90
2. J.Shapiro, J.Waxman D.Nir. Level Graphs and Approximate Shortest Path Algorithms, Networks, 1992, 22: 691-717
3. Chan-Kyoo Park, Kiseok Sung, Seungyong Doh, Soondal Park. Finding a path in
the hierarchical road networks. 2001 IEEE Intelligent Transportation Systems Conference 1998, 10 (2): 163-179
4. Ning Jing, Yun-Wu Wang, and Elke A. Rundensteiner. Hierarchical Encoded Path
Views for Path Query Processing: An Optimal Model and Its Performance Evaluation. IEEE Transactions on Knowledge and Data Engineering, 1998, 10(3): 409 432
5. Guozhen Tan, Xiaojun Han, and Wen Gao. Network-Tree Model and Shortest Path
Algorithm. The 3rd International Conference on Computational Science. Melbourne,
Australia: Springer, Lecture Notes on Computer Science (LNCS 2659), 2003: 537547

