Publish/Subscribe Systems on Node and Link Error
Prone Mobile Environments
Sangyoon Oh1,2, Sangmi Lee Pallickara2, Sunghoon Ko1,
Jai-Hoon Kim1,3, and Geoffrey Fox1,2
1 Community Grids Lab., Indiana University, Bloomington, IN. U.S.A
{ohsangy, leesangm, suko, jaikim, gcf}@indiana.edu
2
Department of Computer Science, Indiana University,
Bloomington, IN. U.S.A
3 Graduate School of Information and Comminucations,
Ajou University, Suwon, S. Korea
jaikim@ajou.ac.kr

Abstract. Publish/subscribe model is appropriate in many push based data dissemination applications such as data dissemination services, information sharing, service discovery, etc. Recently, theses types systems are rapidly adopted
in mobile and ubiquitous environment. However, mobile and ubiquitous environments are error prone due to wireless link disconnection, power exhaustion
on mobile devices, etc. We analyze performance and effectiveness of publish/subscribe systems on the failure of client and server nodes and disconnection of communication links, which is common in mobile environments. We
also perform experiments on our test bed to verify correctness and usefulness of
our analysis.

1 Introduction
Publish/subscribe model [1] is appropriate in many applications such as data dissemination services [2], information sharing [3], service discovery [4], data dissemination
services, information sharing, service discovery, etc. As these kinds of services are
popular in mobile and ubiquitous environments, publish/subscriber model will be
more widely used. Fig.1 depicts system configurations of publish/subscribe systems
for error prone mobile environments. Publish/subscribe system consists of publisher
(ES: Event Source), server (EBS: Event Brokering System), and subscriber (ED:
Event Displayer). After publisher publishes data (events) asynchronously to a server,
the server disseminates the data (events) to subscribers which registered its interest on
the server. Main advantages of publish/subscribe systems include decoupling of publishers and subscribers in time, space, and synchronization [5-7]. Subscriber can access published data asynchronously anytime and anywhere at its own convenience.
Also publisher, server, and subscriber can continue its operation even some parts of
publish/subscribe system fails. These kinds of characteristics are main advantages of
publish/subscriber model and make it useful in mobile ubiquitous environments [8].
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 576 – 584, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Publish/Subscribe Systems on Node and Link Error Prone Mobile Environments

577

Wi
rel
LA ess
N

Many researches have been perES
Link
ES/
formed so far to propose architecFailure
ED
ture, add useful functions, and
Ce
l
Radio
improve performance of pubWi lular
EBS
rele
tower
Node
ss
lish/subscribe systems include
Failure
Wired
Wired
Siena [9], Gryphon [10], JEDI [11],
Node
Failure
Rebeca [12], Elvin [13]. However,
ES
Node
to our best knowledge, research of
Failure
ES (Event Source): Publisher
performance modeling for pubED (Event Displayer): Subscriber
lish/subscriber system including
EBS (Event Brokering System): Server
node and communication link failFig. 1. Pub/Sub System Configurations
ures has not been announced yet.
As mobile and ubiquitous service
environments include many kinds of mobile devices and sensors which are connected
via wireless networks, failure (or unavailability) rate of device and communication
links are much higher than conventional wired environments. Thus, it is essential to
consider how the failure and unavailability of mobile devices and wireless networks
affect on performance and use of service. We analyze the influence of errors on mobile devices, servers, and wireless links, and compare to other interaction-based models such as client-server model and polling models. We can estimate performance in
error prone environment and effectively adopt publish/subscribe systems by using our
analysis. The results of our analysis show that publish/subscribe system is more durable than client/server models in error prone mobile and ubiquitous environments including mobile devices and wireless networks. We also perform some experiment on
test bed to verify correctness of our analysis.

2 Cost Model
2.1 System Models
In this subsection, we propose cost analysis model for publish/subscribe systems.
We assume following basic system parameters to analyze cost.
• α : publish rate
• β : subscriber’s access rate of published events, or request rate of client in the client/server models
• cps (α) : publish/subscribe cost per event, cpub (cost for publish events) + csub (cost
for subscribe events)
• crr (β) : cost per request and reply in client-server model
• cpoll(α,T) : cost of periodic publish or polling (We assume function of α and T
(ex. cpubαT , cpoll), where T is length of period.)
• s(n) : effect of sharing among n subscribers, e.g., server can deliver events with
low cost when it broadcasts event to many subscribers.
• tps : time delay for publish/subscribe, tpub (time delay for publish) + tsub (time delay for subscribe)
• trr : time delay for request and reply in request-reply (client-server) model

578

•
•
•
•

S. Oh et al.

tpoll(α, T): time delay for periodic publish
tproc(α, T): amount of processing time on server
λ, λs, λc : failure rate of communication link, server, and client, respectively
µ, µs, µc : recovery rate of communication link, server, and client, respectively.

2.2 Cost Analysis
We analyze cost of four different models, (1) publish/subscribe, (2) event(broker)
message based request/reply, (3) request/reply, and (4) periodic polling models including failure (disconnection) and recovery (reconnection) of communication links
as well as failure and recovery of node of server and client. Four different models can
be categorized as shown in Table 1. Most implementations of publish/subscribe
model and some request/reply models (we call it as “event message based request/reply”) include persistent file and durable database, for fault-tolerance of server
and client, respectively. Persistent files for events publish and subscribe are sharable
among servers. When a server fails, the another server can take over the role and
publish/server model can continue its transactions. Durable database saves events log
and provides clients events history after clients recovers from failures. Without the
durable database, clients could not receive events occurred during failure.
Table 1. Characteristics on Failures

Models

Types

publish/subscribe

publish/
subscribe

Event message ba
sed
request/reply

request/
reply

request/reply
(RPC)
periodic polling

request/
reply
any

Link failures

Server failures

Wait until link reconnection, t Server is replicated an
ransaction is preserved
d transaction can be c
ontinued with sharabl
e persistent file
Wait until link reconnection, t Server is replicated an
ransaction is preserved
d transaction can be c
ontinued with sharabl
e persistent file
Wait until link reconnection, t Transaction needs to r
ransaction needs to restart
estart after recovery
Wait until link reconnection Depends on system

Client failures
After recovery, client can
access events occurred dur
ing failure using events lo
g on durable database
After recovery, client can
access events occurred dur
ing failure using events lo
g on durable database
Lost event or data during c
lient failure
Depends on system

Cost metric in this analysis is time delay to transfer message and additional time required due to failure of communication links and nodes of server and client.
Publish/Subscribe Model
Failure of communication link: Besides cost to transfer message without disconnection (cpub + n s(n)csub), additional cost (delay time) is required due to failure of communication links (disconnection). If communication link is disconnected during publish or subscribe, data transfer is delayed until the link is reconnected. There are two
cases in disconnection: (1) communication link was connected but disconnected during message transfer for publish or subscribe is performed (probability is µ/(λ+µ) (1− ( t pub + t sub ) λ
)), and (2) communication link was disconnected (probability is
ε
− ( t pub + t sub ) λ
)+
λ/(λ+µ)). When disconnection occurs (probability is µ/(λ+µ)(1- ε

Publish/Subscribe Systems on Node and Link Error Prone Mobile Environments

579

λ/(λ+µ)) and subscriber accesses events before reconnection (probability is β/(µ+β)),
average delay time due to link disconnection is 1/µ. Thus, cost of publish/subscribe
model for each event publish and subscribe in the view point of a subscriber is:
tpub + tsub + {µ/( λ+µ) (1- ε

− ( t pub + t sub ) λ

) + λ/(λ+µ)} {β/(µ+β)}(1/µ).

(1)

Failure of server: When a server (broker) fails, the another server (broker) can take
over the role and publish/server model can continue its transactions without any interruption. We ignore the cost required for task transition from failed server to backup
server. Thus, cost is:
(2)

tps= tpub + tsub.

Failure of client: After a client recovers from failure, client can obtain any event at
anytime if durable database exists, which logs data (or events) to be used by client
after recovery from failure. However, size of durable database is limited. If durable
database can log maximum of nlog data (events), a client can be provided up to nlog
recent events occurred before recovery. However, data is not available to the client
after its recovery from a failure when the client requires more prior event than nlogth recent event. The probability that i events occurred between failure and recovery
is:
i
(3)
⎛
⎞

α

µ

c
⎜⎜
⎟⎟
α
+
µ
α
+
µc
c ⎠
⎝

If

i ≥ nlog + 1 , i - nlog events are lost due to exceeding limitation of capacity for

event log. Thus, an average number of lost events per client failure is:
i

⎛ α ⎞ µc
⎛ α ⎞
⎜⎜
⎟⎟
⎟⎟
(i − nlog ) = ⎜⎜
∑
i = nlog +1 ⎝ α + µ c ⎠ α + µ c
⎝ α + µc ⎠
∞

nlog

(4)

α
µc

Event (Broker) Message Based Request/Reply Model
Failure of communication link: Besides cost (delay time) without disconnection (trr),
additional cost (delay time) is required due to disconnection of communication link. If
communication link is disconnected during request and reply, a transaction is delayed
until the link is reconnected. There are two cases in disconnection: (1) communication
link was connected but disconnected during a transaction (sending request message,
processing the request on a server, and receiving reply) is performed (probability is
µ/(λ+µ)(1- ε

− t rr λ

)), and (2) communication link was disconnected (probability is

λ/(λ+µ)). When disconnection occurs (probability is µ/(λ+µ)(1- ε
average delay time is 1/µ. Thus, cost of request/reply model is :
trr + {µ /(λ+µ)(1- ε

− t rr λ

)+λ/(λ+µ)}(1/µ)

− t rr λ

)+λ/(λ+µ)),
(5)

Failure of server: When we assume that persistent file and durable database exist in
event (broker) message based request/reply model, request/reply model can continue
its transaction. The roles of persistent file and durable database are similar to those of
publish/subscribe model. Persistent files in publish/subscribe model are sharable

580

S. Oh et al.

among servers. When a server fails, the another server can take over the role and
receives requests from clients and replies to clients. Thus request/reply model can con
tinue its transactions without any interruption. We also ignore the cost required for
task transition from failed server to backup server. Thus, cost is:
trr
(6)
Failure of client: Durable database saves information. Thus, a client can receive
reply any information at anytime after it recovers from a failure up to nlog-th recent
data. Thus, an average number of lost data item per client failure is the same as
Equ. (3).
RPC Based Request/Reply Model (Non-persistent and Non-durable)
Failure of communication link: In addition to waiting time for link recovery, transaction of request and reply procedure will be restarted after the link recovers if
persistent file does not exist. Thus, following additional costs (time delay) are
required:

• useless computation: If a server fails a transaction of during request/reply process,
a client needs to request the server again after recover. Thus, the previous request/reply process until the server failure is useless (lost). We call it useless computation. The amount useless computation is the maximum of trr + tproc.
• recovery: When a server recovers from a failure, some amount of time is required for recovery procedure. In this analysis, recovery time is ignored like the
other models (publish/subscriber and event (broker) message based request/reply
models).
We analyze cost (time) delay of request/reply model on a link failure in three cases:
−( t + t

)λ

(1) Link does not fail (probability is 1-µ/(λ+µ)(1- ε rr proc )-λ/(λ+µ)): Required
cost is trr , (2) Link was failed (probability is λ/(λ+µ)): Cost is needed to wait until
link recovers (1/µ) and restart transaction (crr), and (3) Link fails during a transaction
−( t + t

)λ

(probability is µ/(λ+µ)(1- ε rr proc )): In addition to useless computation
(E(trr+tproc,λ)), costs to wait until link recovers (1/µ) and restart transaction (crr)) are
necessary. Thus, cost is:
crr = [1-{µ/(λ+µ)(1- ε
+ µ/(λ+µ)(1- ε

− ( t rr + t proc ) λ

− ( t rr + t proc ) λ

)+λ/(λ+µ)}]trr

){E(trr+tproc,λ)+1/µ+crr}+ λ/(λ+µ){(1/µ)+c(β)}

⇒ crr = [ [1-{µ /(λ+µ )(1- ε − ( t rr + t proc ) λ )+λ/(λ+µ)}]trr
+ µ /( λ + µ )(1- ε

− ( t rr + t proc ) λ

){E(trr + tproc,λ)+1/µ}+λ/(λ+µ)(1/µ)]

/[1- {µ/(λ+µ)(1- ε

− ( t rr + t proc ) λ

(7)

)+λ/(λ+µ)]

E(x, λ) denotes the amount of time, during an interval of length x, before a failure
occurs with rate of λ, given that failure rate is λ and the failure occurs during the interval. Then,

Publish/Subscribe Systems on Node and Link Error Prone Mobile Environments

E(x, λ) =

λε

x

∫t
0

− λt

1−ε

dt = λ −1 −
−λt

xε − λx
1 − ε −λx

581

(8)

Failure of server: When persistent file does not exist, transaction of request/reply
model is delayed on a server failure until the server recovers from the failure. Moreover, transaction of request and reply procedure will be restarted after the server recovers. Cost analysis is similar to that of failure of communication link (Equ. (5)). We
analyze cost (time) delay of request/reply model on a server failure in three cases:
−( t +t

)λ

(1) Server does not fail (probability is 1-µs/(λs+µs)(1- ε rr proc s )-λs/(λs+µs)): Required cost is trr , (2) Server was failed (probability is λs/(λs+µs)): Cost is needed to
wait until server recovers (1/µs) and restart transaction (crr)), and (3) Server fails dur−( t + t

)λ

ing a transaction (probability is µs/(λs+µs)(1- ε rr proc s )): In addition to useless
computation (E(trr+tproc,λs)), costs to wait until server recovers (1/µs) and restart transaction (crr)) are necessary. Thus, cost is:
crr = [1-{µs/(λs+µs)(1- ε
+µs/(λs+µs)(1- ε

− ( t rr + t proc ) λ s

− ( t rr + t proc ) λ s

)+λs/(λs+µs)}]trr

){E(trr+tproc,λ)+1/µs+crr}+λs/(λs+µs){(1/µs)+ crr }

⇒ crr = [ [1-{µs/(λs+µs)(1- ε − ( t rr + t proc ) λs )+λs/(λs+µs)}]trr
+ µs/(λs+µs)(1- ε

− ( t rr + t proc ) λ s

/[1-{ µs/(λs+µs)(1- ε

(9)

){E(trr+tproc,λ)+1/µs}+ λs/(λs+µs)(1/µs)]

− ( t rr + t proc ) λ s

)+λs/(λs+µs)]

Failure of client: As we assume that a server of RPC based request/reply model contains a current data (or event) only without logging data during a failure of client, data
(event) occurred during the failure is lost.
Periodic (Polling) Model
In the periodic model, the period of publish (or polling) is delayed until communication link is reconnected once communication link is disconnected. Cost of periodic model due to disconnection is function of delayed probability and time. When
link was disconnected or is disconnected during message delivery (probability of
µ/(λ+µ) ε
is:

− t poll (α ,T ) λ

+ λ/(λ+µ)), period is delayed by 1/µ on average. Thus time delay

tpoll(α,T) + {µ/(λ+µ) ε

− t poll (α ,T ) λ

+ λ/(λ+µ)}(1/µ)

(10)

If we consider conceptual cost:
cpoll(α,T) + [1–{µ/(λ+µ ) ε
+ {µ/(λ+µ) ε

− t poll (α ,T ) λ

− t poll (α ,T ) λ

+λ/(λ+µ )}]cdelay(α, T)

(11)

+λ/(λ+µ)}cdelay(α,T+1/µ)

We also assume that persistent file and durable database exist in persistent and durable periodic model. Costs are basically same as Equ’s (5) and (6) in the case of
server failure of communication links and server, respectively, and Equ (3) in client
failure.

582

S. Oh et al.

3 Performance Comparisons
In this section, we describe performance comparisons by
Table 2. Parameters
parametric analysis. System parameters are setup as in
Param.
Values
the Table 2. Curves in Fig.2 show time delay when
α, β
0.5
communication links are transiently disconnected and c c
2
ps, rr
reconnected. As publisher and subscriber are decoupled c , c
1
pub
sub
in time and space, publish/subscribe system is more cpoll(α, T)
1 or α T
tolerable than request/reply system from failure. Pub- cdelay(α,T)
0, T, or α T
lish/subscribe system requires less communication delay s(n)
1/n - 1
0.0001 – 0.5
in compare to request/reply system. We also measure λ , λs, λc
0.1
communication delay and additional service time delay µ, µs
0.05 - 0.1
per transaction due to sever failure. As shown in Fig.3, µc
1
publish/subscribe system (curve “pub/sub”) and event tps , trr
t
1
or
5
proc
message based request/reply system (curve “req/reply”)
t
(α,
T)
1,
T,
or
αT
poll
always require only communication delay since backup
server takes over failed server without transition time. However, RPC based request/reply system (curve “RPC”) requires additional service time delay and lost

3.5

2.5

Tim e delay

2

Tim e delay

3

pub/sub
pub/sub2
req/reply

1.5
1

pub/sub
req/reply
rpc

2.5
2
1.5
1

0.5

0.5
0

0
0.0001

0.0005

0.001

0.005

0.0001

0.01

0.0005

0.001

0.005

0.01

Failure rate ofserver

Failure rate ofcom m unication link

Fig. 2. Time delay per transaction links Fig. 3. Time delay per transaction (α=0.5,
(α=0.5, s(n)=1, tps=1, trr=1, µ=0.1, and β=0.5 for tps=1, trr=1, β=0.5, and µs=0.1)
pub/sub and req/reply and β=0.2 for pub/sub2)
4

Tim e delay

Num ber of lost event

12

3.5

pub/sub
req/reply
rpc

3
2.5
2
1.5
1
0.5
0
0.0001

0.0005

0.001

0.005

0.01

Failure rate oflink and server

n_log=0
n_log=10
n_log=20
n_log=30

10
8
6
4
2
0
0.05

0.1

0.2

0.5

Recovery rate ofclient

Fig. 4. Time delays per transaction (α=0.5, Fig. 5. Number of lost events per client failure
tps=1, trr=1, tpoll=1, β=0.5, µ=0.1, µs=0.1)
by varying recovery rate of client

Publish/Subscribe Systems on Node and Link Error Prone Mobile Environments

583

Table 3. Experimental results: Delay time of sending message

RPC
Pub/Sub

Wireless
1290.7 (client – gateway)
1448.4 (ED – EBS)

Wired
39.9 (gateway – server)
89.7 (EBS – ES)

Total (msec.)
1330.6 (trr)
1538.1 (tps)

computation due to server failure. We also measure performance considering both
failures of communication link and server. Fig.4 depicted results. As we expected,
performance of “RPC” is the worst. Fig.5 shows effectiveness of durable database
which logs events for the failure of client. Without logging, a client loses events occurred during its failure. As shown in Fig.5, number of lost events can be reduced as
maximum number of log increases. We can consider “nlog=0” curve as publish/subscribe system without durable database.
Table 3 shows our experimental results (time delay) of sending short message (10
bytes) in a practical environment. The experiment environment consists of NaradaBrokering [14] system where a HHMS (HandHeld Message Service) Proxy [15]
plugged in, mobile clients, and conventional PC applications. We have an experiment
with a J2ME echo client application and a simpleserver that sends 10 byte message.
The round trip time is measured 2000 times and the median value is taken. We use
Treo 600 with Sprint PCSVision service as a client device. In our analysis, we set
parameters tps = trr = 1, which is comparable to our experimental results (trr = 1.33 sec.
and tps =1.53 sec.). We need to adjust various parameters for each system because
these parameters depend on systems and application environments.

4 Conclusion
Publish/subscribe model has many advantages in push based mobile applications.
However, mobile and ubiquitous environments are error prone due to wireless link
disconnection, power exhaustion on mobile devices, etc. We analyze performance and
effectiveness of publish/subscribe systems on the failure of client and server nodes
and disconnection of communication links. The results of our analysis show that publish/subscribe system is more durable than client/server models in error prone mobile
and ubiquitous environments including mobile devices and wireless networks.

References
1. P. Eugster, P. Felber, R. Guerraoui, and A. Kermarrec, “The Many Faces of Publish/Subscribe,” ACM Computing Surveys, vol. 35, no. 2, Jun. 2003, pp. 114-131.
2. G. Muhl, A. Ulbrich, K. Herrmann, and T. Weis, “Disseminating Information to Mobile
Clients Using Publish-Subscribe,” Proc. of the IEEE Internet Computing, Vol.8, No. 3,
2004
3. Sagar Chaki, Pascal Fenkam, Harald Gall, Somesh Jha, Engin Kirda, and Helmut Veith,
“Integrating Publish/Subscribe into a Mobile Teamwork Support Platform,” Proc. of the
15th International Conference on Software Engineering and Knowledge Engineering
2003

584

S. Oh et al.

4. Zhexuan Song, Yannis Labrou and Ryusuke Masuoka, “Dynamic Service Discovery and
Management in Task Computing,” Proc. of the 1st International Conference on Mobile
and Ubiquitous Systems: Networking and Services, August 22-25, 2004
5. L. Fiege, F. Gartner, O. Kasten, and A. Zeidler, “Supporting Mobility in Content-Based
Publish/Subscribe Middleware,” Middleware 2003, LNCS 2672, pp. 103 – 122, 2003.
6. M. Caporuscio, A. Carzaniga, and A. Wolf, “Design and Evaluation of a Support Service
for Mobile, Wireless Publish/Subscribe Applications,” IEEE Transactions on Software
Engineering, vol. 29, no. 12, pp. 1059 – 1071, Dec. 2003.
7. U. Farooq, E. Parsons, and S. Majumdar, “Performance of Publish/Subscrive Middleware
in Mobile wireless Networks,” Proc. of WOSP’04, pp. 278-289, Jan. 2004.
8. S. Lee, S. Ko, G. Fox, K. Kim, and S. Oh, “A Web Service Approach to Universal Accessibility in Collaboration Services”, Proc. of ICWS, Las Vegas June 2003.
9. A. Carzaniga, D.Rosenblum, and A. Wolf, “Design and evaluation of a wide-area event
notification service,” ACM Transactions on Computer Systems, 2001
10. M. Aguilera, R. Strom, D. Sturman, M.Astley, and T. Chandra, “Matching events in a content- based subscription system,” Proc. of ACM Symp. on Principles of Distributed Computing, 1999
11. G. Cugola, E. Di Nitto, and A. Fuggeta, “The JEDI Event-based infrastructure and its Application to the Development of the OPSS WFMS,” IEEE Trans. of Software Engineering,
2001
12. L. Fiegen, G. Muhl, and F. Gartner, “A Modular Approach to Building Event-Based Systems,” Proc. of ACM Symposium on Applied Computing, 2002
13. B. Segall, D. Arnold, J. Boot, M. Henderson and T. Phelps, “Content Based Routing with
Elvin4,” Proc. of AUUG2K, 2000
14. Shrideep Pallickara and Geoffrey Fox, “NaradaBrokering: A Middleware Framework and
Architecture for Enabling Durable Peer-to-Peer Grids,” Proc. of ACM/IFIP/USENIX International Middleware Conference Middleware, pp 41-61, 2003.
15. Sangyoon Oh, Geoffrey C. Fox, Sunghoon Ko, “GMSME: An Architecture for Heterogeneous Collaboration with Mobile Devices”, Proc. of MWCN 2003, Singapore, Oct., 2003.

