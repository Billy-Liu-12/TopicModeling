Triggering Network Services Through
Context-Tagged Flows
Roel Ocampo1,2 , Alex Galis2 , and Chris Todd2
1

Department of Electrical and Electronics Engineering, University of the Philippines,
Diliman, Quezon City, 1101 Philippines
2
Department of Electronic and Electrical Engineering, University College London,
Torrington Place, London WC1E 7JE
{r.ocampo, a.galis, c.todd}@ee.ucl.ac.uk

Abstract. Next-generation Grids will require ﬂexible and adaptive network infrastructures that would be able to provide the requisite quality of
service for computational ﬂows. We discuss a mechanism where network
ﬂows are tagged with network context information, triggering dynamic
network services, including QoS and adaptation services. An incremental
deployment strategy and some initial results are presented.

1

Introduction

Due to the nature of the computational tasks that grids handle, the underlying
resources they use are required to deliver nontrivial qualities of service [1]. In
networked environments, where resources such as bandwidth are often shared,
there may be situations where computational ﬂows would have to compete for
the use of resources along with ﬂows from less critical applications. To deal with
this, a pragmatic approach might be to diﬀerentiate the various network ﬂows
and set an adaptation policy P on a particular group of ﬂows based on the class
of users U generating the ﬂow, for a particular type of usage or activity A, under
a certain situation or set of network conditions C. In other words, an adaptation
P is triggered by the general parameters (U, A, C).
Currently the mechanisms that exist to diﬀerentiate network ﬂows provide
very limited information about the ﬂow, and are usually non-extensible. In this
work, we propose the use of rich and extensible information in the form of network context as a means of diﬀerentiating ﬂows and triggering network services, particularly adaptation services. In Sect. 2 we argue that end-hosts are
rich sources of information needed in triggering adaptation services, and that a
mechanism for sharing such information with the rest of the network is needed.
In Sect. 3 we present the concept and design for such a mechanism, called context tagging, and Sect. 4 brieﬂy discusses an incremental deployment strategy.
Section 5 discusses some initial results. Section 6 brieﬂy discusses eﬀorts that
are related to our current work, and ﬁnally Sect. 7 concludes and describes the
work ahead.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 259–266, 2005.
c Springer-Verlag Berlin Heidelberg 2005

260

2

R. Ocampo, A. Galis, and C. Todd

End-Hosts and Flow Context

As a consequence of the end-to-end principle [2], nodes such as routers often
have a very limited view of the state of the network. While they often have a
global view of the network’s topological state as a result of routing exchanges,
routers may have a limited, per-node awareness of other parameters such as trafﬁc levels, congestion, or bit error rates. Other information that may characterize
the state of the network, such as path loss, delay and jitter are usually sensed
and processed at end-hosts.
Aside from end-to-end traﬃc-related parameters, end-hosts are rich sources
of other types of information such as the characteristics and capabilities of enddevices, the applications generating the traﬃc, and the identities and activities
of users such as their movement and location. All of these pieces of information
are relevant in (a) determining whether a certain condition C exists within the
network or user environment, (b) in identifying whether the traﬃc belongs to
the class of users U , and (c) if the traﬃc is the result of usage activity A. These
parameters also help in the design of appropriate adaptation policies applicable
to the user group under these circumstances, or within that particular context.
2.1

The Context of a Flow

Context is deﬁned in the New Oxford Dictionary of English as “the circumstances
that form the setting for an event ... and in terms of which it can be fully
understood and assessed.” Dey, Salber and Abowd further deﬁne context as “any
information that can be used to characterize the situation of entities ... that
are considered relevant to the interaction between a user and an application,
including the user and the applications themselves” [3]. Although the latter
deﬁnition is tailored to interactions between users and applications, it can still
be used as a template to describe the notion of context relevant to the interaction
between a user application and the network, or between a user and the network.
One entity we consider relevant to this interaction is the flow, deﬁned as distinguishable streams of related datagrams, typically resulting from the activity
of a single entity [4]. The fact that ﬂows are attributable to speciﬁc user groups
and their activities makes them ideal sources of adaptation triggers U and A. We
deﬁne the context Cf of a network ﬂow as any information that can be used to
characterize its situation, including information pertaining to other entities and
circumstances that give rise to or accompany its generation at the source, aﬀect
its transmission through the network, and inﬂuence its use at its destination.
This collectively includes not only the intrinsic, “low-level” characteristics of a
ﬂow, such as its traﬃc proﬁle, but also the nature of the applications, devices,
and the activities and identities of the users that produce or consume the ﬂow.
We envision ﬂow context to be used within the network in the following ways:
– to trigger adaptation directly on the ﬂow itself. For example, the content of
a ﬂow may be compressed, transcoded, encrypted, classiﬁed, assigned a particular QoS treatment, marked, or rerouted in response to link constraints,
network state, or application requirements [5].

Triggering Network Services Through Context-Tagged Flows

261

– to trigger immediate or future network-wide management actions that are
not necessarily targeted to exclusively aﬀect the context-carrying ﬂow. For
example, a new ﬂow may trigger the activation of a reserve link in order to
guarantee suﬃcient bandwidth for future ﬂows.
– to trigger network services that are speciﬁc or personalized for a user or group
of users. A context tag may carry information about the user generating the
ﬂow, such as her proﬁle or preferences. The network’s response may be to
oﬀer these speciﬁc services to the user, or to automatically provide them in
a transparent way. These new services may or may not directly aﬀect the
current ﬂow.
– as a means to collect information for long-term purposes, without triggering any immediate adaptation or service, such as for traﬃc engineering or
network optimization, or for consumption by cognitive or knowledge-based
entities within the network [6].
Our approach involves tagging network ﬂows with context obtained from
sensors located mainly at end-hosts, by injecting packets that carry the ﬂow’s
context within the ﬂow itself. These context tags are preferably located at the
start or within the ﬁrst few packets of a ﬂow, although there may be times
where they may be reinserted anytime during the ﬂow lifetime, especially to
signal changes in the ﬂow’s context.

3

Context-Tagging Architecture

A diagram illustrating the main functional components in our scheme is show in
Figure 1. Some of the components are based on a cognitive framework previously
described in [7].

Fig. 1. Context tagging framework

3.1

Tag Creation and Injection

Sensors collect low-level context information, usually measurable data or lowlevel events. These are transformed into useful form through the process of interpretation, which may involve the application of an algorithm, comparison with a
model, or the application of reasoning or other cognitive processes. Aggregation
involves the examination of separate pieces of context information to generate
new contextual knowledge.

262

R. Ocampo, A. Galis, and C. Todd

The context information is then passed down to the marshalling and encapsulation stage, where it is transformed into an Extensible Markup Language
(XML) document [8]. The use of XML provides a rich and extensible means
of representing context information, and allows the formal speciﬁcation of languages governing the interpretation of such context. It is further encapsulated
in a User Datagram Protocol (UDP) transport-layer datagram [9]. The use of
UDP allows other context-“interested” hosts, including the end-destination of
the ﬂow, to detect or demultiplex out the context tag packet from the rest of
the ﬂow.
Further down, the tag injection and detection stage encapsulates the UDP
datagram in an IP packet whose header contains the IP Router Alert Option as
described in RFC 2113 for IPv4 [10], and RFC 2711 for IPv6 [11]. This option
has the semantic “routers should examine this packet more closely.”
Routers within the network may also inject context tags to describe information aggregated from multiple tags within a single ﬂow, or to describe ﬂow
aggregates called macroflows. In some cases, such as within the Internet core,
routers may be more interested in context descriptions of large macroﬂows rather
than the individual constituent ﬂows, for reasons of scalability. It may be also
necessary for routers to inject context tags to describe any adaptation they may
have performed on a ﬂow or macroﬂows.
3.2

Service Triggering

Routers within the network detect the context tag by virtue of the Router Alert
option in the IP header. Routers that either do not support the option, or do
not recognize the context payload simply forward the packet to the next hop.
At end-hosts, the context tag may be demultiplexed out of the ﬂow by virtue of
the UDP port number. If no equivalent context-processing process exists at the
destination host the tag is either silently dropped, or an error message may be
returned.
Once received, the context payload is extracted and sent up the stack, to
the context interpretation and aggregation module. The context may either be
used for long-term information gathering or learning, or may result in a speciﬁc
adaptation being triggered. Service (including adaptation) modules subscribe to
certain context values or events within the context interpretation module. When
these events occur or the values are presented to the service module, a decision
engine determines if the service or adaptation is executed. In the case of routers,
the adaptation may be applied directly to the ﬂow carrying the tag, or to a group
of ﬂows, or a larger-scale adaptation or management function may be invoked.
Service modules on diﬀerent nodes may communicate with each other and may
operate in a coordinated fashion; however, the details of this operation is beyond
the scope of this paper.
The architecture also allows end-hosts to receive and process context tags,
and to contain adaptation components. In this case, the adaptation could be on
the incoming or outgoing network ﬂow, or on a user application, or inﬂuence
some operation of the receiving device.

Triggering Network Services Through Context-Tagged Flows

4

263

Deployment Strategy

Our context-tagging scheme can be incrementally deployed on networks by progressively adding components that either support ﬂow context sensing and tag
generation, or provide context-triggered services and adaptation, or both. Context sensing functionality may be added to end-hosts or incrementally on network
nodes such as routers, or dedicated boxes may be inserted within the network
in order to inspect ﬂows and inject context tags. For nodes that will provide
context-triggered services, the service modules and the core router functionalities (classiﬁcation, forwarding, QoS) do not necessarily have to be closely coupled; the context-related and adaptation functions could reside on a separate
device “bolted” onto a conventional router, and SNMP [12] may be used to
eﬀect service execution. While there are obvious advantages in terms of performance and a wider range of functionalities are possible in the closely-coupled
case, the loosely-coupled example is given here to illustrate that the scheme may
be incrementally deployed on the existing Internet infrastructure.

5

Initial Results

A simple ﬂow-generating application using libnet [13], a toolkit that allows lowlevel packet construction, handling and injection was designed and used to simulate the operation of our system and perform initial validation on some of its
components. Our application generated a ﬂow containing exactly one context tag
packet carrying the Router Alert Option in the IP header and a rudimentary
XML-formatted context payload encapsulated in UDP. The rest of the ﬂow consisted of UDP datagrams carrying dummy payloads. The context tag packet was
positioned well within the ﬂow, rather than among the ﬁrst few packets, so that
the adaptation could be well-observed. The ﬂow was sent through a Linux-based
router that in turn ran a process that detected the context-tagged packet.

(a)

100
90
80
70

Bandwidth (kbps)

<flowspec>
<size unit="Kbytes">4196382</size>
</flowspec>
<filterspec>
<src_addr type="IPv4">10.1.2.3</src_addr>
<dest_addr type="IPv4">165.220.16.1</dest_addr>
<transport>
<protocol>UDP
<src_port>80</src_port>
<dest_port>1234</dest_port>
</protocol>
</transport>
</filterspec>
<app name="mypeer">
<app_class>p2p</app_class>
</app>

60
50
40
30
20
10
0

Time

(b)

Fig. 2. (a) Context tag fragment. (b) Adaptation response on router

264

R. Ocampo, A. Galis, and C. Todd

On the Linux router, the tag was processed, triggering a simple adaptation.
In this example, the speciﬁc adaptation was to map the ﬂow into an appropriate traﬃc class. Within the context tag a component called the filterspec
provided a function similar to a similarly-named component in the Resource
Reservation Protocol (RSVP): a means to deﬁne the set of packets that constitute the ﬂow described by the tag [14]. In this experiment our ﬁlterspec
used a Linux u32 ﬁlter [15] descriptor that was directly parsed by the router
and passed on to the adaptation module. In future implementations we expect
to use a wider variety of mechanisms to specify ﬁlterspecs, including high-level
descriptions that could be mapped by the context interpreter and service modules to speciﬁc classiﬁcation mechanisms within the router. The adaptation
module used the Linux iptables and tc mechanisms [15] to map the ﬂow to
a traﬃc class.
A fragment of the context tag is shown in Fig. 2a. The router’s response
to the context tag is shown in Fig. 2b. Prior to receiving the tag, the network
accommodated the ﬂow’s full oﬀered load (60 kbps average). Upon receiving
the tag, the router eﬀectively limited the bandwidth allocated to the ﬂow to an
average of 14 kbps.

6

Related Work

The network edge is a rich source of context information. End-hosts are in the
best position to provide information on the applications that generate or consume traﬃc, the users whose activities drive these applications, and the computational and networking capabilities of the devices on which these applications run.
Currently no widely deployed and suﬃciently ﬂexible mechanism exists for the
edge to share context information within the network. Many context-aware systems employ publish-subscribe mechanisms that allow clients to obtain context
information from sources [3, 16]. Our approach however contemplates a more
loosely-coupled, connectionless communications model between end-hosts and
nodes.
While network- and transport-layer protocol headers contain rudimentary
tags (ﬁelds) that provide some hints on the type of applications that generate the ﬂow, or to some extent, the nature and characteristics of the ﬂow’s
content, these tags are not expressive enough to encapsulate the rich context
information available at the edge. Schemes that provide ﬂow descriptions often focus exclusively on their QoS characteristics, rather than a more general
description of ﬂow context. Resource reservation protocols such as RSVP [14]
and the experimental ST-II [17] use a flowspec to describe the characteristics of
a ﬂow, usually in terms of bandwidth, delay, and other QoS-related characteristics [18]. Other schemes such as the Session Description Protocol (SDP) [19]
and Multipurpose Internet Mail Extensions (MIME) [20] deliver ﬂow or session context to end-hosts rather than network nodes, and are limited to very
speciﬁc application domains.

Triggering Network Services Through Context-Tagged Flows

7

265

Conclusion and Future Work

A key component needed to enable the deployment of context-aware networks is
a method for sharing network context information. We have discussed a simple
yet extensible and semantically-rich mechanism that tags ﬂows through the network with context, delivering context directly to nodes along the unicast path
or multicast tree. This allows network services, particularly adaptation services,
to be triggered based on ﬂow context. Our on-going work is focused on further validating our architecture, evaluating its performance, and exploring other
application scenarios.
We are likewise currently exploring a parallel implementation of our components on an active networking [21] platform. We believe that such an approach
will allow us to achieve a greater amount of ﬂexibility through an on-demand deployment of context sensing, tagging, interpretation and adaptation components
within the network.
Routers and end-hosts would be able to eﬃciently share context only if they
subscribe to a common information model. An important component of our ongoing work is the development of an ontology and appropriate context-sharing
languages.
Finally, as with any system that senses and distributes context information,
there are concerns on security and privacy that we also hope to address in the
near future.
Acknowledgment. This paper describes work partially undertaken in the context
of the E-NEXT - Information Society Technologies (IST) FP6-506869 project.
The IST program is partially funded by the Commission of the European Union.
The views and conclusions contained herein are those of the authors and should
not be interpreted as necessarily representing the E-NEXT project. Roel Ocampo
acknowledges support by the Doctoral Studies Fellowship program of the University of the Philippines.

References
1. I. Foster. What is the Grid? A Three Point Checklist. Grid Today, July 2002.
2. J. Saltzer, D. Reed, and D. Clark. End-to-End Arguments in System Design. ACM
Transactions on Computer Systems, November 1984.
3. A. K. Dey, D. Salber, and G. D. Abowd. A Conceptual Framework and a Toolkit
for Supporting the Rapid Prototyping of Context-Aware Applications. HumanComputer Interaction (HCI) Journal, 16 (2-4), 2001
4. R. Braden, D. Clark, and S. Shenker. Integrated Services Architecture in the Internet: an Overview. Request for Comments 1633, June 1944.
5. M. Yarvis, P. Reiher and G. Popek. Conductor: A Framework for Distributed
Adaptation. Proc. 7th Workshop on Hot Topics in Operating Systems, March 1999.
6. D. Clark, C. Partridge, J. Ramming, and J. Wroclawski. A Knowledge Plane for the
Internet. Proc. ACM SIGCOMM 2003 Conference on Applications, Technologies,
Architectures and Protocols for Computer Communications, August 2003.

266

R. Ocampo, A. Galis, and C. Todd

7. R. Ocampo and H. De Meer. Smart Wireless Access Points for Pervasive Computing. Proc. First Working Conference on Wireless On Demand Network Systems
(WONS ’04), Lecture Notes in Computer Science LNCS 2928, January 2004.
8. T. Bray, J. Paoli, C.M. Sperberg-McQueen, E. Maler, and F. Yergeau (editors). Extensible Markup Language 1.0 (Third Edition). W3C Recommendation 04 February
2004, http://www.w3.org/TR/REC-xml
9. J. Postel. User Datagram Protocol. Request for Comments 768, August 1980.
10. D. Katz. IP Router Alert Option. Request for Comments 2113, February 1997.
11. C. Partridge and A. Jackson. IPv6 Router Alert Option. Request for Comments
2711, October 1999.
12. J. Case, M. Fedor, M. Schoﬀstall, J. Davin. A Simple Network Management Protocol (SNMP). Request for Comments 1157, May 1990.
13. M. Schiﬀman. Libnet. http://www.packetfactory.net/
Projects/Libnet/
14. L. Zhang, S. Deering, D. Estrin, S. Shenker, and D. Zappala. RSVP: A New Resource ReSerVation Protocol. IEEE Network, September 1993.
15. B. Hubert, T. Graf, G. Maxwell, R. van Mook, M. van Oosterhout, P. Schroeder,
J. Spaans, P. Larroy (editors). Linux Advanced Routing and Traﬃc Control.
http://www.lartc.org.
16. T. Kanter. A Service Architecture, Test Bed and Application for Extensible and
Adaptive Mobile Communication. Proc. Personal Computing and Communication
Workshop 2001 (PCC’2001), April 2001.
17. C. Topolcic. Internet Stream Protocol Version 2 (ST-II). Request for Comments
1190, October 1990.
18. C. Partridge. A Proposed Flow Speciﬁcation. Request for Comments 1363, September 1992.
19. M. Handley, V. Jacobson. SDP: Session Description Protocol. Request for Comments 2327, April 1998.
20. N. Freed and N. Borenstein. Multipurpose Internet Mail Extensions Part Two:
Media Types. Request for Comments 2046, November 1996.
21. D. L. Tennenhouse and D. J. Wetherall. Towards an Active Network Architecture.
Computer Communication Review, 26(2), April 1996.

