Task Mapping Algorithm for
Heterogeneous Computing System Allowing
High Throughput and Load Balancing1
Sung Chune Choi and Hee Yong Youn
School of Information and Communications Engineering,
Sungkyunkwan University,
440-746, Suwon, Korea +82-31-290-7952
{choisc, youn}@ece.skku.ac.kr

Abstract. The applicability and strength of heterogeneous computing systems
are derived from their ability to match computing nodes to appropriate tasks
since a suite of different machines are interconnected. A good mapping algorithm offers minimal expected completion time and machine idle time. In this
paper we propose a new task scheduling algorithm allowing higher performance
than the existing algorithms such as the Min-min, Max-min, and Sufferage algorithm. It is achieved by task swapping approach based on the expected completion time and ready time of each machine. Extensive computer simulation
validates the proposed algorithm along with the earlier ones.
Keywords: Heterogeneous computing, load balancing, task mapping, throughput, scheduling.

1 Introduction
In heterogeneous computing (HC) environment, a suite of different machines are
interconnected to provide a variety of computational capabilities and maximize their
combined performance to execute tasks having diverse requirements. There exist a
number of different types of HC systems. This paper focuses on mixed-machine HC
systems, where a number of high-performance heterogeneous machines are interconnected through high-speed links [1].
In HC system the application is decomposed into tasks, where each task is computationally homogeneous. The applicability and strength of HC systems are derived
from their ability to match the computing resources to appropriate tasks. Here each
task is assigned to one of the machines which is best suited for its execution to minimize the execution time. Therefore, an efficient mapping scheme allocating the application tasks to the machines is needed.
The general problem of mapping tasks to the machines is a well known NPcomplete problem and several mapping algorithms have been proposed to approxi1

This research was supported by the Ubiquitous Autonomic Computing and Network Project,
21st Century Frontier R&D Program in Korea and the Brain Korea 21 Project in 2004. Corresponding author: Hee Yong Youn.

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 1000 – 1003, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Task Mapping Algorithm for Heterogeneous Computing System

1001

mate its optimal solution in the literature. The representative batch mode mapping
algorithms are Min-min, Max-min, and Sufferage algorithm [2,3,4]. A good
mapping algorithm compromises between matching for smallest expected
completion time and load balancing to minimize the machine idle time. Since the
previous algorithms have some limitations, we propose a new scheduling algorithm
solving them. It is achieved by task swapping approach based on the expected
completion time and ready time of each machine. Computer simulation reveals that
the proposed algorithm consistently outperforms the earlier algorithms for various
degree of task and machine heterogeneity.

2 Related Work
At first, we define some metrics used throughout the paper, which are the expected
execution time (EET), ready time (RT), expected completion time (ECT), and
makespan. The EETij is the estimated execution time for task i (ti) on machine j (mj) if
mj has no load when ti is assigned. If an HC system of m machines has t tasks, we can
obtain a t × m EET matrix. The RTj is the time that mj becomes ready after completing
the execution of the tasks that are currently assigned to it. The ETCij is the time at
which mj completes ti after finishing any previously assigned tasks. From the definitions above, it is easy to get ECTij = RTi + EETij. The makespan for a complete
schedule is then defined as the time duration from the start to the time the entire tasks
are completed. Makespan is a measure of the throughput of an algorithm. In other
words, the ready time of a machine after tasks are assigned will be smaller if the
makespan is decreased.
The Min-min algorithm computes each task’s Minimum Completion Time (MCT)
over the available hosts and the task with the minimum MCT is assigned to the best
host. The motivation behind the Min-min algorithm is that assigning tasks to the hosts
completing them fastest will lead to overally reduced makespan. The Max-min algorithm is similar to the Min-min algorithm except that task with the maximum earliest
completion time is assigned. The Max-min algorithm might outperform the Min-min
algorithm when there exist more short tasks than long tasks. The Sufferage algorithm
assigns a machine to a task that would ‘suffer’ most in term of expected completion
time if that particular machine is not assigned to it.

3 The Proposed Scheduling Algorithm
The proposed new scheduling algorithm shown in Figure 1 is divided into two parts.
The initialization step of Line (1) to (4) is similar to the ones in the Min-min and
Max-min algorithm. It differs from the Min-min algorithm in that a task is mapped
onto a machine as soon as it arrives at the scheduler like the MCT (minimum completion time) algorithm. Each task is examined to determine the machine providing earliest completion time, and then the pre-allocation table and the temporary RT table are
updated to reassign the tasks. The MCT algorithm is fast and simple, but it may not
assign a task to the best matched machine since it does not consider subsequently
arriving tasks those better match the machine. To remedy this sort of miss-matching,

1002

S.C. Choi and H.Y. Youn

each task is reassigned by calculating the expected completion time and the ready
time of each machine in Line (5) to (13). In each iteration of the for loop, a task is
selected arbitrarily, and the task having earlier completion time than this one is found
if it exists. If such task exists, the two tasks are swapped if at least one of the following two conditions is satisfied; i) the ECTs of the two machines are decreased, ii)
even though the ECT of one machine is increased, the maximum ready time is decreased. The main objective of the proposed approach is for better matching and load
balancing at the same time. When all the iterations of the inner for loop are completed, the temporary RT table of each machine is updated.

/* a task is mapped onto a machine as soon as it arrives at the scheduler */
(1) for all mj (in a fixed arbitrary order)
(2)
calculate the ECT according to EET and RT, and then update
(3)
find the machine mj with the minimum earliest completion time
(4) update the temporary RT table and update the pre-allocation table
(5) for each tk that assigned to each machine (in a fixed arbitrary order)
(6)
for each task ti for mj (in a fixed arbitrary order)
(7)
calculate the diff_value of ti and tk to mj and ml
(8)
if (Temporary RTl + EETkl) < (Maximum ready time in temporary RT table)
&& diff_value of task ti assigned to mj the diff_value of ml
(9)
swap task between mj and ml
(10) for every machine mj
(11)
if(Temporary RTj + EETkj) < (Maximum ready time in temporary RT table)
(12)
deallocate tk and allocate tk to mj
(13)
update the temporary RT table
(14) update the ready time table based on the tasks that were assigned to the machines
(15) update the expected completion time table

≥

Fig. 1. The proposed scheduling algorithm

4 Performance Evaluation
Table 1 shows the improvement of the EET of the Max-min, Min-min, and Sufferage
algorithm using the proposed algorithm for eight machine system. Here,
Table 1. Improvement of the EETs with the proposed algorithm for eight machine system

Task/ Machine heterogeneity

Max-min

Min-min

Sufferage

Low/ Low

30.1 %

3.5 %

3.4 %

Low/ High

27.6 %

3.7 %

5.3 %

High/ Low

26.7 %

1.3 %

0.5 %

High/ High

29 %

3.7 %

2.6 %

Task Mapping Algorithm for Heterogeneous Computing System

1003

consistent EET table was obtained from the inconsistent EET table by sorting the
execution times of the tasks on all machines. Note that the proposed algorithm outperforms the existing algorithms for various degree of task and machine heterogeneity.

5 Conclusion
The mapping algorithms in distributed systems aim at different measure such as
makespan, load balancing, and throughput. A good mapping algorithm needs to compromise the conflicting measures. In this paper we have proposed a new task scheduling algorithm which is better than the existing algorithms in terms of throughput and
load balancing. It is achieved by task swapping approach based on the expected completion time and ready time of each machine. In inconsistent heterogeneity mode, the
makespan of the proposed algorithm is lower than the existing algorithms because it
swaps the tasks among the machines for archiving good load balancing. Also, the
proposed algorithm has lower time complexity than others.
As a future work we will develop a more optimized algorithm that considers the
quality of service, and carry out comprehensive performance evaluation. We will also
implement the newly proposed task scheduling algorithm in an actual heterogeneous
environment for testing and refinement.

References
1. H. J. Siegel, J. K. Antonio, R. C. Metzger, M. Tan, and Y. A. Li, “Heterogeneous computing.” In A. Y. Zomaya (ed.), Parallel and Distributed Computing Handbook, New York,
NY: McGraw-Hill, 1996, 725-761.
2. Maheswaran, M. Ali, S. Siegal, H.J. Hensgen, D. Freund, R.F., “Dynamic matching
and scheduling of a class of independent tasks onto heterogeneous computting systems,”
HCW’99, 1999, 30-44.
3. O.H. Ibarra and C. E. Kim, “Heuristic algorithms for scheduling independent tasks on nonidentical processors,” Journal of the ACM, 24(2), April 1977, 280-289.
4. R. F. Freund, M. Gherrity, S. Ambrosius, M. Campbell, M. Halderman, D. Hensgen, E.
Keith, T. Kidd, M. Kussow, J. D. Lima, F. Mirabile, L. Moore, B. Rust, and H. J. Siegel,
“Scheduling resources in multiuser, heterogeneous, computing environments with SmartNet,” HCW’98, 1998, 184–199.
5. Ali, S. Siegel, H.J. Maheswaran, M. Hensgen, D. “Task execution time modeling for heterogeneous computing systems,” HCW’2000, May 2000, 185 – 199
6. M.Y. Wu and W. Shu, “A High-Performance Mapping Algorithm for Heterogeneous Computing Systems,” International Parallel and Distributed Processing Symposium (IPDPS),
April 2001.
7. Arnaud Giersch, Yves Robert, Frédéric Vivien, “Scheduling Tasks Sharing Files on Heterogeneous Master-Slave Platforms”, 12th Euromicro Conference on Parallel, Distributed
and Network-Based Processing (PDP'04), February 2004, 11 - 13.

