An Intrusion-Resilient Authorization and Authentication
Framework for Grid Computing Infrastructure
Yuanbo Guo1,2, Jianfeng Ma2, and Yadi Wang1
1

School of Electronic Technology, Information Engineering,
University, Zhengzhou, Henan 450004, China
yuanbo_g@hotmail.com
2 The Ministry of Education Key Laboratory of Computer Networks and
Information Security, Xidian University, Xi’an, 710071, China

Abstract. A correctly and continually working authorization and authentication
service is essential for the grid computing system, so it is very necessary to
maintain efficient this service with high availability and integrity in the face of
a variety of attacks. An intrusion-resilient framework of authorization and authentication service for grid computing system is presented in this paper. This
service is able to provide fault tolerance and security even in the presence of a
fraction of corrupted authorization and authentication servers, avoiding any single point of failure. We use a cryptographic (f, n) secret sharing scheme to distribute parts of the clients’ proxy certificates and use a secure multi-party computation scheme to perform the signatures such that the proxy certificate can be
issued in a distributed fashion without reassembly when a legal client registrant
at the Globus host. By using Non-Malleable Proof, the “man-in-the-middle attack” can be prevented; by distributing the secret data across several authorization and authentication servers, the compromise of a few servers will not compromise the availability of data. And, under the assumption of a Diffie-Hellman
decisional problem, a passive adversary gets zero knowledge about the system’s
private key X, and so cannot to issue the certification for any client, neither to
impersonate a legal authorization and authentication server.

1 Introduction
At the base of any grid environment, there must be mechanisms to provide security,
including authentication, authorization, data encryption, and so on. The Grid Security
Infrastructure (GSI) component of the Globus Toolkit provides robust security
mechanisms. Especially, it provides a single sign-on mechanism, so that once a client
is authenticated, the certificate authority in the GSI will generate a proxy certificate
and send it to the client, then the client can use the proxy certificate to perform actions
within the grid computing system. But this mechanism has its own drawback. For
example, since all clients’ certificates are maintained by the certificate authority, it
requires the certificate authority to be trusted and so introduces dependence upon the
certificate authority and thus creates a single point of failure, and, if successfully
compromised, would immediately lead to the exposure of all clients’ confidentiality
of certificates, interruption communication, or other forms of denial of service.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 229 – 236, 2005.
© Springer-Verlag Berlin Heidelberg 2005

230

Y. Guo, J. Ma, and Y. Wang

To address this issue, in this paper we present an intrusion-resilient authorization
and authentication framework for grid computing infrastructure, that removes this
single point of failure by distributing the authorization and authentication service
among n authorization and authentication servers (which will be denoted as AASs
briefly in the remaining of the paper). The framework uses a verifiable secret sharing
scheme to distribute shares of the system’s secret to AASs and use a secure multiparty computation scheme to perform the signatures such that the proxy certificate
can be signed in a distributed fashion without reassembly. When a legal client want to
sign-on the grid computing system, he/she sends a sign-on request to the Globus host
firstly, the Globus host will forward this request to a his-own-choosing subset of the n
AASs, and the contacted AASs answer with some information enabling the client to
compute his own proxy certificate and verify its correctness.
Our framework is intended to tolerate the compromise of up to f AASs, where
3 f + 1 ≤ n . Compromised AASs are assumed to be under the full control of an attacker
and to have Byzantine behavior1, but it is also assumed that the attacker cannot break
the cryptographic algorithms used. Under these assumptions, our service ensures the
confidentiality, integrity and availability of authorization and authentication service
for grid computing infrastructure. Also, our system is designed to be easy to embed
into existing grid computing environment. For example, the AASs are built with commodity PCs, an administrator can just swap a failed host out with another.

2 System Architecture
Let Client = {C1, . . . , Cm} be a set of m clients and let AAS = {AAS1, . . . , AASn} be a
set of n AASs(authorization and authentication servers for grid computing infrastructure). All of them share a global clock (i.e., the system is synchronous). Each client
connects himself or herself with 2f + 1 AASs by point-to-point encrypted and authenticated channels, where f is the threshold of secret sharing scheme we used. The member in the AASs can be good (i.e., it honestly executes the protocol) or bad (i.e., it is
controlled by an adversary and can deviate from the protocol in arbitrary ways), but a
majority of good AASs are always present across the system.
The service works as follows. A dealer, which is needed only in the system initialization phase, distributes system’s private key X among all n AASs by using
Feldman’s (f+1, n) VSS scheme [3] straight forward. So along with the secret shares,
he also generates a verification share to go along with each key share, and broadcast
the verification shares to all clients.
Each secret share is then distributed secretly to a different AAS, and all corresponding verification shares are broadcast to all of the clients. No AAS knows the whole X,
but only knows his own assigned share.
The architecture of our intrusion-resilient authorization and authentication service
can be illustrated as Figure 1.

1

A compromised host deviates arbitrarily from its specified protocols. It is also called arbitrary
behavior or malicious behavior.

An Intrusion-Resilient Authorization and Authentication Framework

231

Each AAS maintains a configuration file which specifies what types of resource are
allowed to be access by which client. When a client wants to apply for some services
of or execute a task on the grid computing system, he/she registers himself/herself at
the Globus hosts firstly, with the submission of his/her password or some others type
of credential and the requested services or tasks. Then, Globus host will performs the
initial validation; if success, it sends an authentication and authorization request to the
AASs on behalf of the client. Based on the identification of the client, each AAS consults its configuration files to determine what resources in the grid environment are
authorized to the client, and then uses its share of the system’s private key to compute
and send a share of proxy certificate to the client, which we called sub-certificate in
the remaining paper. It also uses its verification share to compute a zero-knowledge
proof which will prove the correctness of its sub-certificate.
These sub-certificate and zero-knowledge proofs are then collected by the Globus
host. Then, the host chooses f of them. After verifying the correctness of all of the
proofs of these sub-certificates, it can combine them to form the actual proxy certificate and send it to the client. Afterwards, the client can request the needed resources
to the grid computing system by using this proxy certificate.

Fig. 1. Architecture of intrusion-resilient authorization and authentication service for grid computing environment

232

Y. Guo, J. Ma, and Y. Wang

3 The Details of the Framework
Denote the system’s private key as XAAS and the corresponding public key YAAS,. Denote a client C’s XC and YC. Our scheme starts with a large prime p = 2q+1, where q
is also a large prime, and a generator g for the subgroup Gq= {i2 | i ∈ Z *p } of quadratic residues of Z *p . A collision-free one-way hash function H (x) is also needs to be
made public. Then, our framework can be divided into 3 phase:
Initialization phase: The dealer distribute the system’s private key XAAS ∈ Ζ*q among
all AAS by using Feldman’s (f+1, n) VSS scheme [3] straight forward.
1) Select randomly f elements a1, …., af of Ζ*q . These coefficients define a polynomial of degree t in Ζ*q [X]:

F(X)= XAAS + a1X + a2X2 + …. + af X f
2) Compute X1, …., Xn of Zq and g1, ….,gn of Zp as follows:
Xi = F(i) mod q and gi = g X i mod p
The shares X1, … , Xn must then be distributed secretly to the n authorization and
authentication servers AAS1, . . . , AASn, respectively. The generator g and the elements g1, ….,gn are made public. They must be known by all clients and all AASs.
Each AASi can verifies the share Xi he or she received by using g and gi.
As in Shamir’s secret sharing scheme[4], any subset of f+1 values among X1, …., Xn
allows one to reconstruct F by interpolation, and then to compute the value XAAS =
f +1

F(0). For example, given X i1 , … , X i f +1 , one has XAAS = ∑ bis X is mod q, where
s =1

f +1

bis =

∏

ij
i -i j

mod q .

j =1, j ≠ s s

Authorization Phase: The grid computing system authorizes AASs to authenticate
the clients and issue the corresponding proxy certificates. Each grid resources GRi,
where i = 1, 2, …, l, is associated with an access control table CLi, which is used to
specifying what types of access to this resources of which client are allowed. After
authorization, all GRi’s access control tables are maintained by each AAS.
Registration and Proxy Certificate Generation Phase: When a client C, whose ID
is IDC, wants to apply for some services or execute some tasks, he/she registers at the
Globus host firstly. The client should submit to Globus host his/her password or other
credential and the requested services or tasks. On receiving these information, the
Globus host will then performs the initial validation of the client; if successes, it sends
an authentication and authorization request to a robust subset of AASs (in our case, the
servers of size at least 2f+1, where f is the threshold of the secure secret sharing
scheme we used) on behalf of the client. Each AAS does the following:

An Intrusion-Resilient Authorization and Authentication Framework

233

1) Compute sub-signature of client C’s private key SCi = X CXi mod p;
2) Randomly select r ∈ Ζ*q and compute
u= g r mod p and v= X C r mod p
3) Compute si = H (g, gi, IDC, SCi, u, v) and ti = r + si ⋅ Xi mod q.
4) Based on the identification of the client, each AAS consults its configuration
files to determine what resources in the grid environment are authorized to
the client, and then generate a sub-certificate (SCi, si, ti, C) for client C (denoted as CertCi ), and then send it to the Globus host.
In step 3) and 4), both si and ti are used here to prove the validity of SCi without
revealing Xi. This uses a technique of non-malleable proof proposed by [5].
After receiving CertCi send by Si, the Globus host does following:
1) Compute u ′ = g ti / giSi mod p and v′ = X C ti / SCiSi mod p
2) compute s i′= H (g, gi, IDC, SCi, u′, v′)

If si′ = si, then the client accept the proof and get the sub-certificate CertCi ; else,
Globus host can raise an alarm to the administrator of system.
After receiving and checking f+1 sub-certificates CertCi , …. , CertCi + f +1 from diff +1

ferent f+1 AASs, the Globus host compute SC= ∏ SCis
s =1

f +1

from Si1 , … , Si f +1 and bis =

∏

ij
i - ij

bis

mod p, where bis is obtained

mod q . By this interpolation method, Globus

j =1, j ≠ s s

host can obtain SC= X CX mod p.
Then, a proxy certificate containing the signature SC for client C can be generated
and send to client C by Globus host.
Afterwards, the proxy certificate can be used by the client to access the grid resources he/she needs.

4 Security Analysis
4.1 Correctness and Robustness

By correctness and robustness, we mean that all legal clients can get a correct proxy
certificate if there are no more than f dishonest AASs.
Theorem 1: If there are no more than f dishonest AASs, then all legal clients can get
a correct proxy certificate.
Proof: In our case, we only need to show that Globus host will compute a correct
SC= X CX for legal client C .
From the details of the framework we know that, before Globus host compute and
recover SC, it has received and verified f+1 sub-certificates CertCi , …. , CertCi + f +1

234

Y. Guo, J. Ma, and Y. Wang

from different f+1 AASs. Then by using interpolation method, Globus host can comf +1

pute SC= ∏ SCis
s =1

bis

f +1

f +1

= ∏(X )
s =1

Xi bis
C

Xi
C

= (X )

∑ bis X is
s =1

= X CX .

4.2 Security Against Impersonators Attack

Impersonations means that server AASj impersonate server AASi to send message (SCi,
si, ti, C) to the Globus host.
Theorem 2: In the random oracle model, a dishonest AAS cannot forge, with a non
negligible probability, a valid proof for a valid sub-certificate.
Proof: From the above scheme we know that SCi, si, ti satisfy the following equations:

g ti = g r + si ⋅ X i = g r ⋅ ( g X i ) si = u ⋅ gisi

(4.1)

X C ti = X C r + si ⋅ X i = X C r ⋅ ( X C X i ) si = v ⋅ SCisi

(4.2)

Since g ti and gisi are both in G, by the closure of G under multiplication we know
that Equation (4.1) yields u ∈ G . This means that it exists λ such that u = g λ . So we
have g ti = g λ ⋅ gisi = g λ ⋅ g X i si , which implies: ti = λ + si ⋅ X i . Now Equation (4.2)
becomes:
X C ti = vSCisi ⇔ X C λ + Si ⋅ X i = vSCisi ⇔ X C λ v −1 = ( X C − X i ⋅ SCi ) si
This yields two possible cases:
(1) SCi = X C X i . In this case, the sub-certificate is correct. v = X C λ and for
all si ∈ Z q , the verifier equations trivially hold.
(2)

SCi ≠ X C X i . In this case, we must have
si = log X

C

− Xi

⋅ SCi

X C λ v −1

(4.3)

From equation (4.3), one can see that, if SCi is not a valid sub-certificate, once the
triplet ( SCi , u, v ) is chosen, then there exists a unique si ∈ Z q that satisfies the verifier equations. In the random oracle model, the hash function H is assumed to be perfectly random. Therefore, the probability that H (g, gi, IDC, SCi, u, v) equals si is 1q ,
once (SCi, u, v) fixed.
On the other hand, if the attacker perform an adaptively chosen message attack by
querying an oracle N times, the probability for the attacker to find a triplet (SCi, u, v),
such that H (g, gi, IDC, SCi, u, v) is Psuccess = 1 − (1 − q1 ) N ≈ Nq , for large q and N. Now if
k is the number of bits in the binary representation of q, then Psuccess ≤

N
2k

. Since a com-

putationally bounded server can only try a polynomial number of triplets, then when k
is large, the probability of success, which is Psuccess ≤ 2Nk << 1 , is negligible.

An Intrusion-Resilient Authorization and Authentication Framework

235

4.3 Security Against Secret Compromise

The most serious attack is for an attacker to compromise f AASs and reconstruct the
system’s private key X, and then to issue the certification for any client, whether legal
or illegal. To combat this, f should be chosen to be sufficiently large to make compromising f machines exceedingly difficult.
Arbitrarily setting f to be very large, however, has reliability concerns. In the extreme case, if f = n, then the system has n points of failure—where a proxy certificate
cannot be issued. f must be chosen so that n - f - 1 is sufficiently large to handle node
failures.
Secondly, each machine will, ideally, be running a different operating system with
different versions of software to make compromising a machine more difficult.
4.4 Security Against Denial of Service

Since f machines are necessary to successfully compute a correct proxy certificate for
the legal client and there are n machines in total, if n - f - 1 of them crashes or fails,
the key will not be able to be computed. To prevent attackers from compromising or
flooding n - f - 1 machines, n and f will need to be appropriately chosen to make this
probabilistically low. In the case where machines crash because they are faulty, we
can bound the probability of failure.
4.5 Failure Handling

Consider that each AAS fails—crashes or does not respond—with probability r. We
assume r is independent. The probability that a key cannot be computed is:
pf = r f
That is, p f is the probability that the system is unable to perform useful work; a
state of failure.
Solving for r, we find:

r = p f 1/ f

Obviously, any system will need to set n and f such to maximize r.

5 Discussions and Conclusion
A combination of fairly standard secure multi-party computation algorithm, secret
sharing scheme, zero knowledge proof and traditional authorization protocols was
used to develop an intrusion-resilient framework of authorization and authentication
for grid computing environment, which can provide correct services even in the presence of faulty insiders of AASs. Its security requirements can be shown to theoretically hold if no more than f AASs are compromised, the attacker does not break the
cryptographic algorithms, and the network assumptions are satisfied. But it is obviously that the claim of no more than f AASs are compromised relies on the assumption
that it is substantially harder for an attacker to penetrate several AASs than a single
one. In fact, with enough time and resources, a determined attacker can compromise a
sufficient number of AASs to break the system. To justify this assumption we rely on

236

Y. Guo, J. Ma, and Y. Wang

two complementary approaches: diversity and proactive updates. With diversity, an
attacker has to devise different penetration mechanisms for each server, so that it is
impossible for him/her to work to kill other AASs at once when he/she kills one. Diversity can be achieved by running a different version of our software on each of the
AASs, running on different hardware and operating systems, and putting the different
AASs under the responsibility of different administrator.
Proactive security is the ability to gracefully recover from compromises in such a
way that any past compromises don’t assist a current attacker. Proactive update implies that once every time period (say once an hour) the AASs compute a new sharing
of the same system’s privacy key. Consequently, not only does the attacker have to
penetrate multiple AASs, he/she has to do so within a single time period. Proactive
update is normally implemented by re-sharing the private key in such a way that the
new shares have no relationship to the old shares, and therefore if an attacker compromises some AASs, these AASs are recovered, and then he/she compromises more
AASs, the information he gains isn’t enough to compute the key.
However, due to the organization’s budget and security constraints, the parameters
of the system’s diversity and proactive should be set accordingly.
Finally, it should be noted that, even with above measures, resilience is not absolute in the real world. Our scheme can also be vulnerable to network-based denial-ofservice attack based on flooding, though this attack is not specific to our system, as
current TCP/IP protocols make it difficult to defend against such attacks in any system. Intrusion resilient can be effective only if combined with traditional measures to
avoid and remove vulnerabilities in system components, and with intrusion detection
mechanisms to help respond to attacks before it is too late.

References
1. Hung-Yu Chien, New spproach to authorization and authentication in distributed environments, Communications of the CCISA, vol.9 no.3, pp.63-69, Jun. 2003
2. Mambo, M., Usuda, K., and Okamoto, E., Proxy signatures for delegating signing operation, Proc. 3rd ACM conf. on Computer and Communications Security, 1996.
3. P. Feldman, A Practical Scheme for Non-interactive Verifiable Secret Sharing, Proc. 28th
IEEE Annual Symposium on Foundations of Computer Science, pp. 427-437, Oct. 1987
4. A. Shamir. How to Share a Secret. Communications of the ACM, vol. 22, no. 11, pp. 612–
613, Nov. 1979.
5. Chaum D. and Pedersen. T. Wallet Databases with Observers. In Crypto’92, number 740 in
Lecture Notes in Computer Science, Santa Barbara, CA, Springer-Verlag, 1992, pp. 89–105
6. Yair Frankel, Peter Gemmell, Philip D. MacKenzie, and Moti Yung. Optimal resilience
proactive publickey cryptosystems. In IEEE Symposium on Foundations of Computer Science, pp 384–393, 1997.
7. Yair Frankel, Peter Gemmell, Phillip D MacKenzie, and Moti Yung. Proactive RSA. In
Advanced In Cryptology – Crypto 97, volume 1294 of Lecture Notes in Computer Science,
pp 440–454 Springer-Verlag, 1997.
8. Globus OGSA Home Page. http://www.globus.org/ogsa/
9. Foster I, Kesselman C. The Grid: Blueprint for a new computing infrastructure. San Fransisco: Morgan Kaufmann Publisher, 1999.

