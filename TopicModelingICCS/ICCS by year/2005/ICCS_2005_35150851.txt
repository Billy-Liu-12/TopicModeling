Wiener Indices of Balanced Binary Trees
Sergey Bereg and Hao Wang
Dept. of Computer Science, University of Texas at Dallas, Richardson, TX 75083
{besp, haowz}@utdallas.edu

Abstract. We study a new family of trees for computation of the Wiener
indices. We introduce general tree transformations and derive formulas
for computing the Wiener indices when a tree is modiﬁed. We present
several algorithms to explore the Wiener indices of our family of trees.
The experiments support new conjectures about the Wiener indices.

1

Introduction

Molecules and molecular compounds are often modeled by molecular graphs.
One of the most widely known topological descriptor [6, 10] is the Wiener index
named after chemist Harold Wiener [15]. The Wiener index of a graph G(V, E) is
deﬁned as W (G) = u,v∈V d(u, v), where d(u, v) is the distance between vertices
u and v (minimum number of edges between u and v).
A majority of the chemical applications of the Wiener index deal with chemical compounds that have acyclic organic molecules. The molecular graphs of
these compounds are trees [7], see an example of a chemical compound in Fig. 1.
Therefore most of the prior work on the Wiener indices deals with trees, relating
the structure of various trees to their Wiener indices (asymptotic bounds on the
Wiener indices of certain families of trees, expected Wiener indices of random
trees etc.). For these reasons, we concentrate on the Wiener indices of trees as
well (see Dobrynin et al. [3] for a recent survey).
For trees with bounded degrees of vertices, Jelen and Triesch [11] found a
family of trees such that W (T ) is minimized. Fischermann et al. [4] solved the
same problem independently. They characterized the trees that minimize and
maximize the Wiener index among all trees of a given size and the maximum
vertex degree.
Several papers address the question: What positive integer numbers can be
Wiener indices of graphs of a certain type? The question is answered for general
graphs and bipartite graphs [3]. The question is still open for trees.
Conjecture 1. [Wiener Index Conjecture [5, 9, 12]] Except for some ﬁnite
set, every positive integer is the Wiener index of a tree.
Lepovi´c and Gutman [12] found the Wiener indices up to 1206 by enumerating
all non-isomorphic trees of at most 20 vertices. They conjectured that 159 is the
largest non-Wiener index of a tree. Goldman et al. [5] veriﬁed the conjecture for
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 851–859, 2005.
c Springer-Verlag Berlin Heidelberg 2005

852

S. Bereg and H. Wang

u
9

9

9

21

9

24

9
16
9

v

Fig. 1. Carbon skeleton of 3-Ethyl-2,2,4-trimethylpentane. Its Wiener index is 115
which is W (G) =
u,v∈V d(u, v) (for example, d(u, v) = 4), and W (G) =
n
(e)n
(e)
where
n1 (e) and n2 (e) are the sizes of two trees left after the re1
2
e∈T
moval of e

the Wiener indices up to 104 . Recently Ban et al. [1] found a class of trees whose
Wiener indices cover all numbers up to 108 . Although their algorithm is very
fast, the trees may have vertices of large degrees.
The molecular graphs have bounded degrees. In fact, a molecular graph,
whose vertices represent atoms and edges represent chemical bonds, has maximum vertex degree 4 [14]. In this paper we study a new class of trees that possess
useful properties such as (i) the vertex degrees are bounded, and (ii) the trees are
balanced, and (iii) they admit eﬃcient algorithms for computing Wiener indices.
We deﬁne a k-tree, k = 0, 1, 2, . . . as a rooted binary tree such that (i) every
node of depth less than h − k has exactly two children where h is the height of
the tree, and (ii) a node of depth at least h − k at most two (0, 1 or 2) children.
Let Fk denote the family of all k-trees. Fk , k = 0, 1, 2 . . . is a growing family of
trees since F0 ⊂ F1 ⊂ F2 ⊂ . . .
Let Fk (n) denote the set of k-trees of size n. Let W (Fk ) and W (Fk (n))
denote the set of the Wiener indices of the trees in Fk and Fk (n), respectively.
The family F0 contains the complete binary trees only and W (F0 ) is a sequence
of numbers (deﬁned as a function of the tree height) that grow exponentially.
Therefore the Wiener indices of trees of F0 cannot justify Conjecture 1. We
present eﬃcient algorithms for computing the Wiener indices of Fk (n) for k =
1, 2 and general k. We implemented the algorithms for k = 1 and k = 2. We
found all Wiener indices of W (F1 ) up 7001724 and W (F2 ) up to 30224. Our
experiments allow us to suggest the following.
Conjecture 2. Except for some ﬁnite set, every positive integer is the Wiener
index of a binary tree.

2

Preliminaries

Canﬁeld et al. [2] applied a recursive approach for calculating the Wiener index
of a tree. For a rooted tree T , we denote by l(T ) the sum of the distances from
the root vroot of T to all its vertices, l(T ) = v∈T d(vroot , v).

Wiener Indices of Balanced Binary Trees

853

Theorem 3 (Canfield et al. [2]). Let T be a tree of size n with the root vroot
and let vi , 1 ≤ i ≤ k be the vertices adjacent to vroot . Let Ti , 1 ≤ i ≤ k be the
subtree of T rooted at vi . Let ni be the size of Ti , 1 ≤ i ≤ k. Then
k

[W (Ti ) + (n − ni )l(Ti ) − n2i ]

W (T ) = n(n − 1) +

(1)

i=1
k

l(T ) = n − 1 +

l(Ti ).

(2)

i=1

Wiener [15] discovered the following formula W (G) = e∈T n1 (e)n2 (e) where
n1 (e) and n2 (e) are the sizes of two trees left after the removal of e, see
Fig. 1.

3

Bounds for k-Trees

We derive bounds for k-trees that are useful in further analysis. It is interesting
that, for a ﬁxed k, the diﬀerence between the Wiener indices of k-trees of size n
is O(n2 ) though the Wiener indices themself are bounded by O(n2 log n) (these
bounds are tight!).
Theorem 4. Let T and T be two k-trees of size n. Then
l(T ) ≤ n(k − 1 + log(n + 1)) and W (T ) ≤ n(n − 1)(k − 1 + log(n + 1))
|l(T ) − l(T )| ≤ (2k − 1)n and |W (T ) − W (T )| ≤ 2((2k − 1)n2 + 4k (n + 1)2 ).

4

Tree Operations

In this Section we introduce two operations on general rooted trees and derive
formulas for the Wiener index. Let T be a rooted tree. For a node v of T , we
denote the subtree rooted at v by T (v) and its size by n(v). We consider two
operations on the tree T
• swapping subtrees where two subtrees of T rooted at nodes v and u are
switched, see Fig. 2 (b), and
• joining subtrees where a subtree rooted at v moves to a vertex u, see Fig. 2
(c). Note that this operation applied to a binary tree can produce a non-binary
tree. The resulting tree is binary iﬀ v and u have at most two children together.
We derive formulas for calculating the Wiener index when a tree is modiﬁed.
Theorem 5 (Tree operations). Let u and v be two nodes of T with the same
depth. Let w be the lowest common ancestor of u and v. Let u0 = w, u1 , u2 , . . . , uk
= u be the path between w and u and let v0 = w, v1 , v2 , . . . , vk = v be the path
between w and v. Let ∆ = n(v)−n(u) be the diﬀerence of the sizes of two subtrees
T (v) and T (u).

854

S. Bereg and H. Wang

root

root

root

w

w

w

v1

u1
u3
u
T (u)

u1

v2
v3

u2

T
(a)

v1

u2
u3
v

u

T (v)

T (v)

v2
v3

v2
v3

u2
u3
u

v
T

v1

u1

T (u) ∪ T (v)

T (u)

v
T

(c)

(b)

Fig. 2. Tree operations. (a) Original tree T . (b) Swapping the trees T (u) and T (v). (c)
Joining the trees T (u) and T (v)

I. Let T be the tree obtained by swapping the subtrees T (v) and T (u) in T , see
Fig. 2 (b). Then
k

W (T ) = W (T ) − 2k∆2 + 2∆

(n(vi ) − n(ui )).

(3)

i=2

II. Let T be the tree obtained by joining the subtrees T (v) and T (u) in T , see
Fig. 2 (c). Then
k

W (T ) = W (T ) − 2k · n2 (v) + 2n(v)

(n(vi ) − n(ui )).

(4)

i=1

5

1-Trees

We show that the Wiener indices of 1-trees can be computed eﬃciently. For a
given number n, there are exponentially many 1-trees of size n (there are actually
exponentially many non-isomorphic rooted 1-trees). By Theorem 4 the Wiener
indices are bounded by a polynomial function. We observe the following property
of 1-trees that enables a polynomial time algorithm for computing W (F1 (n)).
Lemma 1. Let T be a 1-tree of size n. The height of T is h = log n .
(i) The value l(T ) is a function of n, denoted l(n), and can be calculated as
follows
(5)
l(n) = h(n + 1) − 2h+1 + 2.
(ii) Let T1 and T2 be two trees obtained by removing the root from T . Let
ni = |Ti |, i = 1, 2. Then n1 + n2 = n − 1 and
W (T ) = W (T1 )+n1 +l(n1 )+W (T2 )+n2 +l(n2 )+l(n1 )n2 +l(n2 )n1 +2n1 n2 . (6)

Wiener Indices of Balanced Binary Trees

855

Lemma 1 provides an eﬃcient way to compute the Wiener indices. We represent a group of 1-trees of size n with the same Wiener index w by just the
pair (w, n). Note that there can be exponentially many 1-trees for the same pair
(w, n). Lemma 1 allows us to create a new group of trees (w, n) from two groups
(wi , ni ), i = 1, 2. Every tree in the group (w, n) is a combination of two trees
from groups (w1 , n1 ) and (w2 , n2 ) respectively.
We compute the set W (F1 (n)) using dynamic programming. We assume that
the sets W (F1 (i)), i < n are computed. We store L, a sorted list of numbers that
are the Wiener indices found so far (initially L is empty). For all n1 = 1, . . . , (n−
1)/2 and all two numbers w1 ∈ W (F1 (n1 )) and w2 ∈ W (F1 (n2 )), n2 = n − n1 −
1, the algorithm does the following. First, it checks whether T , the combination
of two 1-trees T1 and T2 corresponding to the pairs (w1 , n1 ) and (w2 , n2 ), is a
valid 1-tree. We compute the heights hi = log ni , i = 1, 2. If h1 = h2 then
T is a valid 1-tree. If |h1 − h2 | ≥ 2 then T is not a valid 1-tree. Suppose that
|h1 − h2 | = 1. We can assume for simplicity that h1 < h2 . Then T is a valid
1-tree if and only if T1 is a complete binary tree.
If T1 and T2 can be combined, we compute w by formula (6) and check if
w ∈ L in O(log n) time. If w is a new Wiener index, then it is inserted in L. The
sizes of W (F1 (n1 )) and W (F1 (n2 )) are bounded by O(n2 ) by Theorem 4. Thus,
the total time for computing W (F1 (n)) is O(n5 log n).
Theorem 6. The Wiener indices of 1-trees of size at most n can be found in
O(n6 log n) time.
We implemented the above algorithm and run it up to n = 1000. The running
time is 36 hours on Intel processor 2.4 GHZ, 512 MB memory using Microsoft
C++ 6.0. As we show later the Wiener indices of W (F1 (n)), n > 1000 are
greater than 7001724. It turns out that there are still many integer numbers
close to 7001724 that are not in W (F1 ), for example, the numbers from the
interval [6988865,7016907] are not in W (F1 ).
In what follows we explore the Wiener indices W (F1 (n)) for larger n (more
than 1000) based on the minimum and maximum Wiener indices in W (F1 (n)).
We ﬁnd shapes of 1-trees that have the smallest/largest Wiener indices in
W (F1 (n)). We discuss it in the next section.

6

Interval Method

Since it is not feasible to compute the Wiener indices W (F1 (n)) for large n,
we want to compute intervals [Wmin (n), Wmax (n)] for large n where Wmin (n)
and Wmax (n) are the minimum and maximum Wiener indices of W (F1 (n)),
respectively. First, we derive formulas for Wmin (n) and Wmax (n). We need some
notations. Let v be a vertex of a 1-tree T . Let vl and vr denote its left child (if
any) and its right child (if any), respectively. If v does not have a left/right child
we use a dummy vertex vnil instead. We assume that n(vnil ) = 0.

856

S. Bereg and H. Wang

6.1

Minimum Wiener Indices

Let m be a positive integer and let h(m) = log(m + 1) . A pair of positive
integers (m1 , m2 ) is a partition of m if m1 + m2 = m. We call a partition
(m1 , m2 ) of m complete if one of the numbers mi (i = 1, 2) is 2j − 1 where
j ∈ {h(m)−1, h(m)}. It can be veriﬁed that the number m3−i lies in the interval
[2h(m)−1 − 1, 2h(m) − 1]. Also, m has a unique complete partition (note that both
m1 = 2h(m)−1 − 1 and m2 = 2h(m) − 1 are possible for some m). Let µ(m) be
the smallest mi , i = 1, 2 of the complete partition of m.
Let v be a vertex of a 1-tree T . We call v an complete vertex if (n(vl ), n(vr ))
is the complete partition of n(v) − 1. Note that, if v is complete, then at least
one of the subtrees T (vl ) or T (vr ) is complete. Let
F (n1 , n2 ) = l(n1 ) + l(n2 ) + l(n1 )n2 + l(n2 )n1 + 2n1 n2 + n1 + n2 .

(7)

Theorem 7. A 1-tree T of n vertices has the minimum Wiener index Wmin (n)
if and only if every vertex of T is complete. The sequence Wmin (n) satisﬁes the
following recurrence:
Wmin (1) = 0, Wmin (2) = 1,
Wmin (n) = Wmin (n1 ) + Wmin (n2 ) + F (n1 , n2 ) if n ≥ 3,
where n1 = µ(n − 1), n2 = n − n1 − 1.
6.2

Maximum Wiener Indices

We call an internal node v of a binary tree balanced if |n(vl ) − n(vr )| ≤ 1. The
following theorem characterizes 1-tree maximizing the Wiener index.
Theorem 8. A 1-tree T of n vertices has the maximum Wiener index Wmax (n)
if and only if every vertex of T is balanced. The sequence Wmax (n) satisﬁes the
following recurrence:
Wmax (1) = 0, Wmax (2) = 1,
Wmax (n) = Wmax (n1 ) + Wmax (n2 ) + F (n1 , n2 ),
n−1
where n1 =
, n2 = n − n1 − 1 if n ≥ 3.
2
Theorem 9. The functions l(n), Wmin (n) and Wmax (n) are monotonically increasing.
6.3

Algorithm and Experiments

We implemented a simple algorithm GAP for ﬁnding maximal intervals not
covered by the intervals In , n ≥ 1. The algorithm is based on the monotonicity
of Wmin (n), Wmax (n) and has linear running time.
We run it for n ≤ 14075 (the value of Wmax (n) exceeds the maximum integer
value stored in 32 bits, unsigned long integer type). The largest number not

Wiener Indices of Balanced Binary Trees

857

covered by intervals is 705344327. Using another property of the Wiener indices
we can ﬁnd even larger numbers not covered by intervals. The Wiener index of a
tree with even/odd number of vertices is odd/even, respectively (see for example
[5] p. 228). Therefore the intervals In for even/odd n can cover only odd/even
integer numbers. We run our algorithm for even n and odd n separately. The
largest gap we found is the interval [722813799,722814221] of odd numbers which
sandwiched between I8472 and I8474 . We believe that (i) the intervals In for all
even n ≥ 8474 cover all odd integers larger than 722814221, and (ii) the intervals
In for all odd n ≥ 8474 cover all even integers larger than 722814221.
It is an interesting open question whether there is only a ﬁnite number of
integers not covered by W (F1 ). We were unable to answer it. Since we found
large integer numbers not in W (F1 ), we decided to explore 2-trees that are less
computationally attractive.

7

Algorithm for k-Trees

We assume that k is a constant. Let W (Fk (n)) be the set of the Wiener indices of k-trees of size n. We present an algorithm for computing W (Fk (n)),
k ≥ 2. Here we do not have the property that l(T ) is a function of n. In order
to be able to generate many k-trees (for large n) we want to store minimum
amount of information that allows us to compute Wiener indices recursively.
Let h(T ) denote the height of a tree T . For a k-tree T , we deﬁne hc(T ) as
the largest number h such that the vertices of T of height at most h form
a complete binary tree. We group k-trees with the same W (T ), l(T ), h(T ) and
hc(T ). We store a list Lk (n) of groups (w, l, h, hc) sorted in the lexicographical
order.
We compute Lk (n) using dynamic programming. We assume that Lk (i), i <
n are computed. We store elements of Lk (n) in lexicographical order. For all
n1 = 1, . . . , (n − 1)/2 and all two tuples t1 = (w1 , l1 , h1 , hc1 ) ∈ Lk (n1 ) and
t2 = (w2 , l2 , h2 , hc2 ) ∈ Lk (n2 ), the algorithm does the following. First, it checks
whether T , the combination of two 1-trees T1 and T2 corresponding to t1 and t2 ,
is a valid k-tree. We compute the heights h(T ) = 1 + max(h1 , h2 ) and hc(T ) =
1 + min(hc1 , hc2 ). The tree T is a valid k-tree if and only if h(T ) ≤ hc(T ) + k.
If T1 and T2 can be combined, we compute w by Equation (1). We check if
t = (w, l, h, hc) ∈ Lk (n) in O(log n) time. If t is a new element it is inserted
in Lk (n). The number of the Wiener indices of k-trees of size n is bounded by
O(n2 ) by Theorem 4. The heights h and hc of k-trees of size n are bounded by
O(k + log n) = O(log n). The number of l-values of trees of Fk (n) is bounded
by O(n) by Theorem 4. Thus, the sizes of Lk (n1 ) and Lk (n2 ) are bounded by
O(n3 ). Therefore the total time for computing Lk (n) is O(n6 log n).
Theorem 10. The Wiener indices of k-trees of size at most n can be found in
O(n7 log n) time.

858

8

S. Bereg and H. Wang

2-Trees

For 2-trees we can store just three numbers to represent a group: w, the Wiener
index, and b, the number of vertices at the bottom level (maximum depth vertices). If we remove b vertices at the bottom level from a tree T , we obtain a
1-tree T . By lemma 1, l(T ) can be computed using the number of vertices of
T . One can derive formulas for computing l(T ), h(T ), hc(T ). In this way we can
speed up the algorithm for generating L2 (n).
We implemented the above algorithm and computed the Wiener indices of
2-trees of size up to 90. The integer numbers between 8864 and 30224 are all
/ W (F2 ) is 8863. We believe
covered by W (F2 ). The largest integer in [1, 30224] ∈
that all numbers larger than 8863 are covered by W (F2 ).
Conjecture 11. The set of Wiener indices W (F2 ) contains all integer numbers
greater than 8863.
We compute the density of the Wiener indices δ : R → [0, 1] deﬁned as
follows. For a number x ∈ R, the value δ(x) is N/x where N is the number of
the Wiener indices of W (F2 ) less than x. To compute the density function we
use a boolean array B[ ]. The boolean value B[i] indicates existence of 2-tree T
such that W (T ) = i. The density is plotted in Fig. 3. The plot can be viewed as
a supporting argument for Conjecture 11.
Wiener index density
1
0.8
0.6
0.4
0.2
0

0

0.5

1

1.5

2

2.5

3

Fig. 3. Density of W (F2 ) for n ≤ 90. The x-values are given in scale 10000. The y-axis
is the density

References
1. A. Ban, S. Bereg, and N. Mustafa. On a conjecture of Wiener indices in computational chemistry. Algorithmica, 40(2):99–118, 2004.
2. E. R. Canﬁeld, R. W. Robinson, and D. H. Rouvray. Determination of the Wiener
molecular branching index for the general tree. J. Computational Chemistry, 6:598–
609, 1985.
3. A. A. Dobrynin, R. Entringer, and I. Gutman. Wiener index of trees: Theory and
applications. Acta Applicandae Mathematicae, 66:211–249, 2001.

Wiener Indices of Balanced Binary Trees

859

4. M. Fischermann, A. Hoﬀmann, L. S. Dieter Rautenbach, and L. Volkmann. Wiener
index versus maximum degree in trees. Discrete Applied Mathematics, 122(13):127–137, 2002.
5. D. Goldman, S. Istrail, G. L. A., and Piccolboni. Algorithmic strategies in combinatorial chemistry. In Proc. 11th ACM-SIAM Sympos. Discrete Algorithms, pp.
275–284, 2000.
6. R. Gozalbes, J. Doucet, and F. Derouin. Application of topological descriptors in
QSAR and drug design: history and new trends. Current Drug Targets: Infectious
Disorders, 2:93–102, 2002.
7. I. Gutman and O. E. Polansky. Mathematical concepts in organic chemistry.
Springer-Verlag, Berlin, 1986.
8. I. Gutman and J. J. Potgieter. Wiener index and intermolecular forces. J. Serb.
Checm. Soc., 62:185–192, 1997.
9. I. Gutman, Y.-N. Yeh, and J. C. Chen. On the sum of all distances in graphs.
Tamkang J. Math., 25, 1994.
10. O. Ivanciuc. QSAR comparative study of Wiener descriptor for weighted molecular
graphs. J. Chem. Inf. Compuc. Sci., 40:1412–1422, 2000.
11. F. Jelen and E. Triesch. Superdominance order and distance of trees with bounded
maximum degree. Discrete Applied Mathematics, 125(2-3):225–233, 2003.
12. M. Lepovi´c and I. Gutman. A collective property of trees and chemical trees. J.
Chem. Inf. Comput. Sci., 38:823–826, 1998.
13. D. H. Rouvray. Should we have designs on topological indices?, pp. 159–177.
Elsevier, Amsterdam, 1983.
14. N. Trinajstic. Chemical Graph Theory. CRC Press, 1992.
15. H. Wiener. Structural determination of paraﬃn boiling points. J. Amer. Chem.
Soc., 69:17–20, 1947.

