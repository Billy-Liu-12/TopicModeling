Graph Representation of the Nested Software Structure
Leszek Kotulski
Institute of Comp. Sci., Jagiellonian University,
Kraków, Poland
kotulski@ii.uj.ed.pl

Abstract. The use of the UML notation for software specification leads usually
to lots of diagrams showing different aspects and components of the software
system in a several view. Complex components are constructed by composing
in parallel some elementary components and as a result the overall architecture
of the system is described as a hierarchical composition of primitive
components, which at the execution time may be deployed on distributed
environment. The task of specifying such a system quickly becomes
unmanageable without the help of some structuring tools. This paper discusses
how the UML package’s nested structure can be maintained and visualized with
the help of a graph transformation mechanism based on the edNLC class of
grammar.

1 Introduction
The ULM [12] is a recent approach to strengthen the effort of designing an objectoriented modeling language where all main issues of system analysis and design are
taken into account. The UML provides deployment diagrams to show a system’s
network topology and software components that live on the network nodes. For the
description of the objects replication and migration, remote interactions and dynamics
network topologies, which are important issues in distributed object systems these
techniques promise support, however, seems to be insufficient. Modeling distributed
systems by distributed graph transformation, a powerful and flexible description, is
obtained by applying graph transformation to network structures [10]. Distributed
graphs are, in this case, structured with two abstraction levels: the network and the
local level. The main drawback of above proposition is lack of support any
structuralization mechanisms, such for example as the UML packages. In the paper
we show that a graph transformation mechanism is also suitable for the visualization
nested software structures. The formal background of this proposition are the ULM
notation and the Rosenberg’s edNLC class of grammars [5], developed next by
Flasiński [2,3] and author [4,7,8].

2 Nested Diagrams
Deployment diagrams, used in the UML, show the configuration of run time
processing elements (nodes) and software components (processes and objects) that
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 1008 – 1011, 2005.
© Springer-Verlag Berlin Heidelberg 2005

Graph Representation of the Nested Software Structure

1009

execute on them. Nodes are physical processing resources, and are drawn as a 3D
rectangle. Each node contains software components. The software components on
different nodes can communicate across the
physical connections between the nodes.
A component unit represents a modular,
deployable, and replaceable part of a system
that encapsulates an implementation and
exposes a set of interfaces. Some components
can be represented by the UML packages that
provide a tool for organizing the products of
analysis, design, and coding. Let us consider a
management system based on a Data
Warehouse concept, which stores of data
Fig. 1.
obtained form an ERP systems (see Fig. 1). However, the
ERP system consists from many cooperating subsystems
(such as finance, sales, manufactures and human
resource packages – as in fig. 2), because of that someone
may want to see direct associations among these subsystems
and the Data Warehouse repository. This simple example
shows, that exist a necessity of introduction more than only
two levels of abstraction (representing hardware or software
components). That means that the method of the presentation
allocated software components should create several
abstraction levels (analogically as in the object oriented
programming). We describe here the component and package
concept using the graph transformation notation. Like a group
Fig. 2.
[6] the package can be specified as a graph which visualize
connections among its components. As a result, the overall architecture of the system
is described as a hierarchical composition of primitive components.
Considering visual languages both import and export interface concepts are
supported [10, 11, 13]. Component diagrams in the UML knows only export
interfaces, but Botch, Rumbaing and Jacobson [1] suggest that in a system consisting
from a few dozen components the UML notation should directly specify imports
using packages and <<import>> stereotypes. Moreover, in distributed systems the
motivation of the import interface visualization is not only a possibility of formal
checking the consistency of the modeled system but also the formal specification of
stub instances at the implementation level.
To simplify an example we reduce components interconnection to the following:
DW calls each of the ERP components to take theirs monthly summary, Finance
calls appropriately Human resource and Sales for receiving daily reports and
Stock (to evaluate securities). In such a case, the UML diagram presented in fig. 2
can be expressed as the attributed graph presented in fig. 3. It describes two levels of
a component’s configuration: the top level – representing the ERP as a final
component and the internal level – representing the ERP internal structure; each
component appearing inside internal structure can also has its own nesting
representation; so it can create the hierarchical (tree) structure of components (where
leafs are object instances).

1010

L. Kotulski

The presented solution is based on the node label
controlled graph grammars [2,3,4,5,7,8]. Graph nodes
used for describing of a distributed system can be
labeled as follows: P - for a package component, E –
for an export interface, I – for an import interface
(stub), O – for an object instance implementing
component, N – for a computing node representation.
All additional information about the graph node can
be described by its attributes. Graphically we expose
only component’s name. The only correct labeling
pattern1 is included is the following set of triples
(E,b,P), (E,b,O), (P,c,I), (O,b,G), (O,c,I), (N,d,G),
(N,d,O), (I,l,E), (N,n,N). Edge labels b, c, d, l and n
are appropriately abbreviation for belonging, calls,
Fig. 3.
deploy, linked and node interconnection.
The presented transformation from the UML to the graph notation seems to be
simple and intuitive. On the other hand, when size both package and allocation graphs
grows to hundreds or thousands nodes we should also consider a computational
complexity of the considered solution. Let us notice that the membership problem i.e
the parsing of the graph in order to designate the proper sequence of productions has
the critical complexity for many graph grammars (among others for graph
transformation model based on graph morphism [10,11]). For this reason we suggest
using of the node label controlled class of graph grammars. The introduced in [7,8]
aedNLC graph grammar (as equivalent to ETPL(k) graph grammar [3]) allows one to
solve parsing, membership and a new graph generation problems with O(n2)
computational complexity.
The correctness of graph transformation is forced by a graph transformation rules
called productions described how the left hand production graph be replaced by the
right hand one with the embedding transformation defining how edges coming
to/from the left hand side graph be connected with the right hand one. For example if
we would like to express that some service can
be offered by an object we use the following
production with the embedding transformation
{(O,(P,true),op,out), (E,(P,true), pe, in) }), COPY_REST }
5 = {((op,out, 1),
interpreted as follows every edge labeled by “op” and coming from the removed
node in the visualization graph ought to be replaced by the edge (labeled by op)
connecting the node of the graph of the righ –hand side of the production and labeled
by “O” with the node p of the rest graph and labeled by “P” and the edge (labeled by
pe) connecting the node of the graph of the righ –hand side of the production and
labeled by “E” with the node p of the rest graph and labeled by “P”. Note that edges
mentioned in the embedding transformation are the auxiliary ones and are not
expressed in the graph presented in fig. 3. The full description of the set of the
productions used for creation of the visualization graph is presented in the technical
raport [8].
1

Term labeling pattern for edge (v,µ,w) means triple (δ(v) ,µ,δ(w)), where δ(v) and δ(w)
returns labels of v, w node indices appropriately.

Graph Representation of the Nested Software Structure

1011

3 Conclusions
In the previous chapter it is shown that the graph transformation can be useful
formalism for controlling the allocation process. The deployed software component can
be split onto a few abstraction levels using packages. It improve a quality of a
distributed system presentation; now we can show either a nested structure of a
component or an allocation graph in a flat form (where any component is either in their
top or internal level of specification; two different, non nested components can be,
however, described at the different abstraction level [8)]. Moreover, as the package is
specified by the attributed graph, so it can formally check the correctness of its
component deployment and the consistency of the generated software (i.e. assure that
for each request a proper service is associated). As it shown in [7,8] the aedNLC
grammars allows one to divide such an allocation graph onto a few distributed
subgraphs and control their modification in a parallel way. The last property is
important not only from the computational complexity point of view but also creates the
practical possibility of a parallel work of several systems administrators.

References
1. G. Booch, J. Rumbaugh, I. Jacobson: The Unified Modeling Language – User Guide.
Addison Wesley Longman, Inc. 1999.
2. Flasiński M.: Characteristic of edNLC-graph Grammars for Syntactic Pattern Recognition.
Computer Vision, Graphics and Image Processing, 1989, vol.42, pp. 1-21.
3. Flasiński M.: Power Properties of NCL Graph Grammars with a Polynomial Membership
Problem. Theoretical Computer Science, 1998, vol. 201, pp. 189-231.
4. Flasiński M., Kotulski L.: On the Use of Graph Grammars for the Control of a Distributed
Software Allocation. The Computer Journal, 1992, vol. 35, pp. A167-A175.
5. Janssens D., Rozenberg G., Verraedt R.: On Sequential and Parallel Node-rewriting Graph
Grammars. Computer Graphics and Image Processing, 1982, vol. 18, pp. 279-304.
6. Kotulski L., Jurek J., Moczurad W.: Object-Oriented Programming in the Large Using
Group Concept. Computer Systems and Software Engineering - 6th Annual European
Conference, Hague 1992, pp. 510-514.
7. Kotulski L.: Model systemu wspomagania generacji oprogramowania współbieżnego w
środowisku rozproszonym za pomocą gramatyk grafowych. Postdoctorals Lecturing
Qualifications. Jagiellonian University Press, ISBN 83-233-1391-1, 2000.
8. Kotulski L.: Parallel Allocation of the Distributed Software Using Node Label Controlled
Graph Grammars. Jagiellonian University, Inst. of Comp. Sci., Preprint no. 2003/006
9. Kotulski L.: Nested Software Structure generated by aedNLC graph grammar – technical
report. Jagiellonian University, Inst. of Comp. Sci., Preprint no. 2005/003
http://www.ii.uj.edu.pl/preprint/kotulski03
10. Taentzer G., Fischer I., Koch M., Vole V.: Visual design of distributed graph
transformation. In Handbook of Graph Grammars and Computing by Graph Transformation, Volume 3: Concurrency, Parallelism, and Distribution. World Scientific, 1999.
11. Taentzer G.: A Visual Modeling Framework for Distributed Object Computing. In Formal
methods for open object-based distributed systems, Kluwer Academic Publishers, 2002
12. OMG-Unified Modeling Language, v1,5. www.rational.com
13. Zhang D., Zhang K., Cao J.: A context-sensitive Graph Grammar Formalism for the Specification of Visual Languages. The Computer Journal, 2001, vol 44, no. 4, pp186-200.

