On the Empirical Eﬃciency of the Vertex
Contraction Algorithm for Detecting Negative
Cost Cycles in Networks
K. Subramani and D. Desovski
LDCSEE, West Virginia University,
Morgantown, WV
{ksmani, desovski}@csee.wvu.edu

Abstract. In this paper, we present a comprehensive empirical analysis
of the Vertex Contraction (VC) algorithm for the problem of checking
whether a directed graph with positive and negative costs on its edges
has a negative cost cycle (NCCD). VC is a greedy algorithm, ﬁrst presented in [SK05], for NCCD and is the only known greedy strategy for
this problem. In [SK05] we compared a naive implementation of VC with
the “standard” Bellman-Ford (BF) algorithm for the same problem. We
observed that our algorithm performed an order of magnitude better
than the BF algorithm on a range of randomly generated inputs, thereby
conclusively demonstrating the superiority of our approach. This paper
continues the study of contrasting greedy and dynamic programming
approaches, by comparing VC with a number of sophisticated implementations of the BF algorithm.

1

Introduction

This paper contrasts the performance of the Vertex Contraction (VC) algorithm
with existing algorithms for the Negative Cost Cycle detection (NCCD) problem.
NCCD is deﬁned as follows: Given a directed graph G =< V, E, c >, where V =
{v1 , v2 , v3 , . . . , vn }, |V| = n, E = {eij : vi ❀ vj }, |E| = m, and a cost function
c : E → Z, is there a negative cost cycle in G? There are no restrictions on
the edge costs, i.e., they can be arbitrary integers as opposed to small integers,
which is a requirement of scaling algorithms [Gol95]. We note that the problem,
as speciﬁed, is a decision problem, in that all that is asked of an algorithm is to
detect the presence of a negative cycle.
Some of the important application areas of NCCD include Image Segmentation, Temporal Constraint Solving, scheduling and System Veriﬁcation [SK05].
Algorithms for negative cost cycle detection can be broadly classiﬁed as comparison based or scaling based. Comparison based algorithms in turn are based on
heuristics to eﬃciently solve the linear programming formulation of the shortest
path problem as a min-cost ﬂow problem [CG96, CGR96]. The VC algorithm is
a comparison based algorithm which is diﬀerent from all existing approaches to
NCCD in that it is a purely local, greedy approach.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 180–187, 2005.
c Springer-Verlag Berlin Heidelberg 2005

On the Empirical Eﬃciency of the Vertex Contraction Algorithm

181

Our work in this paper is motivated primarily by the need for a simple algorithm, with good performance characteristics. Whereas the naive BellmanFord approach for NCCD is admittedly simple, it suﬀers from signiﬁcant performance drawbacks that are not explained using asymptotic analysis [SK05].
On the other hand, the techniques used to enhance the performance of BF as
outlined in [Gol95, CG96] and [AMO93], suﬀer from the drawbacks of implementational diﬃculty and application speciﬁcity. We are therefore interested in an
easy-to-implement comparison-based algorithm which can be modiﬁed in simple
ways to provide reasonable performance on a wide variety of graphs.

2

The Vertex Contraction Algorithm

The vertex contraction procedure consists of eliminating a vertex from the input
graph, by merging all its incoming and outgoing edges. Consider a vertex vi
with incoming edge eki and outgoing edge eij . When vi is contracted, eki and
eij are deleted and a single edge ekj is added with cost cki + cij . This process
is repeated for each pair of incoming and outgoing edges. Consider the edge ekj
that is created by the contraction; it falls into one of the following categories:
(a) It is the ﬁrst edge between vertex vk and vj . In this case, nothing more is
to be done.
(b) An edge ekj already existed between vk and vj , prior to the contraction of
vi . In this case, if ckj < ckj , keep the new edge and delete the previously
existing edge (since it is redundant); otherwise delete the new edge (since it
is redundant).
Algorithm (2.1) is a formal description of our technique. The correctness and
analysis of our technique can be found in [SK05].

Function Negative-Cost-Cycle(G, n)
1: for (i = 1 to n) do
2:
Vertex-Contract(G, vi )
3: end for
4: return(false)

Algorithm 2.1. Negative cost cycle detection
2.1

The Cruel Adversary

The simple Vertex Contraction algorithm always chooses the next vertex to
be contracted in a well-deﬁned order; it is well-known that such a selection is
susceptible to attack by a malicious adversary. For instance, an adversary could
provide the graph in Figure (1) as input.
The above graph is sparse and has exactly 2 · (n − 1) edges. Observe that
if vertex vn is contracted ﬁrst, the resultant graph is the complete graph on

182

K. Subramani and D. Desovski

Function Vertex-Contract(G, vi )
1: for (k = 1 to n) do
2:
for (j = 1 to n) do
3:
if (eki and eij exist) then
4:
{Let ckj denote the cost of the existing edge between vk and vj ; note that
ckj = ∞ if there does not exist such an edge}
5:
Create edge ekj with cost ckj = cki + cij
6:
if (j = k) then
7:
{A cycle has been detected}
8:
if (cjj < 0) then
9:
return(true)
10:
else
11:
Delete edge ejj
12:
end if
13:
else
14:
if (ckj < ckj ) then
15:
Replace existing edge ekj with ekj in G
16:
else
17:
Delete edge ekj
18:
end if
19:
end if
20:
end if
21:
end for
22:
Delete edges eki from G.
23: end for
24: for (j = 1 to n) do
25:
Delete edge eij from G, if it exists.
26: end for
27: Eliminate vertex vi from G.

Algorithm 2.2. Vertex Contraction

v1

v2

v3

vn-1

vn

Fig. 1. Sparse graph that becomes dense after vertex contraction

n − 1 vertices and therefore dense. We call this graph the cruel adversary; in
our experiments, we made it a point to test the performance of all algorithms
on this input. We could however choose the vertex to be contracted at random,

On the Empirical Eﬃciency of the Vertex Contraction Algorithm

183

Function Random-Negative-Cost-Cycle(G, n)
1: Generate a random permutation Π of the set {1, 2, 3 . . . , n}.
2: for (i = 1 to n) do
3:
Vertex-Contract(G, vΠ(i) )
4: end for
5: return(false)

Algorithm 2.3. Random negative cost cycle detection algorithm
without aﬀecting the correctness of the algorithm. We have implemented the
Vertex Contraction algorithm with three diﬀerent strategies based on how the
vertices to be contracted are chosen:
(i) the vertex to be contracted is chosen in a well-deﬁned order (VC),
(ii) the vertex to be contracted is the vertex with the smallest degree product (the degree product is calculated by multiplying the number of edges
coming into a vertex vi with the number of edges going out of the vertex);
this is accomplished by using a heap (HVC),
(iii) the vertex to be contracted is chosen at random (RVC). Algorithm (2.3)
is a formal description of the random vertex contraction algorithm.
The experimental results on Cruel Adversary graphs have been relegated to
the journal version of this paper. The extended version also contains a detailed
description of the related work in the literature.

3

Implementation

Our experiments are classiﬁed into various categories, based on the following
criteria:
(i) Type of input graph - Sparse with many small negative cycles (Type A),
Sparse with a few long negative cycles (Type B), Dense with many small
negative cycles (Type C), Dense with a few long negative cycles (Type D),
the Cruel Adversary (Type E).
(ii) Type of Algorithm - Simple Vertex Contraction (VC), Vertex Contraction using a heap (HVC), Random Vertex Contraction (RVC), BellmanFord using a FIFO queue (BFFI), Bellman-Ford using a predecessor array
(BFPR), Bellman-Ford using both a FIFO queue and a predecessor array
(BFFP), Bellman-Ford using subtree disassembly (BFCT), and GoldbergRadzik (GORC).
(iii) Type of Graph Data Structure - Simple Pointer or Advanced Pointers.
3.1

Implementation Details

Two diﬀerent types of graph data structures were used for the experiments viz.,
a simple pointer structure and an advanced pointer structure. Both structures
require linear space.

184

K. Subramani and D. Desovski

The simple pointer structure is also known as the adjacency-list representation [CLR92]. This representation makes use of an array of n lists, one for each
of the n vertices of the graph. For each vertex vi , we store the in-degree din
i
(the number of edges going into the vertex), the out-degree dout
(the number of
i
edges going out of the vertex), and a singly linked list of edges going out from
the vertex along with their weights. The linked lists of each vertex are sorted
based on the destination vertex of the edge. Assuming that we are contracting
vertex vi , the vertex contraction operation for the simple pointer structure is
performed as follows.
The time required to contract vertex vi by the simple pointer implementation
(v ,v )∈E out
out
is: O(m + din
+ xx i
dx ). In the worst case when the graph is
i · di
2
in
=
O(n),
and the time complexity of the vertex
dense m = O(n ), di = dout
i
contraction operation is O(n2 ).
In order to decrease the amount of time taken by the simple pointer structure,
we consider the advanced pointer structure. For each vertex vi , we store the inout
degree din
i , the out-degree di , and two doubly linked lists representing the
edges. Each vertex has an out list, for the edges going out of the vertex, and an
in list, for the edges going into the vertex. The out lists of each vertex are sorted
based on the destination vertex of the edge. Assuming that we are contracting
vertex vi , the vertex contraction operation for advanced pointers is performed as
follows. A variation of the advanced pointer structure in which the in-lists and
out-lists are not sorted, is discussed in [MN99].

Table 1. Time required to perform vertex contraction using simple pointers
Step
Time to Execute
1) Find edges with destination vertex vi : (vx , vi )
O(m)
2) For every edge (vx , vi ) found:
O(din
i )
2-1) Remove the edge from the adjacency list of vertex vx
O(1)
2-2) Merge vi ’s list with vx ’s list by adding those edges
which are not present in vx ’s list and updating those
O(dout
+ dout
x )
i
who are already there
2-3) If a negative cost edge (vx , vx ) is created, the algorithm
O(1)
terminates with the negative cycle being detected

Table 2. Time required to perform vertex contraction using advanced pointers
Step
Time to Execute
1) For every edge (vx , vi ) in vi ’s in list
O(din
i )
1-1) Merge vi ’s out list with vx ’s out list
by adding those edges which are not present in vx ’s out list O(dout
+ dout
x )
i
and updating those who are already there, and also
updating the in lists of the vertices appropriately
1-2) If a negative cost edge (vx , vx ) is created, the algorithm
O(1)
terminates with the negative cycle being detected

On the Empirical Eﬃciency of the Vertex Contraction Algorithm

185

The time required to contract vertex vi by the advanced pointer implemen(v ,v )∈E out
out
tation is: O(din
+ xx i
dx ). In the event that there exists some
i · di
≤ c · dout
constant c such that, for all vx , dout
x
i , then this time bound simpliﬁes
out
in
out
·
d
).
In
the
worst
case
when
d
= O(n) and hence the time
to: O(din
i
i
i = di
complexity of the vertex contraction operation is O(n2 ).
3.2

Implementation Remarks

Note that
(i) For each experimental suite, we have provided only the graphical picture in
this paper; the numerical tables are provided in the journal version of this
paper. Our goal is to show that minor modiﬁcations to the VC framework
result in signiﬁcant performance enhancements, making its performance
comparable to that of more sophisticated algorithms. Depending on the
type of graph under consideration, a particular modiﬁcation of VC may
not be run.
(ii) All performance graphs have been drawn according to the following scale:
(a) On the x-axis, we represent the logarithm to the base 2, of the number
of vertices.
(b) On the y-axis, we represent the logarithm to the base 2, of the running
time in seconds.
3.3

Experimental Setup for Sparse Graphs

Sparse graphs were generated using the generator developed by Andrew Goldberg [CG96], which generates multiple edges between two vertices. Sparse graphs
are deﬁned as graphs with o(n · log n) edges. We generated each graph 5 times
using 5 diﬀerent seeds for the random number generator. The times recorded
are the medians over 5 executions of each implementation. (We used the median
statistic based on related work in the literature; we have also maintained the
worst-case times of each run. The timing proﬁles of the worst-case times and
medians were very similar.)
Graphs of Type A and B were tested, with a number of vertices ranging from
500 to 10, 000 in increments of 500.
n
vertices.
We deﬁne a small negative cycle as one consisting of at most 100
n
We deﬁne a long negative cycle as one consisting of Ω( 2 ) vertices. The number
of long negative cycles in the input graphs was set to 4.
3.4

Experimental Results for Sparse Graphs

It is easy to see from Figure (2) and Figure (3) that GORC outperforms all other
implementations; this is true for both types of sparse graphs that were tested.
BFCT and BFFP are comparable to GORC on most instances. AVC, and AHVC
are far superior to BFFI and BFPR; they also outperform HVC and RVC on
most instances. Bellman Ford using a FIFO queue (BFFI) and Bellman Ford

186

K. Subramani and D. Desovski

1024.000000

1024.000000

running time in seconds

running time in seconds

VC
HVC
RVC
AVC
32.000000 AHVC
BFFI
BFPR
BFFP
BFCT
GORC
1.000000

0.031250

0.000977

0.000031

VC
HVC
RVC
AVC
32.000000 AHVC
BFFI
BFPR
BFFP
BFCT
GORC
1.000000

0.031250

0.000977

0.000031

0.000001
256

512

1024

2048

4096

8192

0.000001
256

16384

512

1024

number of nodes

2048

4096

8192

16384

number of nodes

Fig. 2. Implementation execution times re- Fig. 3. Implementation execution times required to solve the Negative Cost Cycle de- quired to solve the Negative Cost Cycle detection problem for Type A graphs
tection problem for Type B graphs

using a predecessor array (BFPR) have been omitted from the graph, since the
times for these two algorithms are much worse than any of the other algorithms
tested.
3.5

Experimental Setup for Dense Graphs

Dense graphs were generated using the generator developed by Andrew Goldberg
[CG96], which generates multiple edges between two vertices. Dense graphs are
2
deﬁned as those graphs with Ω( n8 ) edges. We generated each graph 5 times
using 5 diﬀerent seeds for the random number generator. The times recorded are
the medians over 5 executions of each implementation.
Graphs of Type C and D were tested, with a number of vertices ranging from
500 to 10, 000 in increments of 500, with small negative cycles and long negative
cycles deﬁned as in Section §3.3. As mentioned before, HVC and AHVC were

1024.000000

1024.000000
VC
RVC
AVC
BFFP
BFCT
32.000000
GORC

1.000000

running time in seconds

running time in seconds

VC
RVC
AVC
BFFP
BFCT
32.000000
GORC

0.031250

0.000977

0.000031

0.000001
256

1.000000

0.031250

0.000977

0.000031

512

1024

2048
number of nodes

4096

8192

16384

0.000001
256

512

1024

2048
number of nodes

4096

8192

16384

Fig. 4. Implementation execution times re- Fig. 5. Implementation execution times required to solve the Negative Cost Cycle de- quired to solve the Negative Cost Cycle detection problem for Type C graphs
tection problem for Type D graphs

On the Empirical Eﬃciency of the Vertex Contraction Algorithm

187

not run on dense graphs, since we found that there was no gain in terms of
performance for the additional complexity in our test cases.
3.6

Experimental Results for Dense Graphs

It is easy to see from Figure (4) and Figure (5), that GORC outperforms all
other implementations; this is true for both the types of dense graphs that were
tested. BFCT performs slightly better than BFFP, although, both are comparable to GORC. AVC performs the best among the Vertex Contraction algorithms;
although AVC, VC, and RVC are all far superior to BFFI and BFPR. Bellman
Ford using a FIFO queue (BFFI) and Bellman Ford using a predecessor array (BFPR) have been omitted from the graph, since the times for these two
algorithms are much worse than any of the other algorithms tested.

References
[AMO93] R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. Network Flows: Theory,
Algorithms and Applications. Prentice-Hall, 1993.
[CG96]
Boris V. Cherkassky and Andrew V. Goldberg. Negative-cycle detection
algorithms. In Josep D´ıaz and Maria Serna, editors, Algorithms—ESA ’96,
Fourth Annual European Symposium, volume 1136 of Lecture Notes in Computer Science, pages 349–363, Barcelona, Spain, 1996. Springer.
[CGR96] Boris V. Cherkassky, Andrew V. Goldberg, and T. Radzik. Shortest paths
algorithms: Theory and experimental evaluation. Mathematical Programming, 73:129–174, 1996.
[CLR92] T. H. Cormen, C. E. Leiserson, and R. L. Rivest. Introduction to Algorithms.
MIT Press and McGraw-Hill Book Company, Boston, Massachusetts, 2nd
edition, 1992.
[Gol95]
Andrew V. Goldberg. Scaling algorithms for the shortest paths problem.
SIAM Journal on Computing, 24(3):494–504, June 1995.
[MN99]
K. Mehlhorn and St. N¨
aher. The LEDA Platform of Combinatorial and
Geometric Computing. Cambridge University Press, Cambridge, 1999.
[SK05]
K. Subramani and L. Kovalchick. A greedy strategy for detecting negative cost cycles in networks. Future Generation Computer Systems, 2005.
Accepted, In Press.

