Coupled Fusion Simulation Using the Common
Component Architecture
Wael R. Elwasif1 , Donald B. Batchelor2 , David E. Bernholdt1 , Lee A. Berry2 ,
Ed F. D’Azevedo1 , Wayne A. Houlberg2 , E.F. Jaeger2 , James A. Kohl1 ,
and Shuhui Li3
1

Computer Science and Mathematics Division
2
Fusion Energy Division
Oak Ridge National Laboratory, Oak Ridge, TN 37831 USA
{elwasifwr, batchelordb, bernholdtde, berryla, dazevedoef,
houlbergwa, jaegeref, and kohlja}@ornl.gov
3
Department of Electrical Engineering & Computer Science, Texas A&M
University–Kingsville, MSC 192, Kingsville, TX 78363 USA
Shuhui.Li@tamuk.edu

Abstract. The physics of magnetically-confined fusion plasmas involves many
different processes with multiple time and length scales that cover many orders
of magnitude. As the capability of large parallel computers continues to grow, the
goal of an integrated self-consistent simulation of all of the relevant physics draws
closer. However, advances in computer science, physics formulations, and algorithms are also needed to achieve this goal. In this paper, we present an overview
of an on-going project which is exploring these issues in the context of integrated
simulation of radio frequency (RF) heating and transport physics as an initial step
toward whole-device modeling. We present our experience in using the common
componment architecture (CCA) as the underlying framework for the integration
of the different physics modules. This work illustrates the viability of using high
performance component technology in a complex simulation environment.

1

Introduction

The processes involved in modelling magnetically-confined fusion plasmas include
electromagnetic-wave plasma interactions, transport (both collisional and turbulent)
particle drift orbit effects, magnetohydrodynamics, atomic physics, and plasma-wall
interactions. Research groups have developed codes to model these processes individually, or in a very loosely coupled fashion (generally without self-consistency). However
scientific needs for planned systems, such as the International Thermonuclear Experimental Reactor (ITER) project1 , require the capability to model entire devices in an
integrated, self-consistent fashion. This coupling requires that the output of one simulation process provides (time varying) boundary conditions or inputs to the other physical

1

Research sponsored by the Laboratory Directed Research and Development Program of Oak
Ridge National Laboratory (ORNL), managed by UT-Battelle, LLC for the U. S. Department
of Energy under Contract No. DE-AC05-00OR22725.
http://www.iter.org/

V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 372–379, 2005.
c Springer-Verlag Berlin Heidelberg 2005

Coupled Fusion Simulation Using the Common Component Architecture

373

process model simulations. A complete, integrated whole device model (WDM) simulation would encompass time scales ranging from nanoseconds to tens of minutes and
length scales from the subatomic to the size of the reactor vessel itself (∼6 meters
tall).
The growing capability of large parallel computers continually increases the feasibility of this type of integrated simulation, at least in terms of the raw computational
power required. However, significant challenges still must be overcome to make largescale coupled simulations, such as WDM, a practical reality. Advances must be made
in computer science, algorithms and in the physics formulations themselves [1]. For
example, while a well-tested physical model will typically provide satisfactory results
in its original (uncoupled or loosely coupled) context, the behavior may become more
complex and harder to understand when additional physical processes are coupled in
because assumptions under which the original model was developed may break down.
Likewise, the algorithms and mathematical approaches used in the individual models
must often change to accommodate the new coupled interactions. For example, when
coupling two simulations where the natural time step differs by a factor of a million, it
is often not feasible to actually run a million steps of the fast model between successive steps of the slower one, as a naive integration approach might attempt. Alternative
algorithms and solution strategies are required to preserve the essential physics while
accelerating the coupled solution to a more practical level. In addition, the integration of codes developed by disparate groups raises software-related issues ranging from
reconciling software architectures and facilitating software-based collaboration, to the
detailed mechanics of integrating software that may have been developed using different parallel programming models, written in different incompatible languages, and use
different data structures.
In order to examine these issues in more detail and lay the groundwork for largerscale efforts to develop a comprehensive integration fusion simulation capability [1], we
have undertaken a modest “prototype” integrated fusion simulation effort. Our project
focuses initially on the coupling of just two physical processes: RF heating of the
plasma, which occurs on the nanosecond time scale, with transport within the plasma,
which occurs on the millisecond time scale. We have developed an “evolutionary preconditioning” approach to address the disparity in time scales between these two models, and have used the Common Component Architecture (CCA)2 as an efficient and
flexible framework in which to integrate the independent simulation codes. In this paper, we present a high-level overview of our ongoing effort, emphasizing the computer
science and mathematical aspects of the project.
This paper is organized as follows: in Section 2 we present, briefly, a description of
the RF heating and transport processes and how they are simulated; Section 3 describes
the evolutionary preconditioning approach used to numerically facilitate the integration; and, Section 4 introduces the Common Component Architecture and its utility for
this work. Then in Section 5 we describe our prototype integrated simulation application and share our experiences developing it. We present our Conclusions and plans for
Future Work in Section 6.
2

http://www.cca-forum.org

374

2

W.R. Elwasif et al.

Plasma Physics: RF Heating and Transport

Plasma transport, typically particle convection; current and particle diffusion; and thermal conduction, combined with the boundary conditions and sources for the fluxes, control the evolution of macroscopic plasma parameters. The transport coefficients used to
model the fluxes can be highly non-linear and, in some cases, non-local in space and
time. As a result, the time and space dependence of the temperatures, densities, and
magnetic fields that comprise the desired output can be quite complex. Time scales
for these processes are in the range of hundreds of milliseconds to tens of seconds for
present and planned experiments.
The transport of particles, heat, and current (or equivalently magnetic flux) are each
described by a partial differential equation. For example, heat transport for a particular
plasma species i is described by an equation of the form
→
∂(ni Ti ) →
+ ∇ ·Ki ∇ (ni Ti ) = Si
∂t

(1)

where ni is the density of species i, Ti is the temperature, Ki is the thermal conductivity, and Si is the external source/sink of energy. For simplicity, convective terms
and the interchange of energy between species due to friction and thermal equilibration
have been omitted. Although the plasma is either 2-D or 3-D in space, systems with
good confinement have magnetic field lines that form closed, nested surfaces. Because
transport along field lines is much faster than that across field likes, we average the
transport equations along magnetic field lines and solves for transport across these surfaces. Standard conservative finite different techniques and operator splitting are used
for solving the coupled systems. Evolving the transport equations is much less computationally intensive than solving for the interactions of the plasma with RF waves.
Radio frequency (RF) power in the ion cyclotron frequency range (∼50-200 MHz
at 10s of MW) is a principle means of plasma heating. Plasma parameters may be
assumed constant for the tens of nanoseconds time scale for variation of the RF electromagnetic fields. Thus the waves reach steady state on the electromagnetic time scale
before plasma parameters change significantly. Thus wave properties, for example energy deposition, may be calculated with stationary plasma parameters and subsequently
used to advance the transport.
For many problems of interest, plasma responses to the applied RF power may
be linearized in RF fields. Under these conditions, the All-Orders Spectral Algorithm
(AORSA) solves for the wave fields needed for the plasma simulation [2] This code
accurately treats the physics of waves that interact with arbitrary harmonics of the ion
cyclotron frequency and with perpendicular wavelengths that are smaller than ion gyroradii in the strong equilibrium magnetic field. However, resolving the spatial dependence of the dominant wave-plasma interactions in 2-D requires the solution of from
10,000 to over 100,000 dense linear equations and can use over 10,000 processor hours.
As a result, time-dependent plasma simulations were prohibitively expensive as hundreds of AORSA solutions might be required to resolve a few plasma energy confinement times. To address this issue, we have developed an “evolutionary preconditioning”
approach to accelerate the coupled simulation.

Coupled Fusion Simulation Using the Common Component Architecture

3

375

Mathematics: Evolutionary Preconditioning

One of the most time consuming computational kernels in the AORSA code is the solution of a large dense complex linear system by LU factorization in parallel using
ScaLAPACK [3]. The matrix is highly non-symmetric and the spectrum has large components in the imaginary plane. This presents a significant challenge to most Krylov
iterative solvers such as GMRES [4] and an effective preconditioner is required.
The key to implementing a time dependent simulation was the observation that the
plasma parameters (determined by the transport simulation) are changing on a longer
time scale, so we need results from a sequence of closely related RF calculations rather
than independent solutions to a large number of independent simulations. Thus we use
an “evolutionary” approach, using the exact LU decomposition for a set of plasma conditions at one time to precondition the AORSA linear equations that are determined by
the parameters for a subsequent time step. Reusing the LU factorization from previous
time steps as a preconditioner for an iterative solver offers the possiblity of reducing the
O(N 3 ) cost for factorization to O(N 2 ) cost in triangular solves and matrix multiplies.
When the plasma parameters have evolved sufficiently that the iterative method is no
longer effective, a new direct solution will be recomputed. Hopefully, the need for such
direct factorization would be limited to a sufficient small number of intermediate points
to make the overall simulation practical.
This approach has been tested and proven effective over a reasonable range of
plasma parameters. For “sensitive” parameters including electron density and magnetic
field strengths, parameters could be varied ±20% and still converge within 100 itera-

120
electron temp (te0=2000eV)
ion temp (ti0=2000eV)
electron density (xn0=1e19)
100

iterations

80

60

40

20

0
−100

−80

−60

−40

−20

0
% change

20

40

60

80

100

Fig. 1. Sensitivity of convergence of evolutionary preconditioning scheme to changes in various
simulation parameters. Tests were done for a 32×32 mode problem, with a reduced matrix size
(N ) of 1965 complex equations

376

W.R. Elwasif et al.

tions. While for “non-sensitive” parameters such as electron and ion temperatures and
toroidal mode number of RF antenna, a variation of ±50% was possible while maintaining good convergence. Fig. 1 illustrates the convergence characteristics of several
simulation parameters. These results suggest that a significant number of transport time
steps can be taken before a new preconditioner must be generated. We are currently
working on incorporating this approach into the integrated simulation.

4

Computer Science: The Common Component Architecture

The computer science and software engineering aspects of building a coupled simulation are often at least as complex as the physics and mathematics involved. Issues
range from the software (and social) engineering of getting disparate groups of software developers to collaborate around the integrated simulation to the details of reconciling different software architectures, programming styles, parallel programming
models, programming languages, data structures, etc. In this work, we look to ideas
of component-based software engineering (CBSE), and in particular the realization of
those ideas in the Common Component Architecture (CCA) [5, 6] to provide a software environment in which to integrate the coupled simulation and facilitate the social
aspects of collaborative development.
CBSE is, fundamentally, a means to help manage the complexity inherent in modern large-scale software systems. CBSE treats applications as assemblies of software
components that interact with each other only through well-defined interfaces (or ports
in CCA terminology) within a particular execution environment, or framework. Components are units of software functionality, and are a logical means of encapsulating
knowledge from one scientific domain (or sub-domain) for use by those in others,
thereby facilitating group and multidisciplinary interactions. The glue that binds the
components together is a set of common, agreed-upon interfaces, or ports. Multiple
component implementations conforming to the same external interface standard should
be interoperable, while providing flexibility to accommodate different aspects such as
algorithms, performance characteristics, and coding styles. At the same time, the use
of common interfaces facilitates the reuse of components across multiple applications.
The Common Component Architecture distinguishes between provides ports, which
are implemented by a component, and uses ports, where a component makes calls on
a port provided by another component. The framework is responsible for providing an
environment in which applications can be assembled from components (by connecting matching uses and provides ports) while insuring that internals of the components
remain opaque to each other.
The CCA is designed specifically for the needs of parallel, scientific highperformance computing (HPC) in response to limitations of other, more widely used
component approaches (see [5]). The general-purpose design of the CCA is intended
for use in a wide range of scientific domains, and CCA-based simulations are under
development in numerous fields, e.g. [7]. The CCA’s emphasis on supporting HPC scientific computing has led to a number of important characteristics being incorporated
into its design, and into tools that implement the CCA environment.

Coupled Fusion Simulation Using the Common Component Architecture

377

The CCA’s uses/provides design pattern allows components in the same process
address space to be invoked directly, without intervention by the framework, and with
data passed by reference if desired, preserving high performance for components which
are local to each other [8]. In parallel computing, interactions among components within
the same process are handled by the CCA’s port-based mechanisms, taking advantage of
the “direct connect” approach just mentioned. Interactions across parallel instances of a
component are up to the component’s developer, and carry no CCA-imposed overheads.
Language interoperability is an important feature of many component models because it allows components to be opaque with respect to implementation language as
well as other implementation details. In the CCA, the Scientific Interface Definition
Language (SIDL) [9] provides a means to express the interfaces between components
independent of their implementation language. SIDL works in conjunction with the Babel language interoperability tool3 [9], which currently supports C, C++, Fortran 77,
Fortran 90/95, Python, and Java.
Finally, the CCA employs a minimalist design philosophy to simplify the task of
incorporating existing software into the CCA environment. The amount of extra code
needed to acclimate a software module to the CCA environment can be as little as one
extra (typically short) method, and several additional calls that manage ports provisioning and use. Experience has shown that componentization of existing software in the
CCA environment is straightforward when starting from well-organized code [10].

5

Prototype Integrated Fusion Simulation

Our prototype integrated simulation was designed with the idea it should be extensible
to integrate other physical processes in addition to the RF heating and transport simulations. In addition, we envisioned a simple, evolutionary migration path from the existing
physics software to the componentized integrated simulation. The resulting design includes four types of components: a driver, which orchestrates the coupled simulation;
the “physics” components, which encapsulate the original standalone simulation codes,
an in-memory “plasma state” component, which holds the data exchanged by the different physics components, and “transformers” which adapt data from the form stored in
the plasma state and the forms required by the various physics components. Fig. 2 shows
the visual representation of the assembled application provided by the Ccaffeine CCA
framework 4 .
While the physics components and the transformers are all written in Fortran 90,
the driver is written in the Python scripting language to facilitate flexible and rapid
experimentation with different driver algorithms and parameters, and the plasma state
component is implemented in C++.
The original standalone physics components read and write files directly for their
inputs and outputs, and the initial version of the coupled application retains this characteristic (temporarily), using same file formats to transfer data between the plasma state
3
4

http://www.llnl.gov/CASC/components/babel.html
http://www.cca-forum.org/ccafe/

378

W.R. Elwasif et al.

Fig. 2. Plasma simulation components

and the physics components. This approach was taken in order to minimize changes to
the physics codes before verifying their correct behavior within the coupled application.
We expect to quickly evolve the interfaces to allow for direct data exchange between
components as the following step in the evolution of the port interfaces.
Data exchange between different physics module poses another challenge related
to the format of the data. The output of one component may need to be re-gridded or
transformed into a different coordinate system for another component. Most standalone
physics codes in this community have their own set of transformation routines to perform these functions on inputs derived from other codes. In our initial prototype, we
decided that the plasma state component should store data in the format in which it
was computed. We use transformer components (extracted from the original standalone
physics simulations) to implement a “receiver makes right” approach to insure components using the data get it in the format they need. While this approach does not address
the n2 problem of data transformation, we plan on using this prototype to gain a better
understanding of the data transform issues in fusion simulations and develop general
purpose reusable components that address this issue, drawing on existing efforts such
as [11, 12].
The design of the interfaces that define the boundaries between the various components is crucial for the long-term flexibility and extensibility of the model. In our
prototype, we opted for an evolutionary approach that facilitates rapid code integration,
while allowing for future refinement as we gain better understanding of the overall application. A decision was made to adopt an initial design that promoted a loose component coupling, where methods that make up port interfaces are kept at a decidedly high
level. This decision allows prototyping to proceed with little or no change to the mature
physics applications that underly the main physics components. An added benefit of
this approach has been the reduction in the amount of testing that had to be performed
to validate the correctness of the overall application.

Coupled Fusion Simulation Using the Common Component Architecture

6

379

Conclusions and Future Work

In this paper, we presented the physical, mathematical, and computer science issues
involved in the design and implementation of a coupled fusion simulation using the
Common Component Architecture. The prototype we developed couples together several physics modules, along with the necessary data and driver components. Our experience has demonstrated the viability of using CCA as the underlying foundation for
such integration efforts. As we continue, our primary focus is on gaining a better understanding of the detailed needs of large-scale coupled fusion simulations and evolving
our prototype to meet them. This includes, for example, expanding the capabilities of
the prototype by introducing application controlled checkpointing and archival storage
into the plasma state component. Another aspect of our future plan involves the refinement of the interfaces, with the ultimate goal of helping to develop interfaces that can
be agreed to and used across the larger fusion community; this would be an important
step towards coupled simulations integrating more physical processes.

References
1. Dahlburg, J., et al.: Fusion simulation project: Integrated simulation and optimization of
fusion systems. J. Fusion Energy 20 (2001) 135–196
2. Jaeger, E., et al.: All-orders spectral calculation of radio-frequency heating in twodimensional toroidal plasmas. Physics of Plasmas 8 (2001) 1573–1583
3. Blackford, L.S., et al.: ScaLAPACK Users’ Guide. SIAM (1997) Online version at
http://www.netlib.org/scalapack/slug/index.html.
4. Saad, Y., Schultz, M.: GMRES: A generalized minimal residual algorithm for solving nonsymmetric linear systems. SIAM J. Sci. Statit. Comput. 7 (1986) 856–869
5. Bernholdt, D.E., et al.: A component architecture for high-performance scientific computing
(2004) submitted to Intl. J. High-Perf. Computing Appl.
6. Armstrong, R., et al.: Toward a Common Component Architecture for high-performance
scientific computing. In: Proceedings of the Eighth IEEE International Symposium on High
Performance Distributed Computing. (1999)
7. McInnes, L.C., et al.: Parallel pde-based simulations using the common component architecture. In Bruaset, A.M., Bjørstad, P., Tveito, A., eds.: Numerical Solution of PDEs on Parallel
Computers. Springer-Verlag (2005) invited chapter, accepted.
8. Bernholdt, D.E., Elwasif, W.R., Kohl, J.A., Epperly, T.G.W.: A component architecture for
high-performance computing. In: Proceedings of the Workshop on Performance Optimization via High-Level Languages and Libraries (POHLL-02). (2002)
9. Dahlgren, T., Epperly, T., Kumfert, G.: Babel User’s Guide. CASC, Lawrence Livermore
National Laboratory. (2004) http://www.llnl.gov/CASC/components/babel.html.
10. Norris, B., et al.: Parallel components for PDEs and optimization: Some issues and experiences. Parallel Computing 28 (2002) 1811–1831
11. Bertrand, F., Bramley, R., Damevski, K.B., Kohl, J.A., Bernholdt, D.E., Larson, J.W., Sussman, A.: Data redistribution and remote method invocation in parallel component architectures. In: Proceedings of the 19th International Parallel and Distributed Processing Symposium: IPDPS 2005. (2005) submitted.
12. Glimm, J., Brown, D., Freitag, L.: Terascale Simulation Tools and Technologies (TSTT)
Center. http://www.tstt-scidac.org (2001)

