RTI Execution Environment Using Open Grid
Service Architecture
Ki-Young Choi, Tae-Dong Lee, and Chang-Sung Jeong
School of Electrical Engineering in Korea University,
1-5ka, Anam-Dong, Sungbuk-Ku, Seoul 136-713, Korea
{2xx195, lyadlove}@snoopy.korea.ac.kr
csjeong@charlie.korea.ac.kr

Abstract. HLA(High Level Architecture) has been developed to promote interoperability and reusability within the modeling and simulation
community. RTI(Run Time Infrastructure) is a software implementation
of HLA which is composed of three components: libRTI, FedExec, and
RTIExec. However, the previous RTI has an unfriendly execution environment with static and manual resource allocation and execution. In the
paper, we present a RTI execution environment using OGSA(Open Grid
Service Architecture) which addresses the problems, so called RTI-G.
It supports easy-to-useness, transparency and performance by providing
users with dynamic resource allocation and automatic execution. Moreover, it provides an unified view of RTI and Grid services by integrating
them as web services on OGSA.

1

Introduction

Running a large-scale distributed simulation may need a large amount of computing resource residing in geographically diﬀerent locations. HLA(High Level
Architecture)[1] provides application developers with a powerful framework for
reuse and interoperability of distributed simulation. However, RTI(Run Time Infrastructure), the implementation of HLA, was not designed to support software
applications that need to integrate instruments, displays, computational and information resources managed by diverse organizations. Moreover, the existing
RTI(Run Time Infrastructure) has an unfriendly execution environment with
static and manual resource allocation and execution. Therefore, the execution
of RTI was a painful manual process. Recently, Grid technology has been introduced to address the resource allocation and execution problems in distributed
virtual organizations. In the paper, we present a RTI execution environment
using OGSA(Open Grid Service Architecture)[2], so called RTI-G, which supports an easy-to-use, transparent execution RTI environment while achieving
This work has been supported by KIPA-Information Technology Research Center,
University research program by Ministry of Information & Communication, and
Brain Korea 21 projects in 2005.
Corresponding author.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3516, pp. 866–869, 2005.
c Springer-Verlag Berlin Heidelberg 2005

RTI Execution Environment Using Open Grid Service Architecture

867

high performance by providing users with dynamic resource allocation and automatic execution using various services such as MDS, GRAM, and GridFTP in
Globus toolkit 3(GT3)[3] implemented based on OGSA. MDS(Metacomputing
Directory Service) provides a standard mechanism for publishing and discovering
resource status and conﬁguration information, and GRAM(Globus Resource Allocation Manager) executes the executables in the allocated resource. GridFTP
is used to transfer I/O ﬁles and executables into the remote resources.
In section 2, we describe the design of RTI-G based on OGSA, and in section 3, the experimental result. In section 4, we give a conclusion.

2

Design of RTI-G

RTI-G is a grid-enabled implementation of RTI. That is, using services in GT3
based on OGSA, each service of RTI-G is designed to provide automatic and dynamic execution environment. The architecture of RTI-G consists of two layers:
RTI service layer and Grid layer. In this section, we describe about each layers
respectively more in detail.
2.1

RTI Service Layer

RTI layer is composed of three services: libRTI-G, FedExec-G, RTIExec-G. RTI
software can be executed on a stand alone workstation or executed over an arbitrarily complex network. RTIExec-G manages the creation and destruction of
federation. Each federation is characterized by a single and global FedExec-G,
which manages federates joining and resigning the federation. libRTI-G provides RTI service interface to federate developers. The whole simulation in
HLA is accomplished through the interaction among libRTI-G, RTIExec-G, and
FedExec-G.
OGSA integrates key Grid technologies with Web services mechanisms to
create a distributed system framework based on OGSI(Open Grid Services Infrastructure). Each RTI service is deﬁned as a grid service using WSDL(Web
Service Description Language) in OGSA to be eﬃciently incorporated in the
Grid environment, and hence to be accessible by standard Grid clients.
Using WSDL, a grid service is deﬁned about how a client interacts with
its service instance. That is, the Grid service description is embodied in the
serviceType of the instance, along with its associated serviceTypes, portTypes,
serviceDataDescriptions, messages, and types deﬁnitions. Therefore, in order
to be compatible with the grid services, each service in RTI layer should be
speciﬁed in WSDL. There are two methods for describing the service of RTI
layer in WSDL. The ﬁrst is to write the service in WSDL directly, which is
the most versatile method, providing the total control over the description of
service PortType. However, it is not user-friendly because WSDL is a rather
verbose language. The second is to generate WSDL from an interface language.
For example, we can generate WSDL automatically from a Java interface or
an IDL interface, which is the easiest method, but not versatile, because very
complicated interfaces are not always converted correctly to WSDL. Since our

868

K.-Y. Choi, T.-D. Lee, and C.-S. Jeong

RTI is implemented using C++ language, we choose the ﬁrst method to easily
convert our RTI in C++ into WSDL.
We deploy the services in RTI service layer onto GT3 container using GWSDL
and WSDD(Web services Deployment descriptor) so that they can be used identically as various other grid services deﬁned on OGSA, thus providing an uniﬁed
environment of RTI and Grid services. Using the service browser, we can invoke
RTI service, and create a service instance as follows: First, user request a service by sending its GSH(Grid Service Handle) to the RTI service factory, which
creates the instance. A GSH is a stable name for a Grid service, but does not
allow client to actually communicate with the Grid service. RTI service factory
maps GSH to GSR(Grid service Reference), a WSDL document which describes
how a client communicate with the Grid service.
2.2

Grid Layer

Grid layer comprises several services such as MDS, GRAM, and GridFTP implemented in GT3. MDS is used to allocate the resource with high performance
by monitoring resource status and conﬁguration information, and GRAM to execute the RTI service in the allocated resource. GridFTP is used to transfer the
RTI service executables into the remote resources.

3

Experiments

For the evaluation of RTI-G, we execute Nexio, a networked shooting game
on RTI-G and RTI respectively, and compare their performance. In Nexio, two
players can play shooting game, and communicate through services in RTI. For
each case, we measure the data transfer rate between players. The data size of
each object in the game is 10Kbytes, and with the advancement of each stage,
the number of objects is increased by 100. In the ﬁrst case, player 1 requests the
join into a federation, and then RTIExec and FedExec are created subsequently
on the server speciﬁed by player 1. Then, player 2 in diﬀerent host joins into
the federation as in ﬁgure 1(a). In the second case, player 1 requests the join
into a federation, and then RTIExec and FedExec are created in the server
allocated by RTI service factory after accessing MDS and selecting the one with
the best performance as in ﬁgure 1(b). RtiExec service is created as RTIservice
instance, and makes FedExec service is generated through fork operation on the
allocated server. After that, player 2 joins into the federation, and they exchange
information about objects in the game.
We used each client machines with same speciﬁcation to reduce side eﬀects
according to diﬀerent computing power of each machine. All client host has
850MHZ CPU, 256MB memory, 512MB of swap, running under the Linux OS.
There are three servers with diﬀerent specs as shown in ﬁgure 1(c). In the second
case, the best server is selected using MDS by RTI service factory. As we see in
ﬁgure 1(d) which shows the data transfer rate vs total object size, RTI-G has
the better performance than RTI.

RTI Execution Environment Using Open Grid Service Architecture

869

MDS

GRIS
FedExec

Host B
(Player 2)

Server A

Host B
(Player 2)

Server A

GRIS

FedExec

RtiExec

RtiExec

Host A
(Player 1)

Server B

Host A
(Player 1)

Server B

GRIS

(a)

(b)

Server C

Machine
Name
Host A
Host B

Machine
Name
Server A
Server B
Server C

Server C

4500 (ms)

CPU
MHz

Total
Memory
(MB)

Swap
Memory
(MB)

OS

850

256

512

Linux 2.4

Ⅲ

850

256

512

Linux 2.4

Model
Name

CPU
MHz

Total
Memory
(MB)

Swap
Memory
(MB)

OS

1700

512

1024

Linux 2.4

1000

1500

256

512

Linux 2.4

500

1500

512

512

Linux 2.4

0

Model
Name
Pentium

Ⅲ

Pentium

Pentium

Ⅳ

Pentium

Ⅳ

Pentium

Ⅳ

4000
3500
3000
2500

(c)

RTI-G
RTI

2000
1500

100

200

300

400

500

(objects)

(d)

Fig. 1. (a)The first case using RTI, (b)The second case using RTI-G, (c) Resource
performance, (d) Comparison of data transfer rate on RTI and RTI-G

4

Conclusion

In the paper, we have presented RTI-G which supports an easy-to-use, transparent execution RTI environment while achieving high performance by providing
users with dynamic resource allocation and automatic execution using various
services in GT3. The speciﬁcation of RTI-G in GWSDL and the deployment of
RTI-G services in RTI service layer onto GT3 container provide an integrated
uniﬁed environment of RTI and Grid services, thus supporting easy-to-use, transparency, and performance. Also, we have described the experimental result for
RTI-G by comparing it with RTI. As a future work, we are designing a RTI portal
for the eﬃcient execution and performance monitoring of RTI with application
to distributed war game simulation.

References
1. IEEE Standard for Modeling and Simulation,”High Level Architecture (HLA) Federate Interface Specification,” IEEE Std 1516.1-2000 54.
2. D.Talia, ”The Open Grid Services Architecture: where the grid meets the Web,”
Internet Computing, IEEE , Volume: 6 , Issue: 6, Nov.-Dec., pp.67-71, 2002.
3. I. Foster, C. Kesselman, ”Globus: A Metacomputing Infrastructure Toolkit, Intl J.
Supercomputer Applications,” 11(2), pp. 115-128, 1997.

