A Service Oriented Implementation of Distributed Status
Monitoring and Fault Diagnosis Systems
Lei Wang1, Peiyu Li2, Zhaohui Wu1, and Shangjian Chen1
1

College of Computer Science, Zhejiang University,
Hangzhou, P .R.China, 310027
{alwaysbeing, wzh, ipipip}@cs.zju.edu.cn
2
College of Mechanical and Energy Engineering, Zhejiang University,
Hangzhou, P .R.China, 310027
lipeiyu@zju.edu.cn

Abstract. The service-oriented architecture (SOA) can greatly improve the
collaboration of devices in a distributed environment. With this architecture,
human can be liberated from the burdensome configuration and management of
distributed systems, especially when the nodes of the systems are dynamically
changed. In this paper, we present a method to implement service-oriented
distributed systems in industry. As a case study, we present a service-oriented
Status Monitoring and Fault Diagnosis Systems (SMFDS) for large equipment.
Our work is based on the UPnP (Universal Plug and Play) technology. Through
abstracting the interfaces of devices and providing service middleware in an
independent thread or process, the SOA can be easily implemented on an
existing system with the least modifications. This characteristic is very useful
when upgrading an existing system, for cost and risk consideration.

1 Introduction
The increase in amount of computing devices and the diversity of them will enhance
the complexity to configure and utilize them, which is becoming an urgent issue. The
traditional computer-centered model cannot solve this problem. Human beings need
to be liberated from the burdensome work of devices management and maintenance.
An emerging trend in distributed application development is that of a SOA. It is
defined as [1]: “SOA takes the existing software components residing on the network
and allows them to be published, invoked and discovered by each other. SOA allows
a software programmer to model programming problems in terms of services offered
by components to anyone, anywhere over the network. In other words, any
application residing anywhere on any computer system would be able to interact with
any service anywhere over the network.” This architecture regards an application as a
federation of services, where a service represents a logical concept such as a printer or
chat-room service. Services are provided and used by components and they are
discovered dynamically and used according to a mutual agreed contract between
providers and users. With this scheme, the interoperability of a distributed system can
be greatly improved, and the devices in the system will be more autonomous. This
new approach makes it possible to reduce the configuration and management efforts
and is considered to be one of the solutions of human-centered computing.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 568 – 575, 2005.
© Springer-Verlag Berlin Heidelberg 2005

A Service Oriented Implementation of Distributed SMFDS

569

In this paper, we focus on the implementation of SOA distributed systems in
industrial environments. As a case study, we will present how to implement a SMFDS
for large equipment. SMFDS is a kind of data stream centered distributed system,
which is representative in actual industrial applications. Our work concentrates on
implement the service-oriented model based on existing systems. The remainder of
paper is structured as follows: Section 2 introduces the SOC base on UPnP. Section 3
describes the traditional implementation of SMFDS. Section 4 presents our method to
develop the service-oriented SMFDS. Finally, we conclude our paper and describe a
program of further work in section 5.

2 SOA on UPnP
SOA can be implemented in many ways. Four common implementation technologies
are CORBA [2], JINI [3], Web Services [4] and UPnP [5]. Since these
implementation technologies provide the service-oriented architecture for up-level
applications and are independent of any particular operating system, they are often
called service middleware. As UPnP needs small footprint software components on
devices, it is quite applicable to resource-constrained embedded systems. In this
paper, we choose UPnP to implement the status monitoring and fault diagnosis
system.
UPnP technology is a distributed, open networking architecture that employs
TCP/IP and other Internet technologies to enable seamless proximity networking, in
addition to control and data transfer among networked devices in the home, office,
and public spaces. It is independent of any particular operating system, programming
language, or physical medium. It is designed to support zero-configuration,
“invisible” networking, and automatic discovery for a breadth of device categories
from a wide range of vendors.
The basic building blocks of an UPnP network are devices, services and control
points. An UPnP device is a container of services and nested devices. Different
categories of UPnP devices will be associated with different sets of services and
embedded devices. A service is the smallest unit of control in an UPnP network. A
service exposes actions and models its state with state variables. A service in an UPnP
device consists of a state table, a control server and an event server. The state table
models the state of the service through state variables and updates them when the
state changes. The control server receives action requests, executes them, updates the
state table and returns responses. The event server publishes events to interested
subscribers anytime the state of the service changes. A control point in an UPnP
network is a controller capable of discovering and controlling other devices. After
discovery, a control point could retrieve service descriptions for interesting services
and invoke actions to control the service. It can also subscribe to a service’s event
source. Anytime the state of the service changes, the event server will send an event
to the control point.

570

L. Wang et al.

3 Traditional Implementation of SMFDS
Large equipment, such as water pumps and dynamotors, are widely used in industrial
environments. This equipment is so large and heavy that they have to be assembled
and fixed in workshops. Usually, this equipment keeps on working day and night and
makes a very important role in industrial manufacture. If they fail to work, the
production will be blocked and the safety of production may even be threatened. To
avoiding the economic loss caused by equipment failures, it is needed to continuously
monitor the status of the pivotal equipment, detect their abnormality, locate the faults
and take measures to prevent failures. This is the aim to develop SMFDS.
A SMFDS usually works as a distributed system. As shown in Fig.1, it usually
consists of sensors, data collectors, monitoring computers and a data storage server.
The sensors collect equipment status signals, such as librations signals, temperatures,
and pressures, and send them to a data collector, which performs the A/D conversion
and corresponding digital signal processing. The processed data is then packed and
sent to the monitoring computers and the data storage server. Since the distance
between sensors and the data collector is limited, the collector is generally fixed near
the monitored equipment. If there is a great deal of equipment in a workshop, multiple
data collectors are required.
The monitoring computers and data storage server are located in a monitoring
center. They connect with the data collectors through a LAN or WAN. The data
storage server stores and manages the data streams from data collectors. The
monitoring computers process, analyze and display the real-time data streams from
data collectors. They can also access the historical data in the data storage server.
With the monitoring computers, operators can monitor the running status of all
equipment. An expert system running on monitoring computers can detect the
equipment abnormality and locate the faults based on its current and historical data.
When the status of equipment is abnormal, the faults usually need to be eliminated
manually. It will be very useful for a maintainer to refer to the real-time analyzed
results of the equipment status. For the cost and space considerations, most data
collectors cannot provide the functions of monitoring computers. In this case, PDAs
with the same functions of monitoring computers can be use in the workshop. The
PDAs are connected to the network through wireless access points.
Industry Workshop

Monitoring Center

PDA

Monitoring
Computer

Sensor
Water
Pump

Sensor

Print Serv er
Power /TX

Link/Rx

LPT1

LPT2

C OM

Data Collecting
Device

Ethernet

Data Storage
Sever

Fig. 1. Topology of traditional SMFDS

In this type of systems, all the devices connected to the network have fixed
addresses or the operators can configure their addresses. Any device has to know the
addresses of others to communicate with them.

A Service Oriented Implementation of Distributed SMFDS

4

571

Implementation of Service-Oriented SMFDS

The traditional implementation of SMFDS described in Section 3 has several
drawbacks. Firstly, when a PDA is brought into the workshop, it has to be configured
to make it connected with the data collectors and the data storage server. Secondly,
when new equipment with a new data collector is assembled in the workshop, many
configurations have to be done on the data collector, all the monitoring devices and
the data storage server to make the whole system work correctly. Finally, to guarantee
the integrality and availability of history data, more than one data storage servers are
required. If one of the servers breaks down, other devices should find and access the
backup server automatically. Current SMFDS has difficulty in meeting this
requirement. In this section, we will describe how to implement the SOA in SMFDS,
which overcomes the drawbacks of the traditional implementations.
4.1 Service-Oriented Architecture of SMFDS
According to the description of SMFDSs in Section 3, we can determine that there are
four types of devices related to services in a SMFDS. They are the data collectors, the
PDAs, the remote monitoring computer and the data storage server. Based on their
actions and the principle of UPnP, the SOA of this system can be abstracted.
Data Collecting Device
Switch
Service

Sample
Control

Data
Service

PDA Control
Point

Control Monitoring
Point Computer
History Data
Control
Service
Point
Data Storage Device

Fig. 2. The service-oriented architecture of SMFDS

As shown in Fig. 2, the data collectors provide three services. The switch service is
to start and shut down the data collector, the sample control service is to control the
sampling frequency of the data collector and the data service is provided for accessing
the latest equipment status data. The data storage server provides a service named
historical data access service. Both the PDAs and the remote monitoring computers
work as control points. They use the services provided by the data collectors and the
data storage server. Besides providing a service, the data storage server also works as
a control point, since it uses data service provided by the data collectors to obtain the
equipment status data. Obviously, the actions of the PDAs and the remote monitoring
computers are quite similar, except that the PDAs are mobile devices.
The service interfaces in this system is described in Table 1. The status variables of
a service model the state of the service. When the state is update, an event will be

572

L. Wang et al.

published. Control points can subscribe to the service’s event source. In our
implementation of SMFDS, for example, the PDAs subscribe the event notification
from the switch status variable in the data collectors. When a data collector is started
or shut down, the PDAs can capture this event and take corresponding actions.
Table 1. Services provided by devices in SMFDS
Device

Data
collector

Data storage
server

Service

Interface
Start
Switch
ShutDown
service
GetStatus
SwitchStatus
Data
GetData
service
DataID
GetFrequency
Sampling
control
SetFrequency
service
Frequency
History
GetData
data service
DataStatus

Type
Action
Action
Action
State
Action
State
Action
Action
State
Action
State

Description
Start data collection
Stop data collection
Get the switch status
Switch status: running or stopped
Get the latest equipment status data
Get ID of the latest status data
Get the sampling frequency
Set the sampling frequency
The sampling frequency
Get a historical data record
Denote the update of data

4.2 Implementation of Data Collectors
The essential function of data collectors is to collect the analog signals from sensors,
process the signals and send the result to other devices requiring the status data. The
traditional software implementations of data collectors may be quite different:
component-based or not, in a single thread or in multiple threads. To implement
service-oriented data collectors, the software can be completely rewritten based on the
UPnP standards. This policy is acceptable when develop a bran-new system. But if a
mature and stable system has been deployed after long-term development, this policy
will be costly and take the risk of crashing the existing system. When exploring the
software implementation of a data collector, it can be found that what limits it
autonomy is not the implementation of the core functions, such as signal process, data
management, but its interfaces to other devices, such as how to notify other devices
that new data is ready. An alternative method is to insert a service-oriented
middleware between the existing data collector software and the control points using
these services. The middleware provides the service interfaces to the control points on
other devices. When the control points invoke the actions exposed by the middleware,
the middleware will perform the service actions by invoking the corresponding
operations in the data collection software. Fig. 3 illustrates this scheme considering
only the implementation of switch service.
In this figure, data collection software denotes the core functions implementation
of a data collector. It provides two access interfaces: start and shut down the data
collector. The switch service is exposed by the switch service middleware, which will
accept the action invocations from the control points on other devices. The action
starts and shutdowns in the middleware are implemented by invoking the
corresponding interfaces in the data collection software. Since the middleware has to
continually handle the requirements from control points and provide an event server,
it is usually implemented in an independent process. With the consideration of

A Service Oriented Implementation of Distributed SMFDS

573

efficiency, an asynchronous communication scheme is needed to invoke functions and
transfer data between the middleware and the data collection software process. When
the Start operation is completed in data collection software, it will invoke a
StartReturn operation in the UPnP middleware by sending a SRSIG signal. The
operation will change the state of the middleware from SwitchOff to SwitchOn. When
the state of the middleware changed, a status change notification will be sent to the
control points that have subscribed this event.
Data Collector
Software

UPnP Middleware

Action

Start

Event
Status
Change
Notification

Control
Point
Action

Switch
Status

GetStatus

Action

Start

Start
Return

Switch
Status

ShutDown
Return

ShutDown

ShutDown

Fig. 3. The implementation of switch service in data collectors
UPnP Middleware

Data Collector Software
Computing time to
next event

Computing time to
next event
Control
Point

Invocation

Signal

Blocking Select

Blocking Select

Signal
Event
Notification

Processing Events

Processing Events
Start

StartReturn

Signal

Start

Fig. 4. The thread model of switch service implementation

The thread model corresponding to the implementation of the switch service is
shown in Fig. 4. Both the middleware and data collection software work in a blocking
select manner. When an event arrives, its corresponding action will be invoked. The
actions must be completed quickly, so that other events can be responded
immediately. If time-consuming operations have to be performed in an action, another
thread or process can be created to execute it. The interfaces between the middleware
and the data collection software are event notifications and data transfer, which can be
implemented through IPC. In the same way, the data service and sample control
service in data collectors can also be implemented.
4.3 Implementation of the Control Point on PDAs
The implementation of a control point is much like that of a service. It works as a
middleware to provide application software with the channels for interacting with
external service providers. In order to build a control point on an existing device with

574

L. Wang et al.

the least modification, the control point middleware is implemented in an independent
thread or process. The application software can interoperate with it through IPC.
PDA
IPC

Data Collector
Control Point Middleware
Start

Application
Software

GetStatus
ShutDown
Status Switch Notification

Action
Action
Action

Switch
Service
Middleware

IPC

Data
Collector
Software

Event

Fig. 5. The implementation of control point middleware on PDAs

As shown in Fig. 5, if an application on a PDA aim to obtain the switch status of
equipment, the application software will send a GSSIG signal to the switch control
point middleware, which will in turn invoke the GetStatus action of the switch service
middleware on the corresponding data collector. The interactions between control
points and service providers are based on UPnP specification. If the switch status of a
data collector is changed, an event will be send to the control point middleware,
which will in turn send a SSSIG signal to application software.
4.4 Implementation of the Data Storage Server
The implementation of control points in remote monitoring computers and data
storage server is similar to the implementation on PDAs. On the data storage server,
the core data management function is provided by a database. A history data service
middleware provides an interface for interactions between the database and the
control points using the history data access service. It works very like the service
middleware on data collectors. The difference is that the service middleware on data
storage server passively wait the invocations from the control points. If there are
several data storage servers on the network, each server receives the data stream from
data collectors through its control point middleware. Although each monitoring
device usually fetches historical data from one server, it maintains a list of all the
existing servers. Once its current server cannot provide data normally, a backup
server will be chosen from the list for historical data service.
4.5 Prototypes and Application
A SMFDS prototype for large pumps has been developed. The data collector is
implemented on an ARM9 single-board embedded computer with Linux running on
it. The monitoring device is implemented on both HP 5500h PDAs and PCs. The
operating systems are Linux and Windows respectively. The data storage server runs
Windows 2000 Server and SQL server. Three data collectors, two data storage servers
and one monitoring computer are connected with an Ethernet network. Two PDAs are
connected to the network through a wireless access point. The services and the control
point middleware are implemented through the Intel® NMPR v2.0 Device Enabling

A Service Oriented Implementation of Distributed SMFDS

575

Kit [6], which can generate the UPnP framework codes for several OS platform.
When an operator holding a PDA enters the workshop, the PDA can discover all the
equipment and display their status. It can also obtain the history data from the data
storage server and compare their difference. If one of the data storage servers breaks
down, all the monitoring devices can automatically fetch data from the backup server.

5 Conclusion
The SOA can provide a flexible cooperative scheme for distributed heterogeneous
computing devices. Taking advantage of this architecture in industry can greatly
reduce the work of the configuration and maintenance of computing devices. We
present a method to implement the SOA on SMFDS for large equipment based on
UPnP technology. In this implementation, it will incur zero configurations for
equipment or computing devices to join or quit the system, as well as to dynamically
change the historical data source. Through providing service and control point
middleware in an independent thread or process, the service-oriented architecture can
be easily implemented on existing systems with the least modifications. A prototype
SMFDS for large pumps is also developed based on this method. In this prototype,
devices and equipment can be automatically discovered and cooperate with other
devices in a predefined rule, which will help maintainers concentrate on the
equipment check-up and fault elimination. Dependability is very critical in industry.
Current UPnP technology cannot provide sufficient support to implement dependable
service-oriented industrial applications. Our future work will focus on the solutions of
dependable SOA, especially for embedded distributed real-time systems.

Acknowledgements
This research was supported by 863 National High Technology Program under Grant
No. 2002AA1Z2308, No. 2003AA1Z2130 and No. 2004AA1Z2060.

References
1. Introduction to UDDI and Service Oriented Architecture (SOA). http://archive.devx.com/
xml/articles/sm100901/sidebar1.asp retrieved on 8 Oct. 2003.
2. The Object Management Group (OMG). The Common Object Request Broker: Architecture
and Specification. OMG Document formal/99-10-07, Revision 2.3.1, 1999.
3. K. Arnold et al..The Jini Specification. Addison-Wesley Longman, Reading, Mass., 1999.
4. W3C Web Services Activity. Web Service Architecture. W3C Working Group Note, 2004.
5. Univeral Plug and Play Forum, http://www.upnp.org/
6. Intel® NMPR v2.0 Device Enabling Kit, Available: http://intel.com/technology/upnp/
download.htm

