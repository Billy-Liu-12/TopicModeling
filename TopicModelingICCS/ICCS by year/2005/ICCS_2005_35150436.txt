Enhanced TCP with End-to-End Bandwidth and
Loss Diﬀerentiation Estimate over
Heterogeneous Networks
Le Tuan Anh and Choong Seon Hong
Computer Engineering Department, Kyung Hee Univerity
1, Seocheon, Giheung, Yongin, Gyeonggi 449-701, Korea
letuanh@networking.khu.ac.kr, cshong@khu.ac.kr

Abstract. The TCP performance degradation over heterogeneous networks is caused by not only network congestion, but also random errors
of wireless links. We propose an end-to-end stable accurate rapid bandwidth estimate (SARBE) algorithm reacting appropriately to the end-toend loss diﬀerentiation estimate algorithm (LDED), which can improve
the TCP performance over heterogeneous networks without the incipient
congestion notiﬁcations of the intermediate routers. LDED detects the
signal of incipient congestion to lead the sender to enter the congestion
avoidance phase opportunely before router’s queue overﬂows. As well as
relying distinguishing ability the causes of loss, our algorithm adjusts the
packet transmission rate precisely according to the estimated bandwidth
after new ACK receiving, fast retransmit or transmission timeout events.

1

Introduction

Wireless and mixed wired-wireless environments are becoming more popular in
recent years. The original TCP assumes that every packet loss as an indication
of network congestion, which may not apply to heterogeneous networks because
packets may be lost by random errors, signal fading or mobile handoﬀ on wireless
links. Therefore, in mixed wired and wireless environments, poor performance
of TCP is erroneous in behaviors of the congestion avoidance when the packet
loss doesn’t concern the network congestion.
For the TCP sender, the congestion control probes the available bandwidth of
the bottleneck link by continuously increasing the congestion window size (cwnd)
until reaching the network capacity. When the network congestion is detected by
indicating received Duplicate ACKs, the congestion control decreases abundantly
to one half of the current cwnd setting to the slow start threshold (ssthresh).
cwnd is reset for restarting the slow start phase (SS) until retransmission timer is
expired. If packet losses occur by random errors of wireless links before ssthresh
This work was supported by University ITRC Project of MIC. Dr. C.S.Hong is
corresponding author.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 436–443, 2005.
c Springer-Verlag Berlin Heidelberg 2005

Enhanced TCP with End-to-End Bandwidth

437

reaches the actual network capacity, ssthresh may be obtained a smaller value.
Therefore the sending rate is reduced blindly. That is the TCP performance is
degraded unreasonably.
In this paper, we are interested in the end-to-end mechanism, in which bandwidth estimate algorithm reacts appropriately incipient congestion signal estimated from the end-to-end loss diﬀerentiation algorithm to improve TCP over
heterogeneous networks.
The rest of this paper is organized as follows: Section 2 summarizes the
related work. Section 3 presents in detail SARBE, and incorporating SARBE
and LDED. Simulation results are presented in section 4. Finally, section 5 is for
our conclusion.

2

Related Work

There are several approaches proposed for improving TCP performance over
wireless networks. They was classiﬁed into three classes [2]: the link-layer approach improves wireless link characteristics; the split-connection approach, in
which a base station separates the wireless connection from the wired connection, and is responsible for retransmission of packet losses on wireless link; the
end-to-end approach, which retains TCP semantics, but requires changes of the
protocol stack at either the sender side or the receiver side.
TCP Westwood [4], [5] monitors and averages available bandwidth for every
ACK arrived at the sender. The estimated bandwidth is used to control transmission rate via setting cwnd and ssthresh to the estimated bandwidth after
fast retransmission or transmission timeout. Although, the ﬁlter of TCP Westwood is complex, it cannot reﬂect the rapid changes of the network condition. In
addition, if ACK packets encounter the network congestion along the backward
path, called ACK compression [9], TCP Westwood overestimates the available
bandwidth.
The end-to-end loss diﬀerentiation proposals categorize the packet losses explicitly through diﬀerent estimate without any support from the intermediate
routers, such as Flip Flop [7], Vegas [11] and Non Congestion Packet Loss Detection (NCPLD) [12]. They are based on the TCP state variables and information
of ACKs to estimate the reason of packet losses. NCPLD categorizes the nature
of the error by detecting the knee point of the throughput-load bend.
The Vegas predictor measures the lowest Round Trip Time (RT T min) during
the TCP connection and computes the expected throughput (cwnd/RT T min).
When the sender receives ACK, it computes the actual throughput (cwnd/RT T ).
[11] deﬁned extra packets between two thresholds α and β in the network as
DV egas = RT Tmin ×

cwnd
cwnd
−
RT Tmin
RT T

(1)

If DV egas ≥ β , the Vegas predictor detects the network becoming congestion.
Otherwise, if DV egas ≤ α, there are more available bandwidth for connection. In

438

L.T. Anh and C.S. Hong

the other hand, the network state is kept the same as in the last estimate when
α < DV egas < β.
The parameters α = 1 and β = 1 is not accurate that proved in [11]. The
authors of [10] then showed that the predictor achieves the highest accuracy if
α = 1 and β = 3.

3
3.1

Proposal
Available Bandwidth Estimate

In stable accurate rapid bandwidth estimate (SARBE) algorithm. The ACKs
sending time intervals are used to compute the available bandwidth of the forward path via the timestamp of ACK. The estimate of the forward path is not
be aﬀected by ACK compression that results in overestimate.
To estimate the current bandwidth by observing the pattern of bandwidth
for consecutive packets, this can be written as
Bwk =

Lk
tsk − tsk−1

(2)

where Lk is the amount of data acknowledged by the kth ACK, tsk is timestamp
of the kth ACK; tsk−1 is the timestamp of the previous ACK arrived at the
sender.
We used the stability-based ﬁlter [8] which is similar to the EWMA ﬁlter,
except using a measure function of the samples’ large variance to dynamically
change the gain in the EWMA ﬁlter. After computing the bandwidth sample
Bwk from (2), the stability-based ﬁlter can be expressed in the recursive form
Uk = βUk−1 + (1 − β) | Bwk − Bwk−1 |
Umax = max(Uk−N , ..., Uk−1 , Uk )
α=

Uk
Umax

eBwk = α · eBwk−1 + (1 − α)Bwk

(3)
(4)

where Uk is the network instability computed in (2) by EWMA ﬁlter with gain β,
β was found to be 0.8 in our simulations; U max is the largest network instability
observed among the last N instabilities (N = 8 in our simulations); and eBwk
is the estimated smoothed bandwidth, eBwk−1 is the previous estimate and the
gain α is computed as (3) when the bandwidth samples vary largely.
We evaluate the stability, accurateness and rapidity of SARBE. The simulation network scenario is depicted in Fig. 1. We used an FTP over TCP and an
UDP-based CBR background load with the same packet size of 1000 bytes. The
CBR rate varies according to time as the dotted line in Fig 2(a).
The result is shown in Fig. 2(a); TCP Westwood is very slow to obtain the
available bandwidth changes. By contrast, SARBE reaches the persistent bandwidth changes rapidly, which closely follow the available bandwidth changes.

Enhanced TCP with End-to-End Bandwidth

S

439

D

1.5Mbps, 10ms

Fig. 1. Single bottleneck link

Bandwidth Estimate

Impact of ACK Compression

4

1.4

3.5

1.2
1
0.8
0.6
0.4

TCP Wes two o d

0.2

SARBE algo rithm

Estimated Bandwith (Mbp s

Estimated bandwidth (Mbps)

1.6

3
2.5
2
1.5
1

Westwood

0.5

SARBE algorithm

Actual

0

0

0

5

10

15
Time (s)

(a)

20

25

0

30

60 Time (s) 90

120

150

(b)

Fig. 2. (a) Comparison of Bandwidth estimate algorithms, (b) Overestimated bandwidth of TCP Westwood

This is due to adaptability of dynamic changes of gain when the bandwidth
samples vary largely.
To investigate the impact of ACK compression on estimate, we used the
network scenario as Fig. 1 and supplemented a traﬃc load FTP in the reverse
direction. The traﬃc load FTP was started at time 30s and ended at 120s for
150s simulation time. In this interval, Westwood estimates over 2 Mbps more
than SARBE, which is quite near the actual available bandwidth, as in Fig 2(b).
The TCP’s ssthresh represents the probed network bandwidth; while the
above estimated bandwidth value also represents the current available bandwidth
of forward path. Consequently, we have to transform the estimated value into
equivalent size of the congestion window for updating ssthresh. [5] proposed the
interrelation of the estimated bandwidth with the optimal congestion window
size (oCwnd) as
eBw · RT Tmin
oCwnd =
Seg size
where RT Tmin is the lowest Round Trip Time, Seg size is the length of the
TCP segment.
3.2

Enhanced TCP with Incorporating SARBE and LDEA

In our design, we propose a new scheme by incorporating SARBE and LDEA. For
LDEA, we apply the equation (1) to detect the network becoming congestion
for every ACK arrived at the sender. Accordingly, the sender can distinguish
the packet losses caused due to congestion from those caused due to random

440

L.T. Anh and C.S. Hong

errors of wireless links. And then, relying distinguishing the causes of losses, our
scheme adjusts the packet transmission rate precisely according to the estimated
bandwidth after new ACK receiving, fast retransmit or transmission timeout
event occurs.
The pseudo code of our algorithm is presented following.
A. Algorithm after receiving ACK or Duplicate ACKs
if (ACK is received)
/* calling the loss differentiation estimate algorithm */
if (cwnd < ssthresh and isIncipientCongestion== true)
ssthresh = oCwnd;
endif
endif
if ( n DupACKs are received)
ssthresh = oCwnd;
/* the packet loss is caused by congesion */
if (isIncipientCongestion == true)
if (cwnd > ssthresh )
cwnd = ssthresh;
endif
else /* the packet loss is not caused by congesion */
/* keeping the current cwnd */
endif
endif
Whenever the sender receives a new ACK with incipient congestion, the congestion control updates ssthresh to oCwnd during the slow start phase (SS).
Setting precisely ssthresh to the available bandwidth of bottleneck link leads
the sender to enter the congestion avoidance phase (CA) opportunely before
router’s buﬀer overﬂow.
When Duplicate ACKs are received, ssthresh is set to oCwnd. If the packet
loss is caused by the network congestion, the congestion control should restart
the CA phase during the CA phase. Otherwise, it keeps the current cwnd.
B. Algorithm after timeout expiration
if ( retransmission timer expires)
ssthresh = oCwnd;
cwnd = 1;
endif
If the sender is triggered by the retransmission timeout event due to the heavy
network congestion or very high bit-error rate of wireless link, the congestion
control sets ssthresh to oCwnd and then sets cwnd to one for restarting the SS
phase.

Enhanced TCP with End-to-End Bandwidth

4

441

Simulation Results

All of our simulations were run by the NS-2 simulation network tool [6]. We used
the recent Westwood module NS-2 [3] for comparison.
4.1

Eﬀectiveness

The simulation was run in a simple hybrid environment, shown in Fig. 3(a). The
topology includes the bottleneck capacity of 5 Mbps, one-way propagation delay
of 50 ms, the buﬀer capacity equal to the pipe size, and a wireless link.
Goodput vs. packet loss rate (without congestion)

5

Reno
Westwood
Proposal

Average Goodput (Mbps

4.5

10Mbps, 0.01ms

S

R1

5Mbps,
50ms

R2

D

Wireless
link

4
3.5
3
2.5
2
1.5
1
0.5
0
0.001

0.01
0.1
Lossy link error rate (% packet loss)

(a)

1

10

(b)

Fig. 3. (a) Single bottleneck link; (b) Comparison of Bandwidth estimate algorithms

Proposal: Cwnd and Ssthesh

Westwood: Cwnd and Ssthesh
140

120

120

100

100

100

80
60
40

Cwnd
Ssthresh
Pipe size

20

Sequence number

140

120

Sequence number

Sequence number

Reno: Cwnd and Ssthesh
140

80
60
40

Cwnd
Ssthresh
Pipe size

20

0

20

40

60

Time (s)

(a)

80

100

60
40

Cwnd
Ssthresh
Pipe size

20
0

0

0

80

0

20

40

60

Time (s)

(b)

80

100

0

20

40

60

80

100

Time (s)

(c)

Fig. 4. (a) Cwnd and ssthresh of Reno, (b) Cwnd and ssthresh of TCP Westwood,
(c) Cwnd and ssthresh of the proposed TCP in the absence of random errors

We evaluate TCP performance in the lossy link environment. The simulation
was performed on one FTP in 100s with the packet size of 1000 bytes, the
wireless link random errors ranging from 0.001% to 10% packet loss. In Fig 3(b),
for any random error rate, the goodput of the proposed TCP is better than
other versions. Particularly, at 1% wireless link packet loss rate, the proposal
can achieve better performance than TCP Reno and Westwood by 76.6% and
17.9%, respectively.
Outperforming of the proposal at any random error rate less than 0.001%
can be explained by the diﬀerent behavior of the three protocols shown in Fig 4.
In Fig 4(a), (b), at the beginning of the TCP connections, TCP Reno and TCP

442

L.T. Anh and C.S. Hong

Westwood increase exponentially their cwnds to probe the network capacity.
Until the router’s buﬀer was overﬂowed, and then the retransmission timeout
events occur, they set ssthresh to one-half of the current cwnd for TCP Reno,
to the estimated bandwidth for TCP Westwood, and restart the SS phase. In
contrary, relying the incipient congestion signal of LDEA, the proposed TCP
can update ssthresh to the estimated bandwidth in the SS phase. This leads
the sender to enter the CA phase opportunely before router’s queue overﬂows,
shown in Fig 4(c).
4.2

Fairness

The fairness of TCP depicts the fair share ability of the bottleneck bandwidth
with multiple connections of the same TCP version. The fairness index is used
to assess the convergence of TCP. It was proposed in [1] as following
fi =

(
n(

n
2
i=1 xi )
n
2
i=1 xi )

where xi is the throughput of the ith TCP connection, n is the number TCP
connections considered in simulation. The fairness index has a range from 1/n
to 1.0, with 1.0 indicating fair bandwidth allocation.
Using the same scenario as Fig. 3(a) with ten same TCP connections, we simulated the diﬀerent TCP versions individually. The buﬀer capacity of bottleneck
link is equal to the pipe size. The comparison result is shown in Fig. 5(a). The
proposed TCP, TCP Reno and TCP Westwood can achieve high fairness index.
4.3

Friendliness

The friendliness of TCP implies fair bandwidth sharing with the existing TCP
versions. We considered a total of ten connections mixing the proposed TCP
with TCP Reno and Westwood at 1% packet loss rate of the wireless link. The
x-axis of Fig. 5(b) represents the number of TCP Reno, Westwood connections;
the remaining connections used in the proposed TCP. In Fig. 5(b), the proposal
proves the coexistent ability with the TCP Reno, but outdoes in goodput.
Fairness vs. Packet loss rate

Average goodput
(Kbps)

Fairness Index

Friendliness over 1% packet error rate

1300

1.000
0.990
0.980
0.970
0.960
0.950

1100
900
700
500
300

0.940
0.930

100
0

0.920
0

0.1
0.5
1
5
Lossy link error rate (% packet loss)
Reno

Westwood

(a)

Proposal

10

1

2
3
4
5
6
7
8
9
The number of Reno, Westwood connections
Reno
Westwood
Proposal vs. Reno
Proposal vs. Westwood
Fair share

10

(b)

Fig. 5. (a) Fairness vs. packet loss rate; (b) Friendliness of TCP Reno and Westwood
compared with the proposal, respectively, over 1% packet loss of wireless link

Enhanced TCP with End-to-End Bandwidth

5

443

Conclusion

By incorporating the stable accurate rapid bandwidth estimator and the loss
diﬀerentiation estimator, our proposal can react appropriately to the packet
losses in heterogeneous networks, where the losses are caused by either network
congestion or random errors of wireless links. LDED detects the network becoming congestion to lead the sender to enter the CA phase opportunely before
router’s queue overﬂows. As well as relying on distinguishing ability the causes
of loss, our algorithm adjusts the packet transmission rate precisely according
to the estimated bandwidth obtained from SARBE, after new ACK receiving,
fast retransmit or transmission timeout events.

References
1. R. Jain, D. Chiu, and W. Hawe, ”A quantitative measure of fairness and discrimination for resource allocation in shared computer systems,” DEC, Rep.TR-301,
1984.
2. H. Balakrishnan, V. N. Padmanabhan, S. Seshan, and R. H. Katz, ”A comparison
of mechanisms for improving TCP performance over wireless links,” IEEE/ACM
Trans. Networking, vol. 5, no. 6, pp. 756769, 1997.
3. TCP
Westwood
Modules
for
NS-2
[Online].
Available:
http://www.cs.ucla.edu/NRL/hpi/tcpw/tcpw ns2/tcp-westwood-ns2.html, 2004.
4. S. Mascolo, C. Casetti, M. Gerla, M. Y. Sanadidi,and R. Wang, ”TCP Westwood:
Bandwidth estimation for enhanced transport over wireless links,” in Proc. ACM
MobiCom 2001, Roma, Italy, pp. 287297, July 2001.
5. S. Mascolo, C. Casetti, M. Gerla, and S.S. Lee, M. Sanadidi, ”TCP Westwood:
Congestion Control with Faster Recovery,” UCLA CS Tech. Report. #200017,
2000.
6. NS-2 network simulator [Online]. Available: http://www.isi.edu/nsnam/, 2004.
7. D. Barman and I. Matta, ”Eﬀectiveness of Loss Labeling in Improving TCP Performance in Wired/Wireless Networks,” Boston University Technical Report, 2002.
8. M. Kim and B. D. Noble, ”SANE: stable agile network estimation,” Technical
Report CSE-TR-432-00, University of Michigan, Department of Electrical Engineering and Computer Science, Ann Arbor, MI, August 2000.
9. L. Zhang, S. Shenker, and D. Clark, ”Observations on the Dynamics of a Congestion Control Algorithm: The Eﬀects of Two-Way Traﬃc,” Proc. SIGCOMM Symp.
Comm. Architectures and Protocols, pp. 133-147, Sept. 1991.
10. S. Bregni, D. Caratti, and F. Martigon, ”Enhanced Loss Diﬀerentiation Algorithms
for Use in TCP Sources over Heterogeneous Wireless Networks,” in IEEE Global
Communications Conference, Globecom 2003, Dec. 2003.
11. S. Biaz and N. H. Vaidya, ”Distinguishing Congestion Losses from Wireless Transmission Losses: A Negative Result,” Seventh International Conference on Computer Communications and Networks (IC3N), New Orleans, Oct. 1998.
12. N.K.G. Samaraweera, ”Non-Congestion Packet Loss Detection for TCP Error Recovery using Wireless Links,” IEE Proceedings Communications, volume 146 (4),
pages 222-230, August 1999.

