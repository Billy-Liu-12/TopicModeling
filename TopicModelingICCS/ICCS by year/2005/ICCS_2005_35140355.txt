Determining Consistent States of Distributed
Objects Participating in a Remote Method Call
Magdalena Slawi´
nska and Bogdan Wiszniewski
Faculty of Electronics, Telecommunications and Informatics
Gda´
nsk University of Technology
Narutowicza 11/12, 80-952 Gda´
nsk, Poland
{magg, bowisz}@eti.pg.gda.pl

Abstract. The article presents the ﬁrst component of a new approach
for testing distributed object-oriented applications called TestByRep
which is based on the concept of replication of object states. The paper
describes key ideas in TestByRep like: hash clocks for ordering events in
distributed object-oriented systems with the unknown number of objects,
the E-path for representing the execution of the method, construction of
the E-tree for determining states of objects involved in a remote method
call and introduces the recovery condition in order to assure that the
determined state is consistent.

1

Introduction

Testing non-distributed applications is easier than testing distributed ones since
in non-distributed applications it is usually possible to use the cyclic debugging technique [1, 2]. The cyclic debugging technique is based on the approach
of repeatable execution of a program in order to exercise its code and localise
errors. Although it is a very simple technique, it is commonly used by testers
and programmers of non-distributed applications. However, adapting the cyclic
debugging technique to distributed applications is not straightforward and requires special mechanisms which must be incorporated into the distributed
application, the execution platform or the operating system. It is because in
distributed systems testers meet diﬃculties like: determining a global consistent state of a distributed application, physical distribution of application’s
components, accessibility of application’s components, the lack of global clock
which makes impossible to reckon about the order of the events in a distributed
application [3].
This paper describes the ﬁrst component of a new methodology called TestByRep based on the concept of replication of object states in order to enable the
cyclic debugging technique for distributed object-oriented applications (DOA).
The idea of replication is widely used in order to increase reliability and accessibility as well as to provide fault-tolerance and support load-balancing [4, 5, 6].
The methodology TestByRep shows that the idea of replication can be also applied to test and debug DOA.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3514, pp. 355–363, 2005.
c Springer-Verlag Berlin Heidelberg 2005

356

M. Slawi´
nska and B. Wiszniewski

TestByRep consists of three main components: (1) the model and key concepts, (2) the infrastructure to capture the relations among objects and object
states during the execution of DOA and (3) the method driven recovery approach which comprises reexecution, simulated execution and selective execution
of replicated objects [7].
The description of the infrastructure to capture the relations among objects
in DOA can be found in [8]. In this paper we present fundamental concepts of
the methodology TestByRep: hash clocks, E-paths and E-trees.

2

Hash Clocks

To order the events in DOA, we introduce the concept of hash clocks. The logical
clock and two important conditions: (1) the clock condition and (2) the strong
clock condition were deﬁned in [3]. The logical clock (it is a function) assigns
numbers to events in the system. In order to work properly it should satisfy
the clock condition. Events in the system have timestamps which are concrete
values of the logical clock. Timestamps are assigned to events in the system.
The clock condition says that earlier events in the system should have lower
timestamps [3]. And when it is possible to draw a conclusion based on timestamps
about the order of the events in the system, we say that the logical clock satisﬁes
the strong clock condition [3]. Logical clocks can be deﬁned as numbers [3],
vectors with the a priori known and constant size [9] or matrices also with the a
priori given constant size [9, 10, 11]. However, sometimes in DOA it is diﬃcult to
predict the number of objects in the application, especially if foreign objects are
considered [8]. A distributed object-oriented application consists of cooperating
objects scattered over the network. A tester can have an access to the source
code of the object and such an object is called native object or s(he) cannot have
an access to the source code and such objects are called foreign objects [12], e.g.,
services which are used by native objects.
In this context the assumption about the constant and known sizes of vectors
or matrices is irrelevant. In [13] were proposed logical clocks which take into
account the dynamic and unknown number of processes in the system. However,
they require an additional process which assigns subsequent numbers to new
processes or before registering a new process in the system, all other processes
must agree on the number which should be assigned to this new process. The
presented approach can be appropriate for non-object distributed systems like
PVM or MPI (in fact it was proposed for PVM applications), however DOA
requires a new approach.
In this paper we propose a new logical clock called a hash clock. The construction of the hash clock is based on the hash table. The hash table is the set of
key-value pairs with eﬀective search of elements [14]. We assume that elements
can be dynamically added to the hash table. We also assume that objects in the
distributed object-oriented system have unique identiﬁers. Symbol ido means the
identiﬁer of object o and HCo denotes the hash clock of object o. Hash clock HCo
is a set of key-value pairs where keys are object identiﬁers while values are nat-

Determining Consistent States of Distributed Objects

357

ural numbers representing the logical clock of a given key-object from the point
of view of object o. For example: HCo = {(ido , Co ), (ido1 , Co1 ), . . . , (idok , Cok )},
where k = 1, 2, . . . , means that from the point of view of object o: object o has
the clock value Co , object o1 has the clock value Co1 , and so on. Let the function
HCo () give a value of the key argument in hash clock HCo , i.e., HCo (ido1 ) = Co1 .
Values of hash clocks will be called hash timestamps and denoted by symbol
HT S.
Before presenting the algorithm for updating the hash clock, ﬁrst we should
deﬁne operations of adding the new value to the hash clock and merging a hash
clock with a hash timestamp. The operation of adding the new element to the
hash clock is deﬁned as follows:
HCo .add(ido1 , C1 ) ≡ HCo := HCo ∪ {(ido1 , C1 )}

(1)

We assume that if it is required operation add() increases the size of the hash
clock and then adds the element to it. The symbol IdHCo denotes the set of
identiﬁers of the hash clock of object o and IdHT S denotes the set of identiﬁers of hash timestamp HT S, e.g., IdHCo = {ido , ido1 , . . . , idok }. Function
mergeM ax() deﬁnes how to merge a hash clock and a hash timestamp and is
described by Algorithm 1.
Algorithm 1 (Function mergeM ax(HCo , HT S))
1. ∀id∈IdHT S (id ∈ IdHCo ) ⇒ (HCo .add(id, HT S(id)).
2. ∀id∈IdHCo (id ∈ IdHT S ) ⇒ (HCo (id) := max(HCo (id), HT S(id))).
Function mergeM ax() increases hash clock HCo (if it is required) and compares
the values of logical clocks of relevant identiﬁers of HCo and HT S, and then
chooses the greater value and assigns it to the relevant object identiﬁer in HCo .
We assume that objects interact with other objects only by method calls
which can be modeled as requests and replies [6, 8]. By the internal event we
understand the event which does not require the communication with another
object, e.g., the event of invoking by an object its own method. Otherwise the
event is called external, i.e., requires the interaction with another object. In the
context of requests and replies the method call can be modeled as the event of
(1) sending request req by object o1 to object o2 denoted by s(req), (2) receiving
request req by object o2 denoted by r(req), (3) performing relevant actions by
o2 , (4) sending reply rep by object o2 to object o1 denoted by s(rep), and ﬁnally
(5) receiving reply rep by object o1 from object o2 [8]. If it is not relevant to
distinguish replies and requests, they will be called messages and denoted by
symbol m. We assume that messages carry hash timestamps of their senders.
Now, the algorithm of updating the hash clock can be introduced.
Algorithm 2 (Updating the hash clock)
1. HCo := {(ido , 0)}.

358

M. Slawi´
nska and B. Wiszniewski

2. For each new event e in the system:
1). HCo (ido ) := HCo (ido ) + 1,
if event e is an internal event
2). HCo := mergeM ax(HCo , HT S(m)), if e = r(m)
HCo .add(idp , 0),
if e = s(m) and idp is a receiver
of m and idp ∈ IdHCo
HCo (ido ) := HCo (ido ) + 1.
Firstly, the hash clock is initialized and then after each internal event the clock
value referring to object o is increased by 1. Then, after each event (external or
internal) the hash clock is increased by 1. However, in the case of the receive
event the current hash clock is compared with the received hash timestamp of
the received message and updated according to Algorithm 1. In the case of the
sending event if a receiver is not in the hash clock, the receiver is added to the
hash clock and its clock is initialized with 0.
Figure 1 presents Algorithm 2. Let’s notice that the size of the hash clock
for each object settles at the number of objects in the system if objects in
the system interact and information about hash clocks scatters over objects
in the system. Let’s consider for example the send event e1,2 from Figure 1.
The hash timestamp assigned to event e1,2 is HCo1 (e1,2 ) = {(o1 , 2), (o3 , 0)}.
Next, this hash timestamp is sent to object o3 . Since HCo3 does not contain the
identiﬁer of object o1 , pair (o1 , 2) is added to HCo3 according to Algorithm 1,
and the rest elements are updated according to Algorithm 1. Finally, this results
in HCo3 (e3,3 ) = {(o3 , 3), (o2 , 1), (o1 , 2)}.
Since hash clocks can have diﬀerent sizes in order to compare them we need
to normalize them. Let’s deﬁne operation extend():

Fig. 1. The hash clock for the dynamic unknown number of objects in the system

Determining Consistent States of Distributed Objects

359

Definition 1 (Operation extend(HT S1 , HT S2 )) Let HT S1 and HT S2 be
hash timestamps. We say that HT Sext is the extended hash timestamp of HT S1
with respect to HT S2 if HT Sext was constructed according to the following rules:
1. HT Sext := HT S1 .
2. ∀id∈IdHT S2 (id ∈ IdHT S1 ) ⇒ HT Sext .add(id, 0).
Operation extend() returns the hash timestamp which contains all object identiﬁers and relevant values from its ﬁrst argument and all object identiﬁers
from its second argument with value 0 if the ﬁrst argument does not contain
them. Let’s consider for example HT S1 = HT S(e2,2 ) = {(o2 , 2), (o3 , 2)} and
HT S2 = HT S(e3,4 ) = {(o3 , 4), (o2 , 1), (o1 , 2)} from Figure 1. Then HT Sext =
extend(HT S1 , HT S2 ) = {(o1 , 0), (o2 , 2), (o3 , 2)}.
Considering operation extend() it is possible to deﬁne operators , < and ||
for comparison of hash timestamps [7]. Informally HT S1 HT S2 when for all
identiﬁers in HT S1 their values are not greater than relevant values in HT S2 .
We say that HT S1 < HT S2 if HT S1 HT S2 and exists at least one identiﬁer
id in HT S1 that HT S1 (id) < HT S2 (id). When HT S1 ||HT S2 , i.e., the hash
timestamps are concurrent, then ¬(HT S1 < HT S2 ) ∧ ¬(HT S2 < HT S1 ).
We can prove that hash clocks with updating by Algorithm 2 and operation
extend() satisfy the clock condition and strong clock condition [7]. It means that
hash clocks can be used to conclude about the order of events in the system and
construct consistent state of a set of objects.

3

Consistent States of Distributed Objects

The states of objects registered in corresponding logs during the execution of
on diagrams and inDOA are called checkpoints [10]. They will be denoted as
stead of ei,j we will use symbol si,j . In order to check if a given set of checkpoints
is consistent it is suﬃcient to check if timestamps corresponding to checkpoints
are concurrent. If at least one pair of the set of checkpoints is not concurrent the
state of the set of objects represented by these checkpoints is not consistent [15].
In order to determine the consistent state of the set of objects we can represent a method call as an execution path, shortly called E-path.

3.1

E-Path

The E-path is the sequence of events beginning from the event of sending a
request and ending with the event of receiving the reply corresponding to this
request. Let’s consider Figure 2.
Since e1,2 = s(req1 ) and e1,3 = r(rep1 ), they determine the following E-path
= e1,2 , e2,2 , e2,4 , e3,2 , e3,3 , e2,5 , e2,7 , e3,5 , e3,7 , e4,4 ,
e4,5 , e3,8 , e3,10 , e5,2 , e5,3 , e3,11 , e3,13 , e2,8 , e2,10 , e1,3 .
Having the E-path of the method call it is possible to determine which objects
in the system are involved in the method call. For example in Figure 2 the following objects participate in calling a method in request req1 : {o1 , o2 , o3 , o4 , o5 }
since all of them belongs to E-path(req1 ).

360

M. Slawi´
nska and B. Wiszniewski

Fig. 2. The E-path

In order to determine the consistent state before the method call, the E-tree
can be constructed.
3.2

E-Tree

The E-tree is the tree of the execution of the method. It is an ordered tree [14]
where the root of the tree is the request of the method execution which is sent by
a caller to a callee and nodes are requests which belong to E-path of the request
in the root node. Earlier requests are placed in the most left nodes in the E-tree.
The E-tree for request req1 from Figure 2 is shown in Figure 3.
Each level of the E-tree corresponds to the so-called method execution interval of the direct parent in the E-tree. The method execution interval denoted by Im is the period of time determined by the event of receipt of the
request by an object and the event of sending the reply to the request. Informally, the method execution interval is the period of time when the callee perform the method requested by the caller. For example in Figure 2: Im (req1 ) =
e2,2 , e2,10 and Im (req3 ) = e3,5 , e3,13 . Considering the E-tree from Figure 3
we can see that req2 , req3 ∈ Im (req1 ) (level k = 1) and req4 , req5 ∈ Im (req3 )
(level k = 2).

Fig. 3. The E-tree for request req1 from Figure 2

Determining Consistent States of Distributed Objects

361

We can construct a consistent state of objects preceding the method call if
checkpoints satisfy the recovery condition deﬁned as follows:
Definition 2 (The recovery condition.) Let ea,i be the i-th event in object
a. If the state of object a is registered with the following rules the recovery condition is satisfied:
1.
2.
3.
4.

(ea,i+1 = s(req)) ⇒ sa,i
(ea,i+1 = r(req)) ⇒ sa,i
(ea,i = s(rep)) ⇒ sa,i+1
(ea,i = r(rep)) ⇒ sa,i+1

Rules 1 and 2 of Deﬁnition 2 state that the checkpoint should be registered
just before any event of sending and receiving a request. Rules 3 and 4 say
that checkpoints should be registered just after sending and receiving replies to
requests.
Let’s notice that checkpoints in Figure 2 satisfy the recovery condition.
3.3

Consistent State

Determining the consistent state of objects involved in a given remote method
call requires that the recovery condition is satisﬁed and E-tree of the given
method call is constructed. Then, the consistent state can be determined by
examining the E-tree beginning from the root level to the lowest level in the
following way:
Algorithm 3 (Determining consistent state)
1. Add to set CS the checkpoints directly preceding the event of sending request
in the root node in the E-tree and the event of receiving that request. Add to
set O the sender and receiver of the request placed in the root node.
2. Initialize variable k := 0. It will denote the current level of the E-tree.
3. If k is greater than the depth of the E-tree then stop the algorithm.
4. For each request on level k check if the receiver of the request is in set O and
if it is not then do:
(a) add the receiver of the request to set O and
(b) add the checkpoint directly preceding the event of the receiving this request
to set CS.
5. Increase by 1 variable k, i.e., k := k + 1. Do step 3.
Algorithm 3 examines the E-tree and adds checkpoints directly preceding the
receive events to set CS. However, the checkpoint is added only if its owner
does not belong to set O, i.e., this is the ﬁrst request of a given receiver. For
example, for the E-tree in Figure 3 Algorithm 3 will generate the following set
O = {o1 , o2 , o3 , o4 , o5 }. It is correct since all objects from set O are involved in
the method call requested in request req1 (compare the E-path of request req1
in Figure 2). The result set CS = {s1,1 , s2,1 , s3,1 , s4,3 , s5,1 }. We can prove that
the set of checkpoints, generated by Algorithm 3 assuming that the recovery
condition is satisﬁed, is consistent [7] and as a result it can be used to set states
of replica objects in order to test a remote method call.

362

4

M. Slawi´
nska and B. Wiszniewski

Conclusions

The paper presents the ﬁrst component of the new methodology called TestByRep. TestByRep allows for adapting the cyclic debugging technique to distributed object-oriented applications. Determining a consistent state is a key
element of TestByRep. We showed in this article that it can be done with the
concept of hash clocks which enable ordering of events in DOA with respect
to dynamic and unknown number of objects in DOA, notions of E-path and Etree which provide means for representing a remote method call and allow for
determining the consistent state of remote objects participating in the method
call.

References
1. J. Huselius, “Debugging Parallel Systems: A State of the Art Report,” Tech.
Rep. 63, M¨
alardalen Univ., Dept. of Comp. Science and Engineering, Sept. 2002.
2. M. Ronsse, K. D. Bosschere, and J. C. d. Kergommeaux, “Execution replay and
debugging,” in the 4th International Workshop on Automated Debugging, Aug.
2000.
3. L. Lamport, “Time, Clocks, and the Ordering of Events in a Distributed
System,” Comm. of the ACM, vol. 21, pp. 558–565, July 1978.
4. G. Coulouris, J. Dollimore, and T. Kindberg, Distributed Systems. Concepts and
Design. Addison-Wesley Longman Limited, 1994.
5. S. Maﬀeis, “Adding Group Communication and Fault-Tolerance to CORBA,” in
Proc. of the USENIX Conference on Object-Oriented Technologies, June 1995.
6. A. S. Tanenbaum, Distributed Operating Systems. Prentice-Hall International,
Inc., 1995.
7. M. Sawiska, “Efektywna metoda replikacji dynamicznie powizanych obiekt´
ow
rozproszonych.” Materials for PhD (In Polish), Nov. 2004.
8. M. Sawiska, “Hunting for Bindings in Distributed Object-Oriented Systems,” in
Proc. of International Conference on Computational Science – ICCS’2004
(M. Bubak, G. D. van Albada, P. M. A. Sloot, and J. Dongarra, eds.), vol. 3036
of LNCS, (Krakow, Poland), Springer, June 2004.
9. M. Raynal and M. Singhal, “Logical Time: A Way to Capture Causality in
Distributed Systems,” tech. rep., IRISA, Jan. 1995.
10. E. N. M. Elnozahy, L. Alvisi, Y.-M. Wang, and D. B. Johnson, “A survey of
rollback-recovery protocols in message-passing systems,” ACM Comput. Surv.,
vol. 34, pp. 375–408, Sept. 2002.
11. M. Raynal and M. Singhal, “Logical Time: Capturing Causality in Distributed
Systems,” Computer, vol. 29, no. 2, pp. 49–56, 1996.
12. M. Sawiska, “Testability for Distributed Objects,” in Parallel Processing and
Applied Mathematics, 5th International Conference, PPAM 2003, Czestochowa,
Poland, Sept. 7-10, 2003. Revised Papers (R. Wyrzykowski, J. Dongarra,
M. Paprzycki, and J. Wasniewski, eds.), vol. 3019 of LNCS, pp. 413–418,
Springer, Sept. 2004.
13. M. Neyman, Metody odtwarzania oblicze´
n w rozproszonych ´srodowiskach
sieciowych. PhD thesis, Technical Univ. of Gdask, ETI, Feb. 2000. (In Polish).

Determining Consistent States of Distributed Objects

363

14. T. H. Cormen, C. E. Leiserson, and R. L. Rivest, Introduction to Algorithms. The
Massachusetts Institute of Technology, 1994.
15. A. P. Goldberg, A. Gopal, A. Lowry, and R. Strom, “Restoring consistent global
states of distributed computations,” in Proceedings of the 1991 ACM/ONR
workshop on Parallel and distributed debugging, pp. 144–154, ACM Press, 1991.

