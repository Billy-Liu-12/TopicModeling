Practical and Provably-Secure Multicasting over
High-Delay Networks
Junghyun Nam1 , Hyunjue Kim1 , Seungjoo Kim1 , Dongho Won1 , and
Hyungkyu Yang2
1

2

School of Information and Communication Engineering,
Sungkyunkwan University, Suwon-si,
Gyeonggi-do 440-746, Korea
{jhnam, hjkim, dhwon}@dosan.skku.ac.kr, skim@ece.skku.ac.kr
Department of Computer Engineering, Kangnam University, Yongin-si,
Gyeonggi-do 449-702, Korea
hkyang@kangnam.ac.kr

Abstract. This paper considers the problem of authenticated key exchange in a dynamic group in which members join and leave the group in
an arbitrary fashion. A group key exchange scheme for such a dynamic
group is designed to minimize the cost of the rekeying operations associated with group updates. Although a number of schemes have attempted
for many years to address this problem, all provably-secure schemes are
inadequate in dealing with a dynamic group where group members are
spread across a wide area network; their communication overhead for
group rekeying is signiﬁcant in terms of the number of communication
rounds or the number of messages, both of which are recognized as the
dominant factors that severely slow down group key exchange over a wide
area network. In this paper, we propose an eﬃcient key exchange scheme
for this scenario and prove its security against an active adversary under
the factoring assumption. The proposed scheme requires only a constant
number of rounds while achieving low message complexity.

1

Introduction

A group key exchange scheme is designed to allow a group of parties communicating over an insecure public network like the Internet to establish a shared
secret value called a session key. This group session key is typically used to facilitate standard security services, such as authentication, conﬁdentiality, and
data integrity, in various group-oriented applications like e.g. collaborative computing, audio/video conferencing, and distributed database. In other words, the
essential goal of group key exchange protocols is to eﬃciently implement secure
Seungjoo Kim is the corresponding author for this paper. This work was supported
by the University IT Research Center Project funded by the Korean Ministry of
Information and Communication.
V.S. Sunderam et al. (Eds.): ICCS 2005, LNCS 3515, pp. 493–501, 2005.
c Springer-Verlag Berlin Heidelberg 2005

494

J. Nam et al.

group communication channels over untrusted, open networks. The basic security requirement for a group key exchange scheme to achieve is the property
referred to as (implicit) key authentication, whereby each member is assured
that no one except the intended group members can obtain any information
about the value of the session key. Therefore, the design of an eﬃcient group
key exchange scheme with key authentication is fundamental to network security and has recently received much attention as a consequence of the increased
popularity of group-oriented applications [3, 16, 9, 14, 6, 15].
In this paper we focus on the problem of authenticated key exchange in a
dynamic group, where current members may leave the group and new members may join the group at any time in an arbitrary manner. A group key
exchange scheme for such a dynamic group must ensure that the session key
is updated upon every membership change, so that subsequent communication
sessions are protected from leaving members and previous communication sessions are protected from joining members. Although this can be achieved by
running any authenticated group key exchange protocol from scratch whenever
group membership changes, better handling of this dynamic membership problem has emerged as an important research goal toward eﬃcient, scalable group
rekeying [1, 7, 8, 12, 13, 16].
1.1

Related Work

In [9, 7, 8], Bresson et al. present the ﬁrst formal security model for group key
exchange, which is based on the work of Bellare et al. [4], and provide the
ﬁrst provably-secure protocols in this model. The initial work [9] assumes that
group membership is static, whereas later works [7, 8] focus on the dynamic case.
However, one obvious drawback of their scheme is that in case of initial group
formation, its round complexity is linear in the number of users in the group.
Moreover, the simultaneous joining of multiple users also takes a linear number
of rounds with respect to the number of new users. Therefore, as group size
grows large, this scheme becomes impractical particularly in wide area networks
where the delays associated with communication are expected to dominate the
cost of a group key exchange scheme.
Very recently, Katz and Yung [14] have presented a constant-round protocol
which achieves both provable security and forward secrecy. This protocol, in its
basic form, is based on the work of Burmester and Desmedt [10], and thus no
eﬃciency gain over the Burmester-Desmedt protocol has been accompanied by
its provable security. Indeed, this protocol adds one more round of n broadcasts
for provable security, requiring in total three rounds of n broadcasts. Such a
large number of message exchanges in one round is known as another negative
factor that severely slows down group key exchange protocols in a wide area
network setting. Furthermore, this protocol has to restart anew in the presence
of any group membership change, because there is no known method to handle
dynamic membership more eﬃciently for this protocol.
Most recently, in [6] Boyd and Nieto introduce another group key exchange
protocol which is provably secure in the random oracle model [5] and requires

Practical and Provably-Secure Multicasting

495

only a single round of communication to complete key exchange. But unfortunately, this protocol does not achieve forward secrecy even if its round complexity
is optimal.
1.2

Our Contribution

The unsatisfactory situation described above has prompted this work aimed at
designing an eﬃcient and provably-secure key exchange scheme for a dynamic
group where users communicate over a high-delay network environment. We provide a rigorous proof of security in the model of Bresson et al. [9, 7, 8] in which
an adversary controls all communication ﬂows in the network. The concrete
security reduction we exhibit in the ideal hash model is tight; breaking the semantic security of our scheme almost always leads to solving the well-established
factoring problem, provided that the signature scheme used is existentially unforgeable. Our group key exchange scheme also provides perfect forward secrecy.
Namely, disclosure of long-term secret keys does not compromise the security of
previously established session keys.
In wide area network environments, the main source of delay is not the computational time needed for cryptographic operations, but the communication
time spent in the network. Moreover, the power of computers continues to increase at a rapid pace. We refer the reader to the literature [2, 13] for detailed
discussions of comparison between the communication latency in wide area networks and the computation time for modular exponentiation. As the experiment
results of [2] also indicate, it is widely accepted that the number of communication rounds and the number of exchanged messages are two most important
factors for eﬃcient key exchange over a wide area network.
Table 1. Complexity comparison among group key exchange schemes that achieve
both provable security and forward secrecy
Communication
Rounds Messages Unicast Broadcast
n1)
j+1
1
3
2
2
1

n
n−1
1
j+1
j 2)
1
1
1
3n
3n
n
n−1
1
j+1
j
1
1
1
IKE: Initial Key Exchange
1) The number of users in a newly updated group
2) The number of joining users
3) O(n2 log n): the number of modular multiplications
IKE
[7]
Join
Leave
[14]
IKE
Here Join
Leave

Computation
Exponentiations
O(n2 )
O(jn)
O(n)
O(n) + O(n2 log n)3)
O(n)
O(n)
O(n)

Table 1 compares the eﬃciency of our scheme given in Section 3 with other
provably-secure schemes that provide forward secrecy [7, 14]. As for computa-

496

J. Nam et al.

tional costs, the table lists the total amount of computation that needs to be
done by users. As shown in the table, the scheme of [7] requires n communication rounds for initial key exchange which occurs at the time of group genesis,
and j communication rounds for the rekeying operation that follows the joining
of j new users. The protocol of [14], as already mentioned, requires n broadcast messages to be sent in each of three rounds, both for initial key exchange
and for every group rekeying operation. In contrast, our scheme takes at most 2
communication rounds while maintaining low message complexity, in any of the
three cases. Therefore, it is straightforward to see that our dynamic group key
exchange scheme is well suited for networking environments with high communication latency. In particular, due to its computational asymmetry, our scheme
is best suited for unbalanced networks consisting of mobile hosts with restricted
computational resources and stationary hosts with relatively high computational
capabilities.

2

Security Definitions

In this section, we ﬁrst deﬁne what it means to securely distribute a session key
within the security model given above and then explore the underlying assumptions on which the security of our scheme rests.
Authenticated Group Key Exchange. The security of an authenticated
group key exchange scheme P is deﬁned in the following context. The adversary
A, equipped with all the queries described in the security model, executes the
protocols IKE1, LP1, and JP1 as many times as she wishes in an arbitrary
order, of course, with IKE1 being the ﬁrst one executed. During executions of
the protocols, the adversary A, at any time, asks a Test query to a fresh user,
gets back an -bit string as the response to this query, and at some later point
in time, outputs a bit b as a guess for the secret bit b. Let Good-Guess be the
event that the adversary A correctly guesses the bit b, i.e., the event that b = b.
Then we deﬁne the advantage of A in attacking P as
AdvA
P (k) = 2 · Pr[Good-Guess] − 1,
where k is the security parameter. We say that a group key exchange scheme P is
secure if AdvA
P (k) is negligible for any probabilistic polynomial time
adversary A.
Secure Signature Schemes. We review here the standard deﬁnition of a digital
signature scheme. A digital signature scheme Γ = (G, S, V) is deﬁned by the
following triple of algorithms:
– A probabilistic key generation algorithm G, on input 1k , outputs a pair of
matching public and private keys (P K, SK).
– A signing algorithm S is a (possibly probabilistic) polynomial time algorithm
that, given a message m and a key pair (P K, SK) as inputs, outputs a
signature σ of m.

Practical and Provably-Secure Multicasting

497

– A verification algorithm V is a (usually deterministic) polynomial time algorithm that on input (m, σ, P K), outputs 1 if σ is a valid signature of the
message m with respect to P K, and 0 otherwise.
We denote by SuccA
Γ (k) the probability of an adversary A succeeding with an
existential forgery under adaptive chosen message attack [11]. We say that a
signature scheme Γ is secure if SuccA
Γ (k) is negligible for any probabilistic polynomial time adversary A. We denote by SuccΓ (t) the maximum value of SuccA
Γ (k)
over all adversaries A running in time at most t.
Factoring Assumption. Let FIG be a factoring instance generator that on
input 1k , runs in time polynomial in k and outputs a 2k-bit integer N = p · q,
where p and q are two random distinct k-bit primes such that p ≡ q ≡ 3 (mod 4).
Then, we deﬁne SuccA
N (k) as the advantage of adversary A in factoring N = p · q
chosen from FIG(1k ). Namely,
k
SuccA
N (k) = Pr[A(N ) ∈ {p, q} | N (= pq) ←− FIG(1 )].

We say that FIG satisﬁes the factoring assumption if for all suﬃciently large
k, SuccA
N (k) is negligible for any probabilistic polynomial time adversary A.
Similarly as before, we denote by SuccN (t) the maximum value of SuccA
N (k) over
all adversaries A running in time at most t.

3

The Proposed Scheme

We now present a dynamic group key exchange scheme consisting of three protocols IKE1, LP1, and JP1 for initial group formation, user leave, and user join,
respectively.
Let N be any possible output of FIG(1k ) and let g = 1 be a quadratic residue
that is chosen uniformly at random in the set of quadratic residues in Z∗N , where
Z∗N is the multiplicative group modulo N . Then, we deﬁne the ﬁnite group G,
over which we must work, to be the cyclic subgroup of Z∗N generated by g. For
the rest of this paper, we denote by Uc the controller in a multicast group MG,
and by H : {0, 1}∗ → {0, 1} a hash function modelled as a random oracle in the
security proof of the scheme. For simplicity, we will often omit “mod N ” from
expressions if no confusion arises.
3.1

Initial Key Exchange: Protocol IKE1

Assume a multicast group MG = {U1 , U2 , . . . , Un } of n users who wish to establish a session key by participating in protocol IKE1. Then IKE1 runs in two
rounds, one with n − 1 unicasts and the other with a single broadcast, as follows:
1. Each Ui picks a random ri ∈ [1, N ] and computes zi = g ri mod N . Ui = Uc
then signs Ui zi to obtain signature σi and sends mi = Ui zi σi to the
controller Uc .

498

J. Nam et al.

2. Upon receiving each message mi , Uc veriﬁes the correctness of mi and computes yi = zirc mod N . After receiving all the n − 1 messages, Uc computes
Y as Y = i∈[1,n]\{c} yi mod N if n is even, and as Y = i∈[1,n] yi mod N
if n is odd. Uc also computes the set T = {Ti | i ∈ [1, n] \ {c}} where
Ti = Y · yi−1 mod N . Let Z = {zi | i ∈ [1, n]}. Then, Uc signs MG Z T to
obtain signature σc and broadcasts mc = MG Z T σc to the entire group.
3. Upon receiving the broadcast message mc , each Ui = Uc veriﬁes the correctness of mc and computes Y = zcri · Ti mod N . All users in MG compute their
session key as K = H(T Y ), and store their random exponent ri and the
set Z for future use.
To take a simpliﬁed example as an illustration, consider a multicast group
MG = {U1 , U2 , . . . , U5 } and let Uc = U5 . Then, in IKE1, the controller U5
receives {g r1 , g r2 , g r3 , g r4 } from the rest of the users, and broadcasts Z = {g r1 ,
g r2 , g r3 , g r4 , g r5 } and T = {g r5 (r2 +r3 +r4 +r5 ) , g r5 (r1 +r3 +r4 +r5 ) , g r5 (r1 +r2 +r4 +r5 ) ,
g r5 (r1 +r2 +r3 +r5 ) }. All users in MG compute the same key: K = H(T Y ), where
Y = g r5 (r1 +r2 +r3 +r4 +r5 ) .
3.2

User Leave: Protocol LP1

Assume a scenario where a set of users L leaves a multicast group MG p . Then
protocol LP1 is executed to provide each user of the new multicast group MG n =
MG p \ L with a new session key. Any remaining user can act as the controller
in the new multicast group MG n . LP1 requires only one communication round
with a single broadcast and it proceeds as follows:
1. Uc picks a new random rc ∈ [1, N ] and computes zc = g rc mod N . Using rc ,
zc and the saved set Z, Uc then proceeds exactly as in IKE1, except that
it broadcasts mc = MG n zc zc T σc where zc is the random exponential
from the previous controller.
2. Upon receiving the broadcast message mc , each Ui = Uc veriﬁes that: (1)
V(MG n zc zc T , σc , P Kc ) = 1 and (2) the received zc is equal to the random exponential from the previous controller. All users in MG n then compute their session key as K = H(T Y ) and update the set Z.
We assume that in the previous example, a set of users L = {U2 , U4 } leaves the
multicast group MG p = {U1 , U2 , . . . , U5 } and hence the remaining users form
a new multicast group MG n = {U1 , U3 , U5 }. Also assume that U5 remains as
the controller in the new multicast group MG n . Then U5 chooses a new random
value r5 , and broadcasts z5 , z5 = g r5 , and T = {g r5 (r3 +r5 ) , g r5 (r1 +r5 ) }. All users
in MG n compute the same key: K = H(T Y ), where Y = g r5 (r1 +r3 +r5 ) .
3.3

User Join: Protocol JP1

Assume a scenario in which a set of j new users J joins a multicast group MG p
to form a new multicast group MG n = MG p ∪ J . Then the join protocol JP1 is
run to provide the users of MG n with a session key. Any user from the previous

Practical and Provably-Secure Multicasting

499

multicast group MG p can act as the controller in the new multicast group MG n .
JP1 takes two communication rounds, one with j unicasts and the other with a
single broadcast, and it proceeds as follows:
1. Each Ui ∈ J picks a random ri ∈ [1, N ] and computes zi = g ri mod N .
Ui ∈ J then generates signature σi of Ui zi , sends mi = Ui zi σi to Uc , and
stores its random ri .
2. Uc proceeds in the usual way, choosing a new random rc , computing zc , Y , T
and K = H(T Y ), updating the set Z with new zi ’s, and then broadcasting
mc = MG n zc Z T σc .
3. After verifying the correctness of mc (including the veriﬁcation by Ui ∈
MG p \ {Uc } that the received zc is equal to the random exponential from
the previous controller), each Ui = Uc proceeds as usual, computing Y =
r
z ci · Ti mod N and K = H(T Y ). All users in MG n store or update the set
Z.
Consider the same example as used for LP1 and assume that a set of users
J = {U2 } joins the multicast group MG p = {U1 , U3 , U5 } to form a new multicast
group MG n = {U1 , U2 , U3 , U5 }. Also assume that controller Uc = U5 remains
unchanged from MG p to MG n . Then, U5 receives {g r2 } from the users in J ,
and broadcasts z5 , Z = {g r1 , g r2 , g r3 , g r5 } and T = {g r5 (r2 +r3 ) , g r5 (r1 +r3 ) ,
g r5 (r1 +r2 ) } to the rest of the users, where r5 is the new random exponent of
controller U5 . All users in MG n compute the same key: K = H(T Y ), where
Y = g r5 (r1 +r2 +r3 ) .

4

Security Result

Theorem 1. Let the number of potential participants be bounded by a polynomial function pu (k) of the security parameter k. Let AdvP (t, qse , qh ) be the
maximum advantage in attacking P , where the maximum is over all adversaries
that run in time t, and make qse Send queries and qh random oracle queries.
Then we have
AdvP (t, qse , qh ) ≤ 2 · SuccN (t ) + 2pu (k) · SuccΓ (t ),
where t = t + O(qse pu (k)texp + qh texp ), t = t + O(qse pu (k)texp ), and texp is the
time required to compute a modular exponentiation in G.
In the following, we brieﬂy outline the proof of Theorem 11 . The proof is
divided into two cases: (1) the case that the adversary A breaks the scheme by
forging a signature with respect to some user’s public key, and (2) the case that
A breaks the scheme without forging a signature. We argue by contradiction,
assuming that there exists an adversary A who has a non-negligible advantage in
1

The complete proof of the theorem is omitted here due to lack of space, and is given
in the full version of this paper, which is available at http://eprint.iacr.org/2004/115.

500

J. Nam et al.

attacking P . For the case (1), we reduce the security of scheme P to the security
of the signature scheme Γ , by constructing an eﬃcient forger F who given as
input a public key P K and access to a signing oracle associated with this key,
outputs a valid forgery with respect to P K. For the case (2), the reduction is
from the factoring problem; given the adversary A, we build an eﬃcient factoring
algorithm B which given as input N = p·q generated by FIG(1k ), outputs either
p or q.

References
1. D.A. Agarwal, O. Chevassut, M.R. Thompson, and G. Tsudik: An Integrated Solution for Secure Group Communication in Wide-Area Networks. In Proc. of 6th
IEEE Symposium on Computers and Communications, pp. 22–28, 2001.
2. Y. Amir, Y. Kim, C. Nita-Rotaru, and G. Tsudik: On the Performance of Group
Key Agreement Protocols. ACM Trans. on Information and System Security, vol.7,
no.3, pp. 457–488, August 2004.
3. K. Becker, and U. Wille: Communication complexity of group key distribution.
In Proc. of 5th ACM Conf. on Computer and Communications Security, pp. 1–6,
1998.
4. M. Bellare, D. Pointcheval, and P. Rogaway: Authenticated key exchange secure
against dictionary attacks, Eurocrypt’00, LNCS 1807, pp. 139–155, 2000.
5. M. Bellare and P. Rogaway: Random oracles are practical: A paradigm for designing eﬃcient protocols. In Proc. of 1st ACM Conf. on Computer and Communications Security (CCS’93), pp. 62–73, 1993.
6. C. Boyd and J.M.G. Nieto: Round-optimal contributory conference key agreement.
PKC2003, LNCS 2567, pp. 161–174, 2003.
7. E. Bresson, O. Chevassut, and D. Pointcheval: Provably authenticated group DiﬃeHellman key exchange — the dynamic case. Asiacrypt’01, pp. 290–309, 2001.
8. E. Bresson, O. Chevassut, and D. Pointcheval: Dynamic group Diﬃe-Hellman key
exchange under standard assumptions. Eurocrypt’02, pp. 321–336, 2002.
9. E. Bresson, O. Chevassut, D. Pointcheval, and J.-J. Quisquater: Provably authenticated group Diﬃe-Hellman key exchange. In Proc. of 8th ACM Conf. on Computer
and Communications Security, pp. 255–264, 2001.
10. M. Burmester and Y. Desmedt: A secure and eﬃcient conference key distribution
system. Eurocrypt’94, LNCS 950, pp. 275–286, 1994.
11. S. Goldwasser, S. Micali, and R. Rivest, “A digital signature scheme secure against
adaptive chosen-message attacks. SIAM Journal of Computing, vol.17, no.2, pp.
281–308, 1988.
12. Y. Kim, A. Perrig, and G. Tsudik: Simple and fault-tolerant key agreement for
dynamic collaborative groups. In Proc. of 7th ACM Conf. on Computer and Communications Security, pp. 235–244, 2000.
13. Y. Kim, A. Perrig, and G. Tsudik: Communication-eﬃcient group key agreement.
In Proc. of International Federation for Information Processing — 16th International Conference on Information Security (IFIP SEC’01), pp. 229–244, June 2001.

Practical and Provably-Secure Multicasting

501

14. J. Katz and M. Yung: Scalable protocols for authenticated group key exchange.
Crypto’03, LNCS 2729, pp. 110–125, August 2003.
15. J. Nam, S. Cho, S. Kim, and D. Won: Simple and eﬃcient group key agreement
based on factoring. In Proc. of the 2004 International Conference on Computational
Science and Its Applications (ICCSA 2004), LNCS 3043, pp. 645–654, May 2004.
16. M. Steiner, G. Tsudik, and M. Waidner: Key agreement in dynamic peer groups.
IEEE Trans. on Parallel and Distrib. Syst., vol.11, no.8, pp. 769–780, August 2000.

