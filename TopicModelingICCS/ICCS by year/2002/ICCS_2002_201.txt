Field Similarity Algorithm
Sung Sam Yuan, Li Zhao,Lu Chun and Sun Peng
School of Computing
National University of Singapore
3 Science Drive 2, Singapore 117543
{ssung,lizhao,luchun,sunpeng1}@comp.nus.edu.sg
tel: (65)8746148

Qi Xiao Yang
Institute of High Performance of Computing
89B Science Park Drive#01-05/08 the Rutherford
Singapore 118261
qixy@ihpc.nus.edu.sg
tel: (65)7709265

1. Introduction
Data mining techniques are well accepted for discovering
potentially useful knowledge from the large datasets. Our
past research work on studying aspects of data mining
includes improving the performance of the rule generation
[SS95, SWC96], extending the scope of association rule
mining [RSC99] and data generation [SLL96]. Prior to
data mining process, data cleaning is essential in that the
quality of rules derived from the mining process is subject
to the quality of data. Recently, significant attention is paid
to record de-duplication----an important branch of data
cleaning. Various reasons are behind different
representations of identical record: typographical errors,
purposeful entry of false names, inconsistent data formats,
incomplete information and registrant moving from one
place to another. [LL+99] is a milestone paper in the area
of record de-duplication. Experiments on real-world data
demonstrate that the methods of de-duplicate records
presented in [LL+99] are efficient. Further study indicates
that there is still room for improvement in the core part of
its whole technology---- the algorithm of the calculation of
the Field Similarity. Our paper is to introduce a new
algorithm to calculate Field Similarity. Theoretical
analysis, concrete examples and experimental result show
that our algorithm can significantly improve the accuracy
of the calculation of Field Similarity.

About the calculation of degree of similarity of words--DoS:
• If two words are exactly the same, the degree of
similarity between these two words is 1.
• If there is a total of x characters in the word, then we
deduct

each character that is not found in the other word. For
example, if we compare "kit" and "quit", then DoS kit =1-

1
=0.67 since the character k in "kit" is not found in "quit"
3
2
and DoS quit =1- =0.5 since the characters q and u in
4
"quit" are not found in "kit".
Exercise: compute the Field Similarity of the filed
"address" of record 1and 2 in table 1.
Record
Name
Address
1
2

1.

The rest of the paper is organized as follows. Section 2
gives a background description of the algorithm of
calculating Field Similarity presented in [LL+99]. Section
3 proposes our algorithm of calculating Field Similarity 2.
and exhaustively compares the new algorithm with the
previous one. Section 4 provides an experiment to prove
the performance improvement with the introduction of the
new algorithm.
3.

2.Preliminary Background

1
from the maximum degree of similarity of 1 for
x

This section gives a brief description of the algorithm to
calculate Field Similarity presented in [LL+99].

Qi Xiao Yang
129 Industry Park
Qi Xiao Yang
129 Indisttry Park
Table 1 calculation of degree of similarity of words
The degree of similarity between "129" and "129" is 1,
between "129" and "Indisttry" is 0, between "129" and
"Park " is 0. So according to the above rule, DoS129 R1
=1. (DoS should be the maximum)
The degree of similarity between "Industry" and "129"
is 0, between "Industry" and "Indisttry" is 1-

1
=0.875,
8

between "Industry" and "Park " is 0. So according to
the above rule, DoSIndustry R1 =0.875.
In the same way, we will obtain the following:

DoSPark R1 =1, DoS129 R 2 =1, DoSIndisttry R 2
2
=1- =0.778, DoSPark R 2 =1
9

Let a field in record X have words Ox1, Ox2,….., Oxn and
the corresponding field in record Y have words Oy1, 4. When Formula 1 is employed, the address Field
Oy2,……, Oym. Each word Oxi ,1 ≤ i ≤ n is compared with
Similarity for R1 and R2 can be obtained as:
n
m
words Oyj, 1 ≤ j ≤ n. let DoSx1, DoSx2,….., DoSxn, DoSy1,
DoS xi + j =1 DoS y j
i =1
DoSy2,….., DoSym be the maximum of the degree of
SIMF(X,Y)=
=
similarities for words Ox1, Ox2,….., Oxn, Oy1, Oy2,……,
n+m
Oym respectively. Then the Field Similarity for record X
1 + 0.875 + 1 + 1 + 0.778 + 1
n
m
=0.942
DoS +
DoS

∑

and Y SIMF(X,Y) =

∑

i =1

xi

∑

n+m

j =1

yj

∑

6

(1)

3 Proposed new Field Similarity algorithm
1

This section proposes a new algorithm----Moving Field 1
abc de
Contracting Window Pattern Algorithm (MCWPA) to Field 2
abc k de
calculate Field Similarity. Firstly, we give the definition of
The process of calculating SSNC with MCWPA is shown
window pattern. All characters as a whole within the
is figure 2 in detail (next page).
window constitute a window pattern. Take a string
"abcde" as an example, when the window is sliding from
SSNC
(2 * 4) 2 + (2 * 2) 2 
F(X,Y)=
SIM
=
the left to the right with the window size being 3, the series
( n + m) 2
(6 + 8) 2
of window patterns obtained are "abc", "bcd" and "cde".
Exercise what is the Field Similarity between the field1
Let a field in record X have n characters (including blank "abcd" and field2 "abcd"? (the answer is 100%.)
space or comma, this applies to the following) and the
corresponding field in record Y have m characters. w 3.1 Analysis and Comparison of Two Algorithms
represents window size, Fx represents the field of record X of Field Similarity
and Fy represents the field of record Y. The Field This section will give some examples to show that
Similarity for record X and Y is
MCWPA can overcome some drawbacks that exist in the
previous algorithm of the Field Similarity. Also the logic
SSNC
SIMF(X,Y)=
(2) behind the design of MCWPA is presented.
2

( n + m)

SSNC represents the Sum of the Square of the Number of Example 2: calculate the following Field Similarity with
the same Characters between Fx and Fy. SIMF(X,Y) the above two algorithms.
approximately reflects the ratio of the total number of the Field 1
ex ex ex ex ex ex ex ex ex ex
common characters in two fields to the total number of Field 2
ab ab ab ab ab ab ab ab ab ex
characters in two fields.
With the previous algorithm,
The following algorithm (MCWPA) is to calculate SSNC.
n
m
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.

15.
16.
17.

18.
19.

SIMF(X,Y) =

w= the smaller of n and m;
SSNC=0;
Fs=the smaller of Fx and Fy;
window is placed on the leftmost position;
while ((window size is not 0) or (still some
characters in Fs are accessible))
{
while (window right border does not exceed
the right border of the Fs )
{
if ( the window pattern in Fx has the
same pattern anywhere in Fy )
{

∑

i =1

DoS xi + ∑ j =1 DoS y j
n+m

=

11
>50%
20

With MCWPA,
SIMF(X,Y) =

SSNC
=
( n + m) 2

(2 * 3) 2
3 	

=
2
29
(2 * 29)

Obviously, the two fields are quite different, only 10%
common characters. However, the result of the previous
algorithm shows that these two fields have 50% similarity.
In contrast, the result of MCWPA is about 10%, which is
quite close to the expectation.
Analysis: This example shows that there is a drawback for
the previous algorithm. In it, DoSx1, DoSx2,….., DoSxn,
DoSy1, DoSy2,….., DoSym are the maximum of the degree
of similarities for words Ox1, Ox2,….., Oxn, Oy1, Oy2,……,
Oym respectively. If quite a number of words in one field
are similar to only one word in the other field and
dissimilar to other words, the previous algorithm will give
inaccurate result. MCWPA overcomes this problem by
marking the same characters in two fields as inaccessible
so as to avoid revisiting.

2

SSNC= SSNC +(2w) ;
mark the pattern characters in Fx and
Fy as inaccessible characters to avoid revisiting;
}
move window rightward by 1 (if the
window left border is on an inaccessible character,
move window rightward by 2 and so on and so
forth)
}
w=w-1;
window is placed on the leftmost position
where the window left border is on an accessible
character;
}
return SSNC;
Figure 1 MCWPA algorithm

Example 3: calculate the following Field Similarity for
two cases with the above two algorithms.
Case1:
Field 1
de  abc
Field 2
Case2:
Field 1

de  abc
abc  de

The following example is provided to illustrate how to
de  abc
calculate the Field Similarity with MCWPA and With the previous algorithm for case 1: SIMF(X,Y) =1,
formula(2).
for case2: SIMF(X,Y)=1
With MCWPA for case 1:
Example 1: calculate the following Field Similarity.
Field 2

2

Figure 2 The process of calculating SSNC with MCWPA for example 1
previous algorithm suggest that the previous algorithm

(2 * 6) 2
SSNC
=
=1,
( n + m) 2
(6 + 6) 2

considers "abc  de" and "de  abc" in case 2 the same. This
disagrees with our common sense. In the following
experiment section, we will show that this is fatally
erroneous in some dataset with Chinese names. Further
for case 2:
study of the previous algorithm shows that the adoption of
word as basic unit results in its inability to distinguish
2
2
(2 * 3) + (2 * 2)
SSNC
between two exactly the same fields and two fields with
SIMF(X,Y) =
=
the same words in different sequences. To improve the
( n + m) 2
(6 + 6) 2
accuracy, MCWPA uses the character as the unit. In this

example, if the unit is word, both case 1 and case 2 have
=0.6
two same words. In contrast, if the unit is character, case 1
Note: for case1, two algorithms produce the same result.
has 6 same characters and case 2 has 5 same characters. As
Analysis: Clearly, the similarity in case 1 should be higher
expected, SIMF(X,Y) in case 1 is larger than SIMF(X,Y) in
than that in case 2. However, the same results based on the
case 2 when MCWPA is employed.
SIMF(X,Y) =

3

Example 4: calculate the following Field Similarity for
two cases with the above two algorithms.
Case1:
Field 1
Fu Hui
Field 2
Mr Fu Hui
Case2:
Field 1
Fu Hui
Field 2
Fu Mr Hui
With the previous algorithm for case 1: SIMF(X,Y) =80%,
for case 2: SIMF(X,Y) =80%,
With MCWPA for case 1:
SIMF(X,Y) =

Because every word in one field needs to be compared
with every word in the other field to find the maximum
2

DoS, the complexity is O(W ). The complexity of
determining whether every character in one word is in the
other word is O((

calculated. Therefore, the total time complexity of
calculation of Field Similarity by the previous algorithm is
2

2*O(W )*O((

For MCWPA:
For worst case, that means, there is no common characters
between two filed, so we can never mark some characters
to avoid revisiting.

(2 * 2) 2 + (2 * 4) 2 
SSNC
=
( n + m) 2
(6 + 9) 2

2

When the window size is N, the complexity is O(1 ).
2

When the window size is N-1, the complexity is O(2 ).

Note: for case1, two algorithms produce the same result.
Analysis: Intuitively, in case 1, "Fu Hui" and "Mr Fu Hui"
should be the same person. In case 2, the likelihood exists
that due to transposition error, originally "Fu Mr Hui"
should be " Mr Fu Hui". However, in more likelihood, due
to typographical errors, originally "Fu Mr Hui" should be "
Fu Mi Hui" or "Fu Ma Hui", etc. Factually, the two
common words "Fu Hui" in field 2 of case 1 are
continuous. In contrast, in field 2 of case 2, they are
interpolated by another word "Mr", hence the similarity
between two fields is severely reduced. Thus intuitively
and factually two fields in case 1 should be more similar
than those in case 2. However, the previous algorithm
gives the same results for case 1 and case 2. In contrast, the
results based on MCWPA show that the similarity for case
1 is reasonably higher than that for case 2. With respect to
characters, both case 1 and case 2 have 6 common

2

When the window size is 1, the complexity is O(N ).
To improve the efficiency of MCWPA, we introduce the
concept of Execution-Termination Window Size Threshold
(ETWST). With the introduction of ETWST, for the worst
2

2

2

2

case, the time complexity is 1 +2 +…..+(ETWST*N) .
For example, if the ETWST is 0.5, the program ends when
the window size reaches 0.5N and the time complexity is
2

2

2

1 +2 +…..+(0.5*N) for the worst case. In practice,
usually SIMF(X,Y) threshold is specified by the user to
determine whether two fields are duplicate. The time
complexity then can be immensely reduced. The
characteristic of MCWPA is that it picks out the longer
matching strings at earlier stage. To reduce the time
complexity while still achieving the user-specified
SIMF(X,Y) threshold because of the above characteristic,
we make a reasonable omission of bigger window size
processing and directly jump to ETWST. Consequently,
MCWPA algorithm presented in Figure 1 can be simplified
as detecting whether there are matching strings between
two fields with length being ETWST*N, correspondingly,
2
the total time complexity is reduced to (ETWST*N) . The
following presents how to get ETWST with the userspecified SIMF(X,Y) threshold.
With formula 2,

characters ("Fu" "  Hui"). According to example 3, even
MCWPA can not distinguish case1 from case 2. Further
examination of the two cases reveals that in field 2 of case
1, these 6 characters are continuous while in field 2 of case
2, they are not. In order to reflect the difference in terms of
continuity despite the same number of common characters,
MCWPA introduces the square to the calculation of
SIMF(X,Y). In the calculation of SIMF(X,Y) in example 4
with MCWPA, the fundamental reason that the result of
2

N 2
) ), no matter it is worst case or
W

average case.

(2 * 6) 2
SSNC
=
=80%,
( n + m) 2
(6 + 9) 2
for case 2:

SIMF(X,Y) =

N 2
) ). Both fields need to be
W

2

case1 is larger than that of case2 is because 6 > 2 +4 .
Mathematically, it is easily seen that the square of the sum
of numbers is larger than the sum of the square of numbers,

2
2
2
2
SSNC
(2 * ETWST * N ) 2
that
is,
(a+b+….+n) >a +b +……+n ,
(if SIMF(X,Y)=
=
=ETWST
a ≠ b….. ≠ n ≠ 0). In this way, the introduction of square
( N + N )2
( n + m) 2
in the calculation of SIMF(X,Y) can overcome the
So,
continuity problem which leads to the inaccurate result for
ETWST= SIMF(X,Y)
(3)
the previous algorithm.

Example 5: compare the number of operations involved in

3.2 The Comparison of Time Complexity between determining whether two fields are duplicate by two
two Algorithms
algorithms if the SIMF(X,Y) threshold is 0.8.
For pedagogical reasons, suppose we have two fields with Field 1
abcdefgh ijklmnpo
the same number of words (W) and same number of Field 2
abcdefgh ijklmnwo
characters (N).
With the previous algorithm:
For the previous algorithm:
4

According to the above analysis, the total number of
16 2
2
operations is 2*2 *(
) =512 (2 words for each field).
2
With MCWPA:
With formula 3:
ETWST= SIMF(X,Y)=0.8

So, the Execution-Termination Window Size is 0.8*17
(total 17 characters) As mentioned before, simplified
MCWPA algorithm skips bigger size window and only
uses window size 14 to detect whether there is matching
strings. Since the matching strings “abcdefgh ijklmn” are
15-character-long, the algorithm can find the matching
strings “abcdefgh ijklm” in the first step and come to the
conclusion that these two fields are duplicate. So the total
number of operations is 1. Analysis: Even though the
SIMF(X,Y) threshold is not specified, the ETWST still can
be used because of the following two reasons:
• The contribution of short matching patterns is
insignificant to the calculation of SSNC, because
SSNC=SSNC+(2w) 2 . (see figure 1, w is the length of
the current window) For example 5, while the
contribution of the matching string “abcdefgh ijklmn”
to SSNC is (2*15) 2 =900, that of the matching string
“o” is only (2*1) 2 =4! In fact, even though two fields
have some short matching patterns, there is no reason
to believe that the two fields are similar. For example,
although "ab cd ef" and "fa ce db" have 6 1-characterlong matching patterns, ("a","b","c","d","e","f")
intuitively, they are totally dissimilar.
• Based on the above analysis of time complexity of
MCWPA in the beginning of section 3.2, it can be
seen that the smaller the window size is, the higher the
time complexity is. For the window size 1, the

Both algorithms are applied to two test datasets. The first
dataset is a merger of two datasets that come from two
campus surveys conducted through an electronic form
within a mass-sent email. The dataset has 782 records. The
second dataset is a company dataset containing 938
records. We compare two algorithms by two criteria: 1)
Miss Detection (duplicate records are not detected) and
2)False Detection (similar non-duplicate records are treated
as duplicate records). The results are presented in the
following diagrams:

Figure 3 experiment on campus survey dataset

Figure 4 experiment on company dataset

Analysis: Experimental results on two datasets
consistently indicate that with regard to Miss Detection,
the two algorithms perform roughly the same. However, in
terms of False Detection, MCWPA performs much better
than the previous algorithm. Further study of the testing
dataset shows that in the name field, there are some similar
non-duplicate names such as "Gao Hua Ming" and "Gao
Ming Hua". As analyzed in the example 3, the previous
algorithm treats two fields with the same words in different
sequences as the matching fields. Thus the high False
Detection rate for the previous algorithm begins to make
sense. In addition, there are also some similar cases that the
previous algorithm treats some names such as "zeng hong"
and "zeng zeng" the same. As analyzed in the example 2,
MCWPA identifies a large difference in the calculation of
Field Similarity between this type of two fields. Generally,
from several examples we presented above, the previous
algorithm tends to over-evaluate the SIMF(X,Y), while
MCWPA does not. We observe from both experiments that
MCWPA is roughly equally effective across the entire
range of SIMF(X,Y) threshold. As opposed to this, the
False Detection rate based on the previous algorithm
increases significantly as the SIMF(X,Y) threshold
becomes lower and lower. The Miss Detection diagrams
show that both algorithms can only perform well in the low
SIMF(X,Y) threshold region. However, the False Detection
diagrams indicate that in the low SIMF(X,Y) threshold
region, the False Detection rate from the previous
algorithm is unacceptably high. This means, with the
previous algorithm, if we choose low SIMF(X,Y) threshold
to satisfy Miss Detection rate requirement, we will
inevitably obtain poor False Detection performance. This
conflict does not show itself in MCWPA.

2

complexity is O(N )! While for the window size N,
the complexity is O(1).
Exercise: compare the number of operations involved in
the calculation of Field Similarity by two algorithms.
Field 1
ab cd ef gh i n k l
Field 2
ab cd ef gh i m o l
With the previous algorithm:
According to the above analysis, the total number of
16 2
2
operations is 2*8 *(
) =512(8 words for each field).
8
With MCWPA:
• Without the employment of ETWST :
The total number of operations is 99 with SIMF(X,Y)
being 0.692.
• With the employment of ETWST=0.5 :
The total number of operations is 55 with SIMF(X,Y)
being 0.684. It can be seen that with the introduction of
ETWST, while the SIMF(X,Y) nearly does not change, the
number of operations can be reduced roughly by half.
Moreover, even without the employment of ETWST, the
number of operations for MCWPA is much less than that
for the previous algorithm, because the large number
derived from the analysis of time complexity presented in
the beginning of the section 3.2 only applies to the worst
case which this exercise is not.

4 Experiment Result
5

Conclusion
This paper has presented a new algorithm (MCWPM) for
the calculation of Field Similarity. In essence, MCWPM
improves the previous algorithm in the following aspects:
1) The introduction of marking the common characters as
inaccessible to avoid revisiting, which is presented in
example 2.
2) The adoption of the character as unit for the
calculation of Field Similarity instead of words to
improve accuracy, which is presented in example 3.
3) The introduction of square to the calculation of Field
Similarity to reflect the difference in terms of
continuity despite the same number of common
characters, which is presented in example 4.
4) The introduction of Execution-Termination Window
Size Threshold (ESWST) to achieve higher efficiency,
which is presented in example 5.
Theoretical analysis, concrete examples and experimental
result lead to the conclusion that our new algorithm
(MCWPM) can significantly improve the accuracy an
efficiency of the calculation of Field Similarity.
Reference
[LL+99] Mong Li Lee, Hongjun Lu, Tok Wang Ling and Yee Teng Ko. "Cleansing
data for mining and warehousing", In Proceedings of the 10th International
Conference on Database and Expert Systems Applications (DEXA99),pages 751760,August 1999.
[RSC99] K. Rajamani, S. Y. Sung and A Cox, "Extending the Applicability of
Association Rules", In Pacific Asia Knowledge Discovery and Data Mining
(PAKDD’99), Beijing, April, 1999, pp.64-73.
[SLL96] S. Y. Sung, H. Lu and Y.Lu, "On Generating Synthetic Database for
Classification", 1996 IEEE International Conference on Systems, Man, and
Cybernetics, Oct. 14-17, Beijing, China.
[SS95] S. Y. Sung and V. Shaw, "Mining Association Rules using Minimal Covers",
Proc. of the 1995 Inter. Joint Conf. on Information Sciences, NC, USA, September
28-30, 1995.
[SWC96] S. Y. Sung, K Wang and B L Chua, "Data mining in a large database
environment". In proceedings of 1996 IEEE International Conference on Systems,
Man and Cybernetics (SMC' 96), Beijing, China, pp. 988-993.Oct. 1996.

6

