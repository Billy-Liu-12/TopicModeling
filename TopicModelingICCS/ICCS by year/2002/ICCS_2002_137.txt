About Estimation Software Reliability Using
Musa Basic Execution Time Model
Mihai Popescu 1 0HGD7UX
1

2

2

, Marin S. Bic

1

3

, Gherasim Zenovic

Military Technical Academy, Computer Science and Control Systems
Department, Bdul George &RÃºEXFNr. 81-83, Sector 5
Bucharest, Romania

National Academy of Informatics, Department of Social-Human Science and
Communications, Bucharest, Romania
3

$FDGHP\IRU+LJK0LOLWDU\6WXGLHVÃ¹RVHDXD3DQGXUL1U%XFKDUHVW

Romania

Abstract: This model has a large application for engineers and managers in
software reliability management. It provides an intuitively appealing and a good
conceptual framework for the testing process. The execution time component
assumes that failures occur as a random process, to be specific a nonhomogeneous Poisson process; this implies that failure intensity varies with
time, because the faults are introduced and removed in the testing
process(imperfect debugging).

1. Introduction
Musa developed two models: execution time model(what refers time Ï„) and calendar
time model(that relate Ï„ to t). Execution time model treats software failure as a NonHomogeneous Poisson Process(NHPP).
The counting process {M(Ï„,Ï„>=0) is the total number of software failures in the
execution time interval [0, Ï„).
The mean value function represents the expected cumulative number of failures
in the interval:
Âµ(t)=E{M(Ï„)

(1)

The failure rate is defined as:
d Âµ (Ï„ )
(2)
dÏ„
When the program code is frozen and the operational profile is stationary, the
software has a constant failure rate

Î» (Ï„ ) =

Î» (Ï„ ) = Î» , Ï„ >= 0
resulting a homogeneous Poisson process.

(3)

The reliability function is the probability that the software will execute for
execution time Ï„ measured from Ï„0(one initial moment):
R(Ï„)=exp[-Î»Ï„], Ï„>Ï„0

(4)

In the Basic Execution Model, Î½0 is the total number of failures that would have
to occur to uncover all faults, including Ï‰0 faults that were present at the beginning of
system test(inherent faults) and any supplementary faults introduced into program by
imperfect correction activity[2,3]. In this model, the net number of faults removed per
failure is called the fault reduction factor B and it is related to the inherent faults and
total failures by relation
B=

Ï‰0
Î½0

(5)

The initial failure rate, at the start of system test, is denoted Î»0. The contribution
of each fault to the overall program failure rate is called the per-fault hazard rate,
denoted Ï† and his expression is:

Ï†=

Î»0
Ï‰0

(6)

Because B faults are removed per failure occurrence, the failure rate declines by
Î²=B Ï† upon each failure.
If n is the expected number of failures at time Ï„, then the overall program failure
rate is:
Î»(Ï„)=Î²(Î½0-Âµ(Ï„))

(7)

Since

Î» (Ï„ ) =

d Âµ (Ï„ )
dÏ„

(8)

By substituting (7) in (8), it results:
d Âµ (Ï„ )
= Î²Ï…0 âˆ’ Î²Âµ (Ï„ ) = BÏ†Ï…0 âˆ’ BÏ†Âµ (Ï„ )
dÏ„

â‡’

dÂµ
+ BÏ†Âµ = BÏ†Ï…0 ;Ï… (0) = 0
dÏ„

that means at Ï„0 no failures exists.
(9) is a differential linear non-homogeneous equation(order I), with the solution:
Âµ=Âµo+Âµp
Âµo is obtained from the homogeneous equation:

(9)

dÂµ
+ BÏ†Âµ = 0. â‡’
dÏ„

â‡’ lnÂµ=-BÏ†Ï„+lnC â‡’Âµo=exp[lnC] exp[-BÏ†Ï„]=Cexp[-BÏ†Ï„].

Âµp is determinated by the method of variation of constants. For this reason we suppose
that C=C(Ï„) and we put the condition that Âµo to verify non-homogeneous equation (9):
Âµo=C(Ï„)exp[-BÏ†Ï„].

Since
d Âµo
= C â€™(Ï„ ) exp[âˆ’ BÏ†Ï„ ] âˆ’ C (Ï„ ) BÏ† exp[âˆ’ BÏ†Ï„ ] â‡’
dÏ„
C â€™(Ï„ ) exp[âˆ’ BÏ†Ï„ ] âˆ’ C (Ï„ ) BÏ† exp[âˆ’ BÏ†Ï„ ] + BÏ† C (Ï„ ) exp[âˆ’ BÏ†Ï„ ] = BÏ†Ï…0
C â€™(Ï„ ) = BÏ†Ï… 0 exp[ BÏ†Ï„ ]

â‡’

â‡’ C (Ï„ ) = Ï…0 exp[ BÏ†Ï„ ] + K

The general solution of equation is Âµ=C(Ï„)exp[-BÏ†Ï„]=(K+Î½0exp[BÏ†Ï„])exp[BÏ†Ï„]=Kexp[-BÏ†Ï„]+Î½0.
K is determinated by the condition Âµ(0)=0â‡’ K=-Î½0.
Finaly (the solution of problem Cauchy),
Âµ(Ï„)=Î½0(1-exp[-BÏ†Ï„])=Î½0(1-exp[-Î²Ï„])

(10)

Now, from equation (2), on substituting expression Âµ(Ï„) from equation (10), we
obtaine:

Î» (Ï„ ) = Î²Ï…0 exp[âˆ’ Î²Ï„ ]

(11)

2. Point Estimation of Model Parameters (Î² and Î½0)
The parameters Î² and Î½0, for the Basic Execution Time Model, are established based
on the history of software failure during system test with the method of maximum
likelihood estimation . This method chooses the values of Î² and Î½0 that maximize the
likelihood of obtaining the failure times that were observed.
During system test, the cumulative execution times Ï„1,Ï„ 2,â€¦,Ï„ ne at which failures
occur are recorded, where ne is the cumulative number of failures. The time when the
parameters are estimated is denoted Ï„e and may or may not coincide with the time Ï„ ne
of the last failure.
In [1] the equations for the estimation of the parameters Î² and Î½0 are:
ne
ne
neÏ„ e
âˆ’
âˆ’ âˆ‘Ï„ i = 0
Î² exp[ Î²Ï„ e âˆ’ 1] i =1

(12)

and, rounded to the nearest integer,

Î½0 =

ne
1 âˆ’ exp[âˆ’ Î²Ï„ e ]

(13)

Steps for the algorithm of calculation:
I. The failure identification personnel record the cumulative execution time, in
CPU seconds from beginning of system testing. These failure times are stored in a
table and denote the ordered failure times Ï„1,Ï„ 2,â€¦,Ï„ ne.
II. To obtain the current failure rate and reliability of the software, proceed with
these steps:
II.1 Record the current cumulative execution time, Ï„e, in CPU seconds since
the start of system testing.
II.2 Record the cumulative number of failures occurred from the start of
system testing, ne.
II.3 Substituting Ï„e and ne in the equation (12) the unknown parameter Î² is
determinated (using a root- finding procedure on a computer);
The parameter Î½0 is found by substituting Î² into equation (13) .
II.4 With the point estimates for Î² and Î½0, the failure rate of the software and
the reliability function are obtained using equations (11) and (4).

3. Example of Calculation
In this example, we consider eight software failures, so ne=8. The current cumulative
execution time is Ï„e=500.
The software failure times are show in table 1.
Table 1. The software failure times

Number of Failure(i)
1
2
3
4
5
6
7
8

Cpu Seconds(Ï„e)
10
25
47
140
180
285
360
474

To estimate the parameter Î², the equation (12) is resolved, where:
8

âˆ‘Ï„
i =1

i

= (10 + 25 + 47 + 140 + 180 + 285 + 360 + 474) = 1471.

So:
8
(8)(500)
âˆ’
âˆ’ 1471 = 0.
Î² exp[ Î² (500)] âˆ’ 1

The solution Î²=194.18*10-5 is obtained (the solution was obtained using a
method iterative which was written in Pascal).

Ï…0 =

8
â‰ˆ 12.87 ,
1 âˆ’ exp[âˆ’(194.18*10 âˆ’ 5)(500)]

which, rounded to the nearest integer, gives Î½0=13, and

Ï‡ (Ï„ e ) = Î²Ï…0 exp[âˆ’ Î²Ï„ e ]
The failure rate of the software is obtained as
=(194.18*10-5)(13)exp[-194.18*10-5*13)â‰…0.024
The reliability function is obtained (equation 4) as
R(Ï„)=exp[-Î»Ï„]=exp[-0.024Ï„].

4. Conclusions
The Musa execution time model offers useful quantities, such as date for attaining a
failure intensity or a reliability objectives. The primary reasons for selecting of this
model are:
- it is simple and easy to use[4,5];
- it makes predicts satisfactorily;
- it widely applied to software projects;
- its parameters can be related to information that exists anterior of the
execution of program and they have a physical interpretation.

References
1. Musa, J., D., Iannino, A., Okumoto, K., "Software Reliability-Measurement,
Prediction, Application", McGraw-Hill, New York, 1987.
2. Musa, J., D., "Software-Reliabilityâ€“Engineered Testing", in Computer, November,
1996, pg. 61-68.
3. System and Software Reliability Assurance Notebook, Produced for Rome
Laboratory, New York, 1997.
4. Schneidewind, N., F., Keller, T., W., "Application of Reliability Models to the
SpaceShuttle", IEEE Software, pg. 28-33, July 1992.
5. Rosenberg, L., Hammer, T., "Metrics for Quality Assurance and Risk Assessment",
Proc. Eleventh International Software Quality Week, San Francisco, 1998.

