The Development of a Grid based Engineering Design Problem Solving Environment.
A. D. Scurr1 and A. J. Keane
School of Engineering Sciences
University of Southampton.
1
{ads294@soton.ac.uk}
Abstract: This paper gives an overview of the grid based Engineering Design Problem Solving
Environment (PSE) being developed at Southampton University. This has been integrated with the
Engineering Design PSE using the Cardiff VCCE and XML component model. Essentially, VCCE forms a
GUI front-end to our PSE and provides the ability to setup and execute a computation by creating a task
graph from available components via drag and drop operations on a sketchpad display.
In order to provide an environment that more naturally meets the data-centric view of users, two major
enhancements to the PSE are planned. The first concerns scheduling and task farming. The ultimate goal is
to achieve within the PSE, an asynchronous computational workflow pattern where analysis tasks can seek
to exploit whatever computational resources are available in various workstation clusters. The second
enhancement concerns computational resource control and job control and the setting up of an Engineering
Design Grid Portal.

1.

Problem Solving Environments (PSEs) and Grid Portals

To enhance engineering insight, reduce development costs and improve product quality, engineering design studies are increasingly
using sophisticated analysis packages together with optimisation tools. The chief characteristics of these design studies are the need
to optimise a design where the analysis is very time consuming, where there are multiple methods or domains of analysis and where
we need to deploy distributed, cluster based computing systems. The use of PSE’s facilitates working on such problems. The
accepted definition of a PSE is: “A PSE is a computer system that provides all the computational facilities needed to solve a target
class of problems.” (J. Rice - Purdue University). Closely aligned with PSE development is the concept of grid computing and the
idea of a grid portal. A Grid Portal is an access point (usually a web browser page) designed to facilitate the use of a PSE in a
particular discipline by providing seamless access to the PSE’s range of computational tools, information and resources.
2.

PSE Components

P r o b le m S o lv in g E n v ir o n m e n t

P r o g r a m m in g

C om ponent
b a s e d (C O R B A 3
CCM )
V is u a l
p r o g r a m m in g
e n v ir o n m e n t
A p p l ic a t io n
d o m a in P D L

C o m p u ta tio n a l
s t e e r in g

S o lv e r s

I n t e l l ig e n c e

S o ftw a r e B u s

L ib r a r y C o d e s
( e . g . O p t io n s
DLL)

S e a r c h m e th o d
s e le c to r

G lu e t h a t b in d s
c o m p o n e n ts to g e th e r .

A p p lic a t io n
p a c k a g e s (F E A ,
C F D , e tc )

Search
p a r a m e te r s
a d v is o r

L o c a t io n &
in s t a n t ia t i o n
c o m p o n e n ts , to o ls , e tc ,
th r o u g h O R B

L e g a c y c o d e s ( e .g .
o ld e r F E A )

C a s e -b a s e d
r e a s o n in g ;

M a c h in e le a r n in g ;

E x p e r t s y s te m s

H a n d le s s e c u r it y ,
p e r s is t e n c e , d a t a b a s e
t r a n s a c t io n s , e t c
‘ D i s t r ib u t e d c o m p u t in g
t e c h n o lo g y ’ C O R B A ,
C O M +, R M I

E xpert
a s s is t a n t

A lt e r n a t iv e s ? : M o b ile
o b j e c t s /c o m p o n e n t s / a g e n t s

S o lv e r o b j e c t s
a n d w ra p p ers

V is u a liz a t io n a n d
g r a p h ic s

Figure 1: The main components of a generic PSE

The main sub-systems in a generic PSE (Figure 1.) include visual-programming environments for graphically composing, steering
and monitoring applications, various component wrapped analysers and solvers, an integrating software-bus (here CORBA) and
optionally one or more AI systems to assist the user formulate a computational strategy.
3.

Prototype Engineering Design PSE

Figure 2: VCCE drag and drop interface to Engineering Design PSE
We have developed a prototype PSE built around our Options [1] suite of search/optimisation programs and various CFD codes.
Our current Engineering Design PSE incorporates the Cardiff University Visual Component Composition Environment (VCCE) as
its front-end [2] and uses CORBA 2.3 as its distributed object middleware (software bus above). In Figure 2, components are
dragged from the Component Repository on the left column of a sketchpad display and dropped onto the canvas of the Component
Composition Tool on the right of the display. Components can then be joined together if their interfaces are compatible to form a
task graph. This defines the execution order and dependencies between the various components making up a job. For a component
to be available for use in VCCE, an XML definition of the component must be available in the Component repository. The
component’s XML definition is based on the Component Model defined in VCCE.
3.1

The Cardiff CORBA/XML Based Component Model

Figure 3: The CORBA/XML based component architecture used in VCCE [2]

A component in VCCE has five parts: a Listener, a Publisher, a Body, a CORBA IDL interface, and an XML interface.
• The Listener serves as a trigger to invoke the component, based on a unique component ID and the notion of an event service. It
receives requests from other components through the CORBA ORB. The Listener first receives data from the requesting
component, and then invokes the Body of the component. The Listener is the client side implementation of the component.
• The Publisher is used to send requests (events) to other components after the present component finishes its task. It is the
Publisher that sends data generated by the component of which it is a part to other components. The Publisher holds one or
more IDs of the components that will be invoked next.
• The Body is the server side implementation of a component. It carries out the useful work of the component. It receives input
from the Listener of the component, and it sends output to the Publisher of the component.
• A CORBA IDL interface is generated from the description of a component provided by its developer. It is used to generate
stubs for the Listener and Publisher, and skeletons for the Body of a component.
• An XML interface is also generated from the description of a component provided by its developer. It is used to store
information related to each component. From the XML interface, the properties of a component can be interrogated, or the
interface can be used to identify components of relevance to a given application.
In VCCE, a user can visually construct domain specific applications by plugging together software components written in various
languages provided that these legacy or third-party codes have been wrapped and installed in the VCCE as CORBA objects. Fortran
codes for instance, can be wrapped as CORBA objects with C/C++ wrappers.
The CORBA ORB is responsible for managing communication between components. Each component selected by a user is
registered with the Name Server, which allows the execution environment to identify the location of this component. The
Component Repository (CR) contains the XML interface of a component, but does not include the executable code (Body)
associated with it. Component executables can be subsequently located based on the references provided within the XML definition.
There are two kinds of information in the CR, one is static information about components in XML, and the other is run-time
information about components, which are currently running, obtained from the CORBA name service. Components can be
hierarchical, and may be created from a Template component, which identifies the use of a combination of components within a
given application. Components may also be generated directly by the user, or wrapped from legacy codes through the Wrapper
Generator.
3.2

Prototype Engineering Design PSE component structure

C lie n t A p p lic a t io n
(J a v a )

O p t io n s C O R B A O b j e c t
(G e n e r ic - C + + /C /F o r tr a n )
C + + w ra p p e r

P r o b le m d e fi n itio n
& s e t- u p O R
R e a d f r o m e x is ti n g
d a ta b a s e file

O P T D B S s e tu p
OR
G E N B A T file r e a d

O P T F U N /O P T C O N
C O R B A O b je c t
C + + w ra p p e r

O P T IO N S
searc h /
o p t im i z a tio n

C a llb a c k C O R B A O b je c t
(G e n e r ic - J a v a )

O P T F U N stu b
(O b je c t iv e fu n c ti o n )

O P T C O N s tu b

S e tu p

( C o n s tr a in ts )

S etu p
O PTFUN
( R e -c a l c u la te
O b je c ti v e fu n c tio n
f o r d e si g n v a r i a b l e s )

C a lc u l a t e
O b je c tiv e
C a llb a c k

OPTCON
( R e -c a l c u la te c o n st r a i n t s
fo r d e si g n v a r i a b l e s )

Options database

S o lv e

C a lc u l a t e
C o n s tr a i n t s
C a llb a c k

O p tio n s
s e a r c h /o p tim iz a tio n
pack age

A n a ly s is c o d e

Figure 4: The Engineering Design PSE component architecture
The Engineering Design PSE (Figure 4.) uses a component architecture based on CORBA objects (here, the terms CORBA Object
and component are synonymous) whose structure and functionality are defined in CORBA IDL interfaces. Optimisation is a

procedure that searches through the design domain for optimum designs. During the search, the optimiser continuously calls the
analysis code and, based on the results to date, decides on the next design point to evaluate. In the Engineering Design PSE, the
optimiser is contained in the Options CORBA Object and the analysis codes are contained in the OPTFUN/OPTCON CORBA
Object.
The current PSE has the following components:
• An Options component which consists of the Options search package wrapped in a C++ wrapper which uses the Options direct
subroutine access facilities to set up and run a problem defined in the Client Application code. Options stores all problem data
in its own database which can be output as a problem definition file for later re-input.
• A user supplied problem specific component that provides the analysis calculations on the optimisation design variable values
found in the Options component solution method.
• A Client Application component, which defines the problem to be solved and specifies the Options search/optimisation method
to be used, input parameter values, etc.
• A callback object created by the Client Application, which helps de-couple the Options and OPTFUN/OPTCON components.
3.3

Proposed communications sub-system:

The chosen method of handling the Options callback problem is a rather specific solution in that it is ORB dependent and results in
a tightly bound system with a specific point-to-point communication pattern. Although the components are selected using the VCCE
task-graph interface, the names of the three components involved (Options, OPTFUN/OPTCON and Callback) and their roles are
hard coded. Thus different analysis or problem components can be substituted for OPTFUN/OPTCON component, but the Options
and Callback components must be present.
To overcome the current communications restrictions and to provide the framework for a generic PSE system, a more general
communications model (Figure 5.), based on a collaborative system where multiple compute components or agents engage in a
shared activity usually from remote locations, is proposed.

Figure 5: Engineering Design PSE communications sub-system
The basic idea is to use a message passing communications sub-system implementing one-way asynchronous messages as well as
the direct synchronous component method calls used at present. Design patterns, such as the Proxy, Observer and possibly the
Broker pattern will be used in its development.
Another issue is how to define a suitably rich message protocol to allow complex data structures to be passed between components.
The integration of XML and CORBA IDL types is one approach. XML and CORBA should perhaps be seen as complementary

rather than competing technologies. XML is already used to configure CORBA components in the VCCE software and should form
the common language for defining all data in the system. Thus, instead of using IDL parameter passing, parameter data could be
passed encoded in XML from the XML component definition, the IDL for the stub and skeletons being produced from the same
XML definition. There is strong support for this approach from the CORBA gurus Schmidt and Vinoski [8] as it overcomes the IDL
versioning problem. VCCE contains a Wrapper Generator tool that can produce an IDL file from a components XML definition.
However, the use of CORBA pass-by-value semantics available in CORBA 3 might be better and offer another alternative. Indeed,
this is the approach that the CORBA gurus recommend [9].
The communications subsystem will work well within a given Intranet cluster, but additional problems arise in communicating
between clusters, especially where firewalls and ORB to ORB communication are involved. CORBA 3 has additional facilities for
handling such problems, but these are not readily available at present. An alternative approach involves defining a Mediator
component as a web service on each cluster and using XML/SOAP to send messages between Mediators on different clusters.
CORBA calls are used for communications between components within a cluster.
4.

Design studies process

Designers generally use approximation techniques to solve optimisation problems in order to reduce the otherwise enormous
computational effort that would be involved if only full fidelity models were used. Depending on the size of the problem domain
space, local, mid-range or global approximations are employed. For single design point optimisation, the above PSE architecture is
appropriate, but for global approximation techniques such as Response Surface Modeling (RSM) [3], rather different computational
workflow strategies are required.

Figure 6: Overall Design of Experiments (DoE)/RSM Process

Figure 7: User view of engineering design system

In the DoE/RSM process (left part of Figure 6.) some technique (e.g., Latin hypercubes) is used to select a set of initial design
points (typically say 100 points) that will span the design space. The analysis codes are then run for each design point, ideally in
parallel on some large compute cluster, as the design point evaluations are independent of each other. From the resulting database, a
response surface is built using the chosen approximation method (e.g., kriging [4]). If satisfactory, the surface is searched for an
optimal design point (right part of Figure 6.) and if found, full analysis codes are run at that point. If the analysis is satisfactory and
all design constraints are met, the process terminates; otherwise the new design point is added to the design set, the surface
regenerated and the optimisation repeated.
From a user perspective, the above RSM process suggests a data-centric approach to the computational workflow, where the user is
primarily looking at problem design point and results data to-date (and possibly other test data such as flight trial or wind tunnel
results in aerospace design problems) in order to decide where new problem analyses need to be run (Figure 7.). From a
computational perspective, the aim is to achieve the maximum amount of parallelism in the analysis computations by exploiting the
various cluster resources available. This can be accomplished by de-coupling the search engine computation from the analysis
computations and using some task farming approach to schedule parallel running of analysis tasks over the available resources.
5.

Engineering Design Grid Portal/PSE architecture

Rapid advances in commodity computing and the emerging nation-wide computational grid are significantly influencing the
development of the next generation of PSE’s. The term ‘commodity computing’ encompasses the development of distributed
computing technologies (Web services, Java, JINI, CORBA, DCOM, etc.), plus the use of standard PC hardware in networked
clusters. ‘Grid computing’ refers to the high-performance computing community’s creation of Grids; advanced infrastructures
designed to enable the co-ordinated use of distributed high performance computers for scientific problem solving. Closely aligned
with the concept of grid computing is the idea of portal computing [5]. A user or application portal is a web-based collection of
information presented together on a browser page. In many cases a portal can replace the need for users to log on to a number of
different computers to gain access to the various resources that exist. In portal computing well-defined services are delivered to the
portals instead of giving users direct access to the operating system prompt. As a result, resource management and security can be
exercised at a higher level.

Figure 8: Grid Portal/PSE Architecture
The proposed PSE design involves integrating a number of existing PSE and Globus based software packages in a layered structure,
in order to provide a fully functional Engineering Design Grid Portal (Figure 8.). The Globus project [6] aims to provide PSE
developers with Grid services for resource management, security and resource discovery. The University of Houston EZ-Grid
project [7] uses Globus services to make the use of the Grid easier and transparent for the user. This is achieved by developing easyto-use interfaces coupled with brokerage systems to assist the resource selection and job execution process.

We propose using the PSE prototype described above to provide the basis for a Design Optimisation Grid portal. This involves
extending the PSE functionality with the EZ-Grid/Globus software at a level above the existing VCCE system to provide for Grid
user login, job submission, etc. In addition, the development of a task farming approach on the analysis side should de-couple
optimisation from analysis task execution in order to exploit Grid technologies to gain more parallelism.
5.1

Details of the Grid Portal/PSE Layered Architecture

The Grid Portal layer:

Figure 9: Grid Portal Layer Architecture
The EZ-Grid plus Globus software provides a GUI interface for user login, Grid authentication, viewing of available hardware and
software resources, submission of job specifications and constraints, etc. EZ-Grid provides a resource allocation Broker and a Job
Manager, the later uses the Globus GRAM and GASS services from the CoG toolkit [6].
The VCCE and Task Farming layer: the VCCE software component has been described above. The other major components
provided are for job control and computational resource control/task farming. These components will implement the following
computational workflow system:-

Figure 10: Grid Portal/PSE Computational Workflow

The aim of our Grid Portal/PSE system is to provide the computational workflow scheme shown in figure 10 above where analysis
and search/optimisation tasks are de-coupled by the two central database systems (the Problem Set and Results databases). Thus the
search and analysis tasks can compute asynchronously, with the Search Engine adding new design point data sets into the Problem
Set database and large scale “task farming” on the analysis side. Here, a number of independent analysis tasks can be run in parallel
over one or more linked computational clusters under some form of computational resources control. The analysis results are added
to the Results database, where the Search Engine can be guided via the user or advisor (machine learning based) systems in
selecting the most promising new design to analyse.
At present, the problem is set-up using the pre-defined components available to the VCCE task-graph interactive front-end. Once
the problem task graph is built, the only options are to run or reset the components in the graph. The Job Control function provides
facilities to control computations and monitor their progress. Essentially the Job Control will be able to dynamical start/stop/restart
computations and change parameters of running processes i.e., provide interactive computational control as opposed to the process
scheduling/task farming available in the Computational Resources Control. Also, for some applications, it might be useful to
interactively display feedback on the progress of computations (e.g., provide on-demand graphical displays of analysis or search
results to-date).
5.2

Use of the CORBA 3 Component Model:

CORBA 2 offers interoperability between distributed objects/applications over networks of different computer architectures and
operating systems. However, in CORBA 2, there is no standard way to distribute components i.e., to install, activate/de-activate or
connect components in a particular ORB. There are also no facilities for handling component transactions, security and persistence.
CORBA 3 offers solutions in three areas:
Internet:
• The Interoperable Name Service (INS) specifies URL- based naming schemes.
• Java Reverse Mapping allows the usage of CORBA IDL to be omitted. Developers just follow the RMI conventions.
• Bi-directional GIOP allows clients and servers to share the same connection in contrast to traditional GIOP.
• CORBA Firewall introduces GIOP Proxies.
CORBA Messaging Service:
CORBA Messaging Service provides asynchronous and time-independent calls.
CORBA Component Model (CCM):
CORBA 3 offers a complete component model based on EJB’s (Enterprise Java Beans) for component life-cycle management and
for controlling the multi-transactional nature of computations and database access.
Also in CORBA 3 a new IDL data-type, Valuetype, provides support for passing objects by value rather just references which can
have significant implications for run time efficiency, as well as providing a partial bridge to mobile objects. CCM components have
built in callback interfaces. We will need to explore their potential use in relation to asynchronous messages in the communications
sub-system.
Our strategy is to augment or replace the Cardiff component model with the CORBA 3 CCM as and when CORBA 3
implementations are generally available.
6.

Conclusions:

The proposed Engineering Design PSE can probably be best seen as an example of a distributed collaborative system, where the
Client, Computational Resources, Job Control and multiple computational components (different kinds of agents) engage in a shared
activity. The defining feature is that agents in the system are working together towards a common goal and have a critical need to
interact closely with each other: sharing information, exchanging requests with each other and informing each other of their status.
Concurrency is important, with any agent interacting with other agents running in parallel in a distributed heterogeneous computing
environment.
We have developed a prototype Engineering Design PSE that uses the Cardiff VCCE software to provide a drag and drop user
interface to create a task graph based on a comprehensive component model and that uses CORBA as the software bus or
middleware. The PSE currently supports a restricted cluster communications structure involving three component types (Options,

OPTFUN/OPTCON and the Callback CORBA objects) and relies on specific features in the Orbacus ORB to handle asynchronous
callbacks. To overcome these communications restrictions and to provide the framework for a generic PSE system, a more general
communications sub-system is being developed.
As developed, the current PSE will be able to compute single or multi-point design evaluations over network clusters. However, in
order to fully exploit parallel computation over intranet or even internet clusters and to provide an environment which more
naturally meets the data-centric view of users, two additional major enhancements to the PSE are planned.
• The first concerns scheduling and task farming. The ultimate goal is to achieve within the PSE, an asynchronous computational
workflow pattern where analysis tasks can seek to exploit whatever computational resources are available in various
workstation clusters (i.e., task farming), running independently of search/optimisation tasks. Communication between the
search and analysis tasks is through the Problem Set and Results databases. Whilst the Options package has some of this
functionality available through script files, this functionality should be provided in a generic way through the development of a
scheduling/task farming PSE component.
• The second enhancement concerns computational resource control and job control and the setting up of an Engineering Design
Grid Portal. EZ-Grid provides a basic set of components for creating a grid portal, including a GUI for Grid authentication and
login, a Job Manager for job submission and monitoring and a Broker Kernel for resource control. However, these components
are likely to require considerable enhancements to work with the scheduling and task farming components above.
References:
[1]

A.J. Keane, The Options Design Exploration System Reference Manual and User Guide – Version B3.0 February 2000.

[2]

O. F. Rana, M. Li, M. S. Shields, and D. W. Walker, A Wrapper Generator for Wrapping High Performance Legacy Codes
as Java/CORBA Components in Proceedings of the IEEE/ACM SC2000 Conference, held in Dallas, TX, Nov 10-12, 2000.

[3]

Myers, R. H. and Montgomery, D. C. (1995), Response Surface Methodology: Process and product optimization
using designed experiments, John Wiley and Sons inc.

[4]

Jones, D. R., Schonlau, M. and Welch, W. J. (1998), Efficient global optimization of expensive black-box functions,
Journal of Global Optimization, 13, 455-492.

[5]

G. von Laszewski, Ian Foster, Jarek Gawor, Peter Lane, Mike Russell. Designing Grid-based Problem Solving
Environments and Portals. HICSS 2001.

[6]

The Globus Project web-site: http://www.globus.org/

[7]

The EZ-Grid Project web-site: http://www.cs.uh.edu/~ezgrid/EZ-Grid.htm

[8]

D.C. Schmidt and S. Vinoski. CORBA and XML, Part 1: Versioning, C/C++ Users Journal C++ Experts Forum, May
2001, www.cuj.com/experts/1905/vinoski.htm

[9]

D.C. Schmidt and S. Vinoski. CORBA and XML, Part 2: XML as CORBA Data, C/C++ Users Journal C++ Experts
Forum, July 2001, www.cuj.com/experts/1907/vinoski.htm.

