DYNAMIC MODEL OF THE MACHINING
PROCESS ON THE BASIS OF NEURAL NETWORKS:
FROM SIMULATION TO REAL TIME
APPLICATION.
Rodolfo E. Haber1,3, R. H. Haber2, S. Ros, A. Alique1

*

1
Instituto de Automática Industrial (CSIC).
km. 22,800 N-III, La Poveda. 28500. Madrid.
SPAIN.
rhaber@iai.csic.es
2
Departamento de Control Automático.
Universidad de Oriente. 90400.
CUBA
3
School of Computer Science and Engineering.
Universidad Autónoma de Madrid.
Ciudad Universitaria de Cantoblanco
Ctra. de Colmenar Viejo,km 15. 28049 - Madrid
SPAIN
Rodolfo.Haber@ii.uam.es

Abstract. Nowadays, the modeling of complex manufacturing tasks is a key
issue. In this work, as a case study is selected the application of a dynamic
model to predict cutting force in machining processes. A model created using
Artificial Neural Networks (ANN), able to predict the process output is
introduced in order to deal with the characteristics of such an ill-defined
process. This model describes the dynamic response of the output before
changes in the process input command (feed rate) and process parameters
(depth of cut). Experimental tests are made in a professional machining centre,
with different cutting conditions, on real time data. The model provides
sufficiently accurate prediction of cutting force, since the process-dependent
specific dynamic properties are adequately reflected.

1 Introduction.
New trends in modeling nonlinear processes have demonstrated that Artificial Neural
Network (ANN) based algorithms are maybe the most suitable Artificial Intelligent
technique to analyze the sensory information and depict process behavior. ANN
represents an outstanding approach to model complex processes due to the feasibility
for hardware implementation, real-time running, and a few prior assumptions for
modeling [1]. Some results show that ANN can yield a more accurate process model
than using the regression method [2]. In spite of its excellent interpolation capability,
*

Corresponding author

there are difficulties related with the poor extrapolation accuracy of the typical neural
networks and it is necessary to properly train models, requiring experimentation with
a wide range of possible working conditions [3].
Among the industrial sectors, today’s manufacturing industry has growing up
demanding productivity and profitability requirements. Such demands can be satisfied
only if the production systems are highly automated and extremely flexible. One of
the main activities the manufacturing industry has to deal with is machining. In
machining, as in any production process, an optimal performance is always a
desirable feature. However, most machining processes such as milling, drilling,
grinding and turning exhibit nonlinear and non-stationary behavior that make hard to
perform optimization tasks.
The cutting force model of machining process has been extensively studied both
analytically and empirically because of its invaluable importance for the assessment
of cutting tool deflection, wear, breakage, vibration, and their effects on the quality of
the elaborated part. The spectrum of available conventional methods for modeling is
very wide. However, the different types of models developed up until only a few
years have not lived up to expectations. Theoretical models are deduced by making
certain approximations, which limits their validity and they may be cumbersome to
handle. The empirical models thus developed far are valid only for the experimental
conditions under which they were developed, which do not always coincide with
industry’s actual working conditions. Stochastic models cannot always make adequate
prediction beforehand due to the vast variability of their estimates and the numerous
variables involved in the complex processes of machining.
Presented in this paper is an intelligent model of the milling process. In order to
deal with nonlinear process characteristics, a Neural Network Output Error (NNOE)
model, able to predict online the resultant cutting force under actual cutting
conditions, is proposed. In section 2 a brief presentation of neural networks that
focuses on the type of ANN used, including training algorithm is given. In section 3, a
short description of the machining process is shown. In section 4 the experimental setup, the design considerations, the network topology for the best training result
obtained and the experimental results are presented. Finally, the authors conclude on
the model suitability and some suggestions for its further improvement and future
works.

2. Artificial Neural Networks and Dynamic Process Models.
Among all modelling structures, the so-called Output Error (OE) model is one of the
most widely used. In this configuration noise is assumed to corrupt the process
additively at the output. OE models are often more realistic models and therefore they
often perform better than other configurations.
ŷ( t ) = g (

where

(t ),

)

(1)

(t ) = [ŷ (t − 1 ),..., ŷ (t − nA ),u(t − 1),...,u(t − nB )]T is a regression vector, n

A

is the number of past predictions used for determining the predictions, nB is the

number of past inputs, θ is the vector containing the weights and g ()
⋅ is the function
performed by the neural network.
One of the most widely used ANN paradigms, for its suitability for modelling and
control applications, is the so-called Multilayer Perceptron (MLP). The class of MLP
considered here consists in only one hidden layer with hyperbolic tangent activation
function H, and a linear activation function, L, at the output. Such configuration is
advantageous considering a foreseeable real-time implementation of the network.
M

Q
ŷ i ( w , W ) = Li  Wij H j  w jk u k + w j 0  + Wi 0 
 k =1


 j =1

(2)

where Q is the number of output neurons, M is the number of neurons in the hidden
layer, u are the inputs, and ŷ i is the output of the network. The weights are specified
by the matrices w (input-to-hidden layer weights) and W (hidden-to-output layer
weights). Both matrices are included in θ.
The identification problem can be viewed as the determination of the mapping

from the set of data z N = [u y ] (training set) to the set of possible weights ( ˆ ) so
that the network can produce a prediction ŷ( t ) as close as possible to the actual
output y( t ) [4].
T

zN → ˆ

(3)

Using a prediction error identification method
E( , z N ) =

1
2N

N

(y( t ) − ŷ( t )) (y( t ) − ŷ( t ))
T

t =1

(4)

The weights are calculated as

(

)

ˆ = arg min E( , z N )

(5)

As the training algorithm a version of the Levenberg-Marquardt method was
selected [5].
(i +1)

(i )
= (i ) + µ (i ) ⋅ S D

(6)

where the search direction is calculated from
SD

(i )

[( )

= − R (i ) + λ(i )I

] d( ( ) )
−1

i

(7)

where R is the Hessian approximation, λ a positive scalar, µ the step size for
iterations, d the gradient of the predictions computed with respect to the weights, and
I the identity matrix.
The size of the elements of the diagonal matrix added to R is adjusted according to
the size of the ratio between actual and predicted decrease. For a step to be accepted
the ratio

ρ() =
i

(

) (
(
) (

(i )
E (i ) , z N − E (i ) + S D , z N
E (i ) , z N - Λ (i ) + S D

)

)

(8)

must exceed some small positive number, where

Λ

Λ

(

(i )

)

(

+ S D = y (t )− ŷ t ,

(i )

)− S

T
D

 ∂ŷ (t , )
 ∂ 



( ( ) + S ) = E ( ( ) , z )+ S d( ( ) )+ 1 2 S
i

i

D

T

N

D

T

i

D

(9)

2

=ˆ

2

( )

R (i ) S D

(

(10)

)

The algorithm adjusts λ according to whether E (i ) , z N is increasing or
decreasing.
After this brief explanation, becomes obvious that the attention is focused on
determining a nonlinear OE model, i.e., a dynamic system, by training a two layer
neural network with a Levenberg-Marquardt method.

3. The Machining Process.
For the case study, among the various machining operations, is selected the milling
process (see figure 1). This choice obeys a pessimistic criterion, since milling is one
of the most complex of machining operations [6].

Fig. 1. Overall View of a Typical Machining Centre

Among the enormous quantity of variables and parameters involved in the
machining process, the most relevant factors (see fig. 2a), in terms of control tasks
are:
The spatial position of the cutting tool, considering the Cartesian axes (xp, yp, zp) ,
Spindle speed (s) [rpm],
Relative feed speed between tool and worktable (f, feed rate) [mm/min],
Cutting power invested in removing metal chips from the workpiece ( Pc )[kW],
Cutting force exerted during the removal of metal chips (F, cutting force) [N],
Radial depth of cut (a, cutting depth) [mm],

Diameter of the cutting tool (d) [mm].

Fig. 2. a) Milling process representation b) Scheme for identification

On the basis of the previous system approach and aiming at intelligent supervision,
the milling process can be formally described by a discrete nonlinear relationship
F̂ ( t ) = G( F , f, a )

(11)

where G is an unknown function to identify and f, a and F , are the inputs and
F = [F ( t − 1 ) L F ( t − n )],
output
respectively
defined
as
f = [ f ( t − 1 ), L , f ( t − m )], a = [a( t − 1 ) L a( t − m )], t, is the discrete time
instant and n, m∈Ζ.
If the model is simulated by means of an ANN parallel-identification scheme, the
resulting estimated output is
ˆ , f, a )
F̂ ( t ) = g( F

(12)

where
g represents
the
ANN
input-output
mapping,
ˆF = F̂ ( t − 1 ), L , F̂ ( t − n ) and F̂ (t )is the one-step prediction of the model.

[

]

4. Experimental Set-up.
The experimental tests are conducted on a 5.8kW-4 axes milling machine equipped
with CNC, which is interfaced with a personal computer by an RS-232
communication link. The tailor-made architecture for modeling is illustrated in figure
3.

Fig. 3. Scheme for control and modeling of milling process.

A personal computer is added in order to carry two important tasks. Firstly, to
evaluate the measured values of the cutting force F and to perform the generation of
f values in the block named hierarchical fuzzy controller. Details concerning
hierarchical control system can be found in [7]. Secondly, and the main goal of this
work, is to implement a neural network model (12). The model objective is to predict
in real-time, one step ahead, the resultant mean cutting force F̂ . The input data for
the model identification are obtained from the feed rate command signal f, the depth
of cut a and the cutting force F .
For the training phase of the ANN, only new milling cutters 25 mm in diameter are
used. Two workpieces with several changes in a are chosen for training the ANN (see
fig. 4A) and online running of the model (see fig. 5B). Slot milling operation is
supposed to be done in one direction only (see fig. 4C).

Fig. 4. Workpieces for training (A), and validation tests (B), (C) picture of slot milling
operation on profile (A).

4.1 Model of the Milling Process. Training and Verification Methodology.
A preliminary processing was applied to the data before performing the training
procedure (e.g., standardisation, mean value and standard deviation of the signals) [8].
The training algorithm was developed using the program MATLAB. The topology

was initially chosen as follows: two inputs f and a, one output F̂ , a linear activation
function at the output, and one hidden layer using hyperbolic tangent for the
activation function. The type of model was selected starting from the a priori
knowledge of the milling process and the types of models considered in previous
works (see fig. 2a). An ANN with 6 neurons in the input, 12 neurons in the hidden
layer and one in the output layer, was selected.
Modifying (12) for a second order output error model, the one step prediction is
evaluated with the previous model outputs

(

)

F̂ ( t ) = g F̂ (t − 1), F̂ (t − 2 ), f (t − 1), f (t − 2 ), a (t − 1), a (t − 2 )

(13)

The initial values of the weights were randomly chosen. The initial cutting
conditions used were f0=100 mm/min., s0=1000 rpm., a0=6 mm. At the end of the
training stage a pruning algorithm was performed in order to optimise the size of the
network, removing the superfluous weights [9]. The final matrices of weights
computed were
− 0,0010

 0,0101

0

−
0,0085

 0,0143

− 0,0086
w=
0,0208

 0,0020

0

 0,0068

− 0,0164
 0,0082


− 0,0086 − 0,2545 − 0,1405 − 0,0284

− 0,0081

− 0,0058 − 0,4086

− 0,0241

0
− 0,0838
− 0,0603
− 0,4808
− 0,2659

0,0002 − 0,3608
0,0020
0,1744
0,0050 − 0,4166
0,0001 − 0,1275
0,0070
0,0532
0,0097
0,0035 − 0,1253
0,4177
− 0,0092 − 0,2782 − 0,1913
0,0013 − 0,1332
0,3194
− 0,0001
0,2044
0,0558
− 0,0023
0 − 0,1001

0
0,0190
0,0095
0,0105
0,0216
− 0,0114

0,0089
− 0,0028

− 0,0195
− 0,0114

0,0169
− 0,0045

0,0021
0,0095
0,0174

− 0,0103 − 0,0220

0,0097
− 0,0193

0,0006
0,0192

10,6307

4,4610
2,6176

1,6893
− 0,9208

6,6000
− 11,8674

− 6,6585

7,2921
− 3,5185

3,8231
− 1,4053

31.5298 - 43.1194 - 107.8631 - 20.3178 - 0.2176 - 33.1251 ...

W =

... - 5.7227 25.3358 21.1437 - 18.4881 - 4.0403 88.3722 358.7721

(14)

(15)

In order to validate the model, data analysis (mean squared value analysis, auto
correlation analysis and transient data study) were done.
The robustness property of the model, considering changes in cutting conditions
(material hardness, tool wear, and disturbances in depth of cut), is also examined.
Additionally, real-time performance of the model before these same situations was
investigated. The comparison among different models analysed on the basis of final
prediction error (FPE) is depicted in Table1.
Table 1. Neural Network Output Error (NNOE) models.

Models

Final Prediction Error (%)
Training
Verificati
on

a(t-1)
f(t-2)
f(t-1)

14.3

46.1

18.3

50.4

11.3

23.5

13.2

16.3

8.7

9.4

F(t)

F(t-1)
F(t-2)
a(t-1)
f(t-1)

F(t)

F(t-1)
F(t-2)
f(t-2)
f(t-1)

F(t)

F(t-1)
F(t-2)
a(t-2)
a(t-1)
f(t-2)

F(t)

f(t-1)
F(t-1)
F(t-2)

a(t-2)
a(t-1)
f(t-2)

F(t)

f(t-1)
F(t-1)
F(t-2)

In order to evaluate the behaviour of the model considering actual working
conditions, tailor-made software for simulation and real time supervision of machine
tools was developed. The application for Windows NT was programmed in Visual
C++. The libraries of controllers (e.g., different types of fuzzy controllers) and
process models (e.g., neural networks) were programmed in C++ and compiled in two
dynamic link libraries (DLL).
For the sake of clarity, only the results of two simulations and two real-time
applications are shown in figure 5. The vector of initial conditions used
was F̂ (t = 1) = g (100N ,75 N, 9 mm/min,0 mm/min, 3mm, 0 ) .

In fig. 5 the horizontal dot line means the set point of cutting force control system
(not addressed in this work, but the software includes this option). The vertical line
represents the actual (simulation or real-time values) values shown at the bottom of
the dialog in text boxes. For each case considered, the chosen profile is depicted at the
bottom of the picture. The feed rate command signal is shown in the middle of the
graph. The behaviour of predicted and measured cutting forces is shown at the top of
the picture. For simulations, only one signal is depicted, which corresponds to the
output of the process model.

A)

C)

B)

D)

Fig. 5. Simulation and real-time running using different workpiece.

The simulation serves also for evaluating the performance of the intelligent control
system (i.e., accuracy, closed-loop stability, etc.) which is an important step to design
closed-loop control systems under varying milling process dynamics (see figure 5A
and 5C). On the other hand, the dynamic behaviour of the cutting force provides
information about tool and process conditions (see figure 5B and 5D). Peaks and
undesirable oscillations in cutting force can be the result of inappropriate cutting
conditions as well as the change in tool condition. Good properties of the model can
be inferred from these results, as well as its generalisation capability. This dynamic
neural network-based model provides sufficiently accurate prediction of cutting force,
since the process-dependent specific dynamic properties of milling operation are
adequately reflected.

Conclusion
Various models of the milling process were obtained using the parallel identification
scheme. The real time test of ANN-based models demonstrates how, through simple
topologies, quite precise models can be obtained. These models can play an important
role in the design and evaluation of controller performance under variations in the
milling process dynamics. The results can be used to develop complex adaptive
controllers and new monitoring systems.
The strength of the proposed approach lies in the solution provided for modeling.
The neural network is able to describe the nonlinear characteristics of the milling
process, showing superior learning capability, a suitable noise suppression and
inclusion of non-measurable information (e.g., workpiece hardness, material).
Drawbacks however are the need of neural network retraining and the building of a
wider library of models. In spite of that a sufficient exciting of signals avoids a high
number of retraining stages.

References
1. Haykin S. Neural Networks: A comprehensive foundation. 2nd edn. IEEE Press (1999).
2. Das S., Chattopadhyay A.B., Murthy A.S.R. Force parameters for on- line tool wear
estimation - a neural network approach. Neural Networks 9(9) (1996) 1639-1645.
3. Dimla D.E., Lister P.M., Leighton N.J. Neural network solutions to the tool condition
monitoring problem in metal cutting – a critical review of methods. International Journal of
Machine Tools and Manufacturing 37(9) (1997) 1219-1241.
4. Ljung L., System Identification: Theory for the user: 2nd. Edn. Prentice Hall, (1999).
5. Fletcher R., Practical Methods of Optimization. 2nd. Edition, John Wiley&Sons, (2000).
6. King R.J. Handbook of High Speed Machining Technology. Mc.Graw Hill, New York,
(1985).
7. Haber R.E., Peres C.R., et al. Towards intelligent machining: hierarchical fuzzy control for
end milling process: IEEE Transactions on Control Systems Technology 2(6) (1998) 188199.
8. Bendat J.S., Piersol A. G. Random Data, Analysis and Measurement Procedures. 3rd.
Edition, Wiley & Sons, (2000).
9. B. Hassibi, et al. Optimal brain surgeon: Extensions, streamlining and performance
comparisons, Advances in Neural Information Processing Systems 6 (1994) 263-271.

