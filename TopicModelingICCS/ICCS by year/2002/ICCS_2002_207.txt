Prototypes and simulation tools for the analysis of
reconfigurable reactive systems performance.1
Mauro Iacono2, Massimiliano Rak2, Salvatore Venticinque2
2

Dipartimento di Ingegneria dell’informazione, Seconda Università di Napoli, via Roma 29,
Aversa(CE), Italy

{mauro.iacono, massimiliano.rak, salvatore.venticinque}
@unina2.it

Abstract. Subject of this paper is the application of SPE (Software Performance Engineering)
principles to an example of reconfigurable reactive systems for control with RT (Real Time)
specifications. Instruments used up till now by our research group to study heterogeneous
distributed systems will be integrated and employed to model and analyse the new systems’
class object of this paper. In particular simulation techniques for performance analysis of
systems modelled at the application level (high level languages: MetaPL) and at the
architectural level (hardware and low-level software: HeSSE) will be used. The goal of this
analysis approach is to obtain quantitative information about system behaviour, when only the
target hardware and an high level design of the software are defined.

Introduction
A class of industrial application with high service availability and reliability
requirements involves utilization of automated control apparels which behaviour is
driven by events that take place in the external world. Such applications and HW/SW
systems implementing their functionalities are known in the literature as reactive
systems, because they operate generating “reactions” to external stimuli with the
frequency with which they presents as inputs, starting from an internal state which
allows to render the response flexible.
Electricity distribution management plants constitute a complex, distributed and
various reality in which reliability and availability aspects are complicated by
electromagnetic noise of the operating environments in which their control
architectures have to operate. In this field classical electromechanical control systems
are more and more being integrated with solutions that have informatic and telematic
contents which render plant management more flexible and maintainable. Control

1

This paper is partially supported by “Progetto ISIDE”. We desire to thank Prof.
G. Franceschinis, from the Univesità del Piemonte Orientale, for her help in this work
development.

architectures are integrated from off-the-shelf components to lower acquisition,
development and maintenance costs and to take advantage of large-scale hardware
and basic software chosen as a development platform testing campaigns: but these
issues involve that the acquired general-purpose componentware must be managed
with techniques aimed to improve their reliability, availability and fault and EM
interference resilience degree.
Fault reactability involves as a consequence in a reconfigurable redundant control
system a transition from a configuration state to another. The new configuration is
usually a degraded system state in which it continues to operate offering all or a part
of its services. As well as the whole system functionality is preserved, a
reconfiguration implies a variation in the load on the system parts to replace faulty
components. An estimation of the system behaviour in these conditions is as more
important as sooner it can be obtained in the development cycle evolution because it
guides design choices to contain the development effort within paths that are valuable
in advance.
In systems in which this is a non negligible factor, like the ones described so on,
the need for verifying systems behaviours in terms of performance is obvious. Just
like Software Performance Engineering (SPE) showed in the past years, this analysis
must be carried on since the very first phases in the development cycle, because
incorrect choices in these phases are difficult and expensive to be corrected later on.
Our research group has been very active in the past years in the field of
performance analysis. As a consequence, a Distributed Heterogeneous Systems
(DHS) simulator, HeSSE, has been developed, together with a language for the
description of prototypal stage software, MetaPL. These two instruments in joined use
allow to perform system analysis since the very first design phases.
The goal of this paper is to show how these methodologies can be applied to
reconfigurable systems at design stage of software development, obtaining
quantitative information that helps in the performance design of the system.
The paper is structured as follow: the first section introduces HeSSE and MetaPL
tools , how they works and how they can be used in conjunction. Then we will
describe how to model reconfigurable systems. The third section describes the case
study and the fourth one describes the application of our analysis techniques on it.
The last section contains conclusions.

Performance analysis with HeSSE and MetaPL
The modelling techniques used for our purpose have been used for many time by
our research group for performance analysis in parallel programs basically founded on
the Message Passing (MP) paradigm. Our techniques of interest are mainly two: target
system modelling in terms of DHS for performance evaluation using HeSSE [1,2,3]
and the software modelling by prototypes using MetaPL language [4]. Applied
methodologies allow operating at different detail levels according to the phase on
which we are focusing; each of these is targeted toward a different goal that needs a
proper approximation level.

2

HeSSE (Heterogeneous System Simulator Environment) is a simulation tool that
can reproduce the performance behaviour of a given DHS for a given application,
under different computing and network load conditions [1,2,3]. As far as DHS
simulation is concerned, the distinctive feature of HeSSE is the adoption of a
compositional modelling approach. DHS are modelled as a set of interconnected
components; each component reproduces the performance behaviour of a section of
the complete system at a given level of detail. System modelling is thus performed
primarily at the logical architecture level.
HeSSE is capable of obtaining simulation models for Distributed Heterogeneous
Systems (DHS) that can be very complex thanks to the use of components
composition. A component is an object that can reproduce the temporal and functional
behaviour of a part of the comprehensive system. Applications are in general
described in HeSSE through trace utilization. A trace is a file in which all the relevant
actions of the program are reproduced. For example a typical HeSSE trace file for
parallel PVM applications is a sequence of CPU time requests and message passing
primitives. A trace represent a single and specific execution of a parallel program.
MetaPL is a XML-based language for the description of parallel programs. The
main characteristic of MetaPL is its extensibility, obtained exploiting XML distinctive
characteristics. The goal of MetaPL is to supply an unified approach to parallel
programming, always characterized by a wide number of programming paradigms
and models. MetaPL is provided with a filtering mechanism that allows generation of
specific representations of a program just as UML or automatic documentation. This
mechanism is also employed to generate traces in the HeSSE format.
The joined use of the two systems consists finally of:
• System description through a simulator configuration;
• Software description through the MetaPL language;
• HeSSE trace generation by MetaPL;
• System simulation and performance information collecting.
The conjunction element between the two instruments is thus trace generation by
MetaPL. This generation makes provision for a specialization of program behaviour,
generically described through the prototype in a single execution described by the
trace. It is possible to obtain performance information about the system such as the
completion time of all involved processes, the utilization time of processors
(utilization percentage), and the interconnection networks utilization (average
bandwidth and average used bandwidth).

Modelling redundant reconfigurable systems
The methodology shortly exposed in the previous section has been successfully
applied to scientific programs on DHS. This kind of problems is usually characterized
by a behaviour that is very similar in several successive executions. In other words,
the program has a limited number of eventual execution paths (often only one). In
general the program behaviour by the point of view of performances can depend at the
most on the type of inputs it is subjected to (e.g. on dimensions of matrices in a matrix
product program). These assumptions made possible to manage easily with

3

interfacing between simulation and MetaPL language, because the trace generation
process from a program prototype often reduces to a mere translation, perhaps with a
specialization of the values of several variables.
The case of reconfigurable systems under examination is slightly different: the
behaviour of the software layer changes following changes in the system state on
which it runs, e.g. in the event of a degradation, rendering system modelling more
complex, as for models, as for simulations.
On the other hand normal operation of the system class we are interested in is in
general very simple, tasks are cyclic and always the same actions are repeated. System
behaviour is not difficult to reproduce, performances are often easy to foresee. Our
described modelling methodology is, in this case, easily applicable (as will be shown
in the following with a case study).
It is important to underline that fault tolerance verification is not a goal of this
analysis approach, as on the contrary is to verify its performances in degraded
conditions before the implementation phase. The verification of correctness of fault
tolerance mechanisms that leads the system in a degraded state, if not by the
performance point of view, is outside the goals of this work.
System states modelling
In general the reconfigurable system under examination is modelled as a DHS,
described by a HeSSE configuration, which actual behaviour is described through
MetaPL language. In general every physical component is modelled through a
simulator component, while applications are modelled through prototypes. Basic
software (operating system and system services) is typically modelled through
components.
The reconfiguration of the system means that the starting model is not correct in
the reconfigured state. A simple solution is to have a model for each new
configuration, but it is a long process and the transition from one state to another
cannot be done. The solution is thus modelling the behaviour in faulty conditions
simply as a particular use of a fully operational system. In other words a fault can be
merely managed in its consequences on the state of configuration: in this case
behavioural trace generation is a specialization of generic descriptions on
predetermined variables values.
Software design for the reconfiguration management
As we wrote above, the critical factors, which affect the performances of the
system, are the concurrency on every computing node and the synchronization among
the nodes. HeSSE allows to simulate both the behaviours on a distributed architecture
described through a configuration file that is an input file of HeSSE.
The behaviour of every task on every node is described in a trace file. The system
behaviour descriptions are composed of a collection of tasks, each one of which is a
process on a node and communicates with the others through message passing. The
management of the reconfiguration id modelled as a collection of tasks, which
execute on every node consuming the utilization time of the CPU.
When the reconfiguration takes place, the active structure of the system changes to
maintain some or all the functionalities generating a new system. This new system is a

4

subset of the original one that doesn’t use its faulty section. It means that the HeSSE
model remains the same, but it is redundant. The target of this analysis is to obtain
data about the behaviour of the system, when it assumes different configurations,
through minimal remodelling action and before the prototypal realization.
All the system states that need performance analysis will be given to the MetaPL
description through generic variables, from which we must generate traces and
execute simulations.
So the analysis methodology should proceed through the following steps:
1. Description of the system through HeSSE and MetaPL.
2. Individuation of the faulty conditions to be analysed (Fault Tree Analysis, Petri
Nets, etc.).
3. Traces generation for every configuration.
4. Simulation.
5. Performance analysis for every configuration of the system.

The CESI case study
The pilot application is the CESI/Tiran demonstrator [8,9] is application manages
the control and the monitoring of the Primary Substation (PS) automation system of
the electric distribution network of ENEL.
The PS is composed of a Local Control Level (LCL) and a set of Periphery Units
(PU), which grants the monitoring, protection, diagnostic, command, control and
supervision actions of the station and its subsystems.
We are focusing on the implementation of the LCL. The LCL manages the
elaborations that need to grant the security of the plants connected by the electric
network in power stations faulty conditions. These actions must be executed before
the electric lines recovery systems activations and in substitution of human operators.
The functionalities of the LCL are realized through a cyclic elaboration, whose
period is fixed, composed of a collection phase of input data coming from the plant
and a stable memory, a distributed elaboration and the production of output signals,
which pilot the security systems.
The project presents real time and fault tolerance requirements. According to the
purpose of our analysis the followings requirements need:
1. fault masking of the stored state of the system, the input data from the plant and
the output signals;
2. bounding of errors and of their temporal propagations ;
3. recovery after a fault;
4. respect of T-cycle in faulty conditions.
The target system we have developed to introduce the fault tolerance is redundant
and it is composed of three nodes connected on a LAN.
Every node has a layered architecture. The hardware layer is made of a commercial
off-the-shelf PC with an Ethernet board.
The software layer is composed by the VxWorks real time operating system
(RTOS) on which we find the fault tolerance (FT)

5

Tiran library and the ARIEL utility. Tiran and ARIEL implement the management
of the FT strategies of the project, which are a stable memory and a recovery
mechanism explained in the following sections.
The upper layer is the basic software (BSW) and manages the data structures of
the system, the plant interface and the recovery procedures.
The periodic evolution of the BSW is described in the following lines. At the
beginning of every execution cycle the BSW receives input data from the plant and
the stabilized status from the stable memory; then it stores the data in a common
memory (Exchange Memory) visible to every application process; it sends the outputs
computed at the previous cycle to the plant; it executes the control application; it
updates the stable memory loading the Exchange Memory data; it activates the
monitors of the system; it signals the correct end of the cycle to the plant watchdog
(WD); it communicates the state of the application to ARIEL processes to confirm its
consistence.
The application layer is
composed
of
three
independent partition. All
these partitions are duplicated
on every node while a
different one of them is active
on the each node in a non
degraded condition. The
communication among the
SW layer components always
employs the
Exchange
Memory, which becomes a
hot point in an execution
cycle. The chosen solution is
a distributed one. The
distribution is used for both
software and hardware: this
Fig. 1. The layers involved in the proposed solution
choice allows implementation
design
of
N-redundancy
FT
techniques and maximum availability solutions with stand-by replications.
The software is organized in independent partitions, which are replicated on every
node and activated on a single node of the system. A faulty node can be cut off and its
active partition can be activated on a different node of the system. We have in this
way double redundancy, a spatial redundancy and a temporal one.
The system FT is achieved by implementing control on a synchronous elaboration
logic, that relies on a state and transitions model. Between a stable state and the next
one an execution takes place, with a period as long as an execution cycle. Data input,
output and the application status are updated on every execution cycle and stored in a
stable memory. Write actions in the stable memory are filtered to cut the undesired
fluctuations of data values. These choices answers the requirements at point 1.
On every execution cycle a monitoring routine to detect any fault is activated. The
communication among the different software components of the system always
employs the Exchange Memory, which is part of the Stable Memory, to limit the error

6

propagation of software transitory, caused by data contaminations during an
elaboration. The error bounding is granted by the strategies implemented for the
stable memory and described above and it answers the requirements at point 2.

PLANT FRONT-END

GUI

FIELD
Server

App1

App2

App3

IsC

OsSC

Out
relayer

Keyb.

SM

ETHERNET

Fig. 2. The proposed solution design for CESI demonstrator
To prevent dangerous faults there is a global watchdog, which expires after two
cycles and is reset by the three nodes at the end of every cycle. The deadline is
chosen to allow a local recovery and so to limit the number of reconfigurations of the
system. This grants the respect of requirements at point 3.
According to the purposes of this paper we are analysing the different working
conditions of the system supposing the application of the FT strategy which grants a
recovering based on reconfiguration, and not only founded on cold restart. It grants
the chance of a off-line restart of the faulty node, while another one is reconfigured to
activate the crashed partition, and the chance to keep a single process active by
filtering its outputs through the Stable Memory. This grants the respect of the
requirements at point 4.
So, on every node we can find, as shown in figure two there are: three tasks that for
the application, one ,two or all three can sleep for all the execution; one task to
manage the stable memory (sometimes more than one task); a task to manage the
inputs; a task to manage outputs; a task to manage the distribution. On the front end
node there are other two tasks: a partition to manage the interface to the plant and a
partition to manage the GUI. On the system there are some other tasks used for the
activation of the recovery procedure, for sake of simplicity we do not have reported it,
because we will not study the transition from one state to another (although it is
possible).

Modeling CESI/TIRAN
The application model is composed by the architecture description in terms of
HeSSE configuration file and some MetaPL description of the software level.

7

The hardware layer of the system is implemented through a variable number of
nodes connected to an Ethernet LAN. The node and the Ethernet LAN are
components of our simulator that match the real ones through the initialisation of
characteristic parameters. The software layer of the system is implemented in the
simulator through a general component, “task”, whose behaviour is driven by an
input trace. The generic trace is automatically generated from a description of the
correspondent task structure expressed trough the MetaPL language. Figure 3 shows
a graphical representation of the HeSSE model. It contains the nodes of the target
system and the distribution of the tasks, done as in the proposed design. Due to the
original software target of the simulator the message passing system is called PVM,
but it is a generic message passing system that can reproduce different behaviour in
function of some parameters, here not illustrated here.

Node INOVA
APL
App 1

App x

Is-c

App 2

Os /S-C

EtherBoard

APL
OutState

App 1

Relay er

Cpu AMD K6-2 333

Node
SM

Node VMIC

BSW

C PU

BSW

PVM D

PII MMX 260

PVM D

Is-c

App 2

Os /S-C

OutState
Relayer

Node

R AM 64 Mb
PC Industriale

RAM 64 MB
PC Industriale

EthDriver

App x

EthDriver

EtherBoard

SM

PVM_Data

Network
Physical
Layer

APL
App 1

App x

App 2

EtherBoard

EthDriver

Node
Field
Server

GUI

Plant Front-End

PVM D

CPU Pentium III 450
RAM 128 MB
PC Normale

Is-c

Node O’Mast

SM

Os /S-C

OS Relay er

BSW

Fig. 3. Maximum T-Cycle in function of the application workload on different configurations

The behaviour of each task is represented using MetaPL. The filtering system
typical of this language is used for an automatic generation of the input traces for the
simulator. In this example a MetaPL document was produced to describe two groups
of tasks of the applications. The first group is composed of the tasks which perform
the BSW management operations, while the second one is composed of the tasks
belonging to the CESI application. The latter tasks can be present together in a
different number on a node according to the system configuration (degraded/correct
execution condition). The different groups of tasks are never active on the node at
same time, so different priorities have a functional meaning only inside the same
group. However no references to the CESI project specify any priority policy.
The adopted model can be used in many ways, we have applied it only for a
comparison of the performance behaviour of different system configurations. Another
example application is the analysis of the reconfiguration transition, not shown here

8

for lack of space. To match a concrete model the parametric description given above
must be specialised with assigned values. Some parameters specialising the system
description are shown in the following table with their default values. These values
will be the same in the simulations chosen for the result discussion. Some parameters
can be changed to understand how they influence the whole system. The parameters
explained in table 1 are do not change their values during the simulations we discuss
in this section. The independent parameter used to make evaluation on the system
design is the load value for an application partition. The dependent parameter chosen
to characterise the system’s behaviour is the minimum T-Cycle, that is the maximum
time space required by the different nodes to close their execution cycle.
Parameters
Description
Default (ms)
The time spent in a single call to the stable memory task 0,5
The time spent requesting data to the exchange memory 0,5
The time spent writing data in the exchange memory 0,5
The time spent by the manager to query the filed
10

SMCall
ERRead
ERWrite
Field

Table 1. Main Parameters not changed in the simulations

This value should be used to tune the watchdogs, which monitor the correct
synchronization of the different nodes, or to dimension the system to grants the
respect of the RT requirements. The figure 4 show the T-Cycle for each configuration
of the system and with different loads. Both the axes use a logarithmic scale. It is
evident the presence of a critic value of the application workload before and after
which the system changes its behaviour toward the distribution on different nodes.
Maximum T cycle

T cycle (ms)

10000

1000

1 node
2 nodes
3 nodes

100

10
0,1

1

10

100

1000

Application w orkload (ms)

Fig. 4. Maximum Tcycle in function of the application workload

Before the critic workload, performances on one-node configuration are better
than o n the distributed ones. The performance degradation is caused by redundancy.
Vice versa after the critic value, marked by curves intersection, the distribution
allows a performance recovery thanks to the parallelisation of the application
partition. For example the project choices that can be taken in this first phase can be
strongly affected by the workload dimension of the application partitions, lower or
higher than the critic one. In the first case the project should have as a target the
optimisation of application distribution by a reduction of the communication and by
moving the critic value on the right to grant a correct behaviour to every

9

configuration. In the second case the project will have the one-node configuration as
reference. The developer will try to move the application weight on the
communications and the synchronizations of the tasks to enlarge the correct execution
space, moving the critic value to the left of the workload axis.

Conclusions
The analysis techniques presented allows, in this project phase, to obtain
quantitative data, which helps the developer to know in advance the system’s
behaviour and hence to give to the project development the right direction. In this
paper we showed how our tools can be employed for performance analysis of reactive
systems with reconfigurability features at early stage of software development,
applying Software Performance Engineering principles. We applied our analysis
techniques on a real case study, the CESI Demonstrator, showing how we can obtain
not-intuitive quantitative information when only the target architecture and a high
level design of the application are given. Our simulation tool, HeSSE, and our
extensible notation system, MetaPL, are the main instruments exploited.

References
[1] Aversa, R., Mazzeo, A., Mazzocca, N., Villano, U.: Heterogeneous System Performance
Prediction and Analysis using PS. IEEE Concurrency 6 (July-Sept. 1998) 20-29
[2] Aversa, R., Mazzeo, A., Mazzocca, N., Villano, U.: Developing Applications for
Heterogeneous Computing Environments using Simulation: a Case Study. Parallel
Computing 24 (1998) 741-761
[3] Mazzocca N., Rak, M., Villano, U.: The Transition from a PVM Program Simulator to a
Heterogeneous System Simulator: The HeSSE Project. In J. Dongarra et al. (eds.): Recent
Advances in Parallel Virtual Machine and Message Passing Interface, Lecture Notes in
Computer Science, Vol. 1908, Springer-Verlag, Berlin (2000) 266-273.
[4] Mazzocca N., Rak, M., Villano U.: MetaPL: a Notation System for Parallel Program
Description and Performance Analysis. In Malyshkin. V. (ed.), Parallel Computing
Technologies, Lecture Notes in Computer Science, Vol. 2127, Springer-Verlag, Berlin
(2001) 80-93
[5] Tsai T.: Fault tolerance via N-modular software redundancy. In Fault-Tolerant Computing,
1998. Digest of Papers. TWenty-Eighth Annual International Symposium on , 1998 ,
Page(s): 201 –206
[6] Bondavalli, A. et. al: State restoration in a COTS-based N-modular architecture. In ObjectOriented Real-time Distributed Computing, 1998. (ISORC 98) Proceedings. 1998 First
International Symposium on , 1998 , Page(s): 174 -183
[7] Botti O., et. al., TIRAN: flexible and portable fault tolerant solutions for cost effective
dependable applications, Proceedings of 5° EUROPAR Conference, in P.Amestoy, et al.,
LNCS vol 1685, Springer-Verlag Berlin Germany, Tolouse, France aug 31- sep 3 1999,
pagg1166-1170.
[8] Botti O., et. al., The TIRAN Approach to reusing software implemented fault tolerance,
Proceedings of 8°EUROMICRO workshop on parallel and distributed processing
(PDP2000) IEEE C..S.P., Los Alamitos CA, Rhodes Greece jan 19-21 2000, pg 325-332

10

