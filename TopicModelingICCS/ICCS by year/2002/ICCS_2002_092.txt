On Reduction of Parallelism Degree in Programs
Described by Petri Nets
Golenkov E.A., Tarasov G.V., Kharitonov D.I., Sokolov A.S.
Institute for Automation and Control Processes, Radio 5, Vladivostok, Russia.
demiurg@iacp.dvo.ru,
WWW home page: http://www.iacp.dvo.ru

Abstract. In this article a task of Petri Nets parallelism degree reduction is considered in a context of parallel programs translation from
specifications in Petri Nets to representation appropriate for traditional
processors capabilities. The solution of the problem is could be considered as basis for general computations.
Keywords: parallel systems, Petri Nets, parallel programming, calculations on a regular grid.

1

Introduction

The scope of the tasks that are solved with supercomputers and clasters increases permanently. At the some time, quality of the tools used to develop
parallel programs is still low in comparison with the sequential programming
toolkit. Programming of parallel programs with the MPI environment and it‚Äôs
extending is most common method for programming supercomputers. However,
the programs described in MPI standard are turned out too complicated and confusing. Searching for errors in such programs could take time comparable with
the time of writing of the programs. As a rule,the reason is use of primitives
Send-Receive. A common approach to solution of this problem is to reorganize
interactions by methods hiding Send-Receive operation. In particular, it‚Äôs ether
refusal from Send - Receive operations in a favour of group MPI operations[1] or
hiding of interactions in semantics of program description language(HPF, HPC,
Norma, T-System). The authors of the article hope, that using of Petri Nets will
give one more approach to organization of interactions in the parallel programs
based on natural parallelism of descriptions [4]. There‚Äôs no concept of the process that is inherent in sequential programming in descriptions of programs in
terms of Petri Nets, therefore Send-Receive operations as primitive of interactions are also absent. Organization of parallel program execution environment is
transferred from a developer on a intelligent translator and the developer should
care only about logic of parallel calculation organization. There are some more
advantages in Petri Nets attractive for their using in parallel programming:
‚Äì application of the given formalism for parallel programs development allows
reusing obtained algorithms, without any modification that it‚Äôs impossible
to say about even object-oriented programming.

‚Äì visual representation of programs allows to reduce an amount of errors that
occurs at development stage of the programs and gives on additional information to an outside developer.
‚Äì the programs described in term of Petri Nets could be converted to other
representation by means of actively developed formal base.

 

		




 



 

 

 

 

 

 

 

 

 

Fig. 1. The template of interaction between elements of regular structure

To execute Petri Nets[3] described parallel programs it is necessary to express
them in the consecutive instructions understandeble by traditional processors. It
is the fundamental contradiction that is to be resolved at a stage of translation.
There‚Äôs experimental version of the parallel programs translator from Petri Nets
to C++[2] which shows that this contradiction could be settled. The procedure
of translation from Petri Nets to C++ was developed under the classical scheme:
decomposition, optimization and assembling.
On decomposition stage initial Petri Net is devided into set of consecutive
subnets at a stage of splitting. Petri Net considered consecutive if it saves tokens
and interacts with more than two other subnets through each boundary elements
only. Decomposition algorithm described in details in [2]. The algorithm search
for the consecutive nets with maximum length.

& HOOP R G X OH

,Q S X W

1 H LJ K ER X UV

5

6

5

6

5

6

1

1

2 X WS X W

/ R J LF


	  	 

   

Fig. 2. Structure of module(Cell Module)

Thus, optimization stage deals with the standard input data after analysis.
The purpose of optimization operation is minimization of number of the consecutive nets according to heuristic rules. We defined three heuristic estimations:
1. maximum length process, (the point is client-server application model);
2. given number of approximately equal length processes, (the point is specific
cluster architecture);
3. minimum number of processes (the point is local area network application);
The algorithm of optimization is based on the partial enumeration of every
possible assemble solutions from the input subnets. Each assemble solution (or
not up to the end assembled solution) is estimated by heuristic rules, and the
best assemble solution is assigned as final. If there‚Äôre equivalent solutions the
one found first is considered to be result. Result of this operation is the program
description in the form of interactive consecutive processes.
Translation of optimized program representation from Petri Nets to C++
is routine algorithm that could be interesting only from program development
point of view.

2

Example of calculations on the regular grid

Description of algorithm by Petri Nets for the real complexity tasks dealing
with the big data volume is rather bulky and redundantly repeating. Applying

templates for construction of the programs operating with data of the regular
structure lets avoid the repeating. A template here is a method of solution of
task class that splits algorithm into parts mandatory for each private task from
the class. Below is shown use of template on the class of the tasks connected
with ‚Äùcalculations on a grid‚Äù. The game ‚Äùlife of Convey‚Äù is taken as task of
this class. In spite of the fact that the task could be solved with any procedure
language we take it as a good example to present logic of programming on Petri
Nets. The rules of the game are widely known:
1. Cell is born if it has three neighbours.
2. Cell lives if it has two or three neighbours.
3. Cell dies if it has one or more three neighbours.

5

67
8 	9;:<=9>


	 




3


?@!$#%'&0(*)
+ ), .'/




3


"!$#%'&"(*)
+ )-, .0/


	 12	  

43

43

^~}^*a*¬Ä=¬Å0`C¬Ç
¬É } ¬É ac¬Ñ_
¬Ö } ¬Ö a¬Üc¬á¬Å"`C¬Ç

6

/ R J LF


	9<=9>UVW

6 H Q G  ' D WD  \ 

\
\] V

\

LMNPO@Q9R9@S!%(*)
+ )-, T/

\

^_E`@_$acbedd
fEghji@k




8 	A:? 12	  
8



12	CBED7FGHIKJ







l <m n oqprss'tqu u
r9s't>v
o>s'wx
yEz {<y
o>s|Xx
1

1	  X 1Y	  U61W
Z	C[ 12	  
1

1

\

1 H [ W 1 H [ W  1 
6 H Q G 1 H [ W

Fig. 3. Realization of submodules structures

It‚Äôs possible to realize a great number of algorithms of the game in terms of
Petri Nets as well as in terms of the procedure programming languages. Development process of the variant algorithm realizing the game ‚Äù life of Convey ‚Äù is
given below step by step as the authors suppose it‚Äôs to be.
At the first step the template of the program design should be defined. In
our case the template is the regular structure consisting of cells, each of them
interacts once during each time step the same way with all eight neighbours and
changes it‚Äôs state on the basis of these interactions. This template is parametrized

by cell number and some set of the initial values defined for each cell. Representation of the template in terms of Petri Nets is displayed in figure 1. Each cell
of the template consists of eight identical units called Cell Module and responsible for interaction with neighbours. Units are connected among themselves by
synchronization on event (change of a time step) and on a state (cell state) for
cell entity formation. Besides, units of the same cell are interlinked with units
of other cells by synchronization on the events reflecting data exchange.

&HOOPRGXOH
6

5

5HFY'DWD\
[

N

 
  !"

N\

[


[




	


1

 9: ;=<)>
 9 ?@	
9 A)BC<)>

6HQG'DWD\



[



\

[

D+
	
E




1H[W
[

\

 	 	


\
[

#%$ & ')(+*-,,/.+0 0 * ,.21
'),"324 5
6 7%5'),/84



1

Fig. 4. Cell Module described by Petri Nets

At the second step it‚Äôs necessary to define the structure of Cell Module. Let‚Äôs
assume the unit to be consist of four submodules Input, Output, Logic, Neighbours, the interconnection between them is represented in figure 2. Submodules
Input and Output are the binary switches that allow or prohibit data transfer
between adjacent cells. They are fixed in a prohibition state after data transfer up to next time step. Submodule Neighbours receives a state of neighbours
during time step. Submodule Logic distributes the state of the cell to all it‚Äôs
neighbours during time step, and calculate the state of the cell depending on
quantity the neighbours, saved by Neighbours unit at change of time step. Such
principle of cell operation is achieved by synchronization of all submodules of
the cell so that they operate together with the same data.

Result of the third step of the program development on which internal structure of submodules proceeding from Cell Module is determinated is presented in
figure 3. Submodules Input, Output have identical structure and contain one by
two transitions, which operation depends on occurrence of the Data and Next
events in external access points of submodules. State value in submodule Logic
corresponds to the state of a cell. It changes after event Next occures. Submodule Neighbours summarizes the states of neighbours after each event Data(y)
occures and stores them in the place Neighbour.

5

6


	



	
5 HFY



1 H[W

	



6HQG



1 H[ W





	

	



	


	



	

1

!#"$%&"'
(*) 
+" ) ,-.

3 U R J UD P V WU X F WX U H D I WH UI X V V LR Q

Fig. 5. Structure of Cell Module and the program after transformation

After third step, the program description in terms of Petri Nets is supposed
completed, and it has to be translated in sequential instructions executed by
traditional processors. We will reffer to representation of the program in terms
of sequential interacting processes as executable. It‚Äôs seems obvious to us that
it‚Äôs necessary to limit as much as possible the quantity of processes in this representation because of finiteness of computing operational resources. In order to
analyze the program description we merge the developed submodules, having optimized the description preliminary. Optimization of coloured Petri Nets [5]may
be fulfilled with the help of the following two rules generated by us within the
scope of used description language:
1. If only one of incident transitions for a subset of places may be fulfilled at a
time, the subset of places can be merged in one place an ease.

2. If a number tokens of each type in a place remains invariable, tokens can be
merged.
Use of these rules reduces the quantity of places and tokens in the Net and
thus facilitates the analysis. The program description obtained as a result of
optimization represented in figure 5. We should pay your attention that it has
an excessive degree of a parallelism as the independence of all Send-Receive
operations it contains. Sequence of the Send-Receive operations can‚Äôt be seen by
the user and does not influence on the state of the program in the beginning of
each time step. The following rule is offered for such occasion:
‚Äì If any transitions have identical periodicity of operation and do not influence
on each other they may be fulfilled in the arbitrary, determinated beforehand,
order.
In order to determinate transitions with identical periodicity, state space of
the program based on the variables that participate in predicates of transitions
excitation is to be construct. If there will be a repeating state (in our case it
will be a state after Next event) than the transitions with identical periodicity
of operation, will be such that don‚Äôt influence on each other and fired obligatory between two repeated state. It‚Äôs possible to fix an order of firing for these
transitions.
The analysis of an examined example of the program shows that all SendReceive transitions have identical periodicity and don‚Äôt influence on each other,
therefore we can divide the grid of the template into the areas where SendReceive operations are fulfilled sequentially. So we achive next result: Because of
fixing transitions firing order the program description could be translated into
executed representation consisting of any quantity of processes.

3

Conclusion

In the article the problem of Petri Nets parallelism degree reduction is considered
on a model example. The way of parallel programs construction in terms of
the Petri Nets operating with regular structure data and producing executable
representation of the program as sequential interacting processes was shown.
Some ways of program description reduction in terms of Petri Nets were also
presented as well as searching and replacing of the program sections patient of
sequential fulfilment.

References
1. Send-Recv Considered Harmful? Myst and Truths about Parallel Programming,
Sergei Gorlatch, 6th International Conference, PaCT 2001, Novosibirsk, Russia,
September 2001.

2. E.A Golenkov, A.S Sokolov, G.V. Tarasov, D.I.Kharitonov:Experemental Version of Parallel Programs Translator from Petri Nets to C++, 6th International
Conference, PaCT 2001, Novosibirsk, Russia, September 2001.
3. Kotov V.E.Petri Nets - Moskow, Science, 1984.
4. Kotov V E: An Algebra for Parallelism Based on Petri nets. MFCS‚Äô78, Lect
Notes Comput Sci, vol 64. Springer, Berlin Heidelberg New York 1978, pp 39‚Äì55
5. Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical Use. Volume 1, Basic Concepts K. Jensen, Monographs in Theoretical Computer Science,
Springer-Verlag, 2nd corrected printing 1997.

Golenkov Eugeny Aleksandrovich.
Graduate Moscow Institute of Physics and Technology in 1971. Doctor of physical and mathematical sciences (1975.) Senior research officer of Russian academy
of sciences Institute for Automation and Control Processes. Field of interests:
computational networks protocols, data transferring systems, formal models of
parallel computations, Petri Nets theory.
Kharitonov Dmitry Ivanovich.
Graduate Moscow Institute of Physics and Technology in 1996. Research officer
of Russian academy of sciences Institute for Automation and Control Processes.
Field of interests: formal models of parallel computations, Petri Nets theory,
programming theory.
Sokolov Alexey Sergeevich.
Graduate Far East State Technical University in Vladivostok in 1999. Junior
research officer of Russian academy of sciences Institute for Automation and
Control Processes. Field of interests: formal models of parallel computations,
Petri Nets theory, programming theory.
Tarasov George Vitalievich.
Graduate Far East State Technical University in Vladivostok in 1999. Junior
research officer of Russian academy of sciences Institute for Automation and
Control Processes. Field of interests: distributed algorithms, computational netwoks, Petri Nets theory, programming theory.

