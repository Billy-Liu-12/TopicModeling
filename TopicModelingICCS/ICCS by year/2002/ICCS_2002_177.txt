Building Optimal Alphabetic Trees Recursively
Ahmed A. Belal1, Mohamed S. Selim2, Shymaa M. Arafat3
1

Department of Computer Science & Automatic Control, Faculty of Engineering, Alexandria University, Egypt.
Email: belala@usa.net
2
Department of Computer Science & Automatic Control, Faculty of Engineering, Alexandria University, Egypt.
3
Department of Computer Science, Faculty of Computer&Information Sciences, Ain Shams University, Egypt.
Email: sarafat@yahoo.com

Abstract. Optimal alphabetic binary trees (OATs) have a wide variety of applications in computer
science and information systems. Algorithms for building such trees in O(n log n) time and O(n)
space do exist. In this paper, we introduce a new simpler method for solving the same problem. An
algorithm for merging two optimal alphabetic binary trees into one optimal alphabetic binary tree
in linear time is first presented. This merging algorithm is then used to build the OAT recursively
in a divide-and-conquer manner. Although the resulting algorithm has the same order complexity
as previously known algorithms, the new method considerably outperforms the other
implementations . The analysis in the paper justifies the improvement. The figure below compares
the new implementation with the Hu-Tucker O(nlogn) implementation.
EXLOGLQJWKH2$7

QHZPHWKRG



ROGPHWKRG

WLPH









1






Q







Introduction

Binary trees have received a considerable attention in computer science research. Some tree
building algorithms assume an equally weighted node tree, in which case an optimal tree means a
balanced one. However, when the nodes of the tree, both internal and external, have different access
frequencies, it becomes natural to assign a different weight for each node. In this case, an optimal tree
is the one with minimal cost, where the cost is the summation of the products of the node weight by the
node level over all nodes. Optimal binary trees of this kind can be built in O(n2) time complexity [10].
For the simpler case where only external nodes have weights, the optimal tree can be found in time O(n
log n) . An example is the Huffman tree [8] which is widely used in coding and information theory. A
more constrained kind is the binary alphabetic tree, also called an insertion tree, where nodes must
appear in their original order in the final tree [5,6].
In the last few years more results on optimal binary alphabetic trees (OAT) were reported in the
literature. The equivalence of the OAT to optimal binary search trees was reported in [2]. The use of
the 1-dimensional O(n log n) algorithm for 2-dimensional information retrieval was considered in [1,3].
The search for sub O(nlogn) algorithms for the OAT problem was also recently reported [9,11]. It was
recently shown in [7] that linear time algorithms for building optimal binary alphabetic trees are
possible for some special weight sequences.
In this paper, we give an O(n) time algorithm to merge two OATs with n1,n2 nodes into an
(n=n1+n2) nodes OAT. The idea is to emulate the effect of rebuilding the optimal n-node tree using the
Hu-Tucker algorithm [6,10] and making use of the information already obtained during the process of
building the two previous trees.
Section 2 is a preface that gives a brief description of the Hu-Tucker algorithm followed by
the problem definition and an outline of the merging algorithm. Then section3 defines the terminology
and naming conventions used throughout the algorithm and section4 discusses some implementation
issues. Section5 introduces the proposed merging algorithm, and section6 shows how the merging
algorithm could be applied successively. Then, section7 shows how to build the OAT recursively using
successive merging. Finally section8 concludes the paper.

2 Preface

2.1 The Hu-Tucker Algorithm
The algorithm proceeds in three phases
Phase1 : Combination
This is where most of the work is done. Every node before combining is a square node also called
external node.If we let qi denotes the weight of the node or the node itself then when two square nodes
qi,qj combine they form a circular node also called internal node with weight qi+qj occupying the
position of the left child.
Due to the alphabetic constraint, two nodes can only combine if they form a compatible pair. Two
nodes in a sequence form a compatible pair if they are adjacent in the sequence or if all nodes between
them are internal nodes. Among all compatible pairs in a weight sequence ,the one having the
minimum weight is called the minimum compatible pair.
To break ties, the Hu-Tucker algorithm uses the convention that the node on the left has a smaller
weight.
A pair of nodes (qj,qk) is a Local Minimum Compatible Pair (LMCP) if
qi > qk for all nodes qi compatible with qj
qj â‰¤ ql for all nodes ql compatible with qk
The first phase of the algorithm keeps forming LMCPs until a tree is formed.
Phase 2 : Assigning Levels
Uses the tree built in phase1 to find the level of each node.
Phase 3 : Reconstruction
Uses a stack algorithm to construct an alphabetic binary tree based on the node levels.
Both phases 2,3 take time O(n) while phase1 requires O(n logn) time [10].It was shown in [7]
that phase1 can also be done in O(n) time for some special classes of weight sequences, as for example
the increasing weight sequence q1 â‰¤ q2 â‰¤ â€¦ â‰¤ qn.
2.2 Problem Definition
The algorithm tries to emulate the process of building the Hu-Tucker tree for the new
sequence of n nodes using information obtained in the process of building the two old trees. Recalling
that only phase1 of the Hu-Tucker algorithm takes O(n log n) time while phases 2&3 take linear time,
it suffices to show how the sequence of LMCPs resulting from phase1 for the new tree can be obtained
in linear time. The problem can thus be stated as follows.
Given 2 sequences of LMCPs generated for 2 weight sequences of length n1,n2, it is required to find, in
linear time, the corresponding sequence of LMCPs after concatenating the two weight sequences into
one weight sequence of length n1+ n2.
2.3 Algorithm Outline
Basically we are going to prove that each LMCP for the new tree can be obtained by
examining a constant number of nodes. The idea is to deduce relations between nodes of each old tree,
based on the rules for forming an LMCP, and use this to limit as much as possible the number of nodes
that need to be examined to determine an LMCP for the new tree.
The processing starts when the two boundary nodes, the rightmost node of the left tree and the
leftmost node of the right tree, appear in their corresponding LMCP lists. As long as these two nodes
are external, nodes from one tree cannot combine with nodes from the other tree . Thus, old LMCPs
formed in both trees before those two boundary nodes appear remain valid LMCPs for the new tree.
When the new LMCP list is completely formed, these entries that were originally valid
LMCPs for the old trees, although sorted amongst themselves ,will cause the new list of LMCPs to be
unsorted. A final merging phase is required to merge 3 lists,the list of valid LMCPs from each old tree,
and the list of newly formed LMCPs .

3 Terminology
In what follows, we will call the sequence of LMCPs for an old tree, the old tree list. Due to the
combination rules, the entries of the old tree list are sorted. Similarly, we will call the sequence of
LMCPs for the new tree, the new tree list. The set of nodes that needs to be examined to determine
each new LMCP is called the working sequence.
Old LMCPs
These are entries of the old tree list.A general form of an old LMCP is two compatible nodes that
constituted the local minimum compatible pair for its old tree. However, during the course of the
algorithm we may face special kinds of old LMCPs that will be handled differently.
Blocked LMCPs
A blocked LMCP is an old LMCP having both of its nodes not compatible with all the nodes in the
current working sequence.
When an old LMCP is to be examined and found to have external nodes separating it from the current
working sequence, we call it a blocked LMCP. Blocked LMCPs are valid LMCPs for the new tree, so
they are not added to the working sequence and are moved directly to the new tree list. However,
although all blocked LMCPs will be in ascending order, they will not necessarily appear in their right
order in the new tree list, which will make the new tree list not sorted.
Single Nodes
A single node is an old LMCP with one of its nodes deleted due to a previously broken LMCP.
When the two nodes of an old LMCP are examined in the working sequence and one of them combines
to form the new LMCP the old LMCP becomes a broken LMCP and must be deleted from all further
appearances in the old tree list since it is no longer a valid entry for the new tree. This will result in
LMCPs with one deleted node and one valid node. Note that an LMCP with both of its nodes deleted
will be skipped. Note also, that deleting broken entries will not contribute with more than a linear
factor to the whole process since there are only n-1 internal nodes to delete.
Nodes in the working sequence
The set of nodes to be examined in the working sequence are the nodes in the current LMCP plus the
nodes that became valid candidates for the new LMCP. Due to the processing of previous LMCPs, two
kinds of nodes may result.
New Nodes List
The new nodes list is the list of newly generated nodes that did not combine yet.
At each step, when the working sequence is examined to determine the new LMCP, if the new LMCP
is different from the old one, a new node will result. This new node will participate in further
combinations and thus should be considered in the working sequence. Since, new nodes will be
generated frequently, we will put them successively in a list called the new nodes list. Due to the rules
of LMCP generation, new nodes will be generated in ascending order and are all compatible with each
other. Thus the new nodes list is sorted; actually it can be best represented by a "queue" where new
nodes are inserted at the tail of the list while the head of the list refers to the smallest node. Also, since
the list is sorted, only the first two nodes of the list are added to the working sequence. When a new
node combines, it is virtually deleted from the list, i.e. the head is moved to the next node.
Leftover Nodes
A leftover node is an old node that participated in an old broken LMCP and is free now and available
for further combinations.
When an old LMCP is added to the working sequence, we do not examine the next one till one
of its nodes is chosen in the new LMCP. If only one is chosen, then the old LMCP is broken and the
other node remains in the working sequence and becomes a valid candidate for next LMCPs. We will
call this node a leftover node.
Since the companion of the leftover node formed a new node, the leftover node is compatible with all
nodes in the new nodes list. A second leftover node can not result till the first one combines. Thus,
there is only one leftover node for each old tree.

4 Implementation Issues
In this section, we discuss different kinds of node processing that happens through the algorithm. The
linearity of the algorithm will follow by showing that only a constant number of nodes will be
examined in the working sequence at a time. However, there are some implementation details that
concern node processing and need further explaining. In this section we explore each detail and show
how it can be implemented without losing the linearity of the algorithm.
Checking Compatibility
To check whether two nodes are compatible or not, two markers will be added to each node i to
point to the first external node on its left (left[i]) and its right (right[i]). For example, an external node i,
will have its markers pointing at nodes i-1, i+1 respectively; while the markers of the root node will
have the values 0, n+1.
The check of compatibility for 2 nodes i,j, where i < j, will be:
If ( right[i] > left[j] ) Then i,j are compatible
Result1: Checking whether 2 nodes are compatible or not can be done in a constant time.
Deleting Nodes
When an old LMCP is broken, it must be deleted from all subsequent appearances in the old
tree list. This can be implemented by maintaining a link from each internal node to its parent. The
deletion can be done by following the links and deleting nodes along the path node, and since we have
only n-1 internal nodes in the old tree the deletion process will not take more than a linear time for the
whole tree.
Result2: Deleting broken LMCPs from the old tree list will not contribute more than a linear factor to
the merging algorithm.
An LMCP pair
From what was stated we can conclude that an LMCP entry must contain a pointer to the LMCP that
contains its parent node (to facilitate deleting broken entries). In addition it contains the two nodes
forming it; each node must hold the following information
- Its weight value, and its identity (or its relative order). These values are essential for choosing nodes
for an LMCP.
- A pointer to the LMCP that formed it, such a pointer will be null for an external node. This pointer is
used in finding the level of each node, and also as a check for whether it is internal or external. In
addition it is used to adjust the pointer to the LMCP parent node during the course of the algorithm.
- Left, and right borders that define the first external nodes on its left and right respectively; such
borders are used in compatibility checks.
This information is readily available during the process of finding the OAT in any known method
[4,5,6], and can be kept in O(1) time and space for each node.
Consider as an example the working sequence a,b,c,.. of external nodes, if the nodes a=1,b=2
where the first to combine, their LMCP entry would look something like ((a:1,null,*,b), (b:2,null,a,c),
3,p) indicating that the formed node ab with value 3 can combine with any node to its left ,c is the first
non-compatible node to its right and p is a pointer to its parent node. Borders are added to each node in
case the LMCP is broken, the borders of the new node can be easily deduced from these borders. For
reasons of clarity, these additional pieces of information are not added in the context.

5 Merging Optimal Alphabetic Trees
This section introduces the algorithm for merging in more detail.
Fig. 1 shows two symbolic sequences of LMCPs to merge; where the order of nodes in the pair reflects
their order in the weight sequence. For simplicity, our old tree lists start from the pair where the
corresponding boundary node participates as earlier pairs are just simply copied with no change. We
trace the first few entries to determine the identity and the number of nodes needed in the working
sequence.

.
.
.
(x1,y1)
.
.
.
(C1,D1)
(A1,B1)
1st Old tree list

.
.
.
(x2,y2)
.
.
.
(C2,D2)
(A2,B2)
2nd Old tree list

Fig. 1. two old tree lists to be merged
B1, A2 are the two boundary nodes, the new LMCP has 3 possibilities.
Either (A1,B1) or (A2,B2) :
In this case we bring the next old LMCP from the corresponding old tree list.
-The third possibility is (B1,A2):
Then both LMCPs are broken and deleted from all subsequent appearance in the old tree lists. The new
node (B1+A2) is the first node in the new nodes list, and 2 leftover nodes, A1 and B2, will result.
The process will continue in the same manner by bringing the next two LMCPs from both old
tree lists with the two leftover nodes and the new node in the working sequence to determine the new
LMCP. In all further steps there will be no more than one leftover node for each tree (lemma1). If an
LMCP contains a single node and there is no corresponding leftover node, we consider it as a leftover
node and look ahead for the next LMCP entry.
Lemma 1: There is at most one leftover node for each tree in the working sequence.
Proof:
We conduct the proof for one tree.
Consider the first broken LMCP from one tree, we have a leftover node say x and a new node say N in
our working sequence. The next LMCP say v,w is brought to the working sequence. We are going to
prove that neither v nor w will combine and leave its partner until the leftover node x combines.
There are 3 possible relative positions for v,w.
x
v w N:
Since x is compatible with N, both v,w must be internal; x was chosen to combine in the old tree
before either of them , thus x < v,w and will be favored over them in any LMCP; i.e. neither v nor w
will be chosen with any node other than x. ----------------(1)
v
x w N:
v , w are compatible, so x must be internal. Also, x , N are compatible, so w is internal.
x was chosen first although v,w were compatible too. Thus x < v,w and they can not combine before
x does-----------------------------------------------------------------(2)

v w x
N:
-If x is internal, then w was compatible and not chosen; i.e. x < w. If w is internal too, the same applies
to v; if not then v can only combine with w causing no more leftover nodes to appear.
-If x is external then v,w can only combine with x and thus not before itâ€¦â€¦â€¦(3)
From (1),(2),(3):
Another leftover node cannot result till the existing one combines, the same argument stands along all
steps of the working sequence
However, one more node for each tree may be needed in further steps. Consider the following lemma.
Lemma 2: We need to add the minimum compatible internal node in each old tree list to the
working sequence
Proof:
We conduct the proof for one tree, and it is applicable for both old tree lists.
By the term minimum compatible internal node, we refer to the smallest internal node that did not
combine yet and is compatible with the rest of the nodes in the current working sequence. Let us call
this node Z.
If both nodes of the current LMCP pair, from the old tree list, are internal then Z is their minimum,
already proven to be needed.
If the nearest of them to the working sequence, say node v, is internal, then Z is either v or w (note that
if the v was external then w is blocked from the rest of the working sequence so v is not necessarily
Z).
It remains to consider the case when the nearest of them (or both) is external .
Let our working sequence be as follows
w

Z v x

New

where (v,w) is the LMCP pair, x is the leftover node, and New represents the new nodes list and Z is
the node we are looking for. (v+Z) cannot be the new LMCP since (v+w) is smaller than it (it was
chosen in the old tree). However, there is no guarantee that (v+x) is smaller than (Z+x). So, Z is a
possible valid candidate and we must find it and add it to the working sequence.
Note that this argument applies for every internal node that is compatible with the working sequence.
However, since Z represents their minimum, we only need to examine it
The search for the needed node Z will not contribute more than a linear time factor to the whole
algorithm. A marker is used to scan the old tree list for Z, since a node can be used at most once the
marker starts the search from where it stopped the previous time. Naturally, if Z was chosen to
combine, its path will be deleted from the old tree list.
Thus, in general the working sequence will contain 2 LMCP pairs (one for each tree), 2
leftover nodes, 2 minimum internal compatible nodes, and finally 2 nodes from the new nodes list; a
total of 10 nodes.

Theorem 1:
When merging two optimal alphabetic trees into one optimal alphabetic tree, every new LMCP can
be determined by examining no more than ten nodes.
Proof:
Let us call the two old LMCPs v,w and vâ€™,wâ€™, the leftover nodes x, xâ€™, the minimum compatible
internal nodes z,zâ€™, the 2 first nodes in the new nodes lists N1,N2
Let us assume another node U is needed in the working sequence. We can safely assume that U is a
node from one of the old tree lists, since it is clear that we do not need more than 2 nodes from the new
nodes list. We will assume that U belongs to the first tree, the same argument will apply if U is from
the second tree. The working sequence will be as follows
w

v

z

x

U

N1

N2

xâ€™

zâ€™

vâ€™

wâ€™

where z,zâ€™, N1,N2 are internal nodes, while the rest could be internal or external. There are no
restrictions on the relative positions of the nodes .
Case1: U is to the left of v:
- U was available in the old tree at the time (v,w) was formed and yet was not chosen. Then,
v < U which means that v will be chosen over U in any summation
If the old LMCP is a single node, the deleted node must be compatible with the working sequence.
The only summation U can participates in is with the remaining node, say w; if w is internal then w <
U and if it is external then it blocks U from the rest of the working sequence. At the same time, from
the order of LMCPs, the deleted node is smaller than U and larger than x, and thus x < U; so U cannot
be chosen. Recall that x must exist in case of a single node otherwise we would have added the next
LMCP entry (statement3).
Case2: U is to the right of v:
If U is external:
It cannot be to the right of x, since x is compatible with N1, N2 (statement1).
It cannot be between x,v (or v, N1or N2 if x did not exist), otherwise (v,w) would have been
considered a blocked LMCP and was not added to the working sequence in the first place.
Thus U cannot be external.
If U is internal:
By definition, z is the minimum compatible internal node thus z < U and can replace it in any
summation.
The summation z+U > v+w otherwise it would have been chosen instead.
Again, if the LMCP is a single node we still know that z+x < z+U.
Thus, U cannot be chosen in the new LMCP.
Hence U is not a valid candidate for the new LMCP whether it is external or internal, and no matter
what position it is in.
The following example will demonstrate the process.

Example
Fig. 2 shows an example of two 6 nodes OATs to be merged; the weight sequences and the old tree
lists are shown.
A

B

C

D

E

F

G

H

I

J

K

L

7

9

14

21

1

10

4

12

5

8

16

6

old weight sequence for 1st tree

old weight sequence for 2nd tree

(ABC,DEF)62
(D,EF)32
(AB,C)30
(A,B)16
(E,F) 11

(GHIJ,KL)51
(GH,IJ)29
(K,L)22
(G,H)16
(I,J) 13

old tree list for 1st tree

old tree list for 2nd tree
Fig. 2. two OATs to be merged

The old LMCP (I,J) is copied since it was formed before the node G combined. The pairs (E,F) and
(G,H) constitute the first working sequence, and (E,F) is the chosen LMCP. The next one from the 1st
tree is looked up (A,B) and found to be blocked, and so is (AB,C). Then the nodes forming the LMCP
(D,EF) are brought to the working sequence . (EF,G) is the new LMCP, D,H become the first leftover
nodes and EFG is the first node in the new nodes list. After that, ABC is a single node brought from
the 1st tree, and (K,L) are brought from the 2nd tree list. Also, since K is external the minimum internal
compatible node, I J, is brought to the working sequence. (K,L) is chosen as the new LMCP, and the
process continues in the same manner till the root is formed at the last step; different working
sequences, the new nodes list, and the new tree list are shown in Fig. 3. Blocked entries from the left
tree are marked by (L), and from the right tree by (R).
E
1

F

G

10

H

4

12

A , B are blocked
AB , C are blocked
D

EF

G

H

21

11

4

12

ABC D
30

21

EFG

H

IJ

K

L

15

12

13

16

6

ABC D
30

21

ABC D
30

21

ABC

HIJ

30

25

EFG

H

IJ

15

12

13

EFG

HIJ

KL

15

25

DEFG KL
36

22
(ABCDEFG,HIJKL)113
(ABC,DEFG) 66
(HIJ,KL) 47
(D,EFG) 36
(H,IJ) 25
(EF,G) 15

ABC DEFG HIJKL
30

36

47

HIJKL ABCDEFG
47

(ABCDEFG,HIJKL)113
(ABC,DEFG) 66
(HIJ,KL) 47
(D,EFG) 36
(H,IJ) 25
(K,L) 22
(EF,G)15
(AB,C)30 (L)
(A,B)16
(L)
(E,F)11
(I,J)13
(R)

22

66

working sequences

new nodes list

new tree list

Fig. 3. different working sequences and final lists

Performance Analysis
It was shown through the analysis that only a constant number of nodes (10) is needed to form each
LMCP in the new tree. Since there are n-1 such LMCPs for an n node tree, merging two OATs into one
tree that contains both weight sequences can be done in linear time, result3.
Result 3: Two optimal alphabetic trees can be merged into one optimal alphabetic tree in linear time
Fig 4 shows the results of sample runs made for the algorithms, the curves show the linearity of the
algorithm.
0HUJLQJ2$7V




WLPH






DYHUDJH



PLQ
PD[
















Q

Fig. 4. runtime for merging two OATs into one optimal alphabetic tree

6 Successive Merging
In this section we show how the merging algorithm can be applied successively.
Problem statement
In order to be able to apply the previous merging algorithm successively, the new tree list
produced at each stage must contain all the information needed by the algorithm, that is the same
information contained in the old tree list as a result of running the original Hu-Tucker algorithm.
However, the merging algorithm as described, cannot get the left and right borders of each node
correctly. This is because some LMCPs are out of order; their borders, and the borders of other LMCPs
as well depend on their right position in the new tree list.
To illustrate the problem, consider as an example the following weight sequence of the left tree at an
intermediate step of the merging algorithm; for simplicity, borders are assigned to the LMCP pair
instead of each node.
â€¦

A â€¦â€¦. .. x

....

y â€¦.â€¦â€¦.

B â€¦â€¦â€¦. C

D

E

& let the old tree list contain the following two entries.
.
.
.

(B, * )
(x,y)
.
.
.

In the old tree list C appeared in an earlier entry (leftover node), or maybe C is a new node that was
composed from compatible nodes, the same applies for D,E.
(x,y) is a blocked LMCP, so it will be copied to the new tree list with borders ( A,B)
(A,(x,y),B)
Then B will be added to the working sequence
B will combine with say C forming the entry (B,C)
Then (D,E) will combine after that
The new tree list will contain the following entries (with other entries of course), where (x,y) is out of
order.
(D,E)
(B,C)
(x,y)
There are 3 possibilities for the sorted order, each will have different borders
â€¦. A â€¦â€¦â€¦

x â€¦..

y â€¦â€¦â€¦â€¦ B â€¦â€¦â€¦. C

D

E

(A,(D,E),-)
(A,(B,C),-)
(A,(x,y),B)

(A,(D,E),-)
(A,(x,y),-)
(y,(B,C),-)

(A,(x,y),-)
(y,(D,E),-)
(y,(B,C),-)

Thus, there is no way of knowing the borders of these LMCPs before we sort the list.
Solution
The only way to adjust the borders and make the new tree list valid for successive use, is to maintain
the sorted order of the new tree list at each step. This can be done by keeping blocked LMCPs in
separate lists (or keeping pointers to them in their original place in the old tree lists) and insert them in
the right order; at each step, the selected LMCP is compared with the smallest blocked LMCP and the
smaller of them is inserted.
When each LMCP is inserted exactly in its right order, it is much easier to adjust the borders
of each node. This depends on the fact that only borders of nodes compatible with the working
sequence may change, borders of blocked LMCPs will not change unless they became compatible
when they are in the right order (like the last two possibilities for (x,y) position in the preceding
example), otherwise they are copied with their old borders.
To adjust the borders of compatible nodes, we maintain two linked lists of external nodes to
the left and right of the working area that did not combine yet. For example, in the merging algorithm,
the left list will start with all external nodes in the left tree, and the right list contains those of the right
tree.
Whenever an external node combines (blocked or not blocked), it is deleted from its
corresponding list (deletion is done in a constant time by maintaining a pointer from each external
node to its representing node in the linked list). At any step, the borders of the working area are the
heads of the two lists, then the borders of any node inside the working area can be adjusted in constant
time.
Example
Here, we repeat the merging example in section 5 and show how the borders of each node can be
adjusted.
We start with the two linked lists as follows
Left list: F ( ' & % $
Right list: G + , - . /
Thus, the left and right borders are F,G.
At first (I,J) is kept then when (E,F) is chosen, they are compared and (E,F) is found smaller
and is inserted in the new tree list; E,F are deleted from the left list.(I,J) remains kept, (A,B) and
(AB,C) are kept too since they are blocked. Then when (E,FG) is chosen, it is compared to both (I,J)
and (A,B). (I,J) is the smaller so it is inserted with its old borders since it remained incompatible; I,J
are deleted from the right list.
The rest of the steps follow the same procedure; the chosen LMCP with its borders, and the
corresponding left and right lists for each step of the algorithm are shown in Table 1.

LMCP pair
(D,(E,F),G)
(H,(I,J),K)
(D,(EF,G),H)
(-,(A,B),C)
(H,(K,L),D)
(D,(H,IJ),-)
(-,(AB,C),D)
(-,(D,EFG),-)
(-,(HIJ,KL),-)
(-,(ABC,DEFG),-)
(-,(ABCDEFG,HIJKL),-)

Left list
D & %
D & %
D & %
D &
D &
D &
D
-

$
$
$

Right list
G + ,
G + .
H . /
H . /
H
-

-

.

/

/

Table 1. : the chosen LMCP, and the left and right linked lists at each step

7 Building the optimal alphabetic tree
In this section, we use the merging algorithm described above to build an optimal alphabetic tree in a
recursive way that is expected to have less runtime, although it has the same order complexity. The
tree is constructed by repeated merging; a procedure similar to that of the merge-sort algorithm.
Problem Definition
It is required to find the optimal alphabetic tree for a given set of weights. Here, we propose a
different implementation method based on the merging algorithm of the previous section. Applying
phases 2,3 of the Hu-Tucker algorithm to the LMCP list is a linear time process that is similar for all
implementation methods. Thus, we are going to limit the discussion, whether in the analysis or in the
comparison between different methods, to finding the LMCP list for the tree. Hence the problem can
be defined as follows
Given a weight sequence of n nodes, it is required to find the LMCP list for the optimal alphabetic tree
of that weight sequence.
For simplicity of recursion, n is assumed to be a power of 2; a condition that can be easily waived
without loss of generality.
Algorithm
The steps of the algorithm can be summarized as follows
The set of weights is divided into subsets of length 2, where the LMCP list contains a single entry, the
existing pair of nodes with the node with smaller index on the left (i.e. an LMCP entry reserves the
relative order between its two nodes).
The n/2 sublists is then grouped into n/4 pairs, where each pair contains two adjacent sublists. The two
LMCP lists of each group are merged, using the prescribed merging algorithm, giving the LMCP list
for the subtree of the 4 nodes in the group.

The process is repeated, at each step the existing n/k sublists each containing k nodes are merged into
n/2k sublists each containing 2k nodes. In the last step, two trees are merged, each of length n/2, to get
the final tree.
Fig.5 shows a pseudo code of the algorithm, where it is defined in a recursive manner. An
optimal tree of length n is obtained by finding the optimal tree of its left and right parts, each of length
n/2, recursively using the same algorithm, then merging them.
Construct (1,n)
{ a procedure to construct a Hu-Tucker tree of the weight sequence in the arrayâ€™treeâ€™, the two
parameters are the indeces of the beginning and the end of the array, the procedure returns an LMCP
list}
Begin
If (n > 2) Then
Construct(1, n/2)
Construct(n/2+1,n)
Merge(1,n/2,n/2+1,n)
{ a procedure for merging two sublists, the parameters represent the indices of the beginning and the
end in the array tree}
Else
LMCP pair = (tree[1],tree[2])
End
Fig.5: pseudo code of the algorithm

Complexity Analysis
For the space complexity, the total length of LMCP lists at each step of the algorithm never
exceeds n. Thus the algorithm has a linear space complexity.
As for the time complexity of the algorithm T(n), it can be described by the following
recurrence relation
T(n) = O(n) + 2 T(n/2)
T(n) = O(n log n)
The algorithm has the same order complexity as the well known method for constructing the
Hu-Tucker tree. However, it is expected to have a smaller constant factor for its simplicity and since
the constant of linearity for the merging algorithm is small, while the known implementation is rather
complex and involves the use of many data structures [4]. Specifically, there are two factors that favor
the new algorithm.
The first is that the new algorithm has more locality of reference. The same set of data
(memory locations) is processed by each merging task, then other sets are added gradualy at higher
levels. On the othe hand, the old implementation processes different sets of data to find the LMCP and
adjust the priority queues. Add to this, the fact that the merged data is stored in arrays (contiguous

memory locations), while the dynamic data structures in the other implementations store the data in
scattered memory locations.
The second factor is due to copied LMCPs in our algorithm and which involve almost no
processing. The rules of compatability imposed on alphabetic trees, cause many of the old LMCPs to
be blocked and thus valid for the new tree. For example, it is a rare situation when an LMCP formed at
the extreme left of the first tree will be broken due to the merging process.
Experimental Results
Sample runs were made to compare runtimes of the proposed algorithm with that of the known
implementation. The resulting curves for the average and worst case runtimes are shown in Figs. 7 , 8
respectively, where the proposed method has a considerably less runtime.
Also, sample runs showed that the number of copied LMCPs exceeds half the entries in the old tree list
(by copied LMCPs we mean blocked LMCPs from both trees in a merging step, and LMCPs before the
two boundary nodes appear in the old tree lists; i.e. those LMCPs that are not brought to the working
sequence), Fig.9.
EXLOGLQJWKH2$7

EXLOGLQJWKH2$7



QHZPHWKRG





ROGPHWKRG

WLPH

WLPH

ROGPHWKRG



QHZPHWKRG



























Q









Fig. 6. average runtime for both methods






Q







Fig. 7. : worst case runtime for both methods

1XPEHURIFRSLHG /0&3

V









Q


DYHUDJH



PLQ
PD[








Q







Fig. 8: number of copied LMCPs in a merging step

All runs in this paper were made on a Pentium I 100 MHz processor, 16 MB RAM; the
program was implemented with Borland C++ programming language, and the random sequences were
generated using the language built-in random number generator.

8 Conclusion
In this paper we introduced an algorithm to merge two optimal alphabetic trees into one
optimal tree in linear time, such algorithm helps to expand the domain of weight sequences whose
optimal alphabetic trees can be obtained in linear time. We also developed a faster technique to build
the optimal alphabetic tree, using the merging algorithm, in O(n log n) time but with a smaller constant
than existing implementations.

References
[1] Ahmed M.A., Belal A.A. and Ahmed K.M., "Optimal insertion in two-dimensional arrays", International
Journal of Information Sciences, 99(1/2) : 1-20, June 1997.
[2] Andersson A., "A note on searching in a binary search tree", Software-Practice and Experience, 21(10) : 11251128, 1991.
[3] Belal A.A., Ahmed M.A., Arafat S.M., "Limiting the search for 2-dimensional optimal alphabetic trees",
Fourth International Joint Conference on Information Sciences, October 1998.
[4] Davis S.T., "Hu-Tucker algorithm for building optimal alphabetic binary search trees", Rochester Institute of
Technology CS Dept., A master thesis, Dec. 1998.
[5] Garcia A.M. and Wachs M.L., "A new algorithm for minimum cost binary trees", SIAM Journal on
Computing, 6(4): 622-642, 1977.
[6] Hu T.C. and Tucker A.C., "Optimal computer search trees and variable-length alphabetic codes", SIAM
Journal on Applied Mathematics, 21(4): 514-532, 1971.
[7] Hu T.C., Morgenthaler J.D., "Optimum alphabetic binary trees", Combinatorics and Computer Science, 8th
Franco-Japanese and 4th Franco-Chinese Conference, Vol. 1120 of Lecture Notes in Computer Science,
Springer-Verlag, 1996, pp.234-243.
[8] Huffman D.A., "A method for the construction of minimum redundancy codes", Proceedings of the IRE, 40:
1098-1101, 1952.
[9] Klawe M.M. and Mumey B., "Upper and lower bounds on constructing alphabetic binary trees", Proceedings
of the 4th Annual ACM-SIAM Symposium on Discrete Algorithms, page 185-193, 1993.
[10] Knuth D.E., "The Art of Computer Programming, Volume 3: Sorting and Searching", Addison-Wesley,
Reading, MA, 1973.
[11] Przytycka T.M. and Larmore L.L., "The optimal alphabetic tree problem revisited", Journal of Algorithms,
28(1): 1-20, June 1997.

