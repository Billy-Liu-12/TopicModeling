Scenario Switches and State Updates in an Agent based solution to
construct Interactive Simulation Systems

Z. Zhao, R.G. Belleman, G.D. van Albada, P.M.A. Sloot
Section Computational Science
Faculty of Sciences, Mathematics and Computer Science, Universiteit van Amsterdam
Kruislaan 403, 1098SJ Amsterdam, the Netherlands
(zhiming | robbel | dick | sloot)@science.uva.nl

Abstract
An Interactive Simulation System (ISS) is a system that combines simulation, visualisation and
interaction modules. It allows a user to interactively explore simulation results and modify the
parameters of the simulation at run-time. The modules of an ISS are preferably executed on dedicated
hardware platforms to achieve higher performance or to support sophisticated interaction capabilities;
in many cases they are distributed. In order to support the interaction capabilities promised by an ISS,
it is necessary to efficiently update and visualise simulation states and flexibly switch between
interaction contexts. Integrating distributed modules into one system requires certain control
components to be added in each module. When interaction scenarios are complicated, these control
components often become large and complex. The reusability of these components is often limited. To
make the integration more flexible and the solution more reusable, we isolated these control
components out of the system’s modules and implemented them as an agent framework. In this paper
we will describe the architecture of this agent framework, and discuss how they flexibly integrate
distributed modules and provide interaction support.
Keywords: Interactive Simulation Systems, Intelligent Agents.

1.

Introduction

Interactive visualisation is a powerful and invaluable tool for scientists to explore the results of a
simulation and to improve the underlying model. For a complex simulation, its parameter space can be
reduced by a human expert when he/she is put in the simulation loop. This can significantly shorten the
experimental cycle and improve the efficiency of resource usage. An Interactive Simulation System
(ISS) is a system that combines simulation and interactive visualisation and allows the users to explore
the problem space and steer the execution paths of the simulator at runtime. During the last decade,
interactive simulation systems have become an important research topic in the area of computational
science [1,2,3, 4].
In general, a minimum ISS has three basic modules: simulation, visualisation and interaction. The
simulator computes and transfers data to the visualisation and interaction modules regularly; the
simulation parameters can be manipulated in the interaction module. However, for parallel/distributed
simulators, combing the simulation kernels and visualisation modules into one program is not a
practical way to develop ISSs. On the one hand this is because simulators and visualisation programs
are often developed on different platforms and with different software architectures. On the other hand
simulators and visualisation programs often are inherently very complex; putting them into one
program will add additional complexity to both. They are often connected using a Client-Server
paradigm [8]. Both simulator and visualisation can be kept simple and can be distributed over different
computers and run in parallel. Currently, two principal approaches exist for constructing ISSs [4,5,6,7].
The first approach starts with building simulators using a high performance simulation engine, and then
equips them with interaction capabilities. SPEEDS [5] is an example. The other one is to use a run time
infrastructure software to interconnect federated simulators. Protocols such as Distributed Interactive

Simulation (DIS) [6] and High Level Architecture (HLA)[7] support this approach. Each of these
approaches has its advantages and disadvantages. The first one often achieves higher efficiency
because of the specific development environment and problem domain. The second one can easily
interconnect modules across platforms and places fewer restrictions on the internal implementation of
individual simulators. It can exhibit more flexibility and reusability of components than the first one.
To realise the interaction capabilities promised by an ISS, all its modules together have to take
actions under certain constrains. In our work, we consider scenarios to specify the relation between
interaction capabilities and the required behaviour of the modules. At run time, the method of updating
and distribution of the simulation states is one of the basic constraints in a scenario. Depending on the
interaction context in each scenario, the simulation state needs to be updated in different ways. In many
implementations, these constraints are incorporated in the simulators and visualisation modules. This is
straightforward for the system design, but often makes the system modules difficult to reuse.
Separating these components from the simulation and visualisation modules and implementing them as
Intelligent Agents (IA) yields a more generic and portable solution [14].
In earlier publications [12, 13, 15], we have described interactive visualisation systems, especially
the Virtual Environment (VE), as a device for scientific visualisation and user interaction. The
Intelligent Virtual Environment (IVE) tries to integrate simulators and interactive visualisation
programs in a VE, and adds interactive simulation capabilities. In the IVE, agents are used as basic
building blocks to interconnect simulators and interactive visualisation programs; they are employed to
customise the inter-module communication and provide support for module co-ordination and
interaction. We try to implement these agents as a reusable framework for different problem domains.
In this paper, we will first introduce the architecture of this agent framework AGent based Intelligent
Virtual Environment (AG-IVE), next we discuss the related issues of simulation state updates and
switches between system scenarios. After that, we will present some experimental results on the
performance of a prototype of AG-IVE.

2. Intelligent Agents and module integration

2.1. Agent paradigm: AGent based Intelligent Virtual Environment (AG-IVE)
AG-IVE is an agent-based solution to interconnecting simulators and interactive visualisation
programs which tries to combine the advantages of both development approaches mentioned in the
previous section. It aims to re-use available simulation kernels and visualisation programs and to
integrate them in a portable way. In AG-IVE, agents are used to federalise simulators and visualisation
programs, while a global run time infrastructure is employed to inter-connect them. Currently, the Run
Time Infrastructure (RTI) of the High Level Architecture (HLA) [7] is used.
In AG-IVE, two types of agents are defined: “Communication Agents” (ComA) and “Module

A Parallel
Simulator
module.

Distributing simulation
states.

Visualisation Module

V

S
I
Modify
simulation
parameters.

Communication Agent: used to
enable cross module communication.

Interaction Module
In a VE.

Module Agent: used to orchestrate
module co-ordination.

Figure 1: An example of AG-IVE when it is used to interconnect
simulator and interactive visualisation module. Each module
internally uses it own communication interface.

Agents” (MA). The ComAs hide the implementation details of the simulators and interactive
visualisation programs, and provide them with an interface, enabling them to plug into the global run
time environment and interact with other modules. The MAs orchestrate the execution of modules
(simulation, visualisation and interaction), and control scenario transitions of the whole system by cooperating with other agents. Figure 1 depicts an example of these agents when they are used to
integrate a system.
The example given in Figure 1 contains a parallel simulator on the left and an interactive
visualisation module on the right. The visualisation module presents simulation results in a VE in
which a user can interactively study the data space. In many cases, the VE is not always necessary for
interactive visualisation and a desktop environment can also be used. ComAs interface these modules
to the RTI and transfer data between them (see thick dashed lines). MAs co-operate with each other
and the ComAs to control the behaviour of the system (see double arrowed lines). In the next section,
we will discuss the function of these agents and the interaction between them.
2.2. Communication Agents and Module Agents
In AG-IVE, the global run time infrastructure is only used for communication between the modules,
and the simulators and interactive visualisation programs internally can still use their original
communication mechanisms. Therefore the required code modification is reduced. In each module, the
processes needing inter-module communication are equipped with a ComA.
To minimise the influence on the execution of the host process and to make the integration easier, a
ComA is preferably implemented as a separate thread from its host process. The ComA is designed as
an event processing architecture which contains four basic components: a task generator, a task list, a
task interpreter and a shared data object space (depicted in Figure 2). In a ComA, a task is the
description of certain actions that the ComA should carry out. A task can only be generated by the task
generator; and the task generator can be called by either the host process or the ComA itself. For
instance, the host process can cause the ComA to send data packages to the RTI, and the ComA can
receive messages from other agents and react to them by creating certain tasks. Normally, a task will
not be processed immediately after being created but kept in a task list. Depending on the priority and
the time tamp associated with each task, the task interpreter schedules tasks and executes them. This
execution style hides the implementation details of the ComA from the host process, and keeps the
internal functions of a ComA from being called directly by other threads. Another advantage is that
task interpreter and generator can be executed in separate threads and run in parallel.
Shared data object space

Access to shared objects

Run time infrastructure
(RTI)

ComA Task Generator

Communication Agent

Generate tasks
data

data

Task
Interpreter

Task list

Events coming from RTI

Call task
generator

Access to
shared
objects

Main
thread of
host
process

Figure 2: Architecture of a Communication Agent.

In AG-IVE, a shared object space is used to exchange information between host process and the
ComA. In the shared object space, all information is encapsulated as data objects. The structures of the
data objects are defined as data classes. These are fully described in a globally accessible “Scenario
Description file”.
Internally, a ComA pre-defines a special kind of data class, the so called Monitor. During system
creation, the host process can transfer access rights of its parameters to ComA by registering them as
data items in the Monitor object. Therefore, the ComA can manipulate the execution of the host
process via the Monitor.
Adding a ComA into a process inevitably requires certain code level adaptation. To simplify the
integration and reduce the influence on the original software architecture, the interface for accessing
shared objects and creating tasks of ComAs has been implemented in a standard way. This also allows

a ComA to be reused in different modules. In order to minimise the influence on system performance,
the function of a ComA is limited to transferring data and responding to external events. More
sophisticated functions to control the execution and interaction between modules are implemented in
MAs. Each MA is executed as an independent process. Each module is associated with least one MA,
and a MA interacts with all ComAs in that module. The MA influences the execution of the module by
manipulating the ComAs provided in that module. Depending on the type of ISS module, each Module
Agent has different functions.
The interface of each ComA, such as the set of events to which it can respond and the set of monitor
parameters that it can use to manipulate its host process, is described in the Scenario Description file.
From this, a MA can know how to manipulate the ComA. In the coming sections, we will discuss how
ComAs and MAs use the Scenario Description file and co-operate with each other to realise functions
like scenario control and state update.
2.3. Interaction and scenario switches
ISSs allow the user to explore the computational results and to interactively manipulate the
parameters of the simulation. In AG-IVE, the contexts of certain interaction and their required
constraints on system modules are represented by scenarios. Each scenario has one or more basic
interaction objectives, for instance exploring simulation results, modifying simulation parameters or
probing information. In different systems, the scenarios of the interaction may be different. In AG-IVE,
the following basic interaction scenarios are distinguished.
(1) Obtaining data from the simulator (sample, query);
(2) Explore the visualisation of the data obtained from the simulation;
(3) Adjust the simulation parameters (computational steering);
(4) “VCR” control of the simulation progress (re-start, rollback, pause and resume the simulation
execution).
To achieve the objective of a scenario, each system module has to run under certain constraints.
Different scenarios may request different constraints. They are adapted when scenarios are switched.
Those constraints often involve the issues such as module synchronisation, intermediate state storage
and data distribution. In AG-IVE we use the Scenario Description file to specify the capability of
agents and their desired behaviour in each specific scenario. At run time, each MA reads information
from the description file and adjusts the behaviour of ComAs in its module to fit the requirements of a
scenario. The adjustment of these constraints can be influenced by modifying the settings in the
description file. AG-IVE uses the RTI of HLA as its run time infrastructure. The Federation File [7]
needed by the RTI is also generated from the scenario description file.
Depending on the application, switches between scenarios are often triggered by different
mechanisms such as predefined interaction routes or by the user. In user centred systems, the second
one is more popular. In AG-IVE, the interaction MA monitors the user’s behaviour during interaction
and tries to identify the switching of scenarios. After a scenario has switched, the interaction MA
broadcasts the new scenario to all the other MAs to inform them to adapt the behaviour of their
ComAs.
In the next section, we will use simulation state updates and data distribution as an example to
explain how agents work.
2.4. Optimisation of state updates
The simulator is required to export its states selectively and to distribute them efficiently to the
visualisation and interaction modules. The visualisation module also needs to update in a rational
manner, so that the user can obtain clear insights into the evolution of the simulation and its problem
space. We distinguish a global state, a local state and a state for exploration of the simulation. The local
state represents the state of computing and communication of each simulation process. The global state
is the collection of these local states. The content which will be transferred for visualisation and
interaction normally is a subset of the global state, that can be mapped onto subsets of the local states
in each simulation process. Normally, the state is represented by a vector of parameters.
The update of simulation states has to address issues such as speed difference between simulators
and visualisation, the user’s perceptual delay, and the switch between different scenarios [10]. In
different interaction contexts and running conditions, the way to export and distribute simulation states
will not be the same. In AG-IVE, agents are used to optimise the state updates in each module.
Each MA monitors the running status of its host module, obtaining the internal information of each
individual process by communicating with the ComA. The MAs share this information with each other

and estimate the communication delay over the network by using the information from the other
agents. Finally, the simulation MA can decide the best update rate for the simulation to export states.
Apart from making decisions with respect to resource utilisation, optimising the update of the
simulation state also involves issues like efficiently distributing data objects, and storing intermediate
simulation states during interaction. In the rest of this section, we will briefly introduce the
considerations on these issues in AG-IVE.
For complex parallel simulators, the vectors of the simulation states are often very large, in the order
of tens of megabytes. Efficiently distributing large size data objects is an important problem in
distributed interactive simulation systems. In AG-IVE, the services from the lower level run time
infrastructure (RTI of the HLA) are employed for the basic communication support. Currently, the
Declaration Management (DM), Object Management (OM) and Data Distribution Management (DDM)
of the RTI are applied as basic mechanisms for data object updates and distribution. Based on these
RTI services, AG-IVE provides a number of optional techniques to decrease the size of data such as:
compression, data sub-sampling and segmentation. These techniques are implemented as filters of data
objects, they can be used to process data objects before they are sent or after they are received. To
allow ComA to manipulate the content of the data objects, AG-IVE explicitly defines the data items
such as dimensions, processing methods and mapping algorithms in the simulation state data class. For
large-scale data sets, these techniques can significantly shorten the data transmission delay, and
improve the update rate. Because most of these techniques are information lossy, they can be activated
and de-activated by the user or MAs at runtime.
2.5. Implementation and current status
Currently, AG-IVE has only been tested with parallel simulators that run synchronously and in time
driven mode. The interface of RTI is based on the specification of Version 1.3. The visualisation
programs are executed on either VEs or normal desktops.
AG-IVE provides basic templates for integrating ComA and a host program. The ComA can be
added as a separate thread or in the same thread as the original process. We have used this method in a
fluid flow simulator and a visualisation program, and the basic integration only took a few hours. To
make the construction of the scenario description file easier, a tool which can assist a user to specify
agent actions and the constraints between them is under development.
In the next section, we describe a test case which is currently under construction to show some
experimental results of AG-IVE performance.

3. Test case: Intelligent Virtual Environment (IVE)

3.1. Introduction to the test case
Currently the IVE is being used in a medical application [10]. In surgery, operations such as
vascular reconstruction can often be performed in different ways. The best treatment is not always
obvious, or may be hard to discern because of complicated or multi-level diseases of the patient.
Verifying an operation plan is a difficult task, even for expert surgeons. Computer simulation may help

Fluid flow
simulation
program
Simulating blood fluid
flow

Super Computer
Figure 3: basic architecture of the test case.

Visualising body
information of the
patient together
with the simulation
results in a VE.

a surgeon to validate his treatment, but it is almost impossible to let a computer simulate all situations,
because of the huge number of possible solutions. What this application tries to do is to put a human
expert into the simulation cycle, and let him apply his expertise to confine the problem space. In this
system, a simulation program simulates the patient’s blood flow on a parallel computer system. A
visualisation module presents the simulated results together with the body'
s geometrical information
obtained from a medical scanner (such as CT or MRI). The visualisation and interaction modules run in
an immersive virtual environment (CAVE) [16] where a user can study the results of the given
treatment, and modify it if necessary. These systems are connected through a high performance
network (Figure 3).
The fluid flow simulator [17] uses MPI [9] as its internal communication interface, and runs on a PC
cluster [11]. The interactive simulation program, VRE (Virtual Radiology Explorer) [13] runs in the
CAVE environment, and uses shared memory to exchange information between visualisation and
interaction processes. RTI Next Generation 1.3 Version 4 is used as the global run time infrastructure.

3.2. Package Size and the state transfer delay
In data distribution, the size of packages significantly influences the delay in their transmission. We
use the term transfer delay of the state objects to represent the time from when one module starts
sending objects until the other one finishes receiving them. We have measured the transfer delay of
ComAs between two workstations which are not in the same cluster. Both workstations use a Pentium
III processor and Linux Redhat 7.2 system; they are connected via a 100Mbits/s network. Figure 4
shows the average of 15 different measurements. The latency of the ComA is about 0.02s, its
throughput is 47Mbits/s. The throughput is half of the bandwidth, but it is very close to 50Mbits/s; the
performance we measured with a TCP socket program which makes use of the CAVERN library [19].
Figure 4 shows a comparison between these two measurements. Internally RTI also uses sockets as its
communication mechanism and we can see that the additional services provided by RTI have not put a
severely penalty on communication, except for an additional latency for small messages.
From Figure 4 we also can see that the transfer delay increases rapidly when the package size
exceeds 1Mbytes. In order to reduce the size of packages, a number of techniques have been applied in
AG-IVE, such as using general data compressing method like LZW [18] and sub-sampling simulation
states. During experiments, we have seen there is not a single method that is effective for all types of
simulator. For instance, for the fluid flow simulation, general compressing methods have not exhibited
good performance. Normally, only less than 20% reduction of the whole simulation results can be
achieved, and it needs more than 15 seconds to compress. Sub-sampling data content in simulation
states will cause information loss, and requires certain code adaptation in the visualisation program. To
select a proper option for distributing data objects, MAs can monitor all the packages transferred
between modules. MAs perform certain experiments at run time, and record the performance of each
ComA
CAVERN

Time (seconds)

Transfer delay and package size
1000
100
10
1
0.1
0.01
0.001
0.0001
0.1

10

1000

100000

Package size (KB) (1K=024bytes)

Figure 4: Transfer delay and the package size. A comparison
between ComA and CAVERN.
optional technique. Based on the running situation, MAs dynamically select the best option for ComA
to transfer data. The user can also interactively enable or disable these functions.

3.3. ComAs and their penalty on system performance
As a part of the ISS process, a ComA will certainly require computing power from its host process.
To evaluate the performance of the ComA and its influence on the original ISS processes, we have
built four test configurations. The first and the second integrate ComA as separate threads but run in
user level scheduling vs. kernel level scheduling. The third one integrates ComA in the same thread of
the simulator. The fourth one uses the CAVERN library to implement the communication between
simulator and visualisation. In the first two cases, ComA and the simulation kernel run in parallel. In
the last two cases, the computing of simulation kernel will be blocked during data export and
distribution. All of them use the same simulator. Every time step, the simulation kernel exports the
whole simulation state once, which is about 18Mbytes. All these test beds are executed in a single
processor, two and four processors respectively. Each case has been measured 10 times, the average of
each time step has been compared with the original simulator. We use the ratio between the additional
computing time required by these test beds in each time step and the time cost in the original simulator
to analyse the penalty on system performance. Figure 5 depicts the comparison of these test beds.
Using RTI, the local call back functions in each ComA only can be activated when they are ticked.
When running in multithread style, in order to react on RTI events in real time, the tick function has
also been called regularly even when a ComA has no task to process. That makes the system suffer
higher performance penalty than the single thread integration (see Figure 5). From the comparison with
the CAVERN test case, we can say that the performance penalty of ComA is not prohibitive. As future
work, we will look for more efficient scheduling strategies and improve the performance of ComAs
when they are integrated as separate multithreads.
CAVERN

ComA

ComA is not a separate thread
The fourth test bed
(using
CAVERN)

ComA in process level threads
30%

3
2.5
Time
(seconds)

Percentage of overhead

ComA in system level threads

20%

10%

2
1.5
1
0.5
0

0%

1 Node

2 Nodes

4 Nodes

Figure 5: Performance penalty of each test
bed.

1 Node

2 Nodes

4 Nodes

Figure 6: Simulation sub-states collection
time in visualisation module.

When more nodes are employed in computing, the local simulation state in each process becomes
smaller, which accelerates computation. From the measurement, we found the difference between these
four test beds becomes small when using more nodes. But on the other hand, the ComA in the
visualisation module has to spend more time to collect and combine all sub-states. Figure 6 shows the
comparison of simulation states collection time between using ComA and using CAVERN. When
using ComAs, the RTI handles data distribution using broadcast; but when using CAVERN, data
collection is done by querying data from the data channels which have been created when the system
started. Because of this, we can see, from the Figure 6, that when more ComAs are sending packages,
the time cost for ComA to collect all data objects may become very large. As future work, ComA will
also apply certain strategies to decrease the data collection time.

4. Discussion and conclusions
In this paper, we have presented our work on applying intelligent agents as a way to integrate
interactive simulation systems. First, we introduced the framework of AG-IVE, and then discussed how
these agents federalise available simulators and interactive simulation programs, and interconnect them
into one system. After that, we zoomed into the issues of scenario control and state updates in the
interactive simulation system to discuss how agents provide a reusable and exportable solution for
system integration.
The AG-IVE project is still in progress. Until now, we can not say if using Agents is the best way to
develop interactive simulation systems. But from the experiments that we have done, we can at least
draw the following conclusions:

First, we can reuse available simulator and visualisation programs and interconnect them into one
system. This is a practical way to develop interactive simulation system. Agents allow us to place
essential control functionality outside the IVE modules, and thus to decrease their complexity. This
makes the system more modular and increases the reusability of the modules.
Second, using a Scenario Description file to explicitly represent shared object interface and
interaction contexts, can make module integration more flexible and improve reusability.
Third, using a run-time environment like the RTI can simplify the integration of distributed
modules. The communication interface of HLA federates provides a simple and standard way to
exchange information. This makes the development process of each module more independent.
Four, from the performance measurements that we have done, we can say that using Agents will not
lead to large performance penalties.
5: Future work
We will first finalise the basic services of AG-IVE, such as using interaction MA to handle scenario
switches and providing interaction support. A user-friendly tool for specifying interaction scenarios
will also be developed. After that we will also try to apply AG-IVE to the simulators like discrete event
driven systems.
As a research topic in both academic research and industrial applications, Intelligent Agents have
been used in many areas. For us, developing one or two agents is not the final goal. The goal of our
research is to find out how to build complex distributed interactive simulation systems and if Intelligent
Agents really are the best solution.

6. References
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.

11.
12.

13.

Steve Franks, Fabian Gomes, Brian Unger and John Cleary, State saving for interactive optimistic
simulation; Proceedings of the 1997 workshop on Parallel and distributed simulation, (72-79),
1997.
Salisbury, M. R. Command and Control Simulation Interface Language (CCSIL): status update. In
Proceedings of the twelfth workshop on standards for the interoperability of defence simulations,
(639-649), 1995.
Ross P. Morley, Pieter S. van der Meulen, and Peter Baltus. Getting a grasp on interactive
simulation. In Raimund K. Ege, editor, Proceedings of the SCS Multiconference on ObjectOriented Simulation, Anaheim, CA, (151-157) 1991.
S. Ferenci, K. Perumalla and R. Fujimoto, “An Approach to Federating Parallel Simulators,” in the
Workshop on Parallel and Distributed Simulation, 2000.
Steinman, J.S., SPEEDES: A Multiple-Synchronization Environment for Parallel Discrete Event
Simulation. International Journal on Computer Simulation, (251-286) 1992.
IEEE Std 1278.1-1995, IEEE Standard for Distributed Interactive Simulation -- Application
Protocols. New York, NY: Institute of Electrical and Electronics Engineers, Inc., 1995.
Defence Modelling and Simulation Office (DMSO). High Level Architecture (HLA) homepage.
http://hla.dmso.mil/, 2001.
Perumalla, K.S. and Fujimoto, R.M., "Interactive Parallel Simulations with the Jane Framework."
Special Issue of Future Generation Computer Systems, Elsevier Science, 2000.
Message Passing Interface Forum. MPI-2: A Message-Passing Interface standard. The
international Journal of Supercomputer Applications and High Performance Computing, 12 (1-2),
1998.
R.G. Belleman and P.M.A. Sloot: The Design of Dynamic Exploration Environments for
Computational Steering Simulations, in M. Bubak; J. Mošcinski and M. Noga, editors,
Proceedings of the SGI Users' Conference 2000, pp. 57-74. Academic Computer Centre
CYFRONET AGH, Krakow, Poland, ISBN 83-902363-9-7, 2000.
The Beowulf cluster at SARA http://www.sara.nl/beowulf/, 2001.
R.G. Belleman and P.M.A. Sloot: Simulated vascular reconstruction in a virtual operating theatre,
in H.U. Lemke; M.W. Vannier; K. Inamura; A.G. Farman and K.Doi, editors, Computer Assisted
Radiology and Surgery (Excerpta Medica, International Congress Series 1230), Elsevier Science
B.V., Berlin, Germany, (938-944) 2001.
R.G. Belleman, Z. Zhao, G.D. van Albada and P.M.A. Sloot: Design considerations for the
construction of immersive dynamic exploration environments. Proceedings of the sixth annual
conference of the advanced School for Computing and Imaging, Lommel, Belgium, (195-201),
2000.

14. Z. Zhao, R.G. Belleman, G.D. van Albada and P.M.A. Sloot: System integration for interactive
simulation systems using intelligent agents. Proceedings of the sixth annual conference of the
Advanced School for Computing and Imaging, Holland, ISBN 90-803086-6-8. (399-406) 2001.
15. R.G. Belleman; J.A. Kaandorp; D. Dijkman and P.M.A. Sloot: GEOPROVE: Geometric Probes
for Virtual Environments, in P.M.A. Sloot; M. Bubak; A.G. Hoekstra and L.O. Hertzberger,
editors, High-Performance Computing and Networking (HPCN Europe ’99), Amsterdam, The
Netherlands, in series Lecture Notes in Computer Science. Springer-Verlag, Berlin, ISBN 3-54065821-1, (817-827) April 1999.
16. C. Cruz-Neira, D.J. Sandin and T.A. DeFanti: Surround-Screen Projection-Based Virtual Reality:
The Design and Implementation of the CAVE. SIGGRAPH ’93 Computer Graphics Conference,
(135-142), 1993.
17. B.D. Kandhai: Large Scale Lattice-Boltzmann Simulations (Computational Methods and
Applications), PhD Thesis, Universiteit van Amsterdam, 1999.
18. Ziv J., Lempel A., A Universal Algorithm for Sequential Data Compression, IEEE Transactions on
Information Theory", Vol. 23, No. 3, (337-343).
19. CAVERNsoft, http://www.openchannelsoftware.org/projects/CAVERNsoft_G2/, 2001.

