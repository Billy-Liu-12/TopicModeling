On Models for Time-Sensitive Interactive Computing
Merik Meriste1 and Leo Motus2
1

University of Tartu, Estonia
merik.meriste@ut.ee
2
Tallinn Technical University, Estonia,
leo.motus@dcc.ttu.ee

Abstract. The application domain of agent-based paradigm is extending that
inevitably causes the emergence of “latent” requirements to agents and,
especially to multi-agent systems. In many cases empirical demonstration of
expected behaviour may not suffice, formal modelling of behaviour is desired.
This assumes the use of interaction-based models of computing. New
requirements posed by emerging software-intensive applications assume some
revision in our theoretical understandings. Preliminary ideas regarding the
development of time-sensitive interaction-based models of computation are
explained.

1 Introduction
The necessity for interaction-based models of computations has emerged from three
independent domains. Computer science and software engineering have reached the
interaction-based models when developing methods for formal program verification
(Milner (1999), studying theoretical foundations for object-oriented programs, and for
programming in the large (Wegner (1997)). Interaction-based models of computations
have attracted attention in distributed artificial intelligence due to the evolution of
agent and multi-agent paradigm (see for instance Ferber (1999) and Wooldridge
(2000b)). Many applications of real-time software are known for high dependency
requirements. This has lead to studies that, departing from specific properties of realtime software have lead to interaction-based model of computation (see, for instance
Quirk (1977), Motus (1995)). Those models are not quite comparable, because of
different departure points, theoretical elaboration and pragmatic purpose of
modelling.
Interaction-based models of computing cannot be reduced to algorithmic models
(Wegner (1997), Wegner and Goldin (1999)). In addition to formal arguments, there
are several practical examples showing interactive services cannot inherently by
realized by non-interactive (Turing machine) systems. As Wegner observes, the larger
issue has to do with the essence of embedded and reactive systems that continously
provide services over time.
Need for time-sensitivity in models of computations is essentially introduced by
specific problems in real-time software. Also many applications of distributed

artificial intelligence (and agents) naturally lead to time constraint, time-sensitive
software and hence time-sensitivity of models of computations becomes desirable.
Conventional computer science and software engineering have (unfortunately)
successfully eliminated time as a serious factor from theories and tools related to
program development. Most of the conventional theoretical thinking in computer
science has been heavily based on an assumption of completely known causal
reasons. Natural consequence of this assumption is that time becomes important only
at the software physical design and/or implementation stages (e.g. scheduling) – and
even then in a trivial form of a single time parameter for a computer system.
Incomplete knowledge of causal reasons is usual in real-time software and in many
agent-based applications. Software operation in such systems is, to a large extent,
based on estimates, beliefs and/or approximations of causal relations – just to enable
the use of conventional computing methods. Quite often causal relations are
approximated by time constraints – just for the sake of economic considerations, or to
enable the use of existing (too complex) knowledge.
Another unavoidable feature of real-time and agent-based software is its
continuously on-going nature of execution and persistency of interactions’ influence
upon the future behaviour. Conventional computer science describes the on-going
nature as a non-terminating program. Although non-termination is quite precise
description it causes confusion when one tries to verify the program by traditional
methods. Termination is often a precondition to verifiability of a program.
Serious confusion also rises when one tries to explain the essence of a nonterminating program to the end-user (who is not a specialist in computer science).
More acceptable for non-computer specialists is the description of software as a set of
interacting, repeatedly activated, terminating programs (Quirk (1997)). This concept
easily enables to introduce sufficiently sophisticated time and leads naturally to
formal verification of timing properties in the early life-cycle stages – e.g.
specification and logical design (Motus 1995).
Conceptually closer to the traditional non-terminating programs is timed process
algebra studied by Caspi and Halbwachs (1986)) as an approach to timing analysis of
software.
Non-time-sensitive interaction-based computing is an input/output stream processing
view on computations as opposed to algorithmic computation where an input string is
processed, output string is generated and then the algorithm terminates. The
input/output stream processing emphasises the persistent nature of interactive
computing. Interactive computation has the following features that are not present in
algorithmic computations: (1) stream input-output, (2) interleaving of inputs and
outputs during computation, (3) history-dependent behaviour of the computing agents.
The interaction-based models of computation describe and support verification of
systems where a primitive component for building a system is not a terminating
algorithm, but rather a non-terminating computing process, or alternatively a set of
interacting, repeatedly activated, terminating algorithms. In many cases the study of
infinite, and dynamic input/output sequences can reveal properties of the respective
components – i.e. properties related to, or characterising non-terminating behaviour of
a computing process, as well as that of a set of countable many times repeatedly
activated, terminating, interacting computing processes.

This paper focuses on one aspect – comparative study of interaction-based models of
computations – of a work in progress that has a long-term goal of building a test-bed
for assessment and analysis of development and evolution of multi-agent systems.
There are two sub-goals of this study – better to understand the essence of interactionbased computing, and to develop a time-sensitive computational model that explicitly
conforms to basic theoretical premises and consequences of the other existing
interaction-based models.

2 Interactive Models of Computations
There is no single widely accepted model of interactive computations in use, rather
several concepts and models have been suggested (Milner (1993), Wegner (1995)). In
the pragmatic world of real-time systems new capabilities provided by time-sensitive
interaction-based model of computations (e.g. Quirk (1977), Motus and Rodd (1994),
Motus (1995)) have not been admitted to the mainstream yet. Respective studies with
interactive models of computations in the agents’ community and object-oriented
community have progressed faster; see for instance, Milner (1999), Wegner (1997),
Wegner and Goldin (1999), Wooldridge (2000a), Jennings (2001). Respecting the
computer science traditions, however, time has been abstracted away from the models
of computations resulting from the latter community.
The authors of this paper believe that increasing number of agent-based and/or
object-oriented systems will, in the near future, be applied to time-critical and/or time
sensitive applications. This belief is supported by OMG initiative on RT UML and
many new applications of agent-based paradigm in various areas (e.g. distributed
computer control systems, mobile robotics, banking). Therefore it makes sense to try
and merge the favourable theoretical ideas from all the three source domains – realtime systems, multi-agent systems, and computer science – and develop a timesensitive interaction-based model of computations for multi-agent applications.
2.1 Criteria for Qualifying as a Time-Sensitive Interaction Model
The first problem is to fix (preliminary) criteria to limit the number of candidate
models that are to be considered for further study. It seems reasonable to depart from
the characteristic properties for multi-stream interaction machines stated by Wegner
and Goldin (1999):
Capability to handle true concurrency (also called forced concurrency in Motus
and Rodd (1994)
Higher than first order-logic is required to describe their functioning.
The qualified models are then studied further to understand their specific and
common properties. To facilitate this study they are classified subjectively based on
the (at least seemingly) prevailing methodology, e.g.:

Process algebras represented, for instance, by CCS and PI-calculus (Milner (1980)
and Milner (1999)); history transformer suggested by Caspi and Halbwachs (1986)
is also a good candidate
State machines, represented, for instance, by interaction machines by Wegner
(1997), attributed automata (Meriste and Penjam (1995), statecharts (Harel (1987))
Logical frameworks, represented by temporal logic (Manna and Pnueli (1991),
logic of rational agents Wooldridge (2000a), conditionally also Motus and Rodd
(1994)
Other (pragmatic) models represented, for instance, by Wooldridge (2000b), Harel
(2001), Motus and Rodd (1994), and others.
Thorough research of the qualified models will hopefully give some hints about the
suitable candidate for further elaboration to a time-sensitive model of interactive
computations.
The resulting time-sensitive model is to be used as one of the models for describing
agents and systems of agents in a concurrently developed test-bed. The respective
methods developed for formal analysis of the model’s properties form the basis of the
assessment tool to be used in the test-bed.

3 Concepts of Time Model Required in Time-Sensitive
Multi-Agent Systems
Different authors have used the notion of time, time properties, timing analysis, and
time models in a variety of contexts and meanings. Some comments follow in order to
reduce potential confusion and to explain the essence of the time as used in models of
computations.
It has been demonstrated in Motus and Rodd (1994) that a conventionally used
single time variable per system can be sufficient only for assessing performance type
timing properties. Instead, a rather sophisticated time model should be used in order
to handle all the major types of timing properties – performance type of properties,
time-correctness of events and data, and time correctness of interactions between
parts of an agent, agents, coalitions of agents, etc.
A system is partitioned into components whose dynamics is of interest for reaching
the goal of a subsystem, or the system. A component may be an agent, a coalition of
agents, a physical process in the environment, or a part of an agent. Each component
may have its one time system – thermodynamic time for accounting the overall
progress of the component and its environment, reversible time for potential handling
of faults inside a component, exceptions, etc, and a set of relative times for analysing
interactions with the other components.
At first such time model looks extremely sophisticated. In reality it boils down to
intuitively well understandable for a non-computer specialist, and easily specifiable
model that enables automatic verification of many timing properties (see, Motus and
Rodd (1994), Motus (1995)). Automatic verification means that the user is saved from
theoretical nuances required for statement theorems about common timing problems –

e.g. non-violation of imposed timing constraints during an interaction. Application
specific timing properties need specific handling as usual.

4 Conclusions
First, the authors suggest that sufficiently good theoretical and practical basis exists to
start building a test-bed that would assist in merging recent development trends in
computer science, software engineering, artificial intelligence, and other domains.
Such a test-bed would serve as a discovery system for agent-related knowledge, in
addition to being just a development environment for agents and agent systems. For
instance, the test-bed would serve as an experimental basis for elaboration of theories
and methods for quantitative assessment of selected properties, such as efficacy of the
negotiation process, evolution of communication characteristics of the structure that is
emerging during the negotiation and co-operation process of agents. Second, this
paper suggests that time sensitivity of various parts of agents, and agents’
interactions, is to be explicitly described and studied. A special tool in a test-bed is to
take care of verifying the consistency of time behaviours in multi-agent systems.
The above-described premises regarding the time model and models of
computation are sufficient to start the development process. It is too early to discuss
(publicly) the potential outcome of the effort. Whatever the outcome is, it will be used
in the test-bed project and as a starting point for developing assessment tool for
evaluation of timing properties in multi-agent systems.
Comments from and collaboration with interested research groups will be
appreciated.

Acknowledgment
The partial financial support provided by ETF grant 4860 and grants nr 0140237s98,
0250556s98 from Estonian Ministry of Education is acknowledged.

References
Caspi P. and Halbwachs N. (1986) “A Functional Model for Describing and Reasoning about
Time Behaviour of Computing Systems”, Acta Informatica, Vol.22, 595-627
Ferber J. (1999) “Multi-Agent Systems”, Addison-Wesley, 509 pp
Harel D. (1987) “State-charts: a visual formalism for complex systems”, Science of Computer
Programming, Vol.8 (1987), p.231
Harel D. (2001) “From play-in scenarios to code: an achievable dream “ Computer, Vol.34,
No.1, 53-60
Jennings N.R. (2001) “An agent-based approach for building complex software systems”
Communications of the ACM, Vol.44, No.4, pp.35-41
Meriste M. and Penjam J. (1995) “Attributed Models of Computing”, Proc. of the Estonian
Academy of Sciences. Engineering, Vol.1, No.2, pp.139-157

Milner R.A. (1980) “A Calculus of Communicating Systems” LNCS vol.92, Springer Verlag,
171p
Milner R.A. (1993) “Elements of Interaction”. Turing Award Lecture, Communications of the
ACM, Vol.36, No.1, pp.78-89
Milner R. (1999) “Communicating and Mobile Systems: The PI-calculus”, Cambridge
University Press, 161p
Motus L (1995) “Timing problems and their handling at system integration”, in S.G.Tsafestas
and H.B.Verbruggen (eds) Artificial Intelligence in Industrial Decision Making, Control and
Automation, Kluwer Publ., pp.67-88
Motus L. and Rodd M.G. (1994) “Timing analysis of real-time software”, Pergamon/Elsevier
Quirk W. and Gilbert (1977) “The formal specification of the requirements of complex realtime systems”, AERE, Harwell, rep. No. 8602
Wegner P. (1995) “Interaction as a Basis for Empirical Computer Science”, ACM Computing
Surveys, Vol.27, No.5, pp.80-91
Wegner P. (1997) “Why Interaction is More Powerful than Algorithms”, Comm. of ACM
Vol.40, No.5, pp.80-91
Wegner P. and Goldin D. (1999) “Co-inductive Models of Finite Computing Agents”,
Electronic Notes in Theoretical Computer Science,Vol.19, www.elsevier.nl/locate/entcs
Wooldridge M. (2000a) “Reasoning about rational agents” MIT Press, 227 p
Wooldridge M. (2000b) “On the Sources of Complexity in Agent Design”, Applied Artificial
Intelligence, Vol.14, No.7, 623-644

Reference to Work in Progress
Motus L. and Meriste M (2001) “Towards self-organising Time-sensitive control system’s
software”, Proc. IFAC Conference on New Technologies in Computer Control, November
2001, Hong Kong, to be published by Elsevier Science
Motus L. and Naks T. (2001) “Time models as used in Q-model and suggested for RT UML”.
5th World Multi-Conference on Systemics, Cybernetics and Informatics, Vol. XI, 467-472

