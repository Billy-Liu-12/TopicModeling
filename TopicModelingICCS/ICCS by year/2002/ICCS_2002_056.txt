A Collection of Java Class Libraries for
Stochastic Modeling and Simulation
Augustin Prodan1 and Radu Prodan2
1

Iuliu Haţieganu University, Mathematics and Informatics Department,
Str. Pasteur 6, 3400 Cluj-Napoca, Romania
aprodan@umfcluj.ro
http://www.umfcluj.ro
2
Institute for Software Science, University of Vienna,
Liechtensteinstrasse 22, A-1990 Vienna
radu@par.univie.ac.at
http://www.par.univie.ac.at/∼radu

Abstract. The paper focuses on a set of Java class libraries for stochastic modeling and simulation, created and implemented by the Department of Mathematics and Informatics from Iuliu Haţieganu University
Cluj-Napoca. Previous research has shown that stochastic models are
advantageous tools for representation of the real world activities. Due to
actual spread of fast and inexpensive computational power everywhere in
the world, the best approach is to model the real phenomenon as faithfully as possible, and then rely on a simulation study to analyze it. We
approached the new bootstrapping methods, which are very useful in analyzing a simulation. Our aim is to implement bootstrapping strategies
in software tools which will be used by both the teaching staff and the
students in didactic and research activities, with the purpose to optimize
the use of substances and reactants.

1

Introduction

This work demonstrates the advantages of stochastic models for representation
of real world activities and focuses on a Java package, which includes a collection of classes for stochastic simulation and modeling. Previous research has
shown that stochastic models are advantageous tools for representation of the
real world. In order to employ mathematics and statistics to analyze some phenomena and processes of the real world, we first construct a stochastic model.
Once the theoretical model has been constructed, in theory we are able to determine analytically the answers to a lot of questions related to these phenomena
and processes. However, in practice is very difficult to get analytically the answers for many of our questions. This is the reason why we must implement
the probabilistic mechanism using a programming language, then to perform a
simulation study on a computer. Due to actual spread of fast and inexpensive
computational power everywhere in the world, the best approach is to model
the real phenomenon as faithfully as possible, and then rely on a simulation

2

Augustin Prodan and Radu Prodan

study to analyze it. The Department of Mathematics and Informatics from Iuliu
Haţieganu University Cluj-Napoca has created and implemented a collection of
Java class libraries for stochastic simulation and modeling. The paper reports
on the incremental development of an object-oriented Java framework, based on
theoretical fundamentals in simulation and stochastic modeling defined by Ross
[1] and continued by Gorunescu and Prodan [9], that supports the creation of the
main elements for building and implementing stochastic models. The stochastic
models constructed accurately represent real world phenomena and processes particularly in medicine and pharmacy. The programming language we decide
to use is Java, because we intend to build some software tools distributed on
Internet. The basic design philosophy of our object-oriented approach to simulation of the random variables by means of classical distributions is presented in
Prodan et al. [4], [5] and [8]. Some medical applications are described in [4], [7]
and [8].

2

Stochastic Models and Simulation

There are three levels of simulation to be considered (see Fig. 1). The first level
consists of simulating random numbers, as they are the basis of any stochastic
simulation study. The so-called pseudo-random numbers generated via Java’s
built in linear congruential generator are used to simulate random numbers.
If Java’s simple linear congruential generator is non-random in certain situations by generating undesirable regularities, it is necessary to build a class
as an improvement over the one supplied by Java [2], [3]. Based on the ele-

Fig. 1. The simulation levels

ments of the first level, the second level of simulation applied for distributional
models is built. We implemented a hierarchy of Java classes, which model the
classical distributions (see Fig. 2). Each distribution is determined by a distribution function and a set of parameters. Using these elements, we defined for
each distribution a simulation algorithm and implemented it in a polymorphic
method named simValue(). Each distribution class encapsulates a particular
simValue() method. We included all distribution classes in a package named
Distrib. To generate a single value from a particular distribution, it is necessary

Java Libraries for Stochastic Simulation

3

Fig. 2. The hierarchy of Java classes for distributional models

to import the class from Distrib package, then to instantiate an object of corresponding class, and finally to call the polymorphic method simValue() based on
this object. We created Java classes for Poisson processes, renewal processes and
for some particular cases of Markov processes. Also, we implemented methods
for the Monte Carlo approach to solve various problems, such as approximating simple or multiple integrals, finding a solution for an equation system and
finding the reverse, the eigenvectors and the eigenvalues for a matrix. The first
two levels of simulation constitute the infrastructure for the third level, which is
devoted to applications. As an application, we modeled the patient flow through
chronic diseases departments [8]. Admissions are modeled as a Poisson process
with parameter λ (the arrival rate) estimated by using the observed inter-arrival
times. The in-patient care time is modeled as a mixed-exponential phase-type
distribution [4], [5], [7], [8].

3

Simulation and Visualization

In a simulation study is necessary to generate more values, a sequence of values,
then to estimate some parameters and to visualize the results. For this purpose
we implemented two general methods: doSimulation(distribution) which is
called to generate the values and to compute successively actual estimators, and
doVisualization() which is called to show the results of the simulation.
3.1

Simulation

We generate a sequence of values from a distribution, by using the general
method doSimulation(distribution). This method has as argument an instance of a distribution class and calls the simValue() method when generates
each specific value for that distribution. The method generates continually additional data values, stopping when the efficiency of the simulation is good enough.
Generally, we use the variance of the estimators obtained during the simulation
study to decide when to stop the generation of additional values, that is when
the efficiency of the simulation study is acceptable. The smaller this variance is,
the smaller is the amount of simulation needed to obtain a fixed precision. For
example, if our objective is to estimate the mean value µ = E(Xi), i = 1, 2, ...,
we should continue to generate new data until we have generated n data values

4

Augustin Prodan and Radu Prodan

for which the estimate of the standard error, SE = √sn , is less than an acceptable value given by the user and named Allowed SE (see Fig. 3), s being the
sample standard deviation. Sample means and sample variances are recursively
computed. The final values of these parameters, the confidence interval and other
statistics are showed as the result of the simulation study. Fig. 3 compares the
results of two simulations in case of a binomial distribution with parameters
n=10 and p=0.3. The number of generated values is determined by the value

Fig. 3. A comparison between two simulations from binomial distribution Bin(10, 0.3),
the first simulation with Allowed SE = 0.1 and the second with Allowed SE = 0.05

Allowed SE introduced by the user, as the simulation stops when the condition
√s ≤ Allowed SE is true. The left side graph is obtained as a result of a simun
lation with Allowed SE = 0.1, being generated 227 values, while the right side
graph is the result of a simulation with Allowed SE = 0.05, being generated 879
values.
3.2

Visualization

The method doVisualization() is used to show the results of a simulation.
When we simulate a discrete random variable X, the generation of each value
x ∈ X is counted in the element d[x] of a vector d[ ]. The visualization method
expresses graphically in a column format the actual values contained in the
elements of the vector d[ ] (see Fig. 3). We approached in a similar way the
visualization in case of a continuous distribution. When simulate from a continuous random variable X, a generated value x ∈ X is approximated with a given
precision expressed by the number of decimal digits to be considered. The user
has the possibility to choose a precision of one, two, or even more decimal digits.
If a coarse approximation is accepted, no decimals are considered and the real
value x is approximated by int(x), that is by integer part of the x. In this case
the continuous random variable X is rudely approximated by a discrete one,
and the results of a simulation can be graphically expressed in a segmented line

Java Libraries for Stochastic Simulation

5

format, each segment joining the top sides of two neighbouring columns. If a
precision of one decimal digit is selected, the results of the same simulation can
be more precisely visualized by a more refined segmented line. With a precision
of two decimal digits, a more refined visualization is obtained. The higher this
precision is, the higher is the resolution realized in visualization. Fig. 4 compares two visualizations for the same set of generated values from the standard
normal distribution N(0, 1), the first visualization being with a precision of one
decimal digit (Fig. 4, graph a), and the second with a precision of two decimal
digits (Fig. 4, graph b). As can be seen in this figure, when the precision grows

Fig. 4. A visualization with the precision of one decimal digit, versus a visualization
with the precision of two decimal digits, for the same set of generated values from the
standard normal distribution N(0, 1)

with one decimal digit, the resolution grows ten times. With a precision of one
decimal digit, ten numbers are considered between two successive integers, while
if the precision is of two decimal digits, one hundred numbers are considered
between two successive integers. When necessary, intermediate resolutions can
be considered. Fig. 5 shows a similar comparison for the exponential distribution
with parameter λ = 0.3.

4

Bootstrapping Methods

We implemented the so-called bootstrapping methods, which are quite useful in
analyzing a simulation. One may bootstrap a set of observed data (randomly generate new plausible data based on the observed ones) to create a pseudo-data set,
and then fit the model to that pseudo-data to obtain a set of parameter pseudoestimates that provide another estimate of that individual parameter values. The
latter is expected to provide predictions that are as plausible as those obtained

6

Augustin Prodan and Radu Prodan

Fig. 5. A visualization with the precision of one decimal digit, versus a visualization
with the precision of two decimal digits, for the same set of generated values from the
exponential distribution E(0.3)

from the original experimental fit. Such predictions can, upon repetition of the
process, reflect the sampling variability that is believed to be inherent in the
original data. The Department of Mathematics and Informatics will implement
bootstrapping strategies and will build software tools to be used in didactic and
research activities by teaching staff and students, with the purpose to optimize
the use of substances and reactants.
We approached the bootstrap technique by considering the set of n observed data
as belonging to an empirical discrete random variable Xe which is equally likely
to take any of the n values. If the values xi , i = 1, 2, ..., n, are not all distinct, the
general discrete random variable Xe will equal the value xi with a probability
equal with nni , where ni is the number of values equal with xi (i = 1, 2, ...). Starting with a set of observed data xi , i = 1, 2, ..., n, the bootstrapping tools put in
ascending order these data, then count the number m of distinct values and the
number of occurrences for each distinct value. If the value xi has ni occurrences,
the random variable Xe takes on the value xi with probability pi = nni , for
i = 1, 2, ..., m. To bootstrap the set of observed data, it is necessary to randomly
generate a sequence of values from the general discrete distribution containing
the values xi with the probabilities pi , for i = 1, 2, ..., m. As an example, suppose we have a set of n = 100 observed data and are identified the following
m = 10 distinct values X = (x1 , x2 , ..., x10 ) with the corresponding occurrences
o = (4, 15, 1, 17, 12, 9, 10, 19, 10, 3). It results from this that the general discrete
random variable will equal the distinct values with the following corresponding probabilities p = (0.04, 0.15, 0.01, 0.17, 0.12, 0.09, 0.1, 0.19, 0.01, 0.03). Fig. 6
shows the results of a simulation from this general discrete distribution, considering the set of distinct values xi = i − 1, for i = 1, 2, ..., 10. This consideration
does not diminish the generality of the algorithm. In this particular case the

Java Libraries for Stochastic Simulation

7

algorithm generates the values xi = i − 1 with the corresponding probabilities
pi , but it can as well generate any values xi with the same probabilities pi , for
i = 1, 2, ..., 10.

Fig. 6. The results of the bootstrapping method, approached by the simulation from
a general discrete distribution

5

Future Work

We intend to use Java technologies in our activities of building and implementing
models for stochastic processes (Poisson, Markov, semi-Markov, renewal) with
applications in medicine and pharmacy. A continuous-time Markov model for
the flow of patients around compartments of geriatric medicine will be proposed.
This model will enable us to study the whole system of geriatric care and will be
used to look either at the time patients spend in hospital and also the subsequent
time patients spend in the community. Also, we will implement bootstrapping
strategies in software tools, which will be used by both the teaching staff and the
students in didactic and research activities, with the purpose to optimize the use
of substances and reactants. And finally, based on our collection of Java class
libraries, we intend to build and to implement computer based learning tools to
be used by students for learning statistics and stochastic processes.

6

Conclusions

The Department of Mathematics and Informatics from Iuliu Haţieganu University Cluj-Napoca has created and implemented a collection of Java class libraries
for stochastic modeling and simulation. We implemented libraries for distributional models, stochastic processes and Monte Carlo methods. Due to actual
spread of fast and inexpensive computational power everywhere in the world,
the best approach is to model the real phenomenon as faithfully as possible, and

8

Augustin Prodan and Radu Prodan

then rely on a simulation study to analyze it. We implemented general methods
for simulation and for visualization. The user has the possibility to interact with
specific Java applets, to select specific values for some parameters, obtaining this
way specific simulations and visualizations. As an application, we modeled the
patient flow through chronic diseases departments. Admissions are modeled as
a Poisson process with parameter λ (the arrival rate) estimated by using the
observed inter-arrival times. The in-patient care time is modeled as a mixedexponential phase-type distribution [8]. We implemented also the bootstrapping
methods, which are quite useful in analyzing a simulation.

References
1. Ross, S. M.: A Course in Simulation, Macmillan Publishing Company, New York
(1990).
2. Eckel, B.: Thinking in Java, MindView Inc., Prentice Hall PTR (1998).
3. Prodan, A., Prodan, M.: Java Environment for Internet, Ed. ProMedia-plus, ClujNapoca, ISBN 973-9275-07-9 (1997).
4. Prodan, A., Gorunescu, F., Prodan, R.: Simulating and Modeling in Java, Proceedings of the Workshop on Parallel/High-Performance Object-Oriented Scientific Computing, June 1999, Lisbon, Technical Report FZJ-ZAM-IB-9906,
Forschungszentrum Julich GmbH (1999) 55-64.
5. Prodan, A., Gorunescu, F., Prodan, R., Câmpean, R.: A Java Framework for
Stochastic Modeling, Proceedings of the 16th IMACS World Congress on Scientific Computation, Applied Mathematics and Simulation, August 2000, Lausanne,
CD Ed. Rutgers University, New Brunswick - NJ, USA, ISBN 3-9522075-1-9 (2000).
6. Câmpean, R., Prodan, A.: A Java Environment for Development of Stochastic Models, Clujul Medical, vol. LXXIII, No.2, (2000), 312-317.
7. Gorunescu, F., Prodan, A.: Optimizing the Chronic Healthcare Department Occupancy, Clujul Medical, vol. LXXIII, No.4, (2000), 503-507.
8. Prodan, A., Prodan, Rodica: Stochastic Simulation and Modeling, ETK-NTTS Conference (Exchange of Technology and Know-how, New Techniques and Technologies
for Statistics), Crete, June 2001, Proceedings (2001) 461-466.
9. Gorunescu, F., Prodan, A.: Stochastic Modeling and Simulation, Ed. Microinformatica, Cluj-Napoca, ISBN 973-650-023-3, (2001).

