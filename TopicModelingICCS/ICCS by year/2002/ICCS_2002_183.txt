Device Space Design for Efficient Scale-Space Edge
Detection
B.W. Scotney, S.A. Coleman, M.G. Herron
School of Information and Software Engineering, University of Ulster,
Coleraine, Northern Ireland
{bw.scotney, sa.coleman. mg.herron}@ulst.ac.uk

Abstract.

We present a new approach to the computation of scalable image
derivative operators, based on the finite element method, that addresses the issues of
method, efficiency and scale-adaptability. The design procedure is applied to the
problem of approximating scalable differential operators within the framework of
Schwartz distributions. Within this framework, the finite element approach allows us to
define a device space in which scalable image derivative operators are implemented
using a combination of piecewise-polynomial and Gaussian basis functions.
Here we illustrate the approach in relation to the problem of scale-space edge
detection, in which significant scale-space edge points are identified by maxima of
existing edge-strength measures that are based on combinations of scale-normalised
derivatives. We partition the image in order to locally identify approximate ranges of
scales within which significant edge points may exist, thereby avoiding unnecessary
computation of edge-strength measures across the entire range of scales.

1. Introduction
It is well known that the strength of a feature in an image may depend on the scale at
which the appropriate detection operator is applied. It is also the case that many
features in images exist significantly (in terms of operator response) over only a
limited range of scales, and, moreover, that the most salient scale may vary spatially
over the feature. Hence, when designing feature detection operators, it is necessary to
consider the requirements for both the systematic development and efficient
application of such operators adaptively over appropriately limited scale- and imagedomains.
For scalable image operators, the finite element method offers a framework for
systematic development and efficient implementation. In particular, scalable image
derivative operators may be approximated within the framework of Schwartz
distributions [4]. The general technique may be applied to a range of operators and
using a variety of discrete approximations. The issue of scale (see, for example,
[4,5,6]) is naturally and explicitly embraced in this approach by the introduction into
the finite element method of Gaussian test functions that are controlled by a scale
parameter [1]. We discuss the efficient implementation of the approach in terms of
some well-established mechanisms for implementing the finite element method. It is
also shown that the general finite element method naturally overcomes the ‘border’
problem [7]: image geometries such as corner and boundary operators may be
produced with no additional effort. This is particularly important when scale-space

techniques are used for problems that may require the use of very large operators.

2. Schwartz Distributions
An image here is represented by a rectangular n×n array of samples of a continuous
function u(x,y) of image intensity on a domain Ω . For the most refined level of finite
element discretisation of the image domain Ω , nodes are placed at the pixel centres,
and lines joining these form the edges of elements (see Fig. 1).
1

2

n

i- n + 1

i - n -1

k
i + n -1

h

i+ n + 1

Fig. 1. Regular rectangular array of pixels and nodes for finite element discretisation

In Fig. 1 a global numbering scheme for the nodes is depicted. The dotted lines show
the natural pixel edges.
In previous work [8,9] we have formulated image operators that correspond to
weak forms of operators in the finite element method [2]. Operators used for
smoothing may be based simply on a weak form of the image function, for which it is
assumed that the image function u ≡ u ( x, y ) belongs to the Hilbert space H 0 (Ω) ;
that is, the integral ∫ u 2 dΩ is finite. Edge detection and enhancement operators are
Ω

often based on first or second derivative approximations, for which it is necessary that
the image function u ≡ u ( x, y ) is constrained to belong to the Hilbert space H 1 (Ω) ;
i.e. the integral

∫ (∇u

2

)

+ u 2 dΩ is finite, where ∇u is the vector (∂u ∂x , ∂u ∂y ) T .

Ω

We now embrace a more general, and less restrictive, approach offered by
Schwartz distribution theory (see [4]). For the image function u ≡ u ( x, y ) we may
obtain a distribution Fu [v] ≡ ∫ uvdΩ for some test function v. Derivatives of order α
Ω

are then defined by (∇α Fu )[v] ≡ Fu [(−1) ∇α v] . Hence a first or second order
directional derivative may be defined by (respectively)
α

E (u ) = − ∫ ub ⋅ ∇vd Ω and Z (u ) = u ∫ ∇ ⋅ (B∇v)dΩ
Ω

(1)

Ω

Here B =b b and b = (cosθ , sin θ ) is the unit direction vector. Zero-crossing
methods are often based on the isotropic form of the second order derivative, namely
the Laplacian. In this formulation, this is equivalent to the general form in which the
T

matrix B is the identity matrix I. Integrated directional derivative operators have been
used in [10], though not based on distributions as above.

3. Finite Element Formulation
In the finite element method a finite-dimensional space S h is used for function
approximation. We use this idea to implement an "image space" S h . A finite element
mesh is constructed using rectangular elements, as in Fig. 1, in which a global
numbering scheme 1,…,N is employed. A basis for Sh may be formed by associating
with each node i a basis function φ i ( x, y ) which has the properties
1 if i = j
φ i ( x j , y j ) = 
0 if i ≠ j

(2)

where ( x j , y j ) are the co-ordinates of the nodal point j. φ i ( x, y ) is thus a "tentshaped" function with support restricted to a neighbourhood, centred on node i,
consisting of only those elements that have node i as a vertex. We then approximately
N

represent the image u by a function U (x, y ) = ∑ U j φ j ( x, y ) in which the parameters
j =1

{U 1 ,..., U N } are mapped from the sampled image intensity values. The approximate
image representation is therefore a simple function (typically a low order polynomial)
on each element and has the sampled intensity value Uj at node j.
Our previous work has been based on a formulation analogous to the Galerkin
finite element method [9]. However, since we now focus on the development of
operators that can explicitly embrace the concept of scale, an alternative approach is
preferred in which a finite-dimensional test space Tσh other than S h is employed; the
test space, or "device space", Tσh explicitly embodies a scale parameter σ. This
generalisation allows sets of test functions ψ iσ ( x, y ) , i=1, …, N, to be used when
defining scale-space derivatives; for first and second order operators respectively, this
provides the functionals
Eiσ (U ) = − ∫ U bi ⋅ ∇ψ iσ dΩ i and Z iσ (U ) = ∫ U ∇ ⋅ (B i ∇ψ iσ )d Ω
Ω

(3)

Ω

The scale parameter σ may now be used to explicitly control the scale of the
operator, as illustrated in the example implementation in Section 4.

4. Example Implementation
We illustrate the approach applied to first derivative approximation using a regular
bilinear rectangular discretisation formed from a set of rectangular elements such as

that illustrated in Fig. 1. We construct a set of basis functions φ i ( x, y ) , i=1,...,N, so
that the N-dimensional image subspace Sh comprises of functions that are piecewise
bilinear.
For the test space Tσh a set of Gaussian basis functions is used that explicitly
embodies the scale parameter σ. Sets of Gaussian test functions ψ iσ ( x, y ) , i=1, …, N
of the form
 ( x − xi ) 2 + ( y − y i ) 2

2σ 2

−

1

e
ψ iσ ( x, y ) =
2
2πσ






(4)

are constructed, each restricted to have support over a neighbourhood Ω σi centred on
the node i at ( x i , y i ) . The size of the neighbourhood Ω σi to which the support of

ψ iσ ( x, y ) is restricted is also explicitly related to the scale parameter σ [3]. The
Gaussian is restricted so that the neighbourhood Ω σi is a 2Wσ×2Wσ block of
rectangular elements (where Wσ is an integer) with the nodal position ( x i , y i ) at the
centre of the block. Then the relationship 1.96σ = Wσ ensures that along both the
vertical and horizontal co-ordinate directions through the nodal point ( x i , y i ) , 95% of
the cross-section of the Gaussian is contained within Ω σi .

On a neighbourhood Ω σi we consider a locally constant unit vector b i = (bi1 , bi 2 ) .
T

N

Substituting the image representation U (x, y ) = ∑ U j φ j ( x, y ) into the derivative
j =1

E (U ) = − ∫ U bi ⋅ ∇ψ dΩi gives
σ
i

σ
i

Ω

N

N

j =1

j =1

E iσ (U ) = −b1i ∑ K ijσ U j − b2i ∑ Lσij U j ,

(5)

where K ijσ and Lσij are respectively entries in N×N global matrices K σ and Lσ given
by
∂φ j σ
∂φ j σ
(6)
ψ i dxdy and Lσij = ∫
ψ i dxdy , i,j=1,..,N.
K ijσ = ∫
σ ∂x
σ ∂y
Ω
Ω
i

i

These integrals need be computed only over the neighbourhood Ω σi , rather than the
entire image domain Ω, since ψ iσ has support restricted to Ω σi .

4.1. Element-by-Element Computation
Each neighbourhood Ω σi is composed of a set Siσ of elements. In our example
implementation Siσ is the 2Wσ×2Wσ block of elements having nodal point ( x i , y i ) at

its centre. We may thus write K ijσ as a summation K ijσ =
element integral kijm,σ =

∫

∂φ j

em

∂x

∑k

m ,σ
ij

{ m|em∈Siσ }

where kijm ,σ is the

ψ iσ dxdy .

In principle, each Eiσ (U ) may be computed by calculating kijm,σ and l ijm ,σ for each
element em in Siσ and then assembling these values to yield K ijσ and Lσij respectively.
In practice, much less computation than this is required. To construct Eiσ (U ) only
one quarter of the operator is computed, and via reflective symmetry in the horizontal
and vertical axes the complete operator is generated. Consider the situation in Fig. 2
where the Gaussian basis function is restricted to the 4 × 4 block of elements (i.e.
W σ = 2 ). We need to compute kijm,σ and l ijm ,σ only for m = a1 , b1 , c1 , d1 , representing
just one quarter of the whole support Ω σi of the operator E iσ .
i-2n+2

i-2n-2
c2

d2

d1

c1

b2

a2 i a1

b1

b3

a3

a4

b4

c3

d3

d4

c4

i-2

i+2

i+2n-2

i+2n+2

Fig. 2. Elements within neighbourhood Ω σi for Wσ = 2

For each of the elements em , m = a1, b1, c1 and d1, a pair of 2 × 2 element
operators, k im ,σ and lim,σ , is generated. For example, the x-directional element
operator over element a1 is given by:
k a ,σ kia, i −,σn +1 
∂φ j σ
a ,σ
(7)
kia ,σ =  ia, i −,σn
=∫
ψ i dxdy .
a ,σ  where kij
ki , i +1 
∂
x
 ki , i
a
If the element sizes are normalised, i.e. h = k = 1 , this can readily be calculated
and found to be:
1

1

1

1

1

1

1

α 4
a1 = 
α 1

α 3   − 0.025178 0.025178 
.
=
α 2  − 0.021469 0.021469 

(8)

In practice, integration over an element is done numerically using a low-order
Gauss quadrature rule, typically requiring just four evaluations of the integrand (e.g.
[2]). Similarly, we can compute:
β4
b1 = 
 β1

β 3   − 0.061061 0.061061 
=
,
β 2   − 0.052064 0.052064 

γ 4
c1 = 
γ 1

γ3
=
γ 2

 − 0.011802
 − 0.007433


0 .011802 
,
0 .007433 

δ
and d1 =  4
δ 1

δ 3   − 0.028621 0.028621  .
=
δ 2   − 0.018025 0.018025 

We can generate operators of any size by this means, only ever requiring four pre∂φ
computed values of the basis function derivative DX [⋅][ g ] = .
evaluated at
∂x ( xg , yg )
four Gauss quadrature points in a representative element. The four values of
DX [⋅][ g ] for each node in any element can be obtained by permutation of these four
pre-computed values. Further, since the corresponding four values of DY [⋅][ g ]
required for the computation of lim,σ are permutations of the four values of DX [⋅][ g ] ,
it is not necessary to explicitly compute lim,σ ; the operator Lσij is merely a rotation of
the operator K ijσ . The general procedure for computing the contributions required for
K ijσ is shown below.
for m from 0 to Wσ×Wσ -1
/*for each element em in one quarter of the support
of the operator Eiσ compute each of the four entries

in

the

2×2

operator kim,σ */
begin
for j from 0 to 3
begin
for g from 0 to 3
begin
/*compute position of Gauss point g in element em*/
compute (xgm, y gm )
/*implement Gauss quadrature rule*/
evaluate ψ iσ[m][g]
compute DX[j][g] × ψ iσ[m][g]
compute ki[j][m] = ki[j][m] + DX[j][g] × ψ iσ[m][g]
end g
compute ki[j][m] = ki[j][m] × h × k / 4
end j
end m

The assembly process to construct Eiσ (U ) from the element matrices is described
in Section 4.2.

4.2. Finite Element Assembly
The next stage of the finite element method consists of assembling the element
matrices k im ,σ and lim,σ , for each element m=1,…,M, into the global matrices K σ and
Lσ respectively. This is accomplished by distributing each entry in the element
matrices into the corresponding row and column of the global matrices using the local
to global node numbering mapping routinely stored in the finite element method.

col
col
col
col
col

i-2n-2
i-2n-1
i-2n
i-2n+1
i-2n+2
-γ 3
-γ4 -δ3
δ4-δ4
γ4+δ3
γ3
i-n-2
i-n-1
i-n
i-n+1
i-n+2
-β3-γ2 -α3-β4-γ1-δ2 α4-α4+δ1-δ1 α3+β4+γ1+δ2 β3+γ2
i-2
i-1
i
i+1
i+2
-β2-β2 -α2-α2-β1-β1 α1-α1-α1+α1 α2+α2+β1+β1 β2+β2
i+n-2
i+n-1
i+n
i+n+1
i+n+2
-β3-γ2 -α3-β4-γ1-δ2 α4-α4-δ1+δ1 α3+β4+γ1+δ2 β3+γ2
i+2n-2
i+2n-1
i+2n
i+2n+1 i+2n+2
-γ 3
-γ4-δ3
-δ4+δ4
γ4+δ3
γ3
Fig. 3. Element assembly to form row i of matrix K σ

Such a procedure is illustrated in Fig. 3 for the distribution of the values of the 16
element matrices k im ,σ corresponding to the 16 elements depicted in Fig. 2. We see
that 25 values of the global matrix K σ are augmented in the assembly procedure for
these 16 elements. Since the neighbourhood Ω σi is centred on node i, these 25 values
are all in row i of K σ and in the columns of K σ indicated in Fig. 2. Hence assembled
in row i of the global matrix K σ we have the 5×5 spatial operator centred on node i:
-γ3
-β3-γ2
-2β2
-β3-γ2
-γ3

-γ4 -δ3
-α3-β4-γ1-δ2
-2α2-2β1
-α3-β4-γ1-δ2
-γ4-δ3

0
0
0
0
0

γ4+δ3
α3+β4+γ1+δ2
2α2+2β1
α3+β4+γ1+δ2
γ4+δ3

γ3
β3+γ2
2β2
β3+γ2
γ3

Assembly of all of the element matrices into K σ thus yields a sparsely populated
and highly structured N×N block matrix composed of n×n sub-matrices. Each submatrix is itself sparse, having non-zero values in only 5 positions in each row: the
diagonal, and the first two upper and lower diagonals.

Fig. 4. The general banded block structure of K σ

Fig. 4 shows the general structure of K σ ; zero-values have been suppressed.
Each row of matrix K σ and of matrix Lσ represents an operator on the vector
U={Uj}, j=1, ..., N, by which the scale-space derivative approximations E iσ , i=1, ..., N
are computed. As an integral part of this process, appropriate operators are generated
both for image corners and image borders as well as the internal regions of the image.
Hence the "border problem", particularly significant for large-scale operators, is

naturally accommodated.
We thus obtain the vector E σ = {E iσ } , for i=1, ..., N, of weak first derivative
approximations by using the operator ( B1σ K σ + B2σ Lσ ) on the vector U of image
intensity values, namely,

E σ = ( B1σ K σ + B 2σ Lσ )U ,

(9)

where B1σ and B2σ are diagonal matrices of respectively the locally constant
direction components bi1 and bi 2 on each neighbourhood Ω σi as described in Section 3.

5. Scale-Space Edge Detection
As a fundamental application of the technique for adaptive scale-space derivative
approximation developed above, we choose the problem of scale-space edge
detection. For this we follow closely the work on edge detection with automatic scale
selection developed in [6]. In [6], significant scale-space edge points are identified by
maxima of specified edge-strength measures that are located by zero-crossings of two
functions Z 1 ( L ) and Z 2 ( L) of the scale-space image L(x, y ,t) , where t is the scale
parameter. The procedure used in [6] is a pre-processing phase to tracking the zerocrossing surfaces and identifying, by use of a line integral measure, the most
significant scale-space edges in the image. In [6] it is illustrated that this approach can
be very successful in both identifying the most significant edges and demonstrating
how the most salient scale varies along an edge.
We now illustrate an alternative approach to the pre-processing phase in [6] based
on application of the adaptive scale-space derivative approximation technique
developed in Sections 2 to 4. Advantages of our approach are that we exploit the fact
that the image features exist significantly over a limited range of scales to avoid the
computation of global scale-space images over the extensive range of scales used in
[6]; moreover, our adaptive normalised scale-space derivatives naturally and
systematically combine the Gaussian convolution smoothing and discrete derivative
approximation steps that are carried out separately in [6], thus avoiding the use of ad
hoc finite difference approximations.
As an initial step we partition the image into an array of regular rectangular subregions, R j , j = 1,..., J , within each of which we compute the image variance σ j .
The results of numerical experimentation have established that σ j may be used as an
indicator of the appropriate device space to be used for the computation of the scalespace derivatives within R j required for Z 1 ( L ) and Z 2 ( L) . Using the experimentally
derived relationship σ 0j = 1 / log10 σ j , we thus compute the operator scale σ 0j at
which the device space response is approximately maximal. Hence a “key-scale” t 0j
is established for each sub-region R j . The operator size corresponding to t 0j is

automatically derived using the procedure described in Section 4, and Fig. 5 shows an
image together with these “key scales” computed for 64 image sub-regions. Here, “1”
indicates 3×3, “2” indicates 5×5, etc., and it can be clearly seen that the smaller scales
occur in regions representing the detail image objects, whilst larger scales are
employed in the image background.

(a) 256×256 Original image

7

8

8

7

7

8

8

8

7

8

8

7

7

8

8

8

7

8

2

1

1

1

8

8

7

8

1

1

2

1

8

8

7

8

1

1

1

1

8

8

7

8

3

1

1

1

8

8

7

2

2

2

2

1

1

1

1

1

1

1

1

1

1

1

(b) Image sub-regions with
corresponding operator scales

Fig. 5. Illustration of adaptive filters

(a) 256×256 Original image

(c) all scale-space edge points
from the adaptive method

2

2

2

3

2

1

1

2

1

1

3

2

2

1

1

1

1

1

1

2

2

1

1

2

1

1

1

1

1

1

1

2

1

1

1

1

1

1

1

2

2

1

1

1

1

1

2

2

2

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

(b) Image sub-regions with
corresponding operator scales

(d) All scale-space edges from
the method in [6]

Fig. 6.Scale-Space representations

Fig. 6 (a) and (b) show another image and corresponding grid of sub-regional keyscales. Again the use of smaller scales for the image detail and larger scales for the
background is clearly evident. Once a regional key-scale t 0j has been computed for
each R j , the measures Z 1 ( L ) and Z 2 ( L) are computed over R j for a small number of
scales above and below

t 0j ; in this case we have chosen five scales:

t −j 2 , t −j 1 , t 0j , t 1j , t 2j centred on t 0j . The inter-spatial distance has been chosen to be the

same as that used in [6]; note, however, that we are not restricted to aligning the
scales between sub-regions, as each key-scale t 0j is selected independently. In Fig.
6(c) and (d) respectively are shown all scale-space edge points identified by the
method proposed in this paper and by the method described in [6]. Whilst both
approaches provide suitable output for scale-space edge tracking by the method used
in [6], we note that the scale-space edge map projection generated by our approach is
very much sparser, representing a significant reduction in computational effort.

6. Conclusion
A key concept in the finite element method is the notion of a standard element. This
concept enables convenient and systematic computation to be performed even in
complex situations. Because of the sparse banded characteristic of the global matrices
produced, efficiency extends to storage as well as computation. We have shown that
the concept of scale for operators can be explicitly and efficiently implemented within
a finite element framework. In particular, using Schwartz distributions, we have
presented a new approach to scalable image derivative operators that addresses the
issues of method, efficiency and scale-adaptability. We have illustrated that the
approach is well-suited to the fundamental problem of scale-space edge detection: our
adaptive normalised scale-space derivatives naturally and systematically combine
Gaussian convolution smoothing and discrete derivative approximation.

References
[1]

Babaud,J., Witkin, A.P., Baudin, M., and Duda, R.O., “Uniqueness of the Gaussian
Kernel for Scale-Space Filtering” IEEE Trans. on PAMI, Vol. PAMI-8(1), 1986, 26-33.
[2] Becker, E.B., Carey, G.F., and Oden, J.T., Finite Elements: An Introduction, Prentice
Hall, London, 1981.
[3] Davies,E.R., “Design of Optimal Gaussian Operators in Small Neighbourhoods” Image
and Vision Computing, Vol. 5(3), 1987, 199-205.
[4] Florack, L., Image Structure, Computational Imaging and Vision, Vol. 10, Kluwer
Academic Publishers, 1997.
[5] Lindeberg, T., Scale-Space Theory in Computer Vision, Kluwer Academic Publishers,
1994.
[6] Lindeberg, T., “Edge Detection and Ridge Detection with Automatic Scale Selection”,
International Journal of Computer Vision, Vol. 30(2), 117-154, 1998.
[7] Prewitt, J.M.S., "Object Enhancement and Extraction", Picture Processing &
Psychopictorics, 1970, 75-149.
[8] Scotney, B.W., Coleman, S.A., Herron, M.G., “A Systematic Design Procedure for
Scalable Near-Circular Gaussian Operators.”, Proceedings of the IEEE Int. Conf. On
Image Processing(ICIP 2001), Greece, 844-847, 2001.
[9] Scotney, B.W., Herron, M.G., “Systematic and Efficient Construction of Neighbourhood
Operators on Irregular and Adaptive Grids.” Third Irish Machine Vision and Image
Processing Conference (IMVIP'99), Dublin, 204-218, 1999.
[10] Zuniga, O.A., and Haralick, R.M., "Integrated Directional Derivative Gradient Operator",
IEEE Trans. on Systems, Man, and Cybernetics, Vol. SMC-17(3), 1987, 508-517.

