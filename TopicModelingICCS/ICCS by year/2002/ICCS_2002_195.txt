The differentiated call processing based on the simple
priority scheduling algorithm in SIP6
Chinchol Kim, Sunyoung Han, ByoungUk Choi
Konkuk University
Mojin-dong Kwangin-gu Seoul, Korea
Phone : (02) 450-3537
{bredkim, syhan, buchoi}@kkucc.konkuk.ac.kr

Abstract. In this paper, We designed and implemented the SIP6(session initiation protocol) on the IPv6 network as a Call processing protocol for session
control. Because our implementation is based on the IPv6, it can use the
QoS(Quality of Service) and the security features of IPv6.[3][4] SIP6 server is
better in simplicity, extensibility, flexibility, scalability, and mobility than
H.323 in controlling the calls and support the differentiated call processing
based on the simple priority scheduling algorithm.[2][8][9] For simulating the
SIP6, We also implemented the test program. We analyzed the performance of
differentiated call processing in the SIP6 server

1. Introduction
Because of the high speed network and the various internet services, the internet users
are increasing dramatically. But, the current internet is not sufficient to meet the demand of the users. Especially, there are problems such as duplicate structure of network(IP network and PSTN), the lack of address space, and QoS(Quality of Service).
Currently, these problems are considered to be difficult to solve and the several techniques such as VoIP, IPv6, and QoS are considered as solutions to these problems.
In VoIP techniques, H.323 and SIP protocol are used for call control.[9][10] H.323
have been gained the reputation in because of its stability and performance through
the long time research. However, when you consider it, as a global internet service, it
has various problems extensibility, mobility, scalability, simplicity, and flexibility of
protocol. But SIP can overcome these shortcomings.[9][10] Because it only has the
function of establishing and controlling the sessions, it has a simple structure as well
as the good extensibility as the multicast based protocol.[1][2][9][10] In addition, It
can support the user mobility and interaction with other protocols. As a result, these
features have made the SIP as a standard in many fields such as 3GPP, VoIP, Messaging systems, and ALL-IP(next generation mobile system). However, SIP don’t
basically support the differentiated service for the call processing. But it is essential to
support differentiated call processing service since it is a default feature of VoIP
service.[10] It is likely that current network system is unified into a single IP-based

system. As a result, it leads to the lack of address spaces in IPv4. So it’s imperative
that IPv6 technologies are developed rapidly and the existing applications must be
transmitted to support the IPv6. IPv6 can retain the innumerable address spaces with
128 bit addressing system. And it has an extensive header that supports the QoS and
internet security.[4] Through these features of IPv6, We can expect to gain the performance improvement when we use it in the applications related to the voice and
video services.
In this paper, we have designed and implemented SIP6 based on IPv6 for VoIPv6
system. The SIP suggested in this paper is named to SIP6 as supported IPv6. That is,
we implemented SIP6 which shows the better performance in the call processing.
Moreover, we improved the performance of the SIP6 server by adding the differentiated call processing service based on the simple priority scheduling algorithm proposed in this paper. Finally, we also implemented the test program for simulating the
SIP6 and analyzed the performance of the differentiated call processing in the SIP6.
This paper shows SIP6 architecture in section 2, the result of implementation in
section 3 and the performance analysis in section 4. Finally, we present the conclusion and future work in section 5.

2. System Architecture

2.1 System components
The SIP6 system shown in this paper consists of SIP6 Server and User Agent. For
establishing a session of VoIPv6, Two members exchange information with each
other using SIP6 Server.
Fig. 1 shows this system component and the following explains each component.

Fig. 1. SIP6 System Components
l

l

SIP6 Daemon Contains Proxy Server, Redirect Server, Location Server, and
Register Server. It is driven by referencing the configure files.
Web Registrar Server is responsible for registering the information of the user

l
l

location, It is associated with user database through Web.
User database contains the user information of addition, deletion and update
SIP6 UA is a SIP6 User Agent. This is divided into two parts; SIP6 User Agent
Client for requesting a session and SIP6 User Agent Server for accepting a session.

2.2 SIP6 System Module design

2.2.1 SIP6 server module design
On UDP protocol, SIP6 Server supports a differentiated call processing service for a
session establishment through IPv6 socket interface. Also, it provides the services for
user registration, management, user location, call-forward, and the call-redirect.
Fig. 2 is the SIP6 server structure suggested in the paper.
D atabase

Location SServer
erver mmodule
odu le
Location

e directSServer
odulele
RRedirect
erver MModu

R e gistrar

Proxy SServer
erver MModu
odule
Proxy
le

Method
ethod processing
processing m
module
odule
M
Priority M
Massage
assage Parsing
Parsing m
module
odule
Priority

equest receive
receive m
module
odule
RRequest
Linux socket
socket API
API
Linux
Linux System
System (( IPv6
IPv6 ))
Linux

Fig. 2. SIP6 Server Module Structure
l

Request Receive Module
This is an UDP receiver that receives SIP6 message producing the UDP Socket
for IPv6. Those received messages are divided into Request and Response message type and are sent to the Priority Message Parsing Module.

l

Priority Message Parsing Module
It can sort SIP6 messages by the service levels suggested in this paper and apply
differentiated service. Sorted messages are sent to the Method Processing Module
for the proper work of the method specified in the message.

l

Method Processing Module
In the case of INVITE message, It calls Proxy/Redirect Server Module depending
on running mode of the server. In the case of REGISTER message, It calls Regis-

ter server to register user information. Also, it performs the proper works for
OPTION, BYE and CANCEL messages.
l

Proxy Server Module
This manages the forwarding function for received calls and the other response
messages. Depending on the received methods, it invites a session by forwarding
INVITE method after getting the information of user location from Location
Server Module in the case of INVITE. The transmitted messages set the service
timeout which Proxy Server process the message for a given time. When the
timeout is occurred, it will cancel the Request and send 487 response message. If
it is ACK, ‘ACK’ method is sent to the destination client.

l

Redirect Server module
It processes the redirect function for the received Call. When it receives INVITE
method, it initializes the connection header for the response message. After setting
the service timeout, it gets the information of the user location. If it receives the
address as a domain, this module will send URI(user id, host, port) to the client
who has requested INVITE after mapping the IP through a resolving function.

l

Location Server module
This module is responsible for enrolling the user information and tracking the location. The following elements are required for managing and enrolling the user
information.
-

Registrar : registration gateway receiving the user enrollment.
User input table : managing the user ID authorized for accessing the
system.
User identity table : used to give multiple IDs per user. So there is an
unique user ID used in session establishment in this table.
User contact table : managing the user’s current location.

User information from the Registrar can be transformed to the unique user ID
which is in the User Identity table and registered into the User Contact table in the
database. The registered data are used to serve the request of user location from the
proxy and redirect server. The following is an example of user entry information.
{ user ID, SIP6 UA Port, Current URL, ServerAction, Service Level }
2.2.2 Differentiated call processing
In this paper, we applied the differentiated call processing when establishing the SIP6
session at the application level. It is defined as a three level service and the differentiated call processing service is provided by the service level.
Fig. 3 shows the Priority Call Processing Processor supporting a differentiated call
processing.

H ig h q u a lit y b u f f e r

M e d iu m q u a lit y b u f f e r

S IP p a c k e t

P r io r it y
S c h e d u lin g
p ro ce ss o r

C la s s if y
p roc es s o r

M essage
P a r s in g
P roc es so r

N o rm a l q u a lit y b u f f e r

…
e x e c u t io n b u f f e r
M u ltip le b u f f e r

Fig. 3. Priority Call Processing Processor
l

Classify processor
Received messages are classified and stored at the high quality buffer, medium
quality buffer and normal quality buffer according to the criteria specified in the
received IPv6 packet included in SIP6 INVITE and REGISTER message.
In this paper, the service level is defined as follows;
-

High quality : the quality having the superior priority, it has fast session establishment using the high quality buffer.
Medium quality : the quality having the middle priority, it uses the
medium quality buffer.
Normal quality : the low level quality. It uses the normal quality
buffer.

l

Priority Scheduling Processor
This processor continually examines the messages stored in the multiple buffer
and applies the differentiated service according to the message service levels. It
can dynamically process the three buffers at a time when a message is arrived.
Priority scheduling processor is based on a priority scheduling algorithm. Simple
priority scheduling algorithm operates as follows. In the first level priority buffer,
processor directly calls the message parsing processor to process the message.
After processing, it looks for the buffer of next high priority. While processing the
message in the lower priority buffer, it can stop and handle the message of the
higher priority. By this mechanism, It can provide a differentiated call processing
service.

l

Message parsing Processor
In order to process the message received by the priority scheduling processor, it
can be divided into several parts.
- Request message processing
To avoid the duplication, the request message can name an unique ID
by hash function, and the message with the Request-uri, to, from, call-

-

id and cseq must be stored in the “Execute buffer”. After validation of
uniqueness of the message, it can be parsed to detect the errors. At last,
the Method processing module calls for the suitable service matching
the methods BYE, INVITE, OPTIONS, and REGISTER.
Response message processing
This performs Response processing for the received request message
and the received response message. In processing the response message, it sets up the response status code for the request message. And
then it generates a socket to send the response message to the corresponding client.

2.3 Call processing procedure and Message

The SIP6 suggested in this paper follows the call processing procedure and message formats specified in IETF RFC 2543.

3. Implementation and result

3.1 SIP6 server implementation
In this paper, SIP6 Server module is implemented by C language on Linux Kernel
2.2.x supporting IPv6. The programs are designed to compose the proxy server, redirect server, location server, and registrar server module. It is executed by the daemon
process named SIP6d.
Fig. 4 shows the operation of SIP6 server by using main functions.

––

Fig. 4. Procedure of SIP6 Server

When we start SIP6 server, it creates a thread that can open an UDP socket and it
receives an INVITE request message. When SIP6 server receives a message, the
message is classified by checking the service level specified in the IPv6 header. SIP6
server also creates another thread to process the classified request message sequentially using the service level as proposed in this paper. Finally, this thread selectively
calls proxy, redirect, registrar server module run by the thread and send to the message.
3.2 Differentiated call processing

We used the flow label field of IPv6 header to specify the service levels in applying
the differentiated call processing scheme. Currently, the Flow Label field is composed
of 24 bit size to support QoS. But it has not been used yet.
In this paper, We define the following code values for service levels.
Table 1. Code value for Service level

Service level
High quality
Medium quality
Normal quality

Code value
1(haxdecimal)
2(haxdecimal)
0(haxdecimal)

In the implementation, the flow label field in IPv6 socket structure is used to specify the code value for the service level.
Struct sockaddr_in6 {
Uint8_t
Sa_faily_t
In_port_t
Uint32_t
Struct
}

sin6_len;
sin6_family;
sin6_port;
sin6_flowinfo;
in6_addr

sin6_addr;

When the session is established, SIP6 UA specifies a service level in in6_flowinfo
field of socket_in6 structure. If SIP6 server receives an INVITE request message, it
checks a service level in sin6_folwinfo field and dynamically process the INVITE
message using the service level specified by the user.
Fig. 5 describe the pseudo-code of MessageClassifyThread() function that classify
a received packet.
Fig. 6 describe a pseudo-code of PrioritySchedulingThread() function for simple
priority scheduling algorithm proposed in this paper.

Upon a packet arrival, classifier works as follows;
…
IF ( client_sock.sin6_flowinfo is 1 )
Save message in High quality buffer
ELSE IF (client_sock.sin6_flowinfo is 2)
Save message in Medium quality buffer
ELSE
Save message in Normal quality buffer
…
Fig. 5. The pseudo-code of MessageClassifyThread() function

Initally:
…
WHILE(1)
{
Message processing in high quality buffer:
Label 1:
WHILE ( High quality buffer have request message )
Massage parsing and processing
Message processing in medium quality buffer:
Label 2:
WHILE (Medium quality buffer have request message)
{
IF (High quality buffer have request message)
Goto Label 1;
Else
Massage parsing and processing
}
Message processing in normal quality buffer:
WHILE (Normal quality buffer have request message)
{
IF (High quality buffer have request message)
Goto Label 1;
IF ELSE (Medium quality buffer have request message)
Goto Label 2;
ELSE
Massage parsing and processing
}
}

Fig. 6. A pseudo-code of PrioritySchedulingThread() function for the simple priority scheduling algorithm

4. Performance analysis
In order to analysis the performance of differentiated call processing in the SIP6
server, we implemented the test program that concurrently sends many INVITE,
REGISTER messages with various service levels to SIP6 server and we measure the
average of message processing time in the SIP6 server.
We used a Linux system for the SIP6 server and a windows system for the test program on the IPv6 local network in Konkuk University.
Fig. 7 presents a test result for the average of INVITE and REGISTER message
processing time on the SIP6 server. It is tested in a way that the test program concurrently sends the INVITE and REGISTER message of the same number increasingly
step by step according to the service level. The (a) in Fig. 7 presents a test result for
the average of REGISTER message processing time in the SIP6 registrar server. The
(b) and (c) in Fig. 7 presents a test result of the average of INVITE message processing time in the SIP6 proxy server and redirect server.

(a) The average of REGISTER message processing time in registrar server

b) The average of INVITE message processing time in redirect server

(c) The average of INVITE message processing time in proxy server
Fig. 7. Result of performance analysis

As increasing INVITE, REGISTER message, the average of message processing
time in the SIP6 server displays a remarkable difference according to the service
levels. Specially, INVITE, REGISTER message specifying the high quality always
gets the fast service for call processing.
The performance analysis result demonstrates that the differentiated call processing
service gives better to more performance for the service requiring fast session establishment when the network traffic and the request for session establishment is heavy.

5. Conclusion and Future work
In this paper, We designed and implemented the SIP6 based on IPv6. The SIP6
server is more powerful in simplicity, extensibility, flexibility, scalability, and mobility than H.323. Because this implementation was done on the IPv6, it can use the QoS
and the security features of IPv6. We applied the differentiated call processing technique using the simple priority scheduling algorithm to improve the performance.
We proved that the performance dramatically improved.
In the future, We are going to add an authentication service by using AH, ESP
header of IPv6.
Acknowledgements: The work in this paper was supported by the National Computerization Agency.

References
1. Handley, H.Schulzrine, E.Schooler, and J.Rosenberg, "SIP: session initiation protocol",
RFC 2543, March 1999
2. A.Johnston, S.Donovan, et all, "SIP Telephony Call Flow Examples", Internet Draft, November 2000
3. R.Gilligan, S.Thomson, J.Bound, W.Stevens, "Basic Socket Interface Extensions for IPv6",
RFC 2553, March 1999
4. R. Hinden, S. Deering, “Internet Proctol version 6(IPv6) specification”, RFC 2460, December 1998

5. K. Nichols, S. Blake, F. Baker, D. Black, “Definition of the Differentiated Services Field
(DS Field) in the IPv4 and IPv6 Headers
6. P. Ferquson and G. Huston, “Quality of Service”, John Wiley & Sons, 1998
7. S. Donovan, J. Rosenberg, “The SIP Session Timer”, Internet Draft, August 24, 2001
8. ITU-T Recommendation H.323
9. I. Dalgic and H. Fang, “Comparison of H.323 and SIP for IP Telephony Signaling, “Photonics East, Proceeding of SPIE’99, Boston, Massachusetts, Sep. 1999
10. Henning Schulzrinne and Jonathan Rosenberg, “Signaling for Internet Telephony”, January
311, 1998

