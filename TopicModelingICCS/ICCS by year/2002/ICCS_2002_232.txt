Simulation of a Compressible Flow by the Finite Element
Method Using a General Parallel Computing Approach
André CHAMBAREL1 , Hervé BOLVIN1
1

Complex Hydrodynamics Laboratory, Faculté des Sciences, 33 rue Louis Pasteur
F-84000 Avignon, France
andre.chambarel@univ-avignon.fr

Abstract. We develop a coherent set of techniques for parallel computing. We
use the Finite Element Method associated with the C++ Objects Oriented
Programming with only one database. A technique of data selection is used for
the determination of the data dedicated to each processor. This method is
performed by a SIMD technology associated with the MPI capabilities. This
parallel computing is applied to very large CPU cost problems particularly the
unsteady problems or steady problems using iterative methods. Different
results in Computational Fluid Dynamics are presented.

1

Introduction

In Computational Fluid Dynamics (CFD) the transient flows generally request a
very large memory and CPU time [1]. Generally we have a high cost calculus because
of the step-by-step process. In this paper we will present a parallel computing method
for CFD problems by a Finite Element approach [2]. We propose a coherent method
for an easy implementation including the following key words:
- Finite Element Method with C++ Objects Oriented Programming code,
- Selection data technique, matrix free technique and iterative method.
We develop an easy method for parallel computing which seems to be a natural
way to perform intensive computation. Our purpose is to carry out parallel algorithms
without modifying the object structure of the solvers and the data structure [3]. To
answer this requirement, we use a selected data method resulting in suitable load
balancing with the choice of lists of elements. This technique is independent of the
geometry, and can be applied in general cases. This new concept is a natural way for
the standardization of parallel codes. In fact, parallelization is here applied to the
resolution of a large sized differential system by a semi-implicit algorithm associated
with a matrix free technique.
Among different hardware concepts the SIMD  Single Instruction Multiple
Data  architecture has proved to be the most promising for parallel computer. This
technology is used for the high performance computing especially when problems
such as solving large set of differential equations are dealt with [4]. A SIMD parallel
computer consists of a set of processors connected with a fast communication
network. Each processor performs the same program with different data. In our work
the different data are obtained with a single file and each processor selects its
concerned data. For the parallel programming we use the MPI  Message Passing
Interface  library.

2 Mathematical model
In CFD all types of cases of transient compressible and oscillating flows can be
found. This last case is obtained by increasing of the velocity or the Reynolds number.
Consequently the nozzle and its jet are studied often separately. The aim of this paper
is to propose a numerical study of the transient flow in a convergent nozzle and its
jet, particularly the unstable solutions.
The Navier-Stokes equations are the mathematical model. The molecular
Reynolds number is approximately 106. The Reynolds number value Re is based on
the diameter of the nozzle outlet and the sound velocity. We choice here a Reynolds
number of 100, coherent with a zero equation turbulent model [5].
With the usual notation, the dimensionless Navier-Stokes equations are as follows:
∂ρ
∂
(ρ.u j ) = 0
+
∂t ∂x j

 ∂u

∂u 

∂u 
1 ∂
(ρ.T ) + ∂  1 . ∂u i + j  − 2 . δ ij .  ∂u k
ρ. i + u j . i  = − .
 ∂t

∂x j 
∂x j  Re  ∂x j ∂x i  3.Re
γ ∂x i
 ∂x k

 ∂T
∂u j
∂T 
∂  γ
∂T 
+ F (u i )
= −(γ − 1).ρ .T .
.
ρ .
+ u j.
+


∂x j ∂x j  Re. Pr ∂x j 
∂x j 
 ∂t

with

 1  ∂u
∂u j
F (u i ) = γ .(γ − 1). . i +
 Re  ∂ x j ∂ x i


2

 ∂u

 − 2 . j

3 .Re  ∂ x j







2










(1)

The domain (Ω) of integration is presented in figure 1. The initial values are the
normal thermodynamical conditions and the gas is motionless [5]. The boundary
conditions are:
- inlet of the nozzle, we simulate the start of a turbo-engine so the time-dependent
pressure is as follow:

0 ≤ t ≤ t 0 : p = p0 + pmax .

t
and t ≥ t 0 : p = p0 + p max
t0

- in the nozzle, a wall condition for the velocity and adiabatic conditions for the
temperature are imposed,
- in free space boundary, an outflow condition is used.
With the finite element formulation the following matricial form is obtained:

∑
ne

i =1

∂


< δU i > . [mi ]. {U i }− {f i }+ [k i ].{U i } = 0
∂t



After the assemblage, we build the following differential system:

(2)

[M ]. d {U }= {F }− [K ].{U }

(3)

dt

We built a grid with 10392 nodes and 20346 elements. The differential system above
has approximately 40000 equations.

Fig. 1. Finite element grid.

3 Structure of Code
Figure 2 shows the general structure of the compact code. It is organized into
three classes corresponding to the functional blocks of the Finite Element Method’s
different stages. With these classes we built three objects that are connected by a
single heritage. So the transmission of the parameters between the objects is defined
by a list technique.
We use efficient C++ Objects Oriented Programming for the Finite Element code
called FAFEMO (Fast Adaptive Finite Element Modular Object) [4]. This technology
allows an implementation of very low sized solvers. In our examples their sizes are
about 31 Kb  900 C++ lines . Each solver is dedicated to a problem and can be
considered as an element of an algebraic structure [3].

Fig. 2. Object structure of a standard solver.

4 Method of Parallel Computing
4.1 Principle of Parallelization
The principal CPU cost corresponds to the elementary matrices computing and
secondarily to the time step updating. In the case of an unsteady problem, the
analytical discretization of the problem with the Finite Element Method is given by
the following scalar product [6]:

∑

XH

NE

 due 
.([me ].
 + [ke ].{ue }− {fe}) = 0
 dt 

with

NE = 1 .. ne

(4)

If p is the number of processors, we select a list of elements Nk by an expert system
called AMS (Automatic Multigrid System) describe above:
p

U Nk = NE

and

Ni I Nj = 0 for i ≠ j

(5)

k =1

Each elementary matrix can be assembled into a global matrix by a classical Finite
Element process [6]. Each processor compute its part of the global matrices:
p

p

k =1

k =1

∑ [Mk ] =[M ] mass matrix , ∑ {Ψk}= {Ψ}residuum

(6)

In this case the Bernstein’s conditions are verified [1]. So we have a correct load
balancing if the list’s size of elements are similar for each processor. The
communications between the processors exist only at the end of the time step. Each

processor builds his part of the differential system and the below algorithm allows the
updating of the solution {U}. A semi-implicit algorithm is presented [4] [7] :
tn = 0
while ( t n ≤ t max )

{ }

[ ] { (

for j = 1 to p ∆U i = ∆t . M i −1 . Ψ U + α.∆U i −1 , t + α.∆t

n j
n
n
j
n
n
n
n

i
i −1
=
∆
−
∆
≤
i
1
,
2
,
...
until
U
U
tolerence

n
n
{U n +1 }= {U n }+ {∆U n }

)}



t n +1 = t n + ∆t n
end

while

4.2 Technique of Parallelization.
Each solver is endowed with a capability called AMS (Automatic Multigrid
System). It is an expert system with several possibilities. The applications of this
capability are very large, multiprocessor computing (in this paper), wave front,
multidomain calculus, multigrid simulation, ...
According to the problem, the AMS expert system can choose different analytical or
geometrical components (Fig. 3).
In the case of parallel computing the AMS expert system chooses here the elements
dedicated to each processor for the sharing of the scalar product (2) .

Fig. 3. Taxinomy of the Finite Element parameters.

In fact we can summarize the principal stages of parallelization:
- A first stage consists to create an expert system for the selection of the data
for each processor.

-

5

In the second stage each processor calculates the concerned elementary
matrix without communication per step.
In the third stage each secondary processor sends its assembled elementary
matrices to the principal processor. So it can update the step.

Application

Thereby, no communications are required between the processors. Each of them
performs a completely independent computation for each iteration. This is particularly
well adapted to the object structure of the solver. The SIMD architecture is used for
the parallel computing management [8]. The AMS capabilities select the data for each
processor. The corresponding software is developed with the MPI C++ library.
Table 1. Parallel computing efficiency.

Equations
40000
40000

CPU time
22 h 28 mn
12 h 20

Nb. of processor
1
2

Speed Up (%)
--91 %

Table 1 presents the parallel efficiency for a CFD problem [9]. We should notice that
the parallel solver is almost the same as the one used in a sequential process. These
examples are performed on a 2 processors-PC. The different examples of the parallel
computing are applied to unsteady CFD problems. Different cases of compressible
flow are presented in figures 4, 5 and 6. Figure 5a presents a comparison between the
experiment and the numerical simulation [10] .

Fig. 4a. Transient compressible flow.

Fig. 4b. Two processors computing.

Fig. 5a. Permanent jet.

Fig. 5b. Two processors computing.

Fig. 6a. Two processors computing of an oscillating jet.

Fig. 6b. Oscillating jet.

If the pressure ratio is greater than a limit value (1.28 here) we obtain an oscillating
jet. Figure 6 shows an asymmetrical position of the jet during the oscillation.

6 Conclusion.
An easy method of parallel computing for engineering problems is proposed. It
consists to use a coherent set of techniques including :
- Finite Element Method,
- C++ Objects Oriented Programming by FAFEMO software,
- Selection data technique by AMS expert system,
- Matrix free algorithms.
In this context the implementation of the concerned low sized solvers is very easy.
The SIMD architecture associated with the MPI-C++ library is used. So we dispose of
an efficient method for the parallelization of differential systems coming from the
Finite Element Method. The performances are interesting. We notice particularly the
low sized memory and the good load balancing. Different examples in Computational
Fluid Dynamics are presented.

References
1. Yeckel, A., Smith, J.W., Derby, J.J.: Parallel finite element calculation of flow in a three
dimensional lid-driven cavity using the CM-5 and T3D. Int. J. Num. Methods in Fluids, Vol. 24
(1997) 1449-1461.
2. Chambarel, A., Bolvin, H.: A general parallel computing approach using the Finite Element
method and the objects oriented programming by selected data technique. Lecture Notes in
Computer Science, 2127, Springer-Verlag, Berlin, Heidelberg, New-York. 6th International
Conference, PACT 2001, Novosibirsk, Russia, September 2001.
3. Chambarel, A., Onuphre, E.: Finite Element software based on Object Programming.
International Conference of the twelfth I.A.S.T.E.D., Annecy France, May 18-20, 1994.
4. Chambarel, A., Ferry, E.: Finite Element formulation for Maxwell’s equations with space
dependent electric properties. Revue européenne des Eléments Finis, Vol. 9, n° 8 (2000) 941967.
5. Gutmark, E., Schadow, K.C., Bicker, C.J.: Near acoustic field and shock structure of
rectangular supersonic jet. A.I.A.A. Journal, Vol. 28 (1990) 1163-1170.
6. Dhatt, G., Touzot, G.: Une présentation de la méthode des éléments finis. Editions Maloine
S.A., Paris (1981).
7. Gresho, P.M.: On the theory of semi-implicit projection methods for viscous incompressible
flow and its implementation via a finite element method that also introduces a nearly consistent
mass matrix. Int. J. Numer. Meth.Fluids, Vol. 11 (1990) 621-659.
8. Hempel, R., Calkin R., Hess, R., Joppich, W., Keller, U., Koike, N., Oosterlee, C.W.,
Ritzdorf, H., Washio, T., Wypior, P., Ziegler, W.: Real applications on the new parallel system
NEC Cenju-3. Parallel Computing, Vol. 22 (1996) 131-148.
9. Chambarel, A., Onuphre, E.: Parallel computation of an unsteady compressible flow by the
Finite Element method. Lecture Notes in Computer Sciences, Springer-Verlag, Berlin
Heidelberg, New York (1997).
10. Gharib, M., Derango, P.:Flow studies of a two-dimensional flow. Physics of fluids, Vol. 31,
n°9 (1998) 2389-2394.

